// 1 bit input mixer
module mixer # (
            parameter                   WIDTH = 12
)
(
    input   logic                       clock,
    input   logic                       clock_sreset,
    input   logic signed [WIDTH-1:0]    data_in,
    input   logic signed [WIDTH-1:0]    sine_in,
    input   logic signed [WIDTH-1:0]    cosine_in,
    output  logic signed [WIDTH-1:0]    sine_out,
    output  logic signed [WIDTH-1:0]    cosine_out
);
            localparam                  WIDTHD = (WIDTH * 2);
            logic signed [WIDTH-1:0]    data_reg;
            logic signed [WIDTHD-1:0]   sine_prod, cosine_prod;

    always_ff @ (posedge clock) begin
        if (clock_sreset) begin
            data_reg <= {WIDTH{1'bx}};
            sine_out <= {WIDTH{1'bx}}; // not sure about these values
            cosine_out <= {WIDTH{1'bx}};
        end
        else begin
            data_reg <= data_in;
            sine_prod <= $signed(sine_in * data_reg) >>> WIDTH;
            cosine_prod <= $signed(cosine_in * data_reg) >>> WIDTH;
        end
    end
    
    assign sine_out = sine_prod[WIDTH-1:0];
    assign cosine_out = cosine_prod[WIDTH-1:0];

endmodule
