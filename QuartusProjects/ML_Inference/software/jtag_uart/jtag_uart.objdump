
jtag_uart.elf:     file format elf32-littlenios2
jtag_uart.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000000

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000184 memsz 0x00000184 flags r-x
    LOAD off    0x00001184 vaddr 0x04000184 paddr 0x04000188 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000118c vaddr 0x0400018c paddr 0x0400018c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00002000 vaddr 0x09004000 paddr 0x09004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  09004000  09004000  00002000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  09004020  09004020  00002020  2**0
                  CONTENTS
  2 .text         00000184  04000000  04000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  04000184  04000184  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  04000184  04000188  00001184  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0400018c  0400018c  0000118c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04000198  04000198  00002020  2**0
                  CONTENTS
  7 .onchip_ram   00000000  09004020  09004020  00002020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000108  00000000  00000000  00002048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00000735  00000000  00000000  00002150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000003dc  00000000  00000000  00002885  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000003ee  00000000  00000000  00002c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000118  00000000  00000000  00003050  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000408  00000000  00000000  00003168  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000021  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00003594  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000078  00000000  00000000  000035a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000431a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000006  00000000  00000000  0000431d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00004323  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00004324  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00004325  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0000432e  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00004337  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  00004340  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003a  00000000  00000000  00004348  2**0
                  CONTENTS, READONLY
 27 .jdi          00004aa0  00000000  00000000  00004382  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0007aeaa  00000000  00000000  00008e22  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
09004000 l    d  .entry	00000000 .entry
09004020 l    d  .exceptions	00000000 .exceptions
04000000 l    d  .text	00000000 .text
04000184 l    d  .rodata	00000000 .rodata
04000184 l    d  .rwdata	00000000 .rwdata
0400018c l    d  .bss	00000000 .bss
04000198 l    d  .sdram	00000000 .sdram
09004020 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../jtag_uart_bsp//obj/HAL/src/crt0.o
04000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 jtag_uart.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
04000124 g     F .text	0000002c alt_main
04000188 g       *ABS*	00000000 __flash_rwdata_start
04000184 g     O .rwdata	00000004 jtag_uart
0400017c g     F .text	00000008 altera_nios2_gen2_irq_init
09004000 g     F .entry	0000000c __reset
04000000 g       *ABS*	00000000 __flash_exceptions_start
04000190 g     O .bss	00000004 alt_argv
04008184 g       *ABS*	00000000 _gp
04000198 g       *ABS*	00000000 __bss_end
04000174 g     F .text	00000004 alt_dcache_flush_all
04000188 g       *ABS*	00000000 __ram_rwdata_end
04000184 g       *ABS*	00000000 __ram_rodata_end
04000198 g       *ABS*	00000000 end
08000000 g       *ABS*	00000000 __alt_stack_pointer
04000000 g     F .text	0000003c _start
04000170 g     F .text	00000004 alt_sys_init
04000184 g       *ABS*	00000000 __ram_rwdata_start
04000184 g       *ABS*	00000000 __ram_rodata_start
04000198 g       *ABS*	00000000 __alt_stack_base
0400018c g       *ABS*	00000000 __bss_start
0400003c g     F .text	00000008 main
0400018c g     O .bss	00000004 alt_envp
04000184 g       *ABS*	00000000 __flash_rodata_start
04000150 g     F .text	00000020 alt_irq_init
04000194 g     O .bss	00000004 alt_argc
09004020 g       *ABS*	00000000 __ram_exceptions_start
04000188 g       *ABS*	00000000 _edata
04000198 g       *ABS*	00000000 _end
09004020 g       *ABS*	00000000 __ram_exceptions_end
08000000 g       *ABS*	00000000 __alt_data_end
04000000 g       *ABS*	00000000 __alt_mem_sdram
09004000 g       *ABS*	00000000 __alt_mem_onchip_ram
0900400c g       .entry	00000000 _exit
04000178 g     F .text	00000004 alt_icache_flush_all
04000044 g     F .text	000000e0 alt_load



Disassembly of section .entry:

09004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 9004000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 9004004:	08400014 	ori	at,at,0
    jmp r1
 9004008:	0800683a 	jmp	at

0900400c <_exit>:
	...

Disassembly of section .text:

04000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000000:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000008:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 400000c:	d6a06114 	ori	gp,gp,33156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000010:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000014:	10806314 	ori	r2,r2,396

    movhi r3, %hi(__bss_end)
 4000018:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 400001c:	18c06614 	ori	r3,r3,408

    beq r2, r3, 1f
 4000020:	10c00326 	beq	r2,r3,4000030 <_start+0x30>

0:
    stw zero, (r2)
 4000024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400002c:	10fffd36 	bltu	r2,r3,4000024 <__ram_exceptions_end+0xfaffc004>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000030:	40000440 	call	4000044 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000034:	40001240 	call	4000124 <alt_main>

04000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000038:	003fff06 	br	4000038 <__ram_exceptions_end+0xfaffc018>

0400003c <main>:
// #include "sys/alt_stdio.h"

int main()
{
	return 0;
}
 400003c:	0005883a 	mov	r2,zero
 4000040:	f800283a 	ret

04000044 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000044:	deffff04 	addi	sp,sp,-4
 4000048:	01010034 	movhi	r4,1024
 400004c:	01410034 	movhi	r5,1024
 4000050:	dfc00015 	stw	ra,0(sp)
 4000054:	21006104 	addi	r4,r4,388
 4000058:	29406204 	addi	r5,r5,392

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 400005c:	2140061e 	bne	r4,r5,4000078 <alt_load+0x34>
 4000060:	01024034 	movhi	r4,2304
 4000064:	01410034 	movhi	r5,1024
 4000068:	21100804 	addi	r4,r4,16416
 400006c:	29400004 	addi	r5,r5,0
 4000070:	2140121e 	bne	r4,r5,40000bc <alt_load+0x78>
 4000074:	00000b06 	br	40000a4 <alt_load+0x60>
 4000078:	00c10034 	movhi	r3,1024
 400007c:	18c06204 	addi	r3,r3,392
 4000080:	1907c83a 	sub	r3,r3,r4
 4000084:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4000088:	10fff526 	beq	r2,r3,4000060 <__ram_exceptions_end+0xfaffc040>
    {
      *to++ = *from++;
 400008c:	114f883a 	add	r7,r2,r5
 4000090:	39c00017 	ldw	r7,0(r7)
 4000094:	110d883a 	add	r6,r2,r4
 4000098:	10800104 	addi	r2,r2,4
 400009c:	31c00015 	stw	r7,0(r6)
 40000a0:	003ff906 	br	4000088 <__ram_exceptions_end+0xfaffc068>
 40000a4:	01010034 	movhi	r4,1024
 40000a8:	01410034 	movhi	r5,1024
 40000ac:	21006104 	addi	r4,r4,388
 40000b0:	29406104 	addi	r5,r5,388

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 40000b4:	2140101e 	bne	r4,r5,40000f8 <alt_load+0xb4>
 40000b8:	00000b06 	br	40000e8 <alt_load+0xa4>
 40000bc:	00c24034 	movhi	r3,2304
 40000c0:	18d00804 	addi	r3,r3,16416
 40000c4:	1907c83a 	sub	r3,r3,r4
 40000c8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 40000cc:	10fff526 	beq	r2,r3,40000a4 <__ram_exceptions_end+0xfaffc084>
    {
      *to++ = *from++;
 40000d0:	114f883a 	add	r7,r2,r5
 40000d4:	39c00017 	ldw	r7,0(r7)
 40000d8:	110d883a 	add	r6,r2,r4
 40000dc:	10800104 	addi	r2,r2,4
 40000e0:	31c00015 	stw	r7,0(r6)
 40000e4:	003ff906 	br	40000cc <__ram_exceptions_end+0xfaffc0ac>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40000e8:	40001740 	call	4000174 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 40000ec:	dfc00017 	ldw	ra,0(sp)
 40000f0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 40000f4:	40001781 	jmpi	4000178 <alt_icache_flush_all>
 40000f8:	00c10034 	movhi	r3,1024
 40000fc:	18c06104 	addi	r3,r3,388
 4000100:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000104:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4000108:	18bff726 	beq	r3,r2,40000e8 <__ram_exceptions_end+0xfaffc0c8>
    {
      *to++ = *from++;
 400010c:	114f883a 	add	r7,r2,r5
 4000110:	39c00017 	ldw	r7,0(r7)
 4000114:	110d883a 	add	r6,r2,r4
 4000118:	10800104 	addi	r2,r2,4
 400011c:	31c00015 	stw	r7,0(r6)
 4000120:	003ff906 	br	4000108 <__ram_exceptions_end+0xfaffc0e8>

04000124 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4000124:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000128:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400012c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000130:	40001500 	call	4000150 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4000134:	40001700 	call	4000170 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4000138:	d1a00217 	ldw	r6,-32760(gp)
 400013c:	d1600317 	ldw	r5,-32756(gp)
 4000140:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 4000144:	dfc00017 	ldw	ra,0(sp)
 4000148:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 400014c:	400003c1 	jmpi	400003c <main>

04000150 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4000150:	deffff04 	addi	sp,sp,-4
 4000154:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2E, nios2e);
 4000158:	400017c0 	call	400017c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400015c:	00800044 	movi	r2,1
 4000160:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4000164:	dfc00017 	ldw	ra,0(sp)
 4000168:	dec00104 	addi	sp,sp,4
 400016c:	f800283a 	ret

04000170 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000170:	f800283a 	ret

04000174 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4000174:	f800283a 	ret

04000178 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4000178:	f800283a 	ret

0400017c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 400017c:	000170fa 	wrctl	ienable,zero
 4000180:	f800283a 	ret
