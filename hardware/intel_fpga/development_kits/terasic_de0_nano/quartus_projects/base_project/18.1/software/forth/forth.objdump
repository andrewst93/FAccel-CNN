
forth.elf:     file format elf32-littlenios2
forth.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00007868 memsz 0x00007868 flags r-x
    LOAD off    0x00008868 vaddr 0x00007868 paddr 0x000085ec align 2**12
         filesz 0x00000d84 memsz 0x00000d84 flags rw-
    LOAD off    0x0000a370 vaddr 0x00009370 paddr 0x00009370 align 2**12
         filesz 0x00000000 memsz 0x00010228 flags rw-
    LOAD off    0x0000a000 vaddr 0x02002000 paddr 0x02002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02002000  02002000  0000a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  02002020  02002020  0000a020  2**0
                  CONTENTS
  2 .text         00006b9c  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ccc  00006b9c  00006b9c  00007b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000d84  00007868  000085ec  00008868  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00010228  00009370  00009370  0000a370  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00019598  00019598  0000a020  2**0
                  CONTENTS
  7 .onchip_ram   00000000  02002020  02002020  0000a020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000a020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000888  00000000  00000000  0000a048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00017f3d  00000000  00000000  0000a8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005bf1  00000000  00000000  0002280d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000645f  00000000  00000000  000283fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001e1c  00000000  00000000  0002e860  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002ab0  00000000  00000000  0003067c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004718  00000000  00000000  0003312c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00037844  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000006c8  00000000  00000000  00037858  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003bd8e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000006  00000000  00000000  0003bd91  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003bd97  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003bd98  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0003bd99  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0003bda2  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0003bdab  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0003bdb4  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000006d  00000000  00000000  0003bdbe  2**0
                  CONTENTS, READONLY
 27 .jdi          00004b97  00000000  00000000  0003be2b  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00047fd7  00000000  00000000  000409c2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02002000 l    d  .entry	00000000 .entry
02002020 l    d  .exceptions	00000000 .exceptions
00000000 l    d  .text	00000000 .text
00006b9c l    d  .rodata	00000000 .rodata
00007868 l    d  .rwdata	00000000 .rwdata
00009370 l    d  .bss	00000000 .bss
00019598 l    d  .sdram	00000000 .sdram
02002020 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../forth_bsp//obj/HAL/src/crt0.o
00000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 forth.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00007868 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003edc l     F .text	00000008 __fp_unlock
00003ef0 l     F .text	0000019c __sinit.part.1
0000408c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 refill.c
00005338 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
00005aa0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000085e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000823c l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00006354 l     F .text	0000008c alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000083f0 g     O .rwdata	00000004 commaByte_name
00000f84 g     F .text	00000060 zbranch
00008594 g     O .rwdata	00000004 ddiv_name
00008590 g     O .rwdata	00000004 ddiv_id
00009378 g     O .bss	00000004 base
000082f4 g     O .rwdata	00000004 doBase_name
000084e8 g     O .rwdata	00000004 doAnd_id
000058cc g     F .text	00000054 _isatty_r
00005dec g     F .text	00000060 alt_main
00005920 g     F .text	00000060 _lseek_r
00001acc g     F .text	00000064 rot
0000829c g     O .rwdata	00000004 key_id
00008588 g     O .rwdata	00000004 dmul_name
000085ec g       *ABS*	00000000 __flash_rwdata_start
00002180 g     F .text	00000058 dequals
00001d3c g     F .text	00000058 equals
00008300 g     O .rwdata	00000004 doState_name
00008384 g     O .rwdata	00000004 s0_r_name
0000840c g     O .rwdata	00000001 find_flags
00019598 g       *ABS*	00000000 __alt_heap_start
0000854c g     O .rwdata	00000004 dsmaller_name
00005654 g     F .text	0000005c __sseek
0000423c g     F .text	00000010 __sinit
00003988 g     F .text	00000140 __swbuf_r
00008420 g     O .rwdata	00000004 number_name
00004094 g     F .text	00000078 __sfmoreglue
0000848c g     O .rwdata	00000004 colon_name
00005e50 g     F .text	00000004 __malloc_unlock
00009518 g     O .bss	00000080 lineBuffer
00001090 g     F .text	00000030 s0_r
000008f8 g     F .text	00000220 parseNumber
000083c4 g     O .rwdata	00000001 memWriteByte_flags
0000937c g     O .bss	00000002 lastIp
0000841c g     O .rwdata	00000004 number_id
000002ec g     F .text	0000007c tos
00009380 g     O .bss	00000004 rstack
000084b0 g     O .rwdata	00000004 doJ_name
0000843c g     O .rwdata	00000001 quit_flags
000084e4 g     O .rwdata	00000001 larger_flags
0000849c g     O .rwdata	00000001 semicolon_flags
000082b8 g     O .rwdata	00000004 drop_name
000082fc g     O .rwdata	00000004 doState_id
00004224 g     F .text	00000018 _cleanup
000082ac g     O .rwdata	00000004 emit_name
00000e94 g     F .text	00000038 rtos
000084c0 g     O .rwdata	00000001 tick_flags
00008378 g     O .rwdata	00000004 doFree_name
000083ac g     O .rwdata	00000001 dup_flags
00001be0 g     F .text	00000048 semicolon
000065dc g     F .text	00000008 altera_nios2_gen2_irq_init
00001310 g     F .text	00000054 commaByte
000084b4 g     O .rwdata	00000001 doJ_flags
00008558 g     O .rwdata	00000004 dlarger_name
02002000 g     F .entry	0000000c __reset
000015ec g     F .text	00000370 quit
0000264c g     F .text	00000134 addBuiltin
000082e4 g     O .rwdata	00000004 doHere_id
00000000 g       *ABS*	00000000 __flash_exceptions_start
00005870 g     F .text	0000005c _fstat_r
000085a4 g     O .rwdata	00000001 dswap_flags
000010c0 g     F .text	00000048 dsp_r
000093c4 g     O .bss	00000004 errno
00003974 g     F .text	00000014 __srget
00008560 g     O .rwdata	00000004 dusmaller_id
00008514 g     O .rwdata	00000001 litstring_flags
000055d0 g     F .text	00000008 __seofread
000082b0 g     O .rwdata	00000001 emit_flags
0000195c g     F .text	00000050 plus
000083c8 g     O .rwdata	00000004 swap_id
00001ee4 g     F .text	00000044 p_dup
00001dec g     F .text	00000058 larger
00001c28 g     F .text	00000048 rget
000083b4 g     O .rwdata	00000004 memWrite_name
000093cc g     O .bss	00000004 alt_argv
00010268 g       *ABS*	00000000 _gp
00000b5c g     F .text	00000030 doCellSize
0000827c g     O .rwdata	00000004 doCellSize_name
000084a8 g     O .rwdata	00000001 rget_flags
000084b8 g     O .rwdata	00000004 tick_id
00000710 g     F .text	0000004c up
00008484 g     O .rwdata	00000001 doCreate_flags
00008344 g     O .rwdata	00000004 key_p_id
00009384 g     O .bss	00000004 latest
0000832c g     O .rwdata	00000004 rtos_id
00008598 g     O .rwdata	00000001 ddiv_flags
000021d8 g     F .text	00000058 dsmaller
000084fc g     O .rwdata	00000001 doOr_flags
00008094 g     O .rwdata	00000180 alt_fd_list
000083bc g     O .rwdata	00000004 memWriteByte_id
000036a0 g     F .text	00000070 _getc_r
00008490 g     O .rwdata	00000001 colon_flags
00003710 g     F .text	00000088 getc
0000232c g     F .text	0000004c dminus
00008440 g     O .rwdata	00000004 plus_id
00008524 g     O .rwdata	00000004 timesDivide_id
00008570 g     O .rwdata	00000004 dplus_name
000065e4 g     F .text	00000078 alt_find_dev
000083d4 g     O .rwdata	00000004 over_id
00003ee4 g     F .text	0000000c _cleanup_r
00008354 g     O .rwdata	00000004 branch_name
000063e0 g     F .text	00000074 alt_io_redirect
00001e94 g     F .text	00000050 doOr
00009370 g     O .bss	00000004 charsInLineBuffer
00000d48 g     F .text	00000030 doHere
00006b9c g       *ABS*	00000000 __DTOR_END__
00008494 g     O .rwdata	00000004 semicolon_id
0000121c g     F .text	00000050 swap
00008338 g     O .rwdata	00000004 stor_id
00006170 g     F .text	00000074 altera_avalon_jtag_uart_read
000035bc g     F .text	00000064 .hidden __udivsi3
00005b70 g     F .text	000000a0 isatty
00008268 g     O .rwdata	00000004 initScript
00008270 g     O .rwdata	00000004 docol_name
00008280 g     O .rwdata	00000001 doCellSize_flags
00008428 g     O .rwdata	00000004 lit_id
000083d8 g     O .rwdata	00000004 over_name
000093c0 g     O .bss	00000004 __malloc_top_pad
000083b8 g     O .rwdata	00000001 memWrite_flags
0000842c g     O .rwdata	00000004 lit_name
00008298 g     O .rwdata	00000001 memReadByte_flags
0000830c g     O .rwdata	00000004 gotoInterpreter_name
0000857c g     O .rwdata	00000004 dminus_name
000084f4 g     O .rwdata	00000004 doOr_id
00005528 g     F .text	00000054 _sbrk_r
00008450 g     O .rwdata	00000004 minus_name
00008458 g     O .rwdata	00000004 mul_id
00008410 g     O .rwdata	00000004 cfa_id
000000f0 g     F .text	00000034 keyWaiting
00005980 g     F .text	00000060 _read_r
00008500 g     O .rwdata	00000004 p_dup_id
000085d0 g     O .rwdata	00000004 alt_max_fd
0000576c g     F .text	000000f0 _fclose_r
00003eac g     F .text	00000030 fflush
000093bc g     O .bss	00000004 __malloc_max_sbrked_mem
000005f4 g     F .text	0000011c readWord
00002230 g     F .text	00000058 dlarger
00002410 g     F .text	00000048 dswap
00008470 g     O .rwdata	00000004 rot_id
00005d24 g     F .text	000000c8 lseek
000085c0 g     O .rwdata	00000004 _global_impure_ptr
00001b30 g     F .text	00000060 doCreate
00009598 g     O .bss	00010000 memory
00019598 g       *ABS*	00000000 __bss_end
00009388 g     O .bss	00000004 stack
00008388 g     O .rwdata	00000001 s0_r_flags
000084dc g     O .rwdata	00000004 larger_id
000082a0 g     O .rwdata	00000004 key_name
000084a4 g     O .rwdata	00000004 rget_name
000085b0 g     O .rwdata	00000001 dover_flags
000084f8 g     O .rwdata	00000004 doOr_name
00008564 g     O .rwdata	00000004 dusmaller_name
0000425c g     F .text	00000018 __fp_lock_all
0000837c g     O .rwdata	00000001 doFree_flags
00001f28 g     F .text	00000094 litstring
000085b4 g     O .rwdata	00000004 drot_id
0000938c g     O .bss	00000004 state
00008474 g     O .rwdata	00000004 rot_name
00008290 g     O .rwdata	00000004 memReadByte_id
00008538 g     O .rwdata	00000001 timesDivideMod_flags
00008214 g     O .rwdata	00000028 alt_dev_null
00008360 g     O .rwdata	00000004 zbranch_name
00009390 g     O .bss	00000004 errorFlag
00000da8 g     F .text	00000030 doState
00008368 g     O .rwdata	00000004 toggleImmediate_id
000014f0 g     F .text	000000ac number
000083e0 g     O .rwdata	00000004 comma_id
00008348 g     O .rwdata	00000004 key_p_name
000083a8 g     O .rwdata	00000004 dup_name
0000853c g     O .rwdata	00000004 dequals_id
000082e0 g     O .rwdata	00000001 doLatest_flags
00006218 g     F .text	00000004 alt_dcache_flush_all
00000d78 g     F .text	00000030 doBase
00000084 g     F .text	0000006c llkey
00000fe4 g     F .text	0000006c toggleImmediate
000082dc g     O .rwdata	00000004 doLatest_name
000084cc g     O .rwdata	00000001 equals_flags
000085ec g       *ABS*	00000000 __ram_rwdata_end
00000cf0 g     F .text	00000028 bye
000085d4 g     O .rwdata	00000008 alt_dev_list
00006010 g     F .text	00000110 write
00003798 g     F .text	000000a0 _putc_r
00007868 g       *ABS*	00000000 __ram_rodata_end
00005aa8 g     F .text	000000c8 fstat
00001e44 g     F .text	00000050 doAnd
000084a0 g     O .rwdata	00000004 rget_id
00008274 g     O .rwdata	00000001 docol_flags
000082a8 g     O .rwdata	00000004 emit_id
00000d18 g     F .text	00000030 doLatest
00008288 g     O .rwdata	00000004 memRead_name
00003620 g     F .text	00000058 .hidden __umodsi3
00008340 g     O .rwdata	00000001 stor_flags
0000859c g     O .rwdata	00000004 dswap_id
000082c8 g     O .rwdata	00000001 doExit_flags
00019598 g       *ABS*	00000000 end
00008404 g     O .rwdata	00000004 find_id
00002458 g     F .text	00000050 dover
00000204 g     F .text	0000006c tell
000084c8 g     O .rwdata	00000004 equals_name
0000852c g     O .rwdata	00000001 timesDivide_flags
00008350 g     O .rwdata	00000004 branch_id
00006b9c g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00001fbc g     F .text	00000050 xor
000011c8 g     F .text	00000054 memWriteByte
000083b0 g     O .rwdata	00000004 memWrite_id
000061e4 g     F .text	00000034 altera_avalon_jtag_uart_write
00008508 g     O .rwdata	00000001 p_dup_flags
0000424c g     F .text	00000004 __sfp_lock_acquire
00008468 g     O .rwdata	00000004 divmod_name
00008308 g     O .rwdata	00000004 gotoInterpreter_id
00009394 g     O .bss	00000002 commandAddress
000043b0 g     F .text	00000310 _free_r
0000855c g     O .rwdata	00000001 dlarger_flags
00008390 g     O .rwdata	00000004 dsp_r_name
00008548 g     O .rwdata	00000004 dsmaller_id
00006a08 g     F .text	00000180 __call_exitprocs
00003900 g     F .text	00000074 __srget_r
000083ec g     O .rwdata	00000004 commaByte_id
000085c8 g     O .rwdata	00000004 __malloc_sbrk_base
00000000 g     F .text	0000003c _start
00008278 g     O .rwdata	00000004 doCellSize_id
0000846c g     O .rwdata	00000001 divmod_flags
00005e54 g     F .text	00000114 read
00008304 g     O .rwdata	00000001 doState_flags
00006140 g     F .text	00000010 alt_sys_init
00000e2c g     F .text	00000068 hide
000068f0 g     F .text	00000118 __register_exitproc
00008478 g     O .rwdata	00000001 rot_flags
00008310 g     O .rwdata	00000001 gotoInterpreter_flags
000025f4 g     F .text	00000058 slen
00008488 g     O .rwdata	00000004 colon_id
0000833c g     O .rwdata	00000004 stor_name
000083a4 g     O .rwdata	00000004 dup_id
00003678 g     F .text	00000028 .hidden __mulsi3
00007868 g       *ABS*	00000000 __ram_rwdata_start
00006b9c g       *ABS*	00000000 __ram_rodata_start
000094f0 g     O .bss	00000028 __malloc_current_mallinfo
0000847c g     O .rwdata	00000004 doCreate_id
0000850c g     O .rwdata	00000004 litstring_id
0000834c g     O .rwdata	00000001 key_p_flags
000083c0 g     O .rwdata	00000004 memWriteByte_name
000013a8 g     F .text	0000005c find
00002500 g     F .text	000000f4 createWord
000012bc g     F .text	00000054 comma
00006150 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
000085bc g     O .rwdata	00000001 drot_flags
00006708 g     F .text	00000088 alt_get_fd
00009398 g     O .bss	00000004 rsp
00005718 g     F .text	00000054 _close_r
00008334 g     O .rwdata	00000001 rtos_flags
0000836c g     O .rwdata	00000004 toggleImmediate_name
000067dc g     F .text	0000007c memcmp
000022e0 g     F .text	0000004c dplus
00008330 g     O .rwdata	00000004 rtos_name
00019598 g       *ABS*	00000000 __alt_stack_base
000082b4 g     O .rwdata	00000004 drop_id
00000b18 g     F .text	00000044 docol
00003ae0 g     F .text	00000154 __swsetup_r
00008444 g     O .rwdata	00000004 plus_name
000084ac g     O .rwdata	00000004 doJ_id
00000ecc g     F .text	00000038 stor
00001ce0 g     F .text	0000005c tick
0000410c g     F .text	00000118 __sfp
000003e8 g     F .text	0000003c dpop
00007c8c g     O .rwdata	00000408 __malloc_av_
00008528 g     O .rwdata	00000004 timesDivide_name
00004258 g     F .text	00000004 __sinit_lock_release
0000858c g     O .rwdata	00000001 dmul_flags
000082c4 g     O .rwdata	00000004 doExit_name
0000557c g     F .text	00000054 __sread
00001404 g     F .text	00000074 getCfa
00008568 g     O .rwdata	00000001 dusmaller_flags
0000665c g     F .text	000000ac alt_find_file
000019fc g     F .text	00000058 mul
0000621c g     F .text	0000006c alt_dev_llist_insert
00005e4c g     F .text	00000004 __malloc_lock
000083e4 g     O .rwdata	00000004 comma_name
00005fc4 g     F .text	0000004c sbrk
00000270 g     F .text	0000007c pop
00003e50 g     F .text	0000005c _fflush_r
0000838c g     O .rwdata	00000004 dsp_r_id
0000828c g     O .rwdata	00000001 memRead_flags
00008324 g     O .rwdata	00000004 hide_name
00008574 g     O .rwdata	00000001 dplus_flags
00008498 g     O .rwdata	00000004 semicolon_name
00009370 g       *ABS*	00000000 __bss_start
00005210 g     F .text	00000128 memset
00008370 g     O .rwdata	00000001 toggleImmediate_flags
00002780 g     F .text	00000d44 main
000093c8 g     O .bss	00000004 alt_envp
000082ec g     O .rwdata	00000001 doHere_flags
000093b8 g     O .bss	00000004 __malloc_max_total_mem
00006160 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0000126c g     F .text	00000050 over
00003ac8 g     F .text	00000018 __swbuf
0000835c g     O .rwdata	00000004 zbranch_id
00000c94 g     F .text	0000002c drop
0000939c g     O .bss	00000002 quit_address
00000c54 g     F .text	00000040 emit
000056b0 g     F .text	00000008 __sclose
00008520 g     O .rwdata	00000001 xor_flags
02000000 g       *ABS*	00000000 __alt_heap_limit
00008398 g     O .rwdata	00000004 not_id
000085b8 g     O .rwdata	00000004 drot_name
0000585c g     F .text	00000014 fclose
00008584 g     O .rwdata	00000004 dmul_id
00001b90 g     F .text	00000050 colon
00000f3c g     F .text	00000048 branch
00004a04 g     F .text	0000080c _malloc_r
00008320 g     O .rwdata	00000004 hide_id
0000851c g     O .rwdata	00000004 xor_name
000082a4 g     O .rwdata	00000001 key_flags
000085e4 g     O .rwdata	00000004 alt_errno
000085a0 g     O .rwdata	00000004 dswap_name
00000c1c g     F .text	00000038 key
000084c4 g     O .rwdata	00000004 equals_id
000046c0 g     F .text	000000c4 _fwalk
000004f8 g     F .text	00000080 rpush
0000856c g     O .rwdata	00000004 dplus_id
00003838 g     F .text	000000c8 putc
000034c4 g     F .text	00000084 .hidden __divsi3
00001478 g     F .text	00000078 cfa
0000428c g     F .text	00000124 _malloc_trim_r
00006b9c g       *ABS*	00000000 __CTOR_END__
000083f4 g     O .rwdata	00000001 commaByte_flags
0000826c g     O .rwdata	00000004 docol_id
00006b9c g       *ABS*	00000000 __flash_rodata_start
00008550 g     O .rwdata	00000001 dsmaller_flags
00006b9c g       *ABS*	00000000 __DTOR_LIST__
000019ac g     F .text	00000050 minus
00001144 g     F .text	00000038 dup
000093a0 g     O .bss	00000004 exitReq
00006120 g     F .text	00000020 alt_irq_init
00005f68 g     F .text	0000005c alt_release_fd
00008544 g     O .rwdata	00000001 dequals_flags
00008530 g     O .rwdata	00000004 timesDivideMod_id
000083cc g     O .rwdata	00000004 swap_name
0000117c g     F .text	0000004c memWrite
00008534 g     O .rwdata	00000004 timesDivideMod_name
00000dd8 g     F .text	00000028 gotoInterpreter
00006790 g     F .text	00000014 atexit
00008554 g     O .rwdata	00000004 dlarger_id
000056b8 g     F .text	00000060 _write_r
000084e0 g     O .rwdata	00000004 larger_name
0000003c g     F .text	00000048 putkey
000082c0 g     O .rwdata	00000004 doExit_id
00001c70 g     F .text	00000070 doJ
0000839c g     O .rwdata	00000004 not_name
00000578 g     F .text	00000038 readMem
00008364 g     O .rwdata	00000001 zbranch_flags
000085c4 g     O .rwdata	00000004 _impure_ptr
000093d0 g     O .bss	00000004 alt_argc
00003c34 g     F .text	0000021c __sflush_r
000093a4 g     O .bss	00000004 sp
000062ec g     F .text	00000064 _do_dtors
000024a8 g     F .text	00000058 drot
000093a8 g     O .bss	00000002 next
000082d4 g     O .rwdata	00000001 bye_flags
00000124 g     F .text	000000e0 getkey
0000200c g     F .text	000000a0 timesDivide
00000b8c g     F .text	00000044 memRead
00005354 g     F .text	000001d4 __srefill_r
00008448 g     O .rwdata	00000001 plus_flags
00000e00 g     F .text	0000002c gotoCompiler
00004274 g     F .text	00000018 __fp_unlock_all
00008430 g     O .rwdata	00000001 lit_flags
000093d4 g     O .bss	0000011c builtins
000083e8 g     O .rwdata	00000001 comma_flags
000085ac g     O .rwdata	00000004 dover_name
00008460 g     O .rwdata	00000001 mul_flags
000085dc g     O .rwdata	00000008 alt_fs_list
00008438 g     O .rwdata	00000004 quit_name
000082cc g     O .rwdata	00000004 bye_id
00008358 g     O .rwdata	00000001 branch_flags
00001a54 g     F .text	00000078 divmod
000084d4 g     O .rwdata	00000004 smaller_name
02002020 g       *ABS*	00000000 __ram_exceptions_start
0000831c g     O .rwdata	00000001 gotoCompiler_flags
000085a8 g     O .rwdata	00000004 dover_id
00008434 g     O .rwdata	00000004 quit_id
000083fc g     O .rwdata	00000004 word_name
000082e8 g     O .rwdata	00000004 doHere_name
000023c4 g     F .text	0000004c ddiv
000085ec g       *ABS*	00000000 _edata
0000075c g     F .text	0000019c findWord
00019598 g       *ABS*	00000000 _end
00002288 g     F .text	00000058 dusmaller
00001050 g     F .text	00000040 doFree
00008424 g     O .rwdata	00000001 number_flags
000093ac g     O .bss	00000004 initscript_pos
02002020 g       *ABS*	00000000 __ram_exceptions_end
00008294 g     O .rwdata	00000004 memReadByte_name
00008464 g     O .rwdata	00000004 divmod_id
00008504 g     O .rwdata	00000004 p_dup_name
000084d8 g     O .rwdata	00000001 smaller_flags
00008578 g     O .rwdata	00000004 dminus_id
00008580 g     O .rwdata	00000001 dminus_flags
000055d8 g     F .text	0000007c __swrite
000085cc g     O .rwdata	00000004 __malloc_trim_threshold
000067a4 g     F .text	00000038 exit
0000845c g     O .rwdata	00000004 mul_name
00004784 g     F .text	000000c4 _fwalk_reent
00003548 g     F .text	00000074 .hidden __modsi3
000082f0 g     O .rwdata	00000004 doBase_id
02000000 g       *ABS*	00000000 __alt_data_end
00004250 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00000f04 g     F .text	00000038 key_p
00008510 g     O .rwdata	00000004 litstring_name
02002000 g       *ABS*	00000000 __alt_mem_onchip_ram
00008540 g     O .rwdata	00000004 dequals_name
000005b0 g     F .text	00000044 writeMem
00008374 g     O .rwdata	00000004 doFree_id
00008408 g     O .rwdata	00000004 find_name
00008328 g     O .rwdata	00000001 hide_flags
00008480 g     O .rwdata	00000004 doCreate_name
00006b88 g     F .text	00000014 _exit
00004848 g     F .text	000001bc __smakebuf_r
000020ac g     F .text	000000d4 timesDivideMod
00001d94 g     F .text	00000058 smaller
00006858 g     F .text	00000098 strlen
00008394 g     O .rwdata	00000001 dsp_r_flags
00006454 g     F .text	00000188 open
000082f8 g     O .rwdata	00000001 doBase_flags
000093b0 g     O .bss	00000004 here
00008414 g     O .rwdata	00000004 cfa_name
00008284 g     O .rwdata	00000004 memRead_id
00008418 g     O .rwdata	00000001 cfa_flags
000082d8 g     O .rwdata	00000004 doLatest_id
000083f8 g     O .rwdata	00000004 word_id
00006350 g     F .text	00000004 alt_icache_flush_all
00009374 g     O .bss	00000004 positionInLineBuffer
000082bc g     O .rwdata	00000001 drop_flags
000084ec g     O .rwdata	00000004 doAnd_name
00008400 g     O .rwdata	00000001 word_flags
000084d0 g     O .rwdata	00000004 smaller_id
000083dc g     O .rwdata	00000001 over_flags
0000159c g     F .text	00000050 lit
0000047c g     F .text	0000007c rpop
000082d0 g     O .rwdata	00000004 bye_name
00008318 g     O .rwdata	00000004 gotoCompiler_name
00008380 g     O .rwdata	00000004 s0_r_id
00000424 g     F .text	00000058 dpush
00008454 g     O .rwdata	00000001 minus_flags
000084f0 g     O .rwdata	00000001 doAnd_flags
00008314 g     O .rwdata	00000004 gotoCompiler_id
00000368 g     F .text	00000080 push
00008518 g     O .rwdata	00000004 xor_id
000084bc g     O .rwdata	00000004 tick_name
000083d0 g     O .rwdata	00000001 swap_flags
00006288 g     F .text	00000064 _do_ctors
000093b4 g     O .bss	00000002 maxBuiltinAddress
000083a0 g     O .rwdata	00000001 not_flags
00000cc0 g     F .text	00000030 doExit
00000bd0 g     F .text	0000004c memReadByte
000059e0 g     F .text	000000c0 close
00001364 g     F .text	00000044 word
00001108 g     F .text	0000003c not
00005c10 g     F .text	00000114 alt_load
00002378 g     F .text	0000004c dmul
00004254 g     F .text	00000004 __sinit_lock_acquire
0000844c g     O .rwdata	00000004 minus_id



Disassembly of section .entry:

02002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2002000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 2002004:	08400014 	ori	at,at,0
    jmp r1
 2002008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
       0:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
       4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
       8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
       c:	d6809a14 	ori	gp,gp,616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      10:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      14:	10a4dc14 	ori	r2,r2,37744

    movhi r3, %hi(__bss_end)
      18:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
      1c:	18e56614 	ori	r3,r3,38296

    beq r2, r3, 1f
      20:	10c00326 	beq	r2,r3,30 <_start+0x30>

0:
    stw zero, (r2)
      24:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      28:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      2c:	10fffd36 	bltu	r2,r3,24 <__ram_exceptions_end+0xfdffe004>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      30:	0005c100 	call	5c10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      34:	0005dec0 	call	5dec <alt_main>

00000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      38:	003fff06 	br	38 <__ram_exceptions_end+0xfdffe018>

0000003c <putkey>:
/******************************************************************************/

/* The primary data output function. This is the place to change if you want
* to e.g. output data on a microcontroller via a serial interface. */
void putkey(char c)
{
      3c:	defffd04 	addi	sp,sp,-12
      40:	dfc00215 	stw	ra,8(sp)
      44:	df000115 	stw	fp,4(sp)
      48:	df000104 	addi	fp,sp,4
      4c:	2005883a 	mov	r2,r4
      50:	e0bfff05 	stb	r2,-4(fp)
    putchar(c);
      54:	e0ffff07 	ldb	r3,-4(fp)
      58:	d0a0d717 	ldw	r2,-31908(gp)
      5c:	10800217 	ldw	r2,8(r2)
      60:	100b883a 	mov	r5,r2
      64:	1809883a 	mov	r4,r3
      68:	00038380 	call	3838 <putc>
}
      6c:	0001883a 	nop
      70:	e037883a 	mov	sp,fp
      74:	dfc00117 	ldw	ra,4(sp)
      78:	df000017 	ldw	fp,0(sp)
      7c:	dec00204 	addi	sp,sp,8
      80:	f800283a 	ret

00000084 <llkey>:

/* The primary data input function. This is where you place the code to e.g.
* read from a serial line. */
int llkey()
{
      84:	defffe04 	addi	sp,sp,-8
      88:	dfc00115 	stw	ra,4(sp)
      8c:	df000015 	stw	fp,0(sp)
      90:	d839883a 	mov	fp,sp
    if (*initscript_pos) return *(initscript_pos++);
      94:	d0a45117 	ldw	r2,-28348(gp)
      98:	10800003 	ldbu	r2,0(r2)
      9c:	10803fcc 	andi	r2,r2,255
      a0:	1080201c 	xori	r2,r2,128
      a4:	10bfe004 	addi	r2,r2,-128
      a8:	10000826 	beq	r2,zero,cc <llkey+0x48>
      ac:	d0a45117 	ldw	r2,-28348(gp)
      b0:	10c00044 	addi	r3,r2,1
      b4:	d0e45115 	stw	r3,-28348(gp)
      b8:	10800003 	ldbu	r2,0(r2)
      bc:	10803fcc 	andi	r2,r2,255
      c0:	1080201c 	xori	r2,r2,128
      c4:	10bfe004 	addi	r2,r2,-128
      c8:	00000406 	br	dc <llkey+0x58>
    return getchar();
      cc:	d0a0d717 	ldw	r2,-31908(gp)
      d0:	10800117 	ldw	r2,4(r2)
      d4:	1009883a 	mov	r4,r2
      d8:	00037100 	call	3710 <getc>
}
      dc:	e037883a 	mov	sp,fp
      e0:	dfc00117 	ldw	ra,4(sp)
      e4:	df000017 	ldw	fp,0(sp)
      e8:	dec00204 	addi	sp,sp,8
      ec:	f800283a 	ret

000000f0 <keyWaiting>:

/* Anything waiting in the keyboard buffer? */
int keyWaiting()
{
      f0:	deffff04 	addi	sp,sp,-4
      f4:	df000015 	stw	fp,0(sp)
      f8:	d839883a 	mov	fp,sp
    return positionInLineBuffer < charsInLineBuffer ? -1 : 0;
      fc:	d0e44317 	ldw	r3,-28404(gp)
     100:	d0a44217 	ldw	r2,-28408(gp)
     104:	1880020e 	bge	r3,r2,110 <keyWaiting+0x20>
     108:	00bfffc4 	movi	r2,-1
     10c:	00000106 	br	114 <keyWaiting+0x24>
     110:	0005883a 	mov	r2,zero
}
     114:	e037883a 	mov	sp,fp
     118:	df000017 	ldw	fp,0(sp)
     11c:	dec00104 	addi	sp,sp,4
     120:	f800283a 	ret

00000124 <getkey>:

/* Line buffered character input. We're duplicating the functionality of the
* stdio library here to make the code easier to port to other input sources */
int getkey()
{
     124:	defffd04 	addi	sp,sp,-12
     128:	dfc00215 	stw	ra,8(sp)
     12c:	df000115 	stw	fp,4(sp)
     130:	df000104 	addi	fp,sp,4
    int c;

    if (keyWaiting())
     134:	00000f00 	call	f0 <keyWaiting>
     138:	10000b26 	beq	r2,zero,168 <getkey+0x44>
        return lineBuffer[positionInLineBuffer++];
     13c:	d0e44317 	ldw	r3,-28404(gp)
     140:	18800044 	addi	r2,r3,1
     144:	d0a44315 	stw	r2,-28404(gp)
     148:	00800074 	movhi	r2,1
     14c:	10a54604 	addi	r2,r2,-27368
     150:	10c5883a 	add	r2,r2,r3
     154:	10800003 	ldbu	r2,0(r2)
     158:	10803fcc 	andi	r2,r2,255
     15c:	1080201c 	xori	r2,r2,128
     160:	10bfe004 	addi	r2,r2,-128
     164:	00002206 	br	1f0 <getkey+0xcc>

    charsInLineBuffer = 0;
     168:	d0244215 	stw	zero,-28408(gp)
    while ((c = llkey()) != EOF)
     16c:	00000f06 	br	1ac <getkey+0x88>
    {
        if (charsInLineBuffer == sizeof(lineBuffer)) break;
     170:	d0a44217 	ldw	r2,-28408(gp)
     174:	10802018 	cmpnei	r2,r2,128
     178:	10001226 	beq	r2,zero,1c4 <getkey+0xa0>
        lineBuffer[charsInLineBuffer++] = c;
     17c:	d0e44217 	ldw	r3,-28408(gp)
     180:	18800044 	addi	r2,r3,1
     184:	d0a44215 	stw	r2,-28408(gp)
     188:	e0bfff17 	ldw	r2,-4(fp)
     18c:	1009883a 	mov	r4,r2
     190:	00800074 	movhi	r2,1
     194:	10a54604 	addi	r2,r2,-27368
     198:	10c5883a 	add	r2,r2,r3
     19c:	11000005 	stb	r4,0(r2)
        if (c == '\n') break;
     1a0:	e0bfff17 	ldw	r2,-4(fp)
     1a4:	10800298 	cmpnei	r2,r2,10
     1a8:	10000826 	beq	r2,zero,1cc <getkey+0xa8>

    if (keyWaiting())
        return lineBuffer[positionInLineBuffer++];

    charsInLineBuffer = 0;
    while ((c = llkey()) != EOF)
     1ac:	00000840 	call	84 <llkey>
     1b0:	e0bfff15 	stw	r2,-4(fp)
     1b4:	e0bfff17 	ldw	r2,-4(fp)
     1b8:	10bfffd8 	cmpnei	r2,r2,-1
     1bc:	103fec1e 	bne	r2,zero,170 <__ram_exceptions_end+0xfdffe150>
     1c0:	00000306 	br	1d0 <getkey+0xac>
    {
        if (charsInLineBuffer == sizeof(lineBuffer)) break;
     1c4:	0001883a 	nop
     1c8:	00000106 	br	1d0 <getkey+0xac>
        lineBuffer[charsInLineBuffer++] = c;
        if (c == '\n') break;
     1cc:	0001883a 	nop
    }

    positionInLineBuffer = 1;
     1d0:	00800044 	movi	r2,1
     1d4:	d0a44315 	stw	r2,-28404(gp)
    return lineBuffer[0];
     1d8:	00800074 	movhi	r2,1
     1dc:	10a54604 	addi	r2,r2,-27368
     1e0:	10800003 	ldbu	r2,0(r2)
     1e4:	10803fcc 	andi	r2,r2,255
     1e8:	1080201c 	xori	r2,r2,128
     1ec:	10bfe004 	addi	r2,r2,-128
}
     1f0:	e037883a 	mov	sp,fp
     1f4:	dfc00117 	ldw	ra,4(sp)
     1f8:	df000017 	ldw	fp,0(sp)
     1fc:	dec00204 	addi	sp,sp,8
     200:	f800283a 	ret

00000204 <tell>:

/* C string output */
void tell(const char *str)
{
     204:	defffd04 	addi	sp,sp,-12
     208:	dfc00215 	stw	ra,8(sp)
     20c:	df000115 	stw	fp,4(sp)
     210:	df000104 	addi	fp,sp,4
     214:	e13fff15 	stw	r4,-4(fp)
    while (*str)
     218:	00000906 	br	240 <tell+0x3c>
        putkey(*str++);
     21c:	e0bfff17 	ldw	r2,-4(fp)
     220:	10c00044 	addi	r3,r2,1
     224:	e0ffff15 	stw	r3,-4(fp)
     228:	10800003 	ldbu	r2,0(r2)
     22c:	10803fcc 	andi	r2,r2,255
     230:	1080201c 	xori	r2,r2,128
     234:	10bfe004 	addi	r2,r2,-128
     238:	1009883a 	mov	r4,r2
     23c:	000003c0 	call	3c <putkey>
}

/* C string output */
void tell(const char *str)
{
    while (*str)
     240:	e0bfff17 	ldw	r2,-4(fp)
     244:	10800003 	ldbu	r2,0(r2)
     248:	10803fcc 	andi	r2,r2,255
     24c:	1080201c 	xori	r2,r2,128
     250:	10bfe004 	addi	r2,r2,-128
     254:	103ff11e 	bne	r2,zero,21c <__ram_exceptions_end+0xfdffe1fc>
        putkey(*str++);
}
     258:	0001883a 	nop
     25c:	e037883a 	mov	sp,fp
     260:	dfc00117 	ldw	ra,4(sp)
     264:	df000017 	ldw	fp,0(sp)
     268:	dec00204 	addi	sp,sp,8
     26c:	f800283a 	ret

00000270 <pop>:

/* The basic (data) stack operations */

cell pop()
{
     270:	defffe04 	addi	sp,sp,-8
     274:	dfc00115 	stw	ra,4(sp)
     278:	df000015 	stw	fp,0(sp)
     27c:	d839883a 	mov	fp,sp
    if (*sp == 1)
     280:	d0a44f17 	ldw	r2,-28356(gp)
     284:	1080000b 	ldhu	r2,0(r2)
     288:	10bfffcc 	andi	r2,r2,65535
     28c:	10800058 	cmpnei	r2,r2,1
     290:	1000071e 	bne	r2,zero,2b0 <pop+0x40>
    {
        tell("? Stack underflow\n");
     294:	01000034 	movhi	r4,0
     298:	211d7804 	addi	r4,r4,30176
     29c:	00002040 	call	204 <tell>
        errorFlag = 1;
     2a0:	00800044 	movi	r2,1
     2a4:	d0a44a15 	stw	r2,-28376(gp)
        return 0;
     2a8:	0005883a 	mov	r2,zero
     2ac:	00000a06 	br	2d8 <pop+0x68>
    }
    return stack[--(*sp)];
     2b0:	d0e44817 	ldw	r3,-28384(gp)
     2b4:	d0a44f17 	ldw	r2,-28356(gp)
     2b8:	1100000b 	ldhu	r4,0(r2)
     2bc:	213fffc4 	addi	r4,r4,-1
     2c0:	1100000d 	sth	r4,0(r2)
     2c4:	1080000b 	ldhu	r2,0(r2)
     2c8:	10bfffcc 	andi	r2,r2,65535
     2cc:	1085883a 	add	r2,r2,r2
     2d0:	1885883a 	add	r2,r3,r2
     2d4:	1080000b 	ldhu	r2,0(r2)
}
     2d8:	e037883a 	mov	sp,fp
     2dc:	dfc00117 	ldw	ra,4(sp)
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00204 	addi	sp,sp,8
     2e8:	f800283a 	ret

000002ec <tos>:

cell tos()
{
     2ec:	defffe04 	addi	sp,sp,-8
     2f0:	dfc00115 	stw	ra,4(sp)
     2f4:	df000015 	stw	fp,0(sp)
     2f8:	d839883a 	mov	fp,sp
    if (*sp == 1)
     2fc:	d0a44f17 	ldw	r2,-28356(gp)
     300:	1080000b 	ldhu	r2,0(r2)
     304:	10bfffcc 	andi	r2,r2,65535
     308:	10800058 	cmpnei	r2,r2,1
     30c:	1000071e 	bne	r2,zero,32c <tos+0x40>
    {
        tell("? Stack underflow\n");
     310:	01000034 	movhi	r4,0
     314:	211d7804 	addi	r4,r4,30176
     318:	00002040 	call	204 <tell>
        errorFlag = 1;
     31c:	00800044 	movi	r2,1
     320:	d0a44a15 	stw	r2,-28376(gp)
        return 0;
     324:	0005883a 	mov	r2,zero
     328:	00000a06 	br	354 <tos+0x68>
    }
    return stack[(*sp)-1];
     32c:	d0e44817 	ldw	r3,-28384(gp)
     330:	d0a44f17 	ldw	r2,-28356(gp)
     334:	1080000b 	ldhu	r2,0(r2)
     338:	113fffcc 	andi	r4,r2,65535
     33c:	00a00034 	movhi	r2,32768
     340:	10bfffc4 	addi	r2,r2,-1
     344:	2085883a 	add	r2,r4,r2
     348:	1085883a 	add	r2,r2,r2
     34c:	1885883a 	add	r2,r3,r2
     350:	1080000b 	ldhu	r2,0(r2)
}
     354:	e037883a 	mov	sp,fp
     358:	dfc00117 	ldw	ra,4(sp)
     35c:	df000017 	ldw	fp,0(sp)
     360:	dec00204 	addi	sp,sp,8
     364:	f800283a 	ret

00000368 <push>:

void push(cell data)
{
     368:	defffd04 	addi	sp,sp,-12
     36c:	dfc00215 	stw	ra,8(sp)
     370:	df000115 	stw	fp,4(sp)
     374:	df000104 	addi	fp,sp,4
     378:	2005883a 	mov	r2,r4
     37c:	e0bfff0d 	sth	r2,-4(fp)
    if (*sp >= STACK_SIZE)
     380:	d0a44f17 	ldw	r2,-28356(gp)
     384:	1080000b 	ldhu	r2,0(r2)
     388:	10bfffcc 	andi	r2,r2,65535
     38c:	10803030 	cmpltui	r2,r2,192
     390:	1000061e 	bne	r2,zero,3ac <push+0x44>
    {
        tell("? Stack overflow\n");
     394:	01000034 	movhi	r4,0
     398:	211d7d04 	addi	r4,r4,30196
     39c:	00002040 	call	204 <tell>
        errorFlag = 1;
     3a0:	00800044 	movi	r2,1
     3a4:	d0a44a15 	stw	r2,-28376(gp)
        return;
     3a8:	00000a06 	br	3d4 <push+0x6c>
    }
    stack[(*sp)++] = data;
     3ac:	d1244817 	ldw	r4,-28384(gp)
     3b0:	d0a44f17 	ldw	r2,-28356(gp)
     3b4:	10c0000b 	ldhu	r3,0(r2)
     3b8:	19400044 	addi	r5,r3,1
     3bc:	1140000d 	sth	r5,0(r2)
     3c0:	18bfffcc 	andi	r2,r3,65535
     3c4:	1085883a 	add	r2,r2,r2
     3c8:	2085883a 	add	r2,r4,r2
     3cc:	e0ffff0b 	ldhu	r3,-4(fp)
     3d0:	10c0000d 	sth	r3,0(r2)
}
     3d4:	e037883a 	mov	sp,fp
     3d8:	dfc00117 	ldw	ra,4(sp)
     3dc:	df000017 	ldw	fp,0(sp)
     3e0:	dec00204 	addi	sp,sp,8
     3e4:	f800283a 	ret

000003e8 <dpop>:

dcell dpop()
{
     3e8:	defffd04 	addi	sp,sp,-12
     3ec:	dfc00215 	stw	ra,8(sp)
     3f0:	df000115 	stw	fp,4(sp)
     3f4:	df000104 	addi	fp,sp,4
    cell tmp[2];
    tmp[1] = pop();
     3f8:	00002700 	call	270 <pop>
     3fc:	e0bfff8d 	sth	r2,-2(fp)
    tmp[0] = pop();
     400:	00002700 	call	270 <pop>
     404:	e0bfff0d 	sth	r2,-4(fp)
    return *((dcell*)tmp);
     408:	e0bfff04 	addi	r2,fp,-4
     40c:	10800017 	ldw	r2,0(r2)
}
     410:	e037883a 	mov	sp,fp
     414:	dfc00117 	ldw	ra,4(sp)
     418:	df000017 	ldw	fp,0(sp)
     41c:	dec00204 	addi	sp,sp,8
     420:	f800283a 	ret

00000424 <dpush>:

void dpush(dcell data)
{
     424:	defffc04 	addi	sp,sp,-16
     428:	dfc00315 	stw	ra,12(sp)
     42c:	df000215 	stw	fp,8(sp)
     430:	df000204 	addi	fp,sp,8
     434:	e13fff15 	stw	r4,-4(fp)
    cell tmp[2];
    *((dcell*)tmp) = data;
     438:	e0fffe04 	addi	r3,fp,-8
     43c:	e0bfff17 	ldw	r2,-4(fp)
     440:	18800015 	stw	r2,0(r3)
    push(tmp[0]);
     444:	e0bffe0b 	ldhu	r2,-8(fp)
     448:	10bfffcc 	andi	r2,r2,65535
     44c:	1009883a 	mov	r4,r2
     450:	00003680 	call	368 <push>
    push(tmp[1]);
     454:	e0bffe8b 	ldhu	r2,-6(fp)
     458:	10bfffcc 	andi	r2,r2,65535
     45c:	1009883a 	mov	r4,r2
     460:	00003680 	call	368 <push>
}
     464:	0001883a 	nop
     468:	e037883a 	mov	sp,fp
     46c:	dfc00117 	ldw	ra,4(sp)
     470:	df000017 	ldw	fp,0(sp)
     474:	dec00204 	addi	sp,sp,8
     478:	f800283a 	ret

0000047c <rpop>:

/* The basic return stack operations */

cell rpop()
{
     47c:	defffe04 	addi	sp,sp,-8
     480:	dfc00115 	stw	ra,4(sp)
     484:	df000015 	stw	fp,0(sp)
     488:	d839883a 	mov	fp,sp
    if (*rsp == 1)
     48c:	d0a44c17 	ldw	r2,-28368(gp)
     490:	1080000b 	ldhu	r2,0(r2)
     494:	10bfffcc 	andi	r2,r2,65535
     498:	10800058 	cmpnei	r2,r2,1
     49c:	1000071e 	bne	r2,zero,4bc <rpop+0x40>
    {
        tell("? RStack underflow\n");
     4a0:	01000034 	movhi	r4,0
     4a4:	211d8204 	addi	r4,r4,30216
     4a8:	00002040 	call	204 <tell>
        errorFlag = 1;
     4ac:	00800044 	movi	r2,1
     4b0:	d0a44a15 	stw	r2,-28376(gp)
        return 0;
     4b4:	0005883a 	mov	r2,zero
     4b8:	00000a06 	br	4e4 <rpop+0x68>
    }
    return rstack[--(*rsp)];
     4bc:	d0e44617 	ldw	r3,-28392(gp)
     4c0:	d0a44c17 	ldw	r2,-28368(gp)
     4c4:	1100000b 	ldhu	r4,0(r2)
     4c8:	213fffc4 	addi	r4,r4,-1
     4cc:	1100000d 	sth	r4,0(r2)
     4d0:	1080000b 	ldhu	r2,0(r2)
     4d4:	10bfffcc 	andi	r2,r2,65535
     4d8:	1085883a 	add	r2,r2,r2
     4dc:	1885883a 	add	r2,r3,r2
     4e0:	1080000b 	ldhu	r2,0(r2)
}
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
     4f4:	f800283a 	ret

000004f8 <rpush>:

void rpush(cell data)
{
     4f8:	defffd04 	addi	sp,sp,-12
     4fc:	dfc00215 	stw	ra,8(sp)
     500:	df000115 	stw	fp,4(sp)
     504:	df000104 	addi	fp,sp,4
     508:	2005883a 	mov	r2,r4
     50c:	e0bfff0d 	sth	r2,-4(fp)
    if (*rsp >= RSTACK_SIZE)
     510:	d0a44c17 	ldw	r2,-28368(gp)
     514:	1080000b 	ldhu	r2,0(r2)
     518:	10bfffcc 	andi	r2,r2,65535
     51c:	10801030 	cmpltui	r2,r2,64
     520:	1000061e 	bne	r2,zero,53c <rpush+0x44>
    {
        tell("? RStack overflow\n");
     524:	01000034 	movhi	r4,0
     528:	211d8704 	addi	r4,r4,30236
     52c:	00002040 	call	204 <tell>
        errorFlag = 1;
     530:	00800044 	movi	r2,1
     534:	d0a44a15 	stw	r2,-28376(gp)
        return;
     538:	00000a06 	br	564 <rpush+0x6c>
    }
    rstack[(*rsp)++] = data;
     53c:	d1244617 	ldw	r4,-28392(gp)
     540:	d0a44c17 	ldw	r2,-28368(gp)
     544:	10c0000b 	ldhu	r3,0(r2)
     548:	19400044 	addi	r5,r3,1
     54c:	1140000d 	sth	r5,0(r2)
     550:	18bfffcc 	andi	r2,r3,65535
     554:	1085883a 	add	r2,r2,r2
     558:	2085883a 	add	r2,r4,r2
     55c:	e0ffff0b 	ldhu	r3,-4(fp)
     560:	10c0000d 	sth	r3,0(r2)
}
     564:	e037883a 	mov	sp,fp
     568:	dfc00117 	ldw	ra,4(sp)
     56c:	df000017 	ldw	fp,0(sp)
     570:	dec00204 	addi	sp,sp,8
     574:	f800283a 	ret

00000578 <readMem>:

/* Secure memory access */

cell readMem(cell address)
{
     578:	defffe04 	addi	sp,sp,-8
     57c:	df000115 	stw	fp,4(sp)
     580:	df000104 	addi	fp,sp,4
     584:	2005883a 	mov	r2,r4
     588:	e0bfff0d 	sth	r2,-4(fp)
    {
        tell("Internal error in readMem: Invalid addres\n");
        errorFlag = 1;
        return 0;
    }
    return *((cell*)(memory + address));
     58c:	e0ffff0b 	ldhu	r3,-4(fp)
     590:	00800074 	movhi	r2,1
     594:	10a56604 	addi	r2,r2,-27240
     598:	1885883a 	add	r2,r3,r2
     59c:	1080000b 	ldhu	r2,0(r2)
}
     5a0:	e037883a 	mov	sp,fp
     5a4:	df000017 	ldw	fp,0(sp)
     5a8:	dec00104 	addi	sp,sp,4
     5ac:	f800283a 	ret

000005b0 <writeMem>:

void writeMem(cell address, cell value)
{
     5b0:	defffd04 	addi	sp,sp,-12
     5b4:	df000215 	stw	fp,8(sp)
     5b8:	df000204 	addi	fp,sp,8
     5bc:	2007883a 	mov	r3,r4
     5c0:	2805883a 	mov	r2,r5
     5c4:	e0fffe0d 	sth	r3,-8(fp)
     5c8:	e0bfff0d 	sth	r2,-4(fp)
    {
        tell("Internal error in writeMem: Invalid address\n");
        errorFlag = 1;
        return;
    }
    *((cell*)(memory + address)) = value;
     5cc:	e0fffe0b 	ldhu	r3,-8(fp)
     5d0:	00800074 	movhi	r2,1
     5d4:	10a56604 	addi	r2,r2,-27240
     5d8:	1885883a 	add	r2,r3,r2
     5dc:	e0ffff0b 	ldhu	r3,-4(fp)
     5e0:	10c0000d 	sth	r3,0(r2)
}
     5e4:	e037883a 	mov	sp,fp
     5e8:	df000017 	ldw	fp,0(sp)
     5ec:	dec00104 	addi	sp,sp,4
     5f0:	f800283a 	ret

000005f4 <readWord>:

/* Reading a word into the input line buffer */
byte readWord()
{
     5f4:	defffb04 	addi	sp,sp,-20
     5f8:	dfc00415 	stw	ra,16(sp)
     5fc:	df000315 	stw	fp,12(sp)
     600:	df000304 	addi	fp,sp,12
    char *line = (char*)memory;
     604:	00800074 	movhi	r2,1
     608:	10a56604 	addi	r2,r2,-27240
     60c:	e0bfff15 	stw	r2,-4(fp)
    byte len = 0;
     610:	e03ffd05 	stb	zero,-12(fp)
    int c;

    while ((c = getkey()) != EOF)
     614:	00001506 	br	66c <readWord+0x78>
    {
        if (c == ' ') continue;
     618:	e0bffe17 	ldw	r2,-8(fp)
     61c:	10800818 	cmpnei	r2,r2,32
     620:	1000011e 	bne	r2,zero,628 <readWord+0x34>
     624:	00001106 	br	66c <readWord+0x78>
        if (c == '\n') continue;
     628:	e0bffe17 	ldw	r2,-8(fp)
     62c:	10800298 	cmpnei	r2,r2,10
     630:	1000011e 	bne	r2,zero,638 <readWord+0x44>
     634:	00000d06 	br	66c <readWord+0x78>
        if (c != '\\') break;
     638:	e0bffe17 	ldw	r2,-8(fp)
     63c:	10801720 	cmpeqi	r2,r2,92
     640:	10001026 	beq	r2,zero,684 <readWord+0x90>

        while ((c = getkey()) != EOF)
     644:	00000406 	br	658 <readWord+0x64>
            if (c == '\n')
     648:	e0bffe17 	ldw	r2,-8(fp)
     64c:	10800298 	cmpnei	r2,r2,10
     650:	1000011e 	bne	r2,zero,658 <readWord+0x64>
                break;
     654:	00000506 	br	66c <readWord+0x78>
    {
        if (c == ' ') continue;
        if (c == '\n') continue;
        if (c != '\\') break;

        while ((c = getkey()) != EOF)
     658:	00001240 	call	124 <getkey>
     65c:	e0bffe15 	stw	r2,-8(fp)
     660:	e0bffe17 	ldw	r2,-8(fp)
     664:	10bfffd8 	cmpnei	r2,r2,-1
     668:	103ff71e 	bne	r2,zero,648 <__ram_exceptions_end+0xfdffe628>
{
    char *line = (char*)memory;
    byte len = 0;
    int c;

    while ((c = getkey()) != EOF)
     66c:	00001240 	call	124 <getkey>
     670:	e0bffe15 	stw	r2,-8(fp)
     674:	e0bffe17 	ldw	r2,-8(fp)
     678:	10bfffd8 	cmpnei	r2,r2,-1
     67c:	103fe61e 	bne	r2,zero,618 <__ram_exceptions_end+0xfdffe5f8>
     680:	00000f06 	br	6c0 <readWord+0xcc>
    {
        if (c == ' ') continue;
        if (c == '\n') continue;
        if (c != '\\') break;
     684:	0001883a 	nop
        while ((c = getkey()) != EOF)
            if (c == '\n')
                break;
    }

    while (c != ' ' && c != '\n' && c != EOF)
     688:	00000d06 	br	6c0 <readWord+0xcc>
    {
        if (len >= (INPUT_LINE_SIZE - 1))
     68c:	e0bffd03 	ldbu	r2,-12(fp)
     690:	108007f0 	cmpltui	r2,r2,31
     694:	10001426 	beq	r2,zero,6e8 <readWord+0xf4>
            break;
        line[++len] = c;
     698:	e0bffd03 	ldbu	r2,-12(fp)
     69c:	10800044 	addi	r2,r2,1
     6a0:	e0bffd05 	stb	r2,-12(fp)
     6a4:	e0bffd03 	ldbu	r2,-12(fp)
     6a8:	e0ffff17 	ldw	r3,-4(fp)
     6ac:	1885883a 	add	r2,r3,r2
     6b0:	e0fffe17 	ldw	r3,-8(fp)
     6b4:	10c00005 	stb	r3,0(r2)
        c = getkey();
     6b8:	00001240 	call	124 <getkey>
     6bc:	e0bffe15 	stw	r2,-8(fp)
        while ((c = getkey()) != EOF)
            if (c == '\n')
                break;
    }

    while (c != ' ' && c != '\n' && c != EOF)
     6c0:	e0bffe17 	ldw	r2,-8(fp)
     6c4:	10800820 	cmpeqi	r2,r2,32
     6c8:	1000081e 	bne	r2,zero,6ec <readWord+0xf8>
     6cc:	e0bffe17 	ldw	r2,-8(fp)
     6d0:	108002a0 	cmpeqi	r2,r2,10
     6d4:	1000051e 	bne	r2,zero,6ec <readWord+0xf8>
     6d8:	e0bffe17 	ldw	r2,-8(fp)
     6dc:	10bfffd8 	cmpnei	r2,r2,-1
     6e0:	103fea1e 	bne	r2,zero,68c <__ram_exceptions_end+0xfdffe66c>
     6e4:	00000106 	br	6ec <readWord+0xf8>
    {
        if (len >= (INPUT_LINE_SIZE - 1))
            break;
     6e8:	0001883a 	nop
        line[++len] = c;
        c = getkey();
    }
    line[0] = len;
     6ec:	e0fffd03 	ldbu	r3,-12(fp)
     6f0:	e0bfff17 	ldw	r2,-4(fp)
     6f4:	10c00005 	stb	r3,0(r2)
    return len;
     6f8:	e0bffd03 	ldbu	r2,-12(fp)
}
     6fc:	e037883a 	mov	sp,fp
     700:	dfc00117 	ldw	ra,4(sp)
     704:	df000017 	ldw	fp,0(sp)
     708:	dec00204 	addi	sp,sp,8
     70c:	f800283a 	ret

00000710 <up>:

/* toupper() clone so we don't have to pull in ctype.h */
char up(char c)
{
     710:	defffe04 	addi	sp,sp,-8
     714:	df000115 	stw	fp,4(sp)
     718:	df000104 	addi	fp,sp,4
     71c:	2005883a 	mov	r2,r4
     720:	e0bfff05 	stb	r2,-4(fp)
    return (c >= 'a' && c <= 'z') ? c - 'a' + 'A' : c;
     724:	e0bfff07 	ldb	r2,-4(fp)
     728:	10801850 	cmplti	r2,r2,97
     72c:	1000061e 	bne	r2,zero,748 <up+0x38>
     730:	e0bfff07 	ldb	r2,-4(fp)
     734:	10801ec8 	cmpgei	r2,r2,123
     738:	1000031e 	bne	r2,zero,748 <up+0x38>
     73c:	e0bfff03 	ldbu	r2,-4(fp)
     740:	10bff804 	addi	r2,r2,-32
     744:	00000106 	br	74c <up+0x3c>
     748:	e0bfff03 	ldbu	r2,-4(fp)
}
     74c:	e037883a 	mov	sp,fp
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00104 	addi	sp,sp,4
     758:	f800283a 	ret

0000075c <findWord>:

/* Dictionary lookup */
cell findWord(cell address, cell len)
{
     75c:	defff804 	addi	sp,sp,-32
     760:	dfc00715 	stw	ra,28(sp)
     764:	df000615 	stw	fp,24(sp)
     768:	dc000515 	stw	r16,20(sp)
     76c:	df000604 	addi	fp,sp,24
     770:	2007883a 	mov	r3,r4
     774:	2805883a 	mov	r2,r5
     778:	e0fffd0d 	sth	r3,-12(fp)
     77c:	e0bffe0d 	sth	r2,-8(fp)
    cell ret = *latest;
     780:	d0a44717 	ldw	r2,-28388(gp)
     784:	1080000b 	ldhu	r2,0(r2)
     788:	e0bffa0d 	sth	r2,-24(fp)
    char *name = (char*)&memory[address];
     78c:	e0fffd0b 	ldhu	r3,-12(fp)
     790:	00800074 	movhi	r2,1
     794:	10a56604 	addi	r2,r2,-27240
     798:	1885883a 	add	r2,r3,r2
     79c:	e0bffc15 	stw	r2,-16(fp)
    cell i;
    int found;

    for (ret = *latest; ret; ret = readMem(ret))
     7a0:	d0a44717 	ldw	r2,-28388(gp)
     7a4:	1080000b 	ldhu	r2,0(r2)
     7a8:	e0bffa0d 	sth	r2,-24(fp)
     7ac:	00004706 	br	8cc <findWord+0x170>
    {
        if ((memory[ret + CELL_SIZE] & MASK_NAMELENGTH) != len) continue;
     7b0:	e0bffa0b 	ldhu	r2,-24(fp)
     7b4:	10c00084 	addi	r3,r2,2
     7b8:	00800074 	movhi	r2,1
     7bc:	10a56604 	addi	r2,r2,-27240
     7c0:	10c5883a 	add	r2,r2,r3
     7c4:	10800003 	ldbu	r2,0(r2)
     7c8:	10803fcc 	andi	r2,r2,255
     7cc:	10c007cc 	andi	r3,r2,31
     7d0:	e0bffe0b 	ldhu	r2,-8(fp)
     7d4:	1880361e 	bne	r3,r2,8b0 <findWord+0x154>
        if (memory[ret + CELL_SIZE] & FLAG_HIDDEN) continue;
     7d8:	e0bffa0b 	ldhu	r2,-24(fp)
     7dc:	10c00084 	addi	r3,r2,2
     7e0:	00800074 	movhi	r2,1
     7e4:	10a56604 	addi	r2,r2,-27240
     7e8:	10c5883a 	add	r2,r2,r3
     7ec:	10800003 	ldbu	r2,0(r2)
     7f0:	10803fcc 	andi	r2,r2,255
     7f4:	1080100c 	andi	r2,r2,64
     7f8:	10002f1e 	bne	r2,zero,8b8 <findWord+0x15c>

        found = 1;
     7fc:	00800044 	movi	r2,1
     800:	e0bffb15 	stw	r2,-20(fp)
        for (i = 0; i < len; i++)
     804:	e03ffa8d 	sth	zero,-22(fp)
     808:	00002306 	br	898 <findWord+0x13c>
        {
            if (up(memory[ret + i + 1 + CELL_SIZE]) != up(name[i]))
     80c:	e0fffa0b 	ldhu	r3,-24(fp)
     810:	e0bffa8b 	ldhu	r2,-22(fp)
     814:	1885883a 	add	r2,r3,r2
     818:	10c000c4 	addi	r3,r2,3
     81c:	00800074 	movhi	r2,1
     820:	10a56604 	addi	r2,r2,-27240
     824:	10c5883a 	add	r2,r2,r3
     828:	10800003 	ldbu	r2,0(r2)
     82c:	10803fcc 	andi	r2,r2,255
     830:	1080201c 	xori	r2,r2,128
     834:	10bfe004 	addi	r2,r2,-128
     838:	1009883a 	mov	r4,r2
     83c:	00007100 	call	710 <up>
     840:	1021883a 	mov	r16,r2
     844:	e0bffa8b 	ldhu	r2,-22(fp)
     848:	e0fffc17 	ldw	r3,-16(fp)
     84c:	1885883a 	add	r2,r3,r2
     850:	10800003 	ldbu	r2,0(r2)
     854:	10803fcc 	andi	r2,r2,255
     858:	1080201c 	xori	r2,r2,128
     85c:	10bfe004 	addi	r2,r2,-128
     860:	1009883a 	mov	r4,r2
     864:	00007100 	call	710 <up>
     868:	80c03fcc 	andi	r3,r16,255
     86c:	18c0201c 	xori	r3,r3,128
     870:	18ffe004 	addi	r3,r3,-128
     874:	10803fcc 	andi	r2,r2,255
     878:	1080201c 	xori	r2,r2,128
     87c:	10bfe004 	addi	r2,r2,-128
     880:	18800226 	beq	r3,r2,88c <findWord+0x130>
            {
                found = 0;
     884:	e03ffb15 	stw	zero,-20(fp)
                break;
     888:	00000606 	br	8a4 <findWord+0x148>
    {
        if ((memory[ret + CELL_SIZE] & MASK_NAMELENGTH) != len) continue;
        if (memory[ret + CELL_SIZE] & FLAG_HIDDEN) continue;

        found = 1;
        for (i = 0; i < len; i++)
     88c:	e0bffa8b 	ldhu	r2,-22(fp)
     890:	10800044 	addi	r2,r2,1
     894:	e0bffa8d 	sth	r2,-22(fp)
     898:	e0fffa8b 	ldhu	r3,-22(fp)
     89c:	e0bffe0b 	ldhu	r2,-8(fp)
     8a0:	18bfda36 	bltu	r3,r2,80c <__ram_exceptions_end+0xfdffe7ec>
            {
                found = 0;
                break;
            }
        }
        if (found) break;
     8a4:	e0bffb17 	ldw	r2,-20(fp)
     8a8:	10000b1e 	bne	r2,zero,8d8 <findWord+0x17c>
     8ac:	00000306 	br	8bc <findWord+0x160>
    cell i;
    int found;

    for (ret = *latest; ret; ret = readMem(ret))
    {
        if ((memory[ret + CELL_SIZE] & MASK_NAMELENGTH) != len) continue;
     8b0:	0001883a 	nop
     8b4:	00000106 	br	8bc <findWord+0x160>
        if (memory[ret + CELL_SIZE] & FLAG_HIDDEN) continue;
     8b8:	0001883a 	nop
    cell ret = *latest;
    char *name = (char*)&memory[address];
    cell i;
    int found;

    for (ret = *latest; ret; ret = readMem(ret))
     8bc:	e0bffa0b 	ldhu	r2,-24(fp)
     8c0:	1009883a 	mov	r4,r2
     8c4:	00005780 	call	578 <readMem>
     8c8:	e0bffa0d 	sth	r2,-24(fp)
     8cc:	e0bffa0b 	ldhu	r2,-24(fp)
     8d0:	103fb71e 	bne	r2,zero,7b0 <__ram_exceptions_end+0xfdffe790>
     8d4:	00000106 	br	8dc <findWord+0x180>
            {
                found = 0;
                break;
            }
        }
        if (found) break;
     8d8:	0001883a 	nop
    }
    return ret;
     8dc:	e0bffa0b 	ldhu	r2,-24(fp)
}
     8e0:	e6ffff04 	addi	sp,fp,-4
     8e4:	dfc00217 	ldw	ra,8(sp)
     8e8:	df000117 	ldw	fp,4(sp)
     8ec:	dc000017 	ldw	r16,0(sp)
     8f0:	dec00304 	addi	sp,sp,12
     8f4:	f800283a 	ret

000008f8 <parseNumber>:

/* Basic number parsing, base <= 36 only atm */
void parseNumber(byte *word, cell len, dcell *number, cell *notRead, byte *isDouble)
{
     8f8:	defff704 	addi	sp,sp,-36
     8fc:	dfc00815 	stw	ra,32(sp)
     900:	df000715 	stw	fp,28(sp)
     904:	df000704 	addi	fp,sp,28
     908:	e13ffc15 	stw	r4,-16(fp)
     90c:	2805883a 	mov	r2,r5
     910:	e1bffe15 	stw	r6,-8(fp)
     914:	e1ffff15 	stw	r7,-4(fp)
     918:	e0bffd0d 	sth	r2,-12(fp)
    int negative = 0;
     91c:	e03ff915 	stw	zero,-28(fp)
    cell i;
    char c;
    cell current;

    *number = 0;
     920:	e0bffe17 	ldw	r2,-8(fp)
     924:	10000015 	stw	zero,0(r2)
    *isDouble = 0;
     928:	e0800217 	ldw	r2,8(fp)
     92c:	10000005 	stb	zero,0(r2)

    if (len == 0)
     930:	e0bffd0b 	ldhu	r2,-12(fp)
     934:	1000031e 	bne	r2,zero,944 <parseNumber+0x4c>
    {
        *notRead = 0;
     938:	e0bfff17 	ldw	r2,-4(fp)
     93c:	1000000d 	sth	zero,0(r2)
        return;
     940:	00007006 	br	b04 <parseNumber+0x20c>
    }

    if (word[0] == '-')
     944:	e0bffc17 	ldw	r2,-16(fp)
     948:	10800003 	ldbu	r2,0(r2)
     94c:	10803fcc 	andi	r2,r2,255
     950:	10800b58 	cmpnei	r2,r2,45
     954:	1000091e 	bne	r2,zero,97c <parseNumber+0x84>
    {
        negative = 1;
     958:	00800044 	movi	r2,1
     95c:	e0bff915 	stw	r2,-28(fp)
        len--;
     960:	e0bffd0b 	ldhu	r2,-12(fp)
     964:	10bfffc4 	addi	r2,r2,-1
     968:	e0bffd0d 	sth	r2,-12(fp)
        word++;
     96c:	e0bffc17 	ldw	r2,-16(fp)
     970:	10800044 	addi	r2,r2,1
     974:	e0bffc15 	stw	r2,-16(fp)
     978:	00000b06 	br	9a8 <parseNumber+0xb0>
    }
    else if (word[0] == '+')
     97c:	e0bffc17 	ldw	r2,-16(fp)
     980:	10800003 	ldbu	r2,0(r2)
     984:	10803fcc 	andi	r2,r2,255
     988:	10800ad8 	cmpnei	r2,r2,43
     98c:	1000061e 	bne	r2,zero,9a8 <parseNumber+0xb0>
    {
        len--;
     990:	e0bffd0b 	ldhu	r2,-12(fp)
     994:	10bfffc4 	addi	r2,r2,-1
     998:	e0bffd0d 	sth	r2,-12(fp)
        word++;
     99c:	e0bffc17 	ldw	r2,-16(fp)
     9a0:	10800044 	addi	r2,r2,1
     9a4:	e0bffc15 	stw	r2,-16(fp)
    }

    for (i = 0; i < len; i++)
     9a8:	e03ffa0d 	sth	zero,-24(fp)
     9ac:	00003f06 	br	aac <parseNumber+0x1b4>
    {
        c = *word;
     9b0:	e0bffc17 	ldw	r2,-16(fp)
     9b4:	10800003 	ldbu	r2,0(r2)
     9b8:	e0bffb05 	stb	r2,-20(fp)
        word++;
     9bc:	e0bffc17 	ldw	r2,-16(fp)
     9c0:	10800044 	addi	r2,r2,1
     9c4:	e0bffc15 	stw	r2,-16(fp)
        if (c == '.') { *isDouble = 1; continue; }
     9c8:	e0bffb07 	ldb	r2,-20(fp)
     9cc:	10800b98 	cmpnei	r2,r2,46
     9d0:	1000041e 	bne	r2,zero,9e4 <parseNumber+0xec>
     9d4:	e0800217 	ldw	r2,8(fp)
     9d8:	00c00044 	movi	r3,1
     9dc:	10c00005 	stb	r3,0(r2)
     9e0:	00002f06 	br	aa0 <parseNumber+0x1a8>
        else if (c >= '0' && c <= '9') current = c - '0';
     9e4:	e0bffb07 	ldb	r2,-20(fp)
     9e8:	10800c10 	cmplti	r2,r2,48
     9ec:	1000071e 	bne	r2,zero,a0c <parseNumber+0x114>
     9f0:	e0bffb07 	ldb	r2,-20(fp)
     9f4:	10800e88 	cmpgei	r2,r2,58
     9f8:	1000041e 	bne	r2,zero,a0c <parseNumber+0x114>
     9fc:	e0bffb07 	ldb	r2,-20(fp)
     a00:	10bff404 	addi	r2,r2,-48
     a04:	e0bffa8d 	sth	r2,-22(fp)
     a08:	00001306 	br	a58 <parseNumber+0x160>
        else if (c >= 'A' && c <= 'Z') current = 10 + c - 'A';
     a0c:	e0bffb07 	ldb	r2,-20(fp)
     a10:	10801050 	cmplti	r2,r2,65
     a14:	1000071e 	bne	r2,zero,a34 <parseNumber+0x13c>
     a18:	e0bffb07 	ldb	r2,-20(fp)
     a1c:	108016c8 	cmpgei	r2,r2,91
     a20:	1000041e 	bne	r2,zero,a34 <parseNumber+0x13c>
     a24:	e0bffb07 	ldb	r2,-20(fp)
     a28:	10bff244 	addi	r2,r2,-55
     a2c:	e0bffa8d 	sth	r2,-22(fp)
     a30:	00000906 	br	a58 <parseNumber+0x160>
        else if (c >= 'a' && c <= 'z') current = 10 + c - 'a';
     a34:	e0bffb07 	ldb	r2,-20(fp)
     a38:	10801850 	cmplti	r2,r2,97
     a3c:	1000201e 	bne	r2,zero,ac0 <parseNumber+0x1c8>
     a40:	e0bffb07 	ldb	r2,-20(fp)
     a44:	10801ec8 	cmpgei	r2,r2,123
     a48:	10001d1e 	bne	r2,zero,ac0 <parseNumber+0x1c8>
     a4c:	e0bffb07 	ldb	r2,-20(fp)
     a50:	10bfea44 	addi	r2,r2,-87
     a54:	e0bffa8d 	sth	r2,-22(fp)
        else break;

        if (current >= *base) break;
     a58:	d0a44417 	ldw	r2,-28400(gp)
     a5c:	1080000b 	ldhu	r2,0(r2)
     a60:	10bfffcc 	andi	r2,r2,65535
     a64:	e0fffa8b 	ldhu	r3,-22(fp)
     a68:	1880142e 	bgeu	r3,r2,abc <parseNumber+0x1c4>

        *number = *number * *base + current;
     a6c:	e0bffe17 	ldw	r2,-8(fp)
     a70:	10c00017 	ldw	r3,0(r2)
     a74:	d0a44417 	ldw	r2,-28400(gp)
     a78:	1080000b 	ldhu	r2,0(r2)
     a7c:	10bfffcc 	andi	r2,r2,65535
     a80:	100b883a 	mov	r5,r2
     a84:	1809883a 	mov	r4,r3
     a88:	00036780 	call	3678 <__mulsi3>
     a8c:	1007883a 	mov	r3,r2
     a90:	e0bffa8b 	ldhu	r2,-22(fp)
     a94:	1887883a 	add	r3,r3,r2
     a98:	e0bffe17 	ldw	r2,-8(fp)
     a9c:	10c00015 	stw	r3,0(r2)
    {
        len--;
        word++;
    }

    for (i = 0; i < len; i++)
     aa0:	e0bffa0b 	ldhu	r2,-24(fp)
     aa4:	10800044 	addi	r2,r2,1
     aa8:	e0bffa0d 	sth	r2,-24(fp)
     aac:	e0fffa0b 	ldhu	r3,-24(fp)
     ab0:	e0bffd0b 	ldhu	r2,-12(fp)
     ab4:	18bfbe36 	bltu	r3,r2,9b0 <__ram_exceptions_end+0xfdffe990>
     ab8:	00000106 	br	ac0 <parseNumber+0x1c8>
        else if (c >= '0' && c <= '9') current = c - '0';
        else if (c >= 'A' && c <= 'Z') current = 10 + c - 'A';
        else if (c >= 'a' && c <= 'z') current = 10 + c - 'a';
        else break;

        if (current >= *base) break;
     abc:	0001883a 	nop

        *number = *number * *base + current;
    }

    *notRead = len - i;
     ac0:	e0fffd0b 	ldhu	r3,-12(fp)
     ac4:	e0bffa0b 	ldhu	r2,-24(fp)
     ac8:	1885c83a 	sub	r2,r3,r2
     acc:	1007883a 	mov	r3,r2
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	10c0000d 	sth	r3,0(r2)
    if (negative) *number = (-((scell)*number));
     ad8:	e0bff917 	ldw	r2,-28(fp)
     adc:	10000926 	beq	r2,zero,b04 <parseNumber+0x20c>
     ae0:	e0bffe17 	ldw	r2,-8(fp)
     ae4:	10800017 	ldw	r2,0(r2)
     ae8:	10bfffcc 	andi	r2,r2,65535
     aec:	10a0001c 	xori	r2,r2,32768
     af0:	10a00004 	addi	r2,r2,-32768
     af4:	0085c83a 	sub	r2,zero,r2
     af8:	1007883a 	mov	r3,r2
     afc:	e0bffe17 	ldw	r2,-8(fp)
     b00:	10c00015 	stw	r3,0(r2)
}
     b04:	e037883a 	mov	sp,fp
     b08:	dfc00117 	ldw	ra,4(sp)
     b0c:	df000017 	ldw	fp,0(sp)
     b10:	dec00204 	addi	sp,sp,8
     b14:	f800283a 	ret

00000b18 <docol>:
* Builtin definitions
*
*******************************************************************************/

BUILTIN(0, "RUNDOCOL", docol, 0)
{
     b18:	defffe04 	addi	sp,sp,-8
     b1c:	dfc00115 	stw	ra,4(sp)
     b20:	df000015 	stw	fp,0(sp)
     b24:	d839883a 	mov	fp,sp
    rpush(lastIp);
     b28:	d0a4450b 	ldhu	r2,-28396(gp)
     b2c:	10bfffcc 	andi	r2,r2,65535
     b30:	1009883a 	mov	r4,r2
     b34:	00004f80 	call	4f8 <rpush>
    next = commandAddress + CELL_SIZE;
     b38:	d0a44b0b 	ldhu	r2,-28372(gp)
     b3c:	10800084 	addi	r2,r2,2
     b40:	d0a4500d 	sth	r2,-28352(gp)
}
     b44:	0001883a 	nop
     b48:	e037883a 	mov	sp,fp
     b4c:	dfc00117 	ldw	ra,4(sp)
     b50:	df000017 	ldw	fp,0(sp)
     b54:	dec00204 	addi	sp,sp,8
     b58:	f800283a 	ret

00000b5c <doCellSize>:

/* The first few builtins are very simple, not need to waste vertical space here */
BUILTIN( 1, "CELL",      doCellSize,      0)              { push(CELL_SIZE); }
     b5c:	defffe04 	addi	sp,sp,-8
     b60:	dfc00115 	stw	ra,4(sp)
     b64:	df000015 	stw	fp,0(sp)
     b68:	d839883a 	mov	fp,sp
     b6c:	01000084 	movi	r4,2
     b70:	00003680 	call	368 <push>
     b74:	0001883a 	nop
     b78:	e037883a 	mov	sp,fp
     b7c:	dfc00117 	ldw	ra,4(sp)
     b80:	df000017 	ldw	fp,0(sp)
     b84:	dec00204 	addi	sp,sp,8
     b88:	f800283a 	ret

00000b8c <memRead>:
BUILTIN( 2, "@",         memRead,         0)              { push(readMem(pop())); }
     b8c:	defffe04 	addi	sp,sp,-8
     b90:	dfc00115 	stw	ra,4(sp)
     b94:	df000015 	stw	fp,0(sp)
     b98:	d839883a 	mov	fp,sp
     b9c:	00002700 	call	270 <pop>
     ba0:	10bfffcc 	andi	r2,r2,65535
     ba4:	1009883a 	mov	r4,r2
     ba8:	00005780 	call	578 <readMem>
     bac:	10bfffcc 	andi	r2,r2,65535
     bb0:	1009883a 	mov	r4,r2
     bb4:	00003680 	call	368 <push>
     bb8:	0001883a 	nop
     bbc:	e037883a 	mov	sp,fp
     bc0:	dfc00117 	ldw	ra,4(sp)
     bc4:	df000017 	ldw	fp,0(sp)
     bc8:	dec00204 	addi	sp,sp,8
     bcc:	f800283a 	ret

00000bd0 <memReadByte>:
BUILTIN( 3, "C@",        memReadByte,     0)              { push(memory[pop()]); }
     bd0:	defffe04 	addi	sp,sp,-8
     bd4:	dfc00115 	stw	ra,4(sp)
     bd8:	df000015 	stw	fp,0(sp)
     bdc:	d839883a 	mov	fp,sp
     be0:	00002700 	call	270 <pop>
     be4:	10ffffcc 	andi	r3,r2,65535
     be8:	00800074 	movhi	r2,1
     bec:	10a56604 	addi	r2,r2,-27240
     bf0:	10c5883a 	add	r2,r2,r3
     bf4:	10800003 	ldbu	r2,0(r2)
     bf8:	10803fcc 	andi	r2,r2,255
     bfc:	1009883a 	mov	r4,r2
     c00:	00003680 	call	368 <push>
     c04:	0001883a 	nop
     c08:	e037883a 	mov	sp,fp
     c0c:	dfc00117 	ldw	ra,4(sp)
     c10:	df000017 	ldw	fp,0(sp)
     c14:	dec00204 	addi	sp,sp,8
     c18:	f800283a 	ret

00000c1c <key>:
BUILTIN( 4, "KEY",       key,             0)              { push(getkey()); }
     c1c:	defffe04 	addi	sp,sp,-8
     c20:	dfc00115 	stw	ra,4(sp)
     c24:	df000015 	stw	fp,0(sp)
     c28:	d839883a 	mov	fp,sp
     c2c:	00001240 	call	124 <getkey>
     c30:	10bfffcc 	andi	r2,r2,65535
     c34:	1009883a 	mov	r4,r2
     c38:	00003680 	call	368 <push>
     c3c:	0001883a 	nop
     c40:	e037883a 	mov	sp,fp
     c44:	dfc00117 	ldw	ra,4(sp)
     c48:	df000017 	ldw	fp,0(sp)
     c4c:	dec00204 	addi	sp,sp,8
     c50:	f800283a 	ret

00000c54 <emit>:
BUILTIN( 5, "EMIT",      emit,            0)              { putkey(pop() & 255); }
     c54:	defffe04 	addi	sp,sp,-8
     c58:	dfc00115 	stw	ra,4(sp)
     c5c:	df000015 	stw	fp,0(sp)
     c60:	d839883a 	mov	fp,sp
     c64:	00002700 	call	270 <pop>
     c68:	10803fcc 	andi	r2,r2,255
     c6c:	1080201c 	xori	r2,r2,128
     c70:	10bfe004 	addi	r2,r2,-128
     c74:	1009883a 	mov	r4,r2
     c78:	000003c0 	call	3c <putkey>
     c7c:	0001883a 	nop
     c80:	e037883a 	mov	sp,fp
     c84:	dfc00117 	ldw	ra,4(sp)
     c88:	df000017 	ldw	fp,0(sp)
     c8c:	dec00204 	addi	sp,sp,8
     c90:	f800283a 	ret

00000c94 <drop>:
BUILTIN( 6, "DROP",      drop,            0)              { pop(); }
     c94:	defffe04 	addi	sp,sp,-8
     c98:	dfc00115 	stw	ra,4(sp)
     c9c:	df000015 	stw	fp,0(sp)
     ca0:	d839883a 	mov	fp,sp
     ca4:	00002700 	call	270 <pop>
     ca8:	0001883a 	nop
     cac:	e037883a 	mov	sp,fp
     cb0:	dfc00117 	ldw	ra,4(sp)
     cb4:	df000017 	ldw	fp,0(sp)
     cb8:	dec00204 	addi	sp,sp,8
     cbc:	f800283a 	ret

00000cc0 <doExit>:
BUILTIN( 7, "EXIT",      doExit,          0)              { next = rpop(); }
     cc0:	defffe04 	addi	sp,sp,-8
     cc4:	dfc00115 	stw	ra,4(sp)
     cc8:	df000015 	stw	fp,0(sp)
     ccc:	d839883a 	mov	fp,sp
     cd0:	000047c0 	call	47c <rpop>
     cd4:	d0a4500d 	sth	r2,-28352(gp)
     cd8:	0001883a 	nop
     cdc:	e037883a 	mov	sp,fp
     ce0:	dfc00117 	ldw	ra,4(sp)
     ce4:	df000017 	ldw	fp,0(sp)
     ce8:	dec00204 	addi	sp,sp,8
     cec:	f800283a 	ret

00000cf0 <bye>:
BUILTIN( 8, "BYE",       bye,             0)              { exitReq = 1; }
     cf0:	deffff04 	addi	sp,sp,-4
     cf4:	df000015 	stw	fp,0(sp)
     cf8:	d839883a 	mov	fp,sp
     cfc:	00800044 	movi	r2,1
     d00:	d0a44e15 	stw	r2,-28360(gp)
     d04:	0001883a 	nop
     d08:	e037883a 	mov	sp,fp
     d0c:	df000017 	ldw	fp,0(sp)
     d10:	dec00104 	addi	sp,sp,4
     d14:	f800283a 	ret

00000d18 <doLatest>:
BUILTIN( 9, "LATEST",    doLatest,        0)              { push(LATEST_POSITION); }
     d18:	defffe04 	addi	sp,sp,-8
     d1c:	dfc00115 	stw	ra,4(sp)
     d20:	df000015 	stw	fp,0(sp)
     d24:	d839883a 	mov	fp,sp
     d28:	01000804 	movi	r4,32
     d2c:	00003680 	call	368 <push>
     d30:	0001883a 	nop
     d34:	e037883a 	mov	sp,fp
     d38:	dfc00117 	ldw	ra,4(sp)
     d3c:	df000017 	ldw	fp,0(sp)
     d40:	dec00204 	addi	sp,sp,8
     d44:	f800283a 	ret

00000d48 <doHere>:
BUILTIN(10, "HERE",      doHere,          0)              { push(HERE_POSITION); }
     d48:	defffe04 	addi	sp,sp,-8
     d4c:	dfc00115 	stw	ra,4(sp)
     d50:	df000015 	stw	fp,0(sp)
     d54:	d839883a 	mov	fp,sp
     d58:	01000884 	movi	r4,34
     d5c:	00003680 	call	368 <push>
     d60:	0001883a 	nop
     d64:	e037883a 	mov	sp,fp
     d68:	dfc00117 	ldw	ra,4(sp)
     d6c:	df000017 	ldw	fp,0(sp)
     d70:	dec00204 	addi	sp,sp,8
     d74:	f800283a 	ret

00000d78 <doBase>:
BUILTIN(11, "BASE",      doBase,          0)              { push(BASE_POSITION); }
     d78:	defffe04 	addi	sp,sp,-8
     d7c:	dfc00115 	stw	ra,4(sp)
     d80:	df000015 	stw	fp,0(sp)
     d84:	d839883a 	mov	fp,sp
     d88:	01000904 	movi	r4,36
     d8c:	00003680 	call	368 <push>
     d90:	0001883a 	nop
     d94:	e037883a 	mov	sp,fp
     d98:	dfc00117 	ldw	ra,4(sp)
     d9c:	df000017 	ldw	fp,0(sp)
     da0:	dec00204 	addi	sp,sp,8
     da4:	f800283a 	ret

00000da8 <doState>:
BUILTIN(12, "STATE",     doState,         0)              { push(STATE_POSITION); }
     da8:	defffe04 	addi	sp,sp,-8
     dac:	dfc00115 	stw	ra,4(sp)
     db0:	df000015 	stw	fp,0(sp)
     db4:	d839883a 	mov	fp,sp
     db8:	01000984 	movi	r4,38
     dbc:	00003680 	call	368 <push>
     dc0:	0001883a 	nop
     dc4:	e037883a 	mov	sp,fp
     dc8:	dfc00117 	ldw	ra,4(sp)
     dcc:	df000017 	ldw	fp,0(sp)
     dd0:	dec00204 	addi	sp,sp,8
     dd4:	f800283a 	ret

00000dd8 <gotoInterpreter>:
BUILTIN(13, "[",         gotoInterpreter, FLAG_IMMEDIATE) { *state = 0; }
     dd8:	deffff04 	addi	sp,sp,-4
     ddc:	df000015 	stw	fp,0(sp)
     de0:	d839883a 	mov	fp,sp
     de4:	d0a44917 	ldw	r2,-28380(gp)
     de8:	1000000d 	sth	zero,0(r2)
     dec:	0001883a 	nop
     df0:	e037883a 	mov	sp,fp
     df4:	df000017 	ldw	fp,0(sp)
     df8:	dec00104 	addi	sp,sp,4
     dfc:	f800283a 	ret

00000e00 <gotoCompiler>:
BUILTIN(14, "]",         gotoCompiler,    0)              { *state = 1; }
     e00:	deffff04 	addi	sp,sp,-4
     e04:	df000015 	stw	fp,0(sp)
     e08:	d839883a 	mov	fp,sp
     e0c:	d0a44917 	ldw	r2,-28380(gp)
     e10:	00c00044 	movi	r3,1
     e14:	10c0000d 	sth	r3,0(r2)
     e18:	0001883a 	nop
     e1c:	e037883a 	mov	sp,fp
     e20:	df000017 	ldw	fp,0(sp)
     e24:	dec00104 	addi	sp,sp,4
     e28:	f800283a 	ret

00000e2c <hide>:
BUILTIN(15, "HIDE",      hide,            0)              { memory[*latest + CELL_SIZE] ^= FLAG_HIDDEN; }
     e2c:	deffff04 	addi	sp,sp,-4
     e30:	df000015 	stw	fp,0(sp)
     e34:	d839883a 	mov	fp,sp
     e38:	d0a44717 	ldw	r2,-28388(gp)
     e3c:	1080000b 	ldhu	r2,0(r2)
     e40:	10bfffcc 	andi	r2,r2,65535
     e44:	10c00084 	addi	r3,r2,2
     e48:	d0a44717 	ldw	r2,-28388(gp)
     e4c:	1080000b 	ldhu	r2,0(r2)
     e50:	10bfffcc 	andi	r2,r2,65535
     e54:	11000084 	addi	r4,r2,2
     e58:	00800074 	movhi	r2,1
     e5c:	10a56604 	addi	r2,r2,-27240
     e60:	1105883a 	add	r2,r2,r4
     e64:	10800003 	ldbu	r2,0(r2)
     e68:	1080101c 	xori	r2,r2,64
     e6c:	1009883a 	mov	r4,r2
     e70:	00800074 	movhi	r2,1
     e74:	10a56604 	addi	r2,r2,-27240
     e78:	10c5883a 	add	r2,r2,r3
     e7c:	11000005 	stb	r4,0(r2)
     e80:	0001883a 	nop
     e84:	e037883a 	mov	sp,fp
     e88:	df000017 	ldw	fp,0(sp)
     e8c:	dec00104 	addi	sp,sp,4
     e90:	f800283a 	ret

00000e94 <rtos>:
BUILTIN(16, "R>",        rtos,            0)              { push(rpop()); }
     e94:	defffe04 	addi	sp,sp,-8
     e98:	dfc00115 	stw	ra,4(sp)
     e9c:	df000015 	stw	fp,0(sp)
     ea0:	d839883a 	mov	fp,sp
     ea4:	000047c0 	call	47c <rpop>
     ea8:	10bfffcc 	andi	r2,r2,65535
     eac:	1009883a 	mov	r4,r2
     eb0:	00003680 	call	368 <push>
     eb4:	0001883a 	nop
     eb8:	e037883a 	mov	sp,fp
     ebc:	dfc00117 	ldw	ra,4(sp)
     ec0:	df000017 	ldw	fp,0(sp)
     ec4:	dec00204 	addi	sp,sp,8
     ec8:	f800283a 	ret

00000ecc <stor>:
BUILTIN(17, ">R",        stor,            0)              { rpush(pop()); }
     ecc:	defffe04 	addi	sp,sp,-8
     ed0:	dfc00115 	stw	ra,4(sp)
     ed4:	df000015 	stw	fp,0(sp)
     ed8:	d839883a 	mov	fp,sp
     edc:	00002700 	call	270 <pop>
     ee0:	10bfffcc 	andi	r2,r2,65535
     ee4:	1009883a 	mov	r4,r2
     ee8:	00004f80 	call	4f8 <rpush>
     eec:	0001883a 	nop
     ef0:	e037883a 	mov	sp,fp
     ef4:	dfc00117 	ldw	ra,4(sp)
     ef8:	df000017 	ldw	fp,0(sp)
     efc:	dec00204 	addi	sp,sp,8
     f00:	f800283a 	ret

00000f04 <key_p>:
BUILTIN(18, "KEY?",      key_p,           0)              { push(keyWaiting()); }
     f04:	defffe04 	addi	sp,sp,-8
     f08:	dfc00115 	stw	ra,4(sp)
     f0c:	df000015 	stw	fp,0(sp)
     f10:	d839883a 	mov	fp,sp
     f14:	00000f00 	call	f0 <keyWaiting>
     f18:	10bfffcc 	andi	r2,r2,65535
     f1c:	1009883a 	mov	r4,r2
     f20:	00003680 	call	368 <push>
     f24:	0001883a 	nop
     f28:	e037883a 	mov	sp,fp
     f2c:	dfc00117 	ldw	ra,4(sp)
     f30:	df000017 	ldw	fp,0(sp)
     f34:	dec00204 	addi	sp,sp,8
     f38:	f800283a 	ret

00000f3c <branch>:
BUILTIN(19, "BRANCH",    branch,          0)              { next += readMem(next); }
     f3c:	defffe04 	addi	sp,sp,-8
     f40:	dfc00115 	stw	ra,4(sp)
     f44:	df000015 	stw	fp,0(sp)
     f48:	d839883a 	mov	fp,sp
     f4c:	d0a4500b 	ldhu	r2,-28352(gp)
     f50:	10bfffcc 	andi	r2,r2,65535
     f54:	1009883a 	mov	r4,r2
     f58:	00005780 	call	578 <readMem>
     f5c:	1007883a 	mov	r3,r2
     f60:	d0a4500b 	ldhu	r2,-28352(gp)
     f64:	1885883a 	add	r2,r3,r2
     f68:	d0a4500d 	sth	r2,-28352(gp)
     f6c:	0001883a 	nop
     f70:	e037883a 	mov	sp,fp
     f74:	dfc00117 	ldw	ra,4(sp)
     f78:	df000017 	ldw	fp,0(sp)
     f7c:	dec00204 	addi	sp,sp,8
     f80:	f800283a 	ret

00000f84 <zbranch>:
BUILTIN(20, "0BRANCH",   zbranch,         0)              { next += pop() ? CELL_SIZE : readMem(next); }
     f84:	defffe04 	addi	sp,sp,-8
     f88:	dfc00115 	stw	ra,4(sp)
     f8c:	df000015 	stw	fp,0(sp)
     f90:	d839883a 	mov	fp,sp
     f94:	00002700 	call	270 <pop>
     f98:	10bfffcc 	andi	r2,r2,65535
     f9c:	1000061e 	bne	r2,zero,fb8 <zbranch+0x34>
     fa0:	d0a4500b 	ldhu	r2,-28352(gp)
     fa4:	10bfffcc 	andi	r2,r2,65535
     fa8:	1009883a 	mov	r4,r2
     fac:	00005780 	call	578 <readMem>
     fb0:	10bfffcc 	andi	r2,r2,65535
     fb4:	00000106 	br	fbc <zbranch+0x38>
     fb8:	00800084 	movi	r2,2
     fbc:	1007883a 	mov	r3,r2
     fc0:	d0a4500b 	ldhu	r2,-28352(gp)
     fc4:	1885883a 	add	r2,r3,r2
     fc8:	d0a4500d 	sth	r2,-28352(gp)
     fcc:	0001883a 	nop
     fd0:	e037883a 	mov	sp,fp
     fd4:	dfc00117 	ldw	ra,4(sp)
     fd8:	df000017 	ldw	fp,0(sp)
     fdc:	dec00204 	addi	sp,sp,8
     fe0:	f800283a 	ret

00000fe4 <toggleImmediate>:
BUILTIN(21, "IMMEDIATE", toggleImmediate, FLAG_IMMEDIATE) { memory[*latest + CELL_SIZE] ^= FLAG_IMMEDIATE; }
     fe4:	deffff04 	addi	sp,sp,-4
     fe8:	df000015 	stw	fp,0(sp)
     fec:	d839883a 	mov	fp,sp
     ff0:	d0a44717 	ldw	r2,-28388(gp)
     ff4:	1080000b 	ldhu	r2,0(r2)
     ff8:	10bfffcc 	andi	r2,r2,65535
     ffc:	10c00084 	addi	r3,r2,2
    1000:	d0a44717 	ldw	r2,-28388(gp)
    1004:	1080000b 	ldhu	r2,0(r2)
    1008:	10bfffcc 	andi	r2,r2,65535
    100c:	11000084 	addi	r4,r2,2
    1010:	00800074 	movhi	r2,1
    1014:	10a56604 	addi	r2,r2,-27240
    1018:	1105883a 	add	r2,r2,r4
    101c:	11000003 	ldbu	r4,0(r2)
    1020:	00bfe004 	movi	r2,-128
    1024:	2084f03a 	xor	r2,r4,r2
    1028:	1009883a 	mov	r4,r2
    102c:	00800074 	movhi	r2,1
    1030:	10a56604 	addi	r2,r2,-27240
    1034:	10c5883a 	add	r2,r2,r3
    1038:	11000005 	stb	r4,0(r2)
    103c:	0001883a 	nop
    1040:	e037883a 	mov	sp,fp
    1044:	df000017 	ldw	fp,0(sp)
    1048:	dec00104 	addi	sp,sp,4
    104c:	f800283a 	ret

00001050 <doFree>:
BUILTIN(22, "FREE",      doFree,          0)              { push(MEM_SIZE - *here); }
    1050:	defffe04 	addi	sp,sp,-8
    1054:	dfc00115 	stw	ra,4(sp)
    1058:	df000015 	stw	fp,0(sp)
    105c:	d839883a 	mov	fp,sp
    1060:	d0a45217 	ldw	r2,-28344(gp)
    1064:	1080000b 	ldhu	r2,0(r2)
    1068:	0085c83a 	sub	r2,zero,r2
    106c:	10bfffcc 	andi	r2,r2,65535
    1070:	1009883a 	mov	r4,r2
    1074:	00003680 	call	368 <push>
    1078:	0001883a 	nop
    107c:	e037883a 	mov	sp,fp
    1080:	dfc00117 	ldw	ra,4(sp)
    1084:	df000017 	ldw	fp,0(sp)
    1088:	dec00204 	addi	sp,sp,8
    108c:	f800283a 	ret

00001090 <s0_r>:
BUILTIN(23, "S0@",       s0_r,            0)              { push(STACK_POSITION + CELL_SIZE); }
    1090:	defffe04 	addi	sp,sp,-8
    1094:	dfc00115 	stw	ra,4(sp)
    1098:	df000015 	stw	fp,0(sp)
    109c:	d839883a 	mov	fp,sp
    10a0:	01000a84 	movi	r4,42
    10a4:	00003680 	call	368 <push>
    10a8:	0001883a 	nop
    10ac:	e037883a 	mov	sp,fp
    10b0:	dfc00117 	ldw	ra,4(sp)
    10b4:	df000017 	ldw	fp,0(sp)
    10b8:	dec00204 	addi	sp,sp,8
    10bc:	f800283a 	ret

000010c0 <dsp_r>:
BUILTIN(24, "DSP@",      dsp_r,           0)              { push(STACK_POSITION + *sp * CELL_SIZE); }
    10c0:	defffe04 	addi	sp,sp,-8
    10c4:	dfc00115 	stw	ra,4(sp)
    10c8:	df000015 	stw	fp,0(sp)
    10cc:	d839883a 	mov	fp,sp
    10d0:	d0a44f17 	ldw	r2,-28356(gp)
    10d4:	1080000b 	ldhu	r2,0(r2)
    10d8:	10bfffcc 	andi	r2,r2,65535
    10dc:	10800504 	addi	r2,r2,20
    10e0:	1085883a 	add	r2,r2,r2
    10e4:	10bfffcc 	andi	r2,r2,65535
    10e8:	1009883a 	mov	r4,r2
    10ec:	00003680 	call	368 <push>
    10f0:	0001883a 	nop
    10f4:	e037883a 	mov	sp,fp
    10f8:	dfc00117 	ldw	ra,4(sp)
    10fc:	df000017 	ldw	fp,0(sp)
    1100:	dec00204 	addi	sp,sp,8
    1104:	f800283a 	ret

00001108 <not>:
BUILTIN(25, "NOT",       not,             0)              { push(~pop()); }
    1108:	defffe04 	addi	sp,sp,-8
    110c:	dfc00115 	stw	ra,4(sp)
    1110:	df000015 	stw	fp,0(sp)
    1114:	d839883a 	mov	fp,sp
    1118:	00002700 	call	270 <pop>
    111c:	0084303a 	nor	r2,zero,r2
    1120:	10bfffcc 	andi	r2,r2,65535
    1124:	1009883a 	mov	r4,r2
    1128:	00003680 	call	368 <push>
    112c:	0001883a 	nop
    1130:	e037883a 	mov	sp,fp
    1134:	dfc00117 	ldw	ra,4(sp)
    1138:	df000017 	ldw	fp,0(sp)
    113c:	dec00204 	addi	sp,sp,8
    1140:	f800283a 	ret

00001144 <dup>:
BUILTIN(26, "DUP",       dup,             0)              { push(tos()); }
    1144:	defffe04 	addi	sp,sp,-8
    1148:	dfc00115 	stw	ra,4(sp)
    114c:	df000015 	stw	fp,0(sp)
    1150:	d839883a 	mov	fp,sp
    1154:	00002ec0 	call	2ec <tos>
    1158:	10bfffcc 	andi	r2,r2,65535
    115c:	1009883a 	mov	r4,r2
    1160:	00003680 	call	368 <push>
    1164:	0001883a 	nop
    1168:	e037883a 	mov	sp,fp
    116c:	dfc00117 	ldw	ra,4(sp)
    1170:	df000017 	ldw	fp,0(sp)
    1174:	dec00204 	addi	sp,sp,8
    1178:	f800283a 	ret

0000117c <memWrite>:

BUILTIN(27, "!", memWrite, 0)
{
    117c:	defffd04 	addi	sp,sp,-12
    1180:	dfc00215 	stw	ra,8(sp)
    1184:	df000115 	stw	fp,4(sp)
    1188:	df000104 	addi	fp,sp,4
    cell address = pop();
    118c:	00002700 	call	270 <pop>
    1190:	e0bfff0d 	sth	r2,-4(fp)
    cell value = pop();
    1194:	00002700 	call	270 <pop>
    1198:	e0bfff8d 	sth	r2,-2(fp)
    writeMem(address, value);
    119c:	e0bfff0b 	ldhu	r2,-4(fp)
    11a0:	e0ffff8b 	ldhu	r3,-2(fp)
    11a4:	180b883a 	mov	r5,r3
    11a8:	1009883a 	mov	r4,r2
    11ac:	00005b00 	call	5b0 <writeMem>
}
    11b0:	0001883a 	nop
    11b4:	e037883a 	mov	sp,fp
    11b8:	dfc00117 	ldw	ra,4(sp)
    11bc:	df000017 	ldw	fp,0(sp)
    11c0:	dec00204 	addi	sp,sp,8
    11c4:	f800283a 	ret

000011c8 <memWriteByte>:

BUILTIN(28, "C!", memWriteByte, 0)
{
    11c8:	defffd04 	addi	sp,sp,-12
    11cc:	dfc00215 	stw	ra,8(sp)
    11d0:	df000115 	stw	fp,4(sp)
    11d4:	df000104 	addi	fp,sp,4
    cell address = pop();
    11d8:	00002700 	call	270 <pop>
    11dc:	e0bfff0d 	sth	r2,-4(fp)
    cell value = pop();
    11e0:	00002700 	call	270 <pop>
    11e4:	e0bfff8d 	sth	r2,-2(fp)
    memory[address] = value & 255;
    11e8:	e0ffff0b 	ldhu	r3,-4(fp)
    11ec:	e0bfff8b 	ldhu	r2,-2(fp)
    11f0:	1009883a 	mov	r4,r2
    11f4:	00800074 	movhi	r2,1
    11f8:	10a56604 	addi	r2,r2,-27240
    11fc:	10c5883a 	add	r2,r2,r3
    1200:	11000005 	stb	r4,0(r2)
}
    1204:	0001883a 	nop
    1208:	e037883a 	mov	sp,fp
    120c:	dfc00117 	ldw	ra,4(sp)
    1210:	df000017 	ldw	fp,0(sp)
    1214:	dec00204 	addi	sp,sp,8
    1218:	f800283a 	ret

0000121c <swap>:

BUILTIN(29, "SWAP", swap, 0)
{
    121c:	defffd04 	addi	sp,sp,-12
    1220:	dfc00215 	stw	ra,8(sp)
    1224:	df000115 	stw	fp,4(sp)
    1228:	df000104 	addi	fp,sp,4
    cell a = pop();
    122c:	00002700 	call	270 <pop>
    1230:	e0bfff0d 	sth	r2,-4(fp)
    cell b = pop();
    1234:	00002700 	call	270 <pop>
    1238:	e0bfff8d 	sth	r2,-2(fp)
    push(a);
    123c:	e0bfff0b 	ldhu	r2,-4(fp)
    1240:	1009883a 	mov	r4,r2
    1244:	00003680 	call	368 <push>
    push(b);
    1248:	e0bfff8b 	ldhu	r2,-2(fp)
    124c:	1009883a 	mov	r4,r2
    1250:	00003680 	call	368 <push>
}
    1254:	0001883a 	nop
    1258:	e037883a 	mov	sp,fp
    125c:	dfc00117 	ldw	ra,4(sp)
    1260:	df000017 	ldw	fp,0(sp)
    1264:	dec00204 	addi	sp,sp,8
    1268:	f800283a 	ret

0000126c <over>:

BUILTIN(30, "OVER", over, 0)
{
    126c:	defffd04 	addi	sp,sp,-12
    1270:	dfc00215 	stw	ra,8(sp)
    1274:	df000115 	stw	fp,4(sp)
    1278:	df000104 	addi	fp,sp,4
    cell a = pop();
    127c:	00002700 	call	270 <pop>
    1280:	e0bfff0d 	sth	r2,-4(fp)
    cell b = tos();
    1284:	00002ec0 	call	2ec <tos>
    1288:	e0bfff8d 	sth	r2,-2(fp)
    push(a);
    128c:	e0bfff0b 	ldhu	r2,-4(fp)
    1290:	1009883a 	mov	r4,r2
    1294:	00003680 	call	368 <push>
    push(b);
    1298:	e0bfff8b 	ldhu	r2,-2(fp)
    129c:	1009883a 	mov	r4,r2
    12a0:	00003680 	call	368 <push>
}
    12a4:	0001883a 	nop
    12a8:	e037883a 	mov	sp,fp
    12ac:	dfc00117 	ldw	ra,4(sp)
    12b0:	df000017 	ldw	fp,0(sp)
    12b4:	dec00204 	addi	sp,sp,8
    12b8:	f800283a 	ret

000012bc <comma>:

BUILTIN(31, ",", comma, 0)
{
    12bc:	defffe04 	addi	sp,sp,-8
    12c0:	dfc00115 	stw	ra,4(sp)
    12c4:	df000015 	stw	fp,0(sp)
    12c8:	d839883a 	mov	fp,sp
    push(*here);
    12cc:	d0a45217 	ldw	r2,-28344(gp)
    12d0:	1080000b 	ldhu	r2,0(r2)
    12d4:	10bfffcc 	andi	r2,r2,65535
    12d8:	1009883a 	mov	r4,r2
    12dc:	00003680 	call	368 <push>
    memWrite();
    12e0:	000117c0 	call	117c <memWrite>
    *here += CELL_SIZE;
    12e4:	d0a45217 	ldw	r2,-28344(gp)
    12e8:	d0e45217 	ldw	r3,-28344(gp)
    12ec:	18c0000b 	ldhu	r3,0(r3)
    12f0:	18c00084 	addi	r3,r3,2
    12f4:	10c0000d 	sth	r3,0(r2)
}
    12f8:	0001883a 	nop
    12fc:	e037883a 	mov	sp,fp
    1300:	dfc00117 	ldw	ra,4(sp)
    1304:	df000017 	ldw	fp,0(sp)
    1308:	dec00204 	addi	sp,sp,8
    130c:	f800283a 	ret

00001310 <commaByte>:

BUILTIN(32, "C,", commaByte, 0)
{
    1310:	defffe04 	addi	sp,sp,-8
    1314:	dfc00115 	stw	ra,4(sp)
    1318:	df000015 	stw	fp,0(sp)
    131c:	d839883a 	mov	fp,sp
    push(*here);
    1320:	d0a45217 	ldw	r2,-28344(gp)
    1324:	1080000b 	ldhu	r2,0(r2)
    1328:	10bfffcc 	andi	r2,r2,65535
    132c:	1009883a 	mov	r4,r2
    1330:	00003680 	call	368 <push>
    memWriteByte();
    1334:	00011c80 	call	11c8 <memWriteByte>
    *here += sizeof(byte);
    1338:	d0a45217 	ldw	r2,-28344(gp)
    133c:	d0e45217 	ldw	r3,-28344(gp)
    1340:	18c0000b 	ldhu	r3,0(r3)
    1344:	18c00044 	addi	r3,r3,1
    1348:	10c0000d 	sth	r3,0(r2)
}
    134c:	0001883a 	nop
    1350:	e037883a 	mov	sp,fp
    1354:	dfc00117 	ldw	ra,4(sp)
    1358:	df000017 	ldw	fp,0(sp)
    135c:	dec00204 	addi	sp,sp,8
    1360:	f800283a 	ret

00001364 <word>:

BUILTIN(33, "WORD", word, 0)
{
    1364:	defffd04 	addi	sp,sp,-12
    1368:	dfc00215 	stw	ra,8(sp)
    136c:	df000115 	stw	fp,4(sp)
    1370:	df000104 	addi	fp,sp,4
    byte len = readWord();
    1374:	00005f40 	call	5f4 <readWord>
    1378:	e0bfff05 	stb	r2,-4(fp)
    push(1);
    137c:	01000044 	movi	r4,1
    1380:	00003680 	call	368 <push>
    push(len);
    1384:	e0bfff03 	ldbu	r2,-4(fp)
    1388:	1009883a 	mov	r4,r2
    138c:	00003680 	call	368 <push>
}
    1390:	0001883a 	nop
    1394:	e037883a 	mov	sp,fp
    1398:	dfc00117 	ldw	ra,4(sp)
    139c:	df000017 	ldw	fp,0(sp)
    13a0:	dec00204 	addi	sp,sp,8
    13a4:	f800283a 	ret

000013a8 <find>:

BUILTIN(34, "FIND", find, 0)
{
    13a8:	defffc04 	addi	sp,sp,-16
    13ac:	dfc00315 	stw	ra,12(sp)
    13b0:	df000215 	stw	fp,8(sp)
    13b4:	df000204 	addi	fp,sp,8
    cell len = pop();
    13b8:	00002700 	call	270 <pop>
    13bc:	e0bffe0d 	sth	r2,-8(fp)
    cell address = pop();
    13c0:	00002700 	call	270 <pop>
    13c4:	e0bffe8d 	sth	r2,-6(fp)
    cell ret = findWord(address, len);
    13c8:	e0bffe8b 	ldhu	r2,-6(fp)
    13cc:	e0fffe0b 	ldhu	r3,-8(fp)
    13d0:	180b883a 	mov	r5,r3
    13d4:	1009883a 	mov	r4,r2
    13d8:	000075c0 	call	75c <findWord>
    13dc:	e0bfff0d 	sth	r2,-4(fp)
    push(ret);
    13e0:	e0bfff0b 	ldhu	r2,-4(fp)
    13e4:	1009883a 	mov	r4,r2
    13e8:	00003680 	call	368 <push>
}
    13ec:	0001883a 	nop
    13f0:	e037883a 	mov	sp,fp
    13f4:	dfc00117 	ldw	ra,4(sp)
    13f8:	df000017 	ldw	fp,0(sp)
    13fc:	dec00204 	addi	sp,sp,8
    1400:	f800283a 	ret

00001404 <getCfa>:

cell getCfa(cell address)
{
    1404:	defffd04 	addi	sp,sp,-12
    1408:	df000215 	stw	fp,8(sp)
    140c:	df000204 	addi	fp,sp,8
    1410:	2005883a 	mov	r2,r4
    1414:	e0bfff0d 	sth	r2,-4(fp)
    byte len = (memory[address + CELL_SIZE] & MASK_NAMELENGTH) + 1;
    1418:	e0bfff0b 	ldhu	r2,-4(fp)
    141c:	10c00084 	addi	r3,r2,2
    1420:	00800074 	movhi	r2,1
    1424:	10a56604 	addi	r2,r2,-27240
    1428:	10c5883a 	add	r2,r2,r3
    142c:	10800003 	ldbu	r2,0(r2)
    1430:	108007cc 	andi	r2,r2,31
    1434:	10800044 	addi	r2,r2,1
    1438:	e0bffe05 	stb	r2,-8(fp)
    while ((len & (CELL_SIZE-1)) != 0) len++;
    143c:	00000306 	br	144c <getCfa+0x48>
    1440:	e0bffe03 	ldbu	r2,-8(fp)
    1444:	10800044 	addi	r2,r2,1
    1448:	e0bffe05 	stb	r2,-8(fp)
    144c:	e0bffe03 	ldbu	r2,-8(fp)
    1450:	1080004c 	andi	r2,r2,1
    1454:	103ffa1e 	bne	r2,zero,1440 <__ram_exceptions_end+0xfdfff420>
    return address + CELL_SIZE + len;
    1458:	e0fffe03 	ldbu	r3,-8(fp)
    145c:	e0bfff0b 	ldhu	r2,-4(fp)
    1460:	1885883a 	add	r2,r3,r2
    1464:	10800084 	addi	r2,r2,2
}
    1468:	e037883a 	mov	sp,fp
    146c:	df000017 	ldw	fp,0(sp)
    1470:	dec00104 	addi	sp,sp,4
    1474:	f800283a 	ret

00001478 <cfa>:

BUILTIN(35, ">CFA", cfa, 0)
{
    1478:	defffd04 	addi	sp,sp,-12
    147c:	dfc00215 	stw	ra,8(sp)
    1480:	df000115 	stw	fp,4(sp)
    1484:	df000104 	addi	fp,sp,4
    cell address = pop();
    1488:	00002700 	call	270 <pop>
    148c:	e0bfff0d 	sth	r2,-4(fp)
    cell ret = getCfa(address);
    1490:	e0bfff0b 	ldhu	r2,-4(fp)
    1494:	1009883a 	mov	r4,r2
    1498:	00014040 	call	1404 <getCfa>
    149c:	e0bfff8d 	sth	r2,-2(fp)
    if (ret < maxBuiltinAddress)
    14a0:	d0a4530b 	ldhu	r2,-28340(gp)
    14a4:	e0ffff8b 	ldhu	r3,-2(fp)
    14a8:	10bfffcc 	andi	r2,r2,65535
    14ac:	1880072e 	bgeu	r3,r2,14cc <cfa+0x54>
        push(readMem(ret));
    14b0:	e0bfff8b 	ldhu	r2,-2(fp)
    14b4:	1009883a 	mov	r4,r2
    14b8:	00005780 	call	578 <readMem>
    14bc:	10bfffcc 	andi	r2,r2,65535
    14c0:	1009883a 	mov	r4,r2
    14c4:	00003680 	call	368 <push>
    else
        push(ret);
}
    14c8:	00000306 	br	14d8 <cfa+0x60>
    cell address = pop();
    cell ret = getCfa(address);
    if (ret < maxBuiltinAddress)
        push(readMem(ret));
    else
        push(ret);
    14cc:	e0bfff8b 	ldhu	r2,-2(fp)
    14d0:	1009883a 	mov	r4,r2
    14d4:	00003680 	call	368 <push>
}
    14d8:	0001883a 	nop
    14dc:	e037883a 	mov	sp,fp
    14e0:	dfc00117 	ldw	ra,4(sp)
    14e4:	df000017 	ldw	fp,0(sp)
    14e8:	dec00204 	addi	sp,sp,8
    14ec:	f800283a 	ret

000014f0 <number>:

BUILTIN(36, "NUMBER", number, 0)
{
    14f0:	defff904 	addi	sp,sp,-28
    14f4:	dfc00615 	stw	ra,24(sp)
    14f8:	df000515 	stw	fp,20(sp)
    14fc:	df000504 	addi	fp,sp,20
    dcell num;
    cell notRead;
    byte isDouble;
    cell len = pop();
    1500:	00002700 	call	270 <pop>
    1504:	e0bffc0d 	sth	r2,-16(fp)
    byte* address = &memory[pop()];
    1508:	00002700 	call	270 <pop>
    150c:	10ffffcc 	andi	r3,r2,65535
    1510:	00800074 	movhi	r2,1
    1514:	10a56604 	addi	r2,r2,-27240
    1518:	1885883a 	add	r2,r3,r2
    151c:	e0bffd15 	stw	r2,-12(fp)
    parseNumber(address, len, &num, &notRead, &isDouble);
    1520:	e0fffc0b 	ldhu	r3,-16(fp)
    1524:	e17fff04 	addi	r5,fp,-4
    1528:	e13ffe04 	addi	r4,fp,-8
    152c:	e0bfff84 	addi	r2,fp,-2
    1530:	d8800015 	stw	r2,0(sp)
    1534:	280f883a 	mov	r7,r5
    1538:	200d883a 	mov	r6,r4
    153c:	180b883a 	mov	r5,r3
    1540:	e13ffd17 	ldw	r4,-12(fp)
    1544:	00008f80 	call	8f8 <parseNumber>
    if (isDouble) dpush(num); else push((cell)num);
    1548:	e0bfff83 	ldbu	r2,-2(fp)
    154c:	10803fcc 	andi	r2,r2,255
    1550:	10000426 	beq	r2,zero,1564 <number+0x74>
    1554:	e0bffe17 	ldw	r2,-8(fp)
    1558:	1009883a 	mov	r4,r2
    155c:	00004240 	call	424 <dpush>
    1560:	00000406 	br	1574 <number+0x84>
    1564:	e0bffe17 	ldw	r2,-8(fp)
    1568:	10bfffcc 	andi	r2,r2,65535
    156c:	1009883a 	mov	r4,r2
    1570:	00003680 	call	368 <push>
    push(notRead);
    1574:	e0bfff0b 	ldhu	r2,-4(fp)
    1578:	10bfffcc 	andi	r2,r2,65535
    157c:	1009883a 	mov	r4,r2
    1580:	00003680 	call	368 <push>
}
    1584:	0001883a 	nop
    1588:	e037883a 	mov	sp,fp
    158c:	dfc00117 	ldw	ra,4(sp)
    1590:	df000017 	ldw	fp,0(sp)
    1594:	dec00204 	addi	sp,sp,8
    1598:	f800283a 	ret

0000159c <lit>:

BUILTIN(37, "LIT", lit, 0)
{
    159c:	defffe04 	addi	sp,sp,-8
    15a0:	dfc00115 	stw	ra,4(sp)
    15a4:	df000015 	stw	fp,0(sp)
    15a8:	d839883a 	mov	fp,sp
    push(readMem(next));
    15ac:	d0a4500b 	ldhu	r2,-28352(gp)
    15b0:	10bfffcc 	andi	r2,r2,65535
    15b4:	1009883a 	mov	r4,r2
    15b8:	00005780 	call	578 <readMem>
    15bc:	10bfffcc 	andi	r2,r2,65535
    15c0:	1009883a 	mov	r4,r2
    15c4:	00003680 	call	368 <push>
    next += CELL_SIZE;
    15c8:	d0a4500b 	ldhu	r2,-28352(gp)
    15cc:	10800084 	addi	r2,r2,2
    15d0:	d0a4500d 	sth	r2,-28352(gp)
}
    15d4:	0001883a 	nop
    15d8:	e037883a 	mov	sp,fp
    15dc:	dfc00117 	ldw	ra,4(sp)
    15e0:	df000017 	ldw	fp,0(sp)
    15e4:	dec00204 	addi	sp,sp,8
    15e8:	f800283a 	ret

000015ec <quit>:

/* Outer and inner interpreter, TODO split up */
BUILTIN(38, "QUIT", quit, 0)
{
    15ec:	defff604 	addi	sp,sp,-40
    15f0:	dfc00915 	stw	ra,36(sp)
    15f4:	df000815 	stw	fp,32(sp)
    15f8:	df000804 	addi	fp,sp,32
    byte isDouble;
    cell tmp[2];

    int immediate;

    for (exitReq = 0; exitReq == 0;)
    15fc:	d0244e15 	stw	zero,-28360(gp)
    1600:	0000ce06 	br	193c <quit+0x350>
    {
        lastIp = next = quit_address;
    1604:	d0a44d0b 	ldhu	r2,-28364(gp)
    1608:	d0a4500d 	sth	r2,-28352(gp)
    160c:	d0a4500b 	ldhu	r2,-28352(gp)
    1610:	d0a4450d 	sth	r2,-28396(gp)
        errorFlag = 0;
    1614:	d0244a15 	stw	zero,-28376(gp)

        word();
    1618:	00013640 	call	1364 <word>
        find();
    161c:	00013a80 	call	13a8 <find>

        address = pop();
    1620:	00002700 	call	270 <pop>
    1624:	e0bffb0d 	sth	r2,-20(fp)
        if (address)
    1628:	e0bffb0b 	ldhu	r2,-20(fp)
    162c:	10004a26 	beq	r2,zero,1758 <quit+0x16c>
        {
            immediate = (memory[address + CELL_SIZE] & FLAG_IMMEDIATE);
    1630:	e0bffb0b 	ldhu	r2,-20(fp)
    1634:	10c00084 	addi	r3,r2,2
    1638:	00800074 	movhi	r2,1
    163c:	10a56604 	addi	r2,r2,-27240
    1640:	10c5883a 	add	r2,r2,r3
    1644:	10800003 	ldbu	r2,0(r2)
    1648:	10803fcc 	andi	r2,r2,255
    164c:	1080200c 	andi	r2,r2,128
    1650:	e0bffc15 	stw	r2,-16(fp)
            commandAddress = getCfa(address);
    1654:	e0bffb0b 	ldhu	r2,-20(fp)
    1658:	1009883a 	mov	r4,r2
    165c:	00014040 	call	1404 <getCfa>
    1660:	d0a44b0d 	sth	r2,-28372(gp)
            command = readMem(commandAddress);
    1664:	d0a44b0b 	ldhu	r2,-28372(gp)
    1668:	10bfffcc 	andi	r2,r2,65535
    166c:	1009883a 	mov	r4,r2
    1670:	00005780 	call	578 <readMem>
    1674:	e0bff90d 	sth	r2,-28(fp)
            if (*state && !immediate)
    1678:	d0a44917 	ldw	r2,-28380(gp)
    167c:	1080000b 	ldhu	r2,0(r2)
    1680:	10bfffcc 	andi	r2,r2,65535
    1684:	10002f26 	beq	r2,zero,1744 <quit+0x158>
    1688:	e0bffc17 	ldw	r2,-16(fp)
    168c:	10002d1e 	bne	r2,zero,1744 <quit+0x158>
            {
                if (command < MAX_BUILTIN_ID && command != docol_id)
    1690:	e0bff90b 	ldhu	r2,-28(fp)
    1694:	108011e8 	cmpgeui	r2,r2,71
    1698:	1000071e 	bne	r2,zero,16b8 <quit+0xcc>
    169c:	e0bff90b 	ldhu	r2,-28(fp)
    16a0:	0007883a 	mov	r3,zero
    16a4:	10c00426 	beq	r2,r3,16b8 <quit+0xcc>
                    push(command);
    16a8:	e0bff90b 	ldhu	r2,-28(fp)
    16ac:	1009883a 	mov	r4,r2
    16b0:	00003680 	call	368 <push>
    16b4:	00000406 	br	16c8 <quit+0xdc>
                else
                    push(commandAddress);
    16b8:	d0a44b0b 	ldhu	r2,-28372(gp)
    16bc:	10bfffcc 	andi	r2,r2,65535
    16c0:	1009883a 	mov	r4,r2
    16c4:	00003680 	call	368 <push>
                comma();
    16c8:	00012bc0 	call	12bc <comma>
    16cc:	00008706 	br	18ec <quit+0x300>
            }
            else
            {
                while (!errorFlag && !exitReq)
                {
                    if (command == quit_id) break;
    16d0:	e0fff90b 	ldhu	r3,-28(fp)
    16d4:	00800984 	movi	r2,38
    16d8:	18808326 	beq	r3,r2,18e8 <quit+0x2fc>
                    else if (command < MAX_BUILTIN_ID) builtins[command]();
    16dc:	e0bff90b 	ldhu	r2,-28(fp)
    16e0:	108011e8 	cmpgeui	r2,r2,71
    16e4:	1000091e 	bne	r2,zero,170c <quit+0x120>
    16e8:	e0fff90b 	ldhu	r3,-28(fp)
    16ec:	00800074 	movhi	r2,1
    16f0:	10a4f504 	addi	r2,r2,-27692
    16f4:	18c7883a 	add	r3,r3,r3
    16f8:	18c7883a 	add	r3,r3,r3
    16fc:	10c5883a 	add	r2,r2,r3
    1700:	10800017 	ldw	r2,0(r2)
    1704:	103ee83a 	callr	r2
    1708:	00000406 	br	171c <quit+0x130>
                    else
                    {
                        lastIp = next;
    170c:	d0a4500b 	ldhu	r2,-28352(gp)
    1710:	d0a4450d 	sth	r2,-28396(gp)
                        next = command;
    1714:	e0bff90b 	ldhu	r2,-28(fp)
    1718:	d0a4500d 	sth	r2,-28352(gp)
                    }

                    commandAddress = next;
    171c:	d0a4500b 	ldhu	r2,-28352(gp)
    1720:	d0a44b0d 	sth	r2,-28372(gp)
                    command = readMem(commandAddress);
    1724:	d0a44b0b 	ldhu	r2,-28372(gp)
    1728:	10bfffcc 	andi	r2,r2,65535
    172c:	1009883a 	mov	r4,r2
    1730:	00005780 	call	578 <readMem>
    1734:	e0bff90d 	sth	r2,-28(fp)
                    next += CELL_SIZE;
    1738:	d0a4500b 	ldhu	r2,-28352(gp)
    173c:	10800084 	addi	r2,r2,2
    1740:	d0a4500d 	sth	r2,-28352(gp)
                    push(commandAddress);
                comma();
            }
            else
            {
                while (!errorFlag && !exitReq)
    1744:	d0a44a17 	ldw	r2,-28376(gp)
    1748:	1000681e 	bne	r2,zero,18ec <quit+0x300>
    174c:	d0a44e17 	ldw	r2,-28360(gp)
    1750:	103fdf26 	beq	r2,zero,16d0 <__ram_exceptions_end+0xfdfff6b0>
    1754:	00006506 	br	18ec <quit+0x300>
                }
            }
        }
        else
        {
            parseNumber(&memory[1], memory[0], &number, &notRead, &isDouble);
    1758:	00800074 	movhi	r2,1
    175c:	10a56604 	addi	r2,r2,-27240
    1760:	10800003 	ldbu	r2,0(r2)
    1764:	10c03fcc 	andi	r3,r2,255
    1768:	e17ffe04 	addi	r5,fp,-8
    176c:	e13ffd04 	addi	r4,fp,-12
    1770:	e0bffe84 	addi	r2,fp,-6
    1774:	d8800015 	stw	r2,0(sp)
    1778:	280f883a 	mov	r7,r5
    177c:	200d883a 	mov	r6,r4
    1780:	180b883a 	mov	r5,r3
    1784:	01000074 	movhi	r4,1
    1788:	21256644 	addi	r4,r4,-27239
    178c:	00008f80 	call	8f8 <parseNumber>
            if (notRead)
    1790:	e0bffe0b 	ldhu	r2,-8(fp)
    1794:	10bfffcc 	andi	r2,r2,65535
    1798:	10002226 	beq	r2,zero,1824 <quit+0x238>
            {
                tell("Unknown word: ");
    179c:	01000034 	movhi	r4,0
    17a0:	211dcc04 	addi	r4,r4,30512
    17a4:	00002040 	call	204 <tell>
                for (i=0; i<memory[0]; i++)
    17a8:	e03ffa15 	stw	zero,-24(fp)
    17ac:	00000e06 	br	17e8 <quit+0x1fc>
                    putkey(memory[i+1]);
    17b0:	e0bffa17 	ldw	r2,-24(fp)
    17b4:	10c00044 	addi	r3,r2,1
    17b8:	00800074 	movhi	r2,1
    17bc:	10a56604 	addi	r2,r2,-27240
    17c0:	10c5883a 	add	r2,r2,r3
    17c4:	10800003 	ldbu	r2,0(r2)
    17c8:	10803fcc 	andi	r2,r2,255
    17cc:	1080201c 	xori	r2,r2,128
    17d0:	10bfe004 	addi	r2,r2,-128
    17d4:	1009883a 	mov	r4,r2
    17d8:	000003c0 	call	3c <putkey>
        {
            parseNumber(&memory[1], memory[0], &number, &notRead, &isDouble);
            if (notRead)
            {
                tell("Unknown word: ");
                for (i=0; i<memory[0]; i++)
    17dc:	e0bffa17 	ldw	r2,-24(fp)
    17e0:	10800044 	addi	r2,r2,1
    17e4:	e0bffa15 	stw	r2,-24(fp)
    17e8:	00800074 	movhi	r2,1
    17ec:	10a56604 	addi	r2,r2,-27240
    17f0:	10800003 	ldbu	r2,0(r2)
    17f4:	10803fcc 	andi	r2,r2,255
    17f8:	e0fffa17 	ldw	r3,-24(fp)
    17fc:	18bfec16 	blt	r3,r2,17b0 <__ram_exceptions_end+0xfdfff790>
                    putkey(memory[i+1]);
                putkey('\n');
    1800:	01000284 	movi	r4,10
    1804:	000003c0 	call	3c <putkey>

                *sp = *rsp = 1;
    1808:	d0e44f17 	ldw	r3,-28356(gp)
    180c:	d0a44c17 	ldw	r2,-28368(gp)
    1810:	01000044 	movi	r4,1
    1814:	1100000d 	sth	r4,0(r2)
    1818:	1080000b 	ldhu	r2,0(r2)
    181c:	1880000d 	sth	r2,0(r3)
                continue;
    1820:	00004606 	br	193c <quit+0x350>
            }
            else
            {
                if (*state)
    1824:	d0a44917 	ldw	r2,-28380(gp)
    1828:	1080000b 	ldhu	r2,0(r2)
    182c:	10bfffcc 	andi	r2,r2,65535
    1830:	10002126 	beq	r2,zero,18b8 <quit+0x2cc>
                {
                    *((dcell*)tmp) = number;
    1834:	e0bfff04 	addi	r2,fp,-4
    1838:	e0fffd17 	ldw	r3,-12(fp)
    183c:	10c00015 	stw	r3,0(r2)
                    push(lit_id);
    1840:	00800944 	movi	r2,37
    1844:	10bfffcc 	andi	r2,r2,65535
    1848:	1009883a 	mov	r4,r2
    184c:	00003680 	call	368 <push>
                    comma();
    1850:	00012bc0 	call	12bc <comma>

                    if (isDouble)
    1854:	e0bffe83 	ldbu	r2,-6(fp)
    1858:	10803fcc 	andi	r2,r2,255
    185c:	10001026 	beq	r2,zero,18a0 <quit+0x2b4>
                    {
                        push(tmp[0]);
    1860:	e0bfff0b 	ldhu	r2,-4(fp)
    1864:	10bfffcc 	andi	r2,r2,65535
    1868:	1009883a 	mov	r4,r2
    186c:	00003680 	call	368 <push>
                        comma();
    1870:	00012bc0 	call	12bc <comma>
                        push(lit_id);
    1874:	00800944 	movi	r2,37
    1878:	10bfffcc 	andi	r2,r2,65535
    187c:	1009883a 	mov	r4,r2
    1880:	00003680 	call	368 <push>
                        comma();
    1884:	00012bc0 	call	12bc <comma>
                        push(tmp[1]);
    1888:	e0bfff8b 	ldhu	r2,-2(fp)
    188c:	10bfffcc 	andi	r2,r2,65535
    1890:	1009883a 	mov	r4,r2
    1894:	00003680 	call	368 <push>
                        comma();
    1898:	00012bc0 	call	12bc <comma>
    189c:	00001306 	br	18ec <quit+0x300>
                    }
                    else
                    {
                        push((cell)number);
    18a0:	e0bffd17 	ldw	r2,-12(fp)
    18a4:	10bfffcc 	andi	r2,r2,65535
    18a8:	1009883a 	mov	r4,r2
    18ac:	00003680 	call	368 <push>
                        comma();
    18b0:	00012bc0 	call	12bc <comma>
    18b4:	00000d06 	br	18ec <quit+0x300>
                    }
                }
                else
                {
                    if (isDouble) dpush(number); else push((cell)number);
    18b8:	e0bffe83 	ldbu	r2,-6(fp)
    18bc:	10803fcc 	andi	r2,r2,255
    18c0:	10000426 	beq	r2,zero,18d4 <quit+0x2e8>
    18c4:	e0bffd17 	ldw	r2,-12(fp)
    18c8:	1009883a 	mov	r4,r2
    18cc:	00004240 	call	424 <dpush>
    18d0:	00000606 	br	18ec <quit+0x300>
    18d4:	e0bffd17 	ldw	r2,-12(fp)
    18d8:	10bfffcc 	andi	r2,r2,65535
    18dc:	1009883a 	mov	r4,r2
    18e0:	00003680 	call	368 <push>
    18e4:	00000106 	br	18ec <quit+0x300>
            }
            else
            {
                while (!errorFlag && !exitReq)
                {
                    if (command == quit_id) break;
    18e8:	0001883a 	nop
                    if (isDouble) dpush(number); else push((cell)number);
                }
            }
        }

        if (errorFlag)
    18ec:	d0a44a17 	ldw	r2,-28376(gp)
    18f0:	10000726 	beq	r2,zero,1910 <quit+0x324>
            *sp = *rsp = 1;
    18f4:	d0e44f17 	ldw	r3,-28356(gp)
    18f8:	d0a44c17 	ldw	r2,-28368(gp)
    18fc:	01000044 	movi	r4,1
    1900:	1100000d 	sth	r4,0(r2)
    1904:	1080000b 	ldhu	r2,0(r2)
    1908:	1880000d 	sth	r2,0(r3)
    190c:	00000b06 	br	193c <quit+0x350>
        else if (!keyWaiting() && !(*initscript_pos))
    1910:	00000f00 	call	f0 <keyWaiting>
    1914:	1000091e 	bne	r2,zero,193c <quit+0x350>
    1918:	d0a45117 	ldw	r2,-28348(gp)
    191c:	10800003 	ldbu	r2,0(r2)
    1920:	10803fcc 	andi	r2,r2,255
    1924:	1080201c 	xori	r2,r2,128
    1928:	10bfe004 	addi	r2,r2,-128
    192c:	1000031e 	bne	r2,zero,193c <quit+0x350>
            tell(" OK\n");
    1930:	01000034 	movhi	r4,0
    1934:	211dd004 	addi	r4,r4,30528
    1938:	00002040 	call	204 <tell>
    byte isDouble;
    cell tmp[2];

    int immediate;

    for (exitReq = 0; exitReq == 0;)
    193c:	d0a44e17 	ldw	r2,-28360(gp)
    1940:	103f3026 	beq	r2,zero,1604 <__ram_exceptions_end+0xfdfff5e4>
        if (errorFlag)
            *sp = *rsp = 1;
        else if (!keyWaiting() && !(*initscript_pos))
            tell(" OK\n");
    }
}
    1944:	0001883a 	nop
    1948:	e037883a 	mov	sp,fp
    194c:	dfc00117 	ldw	ra,4(sp)
    1950:	df000017 	ldw	fp,0(sp)
    1954:	dec00204 	addi	sp,sp,8
    1958:	f800283a 	ret

0000195c <plus>:

BUILTIN(39, "+", plus, 0)
{
    195c:	defffd04 	addi	sp,sp,-12
    1960:	dfc00215 	stw	ra,8(sp)
    1964:	df000115 	stw	fp,4(sp)
    1968:	df000104 	addi	fp,sp,4
    scell n1 = pop();
    196c:	00002700 	call	270 <pop>
    1970:	e0bfff0d 	sth	r2,-4(fp)
    scell n2 = pop();
    1974:	00002700 	call	270 <pop>
    1978:	e0bfff8d 	sth	r2,-2(fp)
    push(n1 + n2);
    197c:	e0ffff0b 	ldhu	r3,-4(fp)
    1980:	e0bfff8b 	ldhu	r2,-2(fp)
    1984:	1885883a 	add	r2,r3,r2
    1988:	10bfffcc 	andi	r2,r2,65535
    198c:	1009883a 	mov	r4,r2
    1990:	00003680 	call	368 <push>
}
    1994:	0001883a 	nop
    1998:	e037883a 	mov	sp,fp
    199c:	dfc00117 	ldw	ra,4(sp)
    19a0:	df000017 	ldw	fp,0(sp)
    19a4:	dec00204 	addi	sp,sp,8
    19a8:	f800283a 	ret

000019ac <minus>:

BUILTIN(40, "-", minus, 0)
{
    19ac:	defffd04 	addi	sp,sp,-12
    19b0:	dfc00215 	stw	ra,8(sp)
    19b4:	df000115 	stw	fp,4(sp)
    19b8:	df000104 	addi	fp,sp,4
    scell n1 = pop();
    19bc:	00002700 	call	270 <pop>
    19c0:	e0bfff0d 	sth	r2,-4(fp)
    scell n2 = pop();
    19c4:	00002700 	call	270 <pop>
    19c8:	e0bfff8d 	sth	r2,-2(fp)
    push(n2 - n1);
    19cc:	e0ffff8b 	ldhu	r3,-2(fp)
    19d0:	e0bfff0b 	ldhu	r2,-4(fp)
    19d4:	1885c83a 	sub	r2,r3,r2
    19d8:	10bfffcc 	andi	r2,r2,65535
    19dc:	1009883a 	mov	r4,r2
    19e0:	00003680 	call	368 <push>
}
    19e4:	0001883a 	nop
    19e8:	e037883a 	mov	sp,fp
    19ec:	dfc00117 	ldw	ra,4(sp)
    19f0:	df000017 	ldw	fp,0(sp)
    19f4:	dec00204 	addi	sp,sp,8
    19f8:	f800283a 	ret

000019fc <mul>:

BUILTIN(41, "*", mul, 0)
{
    19fc:	defffd04 	addi	sp,sp,-12
    1a00:	dfc00215 	stw	ra,8(sp)
    1a04:	df000115 	stw	fp,4(sp)
    1a08:	df000104 	addi	fp,sp,4
    scell n1 = pop();
    1a0c:	00002700 	call	270 <pop>
    1a10:	e0bfff0d 	sth	r2,-4(fp)
    scell n2 = pop();
    1a14:	00002700 	call	270 <pop>
    1a18:	e0bfff8d 	sth	r2,-2(fp)
    push(n1 * n2);
    1a1c:	e0bfff0b 	ldhu	r2,-4(fp)
    1a20:	e0ffff8b 	ldhu	r3,-2(fp)
    1a24:	180b883a 	mov	r5,r3
    1a28:	1009883a 	mov	r4,r2
    1a2c:	00036780 	call	3678 <__mulsi3>
    1a30:	10bfffcc 	andi	r2,r2,65535
    1a34:	1009883a 	mov	r4,r2
    1a38:	00003680 	call	368 <push>
}
    1a3c:	0001883a 	nop
    1a40:	e037883a 	mov	sp,fp
    1a44:	dfc00117 	ldw	ra,4(sp)
    1a48:	df000017 	ldw	fp,0(sp)
    1a4c:	dec00204 	addi	sp,sp,8
    1a50:	f800283a 	ret

00001a54 <divmod>:

BUILTIN(42, "/MOD", divmod, 0)
{
    1a54:	defffd04 	addi	sp,sp,-12
    1a58:	dfc00215 	stw	ra,8(sp)
    1a5c:	df000115 	stw	fp,4(sp)
    1a60:	df000104 	addi	fp,sp,4
    scell n1 = pop();
    1a64:	00002700 	call	270 <pop>
    1a68:	e0bfff0d 	sth	r2,-4(fp)
    scell n2 = pop();
    1a6c:	00002700 	call	270 <pop>
    1a70:	e0bfff8d 	sth	r2,-2(fp)
    push(n2 % n1);
    1a74:	e0bfff8f 	ldh	r2,-2(fp)
    1a78:	e0ffff0f 	ldh	r3,-4(fp)
    1a7c:	180b883a 	mov	r5,r3
    1a80:	1009883a 	mov	r4,r2
    1a84:	00035480 	call	3548 <__modsi3>
    1a88:	10bfffcc 	andi	r2,r2,65535
    1a8c:	1009883a 	mov	r4,r2
    1a90:	00003680 	call	368 <push>
    push(n2 / n1);
    1a94:	e0bfff8f 	ldh	r2,-2(fp)
    1a98:	e0ffff0f 	ldh	r3,-4(fp)
    1a9c:	180b883a 	mov	r5,r3
    1aa0:	1009883a 	mov	r4,r2
    1aa4:	00034c40 	call	34c4 <__divsi3>
    1aa8:	10bfffcc 	andi	r2,r2,65535
    1aac:	1009883a 	mov	r4,r2
    1ab0:	00003680 	call	368 <push>
}
    1ab4:	0001883a 	nop
    1ab8:	e037883a 	mov	sp,fp
    1abc:	dfc00117 	ldw	ra,4(sp)
    1ac0:	df000017 	ldw	fp,0(sp)
    1ac4:	dec00204 	addi	sp,sp,8
    1ac8:	f800283a 	ret

00001acc <rot>:

BUILTIN(43, "ROT", rot, 0)
{
    1acc:	defffc04 	addi	sp,sp,-16
    1ad0:	dfc00315 	stw	ra,12(sp)
    1ad4:	df000215 	stw	fp,8(sp)
    1ad8:	df000204 	addi	fp,sp,8
    cell a = pop();
    1adc:	00002700 	call	270 <pop>
    1ae0:	e0bffe0d 	sth	r2,-8(fp)
    cell b = pop();
    1ae4:	00002700 	call	270 <pop>
    1ae8:	e0bffe8d 	sth	r2,-6(fp)
    cell c = pop();
    1aec:	00002700 	call	270 <pop>
    1af0:	e0bfff0d 	sth	r2,-4(fp)
    push(b);
    1af4:	e0bffe8b 	ldhu	r2,-6(fp)
    1af8:	1009883a 	mov	r4,r2
    1afc:	00003680 	call	368 <push>
    push(a);
    1b00:	e0bffe0b 	ldhu	r2,-8(fp)
    1b04:	1009883a 	mov	r4,r2
    1b08:	00003680 	call	368 <push>
    push(c);
    1b0c:	e0bfff0b 	ldhu	r2,-4(fp)
    1b10:	1009883a 	mov	r4,r2
    1b14:	00003680 	call	368 <push>
}
    1b18:	0001883a 	nop
    1b1c:	e037883a 	mov	sp,fp
    1b20:	dfc00117 	ldw	ra,4(sp)
    1b24:	df000017 	ldw	fp,0(sp)
    1b28:	dec00204 	addi	sp,sp,8
    1b2c:	f800283a 	ret

00001b30 <doCreate>:

void createWord(const char* name, byte len, byte flags);
BUILTIN(44, "CREATE", doCreate, 0)
{
    1b30:	defffd04 	addi	sp,sp,-12
    1b34:	dfc00215 	stw	ra,8(sp)
    1b38:	df000115 	stw	fp,4(sp)
    1b3c:	df000104 	addi	fp,sp,4
    byte len;
    cell address;
    word();
    1b40:	00013640 	call	1364 <word>
    len = pop() & 255;
    1b44:	00002700 	call	270 <pop>
    1b48:	e0bfff05 	stb	r2,-4(fp)
    address = pop();
    1b4c:	00002700 	call	270 <pop>
    1b50:	e0bfff8d 	sth	r2,-2(fp)
    createWord((char*)&memory[address], len, 0);
    1b54:	e0ffff8b 	ldhu	r3,-2(fp)
    1b58:	00800074 	movhi	r2,1
    1b5c:	10a56604 	addi	r2,r2,-27240
    1b60:	1885883a 	add	r2,r3,r2
    1b64:	e0ffff03 	ldbu	r3,-4(fp)
    1b68:	000d883a 	mov	r6,zero
    1b6c:	180b883a 	mov	r5,r3
    1b70:	1009883a 	mov	r4,r2
    1b74:	00025000 	call	2500 <createWord>
}
    1b78:	0001883a 	nop
    1b7c:	e037883a 	mov	sp,fp
    1b80:	dfc00117 	ldw	ra,4(sp)
    1b84:	df000017 	ldw	fp,0(sp)
    1b88:	dec00204 	addi	sp,sp,8
    1b8c:	f800283a 	ret

00001b90 <colon>:

BUILTIN(45, ":", colon, 0)
{
    1b90:	defffe04 	addi	sp,sp,-8
    1b94:	dfc00115 	stw	ra,4(sp)
    1b98:	df000015 	stw	fp,0(sp)
    1b9c:	d839883a 	mov	fp,sp
    doCreate();
    1ba0:	0001b300 	call	1b30 <doCreate>
    push(docol_id);
    1ba4:	0005883a 	mov	r2,zero
    1ba8:	10bfffcc 	andi	r2,r2,65535
    1bac:	1009883a 	mov	r4,r2
    1bb0:	00003680 	call	368 <push>
    comma();
    1bb4:	00012bc0 	call	12bc <comma>
    hide();
    1bb8:	0000e2c0 	call	e2c <hide>
    *state = 1;
    1bbc:	d0a44917 	ldw	r2,-28380(gp)
    1bc0:	00c00044 	movi	r3,1
    1bc4:	10c0000d 	sth	r3,0(r2)
}
    1bc8:	0001883a 	nop
    1bcc:	e037883a 	mov	sp,fp
    1bd0:	dfc00117 	ldw	ra,4(sp)
    1bd4:	df000017 	ldw	fp,0(sp)
    1bd8:	dec00204 	addi	sp,sp,8
    1bdc:	f800283a 	ret

00001be0 <semicolon>:

BUILTIN(46, ";", semicolon, FLAG_IMMEDIATE)
{
    1be0:	defffe04 	addi	sp,sp,-8
    1be4:	dfc00115 	stw	ra,4(sp)
    1be8:	df000015 	stw	fp,0(sp)
    1bec:	d839883a 	mov	fp,sp
    push(doExit_id);
    1bf0:	008001c4 	movi	r2,7
    1bf4:	10bfffcc 	andi	r2,r2,65535
    1bf8:	1009883a 	mov	r4,r2
    1bfc:	00003680 	call	368 <push>
    comma();
    1c00:	00012bc0 	call	12bc <comma>
    hide();
    1c04:	0000e2c0 	call	e2c <hide>
    *state = 0;
    1c08:	d0a44917 	ldw	r2,-28380(gp)
    1c0c:	1000000d 	sth	zero,0(r2)
}
    1c10:	0001883a 	nop
    1c14:	e037883a 	mov	sp,fp
    1c18:	dfc00117 	ldw	ra,4(sp)
    1c1c:	df000017 	ldw	fp,0(sp)
    1c20:	dec00204 	addi	sp,sp,8
    1c24:	f800283a 	ret

00001c28 <rget>:

BUILTIN(47, "R@", rget, 0)
{
    1c28:	defffd04 	addi	sp,sp,-12
    1c2c:	dfc00215 	stw	ra,8(sp)
    1c30:	df000115 	stw	fp,4(sp)
    1c34:	df000104 	addi	fp,sp,4
    cell tmp = rpop();
    1c38:	000047c0 	call	47c <rpop>
    1c3c:	e0bfff0d 	sth	r2,-4(fp)
    rpush(tmp);
    1c40:	e0bfff0b 	ldhu	r2,-4(fp)
    1c44:	1009883a 	mov	r4,r2
    1c48:	00004f80 	call	4f8 <rpush>
    push(tmp);
    1c4c:	e0bfff0b 	ldhu	r2,-4(fp)
    1c50:	1009883a 	mov	r4,r2
    1c54:	00003680 	call	368 <push>
}
    1c58:	0001883a 	nop
    1c5c:	e037883a 	mov	sp,fp
    1c60:	dfc00117 	ldw	ra,4(sp)
    1c64:	df000017 	ldw	fp,0(sp)
    1c68:	dec00204 	addi	sp,sp,8
    1c6c:	f800283a 	ret

00001c70 <doJ>:

BUILTIN(48, "J", doJ, 0)
{
    1c70:	defffc04 	addi	sp,sp,-16
    1c74:	dfc00315 	stw	ra,12(sp)
    1c78:	df000215 	stw	fp,8(sp)
    1c7c:	df000204 	addi	fp,sp,8
    cell tmp1 = rpop();
    1c80:	000047c0 	call	47c <rpop>
    1c84:	e0bffe0d 	sth	r2,-8(fp)
    cell tmp2 = rpop();
    1c88:	000047c0 	call	47c <rpop>
    1c8c:	e0bffe8d 	sth	r2,-6(fp)
    cell tmp3 = rpop();
    1c90:	000047c0 	call	47c <rpop>
    1c94:	e0bfff0d 	sth	r2,-4(fp)
    rpush(tmp3);
    1c98:	e0bfff0b 	ldhu	r2,-4(fp)
    1c9c:	1009883a 	mov	r4,r2
    1ca0:	00004f80 	call	4f8 <rpush>
    rpush(tmp2);
    1ca4:	e0bffe8b 	ldhu	r2,-6(fp)
    1ca8:	1009883a 	mov	r4,r2
    1cac:	00004f80 	call	4f8 <rpush>
    rpush(tmp1);
    1cb0:	e0bffe0b 	ldhu	r2,-8(fp)
    1cb4:	1009883a 	mov	r4,r2
    1cb8:	00004f80 	call	4f8 <rpush>
    push(tmp3);
    1cbc:	e0bfff0b 	ldhu	r2,-4(fp)
    1cc0:	1009883a 	mov	r4,r2
    1cc4:	00003680 	call	368 <push>
}
    1cc8:	0001883a 	nop
    1ccc:	e037883a 	mov	sp,fp
    1cd0:	dfc00117 	ldw	ra,4(sp)
    1cd4:	df000017 	ldw	fp,0(sp)
    1cd8:	dec00204 	addi	sp,sp,8
    1cdc:	f800283a 	ret

00001ce0 <tick>:

BUILTIN(49, "'", tick, FLAG_IMMEDIATE)
{
    1ce0:	defffe04 	addi	sp,sp,-8
    1ce4:	dfc00115 	stw	ra,4(sp)
    1ce8:	df000015 	stw	fp,0(sp)
    1cec:	d839883a 	mov	fp,sp
    word();
    1cf0:	00013640 	call	1364 <word>
    find();
    1cf4:	00013a80 	call	13a8 <find>
    cfa();
    1cf8:	00014780 	call	1478 <cfa>

    if (*state)
    1cfc:	d0a44917 	ldw	r2,-28380(gp)
    1d00:	1080000b 	ldhu	r2,0(r2)
    1d04:	10bfffcc 	andi	r2,r2,65535
    1d08:	10000626 	beq	r2,zero,1d24 <tick+0x44>
    {
        push(lit_id);
    1d0c:	00800944 	movi	r2,37
    1d10:	10bfffcc 	andi	r2,r2,65535
    1d14:	1009883a 	mov	r4,r2
    1d18:	00003680 	call	368 <push>
        comma();
    1d1c:	00012bc0 	call	12bc <comma>
        comma();
    1d20:	00012bc0 	call	12bc <comma>
    }
}
    1d24:	0001883a 	nop
    1d28:	e037883a 	mov	sp,fp
    1d2c:	dfc00117 	ldw	ra,4(sp)
    1d30:	df000017 	ldw	fp,0(sp)
    1d34:	dec00204 	addi	sp,sp,8
    1d38:	f800283a 	ret

00001d3c <equals>:

BUILTIN(50, "=", equals, 0)
{
    1d3c:	defffd04 	addi	sp,sp,-12
    1d40:	dfc00215 	stw	ra,8(sp)
    1d44:	df000115 	stw	fp,4(sp)
    1d48:	df000104 	addi	fp,sp,4
    cell a1 = pop();
    1d4c:	00002700 	call	270 <pop>
    1d50:	e0bfff0d 	sth	r2,-4(fp)
    cell a2 = pop();
    1d54:	00002700 	call	270 <pop>
    1d58:	e0bfff8d 	sth	r2,-2(fp)
    push(a2 == a1 ? -1 : 0);
    1d5c:	e0ffff8b 	ldhu	r3,-2(fp)
    1d60:	e0bfff0b 	ldhu	r2,-4(fp)
    1d64:	1880021e 	bne	r3,r2,1d70 <equals+0x34>
    1d68:	00bfffd4 	movui	r2,65535
    1d6c:	00000106 	br	1d74 <equals+0x38>
    1d70:	0005883a 	mov	r2,zero
    1d74:	1009883a 	mov	r4,r2
    1d78:	00003680 	call	368 <push>
}
    1d7c:	0001883a 	nop
    1d80:	e037883a 	mov	sp,fp
    1d84:	dfc00117 	ldw	ra,4(sp)
    1d88:	df000017 	ldw	fp,0(sp)
    1d8c:	dec00204 	addi	sp,sp,8
    1d90:	f800283a 	ret

00001d94 <smaller>:

BUILTIN(51, "<", smaller, 0)
{
    1d94:	defffd04 	addi	sp,sp,-12
    1d98:	dfc00215 	stw	ra,8(sp)
    1d9c:	df000115 	stw	fp,4(sp)
    1da0:	df000104 	addi	fp,sp,4
    scell a1 = pop();
    1da4:	00002700 	call	270 <pop>
    1da8:	e0bfff0d 	sth	r2,-4(fp)
    scell a2 = pop();
    1dac:	00002700 	call	270 <pop>
    1db0:	e0bfff8d 	sth	r2,-2(fp)
    push(a2 < a1 ? -1 : 0);
    1db4:	e0ffff8f 	ldh	r3,-2(fp)
    1db8:	e0bfff0f 	ldh	r2,-4(fp)
    1dbc:	1880020e 	bge	r3,r2,1dc8 <smaller+0x34>
    1dc0:	00bfffd4 	movui	r2,65535
    1dc4:	00000106 	br	1dcc <smaller+0x38>
    1dc8:	0005883a 	mov	r2,zero
    1dcc:	1009883a 	mov	r4,r2
    1dd0:	00003680 	call	368 <push>
}
    1dd4:	0001883a 	nop
    1dd8:	e037883a 	mov	sp,fp
    1ddc:	dfc00117 	ldw	ra,4(sp)
    1de0:	df000017 	ldw	fp,0(sp)
    1de4:	dec00204 	addi	sp,sp,8
    1de8:	f800283a 	ret

00001dec <larger>:

BUILTIN(52, ">", larger, 0)
{
    1dec:	defffd04 	addi	sp,sp,-12
    1df0:	dfc00215 	stw	ra,8(sp)
    1df4:	df000115 	stw	fp,4(sp)
    1df8:	df000104 	addi	fp,sp,4
    scell a1 = pop();
    1dfc:	00002700 	call	270 <pop>
    1e00:	e0bfff0d 	sth	r2,-4(fp)
    scell a2 = pop();
    1e04:	00002700 	call	270 <pop>
    1e08:	e0bfff8d 	sth	r2,-2(fp)
    push(a2 > a1 ? -1 : 0);
    1e0c:	e0bfff8f 	ldh	r2,-2(fp)
    1e10:	e0ffff0f 	ldh	r3,-4(fp)
    1e14:	1880020e 	bge	r3,r2,1e20 <larger+0x34>
    1e18:	00bfffd4 	movui	r2,65535
    1e1c:	00000106 	br	1e24 <larger+0x38>
    1e20:	0005883a 	mov	r2,zero
    1e24:	1009883a 	mov	r4,r2
    1e28:	00003680 	call	368 <push>
}
    1e2c:	0001883a 	nop
    1e30:	e037883a 	mov	sp,fp
    1e34:	dfc00117 	ldw	ra,4(sp)
    1e38:	df000017 	ldw	fp,0(sp)
    1e3c:	dec00204 	addi	sp,sp,8
    1e40:	f800283a 	ret

00001e44 <doAnd>:

BUILTIN(53, "AND", doAnd, 0)
{
    1e44:	defffd04 	addi	sp,sp,-12
    1e48:	dfc00215 	stw	ra,8(sp)
    1e4c:	df000115 	stw	fp,4(sp)
    1e50:	df000104 	addi	fp,sp,4
    cell a1 = pop();
    1e54:	00002700 	call	270 <pop>
    1e58:	e0bfff0d 	sth	r2,-4(fp)
    cell a2 = pop();
    1e5c:	00002700 	call	270 <pop>
    1e60:	e0bfff8d 	sth	r2,-2(fp)
    push(a2 & a1);
    1e64:	e0ffff8b 	ldhu	r3,-2(fp)
    1e68:	e0bfff0b 	ldhu	r2,-4(fp)
    1e6c:	1884703a 	and	r2,r3,r2
    1e70:	10bfffcc 	andi	r2,r2,65535
    1e74:	1009883a 	mov	r4,r2
    1e78:	00003680 	call	368 <push>
}
    1e7c:	0001883a 	nop
    1e80:	e037883a 	mov	sp,fp
    1e84:	dfc00117 	ldw	ra,4(sp)
    1e88:	df000017 	ldw	fp,0(sp)
    1e8c:	dec00204 	addi	sp,sp,8
    1e90:	f800283a 	ret

00001e94 <doOr>:

BUILTIN(54, "OR", doOr, 0)
{
    1e94:	defffd04 	addi	sp,sp,-12
    1e98:	dfc00215 	stw	ra,8(sp)
    1e9c:	df000115 	stw	fp,4(sp)
    1ea0:	df000104 	addi	fp,sp,4
    cell a1 = pop();
    1ea4:	00002700 	call	270 <pop>
    1ea8:	e0bfff0d 	sth	r2,-4(fp)
    cell a2 = pop();
    1eac:	00002700 	call	270 <pop>
    1eb0:	e0bfff8d 	sth	r2,-2(fp)
    push(a2 | a1);
    1eb4:	e0ffff8b 	ldhu	r3,-2(fp)
    1eb8:	e0bfff0b 	ldhu	r2,-4(fp)
    1ebc:	1884b03a 	or	r2,r3,r2
    1ec0:	10bfffcc 	andi	r2,r2,65535
    1ec4:	1009883a 	mov	r4,r2
    1ec8:	00003680 	call	368 <push>
}
    1ecc:	0001883a 	nop
    1ed0:	e037883a 	mov	sp,fp
    1ed4:	dfc00117 	ldw	ra,4(sp)
    1ed8:	df000017 	ldw	fp,0(sp)
    1edc:	dec00204 	addi	sp,sp,8
    1ee0:	f800283a 	ret

00001ee4 <p_dup>:

BUILTIN(55, "?DUP", p_dup, 0)
{
    1ee4:	defffd04 	addi	sp,sp,-12
    1ee8:	dfc00215 	stw	ra,8(sp)
    1eec:	df000115 	stw	fp,4(sp)
    1ef0:	df000104 	addi	fp,sp,4
    cell a = tos();
    1ef4:	00002ec0 	call	2ec <tos>
    1ef8:	e0bfff0d 	sth	r2,-4(fp)
    if (a) push(a);
    1efc:	e0bfff0b 	ldhu	r2,-4(fp)
    1f00:	10000326 	beq	r2,zero,1f10 <p_dup+0x2c>
    1f04:	e0bfff0b 	ldhu	r2,-4(fp)
    1f08:	1009883a 	mov	r4,r2
    1f0c:	00003680 	call	368 <push>
}
    1f10:	0001883a 	nop
    1f14:	e037883a 	mov	sp,fp
    1f18:	dfc00117 	ldw	ra,4(sp)
    1f1c:	df000017 	ldw	fp,0(sp)
    1f20:	dec00204 	addi	sp,sp,8
    1f24:	f800283a 	ret

00001f28 <litstring>:

BUILTIN(56, "LITSTRING", litstring, 0)
{
    1f28:	defffd04 	addi	sp,sp,-12
    1f2c:	dfc00215 	stw	ra,8(sp)
    1f30:	df000115 	stw	fp,4(sp)
    1f34:	df000104 	addi	fp,sp,4
    cell length = readMem(next);
    1f38:	d0a4500b 	ldhu	r2,-28352(gp)
    1f3c:	10bfffcc 	andi	r2,r2,65535
    1f40:	1009883a 	mov	r4,r2
    1f44:	00005780 	call	578 <readMem>
    1f48:	e0bfff0d 	sth	r2,-4(fp)
    next += CELL_SIZE;
    1f4c:	d0a4500b 	ldhu	r2,-28352(gp)
    1f50:	10800084 	addi	r2,r2,2
    1f54:	d0a4500d 	sth	r2,-28352(gp)
    push(next);
    1f58:	d0a4500b 	ldhu	r2,-28352(gp)
    1f5c:	10bfffcc 	andi	r2,r2,65535
    1f60:	1009883a 	mov	r4,r2
    1f64:	00003680 	call	368 <push>
    push(length);
    1f68:	e0bfff0b 	ldhu	r2,-4(fp)
    1f6c:	1009883a 	mov	r4,r2
    1f70:	00003680 	call	368 <push>
    next += length;
    1f74:	d0e4500b 	ldhu	r3,-28352(gp)
    1f78:	e0bfff0b 	ldhu	r2,-4(fp)
    1f7c:	1885883a 	add	r2,r3,r2
    1f80:	d0a4500d 	sth	r2,-28352(gp)
    while (next & (CELL_SIZE-1))
    1f84:	00000306 	br	1f94 <litstring+0x6c>
        next++;
    1f88:	d0a4500b 	ldhu	r2,-28352(gp)
    1f8c:	10800044 	addi	r2,r2,1
    1f90:	d0a4500d 	sth	r2,-28352(gp)
    cell length = readMem(next);
    next += CELL_SIZE;
    push(next);
    push(length);
    next += length;
    while (next & (CELL_SIZE-1))
    1f94:	d0a4500b 	ldhu	r2,-28352(gp)
    1f98:	10bfffcc 	andi	r2,r2,65535
    1f9c:	1080004c 	andi	r2,r2,1
    1fa0:	103ff91e 	bne	r2,zero,1f88 <__ram_exceptions_end+0xfdffff68>
        next++;
}
    1fa4:	0001883a 	nop
    1fa8:	e037883a 	mov	sp,fp
    1fac:	dfc00117 	ldw	ra,4(sp)
    1fb0:	df000017 	ldw	fp,0(sp)
    1fb4:	dec00204 	addi	sp,sp,8
    1fb8:	f800283a 	ret

00001fbc <xor>:

BUILTIN(57, "XOR", xor, 0)
{
    1fbc:	defffd04 	addi	sp,sp,-12
    1fc0:	dfc00215 	stw	ra,8(sp)
    1fc4:	df000115 	stw	fp,4(sp)
    1fc8:	df000104 	addi	fp,sp,4
    cell a = pop();
    1fcc:	00002700 	call	270 <pop>
    1fd0:	e0bfff0d 	sth	r2,-4(fp)
    cell b = pop();
    1fd4:	00002700 	call	270 <pop>
    1fd8:	e0bfff8d 	sth	r2,-2(fp)
    push(a ^ b);
    1fdc:	e0ffff0b 	ldhu	r3,-4(fp)
    1fe0:	e0bfff8b 	ldhu	r2,-2(fp)
    1fe4:	1884f03a 	xor	r2,r3,r2
    1fe8:	10bfffcc 	andi	r2,r2,65535
    1fec:	1009883a 	mov	r4,r2
    1ff0:	00003680 	call	368 <push>
}
    1ff4:	0001883a 	nop
    1ff8:	e037883a 	mov	sp,fp
    1ffc:	dfc00117 	ldw	ra,4(sp)
    2000:	df000017 	ldw	fp,0(sp)
    2004:	dec00204 	addi	sp,sp,8
    2008:	f800283a 	ret

0000200c <timesDivide>:

BUILTIN(58, "*/", timesDivide, 0)
{
    200c:	defffa04 	addi	sp,sp,-24
    2010:	dfc00515 	stw	ra,20(sp)
    2014:	df000415 	stw	fp,16(sp)
    2018:	df000404 	addi	fp,sp,16
    cell n3 = pop();
    201c:	00002700 	call	270 <pop>
    2020:	e0bffc0d 	sth	r2,-16(fp)
    dcell n2 = pop();
    2024:	00002700 	call	270 <pop>
    2028:	10bfffcc 	andi	r2,r2,65535
    202c:	e0bffd15 	stw	r2,-12(fp)
    dcell n1 = pop();
    2030:	00002700 	call	270 <pop>
    2034:	10bfffcc 	andi	r2,r2,65535
    2038:	e0bffe15 	stw	r2,-8(fp)
    dcell r = (n1 * n2) / n3;
    203c:	e17ffd17 	ldw	r5,-12(fp)
    2040:	e13ffe17 	ldw	r4,-8(fp)
    2044:	00036780 	call	3678 <__mulsi3>
    2048:	1007883a 	mov	r3,r2
    204c:	e0bffc0b 	ldhu	r2,-16(fp)
    2050:	100b883a 	mov	r5,r2
    2054:	1809883a 	mov	r4,r3
    2058:	00035bc0 	call	35bc <__udivsi3>
    205c:	e0bfff15 	stw	r2,-4(fp)
    push((cell)r);
    2060:	e0bfff17 	ldw	r2,-4(fp)
    2064:	10bfffcc 	andi	r2,r2,65535
    2068:	1009883a 	mov	r4,r2
    206c:	00003680 	call	368 <push>
    if ((cell)r != r)
    2070:	e0bfff17 	ldw	r2,-4(fp)
    2074:	10ffffcc 	andi	r3,r2,65535
    2078:	e0bfff17 	ldw	r2,-4(fp)
    207c:	18800526 	beq	r3,r2,2094 <timesDivide+0x88>
    {
        tell("Arithmetic overflow\n");
    2080:	01000034 	movhi	r4,0
    2084:	211deb04 	addi	r4,r4,30636
    2088:	00002040 	call	204 <tell>
        errorFlag = 1;
    208c:	00800044 	movi	r2,1
    2090:	d0a44a15 	stw	r2,-28376(gp)
    }
}
    2094:	0001883a 	nop
    2098:	e037883a 	mov	sp,fp
    209c:	dfc00117 	ldw	ra,4(sp)
    20a0:	df000017 	ldw	fp,0(sp)
    20a4:	dec00204 	addi	sp,sp,8
    20a8:	f800283a 	ret

000020ac <timesDivideMod>:

BUILTIN(59, "*/MOD", timesDivideMod, 0)
{
    20ac:	defff904 	addi	sp,sp,-28
    20b0:	dfc00615 	stw	ra,24(sp)
    20b4:	df000515 	stw	fp,20(sp)
    20b8:	df000504 	addi	fp,sp,20
    cell n3 = pop();
    20bc:	00002700 	call	270 <pop>
    20c0:	e0bffb0d 	sth	r2,-20(fp)
    dcell n2 = pop();
    20c4:	00002700 	call	270 <pop>
    20c8:	10bfffcc 	andi	r2,r2,65535
    20cc:	e0bffc15 	stw	r2,-16(fp)
    dcell n1 = pop();
    20d0:	00002700 	call	270 <pop>
    20d4:	10bfffcc 	andi	r2,r2,65535
    20d8:	e0bffd15 	stw	r2,-12(fp)
    dcell r = (n1 * n2) / n3;
    20dc:	e17ffc17 	ldw	r5,-16(fp)
    20e0:	e13ffd17 	ldw	r4,-12(fp)
    20e4:	00036780 	call	3678 <__mulsi3>
    20e8:	1007883a 	mov	r3,r2
    20ec:	e0bffb0b 	ldhu	r2,-20(fp)
    20f0:	100b883a 	mov	r5,r2
    20f4:	1809883a 	mov	r4,r3
    20f8:	00035bc0 	call	35bc <__udivsi3>
    20fc:	e0bffe15 	stw	r2,-8(fp)
    dcell m = (n1 * n2) % n3;
    2100:	e17ffc17 	ldw	r5,-16(fp)
    2104:	e13ffd17 	ldw	r4,-12(fp)
    2108:	00036780 	call	3678 <__mulsi3>
    210c:	1007883a 	mov	r3,r2
    2110:	e0bffb0b 	ldhu	r2,-20(fp)
    2114:	100b883a 	mov	r5,r2
    2118:	1809883a 	mov	r4,r3
    211c:	00036200 	call	3620 <__umodsi3>
    2120:	e0bfff15 	stw	r2,-4(fp)
    push((cell)m);
    2124:	e0bfff17 	ldw	r2,-4(fp)
    2128:	10bfffcc 	andi	r2,r2,65535
    212c:	1009883a 	mov	r4,r2
    2130:	00003680 	call	368 <push>
    push((cell)r);
    2134:	e0bffe17 	ldw	r2,-8(fp)
    2138:	10bfffcc 	andi	r2,r2,65535
    213c:	1009883a 	mov	r4,r2
    2140:	00003680 	call	368 <push>
    if ((cell)r != r)
    2144:	e0bffe17 	ldw	r2,-8(fp)
    2148:	10ffffcc 	andi	r3,r2,65535
    214c:	e0bffe17 	ldw	r2,-8(fp)
    2150:	18800526 	beq	r3,r2,2168 <timesDivideMod+0xbc>
    {
        tell("Arithmetic overflow\n");
    2154:	01000034 	movhi	r4,0
    2158:	211deb04 	addi	r4,r4,30636
    215c:	00002040 	call	204 <tell>
        errorFlag = 1;
    2160:	00800044 	movi	r2,1
    2164:	d0a44a15 	stw	r2,-28376(gp)
    }
}
    2168:	0001883a 	nop
    216c:	e037883a 	mov	sp,fp
    2170:	dfc00117 	ldw	ra,4(sp)
    2174:	df000017 	ldw	fp,0(sp)
    2178:	dec00204 	addi	sp,sp,8
    217c:	f800283a 	ret

00002180 <dequals>:

BUILTIN(60, "D=", dequals, 0)
{
    2180:	defffc04 	addi	sp,sp,-16
    2184:	dfc00315 	stw	ra,12(sp)
    2188:	df000215 	stw	fp,8(sp)
    218c:	df000204 	addi	fp,sp,8
    dcell a1 = dpop();
    2190:	00003e80 	call	3e8 <dpop>
    2194:	e0bffe15 	stw	r2,-8(fp)
    dcell a2 = dpop();
    2198:	00003e80 	call	3e8 <dpop>
    219c:	e0bfff15 	stw	r2,-4(fp)
    push(a2 == a1 ? -1 : 0);
    21a0:	e0ffff17 	ldw	r3,-4(fp)
    21a4:	e0bffe17 	ldw	r2,-8(fp)
    21a8:	1880021e 	bne	r3,r2,21b4 <dequals+0x34>
    21ac:	00bfffd4 	movui	r2,65535
    21b0:	00000106 	br	21b8 <dequals+0x38>
    21b4:	0005883a 	mov	r2,zero
    21b8:	1009883a 	mov	r4,r2
    21bc:	00003680 	call	368 <push>
}
    21c0:	0001883a 	nop
    21c4:	e037883a 	mov	sp,fp
    21c8:	dfc00117 	ldw	ra,4(sp)
    21cc:	df000017 	ldw	fp,0(sp)
    21d0:	dec00204 	addi	sp,sp,8
    21d4:	f800283a 	ret

000021d8 <dsmaller>:

BUILTIN(61, "D<", dsmaller, 0)
{
    21d8:	defffc04 	addi	sp,sp,-16
    21dc:	dfc00315 	stw	ra,12(sp)
    21e0:	df000215 	stw	fp,8(sp)
    21e4:	df000204 	addi	fp,sp,8
    dscell a1 = dpop();
    21e8:	00003e80 	call	3e8 <dpop>
    21ec:	e0bffe15 	stw	r2,-8(fp)
    dscell a2 = dpop();
    21f0:	00003e80 	call	3e8 <dpop>
    21f4:	e0bfff15 	stw	r2,-4(fp)
    push(a2 < a1 ? -1 : 0);
    21f8:	e0ffff17 	ldw	r3,-4(fp)
    21fc:	e0bffe17 	ldw	r2,-8(fp)
    2200:	1880020e 	bge	r3,r2,220c <dsmaller+0x34>
    2204:	00bfffd4 	movui	r2,65535
    2208:	00000106 	br	2210 <dsmaller+0x38>
    220c:	0005883a 	mov	r2,zero
    2210:	1009883a 	mov	r4,r2
    2214:	00003680 	call	368 <push>
}
    2218:	0001883a 	nop
    221c:	e037883a 	mov	sp,fp
    2220:	dfc00117 	ldw	ra,4(sp)
    2224:	df000017 	ldw	fp,0(sp)
    2228:	dec00204 	addi	sp,sp,8
    222c:	f800283a 	ret

00002230 <dlarger>:

BUILTIN(62, "D>", dlarger, 0)
{
    2230:	defffc04 	addi	sp,sp,-16
    2234:	dfc00315 	stw	ra,12(sp)
    2238:	df000215 	stw	fp,8(sp)
    223c:	df000204 	addi	fp,sp,8
    dscell a1 = dpop();
    2240:	00003e80 	call	3e8 <dpop>
    2244:	e0bffe15 	stw	r2,-8(fp)
    dscell a2 = dpop();
    2248:	00003e80 	call	3e8 <dpop>
    224c:	e0bfff15 	stw	r2,-4(fp)
    push(a2 > a1 ? -1 : 0);
    2250:	e0bfff17 	ldw	r2,-4(fp)
    2254:	e0fffe17 	ldw	r3,-8(fp)
    2258:	1880020e 	bge	r3,r2,2264 <dlarger+0x34>
    225c:	00bfffd4 	movui	r2,65535
    2260:	00000106 	br	2268 <dlarger+0x38>
    2264:	0005883a 	mov	r2,zero
    2268:	1009883a 	mov	r4,r2
    226c:	00003680 	call	368 <push>
}
    2270:	0001883a 	nop
    2274:	e037883a 	mov	sp,fp
    2278:	dfc00117 	ldw	ra,4(sp)
    227c:	df000017 	ldw	fp,0(sp)
    2280:	dec00204 	addi	sp,sp,8
    2284:	f800283a 	ret

00002288 <dusmaller>:

BUILTIN(63, "DU<", dusmaller, 0)
{
    2288:	defffc04 	addi	sp,sp,-16
    228c:	dfc00315 	stw	ra,12(sp)
    2290:	df000215 	stw	fp,8(sp)
    2294:	df000204 	addi	fp,sp,8
    dcell a1 = dpop();
    2298:	00003e80 	call	3e8 <dpop>
    229c:	e0bffe15 	stw	r2,-8(fp)
    dcell a2 = dpop();
    22a0:	00003e80 	call	3e8 <dpop>
    22a4:	e0bfff15 	stw	r2,-4(fp)
    push(a2 < a1 ? -1 : 0);
    22a8:	e0ffff17 	ldw	r3,-4(fp)
    22ac:	e0bffe17 	ldw	r2,-8(fp)
    22b0:	1880022e 	bgeu	r3,r2,22bc <dusmaller+0x34>
    22b4:	00bfffd4 	movui	r2,65535
    22b8:	00000106 	br	22c0 <dusmaller+0x38>
    22bc:	0005883a 	mov	r2,zero
    22c0:	1009883a 	mov	r4,r2
    22c4:	00003680 	call	368 <push>
}
    22c8:	0001883a 	nop
    22cc:	e037883a 	mov	sp,fp
    22d0:	dfc00117 	ldw	ra,4(sp)
    22d4:	df000017 	ldw	fp,0(sp)
    22d8:	dec00204 	addi	sp,sp,8
    22dc:	f800283a 	ret

000022e0 <dplus>:

BUILTIN(64, "D+", dplus, 0)
{
    22e0:	defffc04 	addi	sp,sp,-16
    22e4:	dfc00315 	stw	ra,12(sp)
    22e8:	df000215 	stw	fp,8(sp)
    22ec:	df000204 	addi	fp,sp,8
    dscell n1 = dpop();
    22f0:	00003e80 	call	3e8 <dpop>
    22f4:	e0bffe15 	stw	r2,-8(fp)
    dscell n2 = dpop();
    22f8:	00003e80 	call	3e8 <dpop>
    22fc:	e0bfff15 	stw	r2,-4(fp)
    dpush(n1 + n2);
    2300:	e0fffe17 	ldw	r3,-8(fp)
    2304:	e0bfff17 	ldw	r2,-4(fp)
    2308:	1885883a 	add	r2,r3,r2
    230c:	1009883a 	mov	r4,r2
    2310:	00004240 	call	424 <dpush>
}
    2314:	0001883a 	nop
    2318:	e037883a 	mov	sp,fp
    231c:	dfc00117 	ldw	ra,4(sp)
    2320:	df000017 	ldw	fp,0(sp)
    2324:	dec00204 	addi	sp,sp,8
    2328:	f800283a 	ret

0000232c <dminus>:

BUILTIN(65, "D-", dminus, 0)
{
    232c:	defffc04 	addi	sp,sp,-16
    2330:	dfc00315 	stw	ra,12(sp)
    2334:	df000215 	stw	fp,8(sp)
    2338:	df000204 	addi	fp,sp,8
    dscell n1 = dpop();
    233c:	00003e80 	call	3e8 <dpop>
    2340:	e0bffe15 	stw	r2,-8(fp)
    dscell n2 = dpop();
    2344:	00003e80 	call	3e8 <dpop>
    2348:	e0bfff15 	stw	r2,-4(fp)
    dpush(n2 - n1);
    234c:	e0ffff17 	ldw	r3,-4(fp)
    2350:	e0bffe17 	ldw	r2,-8(fp)
    2354:	1885c83a 	sub	r2,r3,r2
    2358:	1009883a 	mov	r4,r2
    235c:	00004240 	call	424 <dpush>
}
    2360:	0001883a 	nop
    2364:	e037883a 	mov	sp,fp
    2368:	dfc00117 	ldw	ra,4(sp)
    236c:	df000017 	ldw	fp,0(sp)
    2370:	dec00204 	addi	sp,sp,8
    2374:	f800283a 	ret

00002378 <dmul>:

BUILTIN(66, "D*", dmul, 0)
{
    2378:	defffc04 	addi	sp,sp,-16
    237c:	dfc00315 	stw	ra,12(sp)
    2380:	df000215 	stw	fp,8(sp)
    2384:	df000204 	addi	fp,sp,8
    dscell n1 = dpop();
    2388:	00003e80 	call	3e8 <dpop>
    238c:	e0bffe15 	stw	r2,-8(fp)
    dscell n2 = dpop();
    2390:	00003e80 	call	3e8 <dpop>
    2394:	e0bfff15 	stw	r2,-4(fp)
    dpush(n1 * n2);
    2398:	e17fff17 	ldw	r5,-4(fp)
    239c:	e13ffe17 	ldw	r4,-8(fp)
    23a0:	00036780 	call	3678 <__mulsi3>
    23a4:	1009883a 	mov	r4,r2
    23a8:	00004240 	call	424 <dpush>
}
    23ac:	0001883a 	nop
    23b0:	e037883a 	mov	sp,fp
    23b4:	dfc00117 	ldw	ra,4(sp)
    23b8:	df000017 	ldw	fp,0(sp)
    23bc:	dec00204 	addi	sp,sp,8
    23c0:	f800283a 	ret

000023c4 <ddiv>:

BUILTIN(67, "D/", ddiv, 0)
{
    23c4:	defffc04 	addi	sp,sp,-16
    23c8:	dfc00315 	stw	ra,12(sp)
    23cc:	df000215 	stw	fp,8(sp)
    23d0:	df000204 	addi	fp,sp,8
    dscell n1 = dpop();
    23d4:	00003e80 	call	3e8 <dpop>
    23d8:	e0bffe15 	stw	r2,-8(fp)
    dscell n2 = dpop();
    23dc:	00003e80 	call	3e8 <dpop>
    23e0:	e0bfff15 	stw	r2,-4(fp)
    dpush(n2 / n1);
    23e4:	e17ffe17 	ldw	r5,-8(fp)
    23e8:	e13fff17 	ldw	r4,-4(fp)
    23ec:	00034c40 	call	34c4 <__divsi3>
    23f0:	1009883a 	mov	r4,r2
    23f4:	00004240 	call	424 <dpush>
}
    23f8:	0001883a 	nop
    23fc:	e037883a 	mov	sp,fp
    2400:	dfc00117 	ldw	ra,4(sp)
    2404:	df000017 	ldw	fp,0(sp)
    2408:	dec00204 	addi	sp,sp,8
    240c:	f800283a 	ret

00002410 <dswap>:

BUILTIN(68, "2SWAP", dswap, 0)
{
    2410:	defffc04 	addi	sp,sp,-16
    2414:	dfc00315 	stw	ra,12(sp)
    2418:	df000215 	stw	fp,8(sp)
    241c:	df000204 	addi	fp,sp,8
    dcell a = dpop();
    2420:	00003e80 	call	3e8 <dpop>
    2424:	e0bffe15 	stw	r2,-8(fp)
    dcell b = dpop();
    2428:	00003e80 	call	3e8 <dpop>
    242c:	e0bfff15 	stw	r2,-4(fp)
    dpush(a);
    2430:	e13ffe17 	ldw	r4,-8(fp)
    2434:	00004240 	call	424 <dpush>
    dpush(b);
    2438:	e13fff17 	ldw	r4,-4(fp)
    243c:	00004240 	call	424 <dpush>
}
    2440:	0001883a 	nop
    2444:	e037883a 	mov	sp,fp
    2448:	dfc00117 	ldw	ra,4(sp)
    244c:	df000017 	ldw	fp,0(sp)
    2450:	dec00204 	addi	sp,sp,8
    2454:	f800283a 	ret

00002458 <dover>:

BUILTIN(69, "2OVER", dover, 0)
{
    2458:	defffc04 	addi	sp,sp,-16
    245c:	dfc00315 	stw	ra,12(sp)
    2460:	df000215 	stw	fp,8(sp)
    2464:	df000204 	addi	fp,sp,8
    dcell a = dpop();
    2468:	00003e80 	call	3e8 <dpop>
    246c:	e0bffe15 	stw	r2,-8(fp)
    dcell b = dpop();
    2470:	00003e80 	call	3e8 <dpop>
    2474:	e0bfff15 	stw	r2,-4(fp)
    dpush(b);
    2478:	e13fff17 	ldw	r4,-4(fp)
    247c:	00004240 	call	424 <dpush>
    dpush(a);
    2480:	e13ffe17 	ldw	r4,-8(fp)
    2484:	00004240 	call	424 <dpush>
    dpush(b);
    2488:	e13fff17 	ldw	r4,-4(fp)
    248c:	00004240 	call	424 <dpush>
}
    2490:	0001883a 	nop
    2494:	e037883a 	mov	sp,fp
    2498:	dfc00117 	ldw	ra,4(sp)
    249c:	df000017 	ldw	fp,0(sp)
    24a0:	dec00204 	addi	sp,sp,8
    24a4:	f800283a 	ret

000024a8 <drot>:

BUILTIN(70, "2ROT", drot, 0)
{
    24a8:	defffb04 	addi	sp,sp,-20
    24ac:	dfc00415 	stw	ra,16(sp)
    24b0:	df000315 	stw	fp,12(sp)
    24b4:	df000304 	addi	fp,sp,12
    dcell a = dpop();
    24b8:	00003e80 	call	3e8 <dpop>
    24bc:	e0bffd15 	stw	r2,-12(fp)
    dcell b = dpop();
    24c0:	00003e80 	call	3e8 <dpop>
    24c4:	e0bffe15 	stw	r2,-8(fp)
    dcell c = dpop();
    24c8:	00003e80 	call	3e8 <dpop>
    24cc:	e0bfff15 	stw	r2,-4(fp)
    dpush(b);
    24d0:	e13ffe17 	ldw	r4,-8(fp)
    24d4:	00004240 	call	424 <dpush>
    dpush(a);
    24d8:	e13ffd17 	ldw	r4,-12(fp)
    24dc:	00004240 	call	424 <dpush>
    dpush(c);
    24e0:	e13fff17 	ldw	r4,-4(fp)
    24e4:	00004240 	call	424 <dpush>
}
    24e8:	0001883a 	nop
    24ec:	e037883a 	mov	sp,fp
    24f0:	dfc00117 	ldw	ra,4(sp)
    24f4:	df000017 	ldw	fp,0(sp)
    24f8:	dec00204 	addi	sp,sp,8
    24fc:	f800283a 	ret

00002500 <createWord>:
*
*******************************************************************************/

/* Create a word in the dictionary */
void createWord(const char* name, byte len, byte flags)
{
    2500:	defffa04 	addi	sp,sp,-24
    2504:	dfc00515 	stw	ra,20(sp)
    2508:	df000415 	stw	fp,16(sp)
    250c:	df000404 	addi	fp,sp,16
    2510:	e13ffd15 	stw	r4,-12(fp)
    2514:	2807883a 	mov	r3,r5
    2518:	3005883a 	mov	r2,r6
    251c:	e0fffe05 	stb	r3,-8(fp)
    2520:	e0bfff05 	stb	r2,-4(fp)
    cell newLatest = *here;
    2524:	d0a45217 	ldw	r2,-28344(gp)
    2528:	1080000b 	ldhu	r2,0(r2)
    252c:	e0bffc0d 	sth	r2,-16(fp)
    push(*latest);
    2530:	d0a44717 	ldw	r2,-28388(gp)
    2534:	1080000b 	ldhu	r2,0(r2)
    2538:	10bfffcc 	andi	r2,r2,65535
    253c:	1009883a 	mov	r4,r2
    2540:	00003680 	call	368 <push>
    comma();
    2544:	00012bc0 	call	12bc <comma>
    push(len | flags);
    2548:	e0fffe03 	ldbu	r3,-8(fp)
    254c:	e0bfff03 	ldbu	r2,-4(fp)
    2550:	1884b03a 	or	r2,r3,r2
    2554:	10803fcc 	andi	r2,r2,255
    2558:	1009883a 	mov	r4,r2
    255c:	00003680 	call	368 <push>
    commaByte();
    2560:	00013100 	call	1310 <commaByte>
    while (len--)
    2564:	00000c06 	br	2598 <createWord+0x98>
    {
        push(*name);
    2568:	e0bffd17 	ldw	r2,-12(fp)
    256c:	10800003 	ldbu	r2,0(r2)
    2570:	10803fcc 	andi	r2,r2,255
    2574:	1080201c 	xori	r2,r2,128
    2578:	10bfe004 	addi	r2,r2,-128
    257c:	10bfffcc 	andi	r2,r2,65535
    2580:	1009883a 	mov	r4,r2
    2584:	00003680 	call	368 <push>
        commaByte();
    2588:	00013100 	call	1310 <commaByte>
        name++;
    258c:	e0bffd17 	ldw	r2,-12(fp)
    2590:	10800044 	addi	r2,r2,1
    2594:	e0bffd15 	stw	r2,-12(fp)
    cell newLatest = *here;
    push(*latest);
    comma();
    push(len | flags);
    commaByte();
    while (len--)
    2598:	e0bffe03 	ldbu	r2,-8(fp)
    259c:	10ffffc4 	addi	r3,r2,-1
    25a0:	e0fffe05 	stb	r3,-8(fp)
    25a4:	10803fcc 	andi	r2,r2,255
    25a8:	103fef1e 	bne	r2,zero,2568 <__ram_exceptions_end+0xfe000548>
    {
        push(*name);
        commaByte();
        name++;
    }
    while (*here & (CELL_SIZE-1))
    25ac:	00000306 	br	25bc <createWord+0xbc>
    {
        push(0);
    25b0:	0009883a 	mov	r4,zero
    25b4:	00003680 	call	368 <push>
        commaByte();
    25b8:	00013100 	call	1310 <commaByte>
    {
        push(*name);
        commaByte();
        name++;
    }
    while (*here & (CELL_SIZE-1))
    25bc:	d0a45217 	ldw	r2,-28344(gp)
    25c0:	1080000b 	ldhu	r2,0(r2)
    25c4:	10bfffcc 	andi	r2,r2,65535
    25c8:	1080004c 	andi	r2,r2,1
    25cc:	103ff81e 	bne	r2,zero,25b0 <__ram_exceptions_end+0xfe000590>
    {
        push(0);
        commaByte();
    }
    *latest = newLatest;
    25d0:	d0a44717 	ldw	r2,-28388(gp)
    25d4:	e0fffc0b 	ldhu	r3,-16(fp)
    25d8:	10c0000d 	sth	r3,0(r2)
}
    25dc:	0001883a 	nop
    25e0:	e037883a 	mov	sp,fp
    25e4:	dfc00117 	ldw	ra,4(sp)
    25e8:	df000017 	ldw	fp,0(sp)
    25ec:	dec00204 	addi	sp,sp,8
    25f0:	f800283a 	ret

000025f4 <slen>:

/* A simple strlen clone so we don't have to pull in string.h */
byte slen(const char *str)
{
    25f4:	defffd04 	addi	sp,sp,-12
    25f8:	df000215 	stw	fp,8(sp)
    25fc:	df000204 	addi	fp,sp,8
    2600:	e13fff15 	stw	r4,-4(fp)
    byte ret = 0;
    2604:	e03ffe05 	stb	zero,-8(fp)
    while (*str++) ret++;
    2608:	00000306 	br	2618 <slen+0x24>
    260c:	e0bffe03 	ldbu	r2,-8(fp)
    2610:	10800044 	addi	r2,r2,1
    2614:	e0bffe05 	stb	r2,-8(fp)
    2618:	e0bfff17 	ldw	r2,-4(fp)
    261c:	10c00044 	addi	r3,r2,1
    2620:	e0ffff15 	stw	r3,-4(fp)
    2624:	10800003 	ldbu	r2,0(r2)
    2628:	10803fcc 	andi	r2,r2,255
    262c:	1080201c 	xori	r2,r2,128
    2630:	10bfe004 	addi	r2,r2,-128
    2634:	103ff51e 	bne	r2,zero,260c <__ram_exceptions_end+0xfe0005ec>
    return ret;
    2638:	e0bffe03 	ldbu	r2,-8(fp)
}
    263c:	e037883a 	mov	sp,fp
    2640:	df000017 	ldw	fp,0(sp)
    2644:	dec00104 	addi	sp,sp,4
    2648:	f800283a 	ret

0000264c <addBuiltin>:

/* Add a builtin to the dictionary */
void addBuiltin(cell code, const char* name, const byte flags, builtin f)
{
    264c:	defffa04 	addi	sp,sp,-24
    2650:	dfc00515 	stw	ra,20(sp)
    2654:	df000415 	stw	fp,16(sp)
    2658:	df000404 	addi	fp,sp,16
    265c:	2007883a 	mov	r3,r4
    2660:	e17ffd15 	stw	r5,-12(fp)
    2664:	3005883a 	mov	r2,r6
    2668:	e1ffff15 	stw	r7,-4(fp)
    266c:	e0fffc0d 	sth	r3,-16(fp)
    2670:	e0bffe05 	stb	r2,-8(fp)
    if (errorFlag) return;
    2674:	d0a44a17 	ldw	r2,-28376(gp)
    2678:	10003b1e 	bne	r2,zero,2768 <addBuiltin+0x11c>

    if (code >= MAX_BUILTIN_ID)
    267c:	e0bffc0b 	ldhu	r2,-16(fp)
    2680:	108011f0 	cmpltui	r2,r2,71
    2684:	10000b1e 	bne	r2,zero,26b4 <addBuiltin+0x68>
    {
        tell("Error adding builtin ");
    2688:	01000034 	movhi	r4,0
    268c:	211e0104 	addi	r4,r4,30724
    2690:	00002040 	call	204 <tell>
        tell(name);
    2694:	e13ffd17 	ldw	r4,-12(fp)
    2698:	00002040 	call	204 <tell>
        tell(": Out of builtin IDs\n");
    269c:	01000034 	movhi	r4,0
    26a0:	211e0704 	addi	r4,r4,30748
    26a4:	00002040 	call	204 <tell>
        errorFlag = 1;
    26a8:	00800044 	movi	r2,1
    26ac:	d0a44a15 	stw	r2,-28376(gp)
        return;
    26b0:	00002e06 	br	276c <addBuiltin+0x120>
    }

    if (builtins[code] != 0)
    26b4:	e0fffc0b 	ldhu	r3,-16(fp)
    26b8:	00800074 	movhi	r2,1
    26bc:	10a4f504 	addi	r2,r2,-27692
    26c0:	18c7883a 	add	r3,r3,r3
    26c4:	18c7883a 	add	r3,r3,r3
    26c8:	10c5883a 	add	r2,r2,r3
    26cc:	10800017 	ldw	r2,0(r2)
    26d0:	10000b26 	beq	r2,zero,2700 <addBuiltin+0xb4>
    {
        tell("Error adding builtin ");
    26d4:	01000034 	movhi	r4,0
    26d8:	211e0104 	addi	r4,r4,30724
    26dc:	00002040 	call	204 <tell>
        tell(name);
    26e0:	e13ffd17 	ldw	r4,-12(fp)
    26e4:	00002040 	call	204 <tell>
        tell(": ID given twice\n");
    26e8:	01000034 	movhi	r4,0
    26ec:	211e0d04 	addi	r4,r4,30772
    26f0:	00002040 	call	204 <tell>
        errorFlag = 1;
    26f4:	00800044 	movi	r2,1
    26f8:	d0a44a15 	stw	r2,-28376(gp)
        return;
    26fc:	00001b06 	br	276c <addBuiltin+0x120>
    }

    builtins[code] = f;
    2700:	e0fffc0b 	ldhu	r3,-16(fp)
    2704:	00800074 	movhi	r2,1
    2708:	10a4f504 	addi	r2,r2,-27692
    270c:	18c7883a 	add	r3,r3,r3
    2710:	18c7883a 	add	r3,r3,r3
    2714:	10c5883a 	add	r2,r2,r3
    2718:	e0ffff17 	ldw	r3,-4(fp)
    271c:	10c00015 	stw	r3,0(r2)
    createWord(name, slen(name), flags);
    2720:	e13ffd17 	ldw	r4,-12(fp)
    2724:	00025f40 	call	25f4 <slen>
    2728:	10803fcc 	andi	r2,r2,255
    272c:	e0fffe03 	ldbu	r3,-8(fp)
    2730:	180d883a 	mov	r6,r3
    2734:	100b883a 	mov	r5,r2
    2738:	e13ffd17 	ldw	r4,-12(fp)
    273c:	00025000 	call	2500 <createWord>
    push(code);
    2740:	e0bffc0b 	ldhu	r2,-16(fp)
    2744:	1009883a 	mov	r4,r2
    2748:	00003680 	call	368 <push>
    comma();
    274c:	00012bc0 	call	12bc <comma>
    push(doExit_id);
    2750:	008001c4 	movi	r2,7
    2754:	10bfffcc 	andi	r2,r2,65535
    2758:	1009883a 	mov	r4,r2
    275c:	00003680 	call	368 <push>
    comma();
    2760:	00012bc0 	call	12bc <comma>
    2764:	00000106 	br	276c <addBuiltin+0x120>
}

/* Add a builtin to the dictionary */
void addBuiltin(cell code, const char* name, const byte flags, builtin f)
{
    if (errorFlag) return;
    2768:	0001883a 	nop
    createWord(name, slen(name), flags);
    push(code);
    comma();
    push(doExit_id);
    comma();
}
    276c:	e037883a 	mov	sp,fp
    2770:	dfc00117 	ldw	ra,4(sp)
    2774:	df000017 	ldw	fp,0(sp)
    2778:	dec00204 	addi	sp,sp,8
    277c:	f800283a 	ret

00002780 <main>:

/* Program setup and jump to outer interpreter */
int main()
{
    2780:	defffe04 	addi	sp,sp,-8
    2784:	dfc00115 	stw	ra,4(sp)
    2788:	df000015 	stw	fp,0(sp)
    278c:	d839883a 	mov	fp,sp
    errorFlag = 0;
    2790:	d0244a15 	stw	zero,-28376(gp)
    {
        tell("Configuration error: DCELL_SIZE != 2*CELL_SIZE\n");
        return 1;
    }

    state = (cell*)&memory[STATE_POSITION];
    2794:	00800074 	movhi	r2,1
    2798:	10a56f84 	addi	r2,r2,-27202
    279c:	d0a44915 	stw	r2,-28380(gp)
    base = (cell*)&memory[BASE_POSITION];
    27a0:	00800074 	movhi	r2,1
    27a4:	10a56f04 	addi	r2,r2,-27204
    27a8:	d0a44415 	stw	r2,-28400(gp)
    latest = (cell*)&memory[LATEST_POSITION];
    27ac:	00800074 	movhi	r2,1
    27b0:	10a56e04 	addi	r2,r2,-27208
    27b4:	d0a44715 	stw	r2,-28388(gp)
    here = (cell*)&memory[HERE_POSITION];
    27b8:	00800074 	movhi	r2,1
    27bc:	10a56e84 	addi	r2,r2,-27206
    27c0:	d0a45215 	stw	r2,-28344(gp)
    sp = (cell*)&memory[STACK_POSITION];
    27c4:	00800074 	movhi	r2,1
    27c8:	10a57004 	addi	r2,r2,-27200
    27cc:	d0a44f15 	stw	r2,-28356(gp)
    stack = (cell*)&memory[STACK_POSITION + CELL_SIZE];
    27d0:	00800074 	movhi	r2,1
    27d4:	10a57084 	addi	r2,r2,-27198
    27d8:	d0a44815 	stw	r2,-28384(gp)
    rsp = (cell*)&memory[RSTACK_POSITION];
    27dc:	00800074 	movhi	r2,1
    27e0:	10a5d004 	addi	r2,r2,-26816
    27e4:	d0a44c15 	stw	r2,-28368(gp)
    rstack = (cell*)&memory[RSTACK_POSITION + CELL_SIZE];
    27e8:	00800074 	movhi	r2,1
    27ec:	10a5d084 	addi	r2,r2,-26814
    27f0:	d0a44615 	stw	r2,-28392(gp)

    *sp = *rsp = 1;
    27f4:	d0e44f17 	ldw	r3,-28356(gp)
    27f8:	d0a44c17 	ldw	r2,-28368(gp)
    27fc:	01000044 	movi	r4,1
    2800:	1100000d 	sth	r4,0(r2)
    2804:	1080000b 	ldhu	r2,0(r2)
    2808:	1880000d 	sth	r2,0(r3)
    *state = 0;
    280c:	d0a44917 	ldw	r2,-28380(gp)
    2810:	1000000d 	sth	zero,0(r2)
    *base = 10;
    2814:	d0a44417 	ldw	r2,-28400(gp)
    2818:	00c00284 	movi	r3,10
    281c:	10c0000d 	sth	r3,0(r2)
    *latest = 0;
    2820:	d0a44717 	ldw	r2,-28388(gp)
    2824:	1000000d 	sth	zero,0(r2)
    *here = HERE_START;
    2828:	d0a45217 	ldw	r2,-28344(gp)
    282c:	00c08a04 	movi	r3,552
    2830:	10c0000d 	sth	r3,0(r2)

    ADD_BUILTIN(docol);
    2834:	0005883a 	mov	r2,zero
    2838:	10bfffcc 	andi	r2,r2,65535
    283c:	d0e00217 	ldw	r3,-32760(gp)
    2840:	0009883a 	mov	r4,zero
    2844:	21003fcc 	andi	r4,r4,255
    2848:	01c00034 	movhi	r7,0
    284c:	39c2c604 	addi	r7,r7,2840
    2850:	200d883a 	mov	r6,r4
    2854:	180b883a 	mov	r5,r3
    2858:	1009883a 	mov	r4,r2
    285c:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(doCellSize);
    2860:	00800044 	movi	r2,1
    2864:	10bfffcc 	andi	r2,r2,65535
    2868:	d0e00517 	ldw	r3,-32748(gp)
    286c:	0009883a 	mov	r4,zero
    2870:	21003fcc 	andi	r4,r4,255
    2874:	01c00034 	movhi	r7,0
    2878:	39c2d704 	addi	r7,r7,2908
    287c:	200d883a 	mov	r6,r4
    2880:	180b883a 	mov	r5,r3
    2884:	1009883a 	mov	r4,r2
    2888:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(memRead);
    288c:	00800084 	movi	r2,2
    2890:	10bfffcc 	andi	r2,r2,65535
    2894:	d0e00817 	ldw	r3,-32736(gp)
    2898:	0009883a 	mov	r4,zero
    289c:	21003fcc 	andi	r4,r4,255
    28a0:	01c00034 	movhi	r7,0
    28a4:	39c2e304 	addi	r7,r7,2956
    28a8:	200d883a 	mov	r6,r4
    28ac:	180b883a 	mov	r5,r3
    28b0:	1009883a 	mov	r4,r2
    28b4:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(memWrite);
    28b8:	008006c4 	movi	r2,27
    28bc:	10bfffcc 	andi	r2,r2,65535
    28c0:	d0e05317 	ldw	r3,-32436(gp)
    28c4:	0009883a 	mov	r4,zero
    28c8:	21003fcc 	andi	r4,r4,255
    28cc:	01c00034 	movhi	r7,0
    28d0:	39c45f04 	addi	r7,r7,4476
    28d4:	200d883a 	mov	r6,r4
    28d8:	180b883a 	mov	r5,r3
    28dc:	1009883a 	mov	r4,r2
    28e0:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(memReadByte);
    28e4:	008000c4 	movi	r2,3
    28e8:	10bfffcc 	andi	r2,r2,65535
    28ec:	d0e00b17 	ldw	r3,-32724(gp)
    28f0:	0009883a 	mov	r4,zero
    28f4:	21003fcc 	andi	r4,r4,255
    28f8:	01c00034 	movhi	r7,0
    28fc:	39c2f404 	addi	r7,r7,3024
    2900:	200d883a 	mov	r6,r4
    2904:	180b883a 	mov	r5,r3
    2908:	1009883a 	mov	r4,r2
    290c:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(memWriteByte);
    2910:	00800704 	movi	r2,28
    2914:	10bfffcc 	andi	r2,r2,65535
    2918:	d0e05617 	ldw	r3,-32424(gp)
    291c:	0009883a 	mov	r4,zero
    2920:	21003fcc 	andi	r4,r4,255
    2924:	01c00034 	movhi	r7,0
    2928:	39c47204 	addi	r7,r7,4552
    292c:	200d883a 	mov	r6,r4
    2930:	180b883a 	mov	r5,r3
    2934:	1009883a 	mov	r4,r2
    2938:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(key);
    293c:	00800104 	movi	r2,4
    2940:	10bfffcc 	andi	r2,r2,65535
    2944:	d0e00e17 	ldw	r3,-32712(gp)
    2948:	0009883a 	mov	r4,zero
    294c:	21003fcc 	andi	r4,r4,255
    2950:	01c00034 	movhi	r7,0
    2954:	39c30704 	addi	r7,r7,3100
    2958:	200d883a 	mov	r6,r4
    295c:	180b883a 	mov	r5,r3
    2960:	1009883a 	mov	r4,r2
    2964:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(emit);
    2968:	00800144 	movi	r2,5
    296c:	10bfffcc 	andi	r2,r2,65535
    2970:	d0e01117 	ldw	r3,-32700(gp)
    2974:	0009883a 	mov	r4,zero
    2978:	21003fcc 	andi	r4,r4,255
    297c:	01c00034 	movhi	r7,0
    2980:	39c31504 	addi	r7,r7,3156
    2984:	200d883a 	mov	r6,r4
    2988:	180b883a 	mov	r5,r3
    298c:	1009883a 	mov	r4,r2
    2990:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(swap);
    2994:	00800744 	movi	r2,29
    2998:	10bfffcc 	andi	r2,r2,65535
    299c:	d0e05917 	ldw	r3,-32412(gp)
    29a0:	0009883a 	mov	r4,zero
    29a4:	21003fcc 	andi	r4,r4,255
    29a8:	01c00034 	movhi	r7,0
    29ac:	39c48704 	addi	r7,r7,4636
    29b0:	200d883a 	mov	r6,r4
    29b4:	180b883a 	mov	r5,r3
    29b8:	1009883a 	mov	r4,r2
    29bc:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(dup);
    29c0:	00800684 	movi	r2,26
    29c4:	10bfffcc 	andi	r2,r2,65535
    29c8:	d0e05017 	ldw	r3,-32448(gp)
    29cc:	0009883a 	mov	r4,zero
    29d0:	21003fcc 	andi	r4,r4,255
    29d4:	01c00034 	movhi	r7,0
    29d8:	39c45104 	addi	r7,r7,4420
    29dc:	200d883a 	mov	r6,r4
    29e0:	180b883a 	mov	r5,r3
    29e4:	1009883a 	mov	r4,r2
    29e8:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(drop);
    29ec:	00800184 	movi	r2,6
    29f0:	10bfffcc 	andi	r2,r2,65535
    29f4:	d0e01417 	ldw	r3,-32688(gp)
    29f8:	0009883a 	mov	r4,zero
    29fc:	21003fcc 	andi	r4,r4,255
    2a00:	01c00034 	movhi	r7,0
    2a04:	39c32504 	addi	r7,r7,3220
    2a08:	200d883a 	mov	r6,r4
    2a0c:	180b883a 	mov	r5,r3
    2a10:	1009883a 	mov	r4,r2
    2a14:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(over);
    2a18:	00800784 	movi	r2,30
    2a1c:	10bfffcc 	andi	r2,r2,65535
    2a20:	d0e05c17 	ldw	r3,-32400(gp)
    2a24:	0009883a 	mov	r4,zero
    2a28:	21003fcc 	andi	r4,r4,255
    2a2c:	01c00034 	movhi	r7,0
    2a30:	39c49b04 	addi	r7,r7,4716
    2a34:	200d883a 	mov	r6,r4
    2a38:	180b883a 	mov	r5,r3
    2a3c:	1009883a 	mov	r4,r2
    2a40:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(comma);
    2a44:	008007c4 	movi	r2,31
    2a48:	10bfffcc 	andi	r2,r2,65535
    2a4c:	d0e05f17 	ldw	r3,-32388(gp)
    2a50:	0009883a 	mov	r4,zero
    2a54:	21003fcc 	andi	r4,r4,255
    2a58:	01c00034 	movhi	r7,0
    2a5c:	39c4af04 	addi	r7,r7,4796
    2a60:	200d883a 	mov	r6,r4
    2a64:	180b883a 	mov	r5,r3
    2a68:	1009883a 	mov	r4,r2
    2a6c:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(commaByte);
    2a70:	00800804 	movi	r2,32
    2a74:	10bfffcc 	andi	r2,r2,65535
    2a78:	d0e06217 	ldw	r3,-32376(gp)
    2a7c:	0009883a 	mov	r4,zero
    2a80:	21003fcc 	andi	r4,r4,255
    2a84:	01c00034 	movhi	r7,0
    2a88:	39c4c404 	addi	r7,r7,4880
    2a8c:	200d883a 	mov	r6,r4
    2a90:	180b883a 	mov	r5,r3
    2a94:	1009883a 	mov	r4,r2
    2a98:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(word);
    2a9c:	00800844 	movi	r2,33
    2aa0:	10bfffcc 	andi	r2,r2,65535
    2aa4:	d0e06517 	ldw	r3,-32364(gp)
    2aa8:	0009883a 	mov	r4,zero
    2aac:	21003fcc 	andi	r4,r4,255
    2ab0:	01c00034 	movhi	r7,0
    2ab4:	39c4d904 	addi	r7,r7,4964
    2ab8:	200d883a 	mov	r6,r4
    2abc:	180b883a 	mov	r5,r3
    2ac0:	1009883a 	mov	r4,r2
    2ac4:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(find);
    2ac8:	00800884 	movi	r2,34
    2acc:	10bfffcc 	andi	r2,r2,65535
    2ad0:	d0e06817 	ldw	r3,-32352(gp)
    2ad4:	0009883a 	mov	r4,zero
    2ad8:	21003fcc 	andi	r4,r4,255
    2adc:	01c00034 	movhi	r7,0
    2ae0:	39c4ea04 	addi	r7,r7,5032
    2ae4:	200d883a 	mov	r6,r4
    2ae8:	180b883a 	mov	r5,r3
    2aec:	1009883a 	mov	r4,r2
    2af0:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(cfa);
    2af4:	008008c4 	movi	r2,35
    2af8:	10bfffcc 	andi	r2,r2,65535
    2afc:	d0e06b17 	ldw	r3,-32340(gp)
    2b00:	0009883a 	mov	r4,zero
    2b04:	21003fcc 	andi	r4,r4,255
    2b08:	01c00034 	movhi	r7,0
    2b0c:	39c51e04 	addi	r7,r7,5240
    2b10:	200d883a 	mov	r6,r4
    2b14:	180b883a 	mov	r5,r3
    2b18:	1009883a 	mov	r4,r2
    2b1c:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(doExit);
    2b20:	008001c4 	movi	r2,7
    2b24:	10bfffcc 	andi	r2,r2,65535
    2b28:	d0e01717 	ldw	r3,-32676(gp)
    2b2c:	0009883a 	mov	r4,zero
    2b30:	21003fcc 	andi	r4,r4,255
    2b34:	01c00034 	movhi	r7,0
    2b38:	39c33004 	addi	r7,r7,3264
    2b3c:	200d883a 	mov	r6,r4
    2b40:	180b883a 	mov	r5,r3
    2b44:	1009883a 	mov	r4,r2
    2b48:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(quit);
    2b4c:	00800984 	movi	r2,38
    2b50:	10bfffcc 	andi	r2,r2,65535
    2b54:	d0e07417 	ldw	r3,-32304(gp)
    2b58:	0009883a 	mov	r4,zero
    2b5c:	21003fcc 	andi	r4,r4,255
    2b60:	01c00034 	movhi	r7,0
    2b64:	39c57b04 	addi	r7,r7,5612
    2b68:	200d883a 	mov	r6,r4
    2b6c:	180b883a 	mov	r5,r3
    2b70:	1009883a 	mov	r4,r2
    2b74:	000264c0 	call	264c <addBuiltin>
    quit_address = getCfa(*latest);
    2b78:	d0a44717 	ldw	r2,-28388(gp)
    2b7c:	1080000b 	ldhu	r2,0(r2)
    2b80:	10bfffcc 	andi	r2,r2,65535
    2b84:	1009883a 	mov	r4,r2
    2b88:	00014040 	call	1404 <getCfa>
    2b8c:	d0a44d0d 	sth	r2,-28364(gp)
    ADD_BUILTIN(number);
    2b90:	00800904 	movi	r2,36
    2b94:	10bfffcc 	andi	r2,r2,65535
    2b98:	d0e06e17 	ldw	r3,-32328(gp)
    2b9c:	0009883a 	mov	r4,zero
    2ba0:	21003fcc 	andi	r4,r4,255
    2ba4:	01c00034 	movhi	r7,0
    2ba8:	39c53c04 	addi	r7,r7,5360
    2bac:	200d883a 	mov	r6,r4
    2bb0:	180b883a 	mov	r5,r3
    2bb4:	1009883a 	mov	r4,r2
    2bb8:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(bye);
    2bbc:	00800204 	movi	r2,8
    2bc0:	10bfffcc 	andi	r2,r2,65535
    2bc4:	d0e01a17 	ldw	r3,-32664(gp)
    2bc8:	0009883a 	mov	r4,zero
    2bcc:	21003fcc 	andi	r4,r4,255
    2bd0:	01c00034 	movhi	r7,0
    2bd4:	39c33c04 	addi	r7,r7,3312
    2bd8:	200d883a 	mov	r6,r4
    2bdc:	180b883a 	mov	r5,r3
    2be0:	1009883a 	mov	r4,r2
    2be4:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(doLatest);
    2be8:	00800244 	movi	r2,9
    2bec:	10bfffcc 	andi	r2,r2,65535
    2bf0:	d0e01d17 	ldw	r3,-32652(gp)
    2bf4:	0009883a 	mov	r4,zero
    2bf8:	21003fcc 	andi	r4,r4,255
    2bfc:	01c00034 	movhi	r7,0
    2c00:	39c34604 	addi	r7,r7,3352
    2c04:	200d883a 	mov	r6,r4
    2c08:	180b883a 	mov	r5,r3
    2c0c:	1009883a 	mov	r4,r2
    2c10:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(doHere);
    2c14:	00800284 	movi	r2,10
    2c18:	10bfffcc 	andi	r2,r2,65535
    2c1c:	d0e02017 	ldw	r3,-32640(gp)
    2c20:	0009883a 	mov	r4,zero
    2c24:	21003fcc 	andi	r4,r4,255
    2c28:	01c00034 	movhi	r7,0
    2c2c:	39c35204 	addi	r7,r7,3400
    2c30:	200d883a 	mov	r6,r4
    2c34:	180b883a 	mov	r5,r3
    2c38:	1009883a 	mov	r4,r2
    2c3c:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(doBase);
    2c40:	008002c4 	movi	r2,11
    2c44:	10bfffcc 	andi	r2,r2,65535
    2c48:	d0e02317 	ldw	r3,-32628(gp)
    2c4c:	0009883a 	mov	r4,zero
    2c50:	21003fcc 	andi	r4,r4,255
    2c54:	01c00034 	movhi	r7,0
    2c58:	39c35e04 	addi	r7,r7,3448
    2c5c:	200d883a 	mov	r6,r4
    2c60:	180b883a 	mov	r5,r3
    2c64:	1009883a 	mov	r4,r2
    2c68:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(doState);
    2c6c:	00800304 	movi	r2,12
    2c70:	10bfffcc 	andi	r2,r2,65535
    2c74:	d0e02617 	ldw	r3,-32616(gp)
    2c78:	0009883a 	mov	r4,zero
    2c7c:	21003fcc 	andi	r4,r4,255
    2c80:	01c00034 	movhi	r7,0
    2c84:	39c36a04 	addi	r7,r7,3496
    2c88:	200d883a 	mov	r6,r4
    2c8c:	180b883a 	mov	r5,r3
    2c90:	1009883a 	mov	r4,r2
    2c94:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(plus);
    2c98:	008009c4 	movi	r2,39
    2c9c:	10bfffcc 	andi	r2,r2,65535
    2ca0:	d0e07717 	ldw	r3,-32292(gp)
    2ca4:	0009883a 	mov	r4,zero
    2ca8:	21003fcc 	andi	r4,r4,255
    2cac:	01c00034 	movhi	r7,0
    2cb0:	39c65704 	addi	r7,r7,6492
    2cb4:	200d883a 	mov	r6,r4
    2cb8:	180b883a 	mov	r5,r3
    2cbc:	1009883a 	mov	r4,r2
    2cc0:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(minus);
    2cc4:	00800a04 	movi	r2,40
    2cc8:	10bfffcc 	andi	r2,r2,65535
    2ccc:	d0e07a17 	ldw	r3,-32280(gp)
    2cd0:	0009883a 	mov	r4,zero
    2cd4:	21003fcc 	andi	r4,r4,255
    2cd8:	01c00034 	movhi	r7,0
    2cdc:	39c66b04 	addi	r7,r7,6572
    2ce0:	200d883a 	mov	r6,r4
    2ce4:	180b883a 	mov	r5,r3
    2ce8:	1009883a 	mov	r4,r2
    2cec:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(mul);
    2cf0:	00800a44 	movi	r2,41
    2cf4:	10bfffcc 	andi	r2,r2,65535
    2cf8:	d0e07d17 	ldw	r3,-32268(gp)
    2cfc:	0009883a 	mov	r4,zero
    2d00:	21003fcc 	andi	r4,r4,255
    2d04:	01c00034 	movhi	r7,0
    2d08:	39c67f04 	addi	r7,r7,6652
    2d0c:	200d883a 	mov	r6,r4
    2d10:	180b883a 	mov	r5,r3
    2d14:	1009883a 	mov	r4,r2
    2d18:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(divmod);
    2d1c:	00800a84 	movi	r2,42
    2d20:	10bfffcc 	andi	r2,r2,65535
    2d24:	d0e08017 	ldw	r3,-32256(gp)
    2d28:	0009883a 	mov	r4,zero
    2d2c:	21003fcc 	andi	r4,r4,255
    2d30:	01c00034 	movhi	r7,0
    2d34:	39c69504 	addi	r7,r7,6740
    2d38:	200d883a 	mov	r6,r4
    2d3c:	180b883a 	mov	r5,r3
    2d40:	1009883a 	mov	r4,r2
    2d44:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(rot);
    2d48:	00800ac4 	movi	r2,43
    2d4c:	10bfffcc 	andi	r2,r2,65535
    2d50:	d0e08317 	ldw	r3,-32244(gp)
    2d54:	0009883a 	mov	r4,zero
    2d58:	21003fcc 	andi	r4,r4,255
    2d5c:	01c00034 	movhi	r7,0
    2d60:	39c6b304 	addi	r7,r7,6860
    2d64:	200d883a 	mov	r6,r4
    2d68:	180b883a 	mov	r5,r3
    2d6c:	1009883a 	mov	r4,r2
    2d70:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(gotoInterpreter);
    2d74:	00800344 	movi	r2,13
    2d78:	10bfffcc 	andi	r2,r2,65535
    2d7c:	d0e02917 	ldw	r3,-32604(gp)
    2d80:	013fe004 	movi	r4,-128
    2d84:	21003fcc 	andi	r4,r4,255
    2d88:	01c00034 	movhi	r7,0
    2d8c:	39c37604 	addi	r7,r7,3544
    2d90:	200d883a 	mov	r6,r4
    2d94:	180b883a 	mov	r5,r3
    2d98:	1009883a 	mov	r4,r2
    2d9c:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(gotoCompiler);
    2da0:	00800384 	movi	r2,14
    2da4:	10bfffcc 	andi	r2,r2,65535
    2da8:	d0e02c17 	ldw	r3,-32592(gp)
    2dac:	0009883a 	mov	r4,zero
    2db0:	21003fcc 	andi	r4,r4,255
    2db4:	01c00034 	movhi	r7,0
    2db8:	39c38004 	addi	r7,r7,3584
    2dbc:	200d883a 	mov	r6,r4
    2dc0:	180b883a 	mov	r5,r3
    2dc4:	1009883a 	mov	r4,r2
    2dc8:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(doCreate);
    2dcc:	00800b04 	movi	r2,44
    2dd0:	10bfffcc 	andi	r2,r2,65535
    2dd4:	d0e08617 	ldw	r3,-32232(gp)
    2dd8:	0009883a 	mov	r4,zero
    2ddc:	21003fcc 	andi	r4,r4,255
    2de0:	01c00034 	movhi	r7,0
    2de4:	39c6cc04 	addi	r7,r7,6960
    2de8:	200d883a 	mov	r6,r4
    2dec:	180b883a 	mov	r5,r3
    2df0:	1009883a 	mov	r4,r2
    2df4:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(hide);
    2df8:	008003c4 	movi	r2,15
    2dfc:	10bfffcc 	andi	r2,r2,65535
    2e00:	d0e02f17 	ldw	r3,-32580(gp)
    2e04:	0009883a 	mov	r4,zero
    2e08:	21003fcc 	andi	r4,r4,255
    2e0c:	01c00034 	movhi	r7,0
    2e10:	39c38b04 	addi	r7,r7,3628
    2e14:	200d883a 	mov	r6,r4
    2e18:	180b883a 	mov	r5,r3
    2e1c:	1009883a 	mov	r4,r2
    2e20:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(lit);
    2e24:	00800944 	movi	r2,37
    2e28:	10bfffcc 	andi	r2,r2,65535
    2e2c:	d0e07117 	ldw	r3,-32316(gp)
    2e30:	0009883a 	mov	r4,zero
    2e34:	21003fcc 	andi	r4,r4,255
    2e38:	01c00034 	movhi	r7,0
    2e3c:	39c56704 	addi	r7,r7,5532
    2e40:	200d883a 	mov	r6,r4
    2e44:	180b883a 	mov	r5,r3
    2e48:	1009883a 	mov	r4,r2
    2e4c:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(colon);
    2e50:	00800b44 	movi	r2,45
    2e54:	10bfffcc 	andi	r2,r2,65535
    2e58:	d0e08917 	ldw	r3,-32220(gp)
    2e5c:	0009883a 	mov	r4,zero
    2e60:	21003fcc 	andi	r4,r4,255
    2e64:	01c00034 	movhi	r7,0
    2e68:	39c6e404 	addi	r7,r7,7056
    2e6c:	200d883a 	mov	r6,r4
    2e70:	180b883a 	mov	r5,r3
    2e74:	1009883a 	mov	r4,r2
    2e78:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(semicolon);
    2e7c:	00800b84 	movi	r2,46
    2e80:	10bfffcc 	andi	r2,r2,65535
    2e84:	d0e08c17 	ldw	r3,-32208(gp)
    2e88:	013fe004 	movi	r4,-128
    2e8c:	21003fcc 	andi	r4,r4,255
    2e90:	01c00034 	movhi	r7,0
    2e94:	39c6f804 	addi	r7,r7,7136
    2e98:	200d883a 	mov	r6,r4
    2e9c:	180b883a 	mov	r5,r3
    2ea0:	1009883a 	mov	r4,r2
    2ea4:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(rtos);
    2ea8:	00800404 	movi	r2,16
    2eac:	10bfffcc 	andi	r2,r2,65535
    2eb0:	d0e03217 	ldw	r3,-32568(gp)
    2eb4:	0009883a 	mov	r4,zero
    2eb8:	21003fcc 	andi	r4,r4,255
    2ebc:	01c00034 	movhi	r7,0
    2ec0:	39c3a504 	addi	r7,r7,3732
    2ec4:	200d883a 	mov	r6,r4
    2ec8:	180b883a 	mov	r5,r3
    2ecc:	1009883a 	mov	r4,r2
    2ed0:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(stor);
    2ed4:	00800444 	movi	r2,17
    2ed8:	10bfffcc 	andi	r2,r2,65535
    2edc:	d0e03517 	ldw	r3,-32556(gp)
    2ee0:	0009883a 	mov	r4,zero
    2ee4:	21003fcc 	andi	r4,r4,255
    2ee8:	01c00034 	movhi	r7,0
    2eec:	39c3b304 	addi	r7,r7,3788
    2ef0:	200d883a 	mov	r6,r4
    2ef4:	180b883a 	mov	r5,r3
    2ef8:	1009883a 	mov	r4,r2
    2efc:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(rget);
    2f00:	00800bc4 	movi	r2,47
    2f04:	10bfffcc 	andi	r2,r2,65535
    2f08:	d0e08f17 	ldw	r3,-32196(gp)
    2f0c:	0009883a 	mov	r4,zero
    2f10:	21003fcc 	andi	r4,r4,255
    2f14:	01c00034 	movhi	r7,0
    2f18:	39c70a04 	addi	r7,r7,7208
    2f1c:	200d883a 	mov	r6,r4
    2f20:	180b883a 	mov	r5,r3
    2f24:	1009883a 	mov	r4,r2
    2f28:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(doJ);
    2f2c:	00800c04 	movi	r2,48
    2f30:	10bfffcc 	andi	r2,r2,65535
    2f34:	d0e09217 	ldw	r3,-32184(gp)
    2f38:	0009883a 	mov	r4,zero
    2f3c:	21003fcc 	andi	r4,r4,255
    2f40:	01c00034 	movhi	r7,0
    2f44:	39c71c04 	addi	r7,r7,7280
    2f48:	200d883a 	mov	r6,r4
    2f4c:	180b883a 	mov	r5,r3
    2f50:	1009883a 	mov	r4,r2
    2f54:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(tick);
    2f58:	00800c44 	movi	r2,49
    2f5c:	10bfffcc 	andi	r2,r2,65535
    2f60:	d0e09517 	ldw	r3,-32172(gp)
    2f64:	013fe004 	movi	r4,-128
    2f68:	21003fcc 	andi	r4,r4,255
    2f6c:	01c00034 	movhi	r7,0
    2f70:	39c73804 	addi	r7,r7,7392
    2f74:	200d883a 	mov	r6,r4
    2f78:	180b883a 	mov	r5,r3
    2f7c:	1009883a 	mov	r4,r2
    2f80:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(key_p);
    2f84:	00800484 	movi	r2,18
    2f88:	10bfffcc 	andi	r2,r2,65535
    2f8c:	d0e03817 	ldw	r3,-32544(gp)
    2f90:	0009883a 	mov	r4,zero
    2f94:	21003fcc 	andi	r4,r4,255
    2f98:	01c00034 	movhi	r7,0
    2f9c:	39c3c104 	addi	r7,r7,3844
    2fa0:	200d883a 	mov	r6,r4
    2fa4:	180b883a 	mov	r5,r3
    2fa8:	1009883a 	mov	r4,r2
    2fac:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(equals);
    2fb0:	00800c84 	movi	r2,50
    2fb4:	10bfffcc 	andi	r2,r2,65535
    2fb8:	d0e09817 	ldw	r3,-32160(gp)
    2fbc:	0009883a 	mov	r4,zero
    2fc0:	21003fcc 	andi	r4,r4,255
    2fc4:	01c00034 	movhi	r7,0
    2fc8:	39c74f04 	addi	r7,r7,7484
    2fcc:	200d883a 	mov	r6,r4
    2fd0:	180b883a 	mov	r5,r3
    2fd4:	1009883a 	mov	r4,r2
    2fd8:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(smaller);
    2fdc:	00800cc4 	movi	r2,51
    2fe0:	10bfffcc 	andi	r2,r2,65535
    2fe4:	d0e09b17 	ldw	r3,-32148(gp)
    2fe8:	0009883a 	mov	r4,zero
    2fec:	21003fcc 	andi	r4,r4,255
    2ff0:	01c00034 	movhi	r7,0
    2ff4:	39c76504 	addi	r7,r7,7572
    2ff8:	200d883a 	mov	r6,r4
    2ffc:	180b883a 	mov	r5,r3
    3000:	1009883a 	mov	r4,r2
    3004:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(larger);
    3008:	00800d04 	movi	r2,52
    300c:	10bfffcc 	andi	r2,r2,65535
    3010:	d0e09e17 	ldw	r3,-32136(gp)
    3014:	0009883a 	mov	r4,zero
    3018:	21003fcc 	andi	r4,r4,255
    301c:	01c00034 	movhi	r7,0
    3020:	39c77b04 	addi	r7,r7,7660
    3024:	200d883a 	mov	r6,r4
    3028:	180b883a 	mov	r5,r3
    302c:	1009883a 	mov	r4,r2
    3030:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(doAnd);
    3034:	00800d44 	movi	r2,53
    3038:	10bfffcc 	andi	r2,r2,65535
    303c:	d0e0a117 	ldw	r3,-32124(gp)
    3040:	0009883a 	mov	r4,zero
    3044:	21003fcc 	andi	r4,r4,255
    3048:	01c00034 	movhi	r7,0
    304c:	39c79104 	addi	r7,r7,7748
    3050:	200d883a 	mov	r6,r4
    3054:	180b883a 	mov	r5,r3
    3058:	1009883a 	mov	r4,r2
    305c:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(doOr);
    3060:	00800d84 	movi	r2,54
    3064:	10bfffcc 	andi	r2,r2,65535
    3068:	d0e0a417 	ldw	r3,-32112(gp)
    306c:	0009883a 	mov	r4,zero
    3070:	21003fcc 	andi	r4,r4,255
    3074:	01c00034 	movhi	r7,0
    3078:	39c7a504 	addi	r7,r7,7828
    307c:	200d883a 	mov	r6,r4
    3080:	180b883a 	mov	r5,r3
    3084:	1009883a 	mov	r4,r2
    3088:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(branch);
    308c:	008004c4 	movi	r2,19
    3090:	10bfffcc 	andi	r2,r2,65535
    3094:	d0e03b17 	ldw	r3,-32532(gp)
    3098:	0009883a 	mov	r4,zero
    309c:	21003fcc 	andi	r4,r4,255
    30a0:	01c00034 	movhi	r7,0
    30a4:	39c3cf04 	addi	r7,r7,3900
    30a8:	200d883a 	mov	r6,r4
    30ac:	180b883a 	mov	r5,r3
    30b0:	1009883a 	mov	r4,r2
    30b4:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(zbranch);
    30b8:	00800504 	movi	r2,20
    30bc:	10bfffcc 	andi	r2,r2,65535
    30c0:	d0e03e17 	ldw	r3,-32520(gp)
    30c4:	0009883a 	mov	r4,zero
    30c8:	21003fcc 	andi	r4,r4,255
    30cc:	01c00034 	movhi	r7,0
    30d0:	39c3e104 	addi	r7,r7,3972
    30d4:	200d883a 	mov	r6,r4
    30d8:	180b883a 	mov	r5,r3
    30dc:	1009883a 	mov	r4,r2
    30e0:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(toggleImmediate);
    30e4:	00800544 	movi	r2,21
    30e8:	10bfffcc 	andi	r2,r2,65535
    30ec:	d0e04117 	ldw	r3,-32508(gp)
    30f0:	013fe004 	movi	r4,-128
    30f4:	21003fcc 	andi	r4,r4,255
    30f8:	01c00034 	movhi	r7,0
    30fc:	39c3f904 	addi	r7,r7,4068
    3100:	200d883a 	mov	r6,r4
    3104:	180b883a 	mov	r5,r3
    3108:	1009883a 	mov	r4,r2
    310c:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(doFree);
    3110:	00800584 	movi	r2,22
    3114:	10bfffcc 	andi	r2,r2,65535
    3118:	d0e04417 	ldw	r3,-32496(gp)
    311c:	0009883a 	mov	r4,zero
    3120:	21003fcc 	andi	r4,r4,255
    3124:	01c00034 	movhi	r7,0
    3128:	39c41404 	addi	r7,r7,4176
    312c:	200d883a 	mov	r6,r4
    3130:	180b883a 	mov	r5,r3
    3134:	1009883a 	mov	r4,r2
    3138:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(p_dup);
    313c:	00800dc4 	movi	r2,55
    3140:	10bfffcc 	andi	r2,r2,65535
    3144:	d0e0a717 	ldw	r3,-32100(gp)
    3148:	0009883a 	mov	r4,zero
    314c:	21003fcc 	andi	r4,r4,255
    3150:	01c00034 	movhi	r7,0
    3154:	39c7b904 	addi	r7,r7,7908
    3158:	200d883a 	mov	r6,r4
    315c:	180b883a 	mov	r5,r3
    3160:	1009883a 	mov	r4,r2
    3164:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(s0_r);
    3168:	008005c4 	movi	r2,23
    316c:	10bfffcc 	andi	r2,r2,65535
    3170:	d0e04717 	ldw	r3,-32484(gp)
    3174:	0009883a 	mov	r4,zero
    3178:	21003fcc 	andi	r4,r4,255
    317c:	01c00034 	movhi	r7,0
    3180:	39c42404 	addi	r7,r7,4240
    3184:	200d883a 	mov	r6,r4
    3188:	180b883a 	mov	r5,r3
    318c:	1009883a 	mov	r4,r2
    3190:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(dsp_r);
    3194:	00800604 	movi	r2,24
    3198:	10bfffcc 	andi	r2,r2,65535
    319c:	d0e04a17 	ldw	r3,-32472(gp)
    31a0:	0009883a 	mov	r4,zero
    31a4:	21003fcc 	andi	r4,r4,255
    31a8:	01c00034 	movhi	r7,0
    31ac:	39c43004 	addi	r7,r7,4288
    31b0:	200d883a 	mov	r6,r4
    31b4:	180b883a 	mov	r5,r3
    31b8:	1009883a 	mov	r4,r2
    31bc:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(litstring);
    31c0:	00800e04 	movi	r2,56
    31c4:	10bfffcc 	andi	r2,r2,65535
    31c8:	d0e0aa17 	ldw	r3,-32088(gp)
    31cc:	0009883a 	mov	r4,zero
    31d0:	21003fcc 	andi	r4,r4,255
    31d4:	01c00034 	movhi	r7,0
    31d8:	39c7ca04 	addi	r7,r7,7976
    31dc:	200d883a 	mov	r6,r4
    31e0:	180b883a 	mov	r5,r3
    31e4:	1009883a 	mov	r4,r2
    31e8:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(not);
    31ec:	00800644 	movi	r2,25
    31f0:	10bfffcc 	andi	r2,r2,65535
    31f4:	d0e04d17 	ldw	r3,-32460(gp)
    31f8:	0009883a 	mov	r4,zero
    31fc:	21003fcc 	andi	r4,r4,255
    3200:	01c00034 	movhi	r7,0
    3204:	39c44204 	addi	r7,r7,4360
    3208:	200d883a 	mov	r6,r4
    320c:	180b883a 	mov	r5,r3
    3210:	1009883a 	mov	r4,r2
    3214:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(xor);
    3218:	00800e44 	movi	r2,57
    321c:	10bfffcc 	andi	r2,r2,65535
    3220:	d0e0ad17 	ldw	r3,-32076(gp)
    3224:	0009883a 	mov	r4,zero
    3228:	21003fcc 	andi	r4,r4,255
    322c:	01c00034 	movhi	r7,0
    3230:	39c7ef04 	addi	r7,r7,8124
    3234:	200d883a 	mov	r6,r4
    3238:	180b883a 	mov	r5,r3
    323c:	1009883a 	mov	r4,r2
    3240:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(timesDivide);
    3244:	00800e84 	movi	r2,58
    3248:	10bfffcc 	andi	r2,r2,65535
    324c:	d0e0b017 	ldw	r3,-32064(gp)
    3250:	0009883a 	mov	r4,zero
    3254:	21003fcc 	andi	r4,r4,255
    3258:	01c00034 	movhi	r7,0
    325c:	39c80304 	addi	r7,r7,8204
    3260:	200d883a 	mov	r6,r4
    3264:	180b883a 	mov	r5,r3
    3268:	1009883a 	mov	r4,r2
    326c:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(timesDivideMod);
    3270:	00800ec4 	movi	r2,59
    3274:	10bfffcc 	andi	r2,r2,65535
    3278:	d0e0b317 	ldw	r3,-32052(gp)
    327c:	0009883a 	mov	r4,zero
    3280:	21003fcc 	andi	r4,r4,255
    3284:	01c00034 	movhi	r7,0
    3288:	39c82b04 	addi	r7,r7,8364
    328c:	200d883a 	mov	r6,r4
    3290:	180b883a 	mov	r5,r3
    3294:	1009883a 	mov	r4,r2
    3298:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(dequals);
    329c:	00800f04 	movi	r2,60
    32a0:	10bfffcc 	andi	r2,r2,65535
    32a4:	d0e0b617 	ldw	r3,-32040(gp)
    32a8:	0009883a 	mov	r4,zero
    32ac:	21003fcc 	andi	r4,r4,255
    32b0:	01c00034 	movhi	r7,0
    32b4:	39c86004 	addi	r7,r7,8576
    32b8:	200d883a 	mov	r6,r4
    32bc:	180b883a 	mov	r5,r3
    32c0:	1009883a 	mov	r4,r2
    32c4:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(dsmaller);
    32c8:	00800f44 	movi	r2,61
    32cc:	10bfffcc 	andi	r2,r2,65535
    32d0:	d0e0b917 	ldw	r3,-32028(gp)
    32d4:	0009883a 	mov	r4,zero
    32d8:	21003fcc 	andi	r4,r4,255
    32dc:	01c00034 	movhi	r7,0
    32e0:	39c87604 	addi	r7,r7,8664
    32e4:	200d883a 	mov	r6,r4
    32e8:	180b883a 	mov	r5,r3
    32ec:	1009883a 	mov	r4,r2
    32f0:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(dlarger);
    32f4:	00800f84 	movi	r2,62
    32f8:	10bfffcc 	andi	r2,r2,65535
    32fc:	d0e0bc17 	ldw	r3,-32016(gp)
    3300:	0009883a 	mov	r4,zero
    3304:	21003fcc 	andi	r4,r4,255
    3308:	01c00034 	movhi	r7,0
    330c:	39c88c04 	addi	r7,r7,8752
    3310:	200d883a 	mov	r6,r4
    3314:	180b883a 	mov	r5,r3
    3318:	1009883a 	mov	r4,r2
    331c:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(dusmaller);
    3320:	00800fc4 	movi	r2,63
    3324:	10bfffcc 	andi	r2,r2,65535
    3328:	d0e0bf17 	ldw	r3,-32004(gp)
    332c:	0009883a 	mov	r4,zero
    3330:	21003fcc 	andi	r4,r4,255
    3334:	01c00034 	movhi	r7,0
    3338:	39c8a204 	addi	r7,r7,8840
    333c:	200d883a 	mov	r6,r4
    3340:	180b883a 	mov	r5,r3
    3344:	1009883a 	mov	r4,r2
    3348:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(dplus);
    334c:	00801004 	movi	r2,64
    3350:	10bfffcc 	andi	r2,r2,65535
    3354:	d0e0c217 	ldw	r3,-31992(gp)
    3358:	0009883a 	mov	r4,zero
    335c:	21003fcc 	andi	r4,r4,255
    3360:	01c00034 	movhi	r7,0
    3364:	39c8b804 	addi	r7,r7,8928
    3368:	200d883a 	mov	r6,r4
    336c:	180b883a 	mov	r5,r3
    3370:	1009883a 	mov	r4,r2
    3374:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(dminus);
    3378:	00801044 	movi	r2,65
    337c:	10bfffcc 	andi	r2,r2,65535
    3380:	d0e0c517 	ldw	r3,-31980(gp)
    3384:	0009883a 	mov	r4,zero
    3388:	21003fcc 	andi	r4,r4,255
    338c:	01c00034 	movhi	r7,0
    3390:	39c8cb04 	addi	r7,r7,9004
    3394:	200d883a 	mov	r6,r4
    3398:	180b883a 	mov	r5,r3
    339c:	1009883a 	mov	r4,r2
    33a0:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(dmul);
    33a4:	00801084 	movi	r2,66
    33a8:	10bfffcc 	andi	r2,r2,65535
    33ac:	d0e0c817 	ldw	r3,-31968(gp)
    33b0:	0009883a 	mov	r4,zero
    33b4:	21003fcc 	andi	r4,r4,255
    33b8:	01c00034 	movhi	r7,0
    33bc:	39c8de04 	addi	r7,r7,9080
    33c0:	200d883a 	mov	r6,r4
    33c4:	180b883a 	mov	r5,r3
    33c8:	1009883a 	mov	r4,r2
    33cc:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(ddiv);
    33d0:	008010c4 	movi	r2,67
    33d4:	10bfffcc 	andi	r2,r2,65535
    33d8:	d0e0cb17 	ldw	r3,-31956(gp)
    33dc:	0009883a 	mov	r4,zero
    33e0:	21003fcc 	andi	r4,r4,255
    33e4:	01c00034 	movhi	r7,0
    33e8:	39c8f104 	addi	r7,r7,9156
    33ec:	200d883a 	mov	r6,r4
    33f0:	180b883a 	mov	r5,r3
    33f4:	1009883a 	mov	r4,r2
    33f8:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(dswap);
    33fc:	00801104 	movi	r2,68
    3400:	10bfffcc 	andi	r2,r2,65535
    3404:	d0e0ce17 	ldw	r3,-31944(gp)
    3408:	0009883a 	mov	r4,zero
    340c:	21003fcc 	andi	r4,r4,255
    3410:	01c00034 	movhi	r7,0
    3414:	39c90404 	addi	r7,r7,9232
    3418:	200d883a 	mov	r6,r4
    341c:	180b883a 	mov	r5,r3
    3420:	1009883a 	mov	r4,r2
    3424:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(dover);
    3428:	00801144 	movi	r2,69
    342c:	10bfffcc 	andi	r2,r2,65535
    3430:	d0e0d117 	ldw	r3,-31932(gp)
    3434:	0009883a 	mov	r4,zero
    3438:	21003fcc 	andi	r4,r4,255
    343c:	01c00034 	movhi	r7,0
    3440:	39c91604 	addi	r7,r7,9304
    3444:	200d883a 	mov	r6,r4
    3448:	180b883a 	mov	r5,r3
    344c:	1009883a 	mov	r4,r2
    3450:	000264c0 	call	264c <addBuiltin>
    ADD_BUILTIN(drot);
    3454:	00801184 	movi	r2,70
    3458:	10bfffcc 	andi	r2,r2,65535
    345c:	d0e0d417 	ldw	r3,-31920(gp)
    3460:	0009883a 	mov	r4,zero
    3464:	21003fcc 	andi	r4,r4,255
    3468:	01c00034 	movhi	r7,0
    346c:	39c92a04 	addi	r7,r7,9384
    3470:	200d883a 	mov	r6,r4
    3474:	180b883a 	mov	r5,r3
    3478:	1009883a 	mov	r4,r2
    347c:	000264c0 	call	264c <addBuiltin>

    maxBuiltinAddress = (*here) - 1;
    3480:	d0a45217 	ldw	r2,-28344(gp)
    3484:	1080000b 	ldhu	r2,0(r2)
    3488:	10bfffc4 	addi	r2,r2,-1
    348c:	d0a4530d 	sth	r2,-28340(gp)

    if (errorFlag) return 1;
    3490:	d0a44a17 	ldw	r2,-28376(gp)
    3494:	10000226 	beq	r2,zero,34a0 <main+0xd20>
    3498:	00800044 	movi	r2,1
    349c:	00000406 	br	34b0 <main+0xd30>

    initscript_pos = (char*)initScript;
    34a0:	d0a00017 	ldw	r2,-32768(gp)
    34a4:	d0a45115 	stw	r2,-28348(gp)
    quit();
    34a8:	00015ec0 	call	15ec <quit>
    return 0;
    34ac:	0005883a 	mov	r2,zero
}
    34b0:	e037883a 	mov	sp,fp
    34b4:	dfc00117 	ldw	ra,4(sp)
    34b8:	df000017 	ldw	fp,0(sp)
    34bc:	dec00204 	addi	sp,sp,8
    34c0:	f800283a 	ret

000034c4 <__divsi3>:
    34c4:	20001b16 	blt	r4,zero,3534 <__divsi3+0x70>
    34c8:	000f883a 	mov	r7,zero
    34cc:	28001616 	blt	r5,zero,3528 <__divsi3+0x64>
    34d0:	200d883a 	mov	r6,r4
    34d4:	29001a2e 	bgeu	r5,r4,3540 <__divsi3+0x7c>
    34d8:	00800804 	movi	r2,32
    34dc:	00c00044 	movi	r3,1
    34e0:	00000106 	br	34e8 <__divsi3+0x24>
    34e4:	10000d26 	beq	r2,zero,351c <__divsi3+0x58>
    34e8:	294b883a 	add	r5,r5,r5
    34ec:	10bfffc4 	addi	r2,r2,-1
    34f0:	18c7883a 	add	r3,r3,r3
    34f4:	293ffb36 	bltu	r5,r4,34e4 <__ram_exceptions_end+0xfe0014c4>
    34f8:	0005883a 	mov	r2,zero
    34fc:	18000726 	beq	r3,zero,351c <__divsi3+0x58>
    3500:	0005883a 	mov	r2,zero
    3504:	31400236 	bltu	r6,r5,3510 <__divsi3+0x4c>
    3508:	314dc83a 	sub	r6,r6,r5
    350c:	10c4b03a 	or	r2,r2,r3
    3510:	1806d07a 	srli	r3,r3,1
    3514:	280ad07a 	srli	r5,r5,1
    3518:	183ffa1e 	bne	r3,zero,3504 <__ram_exceptions_end+0xfe0014e4>
    351c:	38000126 	beq	r7,zero,3524 <__divsi3+0x60>
    3520:	0085c83a 	sub	r2,zero,r2
    3524:	f800283a 	ret
    3528:	014bc83a 	sub	r5,zero,r5
    352c:	39c0005c 	xori	r7,r7,1
    3530:	003fe706 	br	34d0 <__ram_exceptions_end+0xfe0014b0>
    3534:	0109c83a 	sub	r4,zero,r4
    3538:	01c00044 	movi	r7,1
    353c:	003fe306 	br	34cc <__ram_exceptions_end+0xfe0014ac>
    3540:	00c00044 	movi	r3,1
    3544:	003fee06 	br	3500 <__ram_exceptions_end+0xfe0014e0>

00003548 <__modsi3>:
    3548:	20001716 	blt	r4,zero,35a8 <__modsi3+0x60>
    354c:	000f883a 	mov	r7,zero
    3550:	2005883a 	mov	r2,r4
    3554:	28001216 	blt	r5,zero,35a0 <__modsi3+0x58>
    3558:	2900162e 	bgeu	r5,r4,35b4 <__modsi3+0x6c>
    355c:	01800804 	movi	r6,32
    3560:	00c00044 	movi	r3,1
    3564:	00000106 	br	356c <__modsi3+0x24>
    3568:	30000a26 	beq	r6,zero,3594 <__modsi3+0x4c>
    356c:	294b883a 	add	r5,r5,r5
    3570:	31bfffc4 	addi	r6,r6,-1
    3574:	18c7883a 	add	r3,r3,r3
    3578:	293ffb36 	bltu	r5,r4,3568 <__ram_exceptions_end+0xfe001548>
    357c:	18000526 	beq	r3,zero,3594 <__modsi3+0x4c>
    3580:	1806d07a 	srli	r3,r3,1
    3584:	11400136 	bltu	r2,r5,358c <__modsi3+0x44>
    3588:	1145c83a 	sub	r2,r2,r5
    358c:	280ad07a 	srli	r5,r5,1
    3590:	183ffb1e 	bne	r3,zero,3580 <__ram_exceptions_end+0xfe001560>
    3594:	38000126 	beq	r7,zero,359c <__modsi3+0x54>
    3598:	0085c83a 	sub	r2,zero,r2
    359c:	f800283a 	ret
    35a0:	014bc83a 	sub	r5,zero,r5
    35a4:	003fec06 	br	3558 <__ram_exceptions_end+0xfe001538>
    35a8:	0109c83a 	sub	r4,zero,r4
    35ac:	01c00044 	movi	r7,1
    35b0:	003fe706 	br	3550 <__ram_exceptions_end+0xfe001530>
    35b4:	00c00044 	movi	r3,1
    35b8:	003ff106 	br	3580 <__ram_exceptions_end+0xfe001560>

000035bc <__udivsi3>:
    35bc:	200d883a 	mov	r6,r4
    35c0:	2900152e 	bgeu	r5,r4,3618 <__udivsi3+0x5c>
    35c4:	28001416 	blt	r5,zero,3618 <__udivsi3+0x5c>
    35c8:	00800804 	movi	r2,32
    35cc:	00c00044 	movi	r3,1
    35d0:	00000206 	br	35dc <__udivsi3+0x20>
    35d4:	10000e26 	beq	r2,zero,3610 <__udivsi3+0x54>
    35d8:	28000516 	blt	r5,zero,35f0 <__udivsi3+0x34>
    35dc:	294b883a 	add	r5,r5,r5
    35e0:	10bfffc4 	addi	r2,r2,-1
    35e4:	18c7883a 	add	r3,r3,r3
    35e8:	293ffa36 	bltu	r5,r4,35d4 <__ram_exceptions_end+0xfe0015b4>
    35ec:	18000826 	beq	r3,zero,3610 <__udivsi3+0x54>
    35f0:	0005883a 	mov	r2,zero
    35f4:	31400236 	bltu	r6,r5,3600 <__udivsi3+0x44>
    35f8:	314dc83a 	sub	r6,r6,r5
    35fc:	10c4b03a 	or	r2,r2,r3
    3600:	1806d07a 	srli	r3,r3,1
    3604:	280ad07a 	srli	r5,r5,1
    3608:	183ffa1e 	bne	r3,zero,35f4 <__ram_exceptions_end+0xfe0015d4>
    360c:	f800283a 	ret
    3610:	0005883a 	mov	r2,zero
    3614:	f800283a 	ret
    3618:	00c00044 	movi	r3,1
    361c:	003ff406 	br	35f0 <__ram_exceptions_end+0xfe0015d0>

00003620 <__umodsi3>:
    3620:	2005883a 	mov	r2,r4
    3624:	2900122e 	bgeu	r5,r4,3670 <__umodsi3+0x50>
    3628:	28001116 	blt	r5,zero,3670 <__umodsi3+0x50>
    362c:	01800804 	movi	r6,32
    3630:	00c00044 	movi	r3,1
    3634:	00000206 	br	3640 <__umodsi3+0x20>
    3638:	30000c26 	beq	r6,zero,366c <__umodsi3+0x4c>
    363c:	28000516 	blt	r5,zero,3654 <__umodsi3+0x34>
    3640:	294b883a 	add	r5,r5,r5
    3644:	31bfffc4 	addi	r6,r6,-1
    3648:	18c7883a 	add	r3,r3,r3
    364c:	293ffa36 	bltu	r5,r4,3638 <__ram_exceptions_end+0xfe001618>
    3650:	18000626 	beq	r3,zero,366c <__umodsi3+0x4c>
    3654:	1806d07a 	srli	r3,r3,1
    3658:	11400136 	bltu	r2,r5,3660 <__umodsi3+0x40>
    365c:	1145c83a 	sub	r2,r2,r5
    3660:	280ad07a 	srli	r5,r5,1
    3664:	183ffb1e 	bne	r3,zero,3654 <__ram_exceptions_end+0xfe001634>
    3668:	f800283a 	ret
    366c:	f800283a 	ret
    3670:	00c00044 	movi	r3,1
    3674:	003ff706 	br	3654 <__ram_exceptions_end+0xfe001634>

00003678 <__mulsi3>:
    3678:	0005883a 	mov	r2,zero
    367c:	20000726 	beq	r4,zero,369c <__mulsi3+0x24>
    3680:	20c0004c 	andi	r3,r4,1
    3684:	2008d07a 	srli	r4,r4,1
    3688:	18000126 	beq	r3,zero,3690 <__mulsi3+0x18>
    368c:	1145883a 	add	r2,r2,r5
    3690:	294b883a 	add	r5,r5,r5
    3694:	203ffa1e 	bne	r4,zero,3680 <__ram_exceptions_end+0xfe001660>
    3698:	f800283a 	ret
    369c:	f800283a 	ret

000036a0 <_getc_r>:
    36a0:	defffd04 	addi	sp,sp,-12
    36a4:	dc000115 	stw	r16,4(sp)
    36a8:	dfc00215 	stw	ra,8(sp)
    36ac:	2021883a 	mov	r16,r4
    36b0:	20000226 	beq	r4,zero,36bc <_getc_r+0x1c>
    36b4:	20800e17 	ldw	r2,56(r4)
    36b8:	10000c26 	beq	r2,zero,36ec <_getc_r+0x4c>
    36bc:	28800117 	ldw	r2,4(r5)
    36c0:	10bfffc4 	addi	r2,r2,-1
    36c4:	28800115 	stw	r2,4(r5)
    36c8:	10000c16 	blt	r2,zero,36fc <_getc_r+0x5c>
    36cc:	28800017 	ldw	r2,0(r5)
    36d0:	10c00044 	addi	r3,r2,1
    36d4:	28c00015 	stw	r3,0(r5)
    36d8:	10800003 	ldbu	r2,0(r2)
    36dc:	dfc00217 	ldw	ra,8(sp)
    36e0:	dc000117 	ldw	r16,4(sp)
    36e4:	dec00304 	addi	sp,sp,12
    36e8:	f800283a 	ret
    36ec:	d9400015 	stw	r5,0(sp)
    36f0:	000423c0 	call	423c <__sinit>
    36f4:	d9400017 	ldw	r5,0(sp)
    36f8:	003ff006 	br	36bc <__ram_exceptions_end+0xfe00169c>
    36fc:	8009883a 	mov	r4,r16
    3700:	dfc00217 	ldw	ra,8(sp)
    3704:	dc000117 	ldw	r16,4(sp)
    3708:	dec00304 	addi	sp,sp,12
    370c:	00039001 	jmpi	3900 <__srget_r>

00003710 <getc>:
    3710:	00800074 	movhi	r2,1
    3714:	defffd04 	addi	sp,sp,-12
    3718:	10a17104 	addi	r2,r2,-31292
    371c:	dc400115 	stw	r17,4(sp)
    3720:	14400017 	ldw	r17,0(r2)
    3724:	dc000015 	stw	r16,0(sp)
    3728:	dfc00215 	stw	ra,8(sp)
    372c:	2021883a 	mov	r16,r4
    3730:	88000226 	beq	r17,zero,373c <getc+0x2c>
    3734:	88800e17 	ldw	r2,56(r17)
    3738:	10000d26 	beq	r2,zero,3770 <getc+0x60>
    373c:	80800117 	ldw	r2,4(r16)
    3740:	10bfffc4 	addi	r2,r2,-1
    3744:	80800115 	stw	r2,4(r16)
    3748:	10000c16 	blt	r2,zero,377c <getc+0x6c>
    374c:	80800017 	ldw	r2,0(r16)
    3750:	10c00044 	addi	r3,r2,1
    3754:	80c00015 	stw	r3,0(r16)
    3758:	10800003 	ldbu	r2,0(r2)
    375c:	dfc00217 	ldw	ra,8(sp)
    3760:	dc400117 	ldw	r17,4(sp)
    3764:	dc000017 	ldw	r16,0(sp)
    3768:	dec00304 	addi	sp,sp,12
    376c:	f800283a 	ret
    3770:	8809883a 	mov	r4,r17
    3774:	000423c0 	call	423c <__sinit>
    3778:	003ff006 	br	373c <__ram_exceptions_end+0xfe00171c>
    377c:	800b883a 	mov	r5,r16
    3780:	8809883a 	mov	r4,r17
    3784:	dfc00217 	ldw	ra,8(sp)
    3788:	dc400117 	ldw	r17,4(sp)
    378c:	dc000017 	ldw	r16,0(sp)
    3790:	dec00304 	addi	sp,sp,12
    3794:	00039001 	jmpi	3900 <__srget_r>

00003798 <_putc_r>:
    3798:	defffc04 	addi	sp,sp,-16
    379c:	dc000215 	stw	r16,8(sp)
    37a0:	dfc00315 	stw	ra,12(sp)
    37a4:	2021883a 	mov	r16,r4
    37a8:	20000226 	beq	r4,zero,37b4 <_putc_r+0x1c>
    37ac:	20800e17 	ldw	r2,56(r4)
    37b0:	10001b26 	beq	r2,zero,3820 <_putc_r+0x88>
    37b4:	30800217 	ldw	r2,8(r6)
    37b8:	10bfffc4 	addi	r2,r2,-1
    37bc:	30800215 	stw	r2,8(r6)
    37c0:	10000a16 	blt	r2,zero,37ec <_putc_r+0x54>
    37c4:	30800017 	ldw	r2,0(r6)
    37c8:	11400005 	stb	r5,0(r2)
    37cc:	30800017 	ldw	r2,0(r6)
    37d0:	10c00044 	addi	r3,r2,1
    37d4:	30c00015 	stw	r3,0(r6)
    37d8:	10800003 	ldbu	r2,0(r2)
    37dc:	dfc00317 	ldw	ra,12(sp)
    37e0:	dc000217 	ldw	r16,8(sp)
    37e4:	dec00404 	addi	sp,sp,16
    37e8:	f800283a 	ret
    37ec:	30c00617 	ldw	r3,24(r6)
    37f0:	10c00616 	blt	r2,r3,380c <_putc_r+0x74>
    37f4:	30800017 	ldw	r2,0(r6)
    37f8:	00c00284 	movi	r3,10
    37fc:	11400005 	stb	r5,0(r2)
    3800:	30800017 	ldw	r2,0(r6)
    3804:	11400003 	ldbu	r5,0(r2)
    3808:	28fff11e 	bne	r5,r3,37d0 <__ram_exceptions_end+0xfe0017b0>
    380c:	8009883a 	mov	r4,r16
    3810:	dfc00317 	ldw	ra,12(sp)
    3814:	dc000217 	ldw	r16,8(sp)
    3818:	dec00404 	addi	sp,sp,16
    381c:	00039881 	jmpi	3988 <__swbuf_r>
    3820:	d9400015 	stw	r5,0(sp)
    3824:	d9800115 	stw	r6,4(sp)
    3828:	000423c0 	call	423c <__sinit>
    382c:	d9800117 	ldw	r6,4(sp)
    3830:	d9400017 	ldw	r5,0(sp)
    3834:	003fdf06 	br	37b4 <__ram_exceptions_end+0xfe001794>

00003838 <putc>:
    3838:	00800074 	movhi	r2,1
    383c:	defffc04 	addi	sp,sp,-16
    3840:	10a17104 	addi	r2,r2,-31292
    3844:	dc000115 	stw	r16,4(sp)
    3848:	14000017 	ldw	r16,0(r2)
    384c:	dc400215 	stw	r17,8(sp)
    3850:	dfc00315 	stw	ra,12(sp)
    3854:	2023883a 	mov	r17,r4
    3858:	80000226 	beq	r16,zero,3864 <putc+0x2c>
    385c:	80800e17 	ldw	r2,56(r16)
    3860:	10001a26 	beq	r2,zero,38cc <putc+0x94>
    3864:	28800217 	ldw	r2,8(r5)
    3868:	10bfffc4 	addi	r2,r2,-1
    386c:	28800215 	stw	r2,8(r5)
    3870:	10000b16 	blt	r2,zero,38a0 <putc+0x68>
    3874:	28800017 	ldw	r2,0(r5)
    3878:	14400005 	stb	r17,0(r2)
    387c:	28800017 	ldw	r2,0(r5)
    3880:	10c00044 	addi	r3,r2,1
    3884:	28c00015 	stw	r3,0(r5)
    3888:	10800003 	ldbu	r2,0(r2)
    388c:	dfc00317 	ldw	ra,12(sp)
    3890:	dc400217 	ldw	r17,8(sp)
    3894:	dc000117 	ldw	r16,4(sp)
    3898:	dec00404 	addi	sp,sp,16
    389c:	f800283a 	ret
    38a0:	28c00617 	ldw	r3,24(r5)
    38a4:	10c00e16 	blt	r2,r3,38e0 <putc+0xa8>
    38a8:	28800017 	ldw	r2,0(r5)
    38ac:	01000284 	movi	r4,10
    38b0:	14400005 	stb	r17,0(r2)
    38b4:	28800017 	ldw	r2,0(r5)
    38b8:	10c00003 	ldbu	r3,0(r2)
    38bc:	193ff01e 	bne	r3,r4,3880 <__ram_exceptions_end+0xfe001860>
    38c0:	280d883a 	mov	r6,r5
    38c4:	180b883a 	mov	r5,r3
    38c8:	00000706 	br	38e8 <putc+0xb0>
    38cc:	8009883a 	mov	r4,r16
    38d0:	d9400015 	stw	r5,0(sp)
    38d4:	000423c0 	call	423c <__sinit>
    38d8:	d9400017 	ldw	r5,0(sp)
    38dc:	003fe106 	br	3864 <__ram_exceptions_end+0xfe001844>
    38e0:	280d883a 	mov	r6,r5
    38e4:	880b883a 	mov	r5,r17
    38e8:	8009883a 	mov	r4,r16
    38ec:	dfc00317 	ldw	ra,12(sp)
    38f0:	dc400217 	ldw	r17,8(sp)
    38f4:	dc000117 	ldw	r16,4(sp)
    38f8:	dec00404 	addi	sp,sp,16
    38fc:	00039881 	jmpi	3988 <__swbuf_r>

00003900 <__srget_r>:
    3900:	defffd04 	addi	sp,sp,-12
    3904:	dc400115 	stw	r17,4(sp)
    3908:	dc000015 	stw	r16,0(sp)
    390c:	dfc00215 	stw	ra,8(sp)
    3910:	2023883a 	mov	r17,r4
    3914:	2821883a 	mov	r16,r5
    3918:	20000226 	beq	r4,zero,3924 <__srget_r+0x24>
    391c:	20800e17 	ldw	r2,56(r4)
    3920:	10001026 	beq	r2,zero,3964 <__srget_r+0x64>
    3924:	800b883a 	mov	r5,r16
    3928:	8809883a 	mov	r4,r17
    392c:	00053540 	call	5354 <__srefill_r>
    3930:	10000e1e 	bne	r2,zero,396c <__srget_r+0x6c>
    3934:	80c00017 	ldw	r3,0(r16)
    3938:	80800117 	ldw	r2,4(r16)
    393c:	19000044 	addi	r4,r3,1
    3940:	10bfffc4 	addi	r2,r2,-1
    3944:	80800115 	stw	r2,4(r16)
    3948:	81000015 	stw	r4,0(r16)
    394c:	18800003 	ldbu	r2,0(r3)
    3950:	dfc00217 	ldw	ra,8(sp)
    3954:	dc400117 	ldw	r17,4(sp)
    3958:	dc000017 	ldw	r16,0(sp)
    395c:	dec00304 	addi	sp,sp,12
    3960:	f800283a 	ret
    3964:	000423c0 	call	423c <__sinit>
    3968:	003fee06 	br	3924 <__ram_exceptions_end+0xfe001904>
    396c:	00bfffc4 	movi	r2,-1
    3970:	003ff706 	br	3950 <__ram_exceptions_end+0xfe001930>

00003974 <__srget>:
    3974:	00800074 	movhi	r2,1
    3978:	10a17104 	addi	r2,r2,-31292
    397c:	200b883a 	mov	r5,r4
    3980:	11000017 	ldw	r4,0(r2)
    3984:	00039001 	jmpi	3900 <__srget_r>

00003988 <__swbuf_r>:
    3988:	defffb04 	addi	sp,sp,-20
    398c:	dcc00315 	stw	r19,12(sp)
    3990:	dc800215 	stw	r18,8(sp)
    3994:	dc000015 	stw	r16,0(sp)
    3998:	dfc00415 	stw	ra,16(sp)
    399c:	dc400115 	stw	r17,4(sp)
    39a0:	2025883a 	mov	r18,r4
    39a4:	2827883a 	mov	r19,r5
    39a8:	3021883a 	mov	r16,r6
    39ac:	20000226 	beq	r4,zero,39b8 <__swbuf_r+0x30>
    39b0:	20800e17 	ldw	r2,56(r4)
    39b4:	10004226 	beq	r2,zero,3ac0 <__swbuf_r+0x138>
    39b8:	80800617 	ldw	r2,24(r16)
    39bc:	8100030b 	ldhu	r4,12(r16)
    39c0:	80800215 	stw	r2,8(r16)
    39c4:	2080020c 	andi	r2,r4,8
    39c8:	10003626 	beq	r2,zero,3aa4 <__swbuf_r+0x11c>
    39cc:	80c00417 	ldw	r3,16(r16)
    39d0:	18003426 	beq	r3,zero,3aa4 <__swbuf_r+0x11c>
    39d4:	2088000c 	andi	r2,r4,8192
    39d8:	9c403fcc 	andi	r17,r19,255
    39dc:	10001a26 	beq	r2,zero,3a48 <__swbuf_r+0xc0>
    39e0:	80800017 	ldw	r2,0(r16)
    39e4:	81000517 	ldw	r4,20(r16)
    39e8:	10c7c83a 	sub	r3,r2,r3
    39ec:	1900200e 	bge	r3,r4,3a70 <__swbuf_r+0xe8>
    39f0:	18c00044 	addi	r3,r3,1
    39f4:	81000217 	ldw	r4,8(r16)
    39f8:	11400044 	addi	r5,r2,1
    39fc:	81400015 	stw	r5,0(r16)
    3a00:	213fffc4 	addi	r4,r4,-1
    3a04:	81000215 	stw	r4,8(r16)
    3a08:	14c00005 	stb	r19,0(r2)
    3a0c:	80800517 	ldw	r2,20(r16)
    3a10:	10c01e26 	beq	r2,r3,3a8c <__swbuf_r+0x104>
    3a14:	8080030b 	ldhu	r2,12(r16)
    3a18:	1080004c 	andi	r2,r2,1
    3a1c:	10000226 	beq	r2,zero,3a28 <__swbuf_r+0xa0>
    3a20:	00800284 	movi	r2,10
    3a24:	88801926 	beq	r17,r2,3a8c <__swbuf_r+0x104>
    3a28:	8805883a 	mov	r2,r17
    3a2c:	dfc00417 	ldw	ra,16(sp)
    3a30:	dcc00317 	ldw	r19,12(sp)
    3a34:	dc800217 	ldw	r18,8(sp)
    3a38:	dc400117 	ldw	r17,4(sp)
    3a3c:	dc000017 	ldw	r16,0(sp)
    3a40:	dec00504 	addi	sp,sp,20
    3a44:	f800283a 	ret
    3a48:	81401917 	ldw	r5,100(r16)
    3a4c:	00b7ffc4 	movi	r2,-8193
    3a50:	21080014 	ori	r4,r4,8192
    3a54:	2884703a 	and	r2,r5,r2
    3a58:	80801915 	stw	r2,100(r16)
    3a5c:	80800017 	ldw	r2,0(r16)
    3a60:	8100030d 	sth	r4,12(r16)
    3a64:	81000517 	ldw	r4,20(r16)
    3a68:	10c7c83a 	sub	r3,r2,r3
    3a6c:	193fe016 	blt	r3,r4,39f0 <__ram_exceptions_end+0xfe0019d0>
    3a70:	800b883a 	mov	r5,r16
    3a74:	9009883a 	mov	r4,r18
    3a78:	0003e500 	call	3e50 <_fflush_r>
    3a7c:	1000071e 	bne	r2,zero,3a9c <__swbuf_r+0x114>
    3a80:	80800017 	ldw	r2,0(r16)
    3a84:	00c00044 	movi	r3,1
    3a88:	003fda06 	br	39f4 <__ram_exceptions_end+0xfe0019d4>
    3a8c:	800b883a 	mov	r5,r16
    3a90:	9009883a 	mov	r4,r18
    3a94:	0003e500 	call	3e50 <_fflush_r>
    3a98:	103fe326 	beq	r2,zero,3a28 <__ram_exceptions_end+0xfe001a08>
    3a9c:	00bfffc4 	movi	r2,-1
    3aa0:	003fe206 	br	3a2c <__ram_exceptions_end+0xfe001a0c>
    3aa4:	800b883a 	mov	r5,r16
    3aa8:	9009883a 	mov	r4,r18
    3aac:	0003ae00 	call	3ae0 <__swsetup_r>
    3ab0:	103ffa1e 	bne	r2,zero,3a9c <__ram_exceptions_end+0xfe001a7c>
    3ab4:	8100030b 	ldhu	r4,12(r16)
    3ab8:	80c00417 	ldw	r3,16(r16)
    3abc:	003fc506 	br	39d4 <__ram_exceptions_end+0xfe0019b4>
    3ac0:	000423c0 	call	423c <__sinit>
    3ac4:	003fbc06 	br	39b8 <__ram_exceptions_end+0xfe001998>

00003ac8 <__swbuf>:
    3ac8:	00800074 	movhi	r2,1
    3acc:	10a17104 	addi	r2,r2,-31292
    3ad0:	280d883a 	mov	r6,r5
    3ad4:	200b883a 	mov	r5,r4
    3ad8:	11000017 	ldw	r4,0(r2)
    3adc:	00039881 	jmpi	3988 <__swbuf_r>

00003ae0 <__swsetup_r>:
    3ae0:	00800074 	movhi	r2,1
    3ae4:	defffd04 	addi	sp,sp,-12
    3ae8:	10a17104 	addi	r2,r2,-31292
    3aec:	dc400115 	stw	r17,4(sp)
    3af0:	2023883a 	mov	r17,r4
    3af4:	11000017 	ldw	r4,0(r2)
    3af8:	dc000015 	stw	r16,0(sp)
    3afc:	dfc00215 	stw	ra,8(sp)
    3b00:	2821883a 	mov	r16,r5
    3b04:	20000226 	beq	r4,zero,3b10 <__swsetup_r+0x30>
    3b08:	20800e17 	ldw	r2,56(r4)
    3b0c:	10003126 	beq	r2,zero,3bd4 <__swsetup_r+0xf4>
    3b10:	8080030b 	ldhu	r2,12(r16)
    3b14:	10c0020c 	andi	r3,r2,8
    3b18:	1009883a 	mov	r4,r2
    3b1c:	18000f26 	beq	r3,zero,3b5c <__swsetup_r+0x7c>
    3b20:	80c00417 	ldw	r3,16(r16)
    3b24:	18001526 	beq	r3,zero,3b7c <__swsetup_r+0x9c>
    3b28:	1100004c 	andi	r4,r2,1
    3b2c:	20001c1e 	bne	r4,zero,3ba0 <__swsetup_r+0xc0>
    3b30:	1080008c 	andi	r2,r2,2
    3b34:	1000291e 	bne	r2,zero,3bdc <__swsetup_r+0xfc>
    3b38:	80800517 	ldw	r2,20(r16)
    3b3c:	80800215 	stw	r2,8(r16)
    3b40:	18001c26 	beq	r3,zero,3bb4 <__swsetup_r+0xd4>
    3b44:	0005883a 	mov	r2,zero
    3b48:	dfc00217 	ldw	ra,8(sp)
    3b4c:	dc400117 	ldw	r17,4(sp)
    3b50:	dc000017 	ldw	r16,0(sp)
    3b54:	dec00304 	addi	sp,sp,12
    3b58:	f800283a 	ret
    3b5c:	2080040c 	andi	r2,r4,16
    3b60:	10002e26 	beq	r2,zero,3c1c <__swsetup_r+0x13c>
    3b64:	2080010c 	andi	r2,r4,4
    3b68:	10001e1e 	bne	r2,zero,3be4 <__swsetup_r+0x104>
    3b6c:	80c00417 	ldw	r3,16(r16)
    3b70:	20800214 	ori	r2,r4,8
    3b74:	8080030d 	sth	r2,12(r16)
    3b78:	183feb1e 	bne	r3,zero,3b28 <__ram_exceptions_end+0xfe001b08>
    3b7c:	1100a00c 	andi	r4,r2,640
    3b80:	01408004 	movi	r5,512
    3b84:	217fe826 	beq	r4,r5,3b28 <__ram_exceptions_end+0xfe001b08>
    3b88:	800b883a 	mov	r5,r16
    3b8c:	8809883a 	mov	r4,r17
    3b90:	00048480 	call	4848 <__smakebuf_r>
    3b94:	8080030b 	ldhu	r2,12(r16)
    3b98:	80c00417 	ldw	r3,16(r16)
    3b9c:	003fe206 	br	3b28 <__ram_exceptions_end+0xfe001b08>
    3ba0:	80800517 	ldw	r2,20(r16)
    3ba4:	80000215 	stw	zero,8(r16)
    3ba8:	0085c83a 	sub	r2,zero,r2
    3bac:	80800615 	stw	r2,24(r16)
    3bb0:	183fe41e 	bne	r3,zero,3b44 <__ram_exceptions_end+0xfe001b24>
    3bb4:	80c0030b 	ldhu	r3,12(r16)
    3bb8:	0005883a 	mov	r2,zero
    3bbc:	1900200c 	andi	r4,r3,128
    3bc0:	203fe126 	beq	r4,zero,3b48 <__ram_exceptions_end+0xfe001b28>
    3bc4:	18c01014 	ori	r3,r3,64
    3bc8:	80c0030d 	sth	r3,12(r16)
    3bcc:	00bfffc4 	movi	r2,-1
    3bd0:	003fdd06 	br	3b48 <__ram_exceptions_end+0xfe001b28>
    3bd4:	000423c0 	call	423c <__sinit>
    3bd8:	003fcd06 	br	3b10 <__ram_exceptions_end+0xfe001af0>
    3bdc:	0005883a 	mov	r2,zero
    3be0:	003fd606 	br	3b3c <__ram_exceptions_end+0xfe001b1c>
    3be4:	81400c17 	ldw	r5,48(r16)
    3be8:	28000626 	beq	r5,zero,3c04 <__swsetup_r+0x124>
    3bec:	80801004 	addi	r2,r16,64
    3bf0:	28800326 	beq	r5,r2,3c00 <__swsetup_r+0x120>
    3bf4:	8809883a 	mov	r4,r17
    3bf8:	00043b00 	call	43b0 <_free_r>
    3bfc:	8100030b 	ldhu	r4,12(r16)
    3c00:	80000c15 	stw	zero,48(r16)
    3c04:	80c00417 	ldw	r3,16(r16)
    3c08:	00bff6c4 	movi	r2,-37
    3c0c:	1108703a 	and	r4,r2,r4
    3c10:	80000115 	stw	zero,4(r16)
    3c14:	80c00015 	stw	r3,0(r16)
    3c18:	003fd506 	br	3b70 <__ram_exceptions_end+0xfe001b50>
    3c1c:	00800244 	movi	r2,9
    3c20:	88800015 	stw	r2,0(r17)
    3c24:	20801014 	ori	r2,r4,64
    3c28:	8080030d 	sth	r2,12(r16)
    3c2c:	00bfffc4 	movi	r2,-1
    3c30:	003fc506 	br	3b48 <__ram_exceptions_end+0xfe001b28>

00003c34 <__sflush_r>:
    3c34:	2880030b 	ldhu	r2,12(r5)
    3c38:	defffb04 	addi	sp,sp,-20
    3c3c:	dcc00315 	stw	r19,12(sp)
    3c40:	dc400115 	stw	r17,4(sp)
    3c44:	dfc00415 	stw	ra,16(sp)
    3c48:	dc800215 	stw	r18,8(sp)
    3c4c:	dc000015 	stw	r16,0(sp)
    3c50:	10c0020c 	andi	r3,r2,8
    3c54:	2823883a 	mov	r17,r5
    3c58:	2027883a 	mov	r19,r4
    3c5c:	1800311e 	bne	r3,zero,3d24 <__sflush_r+0xf0>
    3c60:	28c00117 	ldw	r3,4(r5)
    3c64:	10820014 	ori	r2,r2,2048
    3c68:	2880030d 	sth	r2,12(r5)
    3c6c:	00c04b0e 	bge	zero,r3,3d9c <__sflush_r+0x168>
    3c70:	8a000a17 	ldw	r8,40(r17)
    3c74:	40002326 	beq	r8,zero,3d04 <__sflush_r+0xd0>
    3c78:	9c000017 	ldw	r16,0(r19)
    3c7c:	10c4000c 	andi	r3,r2,4096
    3c80:	98000015 	stw	zero,0(r19)
    3c84:	18004826 	beq	r3,zero,3da8 <__sflush_r+0x174>
    3c88:	89801417 	ldw	r6,80(r17)
    3c8c:	10c0010c 	andi	r3,r2,4
    3c90:	18000626 	beq	r3,zero,3cac <__sflush_r+0x78>
    3c94:	88c00117 	ldw	r3,4(r17)
    3c98:	88800c17 	ldw	r2,48(r17)
    3c9c:	30cdc83a 	sub	r6,r6,r3
    3ca0:	10000226 	beq	r2,zero,3cac <__sflush_r+0x78>
    3ca4:	88800f17 	ldw	r2,60(r17)
    3ca8:	308dc83a 	sub	r6,r6,r2
    3cac:	89400717 	ldw	r5,28(r17)
    3cb0:	000f883a 	mov	r7,zero
    3cb4:	9809883a 	mov	r4,r19
    3cb8:	403ee83a 	callr	r8
    3cbc:	00ffffc4 	movi	r3,-1
    3cc0:	10c04426 	beq	r2,r3,3dd4 <__sflush_r+0x1a0>
    3cc4:	88c0030b 	ldhu	r3,12(r17)
    3cc8:	89000417 	ldw	r4,16(r17)
    3ccc:	88000115 	stw	zero,4(r17)
    3cd0:	197dffcc 	andi	r5,r3,63487
    3cd4:	8940030d 	sth	r5,12(r17)
    3cd8:	89000015 	stw	r4,0(r17)
    3cdc:	18c4000c 	andi	r3,r3,4096
    3ce0:	18002c1e 	bne	r3,zero,3d94 <__sflush_r+0x160>
    3ce4:	89400c17 	ldw	r5,48(r17)
    3ce8:	9c000015 	stw	r16,0(r19)
    3cec:	28000526 	beq	r5,zero,3d04 <__sflush_r+0xd0>
    3cf0:	88801004 	addi	r2,r17,64
    3cf4:	28800226 	beq	r5,r2,3d00 <__sflush_r+0xcc>
    3cf8:	9809883a 	mov	r4,r19
    3cfc:	00043b00 	call	43b0 <_free_r>
    3d00:	88000c15 	stw	zero,48(r17)
    3d04:	0005883a 	mov	r2,zero
    3d08:	dfc00417 	ldw	ra,16(sp)
    3d0c:	dcc00317 	ldw	r19,12(sp)
    3d10:	dc800217 	ldw	r18,8(sp)
    3d14:	dc400117 	ldw	r17,4(sp)
    3d18:	dc000017 	ldw	r16,0(sp)
    3d1c:	dec00504 	addi	sp,sp,20
    3d20:	f800283a 	ret
    3d24:	2c800417 	ldw	r18,16(r5)
    3d28:	903ff626 	beq	r18,zero,3d04 <__ram_exceptions_end+0xfe001ce4>
    3d2c:	2c000017 	ldw	r16,0(r5)
    3d30:	108000cc 	andi	r2,r2,3
    3d34:	2c800015 	stw	r18,0(r5)
    3d38:	84a1c83a 	sub	r16,r16,r18
    3d3c:	1000131e 	bne	r2,zero,3d8c <__sflush_r+0x158>
    3d40:	28800517 	ldw	r2,20(r5)
    3d44:	88800215 	stw	r2,8(r17)
    3d48:	04000316 	blt	zero,r16,3d58 <__sflush_r+0x124>
    3d4c:	003fed06 	br	3d04 <__ram_exceptions_end+0xfe001ce4>
    3d50:	90a5883a 	add	r18,r18,r2
    3d54:	043feb0e 	bge	zero,r16,3d04 <__ram_exceptions_end+0xfe001ce4>
    3d58:	88800917 	ldw	r2,36(r17)
    3d5c:	89400717 	ldw	r5,28(r17)
    3d60:	800f883a 	mov	r7,r16
    3d64:	900d883a 	mov	r6,r18
    3d68:	9809883a 	mov	r4,r19
    3d6c:	103ee83a 	callr	r2
    3d70:	80a1c83a 	sub	r16,r16,r2
    3d74:	00bff616 	blt	zero,r2,3d50 <__ram_exceptions_end+0xfe001d30>
    3d78:	88c0030b 	ldhu	r3,12(r17)
    3d7c:	00bfffc4 	movi	r2,-1
    3d80:	18c01014 	ori	r3,r3,64
    3d84:	88c0030d 	sth	r3,12(r17)
    3d88:	003fdf06 	br	3d08 <__ram_exceptions_end+0xfe001ce8>
    3d8c:	0005883a 	mov	r2,zero
    3d90:	003fec06 	br	3d44 <__ram_exceptions_end+0xfe001d24>
    3d94:	88801415 	stw	r2,80(r17)
    3d98:	003fd206 	br	3ce4 <__ram_exceptions_end+0xfe001cc4>
    3d9c:	28c00f17 	ldw	r3,60(r5)
    3da0:	00ffb316 	blt	zero,r3,3c70 <__ram_exceptions_end+0xfe001c50>
    3da4:	003fd706 	br	3d04 <__ram_exceptions_end+0xfe001ce4>
    3da8:	89400717 	ldw	r5,28(r17)
    3dac:	000d883a 	mov	r6,zero
    3db0:	01c00044 	movi	r7,1
    3db4:	9809883a 	mov	r4,r19
    3db8:	403ee83a 	callr	r8
    3dbc:	100d883a 	mov	r6,r2
    3dc0:	00bfffc4 	movi	r2,-1
    3dc4:	30801426 	beq	r6,r2,3e18 <__sflush_r+0x1e4>
    3dc8:	8880030b 	ldhu	r2,12(r17)
    3dcc:	8a000a17 	ldw	r8,40(r17)
    3dd0:	003fae06 	br	3c8c <__ram_exceptions_end+0xfe001c6c>
    3dd4:	98c00017 	ldw	r3,0(r19)
    3dd8:	183fba26 	beq	r3,zero,3cc4 <__ram_exceptions_end+0xfe001ca4>
    3ddc:	01000744 	movi	r4,29
    3de0:	19000626 	beq	r3,r4,3dfc <__sflush_r+0x1c8>
    3de4:	01000584 	movi	r4,22
    3de8:	19000426 	beq	r3,r4,3dfc <__sflush_r+0x1c8>
    3dec:	88c0030b 	ldhu	r3,12(r17)
    3df0:	18c01014 	ori	r3,r3,64
    3df4:	88c0030d 	sth	r3,12(r17)
    3df8:	003fc306 	br	3d08 <__ram_exceptions_end+0xfe001ce8>
    3dfc:	8880030b 	ldhu	r2,12(r17)
    3e00:	88c00417 	ldw	r3,16(r17)
    3e04:	88000115 	stw	zero,4(r17)
    3e08:	10bdffcc 	andi	r2,r2,63487
    3e0c:	8880030d 	sth	r2,12(r17)
    3e10:	88c00015 	stw	r3,0(r17)
    3e14:	003fb306 	br	3ce4 <__ram_exceptions_end+0xfe001cc4>
    3e18:	98800017 	ldw	r2,0(r19)
    3e1c:	103fea26 	beq	r2,zero,3dc8 <__ram_exceptions_end+0xfe001da8>
    3e20:	00c00744 	movi	r3,29
    3e24:	10c00226 	beq	r2,r3,3e30 <__sflush_r+0x1fc>
    3e28:	00c00584 	movi	r3,22
    3e2c:	10c0031e 	bne	r2,r3,3e3c <__sflush_r+0x208>
    3e30:	9c000015 	stw	r16,0(r19)
    3e34:	0005883a 	mov	r2,zero
    3e38:	003fb306 	br	3d08 <__ram_exceptions_end+0xfe001ce8>
    3e3c:	88c0030b 	ldhu	r3,12(r17)
    3e40:	3005883a 	mov	r2,r6
    3e44:	18c01014 	ori	r3,r3,64
    3e48:	88c0030d 	sth	r3,12(r17)
    3e4c:	003fae06 	br	3d08 <__ram_exceptions_end+0xfe001ce8>

00003e50 <_fflush_r>:
    3e50:	defffd04 	addi	sp,sp,-12
    3e54:	dc000115 	stw	r16,4(sp)
    3e58:	dfc00215 	stw	ra,8(sp)
    3e5c:	2021883a 	mov	r16,r4
    3e60:	20000226 	beq	r4,zero,3e6c <_fflush_r+0x1c>
    3e64:	20800e17 	ldw	r2,56(r4)
    3e68:	10000c26 	beq	r2,zero,3e9c <_fflush_r+0x4c>
    3e6c:	2880030f 	ldh	r2,12(r5)
    3e70:	1000051e 	bne	r2,zero,3e88 <_fflush_r+0x38>
    3e74:	0005883a 	mov	r2,zero
    3e78:	dfc00217 	ldw	ra,8(sp)
    3e7c:	dc000117 	ldw	r16,4(sp)
    3e80:	dec00304 	addi	sp,sp,12
    3e84:	f800283a 	ret
    3e88:	8009883a 	mov	r4,r16
    3e8c:	dfc00217 	ldw	ra,8(sp)
    3e90:	dc000117 	ldw	r16,4(sp)
    3e94:	dec00304 	addi	sp,sp,12
    3e98:	0003c341 	jmpi	3c34 <__sflush_r>
    3e9c:	d9400015 	stw	r5,0(sp)
    3ea0:	000423c0 	call	423c <__sinit>
    3ea4:	d9400017 	ldw	r5,0(sp)
    3ea8:	003ff006 	br	3e6c <__ram_exceptions_end+0xfe001e4c>

00003eac <fflush>:
    3eac:	20000526 	beq	r4,zero,3ec4 <fflush+0x18>
    3eb0:	00800074 	movhi	r2,1
    3eb4:	10a17104 	addi	r2,r2,-31292
    3eb8:	200b883a 	mov	r5,r4
    3ebc:	11000017 	ldw	r4,0(r2)
    3ec0:	0003e501 	jmpi	3e50 <_fflush_r>
    3ec4:	00800074 	movhi	r2,1
    3ec8:	10a17004 	addi	r2,r2,-31296
    3ecc:	11000017 	ldw	r4,0(r2)
    3ed0:	01400034 	movhi	r5,0
    3ed4:	294f9404 	addi	r5,r5,15952
    3ed8:	00047841 	jmpi	4784 <_fwalk_reent>

00003edc <__fp_unlock>:
    3edc:	0005883a 	mov	r2,zero
    3ee0:	f800283a 	ret

00003ee4 <_cleanup_r>:
    3ee4:	01400034 	movhi	r5,0
    3ee8:	2955db04 	addi	r5,r5,22380
    3eec:	00047841 	jmpi	4784 <_fwalk_reent>

00003ef0 <__sinit.part.1>:
    3ef0:	defff704 	addi	sp,sp,-36
    3ef4:	00c00034 	movhi	r3,0
    3ef8:	dfc00815 	stw	ra,32(sp)
    3efc:	ddc00715 	stw	r23,28(sp)
    3f00:	dd800615 	stw	r22,24(sp)
    3f04:	dd400515 	stw	r21,20(sp)
    3f08:	dd000415 	stw	r20,16(sp)
    3f0c:	dcc00315 	stw	r19,12(sp)
    3f10:	dc800215 	stw	r18,8(sp)
    3f14:	dc400115 	stw	r17,4(sp)
    3f18:	dc000015 	stw	r16,0(sp)
    3f1c:	18cfb904 	addi	r3,r3,16100
    3f20:	24000117 	ldw	r16,4(r4)
    3f24:	20c00f15 	stw	r3,60(r4)
    3f28:	2080bb04 	addi	r2,r4,748
    3f2c:	00c000c4 	movi	r3,3
    3f30:	20c0b915 	stw	r3,740(r4)
    3f34:	2080ba15 	stw	r2,744(r4)
    3f38:	2000b815 	stw	zero,736(r4)
    3f3c:	05c00204 	movi	r23,8
    3f40:	00800104 	movi	r2,4
    3f44:	2025883a 	mov	r18,r4
    3f48:	b80d883a 	mov	r6,r23
    3f4c:	81001704 	addi	r4,r16,92
    3f50:	000b883a 	mov	r5,zero
    3f54:	80000015 	stw	zero,0(r16)
    3f58:	80000115 	stw	zero,4(r16)
    3f5c:	80000215 	stw	zero,8(r16)
    3f60:	8080030d 	sth	r2,12(r16)
    3f64:	80001915 	stw	zero,100(r16)
    3f68:	8000038d 	sth	zero,14(r16)
    3f6c:	80000415 	stw	zero,16(r16)
    3f70:	80000515 	stw	zero,20(r16)
    3f74:	80000615 	stw	zero,24(r16)
    3f78:	00052100 	call	5210 <memset>
    3f7c:	05800034 	movhi	r22,0
    3f80:	94400217 	ldw	r17,8(r18)
    3f84:	05400034 	movhi	r21,0
    3f88:	05000034 	movhi	r20,0
    3f8c:	04c00034 	movhi	r19,0
    3f90:	b5955f04 	addi	r22,r22,21884
    3f94:	ad557604 	addi	r21,r21,21976
    3f98:	a5159504 	addi	r20,r20,22100
    3f9c:	9cd5ac04 	addi	r19,r19,22192
    3fa0:	85800815 	stw	r22,32(r16)
    3fa4:	85400915 	stw	r21,36(r16)
    3fa8:	85000a15 	stw	r20,40(r16)
    3fac:	84c00b15 	stw	r19,44(r16)
    3fb0:	84000715 	stw	r16,28(r16)
    3fb4:	00800284 	movi	r2,10
    3fb8:	8880030d 	sth	r2,12(r17)
    3fbc:	00800044 	movi	r2,1
    3fc0:	b80d883a 	mov	r6,r23
    3fc4:	89001704 	addi	r4,r17,92
    3fc8:	000b883a 	mov	r5,zero
    3fcc:	88000015 	stw	zero,0(r17)
    3fd0:	88000115 	stw	zero,4(r17)
    3fd4:	88000215 	stw	zero,8(r17)
    3fd8:	88001915 	stw	zero,100(r17)
    3fdc:	8880038d 	sth	r2,14(r17)
    3fe0:	88000415 	stw	zero,16(r17)
    3fe4:	88000515 	stw	zero,20(r17)
    3fe8:	88000615 	stw	zero,24(r17)
    3fec:	00052100 	call	5210 <memset>
    3ff0:	94000317 	ldw	r16,12(r18)
    3ff4:	00800484 	movi	r2,18
    3ff8:	8c400715 	stw	r17,28(r17)
    3ffc:	8d800815 	stw	r22,32(r17)
    4000:	8d400915 	stw	r21,36(r17)
    4004:	8d000a15 	stw	r20,40(r17)
    4008:	8cc00b15 	stw	r19,44(r17)
    400c:	8080030d 	sth	r2,12(r16)
    4010:	00800084 	movi	r2,2
    4014:	80000015 	stw	zero,0(r16)
    4018:	80000115 	stw	zero,4(r16)
    401c:	80000215 	stw	zero,8(r16)
    4020:	80001915 	stw	zero,100(r16)
    4024:	8080038d 	sth	r2,14(r16)
    4028:	80000415 	stw	zero,16(r16)
    402c:	80000515 	stw	zero,20(r16)
    4030:	80000615 	stw	zero,24(r16)
    4034:	b80d883a 	mov	r6,r23
    4038:	000b883a 	mov	r5,zero
    403c:	81001704 	addi	r4,r16,92
    4040:	00052100 	call	5210 <memset>
    4044:	00800044 	movi	r2,1
    4048:	84000715 	stw	r16,28(r16)
    404c:	85800815 	stw	r22,32(r16)
    4050:	85400915 	stw	r21,36(r16)
    4054:	85000a15 	stw	r20,40(r16)
    4058:	84c00b15 	stw	r19,44(r16)
    405c:	90800e15 	stw	r2,56(r18)
    4060:	dfc00817 	ldw	ra,32(sp)
    4064:	ddc00717 	ldw	r23,28(sp)
    4068:	dd800617 	ldw	r22,24(sp)
    406c:	dd400517 	ldw	r21,20(sp)
    4070:	dd000417 	ldw	r20,16(sp)
    4074:	dcc00317 	ldw	r19,12(sp)
    4078:	dc800217 	ldw	r18,8(sp)
    407c:	dc400117 	ldw	r17,4(sp)
    4080:	dc000017 	ldw	r16,0(sp)
    4084:	dec00904 	addi	sp,sp,36
    4088:	f800283a 	ret

0000408c <__fp_lock>:
    408c:	0005883a 	mov	r2,zero
    4090:	f800283a 	ret

00004094 <__sfmoreglue>:
    4094:	defffc04 	addi	sp,sp,-16
    4098:	dc800215 	stw	r18,8(sp)
    409c:	2825883a 	mov	r18,r5
    40a0:	dc000015 	stw	r16,0(sp)
    40a4:	01401a04 	movi	r5,104
    40a8:	2021883a 	mov	r16,r4
    40ac:	913fffc4 	addi	r4,r18,-1
    40b0:	dfc00315 	stw	ra,12(sp)
    40b4:	dc400115 	stw	r17,4(sp)
    40b8:	00036780 	call	3678 <__mulsi3>
    40bc:	8009883a 	mov	r4,r16
    40c0:	11401d04 	addi	r5,r2,116
    40c4:	1023883a 	mov	r17,r2
    40c8:	0004a040 	call	4a04 <_malloc_r>
    40cc:	1021883a 	mov	r16,r2
    40d0:	10000726 	beq	r2,zero,40f0 <__sfmoreglue+0x5c>
    40d4:	11000304 	addi	r4,r2,12
    40d8:	10000015 	stw	zero,0(r2)
    40dc:	14800115 	stw	r18,4(r2)
    40e0:	11000215 	stw	r4,8(r2)
    40e4:	89801a04 	addi	r6,r17,104
    40e8:	000b883a 	mov	r5,zero
    40ec:	00052100 	call	5210 <memset>
    40f0:	8005883a 	mov	r2,r16
    40f4:	dfc00317 	ldw	ra,12(sp)
    40f8:	dc800217 	ldw	r18,8(sp)
    40fc:	dc400117 	ldw	r17,4(sp)
    4100:	dc000017 	ldw	r16,0(sp)
    4104:	dec00404 	addi	sp,sp,16
    4108:	f800283a 	ret

0000410c <__sfp>:
    410c:	defffb04 	addi	sp,sp,-20
    4110:	dc000015 	stw	r16,0(sp)
    4114:	04000074 	movhi	r16,1
    4118:	84217004 	addi	r16,r16,-31296
    411c:	dcc00315 	stw	r19,12(sp)
    4120:	2027883a 	mov	r19,r4
    4124:	81000017 	ldw	r4,0(r16)
    4128:	dfc00415 	stw	ra,16(sp)
    412c:	dc800215 	stw	r18,8(sp)
    4130:	20800e17 	ldw	r2,56(r4)
    4134:	dc400115 	stw	r17,4(sp)
    4138:	1000021e 	bne	r2,zero,4144 <__sfp+0x38>
    413c:	0003ef00 	call	3ef0 <__sinit.part.1>
    4140:	81000017 	ldw	r4,0(r16)
    4144:	2480b804 	addi	r18,r4,736
    4148:	047fffc4 	movi	r17,-1
    414c:	91000117 	ldw	r4,4(r18)
    4150:	94000217 	ldw	r16,8(r18)
    4154:	213fffc4 	addi	r4,r4,-1
    4158:	20000a16 	blt	r4,zero,4184 <__sfp+0x78>
    415c:	8080030f 	ldh	r2,12(r16)
    4160:	10000c26 	beq	r2,zero,4194 <__sfp+0x88>
    4164:	80c01d04 	addi	r3,r16,116
    4168:	00000206 	br	4174 <__sfp+0x68>
    416c:	18bfe60f 	ldh	r2,-104(r3)
    4170:	10000826 	beq	r2,zero,4194 <__sfp+0x88>
    4174:	213fffc4 	addi	r4,r4,-1
    4178:	1c3ffd04 	addi	r16,r3,-12
    417c:	18c01a04 	addi	r3,r3,104
    4180:	247ffa1e 	bne	r4,r17,416c <__ram_exceptions_end+0xfe00214c>
    4184:	90800017 	ldw	r2,0(r18)
    4188:	10001d26 	beq	r2,zero,4200 <__sfp+0xf4>
    418c:	1025883a 	mov	r18,r2
    4190:	003fee06 	br	414c <__ram_exceptions_end+0xfe00212c>
    4194:	00bfffc4 	movi	r2,-1
    4198:	8080038d 	sth	r2,14(r16)
    419c:	00800044 	movi	r2,1
    41a0:	8080030d 	sth	r2,12(r16)
    41a4:	80001915 	stw	zero,100(r16)
    41a8:	80000015 	stw	zero,0(r16)
    41ac:	80000215 	stw	zero,8(r16)
    41b0:	80000115 	stw	zero,4(r16)
    41b4:	80000415 	stw	zero,16(r16)
    41b8:	80000515 	stw	zero,20(r16)
    41bc:	80000615 	stw	zero,24(r16)
    41c0:	01800204 	movi	r6,8
    41c4:	000b883a 	mov	r5,zero
    41c8:	81001704 	addi	r4,r16,92
    41cc:	00052100 	call	5210 <memset>
    41d0:	8005883a 	mov	r2,r16
    41d4:	80000c15 	stw	zero,48(r16)
    41d8:	80000d15 	stw	zero,52(r16)
    41dc:	80001115 	stw	zero,68(r16)
    41e0:	80001215 	stw	zero,72(r16)
    41e4:	dfc00417 	ldw	ra,16(sp)
    41e8:	dcc00317 	ldw	r19,12(sp)
    41ec:	dc800217 	ldw	r18,8(sp)
    41f0:	dc400117 	ldw	r17,4(sp)
    41f4:	dc000017 	ldw	r16,0(sp)
    41f8:	dec00504 	addi	sp,sp,20
    41fc:	f800283a 	ret
    4200:	01400104 	movi	r5,4
    4204:	9809883a 	mov	r4,r19
    4208:	00040940 	call	4094 <__sfmoreglue>
    420c:	90800015 	stw	r2,0(r18)
    4210:	103fde1e 	bne	r2,zero,418c <__ram_exceptions_end+0xfe00216c>
    4214:	00800304 	movi	r2,12
    4218:	98800015 	stw	r2,0(r19)
    421c:	0005883a 	mov	r2,zero
    4220:	003ff006 	br	41e4 <__ram_exceptions_end+0xfe0021c4>

00004224 <_cleanup>:
    4224:	00800074 	movhi	r2,1
    4228:	10a17004 	addi	r2,r2,-31296
    422c:	11000017 	ldw	r4,0(r2)
    4230:	01400034 	movhi	r5,0
    4234:	2955db04 	addi	r5,r5,22380
    4238:	00047841 	jmpi	4784 <_fwalk_reent>

0000423c <__sinit>:
    423c:	20800e17 	ldw	r2,56(r4)
    4240:	10000126 	beq	r2,zero,4248 <__sinit+0xc>
    4244:	f800283a 	ret
    4248:	0003ef01 	jmpi	3ef0 <__sinit.part.1>

0000424c <__sfp_lock_acquire>:
    424c:	f800283a 	ret

00004250 <__sfp_lock_release>:
    4250:	f800283a 	ret

00004254 <__sinit_lock_acquire>:
    4254:	f800283a 	ret

00004258 <__sinit_lock_release>:
    4258:	f800283a 	ret

0000425c <__fp_lock_all>:
    425c:	00800074 	movhi	r2,1
    4260:	10a17104 	addi	r2,r2,-31292
    4264:	11000017 	ldw	r4,0(r2)
    4268:	01400034 	movhi	r5,0
    426c:	29502304 	addi	r5,r5,16524
    4270:	00046c01 	jmpi	46c0 <_fwalk>

00004274 <__fp_unlock_all>:
    4274:	00800074 	movhi	r2,1
    4278:	10a17104 	addi	r2,r2,-31292
    427c:	11000017 	ldw	r4,0(r2)
    4280:	01400034 	movhi	r5,0
    4284:	294fb704 	addi	r5,r5,16092
    4288:	00046c01 	jmpi	46c0 <_fwalk>

0000428c <_malloc_trim_r>:
    428c:	defffb04 	addi	sp,sp,-20
    4290:	dcc00315 	stw	r19,12(sp)
    4294:	04c00034 	movhi	r19,0
    4298:	dc800215 	stw	r18,8(sp)
    429c:	dc400115 	stw	r17,4(sp)
    42a0:	dc000015 	stw	r16,0(sp)
    42a4:	dfc00415 	stw	ra,16(sp)
    42a8:	2821883a 	mov	r16,r5
    42ac:	9cdf2304 	addi	r19,r19,31884
    42b0:	2025883a 	mov	r18,r4
    42b4:	0005e4c0 	call	5e4c <__malloc_lock>
    42b8:	98800217 	ldw	r2,8(r19)
    42bc:	14400117 	ldw	r17,4(r2)
    42c0:	00bfff04 	movi	r2,-4
    42c4:	88a2703a 	and	r17,r17,r2
    42c8:	8c21c83a 	sub	r16,r17,r16
    42cc:	8403fbc4 	addi	r16,r16,4079
    42d0:	8020d33a 	srli	r16,r16,12
    42d4:	0083ffc4 	movi	r2,4095
    42d8:	843fffc4 	addi	r16,r16,-1
    42dc:	8020933a 	slli	r16,r16,12
    42e0:	1400060e 	bge	r2,r16,42fc <_malloc_trim_r+0x70>
    42e4:	000b883a 	mov	r5,zero
    42e8:	9009883a 	mov	r4,r18
    42ec:	00055280 	call	5528 <_sbrk_r>
    42f0:	98c00217 	ldw	r3,8(r19)
    42f4:	1c47883a 	add	r3,r3,r17
    42f8:	10c00a26 	beq	r2,r3,4324 <_malloc_trim_r+0x98>
    42fc:	9009883a 	mov	r4,r18
    4300:	0005e500 	call	5e50 <__malloc_unlock>
    4304:	0005883a 	mov	r2,zero
    4308:	dfc00417 	ldw	ra,16(sp)
    430c:	dcc00317 	ldw	r19,12(sp)
    4310:	dc800217 	ldw	r18,8(sp)
    4314:	dc400117 	ldw	r17,4(sp)
    4318:	dc000017 	ldw	r16,0(sp)
    431c:	dec00504 	addi	sp,sp,20
    4320:	f800283a 	ret
    4324:	040bc83a 	sub	r5,zero,r16
    4328:	9009883a 	mov	r4,r18
    432c:	00055280 	call	5528 <_sbrk_r>
    4330:	00ffffc4 	movi	r3,-1
    4334:	10c00d26 	beq	r2,r3,436c <_malloc_trim_r+0xe0>
    4338:	00c00074 	movhi	r3,1
    433c:	18e53c04 	addi	r3,r3,-27408
    4340:	18800017 	ldw	r2,0(r3)
    4344:	99000217 	ldw	r4,8(r19)
    4348:	8c23c83a 	sub	r17,r17,r16
    434c:	8c400054 	ori	r17,r17,1
    4350:	1421c83a 	sub	r16,r2,r16
    4354:	24400115 	stw	r17,4(r4)
    4358:	9009883a 	mov	r4,r18
    435c:	1c000015 	stw	r16,0(r3)
    4360:	0005e500 	call	5e50 <__malloc_unlock>
    4364:	00800044 	movi	r2,1
    4368:	003fe706 	br	4308 <__ram_exceptions_end+0xfe0022e8>
    436c:	000b883a 	mov	r5,zero
    4370:	9009883a 	mov	r4,r18
    4374:	00055280 	call	5528 <_sbrk_r>
    4378:	99000217 	ldw	r4,8(r19)
    437c:	014003c4 	movi	r5,15
    4380:	1107c83a 	sub	r3,r2,r4
    4384:	28ffdd0e 	bge	r5,r3,42fc <__ram_exceptions_end+0xfe0022dc>
    4388:	01400074 	movhi	r5,1
    438c:	29617204 	addi	r5,r5,-31288
    4390:	29400017 	ldw	r5,0(r5)
    4394:	18c00054 	ori	r3,r3,1
    4398:	20c00115 	stw	r3,4(r4)
    439c:	00c00074 	movhi	r3,1
    43a0:	1145c83a 	sub	r2,r2,r5
    43a4:	18e53c04 	addi	r3,r3,-27408
    43a8:	18800015 	stw	r2,0(r3)
    43ac:	003fd306 	br	42fc <__ram_exceptions_end+0xfe0022dc>

000043b0 <_free_r>:
    43b0:	28004126 	beq	r5,zero,44b8 <_free_r+0x108>
    43b4:	defffd04 	addi	sp,sp,-12
    43b8:	dc400115 	stw	r17,4(sp)
    43bc:	dc000015 	stw	r16,0(sp)
    43c0:	2023883a 	mov	r17,r4
    43c4:	2821883a 	mov	r16,r5
    43c8:	dfc00215 	stw	ra,8(sp)
    43cc:	0005e4c0 	call	5e4c <__malloc_lock>
    43d0:	81ffff17 	ldw	r7,-4(r16)
    43d4:	00bfff84 	movi	r2,-2
    43d8:	01000034 	movhi	r4,0
    43dc:	81bffe04 	addi	r6,r16,-8
    43e0:	3884703a 	and	r2,r7,r2
    43e4:	211f2304 	addi	r4,r4,31884
    43e8:	308b883a 	add	r5,r6,r2
    43ec:	2a400117 	ldw	r9,4(r5)
    43f0:	22000217 	ldw	r8,8(r4)
    43f4:	00ffff04 	movi	r3,-4
    43f8:	48c6703a 	and	r3,r9,r3
    43fc:	2a005726 	beq	r5,r8,455c <_free_r+0x1ac>
    4400:	28c00115 	stw	r3,4(r5)
    4404:	39c0004c 	andi	r7,r7,1
    4408:	3800091e 	bne	r7,zero,4430 <_free_r+0x80>
    440c:	823ffe17 	ldw	r8,-8(r16)
    4410:	22400204 	addi	r9,r4,8
    4414:	320dc83a 	sub	r6,r6,r8
    4418:	31c00217 	ldw	r7,8(r6)
    441c:	1205883a 	add	r2,r2,r8
    4420:	3a406526 	beq	r7,r9,45b8 <_free_r+0x208>
    4424:	32000317 	ldw	r8,12(r6)
    4428:	3a000315 	stw	r8,12(r7)
    442c:	41c00215 	stw	r7,8(r8)
    4430:	28cf883a 	add	r7,r5,r3
    4434:	39c00117 	ldw	r7,4(r7)
    4438:	39c0004c 	andi	r7,r7,1
    443c:	38003a26 	beq	r7,zero,4528 <_free_r+0x178>
    4440:	10c00054 	ori	r3,r2,1
    4444:	30c00115 	stw	r3,4(r6)
    4448:	3087883a 	add	r3,r6,r2
    444c:	18800015 	stw	r2,0(r3)
    4450:	00c07fc4 	movi	r3,511
    4454:	18801936 	bltu	r3,r2,44bc <_free_r+0x10c>
    4458:	1004d0fa 	srli	r2,r2,3
    445c:	01c00044 	movi	r7,1
    4460:	21400117 	ldw	r5,4(r4)
    4464:	10c00044 	addi	r3,r2,1
    4468:	18c7883a 	add	r3,r3,r3
    446c:	1005d0ba 	srai	r2,r2,2
    4470:	18c7883a 	add	r3,r3,r3
    4474:	18c7883a 	add	r3,r3,r3
    4478:	1907883a 	add	r3,r3,r4
    447c:	3884983a 	sll	r2,r7,r2
    4480:	19c00017 	ldw	r7,0(r3)
    4484:	1a3ffe04 	addi	r8,r3,-8
    4488:	1144b03a 	or	r2,r2,r5
    448c:	32000315 	stw	r8,12(r6)
    4490:	31c00215 	stw	r7,8(r6)
    4494:	20800115 	stw	r2,4(r4)
    4498:	19800015 	stw	r6,0(r3)
    449c:	39800315 	stw	r6,12(r7)
    44a0:	8809883a 	mov	r4,r17
    44a4:	dfc00217 	ldw	ra,8(sp)
    44a8:	dc400117 	ldw	r17,4(sp)
    44ac:	dc000017 	ldw	r16,0(sp)
    44b0:	dec00304 	addi	sp,sp,12
    44b4:	0005e501 	jmpi	5e50 <__malloc_unlock>
    44b8:	f800283a 	ret
    44bc:	100ad27a 	srli	r5,r2,9
    44c0:	00c00104 	movi	r3,4
    44c4:	19404a36 	bltu	r3,r5,45f0 <_free_r+0x240>
    44c8:	100ad1ba 	srli	r5,r2,6
    44cc:	28c00e44 	addi	r3,r5,57
    44d0:	18c7883a 	add	r3,r3,r3
    44d4:	29400e04 	addi	r5,r5,56
    44d8:	18c7883a 	add	r3,r3,r3
    44dc:	18c7883a 	add	r3,r3,r3
    44e0:	1909883a 	add	r4,r3,r4
    44e4:	20c00017 	ldw	r3,0(r4)
    44e8:	01c00034 	movhi	r7,0
    44ec:	213ffe04 	addi	r4,r4,-8
    44f0:	39df2304 	addi	r7,r7,31884
    44f4:	20c04426 	beq	r4,r3,4608 <_free_r+0x258>
    44f8:	01ffff04 	movi	r7,-4
    44fc:	19400117 	ldw	r5,4(r3)
    4500:	29ca703a 	and	r5,r5,r7
    4504:	1140022e 	bgeu	r2,r5,4510 <_free_r+0x160>
    4508:	18c00217 	ldw	r3,8(r3)
    450c:	20fffb1e 	bne	r4,r3,44fc <__ram_exceptions_end+0xfe0024dc>
    4510:	19000317 	ldw	r4,12(r3)
    4514:	31000315 	stw	r4,12(r6)
    4518:	30c00215 	stw	r3,8(r6)
    451c:	21800215 	stw	r6,8(r4)
    4520:	19800315 	stw	r6,12(r3)
    4524:	003fde06 	br	44a0 <__ram_exceptions_end+0xfe002480>
    4528:	29c00217 	ldw	r7,8(r5)
    452c:	10c5883a 	add	r2,r2,r3
    4530:	00c00034 	movhi	r3,0
    4534:	18df2504 	addi	r3,r3,31892
    4538:	38c03b26 	beq	r7,r3,4628 <_free_r+0x278>
    453c:	2a000317 	ldw	r8,12(r5)
    4540:	11400054 	ori	r5,r2,1
    4544:	3087883a 	add	r3,r6,r2
    4548:	3a000315 	stw	r8,12(r7)
    454c:	41c00215 	stw	r7,8(r8)
    4550:	31400115 	stw	r5,4(r6)
    4554:	18800015 	stw	r2,0(r3)
    4558:	003fbd06 	br	4450 <__ram_exceptions_end+0xfe002430>
    455c:	39c0004c 	andi	r7,r7,1
    4560:	10c5883a 	add	r2,r2,r3
    4564:	3800071e 	bne	r7,zero,4584 <_free_r+0x1d4>
    4568:	81fffe17 	ldw	r7,-8(r16)
    456c:	31cdc83a 	sub	r6,r6,r7
    4570:	30c00317 	ldw	r3,12(r6)
    4574:	31400217 	ldw	r5,8(r6)
    4578:	11c5883a 	add	r2,r2,r7
    457c:	28c00315 	stw	r3,12(r5)
    4580:	19400215 	stw	r5,8(r3)
    4584:	10c00054 	ori	r3,r2,1
    4588:	30c00115 	stw	r3,4(r6)
    458c:	00c00074 	movhi	r3,1
    4590:	18e17304 	addi	r3,r3,-31284
    4594:	18c00017 	ldw	r3,0(r3)
    4598:	21800215 	stw	r6,8(r4)
    459c:	10ffc036 	bltu	r2,r3,44a0 <__ram_exceptions_end+0xfe002480>
    45a0:	00800074 	movhi	r2,1
    45a4:	10a4f004 	addi	r2,r2,-27712
    45a8:	11400017 	ldw	r5,0(r2)
    45ac:	8809883a 	mov	r4,r17
    45b0:	000428c0 	call	428c <_malloc_trim_r>
    45b4:	003fba06 	br	44a0 <__ram_exceptions_end+0xfe002480>
    45b8:	28c9883a 	add	r4,r5,r3
    45bc:	21000117 	ldw	r4,4(r4)
    45c0:	2100004c 	andi	r4,r4,1
    45c4:	2000391e 	bne	r4,zero,46ac <_free_r+0x2fc>
    45c8:	29c00217 	ldw	r7,8(r5)
    45cc:	29000317 	ldw	r4,12(r5)
    45d0:	1885883a 	add	r2,r3,r2
    45d4:	10c00054 	ori	r3,r2,1
    45d8:	39000315 	stw	r4,12(r7)
    45dc:	21c00215 	stw	r7,8(r4)
    45e0:	30c00115 	stw	r3,4(r6)
    45e4:	308d883a 	add	r6,r6,r2
    45e8:	30800015 	stw	r2,0(r6)
    45ec:	003fac06 	br	44a0 <__ram_exceptions_end+0xfe002480>
    45f0:	00c00504 	movi	r3,20
    45f4:	19401536 	bltu	r3,r5,464c <_free_r+0x29c>
    45f8:	28c01704 	addi	r3,r5,92
    45fc:	18c7883a 	add	r3,r3,r3
    4600:	294016c4 	addi	r5,r5,91
    4604:	003fb406 	br	44d8 <__ram_exceptions_end+0xfe0024b8>
    4608:	280bd0ba 	srai	r5,r5,2
    460c:	00c00044 	movi	r3,1
    4610:	38800117 	ldw	r2,4(r7)
    4614:	194a983a 	sll	r5,r3,r5
    4618:	2007883a 	mov	r3,r4
    461c:	2884b03a 	or	r2,r5,r2
    4620:	38800115 	stw	r2,4(r7)
    4624:	003fbb06 	br	4514 <__ram_exceptions_end+0xfe0024f4>
    4628:	21800515 	stw	r6,20(r4)
    462c:	21800415 	stw	r6,16(r4)
    4630:	10c00054 	ori	r3,r2,1
    4634:	31c00315 	stw	r7,12(r6)
    4638:	31c00215 	stw	r7,8(r6)
    463c:	30c00115 	stw	r3,4(r6)
    4640:	308d883a 	add	r6,r6,r2
    4644:	30800015 	stw	r2,0(r6)
    4648:	003f9506 	br	44a0 <__ram_exceptions_end+0xfe002480>
    464c:	00c01504 	movi	r3,84
    4650:	19400536 	bltu	r3,r5,4668 <_free_r+0x2b8>
    4654:	100ad33a 	srli	r5,r2,12
    4658:	28c01bc4 	addi	r3,r5,111
    465c:	18c7883a 	add	r3,r3,r3
    4660:	29401b84 	addi	r5,r5,110
    4664:	003f9c06 	br	44d8 <__ram_exceptions_end+0xfe0024b8>
    4668:	00c05504 	movi	r3,340
    466c:	19400536 	bltu	r3,r5,4684 <_free_r+0x2d4>
    4670:	100ad3fa 	srli	r5,r2,15
    4674:	28c01e04 	addi	r3,r5,120
    4678:	18c7883a 	add	r3,r3,r3
    467c:	29401dc4 	addi	r5,r5,119
    4680:	003f9506 	br	44d8 <__ram_exceptions_end+0xfe0024b8>
    4684:	00c15504 	movi	r3,1364
    4688:	19400536 	bltu	r3,r5,46a0 <_free_r+0x2f0>
    468c:	100ad4ba 	srli	r5,r2,18
    4690:	28c01f44 	addi	r3,r5,125
    4694:	18c7883a 	add	r3,r3,r3
    4698:	29401f04 	addi	r5,r5,124
    469c:	003f8e06 	br	44d8 <__ram_exceptions_end+0xfe0024b8>
    46a0:	00c03f84 	movi	r3,254
    46a4:	01401f84 	movi	r5,126
    46a8:	003f8b06 	br	44d8 <__ram_exceptions_end+0xfe0024b8>
    46ac:	10c00054 	ori	r3,r2,1
    46b0:	30c00115 	stw	r3,4(r6)
    46b4:	308d883a 	add	r6,r6,r2
    46b8:	30800015 	stw	r2,0(r6)
    46bc:	003f7806 	br	44a0 <__ram_exceptions_end+0xfe002480>

000046c0 <_fwalk>:
    46c0:	defff704 	addi	sp,sp,-36
    46c4:	dd000415 	stw	r20,16(sp)
    46c8:	dfc00815 	stw	ra,32(sp)
    46cc:	ddc00715 	stw	r23,28(sp)
    46d0:	dd800615 	stw	r22,24(sp)
    46d4:	dd400515 	stw	r21,20(sp)
    46d8:	dcc00315 	stw	r19,12(sp)
    46dc:	dc800215 	stw	r18,8(sp)
    46e0:	dc400115 	stw	r17,4(sp)
    46e4:	dc000015 	stw	r16,0(sp)
    46e8:	2500b804 	addi	r20,r4,736
    46ec:	a0002326 	beq	r20,zero,477c <_fwalk+0xbc>
    46f0:	282b883a 	mov	r21,r5
    46f4:	002f883a 	mov	r23,zero
    46f8:	05800044 	movi	r22,1
    46fc:	04ffffc4 	movi	r19,-1
    4700:	a4400117 	ldw	r17,4(r20)
    4704:	a4800217 	ldw	r18,8(r20)
    4708:	8c7fffc4 	addi	r17,r17,-1
    470c:	88000d16 	blt	r17,zero,4744 <_fwalk+0x84>
    4710:	94000304 	addi	r16,r18,12
    4714:	94800384 	addi	r18,r18,14
    4718:	8080000b 	ldhu	r2,0(r16)
    471c:	8c7fffc4 	addi	r17,r17,-1
    4720:	813ffd04 	addi	r4,r16,-12
    4724:	b080042e 	bgeu	r22,r2,4738 <_fwalk+0x78>
    4728:	9080000f 	ldh	r2,0(r18)
    472c:	14c00226 	beq	r2,r19,4738 <_fwalk+0x78>
    4730:	a83ee83a 	callr	r21
    4734:	b8aeb03a 	or	r23,r23,r2
    4738:	84001a04 	addi	r16,r16,104
    473c:	94801a04 	addi	r18,r18,104
    4740:	8cfff51e 	bne	r17,r19,4718 <__ram_exceptions_end+0xfe0026f8>
    4744:	a5000017 	ldw	r20,0(r20)
    4748:	a03fed1e 	bne	r20,zero,4700 <__ram_exceptions_end+0xfe0026e0>
    474c:	b805883a 	mov	r2,r23
    4750:	dfc00817 	ldw	ra,32(sp)
    4754:	ddc00717 	ldw	r23,28(sp)
    4758:	dd800617 	ldw	r22,24(sp)
    475c:	dd400517 	ldw	r21,20(sp)
    4760:	dd000417 	ldw	r20,16(sp)
    4764:	dcc00317 	ldw	r19,12(sp)
    4768:	dc800217 	ldw	r18,8(sp)
    476c:	dc400117 	ldw	r17,4(sp)
    4770:	dc000017 	ldw	r16,0(sp)
    4774:	dec00904 	addi	sp,sp,36
    4778:	f800283a 	ret
    477c:	002f883a 	mov	r23,zero
    4780:	003ff206 	br	474c <__ram_exceptions_end+0xfe00272c>

00004784 <_fwalk_reent>:
    4784:	defff704 	addi	sp,sp,-36
    4788:	dd000415 	stw	r20,16(sp)
    478c:	dfc00815 	stw	ra,32(sp)
    4790:	ddc00715 	stw	r23,28(sp)
    4794:	dd800615 	stw	r22,24(sp)
    4798:	dd400515 	stw	r21,20(sp)
    479c:	dcc00315 	stw	r19,12(sp)
    47a0:	dc800215 	stw	r18,8(sp)
    47a4:	dc400115 	stw	r17,4(sp)
    47a8:	dc000015 	stw	r16,0(sp)
    47ac:	2500b804 	addi	r20,r4,736
    47b0:	a0002326 	beq	r20,zero,4840 <_fwalk_reent+0xbc>
    47b4:	282b883a 	mov	r21,r5
    47b8:	2027883a 	mov	r19,r4
    47bc:	002f883a 	mov	r23,zero
    47c0:	05800044 	movi	r22,1
    47c4:	04bfffc4 	movi	r18,-1
    47c8:	a4400117 	ldw	r17,4(r20)
    47cc:	a4000217 	ldw	r16,8(r20)
    47d0:	8c7fffc4 	addi	r17,r17,-1
    47d4:	88000c16 	blt	r17,zero,4808 <_fwalk_reent+0x84>
    47d8:	84000304 	addi	r16,r16,12
    47dc:	8080000b 	ldhu	r2,0(r16)
    47e0:	8c7fffc4 	addi	r17,r17,-1
    47e4:	817ffd04 	addi	r5,r16,-12
    47e8:	b080052e 	bgeu	r22,r2,4800 <_fwalk_reent+0x7c>
    47ec:	8080008f 	ldh	r2,2(r16)
    47f0:	9809883a 	mov	r4,r19
    47f4:	14800226 	beq	r2,r18,4800 <_fwalk_reent+0x7c>
    47f8:	a83ee83a 	callr	r21
    47fc:	b8aeb03a 	or	r23,r23,r2
    4800:	84001a04 	addi	r16,r16,104
    4804:	8cbff51e 	bne	r17,r18,47dc <__ram_exceptions_end+0xfe0027bc>
    4808:	a5000017 	ldw	r20,0(r20)
    480c:	a03fee1e 	bne	r20,zero,47c8 <__ram_exceptions_end+0xfe0027a8>
    4810:	b805883a 	mov	r2,r23
    4814:	dfc00817 	ldw	ra,32(sp)
    4818:	ddc00717 	ldw	r23,28(sp)
    481c:	dd800617 	ldw	r22,24(sp)
    4820:	dd400517 	ldw	r21,20(sp)
    4824:	dd000417 	ldw	r20,16(sp)
    4828:	dcc00317 	ldw	r19,12(sp)
    482c:	dc800217 	ldw	r18,8(sp)
    4830:	dc400117 	ldw	r17,4(sp)
    4834:	dc000017 	ldw	r16,0(sp)
    4838:	dec00904 	addi	sp,sp,36
    483c:	f800283a 	ret
    4840:	002f883a 	mov	r23,zero
    4844:	003ff206 	br	4810 <__ram_exceptions_end+0xfe0027f0>

00004848 <__smakebuf_r>:
    4848:	2880030b 	ldhu	r2,12(r5)
    484c:	10c0008c 	andi	r3,r2,2
    4850:	1800411e 	bne	r3,zero,4958 <__smakebuf_r+0x110>
    4854:	deffec04 	addi	sp,sp,-80
    4858:	dc000f15 	stw	r16,60(sp)
    485c:	2821883a 	mov	r16,r5
    4860:	2940038f 	ldh	r5,14(r5)
    4864:	dc401015 	stw	r17,64(sp)
    4868:	dfc01315 	stw	ra,76(sp)
    486c:	dcc01215 	stw	r19,72(sp)
    4870:	dc801115 	stw	r18,68(sp)
    4874:	2023883a 	mov	r17,r4
    4878:	28001c16 	blt	r5,zero,48ec <__smakebuf_r+0xa4>
    487c:	d80d883a 	mov	r6,sp
    4880:	00058700 	call	5870 <_fstat_r>
    4884:	10001816 	blt	r2,zero,48e8 <__smakebuf_r+0xa0>
    4888:	d8800117 	ldw	r2,4(sp)
    488c:	00e00014 	movui	r3,32768
    4890:	10bc000c 	andi	r2,r2,61440
    4894:	14c80020 	cmpeqi	r19,r2,8192
    4898:	10c03726 	beq	r2,r3,4978 <__smakebuf_r+0x130>
    489c:	80c0030b 	ldhu	r3,12(r16)
    48a0:	18c20014 	ori	r3,r3,2048
    48a4:	80c0030d 	sth	r3,12(r16)
    48a8:	00c80004 	movi	r3,8192
    48ac:	10c0521e 	bne	r2,r3,49f8 <__smakebuf_r+0x1b0>
    48b0:	8140038f 	ldh	r5,14(r16)
    48b4:	8809883a 	mov	r4,r17
    48b8:	00058cc0 	call	58cc <_isatty_r>
    48bc:	10004c26 	beq	r2,zero,49f0 <__smakebuf_r+0x1a8>
    48c0:	8080030b 	ldhu	r2,12(r16)
    48c4:	80c010c4 	addi	r3,r16,67
    48c8:	80c00015 	stw	r3,0(r16)
    48cc:	10800054 	ori	r2,r2,1
    48d0:	8080030d 	sth	r2,12(r16)
    48d4:	00800044 	movi	r2,1
    48d8:	80c00415 	stw	r3,16(r16)
    48dc:	80800515 	stw	r2,20(r16)
    48e0:	04810004 	movi	r18,1024
    48e4:	00000706 	br	4904 <__smakebuf_r+0xbc>
    48e8:	8080030b 	ldhu	r2,12(r16)
    48ec:	10c0200c 	andi	r3,r2,128
    48f0:	18001f1e 	bne	r3,zero,4970 <__smakebuf_r+0x128>
    48f4:	04810004 	movi	r18,1024
    48f8:	10820014 	ori	r2,r2,2048
    48fc:	8080030d 	sth	r2,12(r16)
    4900:	0027883a 	mov	r19,zero
    4904:	900b883a 	mov	r5,r18
    4908:	8809883a 	mov	r4,r17
    490c:	0004a040 	call	4a04 <_malloc_r>
    4910:	10002c26 	beq	r2,zero,49c4 <__smakebuf_r+0x17c>
    4914:	80c0030b 	ldhu	r3,12(r16)
    4918:	01000034 	movhi	r4,0
    491c:	210fb904 	addi	r4,r4,16100
    4920:	89000f15 	stw	r4,60(r17)
    4924:	18c02014 	ori	r3,r3,128
    4928:	80c0030d 	sth	r3,12(r16)
    492c:	80800015 	stw	r2,0(r16)
    4930:	80800415 	stw	r2,16(r16)
    4934:	84800515 	stw	r18,20(r16)
    4938:	98001a1e 	bne	r19,zero,49a4 <__smakebuf_r+0x15c>
    493c:	dfc01317 	ldw	ra,76(sp)
    4940:	dcc01217 	ldw	r19,72(sp)
    4944:	dc801117 	ldw	r18,68(sp)
    4948:	dc401017 	ldw	r17,64(sp)
    494c:	dc000f17 	ldw	r16,60(sp)
    4950:	dec01404 	addi	sp,sp,80
    4954:	f800283a 	ret
    4958:	288010c4 	addi	r2,r5,67
    495c:	28800015 	stw	r2,0(r5)
    4960:	28800415 	stw	r2,16(r5)
    4964:	00800044 	movi	r2,1
    4968:	28800515 	stw	r2,20(r5)
    496c:	f800283a 	ret
    4970:	04801004 	movi	r18,64
    4974:	003fe006 	br	48f8 <__ram_exceptions_end+0xfe0028d8>
    4978:	81000a17 	ldw	r4,40(r16)
    497c:	00c00034 	movhi	r3,0
    4980:	18d59504 	addi	r3,r3,22100
    4984:	20ffc51e 	bne	r4,r3,489c <__ram_exceptions_end+0xfe00287c>
    4988:	8080030b 	ldhu	r2,12(r16)
    498c:	04810004 	movi	r18,1024
    4990:	84801315 	stw	r18,76(r16)
    4994:	1484b03a 	or	r2,r2,r18
    4998:	8080030d 	sth	r2,12(r16)
    499c:	0027883a 	mov	r19,zero
    49a0:	003fd806 	br	4904 <__ram_exceptions_end+0xfe0028e4>
    49a4:	8140038f 	ldh	r5,14(r16)
    49a8:	8809883a 	mov	r4,r17
    49ac:	00058cc0 	call	58cc <_isatty_r>
    49b0:	103fe226 	beq	r2,zero,493c <__ram_exceptions_end+0xfe00291c>
    49b4:	8080030b 	ldhu	r2,12(r16)
    49b8:	10800054 	ori	r2,r2,1
    49bc:	8080030d 	sth	r2,12(r16)
    49c0:	003fde06 	br	493c <__ram_exceptions_end+0xfe00291c>
    49c4:	8080030b 	ldhu	r2,12(r16)
    49c8:	10c0800c 	andi	r3,r2,512
    49cc:	183fdb1e 	bne	r3,zero,493c <__ram_exceptions_end+0xfe00291c>
    49d0:	10800094 	ori	r2,r2,2
    49d4:	80c010c4 	addi	r3,r16,67
    49d8:	8080030d 	sth	r2,12(r16)
    49dc:	00800044 	movi	r2,1
    49e0:	80c00015 	stw	r3,0(r16)
    49e4:	80c00415 	stw	r3,16(r16)
    49e8:	80800515 	stw	r2,20(r16)
    49ec:	003fd306 	br	493c <__ram_exceptions_end+0xfe00291c>
    49f0:	04810004 	movi	r18,1024
    49f4:	003fc306 	br	4904 <__ram_exceptions_end+0xfe0028e4>
    49f8:	0027883a 	mov	r19,zero
    49fc:	04810004 	movi	r18,1024
    4a00:	003fc006 	br	4904 <__ram_exceptions_end+0xfe0028e4>

00004a04 <_malloc_r>:
    4a04:	defff504 	addi	sp,sp,-44
    4a08:	dc800315 	stw	r18,12(sp)
    4a0c:	dfc00a15 	stw	ra,40(sp)
    4a10:	df000915 	stw	fp,36(sp)
    4a14:	ddc00815 	stw	r23,32(sp)
    4a18:	dd800715 	stw	r22,28(sp)
    4a1c:	dd400615 	stw	r21,24(sp)
    4a20:	dd000515 	stw	r20,20(sp)
    4a24:	dcc00415 	stw	r19,16(sp)
    4a28:	dc400215 	stw	r17,8(sp)
    4a2c:	dc000115 	stw	r16,4(sp)
    4a30:	288002c4 	addi	r2,r5,11
    4a34:	00c00584 	movi	r3,22
    4a38:	2025883a 	mov	r18,r4
    4a3c:	18807f2e 	bgeu	r3,r2,4c3c <_malloc_r+0x238>
    4a40:	047ffe04 	movi	r17,-8
    4a44:	1462703a 	and	r17,r2,r17
    4a48:	8800a316 	blt	r17,zero,4cd8 <_malloc_r+0x2d4>
    4a4c:	8940a236 	bltu	r17,r5,4cd8 <_malloc_r+0x2d4>
    4a50:	0005e4c0 	call	5e4c <__malloc_lock>
    4a54:	00807dc4 	movi	r2,503
    4a58:	1441e92e 	bgeu	r2,r17,5200 <_malloc_r+0x7fc>
    4a5c:	8804d27a 	srli	r2,r17,9
    4a60:	1000a126 	beq	r2,zero,4ce8 <_malloc_r+0x2e4>
    4a64:	00c00104 	movi	r3,4
    4a68:	18811e36 	bltu	r3,r2,4ee4 <_malloc_r+0x4e0>
    4a6c:	8804d1ba 	srli	r2,r17,6
    4a70:	12000e44 	addi	r8,r2,57
    4a74:	11c00e04 	addi	r7,r2,56
    4a78:	4209883a 	add	r4,r8,r8
    4a7c:	04c00034 	movhi	r19,0
    4a80:	2109883a 	add	r4,r4,r4
    4a84:	9cdf2304 	addi	r19,r19,31884
    4a88:	2109883a 	add	r4,r4,r4
    4a8c:	9909883a 	add	r4,r19,r4
    4a90:	24000117 	ldw	r16,4(r4)
    4a94:	213ffe04 	addi	r4,r4,-8
    4a98:	24009726 	beq	r4,r16,4cf8 <_malloc_r+0x2f4>
    4a9c:	80800117 	ldw	r2,4(r16)
    4aa0:	01bfff04 	movi	r6,-4
    4aa4:	014003c4 	movi	r5,15
    4aa8:	1184703a 	and	r2,r2,r6
    4aac:	1447c83a 	sub	r3,r2,r17
    4ab0:	28c00716 	blt	r5,r3,4ad0 <_malloc_r+0xcc>
    4ab4:	1800920e 	bge	r3,zero,4d00 <_malloc_r+0x2fc>
    4ab8:	84000317 	ldw	r16,12(r16)
    4abc:	24008e26 	beq	r4,r16,4cf8 <_malloc_r+0x2f4>
    4ac0:	80800117 	ldw	r2,4(r16)
    4ac4:	1184703a 	and	r2,r2,r6
    4ac8:	1447c83a 	sub	r3,r2,r17
    4acc:	28fff90e 	bge	r5,r3,4ab4 <__ram_exceptions_end+0xfe002a94>
    4ad0:	3809883a 	mov	r4,r7
    4ad4:	01800034 	movhi	r6,0
    4ad8:	9c000417 	ldw	r16,16(r19)
    4adc:	319f2304 	addi	r6,r6,31884
    4ae0:	32000204 	addi	r8,r6,8
    4ae4:	82013426 	beq	r16,r8,4fb8 <_malloc_r+0x5b4>
    4ae8:	80c00117 	ldw	r3,4(r16)
    4aec:	00bfff04 	movi	r2,-4
    4af0:	188e703a 	and	r7,r3,r2
    4af4:	3c45c83a 	sub	r2,r7,r17
    4af8:	00c003c4 	movi	r3,15
    4afc:	18811f16 	blt	r3,r2,4f7c <_malloc_r+0x578>
    4b00:	32000515 	stw	r8,20(r6)
    4b04:	32000415 	stw	r8,16(r6)
    4b08:	10007f0e 	bge	r2,zero,4d08 <_malloc_r+0x304>
    4b0c:	00807fc4 	movi	r2,511
    4b10:	11c0fd36 	bltu	r2,r7,4f08 <_malloc_r+0x504>
    4b14:	3806d0fa 	srli	r3,r7,3
    4b18:	01c00044 	movi	r7,1
    4b1c:	30800117 	ldw	r2,4(r6)
    4b20:	19400044 	addi	r5,r3,1
    4b24:	294b883a 	add	r5,r5,r5
    4b28:	1807d0ba 	srai	r3,r3,2
    4b2c:	294b883a 	add	r5,r5,r5
    4b30:	294b883a 	add	r5,r5,r5
    4b34:	298b883a 	add	r5,r5,r6
    4b38:	38c6983a 	sll	r3,r7,r3
    4b3c:	29c00017 	ldw	r7,0(r5)
    4b40:	2a7ffe04 	addi	r9,r5,-8
    4b44:	1886b03a 	or	r3,r3,r2
    4b48:	82400315 	stw	r9,12(r16)
    4b4c:	81c00215 	stw	r7,8(r16)
    4b50:	30c00115 	stw	r3,4(r6)
    4b54:	2c000015 	stw	r16,0(r5)
    4b58:	3c000315 	stw	r16,12(r7)
    4b5c:	2005d0ba 	srai	r2,r4,2
    4b60:	01400044 	movi	r5,1
    4b64:	288a983a 	sll	r5,r5,r2
    4b68:	19406f36 	bltu	r3,r5,4d28 <_malloc_r+0x324>
    4b6c:	28c4703a 	and	r2,r5,r3
    4b70:	10000a1e 	bne	r2,zero,4b9c <_malloc_r+0x198>
    4b74:	00bfff04 	movi	r2,-4
    4b78:	294b883a 	add	r5,r5,r5
    4b7c:	2088703a 	and	r4,r4,r2
    4b80:	28c4703a 	and	r2,r5,r3
    4b84:	21000104 	addi	r4,r4,4
    4b88:	1000041e 	bne	r2,zero,4b9c <_malloc_r+0x198>
    4b8c:	294b883a 	add	r5,r5,r5
    4b90:	28c4703a 	and	r2,r5,r3
    4b94:	21000104 	addi	r4,r4,4
    4b98:	103ffc26 	beq	r2,zero,4b8c <__ram_exceptions_end+0xfe002b6c>
    4b9c:	02bfff04 	movi	r10,-4
    4ba0:	024003c4 	movi	r9,15
    4ba4:	21800044 	addi	r6,r4,1
    4ba8:	318d883a 	add	r6,r6,r6
    4bac:	318d883a 	add	r6,r6,r6
    4bb0:	318d883a 	add	r6,r6,r6
    4bb4:	998d883a 	add	r6,r19,r6
    4bb8:	333ffe04 	addi	r12,r6,-8
    4bbc:	2017883a 	mov	r11,r4
    4bc0:	31800104 	addi	r6,r6,4
    4bc4:	34000017 	ldw	r16,0(r6)
    4bc8:	31fffd04 	addi	r7,r6,-12
    4bcc:	81c0041e 	bne	r16,r7,4be0 <_malloc_r+0x1dc>
    4bd0:	0000fb06 	br	4fc0 <_malloc_r+0x5bc>
    4bd4:	1801030e 	bge	r3,zero,4fe4 <_malloc_r+0x5e0>
    4bd8:	84000317 	ldw	r16,12(r16)
    4bdc:	81c0f826 	beq	r16,r7,4fc0 <_malloc_r+0x5bc>
    4be0:	80800117 	ldw	r2,4(r16)
    4be4:	1284703a 	and	r2,r2,r10
    4be8:	1447c83a 	sub	r3,r2,r17
    4bec:	48fff90e 	bge	r9,r3,4bd4 <__ram_exceptions_end+0xfe002bb4>
    4bf0:	80800317 	ldw	r2,12(r16)
    4bf4:	81000217 	ldw	r4,8(r16)
    4bf8:	89400054 	ori	r5,r17,1
    4bfc:	81400115 	stw	r5,4(r16)
    4c00:	20800315 	stw	r2,12(r4)
    4c04:	11000215 	stw	r4,8(r2)
    4c08:	8463883a 	add	r17,r16,r17
    4c0c:	9c400515 	stw	r17,20(r19)
    4c10:	9c400415 	stw	r17,16(r19)
    4c14:	18800054 	ori	r2,r3,1
    4c18:	88800115 	stw	r2,4(r17)
    4c1c:	8a000315 	stw	r8,12(r17)
    4c20:	8a000215 	stw	r8,8(r17)
    4c24:	88e3883a 	add	r17,r17,r3
    4c28:	88c00015 	stw	r3,0(r17)
    4c2c:	9009883a 	mov	r4,r18
    4c30:	0005e500 	call	5e50 <__malloc_unlock>
    4c34:	80800204 	addi	r2,r16,8
    4c38:	00001b06 	br	4ca8 <_malloc_r+0x2a4>
    4c3c:	04400404 	movi	r17,16
    4c40:	89402536 	bltu	r17,r5,4cd8 <_malloc_r+0x2d4>
    4c44:	0005e4c0 	call	5e4c <__malloc_lock>
    4c48:	00800184 	movi	r2,6
    4c4c:	01000084 	movi	r4,2
    4c50:	04c00034 	movhi	r19,0
    4c54:	1085883a 	add	r2,r2,r2
    4c58:	9cdf2304 	addi	r19,r19,31884
    4c5c:	1085883a 	add	r2,r2,r2
    4c60:	9885883a 	add	r2,r19,r2
    4c64:	14000117 	ldw	r16,4(r2)
    4c68:	10fffe04 	addi	r3,r2,-8
    4c6c:	80c0d926 	beq	r16,r3,4fd4 <_malloc_r+0x5d0>
    4c70:	80c00117 	ldw	r3,4(r16)
    4c74:	81000317 	ldw	r4,12(r16)
    4c78:	00bfff04 	movi	r2,-4
    4c7c:	1884703a 	and	r2,r3,r2
    4c80:	81400217 	ldw	r5,8(r16)
    4c84:	8085883a 	add	r2,r16,r2
    4c88:	10c00117 	ldw	r3,4(r2)
    4c8c:	29000315 	stw	r4,12(r5)
    4c90:	21400215 	stw	r5,8(r4)
    4c94:	18c00054 	ori	r3,r3,1
    4c98:	10c00115 	stw	r3,4(r2)
    4c9c:	9009883a 	mov	r4,r18
    4ca0:	0005e500 	call	5e50 <__malloc_unlock>
    4ca4:	80800204 	addi	r2,r16,8
    4ca8:	dfc00a17 	ldw	ra,40(sp)
    4cac:	df000917 	ldw	fp,36(sp)
    4cb0:	ddc00817 	ldw	r23,32(sp)
    4cb4:	dd800717 	ldw	r22,28(sp)
    4cb8:	dd400617 	ldw	r21,24(sp)
    4cbc:	dd000517 	ldw	r20,20(sp)
    4cc0:	dcc00417 	ldw	r19,16(sp)
    4cc4:	dc800317 	ldw	r18,12(sp)
    4cc8:	dc400217 	ldw	r17,8(sp)
    4ccc:	dc000117 	ldw	r16,4(sp)
    4cd0:	dec00b04 	addi	sp,sp,44
    4cd4:	f800283a 	ret
    4cd8:	00800304 	movi	r2,12
    4cdc:	90800015 	stw	r2,0(r18)
    4ce0:	0005883a 	mov	r2,zero
    4ce4:	003ff006 	br	4ca8 <__ram_exceptions_end+0xfe002c88>
    4ce8:	01002004 	movi	r4,128
    4cec:	02001004 	movi	r8,64
    4cf0:	01c00fc4 	movi	r7,63
    4cf4:	003f6106 	br	4a7c <__ram_exceptions_end+0xfe002a5c>
    4cf8:	4009883a 	mov	r4,r8
    4cfc:	003f7506 	br	4ad4 <__ram_exceptions_end+0xfe002ab4>
    4d00:	81000317 	ldw	r4,12(r16)
    4d04:	003fde06 	br	4c80 <__ram_exceptions_end+0xfe002c60>
    4d08:	81c5883a 	add	r2,r16,r7
    4d0c:	11400117 	ldw	r5,4(r2)
    4d10:	9009883a 	mov	r4,r18
    4d14:	29400054 	ori	r5,r5,1
    4d18:	11400115 	stw	r5,4(r2)
    4d1c:	0005e500 	call	5e50 <__malloc_unlock>
    4d20:	80800204 	addi	r2,r16,8
    4d24:	003fe006 	br	4ca8 <__ram_exceptions_end+0xfe002c88>
    4d28:	9c000217 	ldw	r16,8(r19)
    4d2c:	00bfff04 	movi	r2,-4
    4d30:	85800117 	ldw	r22,4(r16)
    4d34:	b0ac703a 	and	r22,r22,r2
    4d38:	b4400336 	bltu	r22,r17,4d48 <_malloc_r+0x344>
    4d3c:	b445c83a 	sub	r2,r22,r17
    4d40:	00c003c4 	movi	r3,15
    4d44:	18805d16 	blt	r3,r2,4ebc <_malloc_r+0x4b8>
    4d48:	05c00074 	movhi	r23,1
    4d4c:	00800074 	movhi	r2,1
    4d50:	10a4f004 	addi	r2,r2,-27712
    4d54:	bde17204 	addi	r23,r23,-31288
    4d58:	15400017 	ldw	r21,0(r2)
    4d5c:	b8c00017 	ldw	r3,0(r23)
    4d60:	00bfffc4 	movi	r2,-1
    4d64:	858d883a 	add	r6,r16,r22
    4d68:	8d6b883a 	add	r21,r17,r21
    4d6c:	1880ea26 	beq	r3,r2,5118 <_malloc_r+0x714>
    4d70:	ad4403c4 	addi	r21,r21,4111
    4d74:	00bc0004 	movi	r2,-4096
    4d78:	a8aa703a 	and	r21,r21,r2
    4d7c:	a80b883a 	mov	r5,r21
    4d80:	9009883a 	mov	r4,r18
    4d84:	d9800015 	stw	r6,0(sp)
    4d88:	00055280 	call	5528 <_sbrk_r>
    4d8c:	1029883a 	mov	r20,r2
    4d90:	00bfffc4 	movi	r2,-1
    4d94:	d9800017 	ldw	r6,0(sp)
    4d98:	a080e826 	beq	r20,r2,513c <_malloc_r+0x738>
    4d9c:	a180a636 	bltu	r20,r6,5038 <_malloc_r+0x634>
    4da0:	07000074 	movhi	fp,1
    4da4:	e7253c04 	addi	fp,fp,-27408
    4da8:	e0800017 	ldw	r2,0(fp)
    4dac:	a887883a 	add	r3,r21,r2
    4db0:	e0c00015 	stw	r3,0(fp)
    4db4:	3500e626 	beq	r6,r20,5150 <_malloc_r+0x74c>
    4db8:	b9000017 	ldw	r4,0(r23)
    4dbc:	00bfffc4 	movi	r2,-1
    4dc0:	2080ee26 	beq	r4,r2,517c <_malloc_r+0x778>
    4dc4:	a185c83a 	sub	r2,r20,r6
    4dc8:	10c5883a 	add	r2,r2,r3
    4dcc:	e0800015 	stw	r2,0(fp)
    4dd0:	a0c001cc 	andi	r3,r20,7
    4dd4:	1800bc26 	beq	r3,zero,50c8 <_malloc_r+0x6c4>
    4dd8:	a0e9c83a 	sub	r20,r20,r3
    4ddc:	00840204 	movi	r2,4104
    4de0:	a5000204 	addi	r20,r20,8
    4de4:	10c7c83a 	sub	r3,r2,r3
    4de8:	a545883a 	add	r2,r20,r21
    4dec:	1083ffcc 	andi	r2,r2,4095
    4df0:	18abc83a 	sub	r21,r3,r2
    4df4:	a80b883a 	mov	r5,r21
    4df8:	9009883a 	mov	r4,r18
    4dfc:	00055280 	call	5528 <_sbrk_r>
    4e00:	00ffffc4 	movi	r3,-1
    4e04:	10c0e126 	beq	r2,r3,518c <_malloc_r+0x788>
    4e08:	1505c83a 	sub	r2,r2,r20
    4e0c:	1545883a 	add	r2,r2,r21
    4e10:	10800054 	ori	r2,r2,1
    4e14:	e0c00017 	ldw	r3,0(fp)
    4e18:	9d000215 	stw	r20,8(r19)
    4e1c:	a0800115 	stw	r2,4(r20)
    4e20:	a8c7883a 	add	r3,r21,r3
    4e24:	e0c00015 	stw	r3,0(fp)
    4e28:	84c00e26 	beq	r16,r19,4e64 <_malloc_r+0x460>
    4e2c:	018003c4 	movi	r6,15
    4e30:	3580a72e 	bgeu	r6,r22,50d0 <_malloc_r+0x6cc>
    4e34:	81400117 	ldw	r5,4(r16)
    4e38:	013ffe04 	movi	r4,-8
    4e3c:	b0bffd04 	addi	r2,r22,-12
    4e40:	1104703a 	and	r2,r2,r4
    4e44:	2900004c 	andi	r4,r5,1
    4e48:	2088b03a 	or	r4,r4,r2
    4e4c:	81000115 	stw	r4,4(r16)
    4e50:	01400144 	movi	r5,5
    4e54:	8089883a 	add	r4,r16,r2
    4e58:	21400115 	stw	r5,4(r4)
    4e5c:	21400215 	stw	r5,8(r4)
    4e60:	3080cd36 	bltu	r6,r2,5198 <_malloc_r+0x794>
    4e64:	00800074 	movhi	r2,1
    4e68:	10a4ef04 	addi	r2,r2,-27716
    4e6c:	11000017 	ldw	r4,0(r2)
    4e70:	20c0012e 	bgeu	r4,r3,4e78 <_malloc_r+0x474>
    4e74:	10c00015 	stw	r3,0(r2)
    4e78:	00800074 	movhi	r2,1
    4e7c:	10a4ee04 	addi	r2,r2,-27720
    4e80:	11000017 	ldw	r4,0(r2)
    4e84:	9c000217 	ldw	r16,8(r19)
    4e88:	20c0012e 	bgeu	r4,r3,4e90 <_malloc_r+0x48c>
    4e8c:	10c00015 	stw	r3,0(r2)
    4e90:	80c00117 	ldw	r3,4(r16)
    4e94:	00bfff04 	movi	r2,-4
    4e98:	1886703a 	and	r3,r3,r2
    4e9c:	1c45c83a 	sub	r2,r3,r17
    4ea0:	1c400236 	bltu	r3,r17,4eac <_malloc_r+0x4a8>
    4ea4:	00c003c4 	movi	r3,15
    4ea8:	18800416 	blt	r3,r2,4ebc <_malloc_r+0x4b8>
    4eac:	9009883a 	mov	r4,r18
    4eb0:	0005e500 	call	5e50 <__malloc_unlock>
    4eb4:	0005883a 	mov	r2,zero
    4eb8:	003f7b06 	br	4ca8 <__ram_exceptions_end+0xfe002c88>
    4ebc:	88c00054 	ori	r3,r17,1
    4ec0:	80c00115 	stw	r3,4(r16)
    4ec4:	8463883a 	add	r17,r16,r17
    4ec8:	10800054 	ori	r2,r2,1
    4ecc:	9c400215 	stw	r17,8(r19)
    4ed0:	88800115 	stw	r2,4(r17)
    4ed4:	9009883a 	mov	r4,r18
    4ed8:	0005e500 	call	5e50 <__malloc_unlock>
    4edc:	80800204 	addi	r2,r16,8
    4ee0:	003f7106 	br	4ca8 <__ram_exceptions_end+0xfe002c88>
    4ee4:	00c00504 	movi	r3,20
    4ee8:	18804a2e 	bgeu	r3,r2,5014 <_malloc_r+0x610>
    4eec:	00c01504 	movi	r3,84
    4ef0:	18806e36 	bltu	r3,r2,50ac <_malloc_r+0x6a8>
    4ef4:	8804d33a 	srli	r2,r17,12
    4ef8:	12001bc4 	addi	r8,r2,111
    4efc:	11c01b84 	addi	r7,r2,110
    4f00:	4209883a 	add	r4,r8,r8
    4f04:	003edd06 	br	4a7c <__ram_exceptions_end+0xfe002a5c>
    4f08:	3804d27a 	srli	r2,r7,9
    4f0c:	00c00104 	movi	r3,4
    4f10:	1880442e 	bgeu	r3,r2,5024 <_malloc_r+0x620>
    4f14:	00c00504 	movi	r3,20
    4f18:	18808136 	bltu	r3,r2,5120 <_malloc_r+0x71c>
    4f1c:	11401704 	addi	r5,r2,92
    4f20:	10c016c4 	addi	r3,r2,91
    4f24:	294b883a 	add	r5,r5,r5
    4f28:	294b883a 	add	r5,r5,r5
    4f2c:	294b883a 	add	r5,r5,r5
    4f30:	994b883a 	add	r5,r19,r5
    4f34:	28800017 	ldw	r2,0(r5)
    4f38:	01800034 	movhi	r6,0
    4f3c:	297ffe04 	addi	r5,r5,-8
    4f40:	319f2304 	addi	r6,r6,31884
    4f44:	28806526 	beq	r5,r2,50dc <_malloc_r+0x6d8>
    4f48:	01bfff04 	movi	r6,-4
    4f4c:	10c00117 	ldw	r3,4(r2)
    4f50:	1986703a 	and	r3,r3,r6
    4f54:	38c0022e 	bgeu	r7,r3,4f60 <_malloc_r+0x55c>
    4f58:	10800217 	ldw	r2,8(r2)
    4f5c:	28bffb1e 	bne	r5,r2,4f4c <__ram_exceptions_end+0xfe002f2c>
    4f60:	11400317 	ldw	r5,12(r2)
    4f64:	98c00117 	ldw	r3,4(r19)
    4f68:	81400315 	stw	r5,12(r16)
    4f6c:	80800215 	stw	r2,8(r16)
    4f70:	2c000215 	stw	r16,8(r5)
    4f74:	14000315 	stw	r16,12(r2)
    4f78:	003ef806 	br	4b5c <__ram_exceptions_end+0xfe002b3c>
    4f7c:	88c00054 	ori	r3,r17,1
    4f80:	80c00115 	stw	r3,4(r16)
    4f84:	8463883a 	add	r17,r16,r17
    4f88:	34400515 	stw	r17,20(r6)
    4f8c:	34400415 	stw	r17,16(r6)
    4f90:	10c00054 	ori	r3,r2,1
    4f94:	8a000315 	stw	r8,12(r17)
    4f98:	8a000215 	stw	r8,8(r17)
    4f9c:	88c00115 	stw	r3,4(r17)
    4fa0:	88a3883a 	add	r17,r17,r2
    4fa4:	88800015 	stw	r2,0(r17)
    4fa8:	9009883a 	mov	r4,r18
    4fac:	0005e500 	call	5e50 <__malloc_unlock>
    4fb0:	80800204 	addi	r2,r16,8
    4fb4:	003f3c06 	br	4ca8 <__ram_exceptions_end+0xfe002c88>
    4fb8:	30c00117 	ldw	r3,4(r6)
    4fbc:	003ee706 	br	4b5c <__ram_exceptions_end+0xfe002b3c>
    4fc0:	5ac00044 	addi	r11,r11,1
    4fc4:	588000cc 	andi	r2,r11,3
    4fc8:	31800204 	addi	r6,r6,8
    4fcc:	103efd1e 	bne	r2,zero,4bc4 <__ram_exceptions_end+0xfe002ba4>
    4fd0:	00002406 	br	5064 <_malloc_r+0x660>
    4fd4:	14000317 	ldw	r16,12(r2)
    4fd8:	143f251e 	bne	r2,r16,4c70 <__ram_exceptions_end+0xfe002c50>
    4fdc:	21000084 	addi	r4,r4,2
    4fe0:	003ebc06 	br	4ad4 <__ram_exceptions_end+0xfe002ab4>
    4fe4:	8085883a 	add	r2,r16,r2
    4fe8:	10c00117 	ldw	r3,4(r2)
    4fec:	81000317 	ldw	r4,12(r16)
    4ff0:	81400217 	ldw	r5,8(r16)
    4ff4:	18c00054 	ori	r3,r3,1
    4ff8:	10c00115 	stw	r3,4(r2)
    4ffc:	29000315 	stw	r4,12(r5)
    5000:	21400215 	stw	r5,8(r4)
    5004:	9009883a 	mov	r4,r18
    5008:	0005e500 	call	5e50 <__malloc_unlock>
    500c:	80800204 	addi	r2,r16,8
    5010:	003f2506 	br	4ca8 <__ram_exceptions_end+0xfe002c88>
    5014:	12001704 	addi	r8,r2,92
    5018:	11c016c4 	addi	r7,r2,91
    501c:	4209883a 	add	r4,r8,r8
    5020:	003e9606 	br	4a7c <__ram_exceptions_end+0xfe002a5c>
    5024:	3804d1ba 	srli	r2,r7,6
    5028:	11400e44 	addi	r5,r2,57
    502c:	10c00e04 	addi	r3,r2,56
    5030:	294b883a 	add	r5,r5,r5
    5034:	003fbc06 	br	4f28 <__ram_exceptions_end+0xfe002f08>
    5038:	84ff5926 	beq	r16,r19,4da0 <__ram_exceptions_end+0xfe002d80>
    503c:	00800034 	movhi	r2,0
    5040:	109f2304 	addi	r2,r2,31884
    5044:	14000217 	ldw	r16,8(r2)
    5048:	00bfff04 	movi	r2,-4
    504c:	80c00117 	ldw	r3,4(r16)
    5050:	1886703a 	and	r3,r3,r2
    5054:	003f9106 	br	4e9c <__ram_exceptions_end+0xfe002e7c>
    5058:	60800217 	ldw	r2,8(r12)
    505c:	213fffc4 	addi	r4,r4,-1
    5060:	1300651e 	bne	r2,r12,51f8 <_malloc_r+0x7f4>
    5064:	208000cc 	andi	r2,r4,3
    5068:	633ffe04 	addi	r12,r12,-8
    506c:	103ffa1e 	bne	r2,zero,5058 <__ram_exceptions_end+0xfe003038>
    5070:	98800117 	ldw	r2,4(r19)
    5074:	0146303a 	nor	r3,zero,r5
    5078:	1884703a 	and	r2,r3,r2
    507c:	98800115 	stw	r2,4(r19)
    5080:	294b883a 	add	r5,r5,r5
    5084:	117f2836 	bltu	r2,r5,4d28 <__ram_exceptions_end+0xfe002d08>
    5088:	283f2726 	beq	r5,zero,4d28 <__ram_exceptions_end+0xfe002d08>
    508c:	2886703a 	and	r3,r5,r2
    5090:	5809883a 	mov	r4,r11
    5094:	183ec31e 	bne	r3,zero,4ba4 <__ram_exceptions_end+0xfe002b84>
    5098:	294b883a 	add	r5,r5,r5
    509c:	2886703a 	and	r3,r5,r2
    50a0:	21000104 	addi	r4,r4,4
    50a4:	183ffc26 	beq	r3,zero,5098 <__ram_exceptions_end+0xfe003078>
    50a8:	003ebe06 	br	4ba4 <__ram_exceptions_end+0xfe002b84>
    50ac:	00c05504 	movi	r3,340
    50b0:	18801236 	bltu	r3,r2,50fc <_malloc_r+0x6f8>
    50b4:	8804d3fa 	srli	r2,r17,15
    50b8:	12001e04 	addi	r8,r2,120
    50bc:	11c01dc4 	addi	r7,r2,119
    50c0:	4209883a 	add	r4,r8,r8
    50c4:	003e6d06 	br	4a7c <__ram_exceptions_end+0xfe002a5c>
    50c8:	00c40004 	movi	r3,4096
    50cc:	003f4606 	br	4de8 <__ram_exceptions_end+0xfe002dc8>
    50d0:	00800044 	movi	r2,1
    50d4:	a0800115 	stw	r2,4(r20)
    50d8:	003f7406 	br	4eac <__ram_exceptions_end+0xfe002e8c>
    50dc:	1805d0ba 	srai	r2,r3,2
    50e0:	01c00044 	movi	r7,1
    50e4:	30c00117 	ldw	r3,4(r6)
    50e8:	388e983a 	sll	r7,r7,r2
    50ec:	2805883a 	mov	r2,r5
    50f0:	38c6b03a 	or	r3,r7,r3
    50f4:	30c00115 	stw	r3,4(r6)
    50f8:	003f9b06 	br	4f68 <__ram_exceptions_end+0xfe002f48>
    50fc:	00c15504 	movi	r3,1364
    5100:	18801a36 	bltu	r3,r2,516c <_malloc_r+0x768>
    5104:	8804d4ba 	srli	r2,r17,18
    5108:	12001f44 	addi	r8,r2,125
    510c:	11c01f04 	addi	r7,r2,124
    5110:	4209883a 	add	r4,r8,r8
    5114:	003e5906 	br	4a7c <__ram_exceptions_end+0xfe002a5c>
    5118:	ad400404 	addi	r21,r21,16
    511c:	003f1706 	br	4d7c <__ram_exceptions_end+0xfe002d5c>
    5120:	00c01504 	movi	r3,84
    5124:	18802336 	bltu	r3,r2,51b4 <_malloc_r+0x7b0>
    5128:	3804d33a 	srli	r2,r7,12
    512c:	11401bc4 	addi	r5,r2,111
    5130:	10c01b84 	addi	r3,r2,110
    5134:	294b883a 	add	r5,r5,r5
    5138:	003f7b06 	br	4f28 <__ram_exceptions_end+0xfe002f08>
    513c:	9c000217 	ldw	r16,8(r19)
    5140:	00bfff04 	movi	r2,-4
    5144:	80c00117 	ldw	r3,4(r16)
    5148:	1886703a 	and	r3,r3,r2
    514c:	003f5306 	br	4e9c <__ram_exceptions_end+0xfe002e7c>
    5150:	3083ffcc 	andi	r2,r6,4095
    5154:	103f181e 	bne	r2,zero,4db8 <__ram_exceptions_end+0xfe002d98>
    5158:	99000217 	ldw	r4,8(r19)
    515c:	b545883a 	add	r2,r22,r21
    5160:	10800054 	ori	r2,r2,1
    5164:	20800115 	stw	r2,4(r4)
    5168:	003f3e06 	br	4e64 <__ram_exceptions_end+0xfe002e44>
    516c:	01003f84 	movi	r4,254
    5170:	02001fc4 	movi	r8,127
    5174:	01c01f84 	movi	r7,126
    5178:	003e4006 	br	4a7c <__ram_exceptions_end+0xfe002a5c>
    517c:	00800074 	movhi	r2,1
    5180:	10a17204 	addi	r2,r2,-31288
    5184:	15000015 	stw	r20,0(r2)
    5188:	003f1106 	br	4dd0 <__ram_exceptions_end+0xfe002db0>
    518c:	00800044 	movi	r2,1
    5190:	002b883a 	mov	r21,zero
    5194:	003f1f06 	br	4e14 <__ram_exceptions_end+0xfe002df4>
    5198:	81400204 	addi	r5,r16,8
    519c:	9009883a 	mov	r4,r18
    51a0:	00043b00 	call	43b0 <_free_r>
    51a4:	00800074 	movhi	r2,1
    51a8:	10a53c04 	addi	r2,r2,-27408
    51ac:	10c00017 	ldw	r3,0(r2)
    51b0:	003f2c06 	br	4e64 <__ram_exceptions_end+0xfe002e44>
    51b4:	00c05504 	movi	r3,340
    51b8:	18800536 	bltu	r3,r2,51d0 <_malloc_r+0x7cc>
    51bc:	3804d3fa 	srli	r2,r7,15
    51c0:	11401e04 	addi	r5,r2,120
    51c4:	10c01dc4 	addi	r3,r2,119
    51c8:	294b883a 	add	r5,r5,r5
    51cc:	003f5606 	br	4f28 <__ram_exceptions_end+0xfe002f08>
    51d0:	00c15504 	movi	r3,1364
    51d4:	18800536 	bltu	r3,r2,51ec <_malloc_r+0x7e8>
    51d8:	3804d4ba 	srli	r2,r7,18
    51dc:	11401f44 	addi	r5,r2,125
    51e0:	10c01f04 	addi	r3,r2,124
    51e4:	294b883a 	add	r5,r5,r5
    51e8:	003f4f06 	br	4f28 <__ram_exceptions_end+0xfe002f08>
    51ec:	01403f84 	movi	r5,254
    51f0:	00c01f84 	movi	r3,126
    51f4:	003f4c06 	br	4f28 <__ram_exceptions_end+0xfe002f08>
    51f8:	98800117 	ldw	r2,4(r19)
    51fc:	003fa006 	br	5080 <__ram_exceptions_end+0xfe003060>
    5200:	8808d0fa 	srli	r4,r17,3
    5204:	20800044 	addi	r2,r4,1
    5208:	1085883a 	add	r2,r2,r2
    520c:	003e9006 	br	4c50 <__ram_exceptions_end+0xfe002c30>

00005210 <memset>:
    5210:	20c000cc 	andi	r3,r4,3
    5214:	2005883a 	mov	r2,r4
    5218:	18004426 	beq	r3,zero,532c <memset+0x11c>
    521c:	31ffffc4 	addi	r7,r6,-1
    5220:	30004026 	beq	r6,zero,5324 <memset+0x114>
    5224:	2813883a 	mov	r9,r5
    5228:	200d883a 	mov	r6,r4
    522c:	2007883a 	mov	r3,r4
    5230:	00000406 	br	5244 <memset+0x34>
    5234:	3a3fffc4 	addi	r8,r7,-1
    5238:	31800044 	addi	r6,r6,1
    523c:	38003926 	beq	r7,zero,5324 <memset+0x114>
    5240:	400f883a 	mov	r7,r8
    5244:	18c00044 	addi	r3,r3,1
    5248:	32400005 	stb	r9,0(r6)
    524c:	1a0000cc 	andi	r8,r3,3
    5250:	403ff81e 	bne	r8,zero,5234 <__ram_exceptions_end+0xfe003214>
    5254:	010000c4 	movi	r4,3
    5258:	21c02d2e 	bgeu	r4,r7,5310 <memset+0x100>
    525c:	29003fcc 	andi	r4,r5,255
    5260:	200c923a 	slli	r6,r4,8
    5264:	3108b03a 	or	r4,r6,r4
    5268:	200c943a 	slli	r6,r4,16
    526c:	218cb03a 	or	r6,r4,r6
    5270:	010003c4 	movi	r4,15
    5274:	21c0182e 	bgeu	r4,r7,52d8 <memset+0xc8>
    5278:	3b3ffc04 	addi	r12,r7,-16
    527c:	6018d13a 	srli	r12,r12,4
    5280:	1a000104 	addi	r8,r3,4
    5284:	1ac00204 	addi	r11,r3,8
    5288:	6008913a 	slli	r4,r12,4
    528c:	1a800304 	addi	r10,r3,12
    5290:	1813883a 	mov	r9,r3
    5294:	21000504 	addi	r4,r4,20
    5298:	1909883a 	add	r4,r3,r4
    529c:	49800015 	stw	r6,0(r9)
    52a0:	41800015 	stw	r6,0(r8)
    52a4:	59800015 	stw	r6,0(r11)
    52a8:	51800015 	stw	r6,0(r10)
    52ac:	42000404 	addi	r8,r8,16
    52b0:	4a400404 	addi	r9,r9,16
    52b4:	5ac00404 	addi	r11,r11,16
    52b8:	52800404 	addi	r10,r10,16
    52bc:	413ff71e 	bne	r8,r4,529c <__ram_exceptions_end+0xfe00327c>
    52c0:	63000044 	addi	r12,r12,1
    52c4:	6018913a 	slli	r12,r12,4
    52c8:	39c003cc 	andi	r7,r7,15
    52cc:	010000c4 	movi	r4,3
    52d0:	1b07883a 	add	r3,r3,r12
    52d4:	21c00e2e 	bgeu	r4,r7,5310 <memset+0x100>
    52d8:	1813883a 	mov	r9,r3
    52dc:	3811883a 	mov	r8,r7
    52e0:	010000c4 	movi	r4,3
    52e4:	49800015 	stw	r6,0(r9)
    52e8:	423fff04 	addi	r8,r8,-4
    52ec:	4a400104 	addi	r9,r9,4
    52f0:	223ffc36 	bltu	r4,r8,52e4 <__ram_exceptions_end+0xfe0032c4>
    52f4:	393fff04 	addi	r4,r7,-4
    52f8:	2008d0ba 	srli	r4,r4,2
    52fc:	39c000cc 	andi	r7,r7,3
    5300:	21000044 	addi	r4,r4,1
    5304:	2109883a 	add	r4,r4,r4
    5308:	2109883a 	add	r4,r4,r4
    530c:	1907883a 	add	r3,r3,r4
    5310:	38000526 	beq	r7,zero,5328 <memset+0x118>
    5314:	19cf883a 	add	r7,r3,r7
    5318:	19400005 	stb	r5,0(r3)
    531c:	18c00044 	addi	r3,r3,1
    5320:	38fffd1e 	bne	r7,r3,5318 <__ram_exceptions_end+0xfe0032f8>
    5324:	f800283a 	ret
    5328:	f800283a 	ret
    532c:	2007883a 	mov	r3,r4
    5330:	300f883a 	mov	r7,r6
    5334:	003fc706 	br	5254 <__ram_exceptions_end+0xfe003234>

00005338 <lflush>:
    5338:	2080030b 	ldhu	r2,12(r4)
    533c:	00c00244 	movi	r3,9
    5340:	1080024c 	andi	r2,r2,9
    5344:	10c00226 	beq	r2,r3,5350 <lflush+0x18>
    5348:	0005883a 	mov	r2,zero
    534c:	f800283a 	ret
    5350:	0003eac1 	jmpi	3eac <fflush>

00005354 <__srefill_r>:
    5354:	defffc04 	addi	sp,sp,-16
    5358:	dc400115 	stw	r17,4(sp)
    535c:	dc000015 	stw	r16,0(sp)
    5360:	dfc00315 	stw	ra,12(sp)
    5364:	dc800215 	stw	r18,8(sp)
    5368:	2023883a 	mov	r17,r4
    536c:	2821883a 	mov	r16,r5
    5370:	20000226 	beq	r4,zero,537c <__srefill_r+0x28>
    5374:	20800e17 	ldw	r2,56(r4)
    5378:	10003c26 	beq	r2,zero,546c <__srefill_r+0x118>
    537c:	80c0030b 	ldhu	r3,12(r16)
    5380:	1908000c 	andi	r4,r3,8192
    5384:	1805883a 	mov	r2,r3
    5388:	2000071e 	bne	r4,zero,53a8 <__srefill_r+0x54>
    538c:	81001917 	ldw	r4,100(r16)
    5390:	18880014 	ori	r2,r3,8192
    5394:	00f7ffc4 	movi	r3,-8193
    5398:	20c8703a 	and	r4,r4,r3
    539c:	8080030d 	sth	r2,12(r16)
    53a0:	1007883a 	mov	r3,r2
    53a4:	81001915 	stw	r4,100(r16)
    53a8:	80000115 	stw	zero,4(r16)
    53ac:	1100080c 	andi	r4,r2,32
    53b0:	2000571e 	bne	r4,zero,5510 <__srefill_r+0x1bc>
    53b4:	1100010c 	andi	r4,r2,4
    53b8:	20001f26 	beq	r4,zero,5438 <__srefill_r+0xe4>
    53bc:	81400c17 	ldw	r5,48(r16)
    53c0:	28000826 	beq	r5,zero,53e4 <__srefill_r+0x90>
    53c4:	80801004 	addi	r2,r16,64
    53c8:	28800226 	beq	r5,r2,53d4 <__srefill_r+0x80>
    53cc:	8809883a 	mov	r4,r17
    53d0:	00043b00 	call	43b0 <_free_r>
    53d4:	80800f17 	ldw	r2,60(r16)
    53d8:	80000c15 	stw	zero,48(r16)
    53dc:	80800115 	stw	r2,4(r16)
    53e0:	1000391e 	bne	r2,zero,54c8 <__srefill_r+0x174>
    53e4:	80800417 	ldw	r2,16(r16)
    53e8:	10004b26 	beq	r2,zero,5518 <__srefill_r+0x1c4>
    53ec:	8480030b 	ldhu	r18,12(r16)
    53f0:	908000cc 	andi	r2,r18,3
    53f4:	10001f1e 	bne	r2,zero,5474 <__srefill_r+0x120>
    53f8:	81800417 	ldw	r6,16(r16)
    53fc:	80800817 	ldw	r2,32(r16)
    5400:	81c00517 	ldw	r7,20(r16)
    5404:	81400717 	ldw	r5,28(r16)
    5408:	81800015 	stw	r6,0(r16)
    540c:	8809883a 	mov	r4,r17
    5410:	103ee83a 	callr	r2
    5414:	80800115 	stw	r2,4(r16)
    5418:	00800e0e 	bge	zero,r2,5454 <__srefill_r+0x100>
    541c:	0005883a 	mov	r2,zero
    5420:	dfc00317 	ldw	ra,12(sp)
    5424:	dc800217 	ldw	r18,8(sp)
    5428:	dc400117 	ldw	r17,4(sp)
    542c:	dc000017 	ldw	r16,0(sp)
    5430:	dec00404 	addi	sp,sp,16
    5434:	f800283a 	ret
    5438:	1100040c 	andi	r4,r2,16
    543c:	20003026 	beq	r4,zero,5500 <__srefill_r+0x1ac>
    5440:	1080020c 	andi	r2,r2,8
    5444:	1000241e 	bne	r2,zero,54d8 <__srefill_r+0x184>
    5448:	18c00114 	ori	r3,r3,4
    544c:	80c0030d 	sth	r3,12(r16)
    5450:	003fe406 	br	53e4 <__ram_exceptions_end+0xfe0033c4>
    5454:	80c0030b 	ldhu	r3,12(r16)
    5458:	1000161e 	bne	r2,zero,54b4 <__srefill_r+0x160>
    545c:	18c00814 	ori	r3,r3,32
    5460:	00bfffc4 	movi	r2,-1
    5464:	80c0030d 	sth	r3,12(r16)
    5468:	003fed06 	br	5420 <__ram_exceptions_end+0xfe003400>
    546c:	000423c0 	call	423c <__sinit>
    5470:	003fc206 	br	537c <__ram_exceptions_end+0xfe00335c>
    5474:	00800074 	movhi	r2,1
    5478:	10a17004 	addi	r2,r2,-31296
    547c:	11000017 	ldw	r4,0(r2)
    5480:	01400034 	movhi	r5,0
    5484:	00800044 	movi	r2,1
    5488:	2954ce04 	addi	r5,r5,21304
    548c:	8080030d 	sth	r2,12(r16)
    5490:	00046c00 	call	46c0 <_fwalk>
    5494:	00800244 	movi	r2,9
    5498:	8480030d 	sth	r18,12(r16)
    549c:	9480024c 	andi	r18,r18,9
    54a0:	90bfd51e 	bne	r18,r2,53f8 <__ram_exceptions_end+0xfe0033d8>
    54a4:	800b883a 	mov	r5,r16
    54a8:	8809883a 	mov	r4,r17
    54ac:	0003c340 	call	3c34 <__sflush_r>
    54b0:	003fd106 	br	53f8 <__ram_exceptions_end+0xfe0033d8>
    54b4:	18c01014 	ori	r3,r3,64
    54b8:	80000115 	stw	zero,4(r16)
    54bc:	00bfffc4 	movi	r2,-1
    54c0:	80c0030d 	sth	r3,12(r16)
    54c4:	003fd606 	br	5420 <__ram_exceptions_end+0xfe003400>
    54c8:	80c00e17 	ldw	r3,56(r16)
    54cc:	0005883a 	mov	r2,zero
    54d0:	80c00015 	stw	r3,0(r16)
    54d4:	003fd206 	br	5420 <__ram_exceptions_end+0xfe003400>
    54d8:	800b883a 	mov	r5,r16
    54dc:	8809883a 	mov	r4,r17
    54e0:	0003e500 	call	3e50 <_fflush_r>
    54e4:	10000a1e 	bne	r2,zero,5510 <__srefill_r+0x1bc>
    54e8:	8080030b 	ldhu	r2,12(r16)
    54ec:	00fffdc4 	movi	r3,-9
    54f0:	80000215 	stw	zero,8(r16)
    54f4:	1886703a 	and	r3,r3,r2
    54f8:	80000615 	stw	zero,24(r16)
    54fc:	003fd206 	br	5448 <__ram_exceptions_end+0xfe003428>
    5500:	00800244 	movi	r2,9
    5504:	88800015 	stw	r2,0(r17)
    5508:	18c01014 	ori	r3,r3,64
    550c:	80c0030d 	sth	r3,12(r16)
    5510:	00bfffc4 	movi	r2,-1
    5514:	003fc206 	br	5420 <__ram_exceptions_end+0xfe003400>
    5518:	800b883a 	mov	r5,r16
    551c:	8809883a 	mov	r4,r17
    5520:	00048480 	call	4848 <__smakebuf_r>
    5524:	003fb106 	br	53ec <__ram_exceptions_end+0xfe0033cc>

00005528 <_sbrk_r>:
    5528:	defffd04 	addi	sp,sp,-12
    552c:	dc000015 	stw	r16,0(sp)
    5530:	04000074 	movhi	r16,1
    5534:	dc400115 	stw	r17,4(sp)
    5538:	8424f104 	addi	r16,r16,-27708
    553c:	2023883a 	mov	r17,r4
    5540:	2809883a 	mov	r4,r5
    5544:	dfc00215 	stw	ra,8(sp)
    5548:	80000015 	stw	zero,0(r16)
    554c:	0005fc40 	call	5fc4 <sbrk>
    5550:	00ffffc4 	movi	r3,-1
    5554:	10c00526 	beq	r2,r3,556c <_sbrk_r+0x44>
    5558:	dfc00217 	ldw	ra,8(sp)
    555c:	dc400117 	ldw	r17,4(sp)
    5560:	dc000017 	ldw	r16,0(sp)
    5564:	dec00304 	addi	sp,sp,12
    5568:	f800283a 	ret
    556c:	80c00017 	ldw	r3,0(r16)
    5570:	183ff926 	beq	r3,zero,5558 <__ram_exceptions_end+0xfe003538>
    5574:	88c00015 	stw	r3,0(r17)
    5578:	003ff706 	br	5558 <__ram_exceptions_end+0xfe003538>

0000557c <__sread>:
    557c:	defffe04 	addi	sp,sp,-8
    5580:	dc000015 	stw	r16,0(sp)
    5584:	2821883a 	mov	r16,r5
    5588:	2940038f 	ldh	r5,14(r5)
    558c:	dfc00115 	stw	ra,4(sp)
    5590:	00059800 	call	5980 <_read_r>
    5594:	10000716 	blt	r2,zero,55b4 <__sread+0x38>
    5598:	80c01417 	ldw	r3,80(r16)
    559c:	1887883a 	add	r3,r3,r2
    55a0:	80c01415 	stw	r3,80(r16)
    55a4:	dfc00117 	ldw	ra,4(sp)
    55a8:	dc000017 	ldw	r16,0(sp)
    55ac:	dec00204 	addi	sp,sp,8
    55b0:	f800283a 	ret
    55b4:	80c0030b 	ldhu	r3,12(r16)
    55b8:	18fbffcc 	andi	r3,r3,61439
    55bc:	80c0030d 	sth	r3,12(r16)
    55c0:	dfc00117 	ldw	ra,4(sp)
    55c4:	dc000017 	ldw	r16,0(sp)
    55c8:	dec00204 	addi	sp,sp,8
    55cc:	f800283a 	ret

000055d0 <__seofread>:
    55d0:	0005883a 	mov	r2,zero
    55d4:	f800283a 	ret

000055d8 <__swrite>:
    55d8:	2880030b 	ldhu	r2,12(r5)
    55dc:	defffb04 	addi	sp,sp,-20
    55e0:	dcc00315 	stw	r19,12(sp)
    55e4:	dc800215 	stw	r18,8(sp)
    55e8:	dc400115 	stw	r17,4(sp)
    55ec:	dc000015 	stw	r16,0(sp)
    55f0:	dfc00415 	stw	ra,16(sp)
    55f4:	10c0400c 	andi	r3,r2,256
    55f8:	2821883a 	mov	r16,r5
    55fc:	2023883a 	mov	r17,r4
    5600:	3025883a 	mov	r18,r6
    5604:	3827883a 	mov	r19,r7
    5608:	18000526 	beq	r3,zero,5620 <__swrite+0x48>
    560c:	2940038f 	ldh	r5,14(r5)
    5610:	01c00084 	movi	r7,2
    5614:	000d883a 	mov	r6,zero
    5618:	00059200 	call	5920 <_lseek_r>
    561c:	8080030b 	ldhu	r2,12(r16)
    5620:	8140038f 	ldh	r5,14(r16)
    5624:	10bbffcc 	andi	r2,r2,61439
    5628:	980f883a 	mov	r7,r19
    562c:	900d883a 	mov	r6,r18
    5630:	8809883a 	mov	r4,r17
    5634:	8080030d 	sth	r2,12(r16)
    5638:	dfc00417 	ldw	ra,16(sp)
    563c:	dcc00317 	ldw	r19,12(sp)
    5640:	dc800217 	ldw	r18,8(sp)
    5644:	dc400117 	ldw	r17,4(sp)
    5648:	dc000017 	ldw	r16,0(sp)
    564c:	dec00504 	addi	sp,sp,20
    5650:	00056b81 	jmpi	56b8 <_write_r>

00005654 <__sseek>:
    5654:	defffe04 	addi	sp,sp,-8
    5658:	dc000015 	stw	r16,0(sp)
    565c:	2821883a 	mov	r16,r5
    5660:	2940038f 	ldh	r5,14(r5)
    5664:	dfc00115 	stw	ra,4(sp)
    5668:	00059200 	call	5920 <_lseek_r>
    566c:	00ffffc4 	movi	r3,-1
    5670:	10c00826 	beq	r2,r3,5694 <__sseek+0x40>
    5674:	80c0030b 	ldhu	r3,12(r16)
    5678:	80801415 	stw	r2,80(r16)
    567c:	18c40014 	ori	r3,r3,4096
    5680:	80c0030d 	sth	r3,12(r16)
    5684:	dfc00117 	ldw	ra,4(sp)
    5688:	dc000017 	ldw	r16,0(sp)
    568c:	dec00204 	addi	sp,sp,8
    5690:	f800283a 	ret
    5694:	80c0030b 	ldhu	r3,12(r16)
    5698:	18fbffcc 	andi	r3,r3,61439
    569c:	80c0030d 	sth	r3,12(r16)
    56a0:	dfc00117 	ldw	ra,4(sp)
    56a4:	dc000017 	ldw	r16,0(sp)
    56a8:	dec00204 	addi	sp,sp,8
    56ac:	f800283a 	ret

000056b0 <__sclose>:
    56b0:	2940038f 	ldh	r5,14(r5)
    56b4:	00057181 	jmpi	5718 <_close_r>

000056b8 <_write_r>:
    56b8:	defffd04 	addi	sp,sp,-12
    56bc:	2805883a 	mov	r2,r5
    56c0:	dc000015 	stw	r16,0(sp)
    56c4:	04000074 	movhi	r16,1
    56c8:	dc400115 	stw	r17,4(sp)
    56cc:	300b883a 	mov	r5,r6
    56d0:	8424f104 	addi	r16,r16,-27708
    56d4:	2023883a 	mov	r17,r4
    56d8:	380d883a 	mov	r6,r7
    56dc:	1009883a 	mov	r4,r2
    56e0:	dfc00215 	stw	ra,8(sp)
    56e4:	80000015 	stw	zero,0(r16)
    56e8:	00060100 	call	6010 <write>
    56ec:	00ffffc4 	movi	r3,-1
    56f0:	10c00526 	beq	r2,r3,5708 <_write_r+0x50>
    56f4:	dfc00217 	ldw	ra,8(sp)
    56f8:	dc400117 	ldw	r17,4(sp)
    56fc:	dc000017 	ldw	r16,0(sp)
    5700:	dec00304 	addi	sp,sp,12
    5704:	f800283a 	ret
    5708:	80c00017 	ldw	r3,0(r16)
    570c:	183ff926 	beq	r3,zero,56f4 <__ram_exceptions_end+0xfe0036d4>
    5710:	88c00015 	stw	r3,0(r17)
    5714:	003ff706 	br	56f4 <__ram_exceptions_end+0xfe0036d4>

00005718 <_close_r>:
    5718:	defffd04 	addi	sp,sp,-12
    571c:	dc000015 	stw	r16,0(sp)
    5720:	04000074 	movhi	r16,1
    5724:	dc400115 	stw	r17,4(sp)
    5728:	8424f104 	addi	r16,r16,-27708
    572c:	2023883a 	mov	r17,r4
    5730:	2809883a 	mov	r4,r5
    5734:	dfc00215 	stw	ra,8(sp)
    5738:	80000015 	stw	zero,0(r16)
    573c:	00059e00 	call	59e0 <close>
    5740:	00ffffc4 	movi	r3,-1
    5744:	10c00526 	beq	r2,r3,575c <_close_r+0x44>
    5748:	dfc00217 	ldw	ra,8(sp)
    574c:	dc400117 	ldw	r17,4(sp)
    5750:	dc000017 	ldw	r16,0(sp)
    5754:	dec00304 	addi	sp,sp,12
    5758:	f800283a 	ret
    575c:	80c00017 	ldw	r3,0(r16)
    5760:	183ff926 	beq	r3,zero,5748 <__ram_exceptions_end+0xfe003728>
    5764:	88c00015 	stw	r3,0(r17)
    5768:	003ff706 	br	5748 <__ram_exceptions_end+0xfe003728>

0000576c <_fclose_r>:
    576c:	28003926 	beq	r5,zero,5854 <_fclose_r+0xe8>
    5770:	defffc04 	addi	sp,sp,-16
    5774:	dc400115 	stw	r17,4(sp)
    5778:	dc000015 	stw	r16,0(sp)
    577c:	dfc00315 	stw	ra,12(sp)
    5780:	dc800215 	stw	r18,8(sp)
    5784:	2023883a 	mov	r17,r4
    5788:	2821883a 	mov	r16,r5
    578c:	20000226 	beq	r4,zero,5798 <_fclose_r+0x2c>
    5790:	20800e17 	ldw	r2,56(r4)
    5794:	10002726 	beq	r2,zero,5834 <_fclose_r+0xc8>
    5798:	8080030f 	ldh	r2,12(r16)
    579c:	1000071e 	bne	r2,zero,57bc <_fclose_r+0x50>
    57a0:	0005883a 	mov	r2,zero
    57a4:	dfc00317 	ldw	ra,12(sp)
    57a8:	dc800217 	ldw	r18,8(sp)
    57ac:	dc400117 	ldw	r17,4(sp)
    57b0:	dc000017 	ldw	r16,0(sp)
    57b4:	dec00404 	addi	sp,sp,16
    57b8:	f800283a 	ret
    57bc:	800b883a 	mov	r5,r16
    57c0:	8809883a 	mov	r4,r17
    57c4:	0003c340 	call	3c34 <__sflush_r>
    57c8:	1025883a 	mov	r18,r2
    57cc:	80800b17 	ldw	r2,44(r16)
    57d0:	10000426 	beq	r2,zero,57e4 <_fclose_r+0x78>
    57d4:	81400717 	ldw	r5,28(r16)
    57d8:	8809883a 	mov	r4,r17
    57dc:	103ee83a 	callr	r2
    57e0:	10001616 	blt	r2,zero,583c <_fclose_r+0xd0>
    57e4:	8080030b 	ldhu	r2,12(r16)
    57e8:	1080200c 	andi	r2,r2,128
    57ec:	1000151e 	bne	r2,zero,5844 <_fclose_r+0xd8>
    57f0:	81400c17 	ldw	r5,48(r16)
    57f4:	28000526 	beq	r5,zero,580c <_fclose_r+0xa0>
    57f8:	80801004 	addi	r2,r16,64
    57fc:	28800226 	beq	r5,r2,5808 <_fclose_r+0x9c>
    5800:	8809883a 	mov	r4,r17
    5804:	00043b00 	call	43b0 <_free_r>
    5808:	80000c15 	stw	zero,48(r16)
    580c:	81401117 	ldw	r5,68(r16)
    5810:	28000326 	beq	r5,zero,5820 <_fclose_r+0xb4>
    5814:	8809883a 	mov	r4,r17
    5818:	00043b00 	call	43b0 <_free_r>
    581c:	80001115 	stw	zero,68(r16)
    5820:	000424c0 	call	424c <__sfp_lock_acquire>
    5824:	8000030d 	sth	zero,12(r16)
    5828:	00042500 	call	4250 <__sfp_lock_release>
    582c:	9005883a 	mov	r2,r18
    5830:	003fdc06 	br	57a4 <__ram_exceptions_end+0xfe003784>
    5834:	000423c0 	call	423c <__sinit>
    5838:	003fd706 	br	5798 <__ram_exceptions_end+0xfe003778>
    583c:	04bfffc4 	movi	r18,-1
    5840:	003fe806 	br	57e4 <__ram_exceptions_end+0xfe0037c4>
    5844:	81400417 	ldw	r5,16(r16)
    5848:	8809883a 	mov	r4,r17
    584c:	00043b00 	call	43b0 <_free_r>
    5850:	003fe706 	br	57f0 <__ram_exceptions_end+0xfe0037d0>
    5854:	0005883a 	mov	r2,zero
    5858:	f800283a 	ret

0000585c <fclose>:
    585c:	00800074 	movhi	r2,1
    5860:	10a17104 	addi	r2,r2,-31292
    5864:	200b883a 	mov	r5,r4
    5868:	11000017 	ldw	r4,0(r2)
    586c:	000576c1 	jmpi	576c <_fclose_r>

00005870 <_fstat_r>:
    5870:	defffd04 	addi	sp,sp,-12
    5874:	2805883a 	mov	r2,r5
    5878:	dc000015 	stw	r16,0(sp)
    587c:	04000074 	movhi	r16,1
    5880:	dc400115 	stw	r17,4(sp)
    5884:	8424f104 	addi	r16,r16,-27708
    5888:	2023883a 	mov	r17,r4
    588c:	300b883a 	mov	r5,r6
    5890:	1009883a 	mov	r4,r2
    5894:	dfc00215 	stw	ra,8(sp)
    5898:	80000015 	stw	zero,0(r16)
    589c:	0005aa80 	call	5aa8 <fstat>
    58a0:	00ffffc4 	movi	r3,-1
    58a4:	10c00526 	beq	r2,r3,58bc <_fstat_r+0x4c>
    58a8:	dfc00217 	ldw	ra,8(sp)
    58ac:	dc400117 	ldw	r17,4(sp)
    58b0:	dc000017 	ldw	r16,0(sp)
    58b4:	dec00304 	addi	sp,sp,12
    58b8:	f800283a 	ret
    58bc:	80c00017 	ldw	r3,0(r16)
    58c0:	183ff926 	beq	r3,zero,58a8 <__ram_exceptions_end+0xfe003888>
    58c4:	88c00015 	stw	r3,0(r17)
    58c8:	003ff706 	br	58a8 <__ram_exceptions_end+0xfe003888>

000058cc <_isatty_r>:
    58cc:	defffd04 	addi	sp,sp,-12
    58d0:	dc000015 	stw	r16,0(sp)
    58d4:	04000074 	movhi	r16,1
    58d8:	dc400115 	stw	r17,4(sp)
    58dc:	8424f104 	addi	r16,r16,-27708
    58e0:	2023883a 	mov	r17,r4
    58e4:	2809883a 	mov	r4,r5
    58e8:	dfc00215 	stw	ra,8(sp)
    58ec:	80000015 	stw	zero,0(r16)
    58f0:	0005b700 	call	5b70 <isatty>
    58f4:	00ffffc4 	movi	r3,-1
    58f8:	10c00526 	beq	r2,r3,5910 <_isatty_r+0x44>
    58fc:	dfc00217 	ldw	ra,8(sp)
    5900:	dc400117 	ldw	r17,4(sp)
    5904:	dc000017 	ldw	r16,0(sp)
    5908:	dec00304 	addi	sp,sp,12
    590c:	f800283a 	ret
    5910:	80c00017 	ldw	r3,0(r16)
    5914:	183ff926 	beq	r3,zero,58fc <__ram_exceptions_end+0xfe0038dc>
    5918:	88c00015 	stw	r3,0(r17)
    591c:	003ff706 	br	58fc <__ram_exceptions_end+0xfe0038dc>

00005920 <_lseek_r>:
    5920:	defffd04 	addi	sp,sp,-12
    5924:	2805883a 	mov	r2,r5
    5928:	dc000015 	stw	r16,0(sp)
    592c:	04000074 	movhi	r16,1
    5930:	dc400115 	stw	r17,4(sp)
    5934:	300b883a 	mov	r5,r6
    5938:	8424f104 	addi	r16,r16,-27708
    593c:	2023883a 	mov	r17,r4
    5940:	380d883a 	mov	r6,r7
    5944:	1009883a 	mov	r4,r2
    5948:	dfc00215 	stw	ra,8(sp)
    594c:	80000015 	stw	zero,0(r16)
    5950:	0005d240 	call	5d24 <lseek>
    5954:	00ffffc4 	movi	r3,-1
    5958:	10c00526 	beq	r2,r3,5970 <_lseek_r+0x50>
    595c:	dfc00217 	ldw	ra,8(sp)
    5960:	dc400117 	ldw	r17,4(sp)
    5964:	dc000017 	ldw	r16,0(sp)
    5968:	dec00304 	addi	sp,sp,12
    596c:	f800283a 	ret
    5970:	80c00017 	ldw	r3,0(r16)
    5974:	183ff926 	beq	r3,zero,595c <__ram_exceptions_end+0xfe00393c>
    5978:	88c00015 	stw	r3,0(r17)
    597c:	003ff706 	br	595c <__ram_exceptions_end+0xfe00393c>

00005980 <_read_r>:
    5980:	defffd04 	addi	sp,sp,-12
    5984:	2805883a 	mov	r2,r5
    5988:	dc000015 	stw	r16,0(sp)
    598c:	04000074 	movhi	r16,1
    5990:	dc400115 	stw	r17,4(sp)
    5994:	300b883a 	mov	r5,r6
    5998:	8424f104 	addi	r16,r16,-27708
    599c:	2023883a 	mov	r17,r4
    59a0:	380d883a 	mov	r6,r7
    59a4:	1009883a 	mov	r4,r2
    59a8:	dfc00215 	stw	ra,8(sp)
    59ac:	80000015 	stw	zero,0(r16)
    59b0:	0005e540 	call	5e54 <read>
    59b4:	00ffffc4 	movi	r3,-1
    59b8:	10c00526 	beq	r2,r3,59d0 <_read_r+0x50>
    59bc:	dfc00217 	ldw	ra,8(sp)
    59c0:	dc400117 	ldw	r17,4(sp)
    59c4:	dc000017 	ldw	r16,0(sp)
    59c8:	dec00304 	addi	sp,sp,12
    59cc:	f800283a 	ret
    59d0:	80c00017 	ldw	r3,0(r16)
    59d4:	183ff926 	beq	r3,zero,59bc <__ram_exceptions_end+0xfe00399c>
    59d8:	88c00015 	stw	r3,0(r17)
    59dc:	003ff706 	br	59bc <__ram_exceptions_end+0xfe00399c>

000059e0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    59e0:	defffd04 	addi	sp,sp,-12
    59e4:	dfc00215 	stw	ra,8(sp)
    59e8:	dc400115 	stw	r17,4(sp)
    59ec:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    59f0:	20002016 	blt	r4,zero,5a74 <close+0x94>
    59f4:	01400304 	movi	r5,12
    59f8:	2021883a 	mov	r16,r4
    59fc:	00036780 	call	3678 <__mulsi3>
    5a00:	01000074 	movhi	r4,1
    5a04:	21202504 	addi	r4,r4,-32620
    5a08:	2089883a 	add	r4,r4,r2

  if (fd)
    5a0c:	20001926 	beq	r4,zero,5a74 <close+0x94>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    5a10:	20800017 	ldw	r2,0(r4)
    5a14:	10800417 	ldw	r2,16(r2)
    5a18:	10000b26 	beq	r2,zero,5a48 <close+0x68>
    5a1c:	103ee83a 	callr	r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    5a20:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    5a24:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    5a28:	0005f680 	call	5f68 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    5a2c:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    5a30:	88000916 	blt	r17,zero,5a58 <close+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    5a34:	dfc00217 	ldw	ra,8(sp)
    5a38:	dc400117 	ldw	r17,4(sp)
    5a3c:	dc000017 	ldw	r16,0(sp)
    5a40:	dec00304 	addi	sp,sp,12
    5a44:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    5a48:	8009883a 	mov	r4,r16
    5a4c:	0005f680 	call	5f68 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    5a50:	0005883a 	mov	r2,zero
    5a54:	003ff706 	br	5a34 <__ram_exceptions_end+0xfe003a14>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    5a58:	d0a0df17 	ldw	r2,-31876(gp)
    5a5c:	10000c26 	beq	r2,zero,5a90 <close+0xb0>
    5a60:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
    5a64:	0463c83a 	sub	r17,zero,r17
    5a68:	14400015 	stw	r17,0(r2)
      return -1;
    5a6c:	00bfffc4 	movi	r2,-1
    5a70:	003ff006 	br	5a34 <__ram_exceptions_end+0xfe003a14>
    5a74:	d0a0df17 	ldw	r2,-31876(gp)
    5a78:	10000726 	beq	r2,zero,5a98 <close+0xb8>
    5a7c:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5a80:	00c01444 	movi	r3,81
    5a84:	10c00015 	stw	r3,0(r2)
    return -1;
    5a88:	00bfffc4 	movi	r2,-1
    5a8c:	003fe906 	br	5a34 <__ram_exceptions_end+0xfe003a14>
    5a90:	d0a45704 	addi	r2,gp,-28324
    5a94:	003ff306 	br	5a64 <__ram_exceptions_end+0xfe003a44>
    5a98:	d0a45704 	addi	r2,gp,-28324
    5a9c:	003ff806 	br	5a80 <__ram_exceptions_end+0xfe003a60>

00005aa0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    5aa0:	3005883a 	mov	r2,r6
    5aa4:	f800283a 	ret

00005aa8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    5aa8:	defffb04 	addi	sp,sp,-20
    5aac:	dfc00415 	stw	ra,16(sp)
    5ab0:	dcc00315 	stw	r19,12(sp)
    5ab4:	dc800215 	stw	r18,8(sp)
    5ab8:	dc400115 	stw	r17,4(sp)
    5abc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5ac0:	20002216 	blt	r4,zero,5b4c <fstat+0xa4>
    5ac4:	2827883a 	mov	r19,r5
    5ac8:	04000074 	movhi	r16,1
    5acc:	01400304 	movi	r5,12
    5ad0:	2023883a 	mov	r17,r4
    5ad4:	84202504 	addi	r16,r16,-32620
    5ad8:	00036780 	call	3678 <__mulsi3>
    5adc:	80a5883a 	add	r18,r16,r2
  
  if (fd)
    5ae0:	90001a26 	beq	r18,zero,5b4c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    5ae4:	01400304 	movi	r5,12
    5ae8:	8809883a 	mov	r4,r17
    5aec:	00036780 	call	3678 <__mulsi3>
    5af0:	8085883a 	add	r2,r16,r2
    5af4:	10800017 	ldw	r2,0(r2)
    5af8:	10800817 	ldw	r2,32(r2)
    5afc:	10000926 	beq	r2,zero,5b24 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    5b00:	980b883a 	mov	r5,r19
    5b04:	9009883a 	mov	r4,r18
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    5b08:	dfc00417 	ldw	ra,16(sp)
    5b0c:	dcc00317 	ldw	r19,12(sp)
    5b10:	dc800217 	ldw	r18,8(sp)
    5b14:	dc400117 	ldw	r17,4(sp)
    5b18:	dc000017 	ldw	r16,0(sp)
    5b1c:	dec00504 	addi	sp,sp,20
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
    5b20:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    5b24:	00880004 	movi	r2,8192
    5b28:	98800115 	stw	r2,4(r19)
      return 0;
    5b2c:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    5b30:	dfc00417 	ldw	ra,16(sp)
    5b34:	dcc00317 	ldw	r19,12(sp)
    5b38:	dc800217 	ldw	r18,8(sp)
    5b3c:	dc400117 	ldw	r17,4(sp)
    5b40:	dc000017 	ldw	r16,0(sp)
    5b44:	dec00504 	addi	sp,sp,20
    5b48:	f800283a 	ret
    5b4c:	d0a0df17 	ldw	r2,-31876(gp)
    5b50:	10000526 	beq	r2,zero,5b68 <fstat+0xc0>
    5b54:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5b58:	00c01444 	movi	r3,81
    5b5c:	10c00015 	stw	r3,0(r2)
    return -1;
    5b60:	00bfffc4 	movi	r2,-1
    5b64:	003ff206 	br	5b30 <__ram_exceptions_end+0xfe003b10>
    5b68:	d0a45704 	addi	r2,gp,-28324
    5b6c:	003ffa06 	br	5b58 <__ram_exceptions_end+0xfe003b38>

00005b70 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    5b70:	deffef04 	addi	sp,sp,-68
    5b74:	dfc01015 	stw	ra,64(sp)
    5b78:	dc000f15 	stw	r16,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5b7c:	20001816 	blt	r4,zero,5be0 <isatty+0x70>
    5b80:	01400304 	movi	r5,12
    5b84:	2021883a 	mov	r16,r4
    5b88:	00036780 	call	3678 <__mulsi3>
    5b8c:	00c00074 	movhi	r3,1
    5b90:	18e02504 	addi	r3,r3,-32620
    5b94:	1885883a 	add	r2,r3,r2
  
  if (fd)
    5b98:	10001126 	beq	r2,zero,5be0 <isatty+0x70>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    5b9c:	10800017 	ldw	r2,0(r2)
    5ba0:	10800817 	ldw	r2,32(r2)
    5ba4:	10000926 	beq	r2,zero,5bcc <isatty+0x5c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    5ba8:	d80b883a 	mov	r5,sp
    5bac:	8009883a 	mov	r4,r16
    5bb0:	0005aa80 	call	5aa8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    5bb4:	d8800117 	ldw	r2,4(sp)
    5bb8:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    5bbc:	dfc01017 	ldw	ra,64(sp)
    5bc0:	dc000f17 	ldw	r16,60(sp)
    5bc4:	dec01104 	addi	sp,sp,68
    5bc8:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
    5bcc:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    5bd0:	dfc01017 	ldw	ra,64(sp)
    5bd4:	dc000f17 	ldw	r16,60(sp)
    5bd8:	dec01104 	addi	sp,sp,68
    5bdc:	f800283a 	ret
    5be0:	d0a0df17 	ldw	r2,-31876(gp)
    5be4:	10000826 	beq	r2,zero,5c08 <isatty+0x98>
    5be8:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5bec:	00c01444 	movi	r3,81
    5bf0:	10c00015 	stw	r3,0(r2)
    return 0;
    5bf4:	0005883a 	mov	r2,zero
  }
}
    5bf8:	dfc01017 	ldw	ra,64(sp)
    5bfc:	dc000f17 	ldw	r16,60(sp)
    5c00:	dec01104 	addi	sp,sp,68
    5c04:	f800283a 	ret
    5c08:	d0a45704 	addi	r2,gp,-28324
    5c0c:	003ff706 	br	5bec <__ram_exceptions_end+0xfe003bcc>

00005c10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5c10:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5c14:	01800034 	movhi	r6,0
    5c18:	01c00074 	movhi	r7,1
    5c1c:	dfc00015 	stw	ra,0(sp)
    5c20:	319e1a04 	addi	r6,r6,30824
    5c24:	39e17b04 	addi	r7,r7,-31252
    5c28:	31c01026 	beq	r6,r7,5c6c <alt_load+0x5c>
  {
    while( to != end )
    5c2c:	00800074 	movhi	r2,1
    5c30:	10a17b04 	addi	r2,r2,-31252
    5c34:	30800d26 	beq	r6,r2,5c6c <alt_load+0x5c>
    5c38:	30c00104 	addi	r3,r6,4
    5c3c:	10c7c83a 	sub	r3,r2,r3
    5c40:	1806d0ba 	srli	r3,r3,2
    5c44:	0005883a 	mov	r2,zero
    5c48:	18c00044 	addi	r3,r3,1
    5c4c:	18c7883a 	add	r3,r3,r3
    5c50:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
    5c54:	11c9883a 	add	r4,r2,r7
    5c58:	21400017 	ldw	r5,0(r4)
    5c5c:	1189883a 	add	r4,r2,r6
    5c60:	10800104 	addi	r2,r2,4
    5c64:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    5c68:	10fffa1e 	bne	r2,r3,5c54 <__ram_exceptions_end+0xfe003c34>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5c6c:	01808034 	movhi	r6,512
    5c70:	01c00034 	movhi	r7,0
    5c74:	31880804 	addi	r6,r6,8224
    5c78:	39c00004 	addi	r7,r7,0
    5c7c:	31c01026 	beq	r6,r7,5cc0 <alt_load+0xb0>
  {
    while( to != end )
    5c80:	00808034 	movhi	r2,512
    5c84:	10880804 	addi	r2,r2,8224
    5c88:	30800d26 	beq	r6,r2,5cc0 <alt_load+0xb0>
    5c8c:	30c00104 	addi	r3,r6,4
    5c90:	10c7c83a 	sub	r3,r2,r3
    5c94:	1806d0ba 	srli	r3,r3,2
    5c98:	0005883a 	mov	r2,zero
    5c9c:	18c00044 	addi	r3,r3,1
    5ca0:	18c7883a 	add	r3,r3,r3
    5ca4:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
    5ca8:	11c9883a 	add	r4,r2,r7
    5cac:	21400017 	ldw	r5,0(r4)
    5cb0:	1189883a 	add	r4,r2,r6
    5cb4:	10800104 	addi	r2,r2,4
    5cb8:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    5cbc:	18bffa1e 	bne	r3,r2,5ca8 <__ram_exceptions_end+0xfe003c88>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5cc0:	01800034 	movhi	r6,0
    5cc4:	01c00034 	movhi	r7,0
    5cc8:	319ae704 	addi	r6,r6,27548
    5ccc:	39dae704 	addi	r7,r7,27548
    5cd0:	31c01026 	beq	r6,r7,5d14 <alt_load+0x104>
  {
    while( to != end )
    5cd4:	00800034 	movhi	r2,0
    5cd8:	109e1a04 	addi	r2,r2,30824
    5cdc:	30800d26 	beq	r6,r2,5d14 <alt_load+0x104>
    5ce0:	30c00104 	addi	r3,r6,4
    5ce4:	10c7c83a 	sub	r3,r2,r3
    5ce8:	1806d0ba 	srli	r3,r3,2
    5cec:	0005883a 	mov	r2,zero
    5cf0:	18c00044 	addi	r3,r3,1
    5cf4:	18c7883a 	add	r3,r3,r3
    5cf8:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
    5cfc:	11c9883a 	add	r4,r2,r7
    5d00:	21400017 	ldw	r5,0(r4)
    5d04:	1189883a 	add	r4,r2,r6
    5d08:	10800104 	addi	r2,r2,4
    5d0c:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    5d10:	10fffa1e 	bne	r2,r3,5cfc <__ram_exceptions_end+0xfe003cdc>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    5d14:	00062180 	call	6218 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    5d18:	dfc00017 	ldw	ra,0(sp)
    5d1c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    5d20:	00063501 	jmpi	6350 <alt_icache_flush_all>

00005d24 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    5d24:	defffa04 	addi	sp,sp,-24
    5d28:	dfc00515 	stw	ra,20(sp)
    5d2c:	dd000415 	stw	r20,16(sp)
    5d30:	dcc00315 	stw	r19,12(sp)
    5d34:	dc800215 	stw	r18,8(sp)
    5d38:	dc400115 	stw	r17,4(sp)
    5d3c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5d40:	20001d16 	blt	r4,zero,5db8 <lseek+0x94>
    5d44:	2827883a 	mov	r19,r5
    5d48:	04000074 	movhi	r16,1
    5d4c:	01400304 	movi	r5,12
    5d50:	2023883a 	mov	r17,r4
    5d54:	3029883a 	mov	r20,r6
    5d58:	84202504 	addi	r16,r16,-32620
    5d5c:	00036780 	call	3678 <__mulsi3>
    5d60:	80a5883a 	add	r18,r16,r2
  
  if (fd) 
    5d64:	90001426 	beq	r18,zero,5db8 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    5d68:	01400304 	movi	r5,12
    5d6c:	8809883a 	mov	r4,r17
    5d70:	00036780 	call	3678 <__mulsi3>
    5d74:	8085883a 	add	r2,r16,r2
    5d78:	10800017 	ldw	r2,0(r2)
    5d7c:	10800717 	ldw	r2,28(r2)
    5d80:	10001426 	beq	r2,zero,5dd4 <lseek+0xb0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    5d84:	a00d883a 	mov	r6,r20
    5d88:	980b883a 	mov	r5,r19
    5d8c:	9009883a 	mov	r4,r18
    5d90:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    5d94:	10001316 	blt	r2,zero,5de4 <lseek+0xc0>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
    5d98:	dfc00517 	ldw	ra,20(sp)
    5d9c:	dd000417 	ldw	r20,16(sp)
    5da0:	dcc00317 	ldw	r19,12(sp)
    5da4:	dc800217 	ldw	r18,8(sp)
    5da8:	dc400117 	ldw	r17,4(sp)
    5dac:	dc000017 	ldw	r16,0(sp)
    5db0:	dec00604 	addi	sp,sp,24
    5db4:	f800283a 	ret
    5db8:	04001444 	movi	r16,81
    5dbc:	d0a0df17 	ldw	r2,-31876(gp)
    5dc0:	10000626 	beq	r2,zero,5ddc <lseek+0xb8>
    5dc4:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
    5dc8:	14000015 	stw	r16,0(r2)
    rc = -1;
    5dcc:	00bfffc4 	movi	r2,-1
  }

  return rc;
    5dd0:	003ff106 	br	5d98 <__ram_exceptions_end+0xfe003d78>
    5dd4:	04002184 	movi	r16,134
    5dd8:	003ff806 	br	5dbc <__ram_exceptions_end+0xfe003d9c>
    5ddc:	d0a45704 	addi	r2,gp,-28324
    5de0:	003ff906 	br	5dc8 <__ram_exceptions_end+0xfe003da8>
    5de4:	00a1c83a 	sub	r16,zero,r2
    5de8:	003ff406 	br	5dbc <__ram_exceptions_end+0xfe003d9c>

00005dec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5dec:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5df0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5df4:	dfc00115 	stw	ra,4(sp)
    5df8:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5dfc:	00061200 	call	6120 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5e00:	00061400 	call	6140 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    5e04:	01800034 	movhi	r6,0
    5e08:	319e1604 	addi	r6,r6,30808
    5e0c:	300b883a 	mov	r5,r6
    5e10:	3009883a 	mov	r4,r6
    5e14:	00063e00 	call	63e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    5e18:	00062880 	call	6288 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    5e1c:	01000034 	movhi	r4,0
    5e20:	2118bb04 	addi	r4,r4,25324
    5e24:	00067900 	call	6790 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    5e28:	d1a45817 	ldw	r6,-28320(gp)
    5e2c:	d1645917 	ldw	r5,-28316(gp)
    5e30:	d1245a17 	ldw	r4,-28312(gp)
    5e34:	00027800 	call	2780 <main>
  close(STDOUT_FILENO);
    5e38:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    5e3c:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    5e40:	00059e00 	call	59e0 <close>
  exit (result);
    5e44:	8009883a 	mov	r4,r16
    5e48:	00067a40 	call	67a4 <exit>

00005e4c <__malloc_lock>:
    5e4c:	f800283a 	ret

00005e50 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    5e50:	f800283a 	ret

00005e54 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    5e54:	defffa04 	addi	sp,sp,-24
    5e58:	dfc00515 	stw	ra,20(sp)
    5e5c:	dd000415 	stw	r20,16(sp)
    5e60:	dcc00315 	stw	r19,12(sp)
    5e64:	dc800215 	stw	r18,8(sp)
    5e68:	dc400115 	stw	r17,4(sp)
    5e6c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5e70:	20003016 	blt	r4,zero,5f34 <read+0xe0>
    5e74:	2827883a 	mov	r19,r5
    5e78:	04000074 	movhi	r16,1
    5e7c:	01400304 	movi	r5,12
    5e80:	2025883a 	mov	r18,r4
    5e84:	3029883a 	mov	r20,r6
    5e88:	84202504 	addi	r16,r16,-32620
    5e8c:	00036780 	call	3678 <__mulsi3>
    5e90:	80a3883a 	add	r17,r16,r2
  
  if (fd)
    5e94:	88002726 	beq	r17,zero,5f34 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5e98:	88800217 	ldw	r2,8(r17)
    5e9c:	00c00044 	movi	r3,1
    5ea0:	108000cc 	andi	r2,r2,3
    5ea4:	10c01526 	beq	r2,r3,5efc <read+0xa8>
        (fd->dev->read))
    5ea8:	01400304 	movi	r5,12
    5eac:	9009883a 	mov	r4,r18
    5eb0:	00036780 	call	3678 <__mulsi3>
    5eb4:	8085883a 	add	r2,r16,r2
    5eb8:	10800017 	ldw	r2,0(r2)
    5ebc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5ec0:	10000e26 	beq	r2,zero,5efc <read+0xa8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    5ec4:	a00d883a 	mov	r6,r20
    5ec8:	980b883a 	mov	r5,r19
    5ecc:	8809883a 	mov	r4,r17
    5ed0:	103ee83a 	callr	r2
    5ed4:	1021883a 	mov	r16,r2
    5ed8:	10000f16 	blt	r2,zero,5f18 <read+0xc4>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    5edc:	dfc00517 	ldw	ra,20(sp)
    5ee0:	dd000417 	ldw	r20,16(sp)
    5ee4:	dcc00317 	ldw	r19,12(sp)
    5ee8:	dc800217 	ldw	r18,8(sp)
    5eec:	dc400117 	ldw	r17,4(sp)
    5ef0:	dc000017 	ldw	r16,0(sp)
    5ef4:	dec00604 	addi	sp,sp,24
    5ef8:	f800283a 	ret
    5efc:	d0a0df17 	ldw	r2,-31876(gp)
    5f00:	10001326 	beq	r2,zero,5f50 <read+0xfc>
    5f04:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    5f08:	00c00344 	movi	r3,13
    5f0c:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    5f10:	00bfffc4 	movi	r2,-1
    5f14:	003ff106 	br	5edc <__ram_exceptions_end+0xfe003ebc>
    5f18:	d0a0df17 	ldw	r2,-31876(gp)
    5f1c:	10000e26 	beq	r2,zero,5f58 <read+0x104>
    5f20:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
    5f24:	0421c83a 	sub	r16,zero,r16
    5f28:	14000015 	stw	r16,0(r2)
          return -1;
    5f2c:	00bfffc4 	movi	r2,-1
    5f30:	003fea06 	br	5edc <__ram_exceptions_end+0xfe003ebc>
    5f34:	d0a0df17 	ldw	r2,-31876(gp)
    5f38:	10000926 	beq	r2,zero,5f60 <read+0x10c>
    5f3c:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    5f40:	00c01444 	movi	r3,81
    5f44:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    5f48:	00bfffc4 	movi	r2,-1
    5f4c:	003fe306 	br	5edc <__ram_exceptions_end+0xfe003ebc>
    5f50:	d0a45704 	addi	r2,gp,-28324
    5f54:	003fec06 	br	5f08 <__ram_exceptions_end+0xfe003ee8>
    5f58:	d0a45704 	addi	r2,gp,-28324
    5f5c:	003ff106 	br	5f24 <__ram_exceptions_end+0xfe003f04>
    5f60:	d0a45704 	addi	r2,gp,-28324
    5f64:	003ff606 	br	5f40 <__ram_exceptions_end+0xfe003f20>

00005f68 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    5f68:	00c00084 	movi	r3,2
    5f6c:	1900140e 	bge	r3,r4,5fc0 <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    5f70:	defffd04 	addi	sp,sp,-12
    5f74:	dc400115 	stw	r17,4(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    5f78:	01400304 	movi	r5,12
    5f7c:	04400074 	movhi	r17,1
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    5f80:	dfc00215 	stw	ra,8(sp)
    5f84:	dc000015 	stw	r16,0(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    5f88:	8c602504 	addi	r17,r17,-32620
    5f8c:	2021883a 	mov	r16,r4
    5f90:	00036780 	call	3678 <__mulsi3>
    5f94:	8885883a 	add	r2,r17,r2
    alt_fd_list[fd].dev      = 0;
    5f98:	01400304 	movi	r5,12
    5f9c:	8009883a 	mov	r4,r16

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    5fa0:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    5fa4:	00036780 	call	3678 <__mulsi3>
    5fa8:	8885883a 	add	r2,r17,r2
    5fac:	10000015 	stw	zero,0(r2)
  }
}
    5fb0:	dfc00217 	ldw	ra,8(sp)
    5fb4:	dc400117 	ldw	r17,4(sp)
    5fb8:	dc000017 	ldw	r16,0(sp)
    5fbc:	dec00304 	addi	sp,sp,12
    5fc0:	f800283a 	ret

00005fc4 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5fc4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5fc8:	00bfff84 	movi	r2,-2
    5fcc:	2884703a 	and	r2,r5,r2
    5fd0:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5fd4:	d0a0e017 	ldw	r2,-31872(gp)
    5fd8:	00ffff04 	movi	r3,-4
    5fdc:	108000c4 	addi	r2,r2,3
    5fe0:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5fe4:	00c08034 	movhi	r3,512
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5fe8:	d0a0e015 	stw	r2,-31872(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5fec:	1109883a 	add	r4,r2,r4
    5ff0:	18c00004 	addi	r3,r3,0
    5ff4:	19000336 	bltu	r3,r4,6004 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    5ff8:	d120e015 	stw	r4,-31872(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ffc:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    6000:	f800283a 	ret
    6004:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    6008:	00bfffc4 	movi	r2,-1
    600c:	f800283a 	ret

00006010 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    6010:	defffa04 	addi	sp,sp,-24
    6014:	dfc00515 	stw	ra,20(sp)
    6018:	dd000415 	stw	r20,16(sp)
    601c:	dcc00315 	stw	r19,12(sp)
    6020:	dc800215 	stw	r18,8(sp)
    6024:	dc400115 	stw	r17,4(sp)
    6028:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    602c:	20003116 	blt	r4,zero,60f4 <write+0xe4>
    6030:	2827883a 	mov	r19,r5
    6034:	04000074 	movhi	r16,1
    6038:	01400304 	movi	r5,12
    603c:	2025883a 	mov	r18,r4
    6040:	3029883a 	mov	r20,r6
    6044:	84202504 	addi	r16,r16,-32620
    6048:	00036780 	call	3678 <__mulsi3>
    604c:	80a3883a 	add	r17,r16,r2
  
  if (fd)
    6050:	88002826 	beq	r17,zero,60f4 <write+0xe4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    6054:	88800217 	ldw	r2,8(r17)
    6058:	108000cc 	andi	r2,r2,3
    605c:	10001526 	beq	r2,zero,60b4 <write+0xa4>
    6060:	01400304 	movi	r5,12
    6064:	9009883a 	mov	r4,r18
    6068:	00036780 	call	3678 <__mulsi3>
    606c:	8085883a 	add	r2,r16,r2
    6070:	10800017 	ldw	r2,0(r2)
    6074:	10800617 	ldw	r2,24(r2)
    6078:	10000e26 	beq	r2,zero,60b4 <write+0xa4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    607c:	a00d883a 	mov	r6,r20
    6080:	980b883a 	mov	r5,r19
    6084:	8809883a 	mov	r4,r17
    6088:	103ee83a 	callr	r2
    608c:	1021883a 	mov	r16,r2
    6090:	10001116 	blt	r2,zero,60d8 <write+0xc8>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    6094:	dfc00517 	ldw	ra,20(sp)
    6098:	dd000417 	ldw	r20,16(sp)
    609c:	dcc00317 	ldw	r19,12(sp)
    60a0:	dc800217 	ldw	r18,8(sp)
    60a4:	dc400117 	ldw	r17,4(sp)
    60a8:	dc000017 	ldw	r16,0(sp)
    60ac:	dec00604 	addi	sp,sp,24
    60b0:	f800283a 	ret
    60b4:	d0a0df17 	ldw	r2,-31876(gp)
    60b8:	10000526 	beq	r2,zero,60d0 <write+0xc0>
    60bc:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    60c0:	00c00344 	movi	r3,13
    60c4:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    60c8:	00bfffc4 	movi	r2,-1
    60cc:	003ff106 	br	6094 <__ram_exceptions_end+0xfe004074>
    60d0:	d0a45704 	addi	r2,gp,-28324
    60d4:	003ffa06 	br	60c0 <__ram_exceptions_end+0xfe0040a0>
    60d8:	d0a0df17 	ldw	r2,-31876(gp)
    60dc:	10000c26 	beq	r2,zero,6110 <write+0x100>
    60e0:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
    60e4:	0421c83a 	sub	r16,zero,r16
    60e8:	14000015 	stw	r16,0(r2)
        return -1;
    60ec:	00bfffc4 	movi	r2,-1
    60f0:	003fe806 	br	6094 <__ram_exceptions_end+0xfe004074>
    60f4:	d0a0df17 	ldw	r2,-31876(gp)
    60f8:	10000726 	beq	r2,zero,6118 <write+0x108>
    60fc:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    6100:	00c01444 	movi	r3,81
    6104:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    6108:	00bfffc4 	movi	r2,-1
    610c:	003fe106 	br	6094 <__ram_exceptions_end+0xfe004074>
    6110:	d0a45704 	addi	r2,gp,-28324
    6114:	003ff306 	br	60e4 <__ram_exceptions_end+0xfe0040c4>
    6118:	d0a45704 	addi	r2,gp,-28324
    611c:	003ff806 	br	6100 <__ram_exceptions_end+0xfe0040e0>

00006120 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    6120:	deffff04 	addi	sp,sp,-4
    6124:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2E, nios2e);
    6128:	00065dc0 	call	65dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    612c:	00800044 	movi	r2,1
    6130:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    6134:	dfc00017 	ldw	ra,0(sp)
    6138:	dec00104 	addi	sp,sp,4
    613c:	f800283a 	ret

00006140 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    6140:	01000074 	movhi	r4,1
    6144:	21208f04 	addi	r4,r4,-32196
    6148:	d160db04 	addi	r5,gp,-31892
    614c:	000621c1 	jmpi	621c <alt_dev_llist_insert>

00006150 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    6150:	20800017 	ldw	r2,0(r4)
    6154:	21c00217 	ldw	r7,8(r4)
    6158:	11000a04 	addi	r4,r2,40
    615c:	00061701 	jmpi	6170 <altera_avalon_jtag_uart_read>

00006160 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    6160:	20800017 	ldw	r2,0(r4)
    6164:	21c00217 	ldw	r7,8(r4)
    6168:	11000a04 	addi	r4,r2,40
    616c:	00061e41 	jmpi	61e4 <altera_avalon_jtag_uart_write>

00006170 <altera_avalon_jtag_uart_read>:
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;
    6170:	298d883a 	add	r6,r5,r6

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    6174:	22400017 	ldw	r9,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    6178:	2980162e 	bgeu	r5,r6,61d4 <altera_avalon_jtag_uart_read+0x64>
    617c:	2807883a 	mov	r3,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    6180:	3a90000c 	andi	r10,r7,16384
    6184:	00000306 	br	6194 <altera_avalon_jtag_uart_read+0x24>
  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    6188:	19000005 	stb	r4,0(r3)
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    618c:	1180092e 	bgeu	r2,r6,61b4 <altera_avalon_jtag_uart_read+0x44>
    6190:	1007883a 	mov	r3,r2
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    6194:	49000037 	ldwio	r4,0(r9)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    6198:	2220000c 	andi	r8,r4,32768
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    619c:	18800044 	addi	r2,r3,1

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    61a0:	403ff91e 	bne	r8,zero,6188 <__ram_exceptions_end+0xfe004168>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
    61a4:	28c0061e 	bne	r5,r3,61c0 <altera_avalon_jtag_uart_read+0x50>
      break;
    else if(flags & O_NONBLOCK)
    61a8:	5000081e 	bne	r10,zero,61cc <altera_avalon_jtag_uart_read+0x5c>
    61ac:	2805883a 	mov	r2,r5
    61b0:	003ff706 	br	6190 <__ram_exceptions_end+0xfe004170>
      break;   
    
  }

  if (ptr != buffer)
    61b4:	28800726 	beq	r5,r2,61d4 <altera_avalon_jtag_uart_read+0x64>
    return ptr - buffer;
    61b8:	1145c83a 	sub	r2,r2,r5
    61bc:	f800283a 	ret
    61c0:	1805883a 	mov	r2,r3
    61c4:	1145c83a 	sub	r2,r2,r5
    61c8:	f800283a 	ret
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    61cc:	00bffd44 	movi	r2,-11
    61d0:	f800283a 	ret
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    61d4:	39d0000c 	andi	r7,r7,16384
    61d8:	383ffc1e 	bne	r7,zero,61cc <__ram_exceptions_end+0xfe0041ac>
    return -EWOULDBLOCK;
  else
    return -EIO;
    61dc:	00bffec4 	movi	r2,-5
}
    61e0:	f800283a 	ret

000061e4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    61e4:	21c00017 	ldw	r7,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    61e8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    61ec:	298d883a 	add	r6,r5,r6
    61f0:	39000104 	addi	r4,r7,4

  while (ptr < end)
    61f4:	2980072e 	bgeu	r5,r6,6214 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    61f8:	20c00037 	ldwio	r3,0(r4)
    61fc:	18ffffec 	andhi	r3,r3,65535
    6200:	183ffd26 	beq	r3,zero,61f8 <__ram_exceptions_end+0xfe0041d8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    6204:	28c00007 	ldb	r3,0(r5)
    6208:	38c00035 	stwio	r3,0(r7)
    620c:	29400044 	addi	r5,r5,1
    6210:	003ff806 	br	61f4 <__ram_exceptions_end+0xfe0041d4>

  return count;
}
    6214:	f800283a 	ret

00006218 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    6218:	f800283a 	ret

0000621c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    621c:	20000a26 	beq	r4,zero,6248 <alt_dev_llist_insert+0x2c>
    6220:	20800217 	ldw	r2,8(r4)
    6224:	10000826 	beq	r2,zero,6248 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    6228:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    622c:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    6230:	0005883a 	mov	r2,zero
  entry->next     = list->next;
    6234:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    6238:	28c00017 	ldw	r3,0(r5)
    623c:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    6240:	29000015 	stw	r4,0(r5)
    6244:	f800283a 	ret
    6248:	d0a0df17 	ldw	r2,-31876(gp)
    624c:	10000926 	beq	r2,zero,6274 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    6250:	deffff04 	addi	sp,sp,-4
    6254:	dfc00015 	stw	ra,0(sp)
    6258:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    625c:	00c00584 	movi	r3,22
    6260:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    6264:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    6268:	dfc00017 	ldw	ra,0(sp)
    626c:	dec00104 	addi	sp,sp,4
    6270:	f800283a 	ret
    6274:	d0a45704 	addi	r2,gp,-28324
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    6278:	00c00584 	movi	r3,22
    627c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    6280:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    6284:	f800283a 	ret

00006288 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    6288:	defffc04 	addi	sp,sp,-16
    628c:	dc800215 	stw	r18,8(sp)
    6290:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    6294:	04800034 	movhi	r18,0
    6298:	04000034 	movhi	r16,0
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    629c:	dfc00315 	stw	ra,12(sp)
    62a0:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    62a4:	841ae604 	addi	r16,r16,27544
    62a8:	949ae704 	addi	r18,r18,27548
    62ac:	84800936 	bltu	r16,r18,62d4 <_do_ctors+0x4c>
    62b0:	84a5c83a 	sub	r18,r16,r18
    62b4:	9024d0ba 	srli	r18,r18,2
    62b8:	0023883a 	mov	r17,zero
    62bc:	94800044 	addi	r18,r18,1
        (*ctor) (); 
    62c0:	80800017 	ldw	r2,0(r16)
    62c4:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    62c8:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
    62cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    62d0:	8cbffb1e 	bne	r17,r18,62c0 <__ram_exceptions_end+0xfe0042a0>
        (*ctor) (); 
}
    62d4:	dfc00317 	ldw	ra,12(sp)
    62d8:	dc800217 	ldw	r18,8(sp)
    62dc:	dc400117 	ldw	r17,4(sp)
    62e0:	dc000017 	ldw	r16,0(sp)
    62e4:	dec00404 	addi	sp,sp,16
    62e8:	f800283a 	ret

000062ec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    62ec:	defffc04 	addi	sp,sp,-16
    62f0:	dc800215 	stw	r18,8(sp)
    62f4:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    62f8:	04800034 	movhi	r18,0
    62fc:	04000034 	movhi	r16,0
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    6300:	dfc00315 	stw	ra,12(sp)
    6304:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    6308:	841ae604 	addi	r16,r16,27544
    630c:	949ae704 	addi	r18,r18,27548
    6310:	84800936 	bltu	r16,r18,6338 <_do_dtors+0x4c>
    6314:	84a5c83a 	sub	r18,r16,r18
    6318:	9024d0ba 	srli	r18,r18,2
    631c:	0023883a 	mov	r17,zero
    6320:	94800044 	addi	r18,r18,1
        (*dtor) (); 
    6324:	80800017 	ldw	r2,0(r16)
    6328:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    632c:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
    6330:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    6334:	8cbffb1e 	bne	r17,r18,6324 <__ram_exceptions_end+0xfe004304>
        (*dtor) (); 
}
    6338:	dfc00317 	ldw	ra,12(sp)
    633c:	dc800217 	ldw	r18,8(sp)
    6340:	dc400117 	ldw	r17,4(sp)
    6344:	dc000017 	ldw	r16,0(sp)
    6348:	dec00404 	addi	sp,sp,16
    634c:	f800283a 	ret

00006350 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    6350:	f800283a 	ret

00006354 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
    6354:	defffd04 	addi	sp,sp,-12
    6358:	2805883a 	mov	r2,r5
    635c:	dc400115 	stw	r17,4(sp)
    6360:	300b883a 	mov	r5,r6
    6364:	2023883a 	mov	r17,r4
{
  int old;

  old = open (name, flags, mode);
    6368:	01807fc4 	movi	r6,511
    636c:	1009883a 	mov	r4,r2
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
    6370:	dfc00215 	stw	ra,8(sp)
    6374:	dc000015 	stw	r16,0(sp)
{
  int old;

  old = open (name, flags, mode);
    6378:	00064540 	call	6454 <open>

  if (old >= 0)
    637c:	10001316 	blt	r2,zero,63cc <alt_open_fd.constprop.0+0x78>
  {
    fd->dev      = alt_fd_list[old].dev;
    6380:	1009883a 	mov	r4,r2
    6384:	01400304 	movi	r5,12
    6388:	1021883a 	mov	r16,r2
    638c:	00036780 	call	3678 <__mulsi3>
    6390:	00c00074 	movhi	r3,1
    6394:	18e02504 	addi	r3,r3,-32620
    6398:	1885883a 	add	r2,r3,r2
    639c:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    63a0:	10c00217 	ldw	r3,8(r2)

    alt_release_fd (old);
    63a4:	8009883a 	mov	r4,r16

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    63a8:	89400015 	stw	r5,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    63ac:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    63b0:	88c00215 	stw	r3,8(r17)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    63b4:	88800115 	stw	r2,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
    63b8:	dfc00217 	ldw	ra,8(sp)
    63bc:	dc400117 	ldw	r17,4(sp)
    63c0:	dc000017 	ldw	r16,0(sp)
    63c4:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    63c8:	0005f681 	jmpi	5f68 <alt_release_fd>
  }
} 
    63cc:	dfc00217 	ldw	ra,8(sp)
    63d0:	dc400117 	ldw	r17,4(sp)
    63d4:	dc000017 	ldw	r16,0(sp)
    63d8:	dec00304 	addi	sp,sp,12
    63dc:	f800283a 	ret

000063e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    63e0:	defffb04 	addi	sp,sp,-20
    63e4:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    63e8:	04000074 	movhi	r16,1
    63ec:	84202804 	addi	r16,r16,-32608
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    63f0:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    63f4:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    63f8:	dcc00315 	stw	r19,12(sp)
    63fc:	dc800215 	stw	r18,8(sp)
    6400:	2827883a 	mov	r19,r5
    6404:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    6408:	200b883a 	mov	r5,r4
    640c:	880d883a 	mov	r6,r17
    6410:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    6414:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    6418:	00063540 	call	6354 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    641c:	813ffd04 	addi	r4,r16,-12
    6420:	980b883a 	mov	r5,r19
    6424:	000d883a 	mov	r6,zero
    6428:	00063540 	call	6354 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    642c:	880d883a 	mov	r6,r17
    6430:	900b883a 	mov	r5,r18
    6434:	81000304 	addi	r4,r16,12
}  
    6438:	dfc00417 	ldw	ra,16(sp)
    643c:	dcc00317 	ldw	r19,12(sp)
    6440:	dc800217 	ldw	r18,8(sp)
    6444:	dc400117 	ldw	r17,4(sp)
    6448:	dc000017 	ldw	r16,0(sp)
    644c:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    6450:	00063541 	jmpi	6354 <alt_open_fd.constprop.0>

00006454 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    6454:	defffa04 	addi	sp,sp,-24
    6458:	dc000015 	stw	r16,0(sp)
    645c:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    6460:	d160db04 	addi	r5,gp,-31892
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    6464:	dc800215 	stw	r18,8(sp)
    6468:	dc400115 	stw	r17,4(sp)
    646c:	dfc00515 	stw	ra,20(sp)
    6470:	dd000415 	stw	r20,16(sp)
    6474:	dcc00315 	stw	r19,12(sp)
    6478:	2023883a 	mov	r17,r4
    647c:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    6480:	00065e40 	call	65e4 <alt_find_dev>
    6484:	10004a26 	beq	r2,zero,65b0 <open+0x15c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    6488:	1009883a 	mov	r4,r2
    648c:	1029883a 	mov	r20,r2
    6490:	00067080 	call	6708 <alt_get_fd>
    6494:	1027883a 	mov	r19,r2
    6498:	1000090e 	bge	r2,zero,64c0 <open+0x6c>
    649c:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    64a0:	9809883a 	mov	r4,r19
    64a4:	0005f680 	call	5f68 <alt_release_fd>
    64a8:	d0a0df17 	ldw	r2,-31876(gp)
    64ac:	10004726 	beq	r2,zero,65cc <open+0x178>
    64b0:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
    64b4:	14000015 	stw	r16,0(r2)
    return -1;
    64b8:	00bfffc4 	movi	r2,-1
    64bc:	00003206 	br	6588 <open+0x134>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    64c0:	01400304 	movi	r5,12
    64c4:	9809883a 	mov	r4,r19
    64c8:	00036780 	call	3678 <__mulsi3>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    64cc:	01500034 	movhi	r5,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    64d0:	00c00074 	movhi	r3,1

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    64d4:	297fffc4 	addi	r5,r5,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    64d8:	18e02504 	addi	r3,r3,-32620

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    64dc:	814a703a 	and	r5,r16,r5
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    64e0:	1889883a 	add	r4,r3,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    64e4:	29500034 	orhi	r5,r5,16384
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    64e8:	d260da17 	ldw	r9,-31896(gp)
    64ec:	22000017 	ldw	r8,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    64f0:	21400215 	stw	r5,8(r4)
    64f4:	19800204 	addi	r6,r3,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    64f8:	000b883a 	mov	r5,zero
    64fc:	00000306 	br	650c <open+0xb8>
    6500:	18c00304 	addi	r3,r3,12
    6504:	31800304 	addi	r6,r6,12
    6508:	49401636 	bltu	r9,r5,6564 <open+0x110>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    650c:	19c00017 	ldw	r7,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6510:	29400044 	addi	r5,r5,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    6514:	3a3ffa1e 	bne	r7,r8,6500 <__ram_exceptions_end+0xfe0044e0>
    6518:	30800017 	ldw	r2,0(r6)
    651c:	103ff80e 	bge	r2,zero,6500 <__ram_exceptions_end+0xfe0044e0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    6520:	20fff726 	beq	r4,r3,6500 <__ram_exceptions_end+0xfe0044e0>
    6524:	04000344 	movi	r16,13
    6528:	003fdd06 	br	64a0 <__ram_exceptions_end+0xfe004480>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    652c:	1009883a 	mov	r4,r2
    6530:	00067080 	call	6708 <alt_get_fd>
    6534:	1027883a 	mov	r19,r2
    6538:	103fd816 	blt	r2,zero,649c <__ram_exceptions_end+0xfe00447c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    653c:	9809883a 	mov	r4,r19
    6540:	01400304 	movi	r5,12
    6544:	00036780 	call	3678 <__mulsi3>
    6548:	01000074 	movhi	r4,1
    654c:	21202504 	addi	r4,r4,-32620
    6550:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    6554:	00900034 	movhi	r2,16384
    6558:	10bfffc4 	addi	r2,r2,-1
    655c:	8084703a 	and	r2,r16,r2
    6560:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    6564:	a0800317 	ldw	r2,12(r20)
    6568:	10000f26 	beq	r2,zero,65a8 <open+0x154>
    656c:	900f883a 	mov	r7,r18
    6570:	800d883a 	mov	r6,r16
    6574:	880b883a 	mov	r5,r17
    6578:	103ee83a 	callr	r2
    657c:	1007883a 	mov	r3,r2
    6580:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    6584:	18001316 	blt	r3,zero,65d4 <open+0x180>
  }
  
  /* return the reference upon success */

  return index;
}
    6588:	dfc00517 	ldw	ra,20(sp)
    658c:	dd000417 	ldw	r20,16(sp)
    6590:	dcc00317 	ldw	r19,12(sp)
    6594:	dc800217 	ldw	r18,8(sp)
    6598:	dc400117 	ldw	r17,4(sp)
    659c:	dc000017 	ldw	r16,0(sp)
    65a0:	dec00604 	addi	sp,sp,24
    65a4:	f800283a 	ret
    65a8:	9805883a 	mov	r2,r19
    65ac:	003ff606 	br	6588 <__ram_exceptions_end+0xfe004568>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    65b0:	8809883a 	mov	r4,r17
    65b4:	000665c0 	call	665c <alt_find_file>
    65b8:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    65bc:	103fdb1e 	bne	r2,zero,652c <__ram_exceptions_end+0xfe00450c>
    65c0:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    65c4:	04ffffc4 	movi	r19,-1
    65c8:	003fb506 	br	64a0 <__ram_exceptions_end+0xfe004480>
    65cc:	d0a45704 	addi	r2,gp,-28324
    65d0:	003fb806 	br	64b4 <__ram_exceptions_end+0xfe004494>
    65d4:	00e1c83a 	sub	r16,zero,r3
    65d8:	003fb106 	br	64a0 <__ram_exceptions_end+0xfe004480>

000065dc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    65dc:	000170fa 	wrctl	ienable,zero
    65e0:	f800283a 	ret

000065e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    65e4:	defffb04 	addi	sp,sp,-20
    65e8:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
    65ec:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    65f0:	dc400115 	stw	r17,4(sp)
    65f4:	2823883a 	mov	r17,r5
    65f8:	dcc00315 	stw	r19,12(sp)
    65fc:	dfc00415 	stw	ra,16(sp)
    6600:	dc800215 	stw	r18,8(sp)
    6604:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    6608:	00068580 	call	6858 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    660c:	8c000b26 	beq	r17,r16,663c <alt_find_dev+0x58>
    6610:	14800044 	addi	r18,r2,1
    6614:	00000206 	br	6620 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    6618:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    661c:	8c000726 	beq	r17,r16,663c <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    6620:	81000217 	ldw	r4,8(r16)
    6624:	900d883a 	mov	r6,r18
    6628:	980b883a 	mov	r5,r19
    662c:	00067dc0 	call	67dc <memcmp>
    6630:	103ff91e 	bne	r2,zero,6618 <__ram_exceptions_end+0xfe0045f8>
    6634:	8005883a 	mov	r2,r16
    6638:	00000106 	br	6640 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    663c:	0005883a 	mov	r2,zero
}
    6640:	dfc00417 	ldw	ra,16(sp)
    6644:	dcc00317 	ldw	r19,12(sp)
    6648:	dc800217 	ldw	r18,8(sp)
    664c:	dc400117 	ldw	r17,4(sp)
    6650:	dc000017 	ldw	r16,0(sp)
    6654:	dec00504 	addi	sp,sp,20
    6658:	f800283a 	ret

0000665c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    665c:	defffa04 	addi	sp,sp,-24
    6660:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    6664:	d420dd17 	ldw	r16,-31884(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    6668:	dd000415 	stw	r20,16(sp)
    666c:	dfc00515 	stw	ra,20(sp)
    6670:	dcc00315 	stw	r19,12(sp)
    6674:	dc800215 	stw	r18,8(sp)
    6678:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    667c:	d520dd04 	addi	r20,gp,-31884
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6680:	85001626 	beq	r16,r20,66dc <alt_find_file+0x80>
    6684:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    6688:	04c00bc4 	movi	r19,47
    668c:	00000806 	br	66b0 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6690:	9185883a 	add	r2,r18,r6
    6694:	10800007 	ldb	r2,0(r2)
    6698:	14c00126 	beq	r2,r19,66a0 <alt_find_file+0x44>
    669c:	1000021e 	bne	r2,zero,66a8 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
    66a0:	00067dc0 	call	67dc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    66a4:	10001626 	beq	r2,zero,6700 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    66a8:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    66ac:	85000b26 	beq	r16,r20,66dc <alt_find_file+0x80>
  {
    len = strlen(next->name);
    66b0:	84400217 	ldw	r17,8(r16)
    66b4:	8809883a 	mov	r4,r17
    66b8:	00068580 	call	6858 <strlen>
    66bc:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
    66c0:	8885883a 	add	r2,r17,r2
    66c4:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    66c8:	900b883a 	mov	r5,r18
    66cc:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    66d0:	14ffef1e 	bne	r2,r19,6690 <__ram_exceptions_end+0xfe004670>
    {
      len -= 1;
    66d4:	31bfffc4 	addi	r6,r6,-1
    66d8:	003fed06 	br	6690 <__ram_exceptions_end+0xfe004670>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    66dc:	0005883a 	mov	r2,zero
}
    66e0:	dfc00517 	ldw	ra,20(sp)
    66e4:	dd000417 	ldw	r20,16(sp)
    66e8:	dcc00317 	ldw	r19,12(sp)
    66ec:	dc800217 	ldw	r18,8(sp)
    66f0:	dc400117 	ldw	r17,4(sp)
    66f4:	dc000017 	ldw	r16,0(sp)
    66f8:	dec00604 	addi	sp,sp,24
    66fc:	f800283a 	ret
    6700:	8005883a 	mov	r2,r16
    6704:	003ff606 	br	66e0 <__ram_exceptions_end+0xfe0046c0>

00006708 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6708:	defffc04 	addi	sp,sp,-16
    670c:	dc400115 	stw	r17,4(sp)
    6710:	04400074 	movhi	r17,1
    6714:	8c602504 	addi	r17,r17,-32620
    6718:	dc000015 	stw	r16,0(sp)
    671c:	dfc00315 	stw	ra,12(sp)
    6720:	dc800215 	stw	r18,8(sp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6724:	0021883a 	mov	r16,zero
    6728:	8805883a 	mov	r2,r17
    672c:	01400804 	movi	r5,32
    6730:	00000206 	br	673c <alt_get_fd+0x34>
    6734:	84000044 	addi	r16,r16,1
    6738:	81401326 	beq	r16,r5,6788 <alt_get_fd+0x80>
  {
    if (!alt_fd_list[i].dev)
    673c:	10c00017 	ldw	r3,0(r2)
    6740:	10800304 	addi	r2,r2,12
    6744:	183ffb1e 	bne	r3,zero,6734 <__ram_exceptions_end+0xfe004714>
    6748:	2025883a 	mov	r18,r4
    {
      alt_fd_list[i].dev = dev;
    674c:	01400304 	movi	r5,12
    6750:	8009883a 	mov	r4,r16
    6754:	00036780 	call	3678 <__mulsi3>
    6758:	8885883a 	add	r2,r17,r2
    675c:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
    6760:	d0a0da17 	ldw	r2,-31896(gp)
    6764:	1400010e 	bge	r2,r16,676c <alt_get_fd+0x64>
      {
        alt_max_fd = i;
    6768:	d420da15 	stw	r16,-31896(gp)
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    676c:	8005883a 	mov	r2,r16
    6770:	dfc00317 	ldw	ra,12(sp)
    6774:	dc800217 	ldw	r18,8(sp)
    6778:	dc400117 	ldw	r17,4(sp)
    677c:	dc000017 	ldw	r16,0(sp)
    6780:	dec00404 	addi	sp,sp,16
    6784:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    6788:	043ffa04 	movi	r16,-24
    678c:	003ff706 	br	676c <__ram_exceptions_end+0xfe00474c>

00006790 <atexit>:
    6790:	200b883a 	mov	r5,r4
    6794:	000f883a 	mov	r7,zero
    6798:	000d883a 	mov	r6,zero
    679c:	0009883a 	mov	r4,zero
    67a0:	00068f01 	jmpi	68f0 <__register_exitproc>

000067a4 <exit>:
    67a4:	defffe04 	addi	sp,sp,-8
    67a8:	000b883a 	mov	r5,zero
    67ac:	dc000015 	stw	r16,0(sp)
    67b0:	dfc00115 	stw	ra,4(sp)
    67b4:	2021883a 	mov	r16,r4
    67b8:	0006a080 	call	6a08 <__call_exitprocs>
    67bc:	00800074 	movhi	r2,1
    67c0:	10a17004 	addi	r2,r2,-31296
    67c4:	11000017 	ldw	r4,0(r2)
    67c8:	20800f17 	ldw	r2,60(r4)
    67cc:	10000126 	beq	r2,zero,67d4 <exit+0x30>
    67d0:	103ee83a 	callr	r2
    67d4:	8009883a 	mov	r4,r16
    67d8:	0006b880 	call	6b88 <_exit>

000067dc <memcmp>:
    67dc:	01c000c4 	movi	r7,3
    67e0:	3980192e 	bgeu	r7,r6,6848 <memcmp+0x6c>
    67e4:	2144b03a 	or	r2,r4,r5
    67e8:	11c4703a 	and	r2,r2,r7
    67ec:	10000f26 	beq	r2,zero,682c <memcmp+0x50>
    67f0:	20800003 	ldbu	r2,0(r4)
    67f4:	28c00003 	ldbu	r3,0(r5)
    67f8:	10c0151e 	bne	r2,r3,6850 <memcmp+0x74>
    67fc:	31bfff84 	addi	r6,r6,-2
    6800:	01ffffc4 	movi	r7,-1
    6804:	00000406 	br	6818 <memcmp+0x3c>
    6808:	20800003 	ldbu	r2,0(r4)
    680c:	28c00003 	ldbu	r3,0(r5)
    6810:	31bfffc4 	addi	r6,r6,-1
    6814:	10c00e1e 	bne	r2,r3,6850 <memcmp+0x74>
    6818:	21000044 	addi	r4,r4,1
    681c:	29400044 	addi	r5,r5,1
    6820:	31fff91e 	bne	r6,r7,6808 <__ram_exceptions_end+0xfe0047e8>
    6824:	0005883a 	mov	r2,zero
    6828:	f800283a 	ret
    682c:	20c00017 	ldw	r3,0(r4)
    6830:	28800017 	ldw	r2,0(r5)
    6834:	18bfee1e 	bne	r3,r2,67f0 <__ram_exceptions_end+0xfe0047d0>
    6838:	31bfff04 	addi	r6,r6,-4
    683c:	21000104 	addi	r4,r4,4
    6840:	29400104 	addi	r5,r5,4
    6844:	39bff936 	bltu	r7,r6,682c <__ram_exceptions_end+0xfe00480c>
    6848:	303fe91e 	bne	r6,zero,67f0 <__ram_exceptions_end+0xfe0047d0>
    684c:	003ff506 	br	6824 <__ram_exceptions_end+0xfe004804>
    6850:	10c5c83a 	sub	r2,r2,r3
    6854:	f800283a 	ret

00006858 <strlen>:
    6858:	208000cc 	andi	r2,r4,3
    685c:	10002026 	beq	r2,zero,68e0 <strlen+0x88>
    6860:	20800007 	ldb	r2,0(r4)
    6864:	10002026 	beq	r2,zero,68e8 <strlen+0x90>
    6868:	2005883a 	mov	r2,r4
    686c:	00000206 	br	6878 <strlen+0x20>
    6870:	10c00007 	ldb	r3,0(r2)
    6874:	18001826 	beq	r3,zero,68d8 <strlen+0x80>
    6878:	10800044 	addi	r2,r2,1
    687c:	10c000cc 	andi	r3,r2,3
    6880:	183ffb1e 	bne	r3,zero,6870 <__ram_exceptions_end+0xfe004850>
    6884:	10c00017 	ldw	r3,0(r2)
    6888:	01ffbff4 	movhi	r7,65279
    688c:	39ffbfc4 	addi	r7,r7,-257
    6890:	00ca303a 	nor	r5,zero,r3
    6894:	01a02074 	movhi	r6,32897
    6898:	19c7883a 	add	r3,r3,r7
    689c:	31a02004 	addi	r6,r6,-32640
    68a0:	1946703a 	and	r3,r3,r5
    68a4:	1986703a 	and	r3,r3,r6
    68a8:	1800091e 	bne	r3,zero,68d0 <strlen+0x78>
    68ac:	10800104 	addi	r2,r2,4
    68b0:	10c00017 	ldw	r3,0(r2)
    68b4:	19cb883a 	add	r5,r3,r7
    68b8:	00c6303a 	nor	r3,zero,r3
    68bc:	28c6703a 	and	r3,r5,r3
    68c0:	1986703a 	and	r3,r3,r6
    68c4:	183ff926 	beq	r3,zero,68ac <__ram_exceptions_end+0xfe00488c>
    68c8:	00000106 	br	68d0 <strlen+0x78>
    68cc:	10800044 	addi	r2,r2,1
    68d0:	10c00007 	ldb	r3,0(r2)
    68d4:	183ffd1e 	bne	r3,zero,68cc <__ram_exceptions_end+0xfe0048ac>
    68d8:	1105c83a 	sub	r2,r2,r4
    68dc:	f800283a 	ret
    68e0:	2005883a 	mov	r2,r4
    68e4:	003fe706 	br	6884 <__ram_exceptions_end+0xfe004864>
    68e8:	0005883a 	mov	r2,zero
    68ec:	f800283a 	ret

000068f0 <__register_exitproc>:
    68f0:	defffa04 	addi	sp,sp,-24
    68f4:	dc000315 	stw	r16,12(sp)
    68f8:	04000074 	movhi	r16,1
    68fc:	84217004 	addi	r16,r16,-31296
    6900:	80c00017 	ldw	r3,0(r16)
    6904:	dc400415 	stw	r17,16(sp)
    6908:	dfc00515 	stw	ra,20(sp)
    690c:	18805217 	ldw	r2,328(r3)
    6910:	2023883a 	mov	r17,r4
    6914:	10003726 	beq	r2,zero,69f4 <__register_exitproc+0x104>
    6918:	10c00117 	ldw	r3,4(r2)
    691c:	010007c4 	movi	r4,31
    6920:	20c00e16 	blt	r4,r3,695c <__register_exitproc+0x6c>
    6924:	1a000044 	addi	r8,r3,1
    6928:	8800221e 	bne	r17,zero,69b4 <__register_exitproc+0xc4>
    692c:	18c00084 	addi	r3,r3,2
    6930:	18c7883a 	add	r3,r3,r3
    6934:	18c7883a 	add	r3,r3,r3
    6938:	12000115 	stw	r8,4(r2)
    693c:	10c7883a 	add	r3,r2,r3
    6940:	19400015 	stw	r5,0(r3)
    6944:	0005883a 	mov	r2,zero
    6948:	dfc00517 	ldw	ra,20(sp)
    694c:	dc400417 	ldw	r17,16(sp)
    6950:	dc000317 	ldw	r16,12(sp)
    6954:	dec00604 	addi	sp,sp,24
    6958:	f800283a 	ret
    695c:	00800034 	movhi	r2,0
    6960:	10800004 	addi	r2,r2,0
    6964:	10002626 	beq	r2,zero,6a00 <__register_exitproc+0x110>
    6968:	01006404 	movi	r4,400
    696c:	d9400015 	stw	r5,0(sp)
    6970:	d9800115 	stw	r6,4(sp)
    6974:	d9c00215 	stw	r7,8(sp)
    6978:	00000000 	call	0 <_start>
    697c:	d9400017 	ldw	r5,0(sp)
    6980:	d9800117 	ldw	r6,4(sp)
    6984:	d9c00217 	ldw	r7,8(sp)
    6988:	10001d26 	beq	r2,zero,6a00 <__register_exitproc+0x110>
    698c:	81000017 	ldw	r4,0(r16)
    6990:	10000115 	stw	zero,4(r2)
    6994:	02000044 	movi	r8,1
    6998:	22405217 	ldw	r9,328(r4)
    699c:	0007883a 	mov	r3,zero
    69a0:	12400015 	stw	r9,0(r2)
    69a4:	20805215 	stw	r2,328(r4)
    69a8:	10006215 	stw	zero,392(r2)
    69ac:	10006315 	stw	zero,396(r2)
    69b0:	883fde26 	beq	r17,zero,692c <__ram_exceptions_end+0xfe00490c>
    69b4:	18c9883a 	add	r4,r3,r3
    69b8:	2109883a 	add	r4,r4,r4
    69bc:	1109883a 	add	r4,r2,r4
    69c0:	21802215 	stw	r6,136(r4)
    69c4:	01800044 	movi	r6,1
    69c8:	12406217 	ldw	r9,392(r2)
    69cc:	30cc983a 	sll	r6,r6,r3
    69d0:	4992b03a 	or	r9,r9,r6
    69d4:	12406215 	stw	r9,392(r2)
    69d8:	21c04215 	stw	r7,264(r4)
    69dc:	01000084 	movi	r4,2
    69e0:	893fd21e 	bne	r17,r4,692c <__ram_exceptions_end+0xfe00490c>
    69e4:	11006317 	ldw	r4,396(r2)
    69e8:	218cb03a 	or	r6,r4,r6
    69ec:	11806315 	stw	r6,396(r2)
    69f0:	003fce06 	br	692c <__ram_exceptions_end+0xfe00490c>
    69f4:	18805304 	addi	r2,r3,332
    69f8:	18805215 	stw	r2,328(r3)
    69fc:	003fc606 	br	6918 <__ram_exceptions_end+0xfe0048f8>
    6a00:	00bfffc4 	movi	r2,-1
    6a04:	003fd006 	br	6948 <__ram_exceptions_end+0xfe004928>

00006a08 <__call_exitprocs>:
    6a08:	defff504 	addi	sp,sp,-44
    6a0c:	df000915 	stw	fp,36(sp)
    6a10:	dd400615 	stw	r21,24(sp)
    6a14:	dc800315 	stw	r18,12(sp)
    6a18:	dfc00a15 	stw	ra,40(sp)
    6a1c:	ddc00815 	stw	r23,32(sp)
    6a20:	dd800715 	stw	r22,28(sp)
    6a24:	dd000515 	stw	r20,20(sp)
    6a28:	dcc00415 	stw	r19,16(sp)
    6a2c:	dc400215 	stw	r17,8(sp)
    6a30:	dc000115 	stw	r16,4(sp)
    6a34:	d9000015 	stw	r4,0(sp)
    6a38:	2839883a 	mov	fp,r5
    6a3c:	04800044 	movi	r18,1
    6a40:	057fffc4 	movi	r21,-1
    6a44:	00800074 	movhi	r2,1
    6a48:	10a17004 	addi	r2,r2,-31296
    6a4c:	12000017 	ldw	r8,0(r2)
    6a50:	45005217 	ldw	r20,328(r8)
    6a54:	44c05204 	addi	r19,r8,328
    6a58:	a0001c26 	beq	r20,zero,6acc <__call_exitprocs+0xc4>
    6a5c:	a0800117 	ldw	r2,4(r20)
    6a60:	15ffffc4 	addi	r23,r2,-1
    6a64:	b8000d16 	blt	r23,zero,6a9c <__call_exitprocs+0x94>
    6a68:	14000044 	addi	r16,r2,1
    6a6c:	8421883a 	add	r16,r16,r16
    6a70:	8421883a 	add	r16,r16,r16
    6a74:	84402004 	addi	r17,r16,128
    6a78:	a463883a 	add	r17,r20,r17
    6a7c:	a421883a 	add	r16,r20,r16
    6a80:	e0001e26 	beq	fp,zero,6afc <__call_exitprocs+0xf4>
    6a84:	80804017 	ldw	r2,256(r16)
    6a88:	e0801c26 	beq	fp,r2,6afc <__call_exitprocs+0xf4>
    6a8c:	bdffffc4 	addi	r23,r23,-1
    6a90:	843fff04 	addi	r16,r16,-4
    6a94:	8c7fff04 	addi	r17,r17,-4
    6a98:	bd7ff91e 	bne	r23,r21,6a80 <__ram_exceptions_end+0xfe004a60>
    6a9c:	00800034 	movhi	r2,0
    6aa0:	10800004 	addi	r2,r2,0
    6aa4:	10000926 	beq	r2,zero,6acc <__call_exitprocs+0xc4>
    6aa8:	a0800117 	ldw	r2,4(r20)
    6aac:	1000301e 	bne	r2,zero,6b70 <__call_exitprocs+0x168>
    6ab0:	a0800017 	ldw	r2,0(r20)
    6ab4:	10003226 	beq	r2,zero,6b80 <__call_exitprocs+0x178>
    6ab8:	a009883a 	mov	r4,r20
    6abc:	98800015 	stw	r2,0(r19)
    6ac0:	00000000 	call	0 <_start>
    6ac4:	9d000017 	ldw	r20,0(r19)
    6ac8:	a03fe41e 	bne	r20,zero,6a5c <__ram_exceptions_end+0xfe004a3c>
    6acc:	dfc00a17 	ldw	ra,40(sp)
    6ad0:	df000917 	ldw	fp,36(sp)
    6ad4:	ddc00817 	ldw	r23,32(sp)
    6ad8:	dd800717 	ldw	r22,28(sp)
    6adc:	dd400617 	ldw	r21,24(sp)
    6ae0:	dd000517 	ldw	r20,20(sp)
    6ae4:	dcc00417 	ldw	r19,16(sp)
    6ae8:	dc800317 	ldw	r18,12(sp)
    6aec:	dc400217 	ldw	r17,8(sp)
    6af0:	dc000117 	ldw	r16,4(sp)
    6af4:	dec00b04 	addi	sp,sp,44
    6af8:	f800283a 	ret
    6afc:	a0800117 	ldw	r2,4(r20)
    6b00:	80c00017 	ldw	r3,0(r16)
    6b04:	10bfffc4 	addi	r2,r2,-1
    6b08:	15c01426 	beq	r2,r23,6b5c <__call_exitprocs+0x154>
    6b0c:	80000015 	stw	zero,0(r16)
    6b10:	183fde26 	beq	r3,zero,6a8c <__ram_exceptions_end+0xfe004a6c>
    6b14:	95c8983a 	sll	r4,r18,r23
    6b18:	a0806217 	ldw	r2,392(r20)
    6b1c:	a5800117 	ldw	r22,4(r20)
    6b20:	2084703a 	and	r2,r4,r2
    6b24:	10000b26 	beq	r2,zero,6b54 <__call_exitprocs+0x14c>
    6b28:	a0806317 	ldw	r2,396(r20)
    6b2c:	2088703a 	and	r4,r4,r2
    6b30:	20000c1e 	bne	r4,zero,6b64 <__call_exitprocs+0x15c>
    6b34:	89400017 	ldw	r5,0(r17)
    6b38:	d9000017 	ldw	r4,0(sp)
    6b3c:	183ee83a 	callr	r3
    6b40:	a0800117 	ldw	r2,4(r20)
    6b44:	15bfbf1e 	bne	r2,r22,6a44 <__ram_exceptions_end+0xfe004a24>
    6b48:	98800017 	ldw	r2,0(r19)
    6b4c:	153fcf26 	beq	r2,r20,6a8c <__ram_exceptions_end+0xfe004a6c>
    6b50:	003fbc06 	br	6a44 <__ram_exceptions_end+0xfe004a24>
    6b54:	183ee83a 	callr	r3
    6b58:	003ff906 	br	6b40 <__ram_exceptions_end+0xfe004b20>
    6b5c:	a5c00115 	stw	r23,4(r20)
    6b60:	003feb06 	br	6b10 <__ram_exceptions_end+0xfe004af0>
    6b64:	89000017 	ldw	r4,0(r17)
    6b68:	183ee83a 	callr	r3
    6b6c:	003ff406 	br	6b40 <__ram_exceptions_end+0xfe004b20>
    6b70:	a0800017 	ldw	r2,0(r20)
    6b74:	a027883a 	mov	r19,r20
    6b78:	1029883a 	mov	r20,r2
    6b7c:	003fb606 	br	6a58 <__ram_exceptions_end+0xfe004a38>
    6b80:	0005883a 	mov	r2,zero
    6b84:	003ffb06 	br	6b74 <__ram_exceptions_end+0xfe004b54>

00006b88 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    6b88:	20000226 	beq	r4,zero,6b94 <_exit+0xc>
    ALT_SIM_FAIL();
    6b8c:	002af070 	cmpltui	zero,zero,43969
    6b90:	003fff06 	br	6b90 <__ram_exceptions_end+0xfe004b70>
  } else {
    ALT_SIM_PASS();
    6b94:	002af0b0 	cmpltui	zero,zero,43970
    6b98:	003ffd06 	br	6b90 <__ram_exceptions_end+0xfe004b70>
