
bringup_test.elf:     file format elf32-littlenios2
bringup_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000204

Program Header:
    LOAD off    0x00001020 vaddr 0x02002020 paddr 0x00000000 align 2**12
         filesz 0x00000204 memsz 0x00000204 flags r-x
    LOAD off    0x00002204 vaddr 0x00000204 paddr 0x00000204 align 2**12
         filesz 0x0000e714 memsz 0x0000e714 flags r-x
    LOAD off    0x00010918 vaddr 0x0000e918 paddr 0x000123a0 align 2**12
         filesz 0x00003a88 memsz 0x00003a88 flags rw-
    LOAD off    0x00014e28 vaddr 0x00015e28 paddr 0x00015e28 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-
    LOAD off    0x00015000 vaddr 0x02002000 paddr 0x02002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02002000  02002000  00015000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  02002020  00000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e518  00000204  00000204  00002204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001fc  0000e71c  0000e71c  0001071c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00003a88  0000e918  000123a0  00010918  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00015e28  00015e28  00014e28  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00015f7c  00015f7c  00015020  2**0
                  CONTENTS
  7 .onchip_ram   00000000  02002224  02002224  00015020  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00015020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000e60  00000000  00000000  00015050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00020902  00000000  00000000  00015eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000960b  00000000  00000000  000367b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   000114e6  00000000  00000000  0003fdbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  0000234c  00000000  00000000  000512a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00003c61  00000000  00000000  000535f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000131a5  00000000  00000000  00057251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_alt_sim_info 00000010  00000000  00000000  0006a3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002410  00000000  00000000  0006a408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .thread_model 00000003  00000000  00000000  0006f954  2**0
                  CONTENTS, READONLY
 19 .cpu          00000006  00000000  00000000  0006f957  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006f95d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006f95e  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0006f95f  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0006f968  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0006f971  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0006f97a  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000006f  00000000  00000000  0006f984  2**0
                  CONTENTS, READONLY
 27 .jdi          00004b97  00000000  00000000  0006f9f3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02002000 l    d  .entry	00000000 .entry
02002020 l    d  .exceptions	00000000 .exceptions
00000204 l    d  .text	00000000 .text
0000e71c l    d  .rodata	00000000 .rodata
0000e918 l    d  .rwdata	00000000 .rwdata
00015e28 l    d  .bss	00000000 .bss
00015f7c l    d  .sdram	00000000 .sdram
02002224 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/GitHub/FAccel-CNN/hardware/intel_fpga/development_kits/terasic_de0_nano/quartus_projects/inference_test/20.1/software/bringup_test_bsp//obj/HAL/src/crt0.o
0000023c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 bringup_test.c
00000000 l    df *ABS*	00000000 printf.c
00001a4c l     F .text	00000054 _out_buffer
00001aa0 l     F .text	00000034 _out_null
00001ad4 l     F .text	00000050 _out_char
00001b24 l     F .text	00000060 _out_fct
00001b84 l     F .text	00000070 _strnlen_s
00001bf4 l     F .text	0000004c _is_digit
00001c40 l     F .text	000000a4 _atoi
00001ce4 l     F .text	0000013c _out_rev
00001e20 l     F .text	000002fc _ntoa_format
0000211c l     F .text	00000148 _ntoa_long
00002264 l     F .text	00000190 _ntoa_long_long
000023f4 l     F .text	0000072c _ftoa
00002b20 l     F .text	000008ac _etoa
0000e79c l     O .rodata	00000050 pow10.0
000033cc l     F .text	00001108 _vsnprintf
00000000 l    df *ABS*	00000000 wf_exp.c
00000000 l    df *ABS*	00000000 wf_log.c
00000000 l    df *ABS*	00000000 ef_exp.c
00012354 l     O .rwdata	00000008 ln2HI
0001234c l     O .rwdata	00000008 ln2LO
0001235c l     O .rwdata	00000008 halF
00000000 l    df *ABS*	00000000 ef_log.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 unordsf2.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00010918 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
00009d50 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000a114 l     F .text	00000034 alt_dev_reg
00010d3c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000a3f0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000a5fc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ad74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000aeac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000aed8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000b33c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000b48c l     F .text	0000003c alt_get_errno
0000b4c8 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000c6d0 l     F .text	00000008 __fp_lock
0000c6e4 l     F .text	00000008 __fp_unlock
0000c6ec l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
0000dd40 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e098 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e190 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e27c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e3e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001239c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000e5dc l     F .text	0000003c alt_get_errno
00015e40 g     O .bss	00000004 alt_instruction_exception_handler
0000bcf4 g     F .text	00000018 putchar
0000df40 g     F .text	00000058 _isatty_r
00009e3c g     F .text	0000007c alt_main
000002b8 g     F .text	00000030 f2bf
00000240 g     F .text	0000003c _putchar
00015e54 g     O .bss	00000100 alt_irq
0000df98 g     F .text	00000064 _lseek_r
000123a0 g       *ABS*	00000000 __flash_rwdata_start
0000867c g     F .text	00000080 .hidden __eqdf2
00015f7c g       *ABS*	00000000 __alt_heap_start
00001844 g     F .text	000001e8 grey_to_text
0000dc20 g     F .text	0000005c __sseek
0000ca34 g     F .text	00000010 __sinit
0000c100 g     F .text	00000148 __swbuf_r
0000c854 g     F .text	00000078 __sfmoreglue
0000e3bc g     F .text	00000024 __malloc_unlock
0000631c g     F .text	000003f4 .hidden __divsf3
00000428 g     F .text	00000084 bf_gt
00004604 g     F .text	00000050 vprintf_
00000644 g     F .text	000000c0 show_featuremap
0000ca20 g     F .text	00000014 _cleanup
000071cc g     F .text	00000070 .hidden __fixsfsi
000086fc g     F .text	000000e8 .hidden __gtdf2
0000b920 g     F .text	00000024 altera_nios2_gen2_irq_init
00009c44 g     F .text	0000000c __errno
02002000 g     F .entry	0000000c __reset
00000c1c g     F .text	000001b0 maxpool
000013f8 g     F .text	000000e0 grey_to_feature
000047f0 g     F .text	00000098 logf
00000000 g       *ABS*	00000000 __flash_exceptions_start
0000dee0 g     F .text	00000060 _fstat_r
00015e44 g     O .bss	00000004 errno
0000db98 g     F .text	00000008 __seofread
00015e2c g     O .bss	00000004 alt_argv
0001a34c g       *ABS*	00000000 _gp
00006cec g     F .text	00000494 .hidden __subsf3
00011dc4 g     O .rwdata	00000180 alt_fd_list
0000bcec g     F .text	00000008 _putchar_r
0000b944 g     F .text	00000090 alt_find_dev
00009c50 g     F .text	00000100 memcpy
0000c6d8 g     F .text	0000000c _cleanup_r
000099ac g     F .text	000000b8 .hidden __floatsidf
0000b410 g     F .text	0000007c alt_io_redirect
000087e4 g     F .text	000000e8 .hidden __ltdf2
0000e71c g       *ABS*	00000000 __DTOR_END__
00000dcc g     F .text	000000fc global_average_pooling
0000bb94 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00004c48 g     F .text	00000434 __ieee754_logf
0000a7f8 g     F .text	00000220 altera_avalon_jtag_uart_read
00005dc8 g     F .text	00000064 .hidden __udivsi3
0000e1cc g     F .text	000000b0 isatty
0000453c g     F .text	00000064 sprintf_
00006838 g     F .text	000000b4 .hidden __lesf2
0000507c g     F .text	00000074 .hidden __fixunsdfsi
00015e50 g     O .bss	00000004 __malloc_top_pad
0000daec g     F .text	00000058 _sbrk_r
0000164c g     F .text	000001f8 rgb565_to_text
0000dffc g     F .text	00000064 _read_r
00012380 g     O .rwdata	00000004 alt_max_fd
0000de00 g     F .text	00000070 _fclose_r
0000c64c g     F .text	00000084 fflush
00015e4c g     O .bss	00000004 __malloc_max_sbrked_mem
00009af4 g     F .text	000000fc .hidden __extendsfdf2
0000745c g     F .text	000008f0 .hidden __adddf3
00006710 g     F .text	00000070 .hidden __nesf2
00005710 g     F .text	000005c4 .hidden __umoddi3
0000e2b8 g     F .text	000000e0 lseek
00012364 g     O .rwdata	00000004 __fdlib_version
00012368 g     O .rwdata	00000004 _global_impure_ptr
00015f7c g       *ABS*	00000000 __bss_end
0000e918 g     O .rwdata	00002000 image64by64
0000b254 g     F .text	000000e8 alt_iic_isr_register
0000b818 g     F .text	00000108 alt_tick
000050f0 g     F .text	00000620 .hidden __udivdi3
00009a64 g     F .text	00000090 .hidden __floatunsidf
0000ca54 g     F .text	00000014 __fp_lock_all
00004654 g     F .text	00000054 vsnprintf_
0000b208 g     F .text	0000004c alt_ic_irq_enabled
00004888 g     F .text	000003c0 __ieee754_expf
0000b774 g     F .text	000000a4 alt_alarm_stop
00015e34 g     O .bss	00000004 alt_irq_active
020020fc g     F .exceptions	000000c8 alt_irq_handler
00011d9c g     O .rwdata	00000028 alt_dev_null
0000ae8c g     F .text	00000020 alt_dcache_flush_all
0000992c g     F .text	00000080 .hidden __fixdfsi
000123a0 g       *ABS*	00000000 __ram_rwdata_end
00012378 g     O .rwdata	00000008 alt_dev_list
0000e618 g     F .text	00000104 write
0000bf54 g     F .text	000000cc _putc_r
000046a8 g     F .text	00000078 fctprintf
00006780 g     F .text	000000b8 .hidden __gtsf2
000003e0 g     F .text	00000048 bf_neg
0000e918 g       *ABS*	00000000 __ram_rodata_end
0000e0d4 g     F .text	000000bc fstat
000087e4 g     F .text	000000e8 .hidden __ledf2
00005e2c g     F .text	0000005c .hidden __umodsi3
00015f7c g       *ABS*	00000000 end
000007b4 g     F .text	0000022c padding
0000a330 g     F .text	000000c0 altera_avalon_jtag_uart_init
020021c4 g     F .exceptions	00000060 alt_instruction_exception_entry
0000e71c g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00009bf0 g     F .text	00000054 .hidden __clzsi2
0000aa18 g     F .text	00000228 altera_avalon_jtag_uart_write
0000ca44 g     F .text	00000004 __sfp_lock_acquire
0000cb98 g     F .text	000002fc _free_r
00009eb8 g     F .text	0000022c alt_printf
0000be34 g     F .text	00000120 __call_exitprocs
00000364 g     F .text	0000007c bf_add
00012394 g     O .rwdata	00000004 __malloc_sbrk_base
00000204 g     F .text	0000003c _start
00015e38 g     O .bss	00000004 _alt_tick_rate
00015e3c g     O .bss	00000004 _alt_nticks
0000e41c g     F .text	00000108 read
0000a184 g     F .text	00000048 alt_sys_init
0000723c g     F .text	00000124 .hidden __floatsisf
0000bda4 g     F .text	00000090 __register_exitproc
0000a69c g     F .text	00000068 altera_avalon_jtag_uart_close
00005e88 g     F .text	00000028 .hidden __mulsi3
0000e918 g       *ABS*	00000000 __ram_rwdata_start
0000e71c g       *ABS*	00000000 __ram_rodata_start
00015f54 g     O .bss	00000028 __malloc_current_mallinfo
000002e8 g     F .text	0000007c bf_mult
00006710 g     F .text	00000070 .hidden __eqsf2
00000530 g     F .text	00000090 put_pixel
0000a1cc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000badc g     F .text	000000b8 alt_get_fd
0000dce8 g     F .text	00000058 _close_r
0000bc74 g     F .text	00000078 memcmp
0000a28c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015f7c g       *ABS*	00000000 __alt_stack_base
0000a2dc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000c260 g     F .text	00000164 __swsetup_r
00007d4c g     F .text	00000930 .hidden __divdf3
0000c8cc g     F .text	00000154 __sfp
00011f44 g     O .rwdata	00000408 __malloc_av_
0000ca50 g     F .text	00000004 __sinit_lock_release
000088cc g     F .text	000007ac .hidden __muldf3
0000db44 g     F .text	00000054 __sread
0000b9d4 g     F .text	00000108 alt_find_file
0000af14 g     F .text	000000a8 alt_dev_llist_insert
0000e398 g     F .text	00000024 __malloc_lock
0000e524 g     F .text	000000b8 sbrk
000009e0 g     F .text	0000023c convolution
0000c5ec g     F .text	00000060 _fflush_r
00015e28 g       *ABS*	00000000 __bss_start
0000d9fc g     F .text	000000f0 memset
00001a2c g     F .text	00000020 main
00015e30 g     O .bss	00000004 alt_envp
00015e48 g     O .bss	00000004 __malloc_max_total_mem
0000a22c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c248 g     F .text	00000018 __swbuf
00001278 g     F .text	00000180 rgb565_to_feature
00006838 g     F .text	000000b4 .hidden __ltsf2
0000dc7c g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
0000de70 g     F .text	00000070 fclose
0000d21c g     F .text	000007e0 _malloc_r
00000704 g     F .text	000000b0 relu
00012384 g     O .rwdata	00000004 alt_errno
000014d8 g     F .text	00000174 rgb_to_grey
0000ce94 g     F .text	00000098 _fwalk
0000c020 g     F .text	000000e0 putc
00005cd4 g     F .text	00000080 .hidden __divsi3
0000ca7c g     F .text	0000011c _malloc_trim_r
0000e71c g       *ABS*	00000000 __CTOR_END__
000068ec g     F .text	00000400 .hidden __mulsf3
0000e71c g       *ABS*	00000000 __flash_rodata_start
0000e71c g       *ABS*	00000000 __DTOR_LIST__
0000867c g     F .text	00000080 .hidden __nedf2
0000a148 g     F .text	0000003c alt_irq_init
0000b704 g     F .text	00000070 alt_release_fd
0000e7ec g     O .rodata	00000100 .hidden __clz_tab
0000bc2c g     F .text	00000014 atexit
00006780 g     F .text	000000b8 .hidden __gesf2
0000dc84 g     F .text	00000064 _write_r
000045a0 g     F .text	00000064 snprintf_
0001236c g     O .rwdata	00000004 _impure_ptr
00015e28 g     O .bss	00000004 alt_argc
0000c3c4 g     F .text	00000228 __sflush_r
0000b020 g     F .text	00000064 _do_dtors
02002020 g       .exceptions	00000000 alt_irq_entry
0000ca68 g     F .text	00000014 __fp_unlock_all
00012370 g     O .rwdata	00000008 alt_fs_list
000005c0 g     F .text	00000084 get_pixel
02002020 g       *ABS*	00000000 __ram_exceptions_start
0000d184 g     F .text	00000098 __swhatbuf_r
000044d4 g     F .text	00000068 printf_
00000ec8 g     F .text	000001ec softmax
0000b0a4 g     F .text	00000050 alt_ic_isr_register
000123a0 g       *ABS*	00000000 _edata
00015f7c g       *ABS*	00000000 _end
00007180 g     F .text	0000004c .hidden __unordsf2
02002224 g       *ABS*	00000000 __ram_exceptions_end
0000a704 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000027c g     F .text	0000003c bf2f
0000b17c g     F .text	0000008c alt_ic_irq_disable
0000dba0 g     F .text	00000080 __swrite
00012398 g     O .rwdata	00000004 __malloc_trim_threshold
0000bc40 g     F .text	00000034 exit
0000cf2c g     F .text	000000a8 _fwalk_reent
00007360 g     F .text	000000fc .hidden __floatunsisf
000004ac g     F .text	00000084 bf_lt
00005d54 g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
02002020 g     F .exceptions	00000000 alt_exception
0000ca48 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
02002000 g       *ABS*	00000000 __alt_mem_onchip_ram
0000e060 g     F .text	00000038 _exit
00004720 g     F .text	000000d0 expf
0000ac40 g     F .text	00000134 alt_alarm_start
000010b4 g     F .text	000001c4 scale
0000cfd4 g     F .text	000001b0 __smakebuf_r
0000bd0c g     F .text	00000098 strlen
0000b5a4 g     F .text	00000160 open
000086fc g     F .text	000000e8 .hidden __gedf2
0000a0e4 g     F .text	00000030 alt_putchar
0000b084 g     F .text	00000020 alt_icache_flush_all
00012388 g     O .rwdata	00000004 alt_priority_mask
0000b0f4 g     F .text	00000088 alt_ic_irq_enable
00009078 g     F .text	000008b4 .hidden __subdf3
0001238c g     O .rwdata	00000008 alt_alarm_list
0000afbc g     F .text	00000064 _do_ctors
0000adb0 g     F .text	000000dc close
00005eb0 g     F .text	0000046c .hidden __addsf3
00009db8 g     F .text	00000084 alt_load
0000ca4c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

02002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2002000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 2002004:	08408114 	ori	at,at,516
    jmp r1
 2002008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02002020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2002020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2002024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2002028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200202c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2002030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2002034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2002038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200203c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2002040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2002044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2002048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200204c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2002050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2002054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2002058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200205c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2002060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2002064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2002068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200206c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2002070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2002074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2002078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200207c:	10000326 	beq	r2,zero,200208c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2002080:	20000226 	beq	r4,zero,200208c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2002084:	20020fc0 	call	20020fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2002088:	00000706 	br	20020a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200208c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2002090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2002094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2002098:	20021c40 	call	20021c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200209c:	1000021e 	bne	r2,zero,20020a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20020a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20020a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20020a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20020ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20020b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20020b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20020b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20020bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20020c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20020c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20020c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20020cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20020d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20020d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20020d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20020dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20020e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20020e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20020e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20020ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20020f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20020f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20020f8:	ef80083a 	eret

020020fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20020fc:	defff904 	addi	sp,sp,-28
 2002100:	dfc00615 	stw	ra,24(sp)
 2002104:	df000515 	stw	fp,20(sp)
 2002108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200210c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2002110:	0005313a 	rdctl	r2,ipending
 2002114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2002118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200211c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 2002120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2002124:	00800044 	movi	r2,1
 2002128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200212c:	e0ffff17 	ldw	r3,-4(fp)
 2002130:	e0bffe17 	ldw	r2,-8(fp)
 2002134:	1884703a 	and	r2,r3,r2
 2002138:	10001126 	beq	r2,zero,2002180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200213c:	e0bffd17 	ldw	r2,-12(fp)
 2002140:	100690fa 	slli	r3,r2,3
 2002144:	00800074 	movhi	r2,1
 2002148:	1885883a 	add	r2,r3,r2
 200214c:	10d79517 	ldw	r3,24148(r2)
 2002150:	e0bffd17 	ldw	r2,-12(fp)
 2002154:	100890fa 	slli	r4,r2,3
 2002158:	00800074 	movhi	r2,1
 200215c:	2085883a 	add	r2,r4,r2
 2002160:	10979617 	ldw	r2,24152(r2)
 2002164:	1009883a 	mov	r4,r2
 2002168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 200216c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 2002170:	0005313a 	rdctl	r2,ipending
 2002174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 2002178:	e0bffb17 	ldw	r2,-20(fp)
 200217c:	00000706 	br	200219c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 2002180:	e0bffe17 	ldw	r2,-8(fp)
 2002184:	1085883a 	add	r2,r2,r2
 2002188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 200218c:	e0bffd17 	ldw	r2,-12(fp)
 2002190:	10800044 	addi	r2,r2,1
 2002194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 2002198:	003fe406 	br	200212c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 200219c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 20021a0:	e0bfff17 	ldw	r2,-4(fp)
 20021a4:	103fde1e 	bne	r2,zero,2002120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20021a8:	0001883a 	nop
}
 20021ac:	0001883a 	nop
 20021b0:	e037883a 	mov	sp,fp
 20021b4:	dfc00117 	ldw	ra,4(sp)
 20021b8:	df000017 	ldw	fp,0(sp)
 20021bc:	dec00204 	addi	sp,sp,8
 20021c0:	f800283a 	ret

020021c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20021c4:	defffb04 	addi	sp,sp,-20
 20021c8:	dfc00415 	stw	ra,16(sp)
 20021cc:	df000315 	stw	fp,12(sp)
 20021d0:	df000304 	addi	fp,sp,12
 20021d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 20021d8:	00bfffc4 	movi	r2,-1
 20021dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 20021e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20021e4:	d0aebd17 	ldw	r2,-17676(gp)
 20021e8:	10000726 	beq	r2,zero,2002208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20021ec:	d0aebd17 	ldw	r2,-17676(gp)
 20021f0:	e0ffff17 	ldw	r3,-4(fp)
 20021f4:	e1bffe17 	ldw	r6,-8(fp)
 20021f8:	e17ffd17 	ldw	r5,-12(fp)
 20021fc:	1809883a 	mov	r4,r3
 2002200:	103ee83a 	callr	r2
 2002204:	00000206 	br	2002210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2002208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 200220c:	0005883a 	mov	r2,zero
}
 2002210:	e037883a 	mov	sp,fp
 2002214:	dfc00117 	ldw	ra,4(sp)
 2002218:	df000017 	ldw	fp,0(sp)
 200221c:	dec00204 	addi	sp,sp,8
 2002220:	f800283a 	ret

Disassembly of section .text:

00000204 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     204:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     208:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     20c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     210:	d6a8d314 	ori	gp,gp,41804
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     214:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     218:	10978a14 	ori	r2,r2,24104

    movhi r3, %hi(__bss_end)
     21c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     220:	18d7df14 	ori	r3,r3,24444

    beq r2, r3, 1f
     224:	10c00326 	beq	r2,r3,234 <_start+0x30>

0:
    stw zero, (r2)
     228:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     22c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     230:	10fffd36 	bltu	r2,r3,228 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     234:	0009db80 	call	9db8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     238:	0009e3c0 	call	9e3c <alt_main>

0000023c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     23c:	003fff06 	br	23c <alt_after_alt_main>

00000240 <_putchar>:
union IntFloat {  alt_u32 i;  float f;  };
typedef alt_u16 bfloat16;

//////////////////////////////////////////////////////////////////////////////
void _putchar(char character)
{
     240:	defffd04 	addi	sp,sp,-12
     244:	dfc00215 	stw	ra,8(sp)
     248:	df000115 	stw	fp,4(sp)
     24c:	df000104 	addi	fp,sp,4
     250:	2005883a 	mov	r2,r4
     254:	e0bfff05 	stb	r2,-4(fp)
	alt_putchar((int)character);	// printf_ character output
     258:	e0bfff07 	ldb	r2,-4(fp)
     25c:	1009883a 	mov	r4,r2
     260:	000a0e40 	call	a0e4 <alt_putchar>
}
     264:	0001883a 	nop
     268:	e037883a 	mov	sp,fp
     26c:	dfc00117 	ldw	ra,4(sp)
     270:	df000017 	ldw	fp,0(sp)
     274:	dec00204 	addi	sp,sp,8
     278:	f800283a 	ret

0000027c <bf2f>:

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     27c:	defffd04 	addi	sp,sp,-12
     280:	df000215 	stw	fp,8(sp)
     284:	df000204 	addi	fp,sp,8
     288:	2005883a 	mov	r2,r4
     28c:	e0bffe0d 	sth	r2,-8(fp)
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     290:	e0bffe0b 	ldhu	r2,-8(fp)
     294:	1004943a 	slli	r2,r2,16
     298:	e0bfff15 	stw	r2,-4(fp)
     return f.f;
     29c:	e0bfff17 	ldw	r2,-4(fp)
     2a0:	1007883a 	mov	r3,r2
}
     2a4:	1805883a 	mov	r2,r3
     2a8:	e037883a 	mov	sp,fp
     2ac:	df000017 	ldw	fp,0(sp)
     2b0:	dec00104 	addi	sp,sp,4
     2b4:	f800283a 	ret

000002b8 <f2bf>:

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     2b8:	defffd04 	addi	sp,sp,-12
     2bc:	df000215 	stw	fp,8(sp)
     2c0:	df000204 	addi	fp,sp,8
     2c4:	e13ffe15 	stw	r4,-8(fp)
     union IntFloat f;
     f.f = x;
     2c8:	e0bffe17 	ldw	r2,-8(fp)
     2cc:	e0bfff15 	stw	r2,-4(fp)
     return (bfloat16)(f.i >> 16);
     2d0:	e0bfff17 	ldw	r2,-4(fp)
     2d4:	1004d43a 	srli	r2,r2,16
}
     2d8:	e037883a 	mov	sp,fp
     2dc:	df000017 	ldw	fp,0(sp)
     2e0:	dec00104 	addi	sp,sp,4
     2e4:	f800283a 	ret

000002e8 <bf_mult>:

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     2e8:	defffb04 	addi	sp,sp,-20
     2ec:	dfc00415 	stw	ra,16(sp)
     2f0:	df000315 	stw	fp,12(sp)
     2f4:	dc000215 	stw	r16,8(sp)
     2f8:	df000304 	addi	fp,sp,12
     2fc:	2005883a 	mov	r2,r4
     300:	2807883a 	mov	r3,r5
     304:	e0bffe0d 	sth	r2,-8(fp)
     308:	1805883a 	mov	r2,r3
     30c:	e0bffd0d 	sth	r2,-12(fp)
     return f2bf(bf2f(a) * bf2f(b));
     310:	e0bffe0b 	ldhu	r2,-8(fp)
     314:	1009883a 	mov	r4,r2
     318:	000027c0 	call	27c <bf2f>
     31c:	1021883a 	mov	r16,r2
     320:	e0bffd0b 	ldhu	r2,-12(fp)
     324:	1009883a 	mov	r4,r2
     328:	000027c0 	call	27c <bf2f>
     32c:	1007883a 	mov	r3,r2
     330:	180b883a 	mov	r5,r3
     334:	8009883a 	mov	r4,r16
     338:	00068ec0 	call	68ec <__mulsf3>
     33c:	1007883a 	mov	r3,r2
     340:	1805883a 	mov	r2,r3
     344:	1009883a 	mov	r4,r2
     348:	00002b80 	call	2b8 <f2bf>
}
     34c:	e6ffff04 	addi	sp,fp,-4
     350:	dfc00217 	ldw	ra,8(sp)
     354:	df000117 	ldw	fp,4(sp)
     358:	dc000017 	ldw	r16,0(sp)
     35c:	dec00304 	addi	sp,sp,12
     360:	f800283a 	ret

00000364 <bf_add>:

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_add(bfloat16 a, bfloat16 b) {
     364:	defffb04 	addi	sp,sp,-20
     368:	dfc00415 	stw	ra,16(sp)
     36c:	df000315 	stw	fp,12(sp)
     370:	dc000215 	stw	r16,8(sp)
     374:	df000304 	addi	fp,sp,12
     378:	2005883a 	mov	r2,r4
     37c:	2807883a 	mov	r3,r5
     380:	e0bffe0d 	sth	r2,-8(fp)
     384:	1805883a 	mov	r2,r3
     388:	e0bffd0d 	sth	r2,-12(fp)
     return f2bf(bf2f(a) + bf2f(b));
     38c:	e0bffe0b 	ldhu	r2,-8(fp)
     390:	1009883a 	mov	r4,r2
     394:	000027c0 	call	27c <bf2f>
     398:	1021883a 	mov	r16,r2
     39c:	e0bffd0b 	ldhu	r2,-12(fp)
     3a0:	1009883a 	mov	r4,r2
     3a4:	000027c0 	call	27c <bf2f>
     3a8:	1007883a 	mov	r3,r2
     3ac:	180b883a 	mov	r5,r3
     3b0:	8009883a 	mov	r4,r16
     3b4:	0005eb00 	call	5eb0 <__addsf3>
     3b8:	1007883a 	mov	r3,r2
     3bc:	1805883a 	mov	r2,r3
     3c0:	1009883a 	mov	r4,r2
     3c4:	00002b80 	call	2b8 <f2bf>
}
     3c8:	e6ffff04 	addi	sp,fp,-4
     3cc:	dfc00217 	ldw	ra,8(sp)
     3d0:	df000117 	ldw	fp,4(sp)
     3d4:	dc000017 	ldw	r16,0(sp)
     3d8:	dec00304 	addi	sp,sp,12
     3dc:	f800283a 	ret

000003e0 <bf_neg>:

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_neg(bfloat16 a) {
     3e0:	defffd04 	addi	sp,sp,-12
     3e4:	dfc00215 	stw	ra,8(sp)
     3e8:	df000115 	stw	fp,4(sp)
     3ec:	df000104 	addi	fp,sp,4
     3f0:	2005883a 	mov	r2,r4
     3f4:	e0bfff0d 	sth	r2,-4(fp)
     return f2bf(-bf2f(a));
     3f8:	e0bfff0b 	ldhu	r2,-4(fp)
     3fc:	1009883a 	mov	r4,r2
     400:	000027c0 	call	27c <bf2f>
     404:	1007883a 	mov	r3,r2
     408:	18a0003c 	xorhi	r2,r3,32768
     40c:	1009883a 	mov	r4,r2
     410:	00002b80 	call	2b8 <f2bf>
}
     414:	e037883a 	mov	sp,fp
     418:	dfc00117 	ldw	ra,4(sp)
     41c:	df000017 	ldw	fp,0(sp)
     420:	dec00204 	addi	sp,sp,8
     424:	f800283a 	ret

00000428 <bf_gt>:

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
     428:	defffa04 	addi	sp,sp,-24
     42c:	dfc00515 	stw	ra,20(sp)
     430:	df000415 	stw	fp,16(sp)
     434:	dc400315 	stw	r17,12(sp)
     438:	dc000215 	stw	r16,8(sp)
     43c:	df000404 	addi	fp,sp,16
     440:	2005883a 	mov	r2,r4
     444:	2807883a 	mov	r3,r5
     448:	e0bffd0d 	sth	r2,-12(fp)
     44c:	1805883a 	mov	r2,r3
     450:	e0bffc0d 	sth	r2,-16(fp)
     return bf2f(a) > bf2f(b);
     454:	e0bffd0b 	ldhu	r2,-12(fp)
     458:	1009883a 	mov	r4,r2
     45c:	000027c0 	call	27c <bf2f>
     460:	1023883a 	mov	r17,r2
     464:	e0bffc0b 	ldhu	r2,-16(fp)
     468:	1009883a 	mov	r4,r2
     46c:	000027c0 	call	27c <bf2f>
     470:	1007883a 	mov	r3,r2
     474:	04000044 	movi	r16,1
     478:	180b883a 	mov	r5,r3
     47c:	8809883a 	mov	r4,r17
     480:	00067800 	call	6780 <__gesf2>
     484:	00800116 	blt	zero,r2,48c <bf_gt+0x64>
     488:	0021883a 	mov	r16,zero
     48c:	80803fcc 	andi	r2,r16,255
}
     490:	e6fffe04 	addi	sp,fp,-8
     494:	dfc00317 	ldw	ra,12(sp)
     498:	df000217 	ldw	fp,8(sp)
     49c:	dc400117 	ldw	r17,4(sp)
     4a0:	dc000017 	ldw	r16,0(sp)
     4a4:	dec00404 	addi	sp,sp,16
     4a8:	f800283a 	ret

000004ac <bf_lt>:

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     4ac:	defffa04 	addi	sp,sp,-24
     4b0:	dfc00515 	stw	ra,20(sp)
     4b4:	df000415 	stw	fp,16(sp)
     4b8:	dc400315 	stw	r17,12(sp)
     4bc:	dc000215 	stw	r16,8(sp)
     4c0:	df000404 	addi	fp,sp,16
     4c4:	2005883a 	mov	r2,r4
     4c8:	2807883a 	mov	r3,r5
     4cc:	e0bffd0d 	sth	r2,-12(fp)
     4d0:	1805883a 	mov	r2,r3
     4d4:	e0bffc0d 	sth	r2,-16(fp)
     return bf2f(a) < bf2f(b);
     4d8:	e0bffd0b 	ldhu	r2,-12(fp)
     4dc:	1009883a 	mov	r4,r2
     4e0:	000027c0 	call	27c <bf2f>
     4e4:	1023883a 	mov	r17,r2
     4e8:	e0bffc0b 	ldhu	r2,-16(fp)
     4ec:	1009883a 	mov	r4,r2
     4f0:	000027c0 	call	27c <bf2f>
     4f4:	1007883a 	mov	r3,r2
     4f8:	04000044 	movi	r16,1
     4fc:	180b883a 	mov	r5,r3
     500:	8809883a 	mov	r4,r17
     504:	00068380 	call	6838 <__lesf2>
     508:	10000116 	blt	r2,zero,510 <bf_lt+0x64>
     50c:	0021883a 	mov	r16,zero
     510:	80803fcc 	andi	r2,r16,255
}
     514:	e6fffe04 	addi	sp,fp,-8
     518:	dfc00317 	ldw	ra,12(sp)
     51c:	df000217 	ldw	fp,8(sp)
     520:	dc400117 	ldw	r17,4(sp)
     524:	dc000017 	ldw	r16,0(sp)
     528:	dec00404 	addi	sp,sp,16
     52c:	f800283a 	ret

00000530 <put_pixel>:

//////////////////////////////////////////////////////////////////////////////
void put_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y, alt_u16 data) {
     530:	defff804 	addi	sp,sp,-32
     534:	dfc00715 	stw	ra,28(sp)
     538:	df000615 	stw	fp,24(sp)
     53c:	dc000515 	stw	r16,20(sp)
     540:	df000604 	addi	fp,sp,24
     544:	e13ffe15 	stw	r4,-8(fp)
     548:	2807883a 	mov	r3,r5
     54c:	300b883a 	mov	r5,r6
     550:	3809883a 	mov	r4,r7
     554:	e0800217 	ldw	r2,8(fp)
     558:	e0fffd0d 	sth	r3,-12(fp)
     55c:	2807883a 	mov	r3,r5
     560:	e0fffc0d 	sth	r3,-16(fp)
     564:	2007883a 	mov	r3,r4
     568:	e0fffb0d 	sth	r3,-20(fp)
     56c:	e0bffa0d 	sth	r2,-24(fp)
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
     570:	e43ffc0b 	ldhu	r16,-16(fp)
     574:	e0bffb0b 	ldhu	r2,-20(fp)
     578:	e0fffd0b 	ldhu	r3,-12(fp)
     57c:	180b883a 	mov	r5,r3
     580:	1009883a 	mov	r4,r2
     584:	0005e880 	call	5e88 <__mulsi3>
     588:	8085883a 	add	r2,r16,r2
     58c:	1085883a 	add	r2,r2,r2
     590:	1007883a 	mov	r3,r2
     594:	e0bffe17 	ldw	r2,-8(fp)
     598:	10c5883a 	add	r2,r2,r3
     59c:	e0fffa0b 	ldhu	r3,-24(fp)
     5a0:	10c0002d 	sthio	r3,0(r2)
}
     5a4:	0001883a 	nop
     5a8:	e6ffff04 	addi	sp,fp,-4
     5ac:	dfc00217 	ldw	ra,8(sp)
     5b0:	df000117 	ldw	fp,4(sp)
     5b4:	dc000017 	ldw	r16,0(sp)
     5b8:	dec00304 	addi	sp,sp,12
     5bc:	f800283a 	ret

000005c0 <get_pixel>:

//////////////////////////////////////////////////////////////////////////////
alt_u16 get_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y) {
     5c0:	defff904 	addi	sp,sp,-28
     5c4:	dfc00615 	stw	ra,24(sp)
     5c8:	df000515 	stw	fp,20(sp)
     5cc:	dc000415 	stw	r16,16(sp)
     5d0:	df000504 	addi	fp,sp,20
     5d4:	e13ffe15 	stw	r4,-8(fp)
     5d8:	2805883a 	mov	r2,r5
     5dc:	3009883a 	mov	r4,r6
     5e0:	3807883a 	mov	r3,r7
     5e4:	e0bffd0d 	sth	r2,-12(fp)
     5e8:	2005883a 	mov	r2,r4
     5ec:	e0bffc0d 	sth	r2,-16(fp)
     5f0:	1805883a 	mov	r2,r3
     5f4:	e0bffb0d 	sth	r2,-20(fp)
	return IORD_16DIRECT(base, (x + (y * res)) << 1);
     5f8:	e43ffc0b 	ldhu	r16,-16(fp)
     5fc:	e0bffb0b 	ldhu	r2,-20(fp)
     600:	e0fffd0b 	ldhu	r3,-12(fp)
     604:	180b883a 	mov	r5,r3
     608:	1009883a 	mov	r4,r2
     60c:	0005e880 	call	5e88 <__mulsi3>
     610:	8085883a 	add	r2,r16,r2
     614:	1085883a 	add	r2,r2,r2
     618:	1007883a 	mov	r3,r2
     61c:	e0bffe17 	ldw	r2,-8(fp)
     620:	10c5883a 	add	r2,r2,r3
     624:	1080002b 	ldhuio	r2,0(r2)
     628:	10bfffcc 	andi	r2,r2,65535
}
     62c:	e6ffff04 	addi	sp,fp,-4
     630:	dfc00217 	ldw	ra,8(sp)
     634:	df000117 	ldw	fp,4(sp)
     638:	dc000017 	ldw	r16,0(sp)
     63c:	dec00304 	addi	sp,sp,12
     640:	f800283a 	ret

00000644 <show_featuremap>:

//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
     644:	defffa04 	addi	sp,sp,-24
     648:	dfc00515 	stw	ra,20(sp)
     64c:	df000415 	stw	fp,16(sp)
     650:	df000404 	addi	fp,sp,16
     654:	e13ffd15 	stw	r4,-12(fp)
     658:	2805883a 	mov	r2,r5
     65c:	e0bffc0d 	sth	r2,-16(fp)
	alt_u32 x, y;
	for (y=0; y<res; y++) {
     660:	e03ffe15 	stw	zero,-8(fp)
     664:	00001d06 	br	6dc <show_featuremap+0x98>
		for (x=0; x<res; x++) {
     668:	e03fff15 	stw	zero,-4(fp)
     66c:	00001206 	br	6b8 <show_featuremap+0x74>
			alt_printf("%x ", get_pixel(base, res, x, y));
     670:	e0bffc0b 	ldhu	r2,-16(fp)
     674:	e0ffff17 	ldw	r3,-4(fp)
     678:	18ffffcc 	andi	r3,r3,65535
     67c:	e13ffe17 	ldw	r4,-8(fp)
     680:	213fffcc 	andi	r4,r4,65535
     684:	200f883a 	mov	r7,r4
     688:	180d883a 	mov	r6,r3
     68c:	100b883a 	mov	r5,r2
     690:	e13ffd17 	ldw	r4,-12(fp)
     694:	00005c00 	call	5c0 <get_pixel>
     698:	10bfffcc 	andi	r2,r2,65535
     69c:	100b883a 	mov	r5,r2
     6a0:	01000074 	movhi	r4,1
     6a4:	2139c704 	addi	r4,r4,-6372
     6a8:	0009eb80 	call	9eb8 <alt_printf>
		for (x=0; x<res; x++) {
     6ac:	e0bfff17 	ldw	r2,-4(fp)
     6b0:	10800044 	addi	r2,r2,1
     6b4:	e0bfff15 	stw	r2,-4(fp)
     6b8:	e0bffc0b 	ldhu	r2,-16(fp)
     6bc:	e0ffff17 	ldw	r3,-4(fp)
     6c0:	18bfeb36 	bltu	r3,r2,670 <show_featuremap+0x2c>
		}
		alt_printf("\n");
     6c4:	01000074 	movhi	r4,1
     6c8:	2139c804 	addi	r4,r4,-6368
     6cc:	0009eb80 	call	9eb8 <alt_printf>
	for (y=0; y<res; y++) {
     6d0:	e0bffe17 	ldw	r2,-8(fp)
     6d4:	10800044 	addi	r2,r2,1
     6d8:	e0bffe15 	stw	r2,-8(fp)
     6dc:	e0bffc0b 	ldhu	r2,-16(fp)
     6e0:	e0fffe17 	ldw	r3,-8(fp)
     6e4:	18bfe036 	bltu	r3,r2,668 <show_featuremap+0x24>
	}
}
     6e8:	0001883a 	nop
     6ec:	0001883a 	nop
     6f0:	e037883a 	mov	sp,fp
     6f4:	dfc00117 	ldw	ra,4(sp)
     6f8:	df000017 	ldw	fp,0(sp)
     6fc:	dec00204 	addi	sp,sp,8
     700:	f800283a 	ret

00000704 <relu>:

//////////////////////////////////////////////////////////////////////////////
void relu (alt_u16* featuremap, alt_u16 res) {
     704:	defffa04 	addi	sp,sp,-24
     708:	dfc00515 	stw	ra,20(sp)
     70c:	df000415 	stw	fp,16(sp)
     710:	df000404 	addi	fp,sp,16
     714:	e13ffd15 	stw	r4,-12(fp)
     718:	2805883a 	mov	r2,r5
     71c:	e0bffc0d 	sth	r2,-16(fp)
	alt_u32 x, i;

	x = res * res;
     720:	e0bffc0b 	ldhu	r2,-16(fp)
     724:	e0fffc0b 	ldhu	r3,-16(fp)
     728:	180b883a 	mov	r5,r3
     72c:	1009883a 	mov	r4,r2
     730:	0005e880 	call	5e88 <__mulsi3>
     734:	e0bffe15 	stw	r2,-8(fp)
	for (i=0; i<x; i++) {
     738:	e03fff15 	stw	zero,-4(fp)
     73c:	00001306 	br	78c <relu+0x88>
		if (IORD_16DIRECT(featuremap, (i << 1)) & 0x8000) { // test sign bit
     740:	e0bfff17 	ldw	r2,-4(fp)
     744:	1085883a 	add	r2,r2,r2
     748:	1007883a 	mov	r3,r2
     74c:	e0bffd17 	ldw	r2,-12(fp)
     750:	10c5883a 	add	r2,r2,r3
     754:	1080002b 	ldhuio	r2,0(r2)
     758:	10bfffcc 	andi	r2,r2,65535
     75c:	10a0000c 	andi	r2,r2,32768
     760:	10000726 	beq	r2,zero,780 <relu+0x7c>
			IOWR_16DIRECT(featuremap, (i << 1), 0x0);
     764:	e0bfff17 	ldw	r2,-4(fp)
     768:	1085883a 	add	r2,r2,r2
     76c:	1007883a 	mov	r3,r2
     770:	e0bffd17 	ldw	r2,-12(fp)
     774:	10c5883a 	add	r2,r2,r3
     778:	0007883a 	mov	r3,zero
     77c:	10c0002d 	sthio	r3,0(r2)
	for (i=0; i<x; i++) {
     780:	e0bfff17 	ldw	r2,-4(fp)
     784:	10800044 	addi	r2,r2,1
     788:	e0bfff15 	stw	r2,-4(fp)
     78c:	e0ffff17 	ldw	r3,-4(fp)
     790:	e0bffe17 	ldw	r2,-8(fp)
     794:	18bfea36 	bltu	r3,r2,740 <relu+0x3c>
		}
	}
}
     798:	0001883a 	nop
     79c:	0001883a 	nop
     7a0:	e037883a 	mov	sp,fp
     7a4:	dfc00117 	ldw	ra,4(sp)
     7a8:	df000017 	ldw	fp,0(sp)
     7ac:	dec00204 	addi	sp,sp,8
     7b0:	f800283a 	ret

000007b4 <padding>:

//////////////////////////////////////////////////////////////////////////////
void padding (alt_u16* src_map, alt_u16* dst_map, alt_u16 res, alt_u16 pad) {
     7b4:	defff604 	addi	sp,sp,-40
     7b8:	df000915 	stw	fp,36(sp)
     7bc:	df000904 	addi	fp,sp,36
     7c0:	e13ffa15 	stw	r4,-24(fp)
     7c4:	e17ff915 	stw	r5,-28(fp)
     7c8:	3005883a 	mov	r2,r6
     7cc:	3807883a 	mov	r3,r7
     7d0:	e0bff80d 	sth	r2,-32(fp)
     7d4:	1805883a 	mov	r2,r3
     7d8:	e0bff70d 	sth	r2,-36(fp)
	alt_u32 i, j, pixel;
	alt_u32 src, dst;

	dst = 0;
     7dc:	e03ffc15 	stw	zero,-16(fp)
	src = 0;
     7e0:	e03ffd15 	stw	zero,-12(fp)
	for (j=0; j<pad; j++) {	// pad TOP pixels
     7e4:	e03ffe15 	stw	zero,-8(fp)
     7e8:	00001706 	br	848 <padding+0x94>
		for (i=0; i<(res + (pad << 1)); i++) {
     7ec:	e03fff15 	stw	zero,-4(fp)
     7f0:	00000b06 	br	820 <padding+0x6c>
			IOWR_16DIRECT(dst_map, (dst), 0);
     7f4:	e0fff917 	ldw	r3,-28(fp)
     7f8:	e0bffc17 	ldw	r2,-16(fp)
     7fc:	1885883a 	add	r2,r3,r2
     800:	0007883a 	mov	r3,zero
     804:	10c0002d 	sthio	r3,0(r2)
			dst += 2;
     808:	e0bffc17 	ldw	r2,-16(fp)
     80c:	10800084 	addi	r2,r2,2
     810:	e0bffc15 	stw	r2,-16(fp)
		for (i=0; i<(res + (pad << 1)); i++) {
     814:	e0bfff17 	ldw	r2,-4(fp)
     818:	10800044 	addi	r2,r2,1
     81c:	e0bfff15 	stw	r2,-4(fp)
     820:	e0fff80b 	ldhu	r3,-32(fp)
     824:	e0bff70b 	ldhu	r2,-36(fp)
     828:	1085883a 	add	r2,r2,r2
     82c:	1885883a 	add	r2,r3,r2
     830:	1007883a 	mov	r3,r2
     834:	e0bfff17 	ldw	r2,-4(fp)
     838:	10ffee36 	bltu	r2,r3,7f4 <padding+0x40>
	for (j=0; j<pad; j++) {	// pad TOP pixels
     83c:	e0bffe17 	ldw	r2,-8(fp)
     840:	10800044 	addi	r2,r2,1
     844:	e0bffe15 	stw	r2,-8(fp)
     848:	e0bff70b 	ldhu	r2,-36(fp)
     84c:	e0fffe17 	ldw	r3,-8(fp)
     850:	18bfe636 	bltu	r3,r2,7ec <padding+0x38>
		}
	}
	for (j=0; j<res; j++) {
     854:	e03ffe15 	stw	zero,-8(fp)
     858:	00003c06 	br	94c <padding+0x198>
		for (i=0; i<pad; i++) {
     85c:	e03fff15 	stw	zero,-4(fp)
     860:	00000b06 	br	890 <padding+0xdc>
			IOWR_16DIRECT(dst_map, (dst), 0); // pad LHS
     864:	e0fff917 	ldw	r3,-28(fp)
     868:	e0bffc17 	ldw	r2,-16(fp)
     86c:	1885883a 	add	r2,r3,r2
     870:	0007883a 	mov	r3,zero
     874:	10c0002d 	sthio	r3,0(r2)
			dst += 2;
     878:	e0bffc17 	ldw	r2,-16(fp)
     87c:	10800084 	addi	r2,r2,2
     880:	e0bffc15 	stw	r2,-16(fp)
		for (i=0; i<pad; i++) {
     884:	e0bfff17 	ldw	r2,-4(fp)
     888:	10800044 	addi	r2,r2,1
     88c:	e0bfff15 	stw	r2,-4(fp)
     890:	e0bff70b 	ldhu	r2,-36(fp)
     894:	e0ffff17 	ldw	r3,-4(fp)
     898:	18bff236 	bltu	r3,r2,864 <padding+0xb0>
		}
		for (i=0; i<res; i++) {
     89c:	e03fff15 	stw	zero,-4(fp)
     8a0:	00001406 	br	8f4 <padding+0x140>
			pixel = IORD_16DIRECT(src_map, src);
     8a4:	e0fffa17 	ldw	r3,-24(fp)
     8a8:	e0bffd17 	ldw	r2,-12(fp)
     8ac:	1885883a 	add	r2,r3,r2
     8b0:	1080002b 	ldhuio	r2,0(r2)
     8b4:	10bfffcc 	andi	r2,r2,65535
     8b8:	e0bffb15 	stw	r2,-20(fp)
			src += 2;
     8bc:	e0bffd17 	ldw	r2,-12(fp)
     8c0:	10800084 	addi	r2,r2,2
     8c4:	e0bffd15 	stw	r2,-12(fp)
			IOWR_16DIRECT(dst_map, (dst), pixel);
     8c8:	e0fff917 	ldw	r3,-28(fp)
     8cc:	e0bffc17 	ldw	r2,-16(fp)
     8d0:	1885883a 	add	r2,r3,r2
     8d4:	e0fffb17 	ldw	r3,-20(fp)
     8d8:	10c0002d 	sthio	r3,0(r2)
			dst += 2;
     8dc:	e0bffc17 	ldw	r2,-16(fp)
     8e0:	10800084 	addi	r2,r2,2
     8e4:	e0bffc15 	stw	r2,-16(fp)
		for (i=0; i<res; i++) {
     8e8:	e0bfff17 	ldw	r2,-4(fp)
     8ec:	10800044 	addi	r2,r2,1
     8f0:	e0bfff15 	stw	r2,-4(fp)
     8f4:	e0bff80b 	ldhu	r2,-32(fp)
     8f8:	e0ffff17 	ldw	r3,-4(fp)
     8fc:	18bfe936 	bltu	r3,r2,8a4 <padding+0xf0>
		}
		for (i=0; i<pad; i++) {
     900:	e03fff15 	stw	zero,-4(fp)
     904:	00000b06 	br	934 <padding+0x180>
			IOWR_16DIRECT(dst_map, (dst), 0); // pad RHS
     908:	e0fff917 	ldw	r3,-28(fp)
     90c:	e0bffc17 	ldw	r2,-16(fp)
     910:	1885883a 	add	r2,r3,r2
     914:	0007883a 	mov	r3,zero
     918:	10c0002d 	sthio	r3,0(r2)
			dst += 2;
     91c:	e0bffc17 	ldw	r2,-16(fp)
     920:	10800084 	addi	r2,r2,2
     924:	e0bffc15 	stw	r2,-16(fp)
		for (i=0; i<pad; i++) {
     928:	e0bfff17 	ldw	r2,-4(fp)
     92c:	10800044 	addi	r2,r2,1
     930:	e0bfff15 	stw	r2,-4(fp)
     934:	e0bff70b 	ldhu	r2,-36(fp)
     938:	e0ffff17 	ldw	r3,-4(fp)
     93c:	18bff236 	bltu	r3,r2,908 <padding+0x154>
	for (j=0; j<res; j++) {
     940:	e0bffe17 	ldw	r2,-8(fp)
     944:	10800044 	addi	r2,r2,1
     948:	e0bffe15 	stw	r2,-8(fp)
     94c:	e0bff80b 	ldhu	r2,-32(fp)
     950:	e0fffe17 	ldw	r3,-8(fp)
     954:	18bfc136 	bltu	r3,r2,85c <padding+0xa8>
		}
	}
	for (j=0; j<pad; j++) {	// pad BOTTOM pixels
     958:	e03ffe15 	stw	zero,-8(fp)
     95c:	00001706 	br	9bc <padding+0x208>
		for (i=0; i<(res + (pad << 1)); i++) {
     960:	e03fff15 	stw	zero,-4(fp)
     964:	00000b06 	br	994 <padding+0x1e0>
			IOWR_16DIRECT(dst_map, (dst), 0);
     968:	e0fff917 	ldw	r3,-28(fp)
     96c:	e0bffc17 	ldw	r2,-16(fp)
     970:	1885883a 	add	r2,r3,r2
     974:	0007883a 	mov	r3,zero
     978:	10c0002d 	sthio	r3,0(r2)
			dst += 2;
     97c:	e0bffc17 	ldw	r2,-16(fp)
     980:	10800084 	addi	r2,r2,2
     984:	e0bffc15 	stw	r2,-16(fp)
		for (i=0; i<(res + (pad << 1)); i++) {
     988:	e0bfff17 	ldw	r2,-4(fp)
     98c:	10800044 	addi	r2,r2,1
     990:	e0bfff15 	stw	r2,-4(fp)
     994:	e0fff80b 	ldhu	r3,-32(fp)
     998:	e0bff70b 	ldhu	r2,-36(fp)
     99c:	1085883a 	add	r2,r2,r2
     9a0:	1885883a 	add	r2,r3,r2
     9a4:	1007883a 	mov	r3,r2
     9a8:	e0bfff17 	ldw	r2,-4(fp)
     9ac:	10ffee36 	bltu	r2,r3,968 <padding+0x1b4>
	for (j=0; j<pad; j++) {	// pad BOTTOM pixels
     9b0:	e0bffe17 	ldw	r2,-8(fp)
     9b4:	10800044 	addi	r2,r2,1
     9b8:	e0bffe15 	stw	r2,-8(fp)
     9bc:	e0bff70b 	ldhu	r2,-36(fp)
     9c0:	e0fffe17 	ldw	r3,-8(fp)
     9c4:	18bfe636 	bltu	r3,r2,960 <padding+0x1ac>
		}
	}
}
     9c8:	0001883a 	nop
     9cc:	0001883a 	nop
     9d0:	e037883a 	mov	sp,fp
     9d4:	df000017 	ldw	fp,0(sp)
     9d8:	dec00104 	addi	sp,sp,4
     9dc:	f800283a 	ret

000009e0 <convolution>:

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl,
		alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     9e0:	deffed04 	addi	sp,sp,-76
     9e4:	dfc01215 	stw	ra,72(sp)
     9e8:	df001115 	stw	fp,68(sp)
     9ec:	dc001015 	stw	r16,64(sp)
     9f0:	df001104 	addi	fp,sp,68
     9f4:	e13ff615 	stw	r4,-40(fp)
     9f8:	2811883a 	mov	r8,r5
     9fc:	e1bff415 	stw	r6,-48(fp)
     a00:	e1fff315 	stw	r7,-52(fp)
     a04:	e1400217 	ldw	r5,8(fp)
     a08:	e1000317 	ldw	r4,12(fp)
     a0c:	e0c00417 	ldw	r3,16(fp)
     a10:	e0800517 	ldw	r2,20(fp)
     a14:	400d883a 	mov	r6,r8
     a18:	e1bff50d 	sth	r6,-44(fp)
     a1c:	e17ff20d 	sth	r5,-56(fp)
     a20:	e13ff10d 	sth	r4,-60(fp)
     a24:	e0fff00d 	sth	r3,-64(fp)
     a28:	e0bfef0d 	sth	r2,-68(fp)
	alt_16 x, y, ks;
	alt_32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
     a2c:	e0bff20b 	ldhu	r2,-56(fp)
     a30:	1004d07a 	srli	r2,r2,1
     a34:	e0bffa0d 	sth	r2,-24(fp)
	dst_ptr = 0;
     a38:	e03ffb15 	stw	zero,-20(fp)
	for (y=pad; y<(res + pad); y=y+stride) {
     a3c:	e0bff00b 	ldhu	r2,-64(fp)
     a40:	e0bffe0d 	sth	r2,-8(fp)
     a44:	00006806 	br	be8 <convolution+0x208>
		for (x=pad; x<(res + pad); x=x+stride) {
     a48:	e0bff00b 	ldhu	r2,-64(fp)
     a4c:	e0bffe8d 	sth	r2,-6(fp)
     a50:	00005c06 	br	bc4 <convolution+0x1e4>
			sum = f2bf(0.0); // 0x0
     a54:	0009883a 	mov	r4,zero
     a58:	00002b80 	call	2b8 <f2bf>
     a5c:	e0bffa8d 	sth	r2,-22(fp)
			for (ky=-ks; ky<ks; ky++) {
     a60:	e0bffa0f 	ldh	r2,-24(fp)
     a64:	0085c83a 	sub	r2,zero,r2
     a68:	e0bffc15 	stw	r2,-16(fp)
     a6c:	00003b06 	br	b5c <convolution+0x17c>
				offset_s = (res * (y + ky)) + x;
     a70:	e13ff10b 	ldhu	r4,-60(fp)
     a74:	e0fffe0f 	ldh	r3,-8(fp)
     a78:	e0bffc17 	ldw	r2,-16(fp)
     a7c:	1885883a 	add	r2,r3,r2
     a80:	100b883a 	mov	r5,r2
     a84:	0005e880 	call	5e88 <__mulsi3>
     a88:	1007883a 	mov	r3,r2
     a8c:	e0bffe8f 	ldh	r2,-6(fp)
     a90:	1885883a 	add	r2,r3,r2
     a94:	e0bff915 	stw	r2,-28(fp)
				offset_d = (k * ky);
     a98:	e0bff20b 	ldhu	r2,-56(fp)
     a9c:	100b883a 	mov	r5,r2
     aa0:	e13ffc17 	ldw	r4,-16(fp)
     aa4:	0005e880 	call	5e88 <__mulsi3>
     aa8:	e0bff815 	stw	r2,-32(fp)
				for (kx=-ks; kx<ks; kx++) {
     aac:	e0bffa0f 	ldh	r2,-24(fp)
     ab0:	0085c83a 	sub	r2,zero,r2
     ab4:	e0bffd15 	stw	r2,-12(fp)
     ab8:	00002206 	br	b44 <convolution+0x164>
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
     abc:	e0fffd17 	ldw	r3,-12(fp)
     ac0:	e0bff917 	ldw	r2,-28(fp)
     ac4:	1885883a 	add	r2,r3,r2
     ac8:	1085883a 	add	r2,r2,r2
     acc:	1007883a 	mov	r3,r2
     ad0:	e0bff617 	ldw	r2,-40(fp)
     ad4:	10c5883a 	add	r2,r2,r3
     ad8:	1080002b 	ldhuio	r2,0(r2)
     adc:	10bfffcc 	andi	r2,r2,65535
     ae0:	e0bff78d 	sth	r2,-34(fp)
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
     ae4:	e0fffd17 	ldw	r3,-12(fp)
     ae8:	e0bff817 	ldw	r2,-32(fp)
     aec:	1885883a 	add	r2,r3,r2
     af0:	1085883a 	add	r2,r2,r2
     af4:	1007883a 	mov	r3,r2
     af8:	e0bff317 	ldw	r2,-52(fp)
     afc:	10c5883a 	add	r2,r2,r3
     b00:	1080002b 	ldhuio	r2,0(r2)
     b04:	10bfffcc 	andi	r2,r2,65535
     b08:	e0bff70d 	sth	r2,-36(fp)
					sum = bf_add(sum, bf_mult(src_pix, k_pix)); // sum of products
     b0c:	e43ffa8b 	ldhu	r16,-22(fp)
     b10:	e0bff78b 	ldhu	r2,-34(fp)
     b14:	e0fff70b 	ldhu	r3,-36(fp)
     b18:	180b883a 	mov	r5,r3
     b1c:	1009883a 	mov	r4,r2
     b20:	00002e80 	call	2e8 <bf_mult>
     b24:	10bfffcc 	andi	r2,r2,65535
     b28:	100b883a 	mov	r5,r2
     b2c:	8009883a 	mov	r4,r16
     b30:	00003640 	call	364 <bf_add>
     b34:	e0bffa8d 	sth	r2,-22(fp)
				for (kx=-ks; kx<ks; kx++) {
     b38:	e0bffd17 	ldw	r2,-12(fp)
     b3c:	10800044 	addi	r2,r2,1
     b40:	e0bffd15 	stw	r2,-12(fp)
     b44:	e0bffa0f 	ldh	r2,-24(fp)
     b48:	e0fffd17 	ldw	r3,-12(fp)
     b4c:	18bfdb16 	blt	r3,r2,abc <convolution+0xdc>
			for (ky=-ks; ky<ks; ky++) {
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	10800044 	addi	r2,r2,1
     b58:	e0bffc15 	stw	r2,-16(fp)
     b5c:	e0bffa0f 	ldh	r2,-24(fp)
     b60:	e0fffc17 	ldw	r3,-16(fp)
     b64:	18bfc216 	blt	r3,r2,a70 <convolution+0x90>
				}
			}
			if (clr == 0)
     b68:	e0bff50b 	ldhu	r2,-44(fp)
     b6c:	1000091e 	bne	r2,zero,b94 <convolution+0x1b4>
				sum += IORD_16DIRECT(dst, dst_ptr);
     b70:	e0bffb17 	ldw	r2,-20(fp)
     b74:	e0fff417 	ldw	r3,-48(fp)
     b78:	1885883a 	add	r2,r3,r2
     b7c:	1080002b 	ldhuio	r2,0(r2)
     b80:	10bfffcc 	andi	r2,r2,65535
     b84:	1007883a 	mov	r3,r2
     b88:	e0bffa8b 	ldhu	r2,-22(fp)
     b8c:	10c5883a 	add	r2,r2,r3
     b90:	e0bffa8d 	sth	r2,-22(fp)
			IOWR_16DIRECT(dst, dst_ptr, sum);
     b94:	e0bffb17 	ldw	r2,-20(fp)
     b98:	e0fff417 	ldw	r3,-48(fp)
     b9c:	1885883a 	add	r2,r3,r2
     ba0:	e0fffa8b 	ldhu	r3,-22(fp)
     ba4:	10c0002d 	sthio	r3,0(r2)
			dst_ptr += 2;
     ba8:	e0bffb17 	ldw	r2,-20(fp)
     bac:	10800084 	addi	r2,r2,2
     bb0:	e0bffb15 	stw	r2,-20(fp)
		for (x=pad; x<(res + pad); x=x+stride) {
     bb4:	e0bffe8b 	ldhu	r2,-6(fp)
     bb8:	e0ffef0b 	ldhu	r3,-68(fp)
     bbc:	1885883a 	add	r2,r3,r2
     bc0:	e0bffe8d 	sth	r2,-6(fp)
     bc4:	e0fffe8f 	ldh	r3,-6(fp)
     bc8:	e13ff10b 	ldhu	r4,-60(fp)
     bcc:	e0bff00b 	ldhu	r2,-64(fp)
     bd0:	2085883a 	add	r2,r4,r2
     bd4:	18bf9f16 	blt	r3,r2,a54 <convolution+0x74>
	for (y=pad; y<(res + pad); y=y+stride) {
     bd8:	e0bffe0b 	ldhu	r2,-8(fp)
     bdc:	e0ffef0b 	ldhu	r3,-68(fp)
     be0:	1885883a 	add	r2,r3,r2
     be4:	e0bffe0d 	sth	r2,-8(fp)
     be8:	e0fffe0f 	ldh	r3,-8(fp)
     bec:	e13ff10b 	ldhu	r4,-60(fp)
     bf0:	e0bff00b 	ldhu	r2,-64(fp)
     bf4:	2085883a 	add	r2,r4,r2
     bf8:	18bf9316 	blt	r3,r2,a48 <convolution+0x68>
		}
	}
}
     bfc:	0001883a 	nop
     c00:	0001883a 	nop
     c04:	e6ffff04 	addi	sp,fp,-4
     c08:	dfc00217 	ldw	ra,8(sp)
     c0c:	df000117 	ldw	fp,4(sp)
     c10:	dc000017 	ldw	r16,0(sp)
     c14:	dec00304 	addi	sp,sp,12
     c18:	f800283a 	ret

00000c1c <maxpool>:

//////////////////////////////////////////////////////////////////////////////
void maxpool(alt_u16* src, alt_u16* dst, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     c1c:	defff204 	addi	sp,sp,-56
     c20:	dfc00d15 	stw	ra,52(sp)
     c24:	df000c15 	stw	fp,48(sp)
     c28:	dc000b15 	stw	r16,44(sp)
     c2c:	df000c04 	addi	fp,sp,48
     c30:	e13ff915 	stw	r4,-28(fp)
     c34:	e17ff815 	stw	r5,-32(fp)
     c38:	3009883a 	mov	r4,r6
     c3c:	380b883a 	mov	r5,r7
     c40:	e0c00217 	ldw	r3,8(fp)
     c44:	e0800317 	ldw	r2,12(fp)
     c48:	e13ff70d 	sth	r4,-36(fp)
     c4c:	2809883a 	mov	r4,r5
     c50:	e13ff60d 	sth	r4,-40(fp)
     c54:	e0fff50d 	sth	r3,-44(fp)
     c58:	e0bff40d 	sth	r2,-48(fp)
	alt_16 x, y, kx, ky;
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
     c5c:	e03ffc15 	stw	zero,-16(fp)
	for (y=pad; y<(res + pad); y=y+stride) {
     c60:	e0bff50b 	ldhu	r2,-44(fp)
     c64:	e0bffe0d 	sth	r2,-8(fp)
     c68:	00004b06 	br	d98 <maxpool+0x17c>
		for (x=pad; x<(res + pad); x=x+stride) {
     c6c:	e0bff50b 	ldhu	r2,-44(fp)
     c70:	e0bffe8d 	sth	r2,-6(fp)
     c74:	00003f06 	br	d74 <maxpool+0x158>
			max = f2bf(-10000.0); // negative enough?
     c78:	01318734 	movhi	r4,50716
     c7c:	21100004 	addi	r4,r4,16384
     c80:	00002b80 	call	2b8 <f2bf>
     c84:	e0bffb8d 	sth	r2,-18(fp)
			for (ky=0; ky<k; ky++) {
     c88:	e03ffd0d 	sth	zero,-12(fp)
     c8c:	00002a06 	br	d38 <maxpool+0x11c>
				for (kx=0; kx<k; kx++) {
     c90:	e03ffd8d 	sth	zero,-10(fp)
     c94:	00002206 	br	d20 <maxpool+0x104>
					src_pix = bf2f(IORD_16DIRECT(src, ((x + kx) + (res * (y + ky))) << 1));
     c98:	e0fffe8f 	ldh	r3,-6(fp)
     c9c:	e0bffd8f 	ldh	r2,-10(fp)
     ca0:	18a1883a 	add	r16,r3,r2
     ca4:	e13ff60b 	ldhu	r4,-40(fp)
     ca8:	e0fffe0f 	ldh	r3,-8(fp)
     cac:	e0bffd0f 	ldh	r2,-12(fp)
     cb0:	1885883a 	add	r2,r3,r2
     cb4:	100b883a 	mov	r5,r2
     cb8:	0005e880 	call	5e88 <__mulsi3>
     cbc:	8085883a 	add	r2,r16,r2
     cc0:	1085883a 	add	r2,r2,r2
     cc4:	1007883a 	mov	r3,r2
     cc8:	e0bff917 	ldw	r2,-28(fp)
     ccc:	10c5883a 	add	r2,r2,r3
     cd0:	1080002b 	ldhuio	r2,0(r2)
     cd4:	10bfffcc 	andi	r2,r2,65535
     cd8:	10bfffcc 	andi	r2,r2,65535
     cdc:	1009883a 	mov	r4,r2
     ce0:	000027c0 	call	27c <bf2f>
     ce4:	e0bffa15 	stw	r2,-24(fp)
					if (src_pix > max)
     ce8:	e0bffb8b 	ldhu	r2,-18(fp)
     cec:	1009883a 	mov	r4,r2
     cf0:	000723c0 	call	723c <__floatsisf>
     cf4:	1007883a 	mov	r3,r2
     cf8:	180b883a 	mov	r5,r3
     cfc:	e13ffa17 	ldw	r4,-24(fp)
     d00:	00067800 	call	6780 <__gesf2>
     d04:	0080030e 	bge	zero,r2,d14 <maxpool+0xf8>
						max = f2bf(src_pix);
     d08:	e13ffa17 	ldw	r4,-24(fp)
     d0c:	00002b80 	call	2b8 <f2bf>
     d10:	e0bffb8d 	sth	r2,-18(fp)
				for (kx=0; kx<k; kx++) {
     d14:	e0bffd8b 	ldhu	r2,-10(fp)
     d18:	10800044 	addi	r2,r2,1
     d1c:	e0bffd8d 	sth	r2,-10(fp)
     d20:	e0fffd8f 	ldh	r3,-10(fp)
     d24:	e0bff70b 	ldhu	r2,-36(fp)
     d28:	18bfdb16 	blt	r3,r2,c98 <maxpool+0x7c>
			for (ky=0; ky<k; ky++) {
     d2c:	e0bffd0b 	ldhu	r2,-12(fp)
     d30:	10800044 	addi	r2,r2,1
     d34:	e0bffd0d 	sth	r2,-12(fp)
     d38:	e0fffd0f 	ldh	r3,-12(fp)
     d3c:	e0bff70b 	ldhu	r2,-36(fp)
     d40:	18bfd316 	blt	r3,r2,c90 <maxpool+0x74>
				}
			}
			IOWR_16DIRECT(dst, dst_ptr, max);
     d44:	e0fff817 	ldw	r3,-32(fp)
     d48:	e0bffc17 	ldw	r2,-16(fp)
     d4c:	1885883a 	add	r2,r3,r2
     d50:	e0fffb8b 	ldhu	r3,-18(fp)
     d54:	10c0002d 	sthio	r3,0(r2)
			dst_ptr += 2;
     d58:	e0bffc17 	ldw	r2,-16(fp)
     d5c:	10800084 	addi	r2,r2,2
     d60:	e0bffc15 	stw	r2,-16(fp)
		for (x=pad; x<(res + pad); x=x+stride) {
     d64:	e0bffe8b 	ldhu	r2,-6(fp)
     d68:	e0fff40b 	ldhu	r3,-48(fp)
     d6c:	1885883a 	add	r2,r3,r2
     d70:	e0bffe8d 	sth	r2,-6(fp)
     d74:	e0fffe8f 	ldh	r3,-6(fp)
     d78:	e13ff60b 	ldhu	r4,-40(fp)
     d7c:	e0bff50b 	ldhu	r2,-44(fp)
     d80:	2085883a 	add	r2,r4,r2
     d84:	18bfbc16 	blt	r3,r2,c78 <maxpool+0x5c>
	for (y=pad; y<(res + pad); y=y+stride) {
     d88:	e0bffe0b 	ldhu	r2,-8(fp)
     d8c:	e0fff40b 	ldhu	r3,-48(fp)
     d90:	1885883a 	add	r2,r3,r2
     d94:	e0bffe0d 	sth	r2,-8(fp)
     d98:	e0fffe0f 	ldh	r3,-8(fp)
     d9c:	e13ff60b 	ldhu	r4,-40(fp)
     da0:	e0bff50b 	ldhu	r2,-44(fp)
     da4:	2085883a 	add	r2,r4,r2
     da8:	18bfb016 	blt	r3,r2,c6c <maxpool+0x50>
		}
	}
}
     dac:	0001883a 	nop
     db0:	0001883a 	nop
     db4:	e6ffff04 	addi	sp,fp,-4
     db8:	dfc00217 	ldw	ra,8(sp)
     dbc:	df000117 	ldw	fp,4(sp)
     dc0:	dc000017 	ldw	r16,0(sp)
     dc4:	dec00304 	addi	sp,sp,12
     dc8:	f800283a 	ret

00000dcc <global_average_pooling>:

//////////////////////////////////////////////////////////////////////////////
bfloat16 global_average_pooling(alt_u16* src, alt_u16 res) {
     dcc:	defff804 	addi	sp,sp,-32
     dd0:	dfc00715 	stw	ra,28(sp)
     dd4:	df000615 	stw	fp,24(sp)
     dd8:	dc000515 	stw	r16,20(sp)
     ddc:	df000604 	addi	fp,sp,24
     de0:	e13ffb15 	stw	r4,-20(fp)
     de4:	2805883a 	mov	r2,r5
     de8:	e0bffa0d 	sth	r2,-24(fp)
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
     dec:	0009883a 	mov	r4,zero
     df0:	00002b80 	call	2b8 <f2bf>
     df4:	e0bffc8d 	sth	r2,-14(fp)
	src_ptr = 0;
     df8:	e03ffd15 	stw	zero,-12(fp)
	for (x=0; x<(res*res); x++) {
     dfc:	e03ffe15 	stw	zero,-8(fp)
     e00:	00001006 	br	e44 <global_average_pooling+0x78>
		sum = bf_add(sum, IORD_16DIRECT(src, src_ptr));
     e04:	e13ffc8b 	ldhu	r4,-14(fp)
     e08:	e0fffb17 	ldw	r3,-20(fp)
     e0c:	e0bffd17 	ldw	r2,-12(fp)
     e10:	1885883a 	add	r2,r3,r2
     e14:	1080002b 	ldhuio	r2,0(r2)
     e18:	10bfffcc 	andi	r2,r2,65535
     e1c:	10bfffcc 	andi	r2,r2,65535
     e20:	100b883a 	mov	r5,r2
     e24:	00003640 	call	364 <bf_add>
     e28:	e0bffc8d 	sth	r2,-14(fp)
		src_ptr += 2;
     e2c:	e0bffd17 	ldw	r2,-12(fp)
     e30:	10800084 	addi	r2,r2,2
     e34:	e0bffd15 	stw	r2,-12(fp)
	for (x=0; x<(res*res); x++) {
     e38:	e0bffe17 	ldw	r2,-8(fp)
     e3c:	10800044 	addi	r2,r2,1
     e40:	e0bffe15 	stw	r2,-8(fp)
     e44:	e0bffa0b 	ldhu	r2,-24(fp)
     e48:	e0fffa0b 	ldhu	r3,-24(fp)
     e4c:	180b883a 	mov	r5,r3
     e50:	1009883a 	mov	r4,r2
     e54:	0005e880 	call	5e88 <__mulsi3>
     e58:	1007883a 	mov	r3,r2
     e5c:	e0bffe17 	ldw	r2,-8(fp)
     e60:	10ffe836 	bltu	r2,r3,e04 <global_average_pooling+0x38>
	}
	return f2bf(bf2f(sum) / (float)(res * res));
     e64:	e0bffc8b 	ldhu	r2,-14(fp)
     e68:	1009883a 	mov	r4,r2
     e6c:	000027c0 	call	27c <bf2f>
     e70:	1021883a 	mov	r16,r2
     e74:	e0bffa0b 	ldhu	r2,-24(fp)
     e78:	e0fffa0b 	ldhu	r3,-24(fp)
     e7c:	180b883a 	mov	r5,r3
     e80:	1009883a 	mov	r4,r2
     e84:	0005e880 	call	5e88 <__mulsi3>
     e88:	1009883a 	mov	r4,r2
     e8c:	000723c0 	call	723c <__floatsisf>
     e90:	1007883a 	mov	r3,r2
     e94:	180b883a 	mov	r5,r3
     e98:	8009883a 	mov	r4,r16
     e9c:	000631c0 	call	631c <__divsf3>
     ea0:	1007883a 	mov	r3,r2
     ea4:	1805883a 	mov	r2,r3
     ea8:	1009883a 	mov	r4,r2
     eac:	00002b80 	call	2b8 <f2bf>
}
     eb0:	e6ffff04 	addi	sp,fp,-4
     eb4:	dfc00217 	ldw	ra,8(sp)
     eb8:	df000117 	ldw	fp,4(sp)
     ebc:	dc000017 	ldw	r16,0(sp)
     ec0:	dec00304 	addi	sp,sp,12
     ec4:	f800283a 	ret

00000ec8 <softmax>:

//////////////////////////////////////////////////////////////////////////////
void softmax(alt_u16* src, alt_u16 input_len) {
     ec8:	defff604 	addi	sp,sp,-40
     ecc:	dfc00915 	stw	ra,36(sp)
     ed0:	df000815 	stw	fp,32(sp)
     ed4:	dc000715 	stw	r16,28(sp)
     ed8:	df000804 	addi	fp,sp,32
     edc:	e13ff915 	stw	r4,-28(fp)
     ee0:	2805883a 	mov	r2,r5
     ee4:	e0bff80d 	sth	r2,-32(fp)
	alt_u16 i;
	float m, sum, offset;

	sum = 0.0;
     ee8:	e03ffc15 	stw	zero,-16(fp)
	m = -INFINITY;
     eec:	00bfe034 	movhi	r2,65408
     ef0:	e0bffd15 	stw	r2,-12(fp)
	for (i = 0; i < input_len; i++)
     ef4:	e03ffe8d 	sth	zero,-6(fp)
     ef8:	00001b06 	br	f68 <softmax+0xa0>
		if (bf2f(src[i]) > m)
     efc:	e0bffe8b 	ldhu	r2,-6(fp)
     f00:	1085883a 	add	r2,r2,r2
     f04:	1007883a 	mov	r3,r2
     f08:	e0bff917 	ldw	r2,-28(fp)
     f0c:	10c5883a 	add	r2,r2,r3
     f10:	1080000b 	ldhu	r2,0(r2)
     f14:	10bfffcc 	andi	r2,r2,65535
     f18:	1009883a 	mov	r4,r2
     f1c:	000027c0 	call	27c <bf2f>
     f20:	1007883a 	mov	r3,r2
     f24:	180b883a 	mov	r5,r3
     f28:	e13ffd17 	ldw	r4,-12(fp)
     f2c:	00068380 	call	6838 <__lesf2>
     f30:	10000a0e 	bge	r2,zero,f5c <softmax+0x94>
			m = bf2f(src[i]);
     f34:	e0bffe8b 	ldhu	r2,-6(fp)
     f38:	1085883a 	add	r2,r2,r2
     f3c:	1007883a 	mov	r3,r2
     f40:	e0bff917 	ldw	r2,-28(fp)
     f44:	10c5883a 	add	r2,r2,r3
     f48:	1080000b 	ldhu	r2,0(r2)
     f4c:	10bfffcc 	andi	r2,r2,65535
     f50:	1009883a 	mov	r4,r2
     f54:	000027c0 	call	27c <bf2f>
     f58:	e0bffd15 	stw	r2,-12(fp)
	for (i = 0; i < input_len; i++)
     f5c:	e0bffe8b 	ldhu	r2,-6(fp)
     f60:	10800044 	addi	r2,r2,1
     f64:	e0bffe8d 	sth	r2,-6(fp)
     f68:	e0fffe8b 	ldhu	r3,-6(fp)
     f6c:	e0bff80b 	ldhu	r2,-32(fp)
     f70:	18bfe236 	bltu	r3,r2,efc <softmax+0x34>
	for (i = 0; i < input_len; i++)
     f74:	e03ffe8d 	sth	zero,-6(fp)
     f78:	00001a06 	br	fe4 <softmax+0x11c>
		sum += expf(bf2f(src[i]) - m);
     f7c:	e0bffe8b 	ldhu	r2,-6(fp)
     f80:	1085883a 	add	r2,r2,r2
     f84:	1007883a 	mov	r3,r2
     f88:	e0bff917 	ldw	r2,-28(fp)
     f8c:	10c5883a 	add	r2,r2,r3
     f90:	1080000b 	ldhu	r2,0(r2)
     f94:	10bfffcc 	andi	r2,r2,65535
     f98:	1009883a 	mov	r4,r2
     f9c:	000027c0 	call	27c <bf2f>
     fa0:	1007883a 	mov	r3,r2
     fa4:	e17ffd17 	ldw	r5,-12(fp)
     fa8:	1809883a 	mov	r4,r3
     fac:	0006cec0 	call	6cec <__subsf3>
     fb0:	1007883a 	mov	r3,r2
     fb4:	1805883a 	mov	r2,r3
     fb8:	1009883a 	mov	r4,r2
     fbc:	00047200 	call	4720 <expf>
     fc0:	1007883a 	mov	r3,r2
     fc4:	180b883a 	mov	r5,r3
     fc8:	e13ffc17 	ldw	r4,-16(fp)
     fcc:	0005eb00 	call	5eb0 <__addsf3>
     fd0:	1007883a 	mov	r3,r2
     fd4:	e0fffc15 	stw	r3,-16(fp)
	for (i = 0; i < input_len; i++)
     fd8:	e0bffe8b 	ldhu	r2,-6(fp)
     fdc:	10800044 	addi	r2,r2,1
     fe0:	e0bffe8d 	sth	r2,-6(fp)
     fe4:	e0fffe8b 	ldhu	r3,-6(fp)
     fe8:	e0bff80b 	ldhu	r2,-32(fp)
     fec:	18bfe336 	bltu	r3,r2,f7c <softmax+0xb4>
	offset = m + logf(sum);
     ff0:	e13ffc17 	ldw	r4,-16(fp)
     ff4:	00047f00 	call	47f0 <logf>
     ff8:	1007883a 	mov	r3,r2
     ffc:	180b883a 	mov	r5,r3
    1000:	e13ffd17 	ldw	r4,-12(fp)
    1004:	0005eb00 	call	5eb0 <__addsf3>
    1008:	1007883a 	mov	r3,r2
    100c:	e0fffa15 	stw	r3,-24(fp)
	for (alt_u16 i = 0; i < input_len; i++)
    1010:	e03ffb8d 	sth	zero,-18(fp)
    1014:	00001c06 	br	1088 <softmax+0x1c0>
		src[i] = f2bf(expf(src[i] - offset));
    1018:	e0bffb8b 	ldhu	r2,-18(fp)
    101c:	1085883a 	add	r2,r2,r2
    1020:	1007883a 	mov	r3,r2
    1024:	e0bff917 	ldw	r2,-28(fp)
    1028:	10c5883a 	add	r2,r2,r3
    102c:	1080000b 	ldhu	r2,0(r2)
    1030:	10bfffcc 	andi	r2,r2,65535
    1034:	1009883a 	mov	r4,r2
    1038:	000723c0 	call	723c <__floatsisf>
    103c:	1007883a 	mov	r3,r2
    1040:	e17ffa17 	ldw	r5,-24(fp)
    1044:	1809883a 	mov	r4,r3
    1048:	0006cec0 	call	6cec <__subsf3>
    104c:	1007883a 	mov	r3,r2
    1050:	1805883a 	mov	r2,r3
    1054:	1009883a 	mov	r4,r2
    1058:	00047200 	call	4720 <expf>
    105c:	1009883a 	mov	r4,r2
    1060:	e0bffb8b 	ldhu	r2,-18(fp)
    1064:	1085883a 	add	r2,r2,r2
    1068:	1007883a 	mov	r3,r2
    106c:	e0bff917 	ldw	r2,-28(fp)
    1070:	10e1883a 	add	r16,r2,r3
    1074:	00002b80 	call	2b8 <f2bf>
    1078:	8080000d 	sth	r2,0(r16)
	for (alt_u16 i = 0; i < input_len; i++)
    107c:	e0bffb8b 	ldhu	r2,-18(fp)
    1080:	10800044 	addi	r2,r2,1
    1084:	e0bffb8d 	sth	r2,-18(fp)
    1088:	e0fffb8b 	ldhu	r3,-18(fp)
    108c:	e0bff80b 	ldhu	r2,-32(fp)
    1090:	18bfe136 	bltu	r3,r2,1018 <softmax+0x150>
}
    1094:	0001883a 	nop
    1098:	0001883a 	nop
    109c:	e6ffff04 	addi	sp,fp,-4
    10a0:	dfc00217 	ldw	ra,8(sp)
    10a4:	df000117 	ldw	fp,4(sp)
    10a8:	dc000017 	ldw	r16,0(sp)
    10ac:	dec00304 	addi	sp,sp,12
    10b0:	f800283a 	ret

000010b4 <scale>:

//////////////////////////////////////////////////////////////////////////////
// resize a 565 bitmap
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
    10b4:	defff104 	addi	sp,sp,-60
    10b8:	dfc00e15 	stw	ra,56(sp)
    10bc:	df000d15 	stw	fp,52(sp)
    10c0:	dc000c15 	stw	r16,48(sp)
    10c4:	df000d04 	addi	fp,sp,52
    10c8:	e13ff815 	stw	r4,-32(fp)
    10cc:	e17ff715 	stw	r5,-36(fp)
    10d0:	3009883a 	mov	r4,r6
    10d4:	380b883a 	mov	r5,r7
    10d8:	e0c00217 	ldw	r3,8(fp)
    10dc:	e0800317 	ldw	r2,12(fp)
    10e0:	e13ff60d 	sth	r4,-40(fp)
    10e4:	2809883a 	mov	r4,r5
    10e8:	e13ff50d 	sth	r4,-44(fp)
    10ec:	e0fff40d 	sth	r3,-48(fp)
    10f0:	e0bff30d 	sth	r2,-52(fp)
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
    10f4:	e0bff40b 	ldhu	r2,-48(fp)
    10f8:	1009883a 	mov	r4,r2
    10fc:	00073600 	call	7360 <__floatunsisf>
    1100:	1021883a 	mov	r16,r2
    1104:	e0bff60b 	ldhu	r2,-40(fp)
    1108:	1009883a 	mov	r4,r2
    110c:	00073600 	call	7360 <__floatunsisf>
    1110:	1007883a 	mov	r3,r2
    1114:	180b883a 	mov	r5,r3
    1118:	8009883a 	mov	r4,r16
    111c:	000631c0 	call	631c <__divsf3>
    1120:	1007883a 	mov	r3,r2
    1124:	e0fffc15 	stw	r3,-16(fp)
        scale_height = (float)new_height / (float)height;
    1128:	e0bff30b 	ldhu	r2,-52(fp)
    112c:	1009883a 	mov	r4,r2
    1130:	00073600 	call	7360 <__floatunsisf>
    1134:	1021883a 	mov	r16,r2
    1138:	e0bff50b 	ldhu	r2,-44(fp)
    113c:	1009883a 	mov	r4,r2
    1140:	00073600 	call	7360 <__floatunsisf>
    1144:	1007883a 	mov	r3,r2
    1148:	180b883a 	mov	r5,r3
    114c:	8009883a 	mov	r4,r16
    1150:	000631c0 	call	631c <__divsf3>
    1154:	1007883a 	mov	r3,r2
    1158:	e0fffb15 	stw	r3,-20(fp)

        src_ptr = 0;
    115c:	e03ffd8d 	sth	zero,-10(fp)
        for(cy = 0; cy < new_height; cy++) {
    1160:	e03ffe0d 	sth	zero,-8(fp)
    1164:	00003906 	br	124c <scale+0x198>
            for(cx = 0; cx < new_width; cx++) {
    1168:	e03ffe8d 	sth	zero,-6(fp)
    116c:	00003106 	br	1234 <scale+0x180>
                nearest =  (int)(((float)(cy * width) / scale_height) + ((float)cx / scale_width));
    1170:	e0bffe0b 	ldhu	r2,-8(fp)
    1174:	e0fff60b 	ldhu	r3,-40(fp)
    1178:	180b883a 	mov	r5,r3
    117c:	1009883a 	mov	r4,r2
    1180:	0005e880 	call	5e88 <__mulsi3>
    1184:	1009883a 	mov	r4,r2
    1188:	000723c0 	call	723c <__floatsisf>
    118c:	1007883a 	mov	r3,r2
    1190:	e17ffb17 	ldw	r5,-20(fp)
    1194:	1809883a 	mov	r4,r3
    1198:	000631c0 	call	631c <__divsf3>
    119c:	1007883a 	mov	r3,r2
    11a0:	1821883a 	mov	r16,r3
    11a4:	e0bffe8b 	ldhu	r2,-6(fp)
    11a8:	1009883a 	mov	r4,r2
    11ac:	00073600 	call	7360 <__floatunsisf>
    11b0:	1007883a 	mov	r3,r2
    11b4:	e17ffc17 	ldw	r5,-16(fp)
    11b8:	1809883a 	mov	r4,r3
    11bc:	000631c0 	call	631c <__divsf3>
    11c0:	1007883a 	mov	r3,r2
    11c4:	1805883a 	mov	r2,r3
    11c8:	100b883a 	mov	r5,r2
    11cc:	8009883a 	mov	r4,r16
    11d0:	0005eb00 	call	5eb0 <__addsf3>
    11d4:	1007883a 	mov	r3,r2
    11d8:	1805883a 	mov	r2,r3
    11dc:	1009883a 	mov	r4,r2
    11e0:	00071cc0 	call	71cc <__fixsfsi>
    11e4:	e0bffa15 	stw	r2,-24(fp)
                pixel = IORD_16DIRECT(src, nearest << 1);
    11e8:	e0bffa17 	ldw	r2,-24(fp)
    11ec:	1085883a 	add	r2,r2,r2
    11f0:	1007883a 	mov	r3,r2
    11f4:	e0bff817 	ldw	r2,-32(fp)
    11f8:	10c5883a 	add	r2,r2,r3
    11fc:	1080002b 	ldhuio	r2,0(r2)
    1200:	10bfffcc 	andi	r2,r2,65535
    1204:	e0bff98d 	sth	r2,-26(fp)
                IOWR_16DIRECT(dst, src_ptr, pixel);
    1208:	e0bffd8b 	ldhu	r2,-10(fp)
    120c:	e0fff717 	ldw	r3,-36(fp)
    1210:	1885883a 	add	r2,r3,r2
    1214:	e0fff98b 	ldhu	r3,-26(fp)
    1218:	10c0002d 	sthio	r3,0(r2)
                src_ptr += 2;
    121c:	e0bffd8b 	ldhu	r2,-10(fp)
    1220:	10800084 	addi	r2,r2,2
    1224:	e0bffd8d 	sth	r2,-10(fp)
            for(cx = 0; cx < new_width; cx++) {
    1228:	e0bffe8b 	ldhu	r2,-6(fp)
    122c:	10800044 	addi	r2,r2,1
    1230:	e0bffe8d 	sth	r2,-6(fp)
    1234:	e0fffe8b 	ldhu	r3,-6(fp)
    1238:	e0bff40b 	ldhu	r2,-48(fp)
    123c:	18bfcc36 	bltu	r3,r2,1170 <scale+0xbc>
        for(cy = 0; cy < new_height; cy++) {
    1240:	e0bffe0b 	ldhu	r2,-8(fp)
    1244:	10800044 	addi	r2,r2,1
    1248:	e0bffe0d 	sth	r2,-8(fp)
    124c:	e0fffe0b 	ldhu	r3,-8(fp)
    1250:	e0bff30b 	ldhu	r2,-52(fp)
    1254:	18bfc436 	bltu	r3,r2,1168 <scale+0xb4>
            }
        }
}
    1258:	0001883a 	nop
    125c:	0001883a 	nop
    1260:	e6ffff04 	addi	sp,fp,-4
    1264:	dfc00217 	ldw	ra,8(sp)
    1268:	df000117 	ldw	fp,4(sp)
    126c:	dc000017 	ldw	r16,0(sp)
    1270:	dec00304 	addi	sp,sp,12
    1274:	f800283a 	ret

00001278 <rgb565_to_feature>:

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
    1278:	defff504 	addi	sp,sp,-44
    127c:	dfc00a15 	stw	ra,40(sp)
    1280:	df000915 	stw	fp,36(sp)
    1284:	dc000815 	stw	r16,32(sp)
    1288:	df000904 	addi	fp,sp,36
    128c:	e13ffb15 	stw	r4,-20(fp)
    1290:	e17ffa15 	stw	r5,-24(fp)
    1294:	e1bff915 	stw	r6,-28(fp)
    1298:	e1fff815 	stw	r7,-32(fp)
    129c:	e0800217 	ldw	r2,8(fp)
    12a0:	e0bff70d 	sth	r2,-36(fp)
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
    12a4:	e03ffd15 	stw	zero,-12(fp)
	for (i=0; i<(res*res); i++) {
    12a8:	e03ffe15 	stw	zero,-8(fp)
    12ac:	00004206 	br	13b8 <rgb565_to_feature+0x140>
		pixel = IORD_16DIRECT(src, ptr);
    12b0:	e0fffb17 	ldw	r3,-20(fp)
    12b4:	e0bffd17 	ldw	r2,-12(fp)
    12b8:	1885883a 	add	r2,r3,r2
    12bc:	1080002b 	ldhuio	r2,0(r2)
    12c0:	10bfffcc 	andi	r2,r2,65535
    12c4:	e0bffc8d 	sth	r2,-14(fp)
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
    12c8:	e0fffa17 	ldw	r3,-24(fp)
    12cc:	e0bffd17 	ldw	r2,-12(fp)
    12d0:	18a1883a 	add	r16,r3,r2
    12d4:	e0bffc8b 	ldhu	r2,-14(fp)
    12d8:	1005d23a 	srai	r2,r2,8
    12dc:	10803e0c 	andi	r2,r2,248
    12e0:	1009883a 	mov	r4,r2
    12e4:	000723c0 	call	723c <__floatsisf>
    12e8:	1007883a 	mov	r3,r2
    12ec:	0150dff4 	movhi	r5,17279
    12f0:	1809883a 	mov	r4,r3
    12f4:	000631c0 	call	631c <__divsf3>
    12f8:	1007883a 	mov	r3,r2
    12fc:	1805883a 	mov	r2,r3
    1300:	1009883a 	mov	r4,r2
    1304:	00002b80 	call	2b8 <f2bf>
    1308:	10bfffcc 	andi	r2,r2,65535
    130c:	8080002d 	sthio	r2,0(r16)
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
    1310:	e0fff917 	ldw	r3,-28(fp)
    1314:	e0bffd17 	ldw	r2,-12(fp)
    1318:	18a1883a 	add	r16,r3,r2
    131c:	e0bffc8b 	ldhu	r2,-14(fp)
    1320:	1005d0fa 	srai	r2,r2,3
    1324:	10803f0c 	andi	r2,r2,252
    1328:	1009883a 	mov	r4,r2
    132c:	000723c0 	call	723c <__floatsisf>
    1330:	1007883a 	mov	r3,r2
    1334:	0150dff4 	movhi	r5,17279
    1338:	1809883a 	mov	r4,r3
    133c:	000631c0 	call	631c <__divsf3>
    1340:	1007883a 	mov	r3,r2
    1344:	1805883a 	mov	r2,r3
    1348:	1009883a 	mov	r4,r2
    134c:	00002b80 	call	2b8 <f2bf>
    1350:	10bfffcc 	andi	r2,r2,65535
    1354:	8080002d 	sthio	r2,0(r16)
		IOWR_16DIRECT(dst_b, ptr, f2bf((float)((pixel & 0x1f) << 3) / 255.0));
    1358:	e0fff817 	ldw	r3,-32(fp)
    135c:	e0bffd17 	ldw	r2,-12(fp)
    1360:	18a1883a 	add	r16,r3,r2
    1364:	e0bffc8b 	ldhu	r2,-14(fp)
    1368:	100490fa 	slli	r2,r2,3
    136c:	10803fcc 	andi	r2,r2,255
    1370:	1009883a 	mov	r4,r2
    1374:	000723c0 	call	723c <__floatsisf>
    1378:	1007883a 	mov	r3,r2
    137c:	0150dff4 	movhi	r5,17279
    1380:	1809883a 	mov	r4,r3
    1384:	000631c0 	call	631c <__divsf3>
    1388:	1007883a 	mov	r3,r2
    138c:	1805883a 	mov	r2,r3
    1390:	1009883a 	mov	r4,r2
    1394:	00002b80 	call	2b8 <f2bf>
    1398:	10bfffcc 	andi	r2,r2,65535
    139c:	8080002d 	sthio	r2,0(r16)
		ptr += 2;
    13a0:	e0bffd17 	ldw	r2,-12(fp)
    13a4:	10800084 	addi	r2,r2,2
    13a8:	e0bffd15 	stw	r2,-12(fp)
	for (i=0; i<(res*res); i++) {
    13ac:	e0bffe17 	ldw	r2,-8(fp)
    13b0:	10800044 	addi	r2,r2,1
    13b4:	e0bffe15 	stw	r2,-8(fp)
    13b8:	e0bff70b 	ldhu	r2,-36(fp)
    13bc:	e0fff70b 	ldhu	r3,-36(fp)
    13c0:	180b883a 	mov	r5,r3
    13c4:	1009883a 	mov	r4,r2
    13c8:	0005e880 	call	5e88 <__mulsi3>
    13cc:	1007883a 	mov	r3,r2
    13d0:	e0bffe17 	ldw	r2,-8(fp)
    13d4:	10ffb636 	bltu	r2,r3,12b0 <rgb565_to_feature+0x38>
	}
}
    13d8:	0001883a 	nop
    13dc:	0001883a 	nop
    13e0:	e6ffff04 	addi	sp,fp,-4
    13e4:	dfc00217 	ldw	ra,8(sp)
    13e8:	df000117 	ldw	fp,4(sp)
    13ec:	dc000017 	ldw	r16,0(sp)
    13f0:	dec00304 	addi	sp,sp,12
    13f4:	f800283a 	ret

000013f8 <grey_to_feature>:

//////////////////////////////////////////////////////////////////////////////
void grey_to_feature(alt_u16* src, alt_u16* dst, alt_u16 res) {
    13f8:	defff704 	addi	sp,sp,-36
    13fc:	dfc00815 	stw	ra,32(sp)
    1400:	df000715 	stw	fp,28(sp)
    1404:	dc000615 	stw	r16,24(sp)
    1408:	df000704 	addi	fp,sp,28
    140c:	e13ffb15 	stw	r4,-20(fp)
    1410:	e17ffa15 	stw	r5,-24(fp)
    1414:	3005883a 	mov	r2,r6
    1418:	e0bff90d 	sth	r2,-28(fp)
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
    141c:	e03ffd15 	stw	zero,-12(fp)
	for (i=0; i<(res*res); i++) {
    1420:	e03ffe15 	stw	zero,-8(fp)
    1424:	00001c06 	br	1498 <grey_to_feature+0xa0>
		pixel = IORD_16DIRECT(src, ptr);
    1428:	e0fffb17 	ldw	r3,-20(fp)
    142c:	e0bffd17 	ldw	r2,-12(fp)
    1430:	1885883a 	add	r2,r3,r2
    1434:	1080002b 	ldhuio	r2,0(r2)
    1438:	10bfffcc 	andi	r2,r2,65535
    143c:	e0bffc8d 	sth	r2,-14(fp)
		IOWR_16DIRECT(dst, ptr, f2bf(((float)pixel) / 255.0));
    1440:	e0fffa17 	ldw	r3,-24(fp)
    1444:	e0bffd17 	ldw	r2,-12(fp)
    1448:	18a1883a 	add	r16,r3,r2
    144c:	e0bffc8b 	ldhu	r2,-14(fp)
    1450:	1009883a 	mov	r4,r2
    1454:	00073600 	call	7360 <__floatunsisf>
    1458:	1007883a 	mov	r3,r2
    145c:	0150dff4 	movhi	r5,17279
    1460:	1809883a 	mov	r4,r3
    1464:	000631c0 	call	631c <__divsf3>
    1468:	1007883a 	mov	r3,r2
    146c:	1805883a 	mov	r2,r3
    1470:	1009883a 	mov	r4,r2
    1474:	00002b80 	call	2b8 <f2bf>
    1478:	10bfffcc 	andi	r2,r2,65535
    147c:	8080002d 	sthio	r2,0(r16)
		ptr += 2;
    1480:	e0bffd17 	ldw	r2,-12(fp)
    1484:	10800084 	addi	r2,r2,2
    1488:	e0bffd15 	stw	r2,-12(fp)
	for (i=0; i<(res*res); i++) {
    148c:	e0bffe17 	ldw	r2,-8(fp)
    1490:	10800044 	addi	r2,r2,1
    1494:	e0bffe15 	stw	r2,-8(fp)
    1498:	e0bff90b 	ldhu	r2,-28(fp)
    149c:	e0fff90b 	ldhu	r3,-28(fp)
    14a0:	180b883a 	mov	r5,r3
    14a4:	1009883a 	mov	r4,r2
    14a8:	0005e880 	call	5e88 <__mulsi3>
    14ac:	1007883a 	mov	r3,r2
    14b0:	e0bffe17 	ldw	r2,-8(fp)
    14b4:	10ffdc36 	bltu	r2,r3,1428 <grey_to_feature+0x30>
	}
}
    14b8:	0001883a 	nop
    14bc:	0001883a 	nop
    14c0:	e6ffff04 	addi	sp,fp,-4
    14c4:	dfc00217 	ldw	ra,8(sp)
    14c8:	df000117 	ldw	fp,4(sp)
    14cc:	dc000017 	ldw	r16,0(sp)
    14d0:	dec00304 	addi	sp,sp,12
    14d4:	f800283a 	ret

000014d8 <rgb_to_grey>:

//////////////////////////////////////////////////////////////////////////////
alt_u16 rgb_to_grey(alt_u16 rgb565) {
    14d8:	defffc04 	addi	sp,sp,-16
    14dc:	dfc00315 	stw	ra,12(sp)
    14e0:	df000215 	stw	fp,8(sp)
    14e4:	df000204 	addi	fp,sp,8
    14e8:	2005883a 	mov	r2,r4
    14ec:	e0bffe0d 	sth	r2,-8(fp)
	alt_u16 grey;

	grey = (alt_u16)((float)((rgb565 & 0xf800) >> 8) * 0.299);
    14f0:	e0bffe0b 	ldhu	r2,-8(fp)
    14f4:	1005d23a 	srai	r2,r2,8
    14f8:	10803e0c 	andi	r2,r2,248
    14fc:	1009883a 	mov	r4,r2
    1500:	000723c0 	call	723c <__floatsisf>
    1504:	1007883a 	mov	r3,r2
    1508:	1809883a 	mov	r4,r3
    150c:	0009af40 	call	9af4 <__extendsfdf2>
    1510:	1011883a 	mov	r8,r2
    1514:	1813883a 	mov	r9,r3
    1518:	01b95834 	movhi	r6,58720
    151c:	31906244 	addi	r6,r6,16777
    1520:	01cff4f4 	movhi	r7,16339
    1524:	39c8b404 	addi	r7,r7,8912
    1528:	4009883a 	mov	r4,r8
    152c:	480b883a 	mov	r5,r9
    1530:	00088cc0 	call	88cc <__muldf3>
    1534:	1009883a 	mov	r4,r2
    1538:	180b883a 	mov	r5,r3
    153c:	2005883a 	mov	r2,r4
    1540:	2807883a 	mov	r3,r5
    1544:	1009883a 	mov	r4,r2
    1548:	180b883a 	mov	r5,r3
    154c:	000507c0 	call	507c <__fixunsdfsi>
    1550:	e0bfff8d 	sth	r2,-2(fp)
	grey += (alt_u16)((float)((rgb565 & 0x07e0) >> 3) * 0.587);
    1554:	e0bffe0b 	ldhu	r2,-8(fp)
    1558:	1005d0fa 	srai	r2,r2,3
    155c:	10803f0c 	andi	r2,r2,252
    1560:	1009883a 	mov	r4,r2
    1564:	000723c0 	call	723c <__floatsisf>
    1568:	1007883a 	mov	r3,r2
    156c:	1809883a 	mov	r4,r3
    1570:	0009af40 	call	9af4 <__extendsfdf2>
    1574:	1011883a 	mov	r8,r2
    1578:	1813883a 	mov	r9,r3
    157c:	018e5634 	movhi	r6,14680
    1580:	31841884 	addi	r6,r6,4194
    1584:	01cff8f4 	movhi	r7,16355
    1588:	39f22d04 	addi	r7,r7,-14156
    158c:	4009883a 	mov	r4,r8
    1590:	480b883a 	mov	r5,r9
    1594:	00088cc0 	call	88cc <__muldf3>
    1598:	1009883a 	mov	r4,r2
    159c:	180b883a 	mov	r5,r3
    15a0:	2005883a 	mov	r2,r4
    15a4:	2807883a 	mov	r3,r5
    15a8:	1009883a 	mov	r4,r2
    15ac:	180b883a 	mov	r5,r3
    15b0:	000507c0 	call	507c <__fixunsdfsi>
    15b4:	1007883a 	mov	r3,r2
    15b8:	e0bfff8b 	ldhu	r2,-2(fp)
    15bc:	10c5883a 	add	r2,r2,r3
    15c0:	e0bfff8d 	sth	r2,-2(fp)
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
    15c4:	e0bffe0b 	ldhu	r2,-8(fp)
    15c8:	100490fa 	slli	r2,r2,3
    15cc:	10803fcc 	andi	r2,r2,255
    15d0:	1009883a 	mov	r4,r2
    15d4:	000723c0 	call	723c <__floatsisf>
    15d8:	1007883a 	mov	r3,r2
    15dc:	1809883a 	mov	r4,r3
    15e0:	0009af40 	call	9af4 <__extendsfdf2>
    15e4:	1011883a 	mov	r8,r2
    15e8:	1813883a 	mov	r9,r3
    15ec:	01a7efb4 	movhi	r6,40894
    15f0:	319db244 	addi	r6,r6,30409
    15f4:	01cfef74 	movhi	r7,16317
    15f8:	39cbc684 	addi	r7,r7,12058
    15fc:	4009883a 	mov	r4,r8
    1600:	480b883a 	mov	r5,r9
    1604:	00088cc0 	call	88cc <__muldf3>
    1608:	1009883a 	mov	r4,r2
    160c:	180b883a 	mov	r5,r3
    1610:	2005883a 	mov	r2,r4
    1614:	2807883a 	mov	r3,r5
    1618:	1009883a 	mov	r4,r2
    161c:	180b883a 	mov	r5,r3
    1620:	000507c0 	call	507c <__fixunsdfsi>
    1624:	1007883a 	mov	r3,r2
    1628:	e0bfff8b 	ldhu	r2,-2(fp)
    162c:	10c5883a 	add	r2,r2,r3
    1630:	e0bfff8d 	sth	r2,-2(fp)
	return grey;
    1634:	e0bfff8b 	ldhu	r2,-2(fp)
}
    1638:	e037883a 	mov	sp,fp
    163c:	dfc00117 	ldw	ra,4(sp)
    1640:	df000017 	ldw	fp,0(sp)
    1644:	dec00204 	addi	sp,sp,8
    1648:	f800283a 	ret

0000164c <rgb565_to_text>:

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
    164c:	deffdd04 	addi	sp,sp,-140
    1650:	dfc02215 	stw	ra,136(sp)
    1654:	df002115 	stw	fp,132(sp)
    1658:	dc002015 	stw	r16,128(sp)
    165c:	df002104 	addi	fp,sp,132
    1660:	e13fe215 	stw	r4,-120(fp)
    1664:	2805883a 	mov	r2,r5
    1668:	3009883a 	mov	r4,r6
    166c:	3807883a 	mov	r3,r7
    1670:	e0bfe10d 	sth	r2,-124(fp)
    1674:	2005883a 	mov	r2,r4
    1678:	e0bfe00d 	sth	r2,-128(fp)
    167c:	1805883a 	mov	r2,r3
    1680:	e0bfdf0d 	sth	r2,-132(fp)

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    1684:	e0ffe304 	addi	r3,fp,-116
    1688:	00800074 	movhi	r2,1
    168c:	10b9ca04 	addi	r2,r2,-6360
    1690:	01001704 	movi	r4,92
    1694:	200d883a 	mov	r6,r4
    1698:	100b883a 	mov	r5,r2
    169c:	1809883a 	mov	r4,r3
    16a0:	0009c500 	call	9c50 <memcpy>
			47,99,76,92,122,114,115,55,84,105,118,74,116,67,123,51,70,41,73,108,
			40,120,90,102,89,53,83,50,101,97,106,111,49,52,91,110,117,121,69,93,
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
    16a4:	e03ffe0d 	sth	zero,-8(fp)
    16a8:	00005b06 	br	1818 <rgb565_to_text+0x1cc>
		line = (y * res);
    16ac:	e0bffe0b 	ldhu	r2,-8(fp)
    16b0:	e0ffe10b 	ldhu	r3,-124(fp)
    16b4:	180b883a 	mov	r5,r3
    16b8:	1009883a 	mov	r4,r2
    16bc:	0005e880 	call	5e88 <__mulsi3>
    16c0:	e0bffb15 	stw	r2,-20(fp)
		for (x=0; x<res; x+=step) {
    16c4:	e03ffe8d 	sth	zero,-6(fp)
    16c8:	00004906 	br	17f0 <rgb565_to_text+0x1a4>
			sum = 0;
    16cc:	e03ffc15 	stw	zero,-16(fp)
			src_ptr = (x + line) << 1;
    16d0:	e0fffe8b 	ldhu	r3,-6(fp)
    16d4:	e0bffb17 	ldw	r2,-20(fp)
    16d8:	1885883a 	add	r2,r3,r2
    16dc:	1085883a 	add	r2,r2,r2
    16e0:	e0bffa15 	stw	r2,-24(fp)
			for (yy=0; yy<step; yy++)
    16e4:	e03ffd0d 	sth	zero,-12(fp)
    16e8:	00002106 	br	1770 <rgb565_to_text+0x124>
				for (xx=0; xx<step; xx++)
    16ec:	e03ffd8d 	sth	zero,-10(fp)
    16f0:	00001906 	br	1758 <rgb565_to_text+0x10c>
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
    16f4:	e43ffd8b 	ldhu	r16,-10(fp)
    16f8:	e0bffd0b 	ldhu	r2,-12(fp)
    16fc:	e0ffe10b 	ldhu	r3,-124(fp)
    1700:	180b883a 	mov	r5,r3
    1704:	1009883a 	mov	r4,r2
    1708:	0005e880 	call	5e88 <__mulsi3>
    170c:	8085883a 	add	r2,r16,r2
    1710:	1085883a 	add	r2,r2,r2
    1714:	1007883a 	mov	r3,r2
    1718:	e0bffa17 	ldw	r2,-24(fp)
    171c:	1885883a 	add	r2,r3,r2
    1720:	e0ffe217 	ldw	r3,-120(fp)
    1724:	1885883a 	add	r2,r3,r2
    1728:	1080002b 	ldhuio	r2,0(r2)
    172c:	10bfffcc 	andi	r2,r2,65535
    1730:	10bfffcc 	andi	r2,r2,65535
    1734:	1009883a 	mov	r4,r2
    1738:	00014d80 	call	14d8 <rgb_to_grey>
    173c:	10bfffcc 	andi	r2,r2,65535
    1740:	e0fffc17 	ldw	r3,-16(fp)
    1744:	1885883a 	add	r2,r3,r2
    1748:	e0bffc15 	stw	r2,-16(fp)
				for (xx=0; xx<step; xx++)
    174c:	e0bffd8b 	ldhu	r2,-10(fp)
    1750:	10800044 	addi	r2,r2,1
    1754:	e0bffd8d 	sth	r2,-10(fp)
    1758:	e0fffd8b 	ldhu	r3,-10(fp)
    175c:	e0bfe00b 	ldhu	r2,-128(fp)
    1760:	18bfe436 	bltu	r3,r2,16f4 <rgb565_to_text+0xa8>
			for (yy=0; yy<step; yy++)
    1764:	e0bffd0b 	ldhu	r2,-12(fp)
    1768:	10800044 	addi	r2,r2,1
    176c:	e0bffd0d 	sth	r2,-12(fp)
    1770:	e0fffd0b 	ldhu	r3,-12(fp)
    1774:	e0bfe00b 	ldhu	r2,-128(fp)
    1778:	18bfdc36 	bltu	r3,r2,16ec <rgb565_to_text+0xa0>
			sum = (sum / (step * step));
    177c:	e0bfe00b 	ldhu	r2,-128(fp)
    1780:	e0ffe00b 	ldhu	r3,-128(fp)
    1784:	180b883a 	mov	r5,r3
    1788:	1009883a 	mov	r4,r2
    178c:	0005e880 	call	5e88 <__mulsi3>
    1790:	100b883a 	mov	r5,r2
    1794:	e13ffc17 	ldw	r4,-16(fp)
    1798:	0005dc80 	call	5dc8 <__udivsi3>
    179c:	e0bffc15 	stw	r2,-16(fp)
			sum = (sum * 92) / 255;		// scale grey count
    17a0:	01401704 	movi	r5,92
    17a4:	e13ffc17 	ldw	r4,-16(fp)
    17a8:	0005e880 	call	5e88 <__mulsi3>
    17ac:	01403fc4 	movi	r5,255
    17b0:	1009883a 	mov	r4,r2
    17b4:	0005dc80 	call	5dc8 <__udivsi3>
    17b8:	e0bffc15 	stw	r2,-16(fp)
			alt_printf("%c", char_grey[sum]);
    17bc:	e0bffc17 	ldw	r2,-16(fp)
    17c0:	e0ffff04 	addi	r3,fp,-4
    17c4:	1885883a 	add	r2,r3,r2
    17c8:	10bfe403 	ldbu	r2,-112(r2)
    17cc:	10803fcc 	andi	r2,r2,255
    17d0:	100b883a 	mov	r5,r2
    17d4:	01000074 	movhi	r4,1
    17d8:	2139c904 	addi	r4,r4,-6364
    17dc:	0009eb80 	call	9eb8 <alt_printf>
		for (x=0; x<res; x+=step) {
    17e0:	e0fffe8b 	ldhu	r3,-6(fp)
    17e4:	e0bfe00b 	ldhu	r2,-128(fp)
    17e8:	1885883a 	add	r2,r3,r2
    17ec:	e0bffe8d 	sth	r2,-6(fp)
    17f0:	e0fffe8b 	ldhu	r3,-6(fp)
    17f4:	e0bfe10b 	ldhu	r2,-124(fp)
    17f8:	18bfb436 	bltu	r3,r2,16cc <rgb565_to_text+0x80>
		}
		alt_printf("\n");
    17fc:	01000074 	movhi	r4,1
    1800:	2139c804 	addi	r4,r4,-6368
    1804:	0009eb80 	call	9eb8 <alt_printf>
	for (y=0; y<res; y+=step) {
    1808:	e0fffe0b 	ldhu	r3,-8(fp)
    180c:	e0bfe00b 	ldhu	r2,-128(fp)
    1810:	1885883a 	add	r2,r3,r2
    1814:	e0bffe0d 	sth	r2,-8(fp)
    1818:	e0fffe0b 	ldhu	r3,-8(fp)
    181c:	e0bfe10b 	ldhu	r2,-124(fp)
    1820:	18bfa236 	bltu	r3,r2,16ac <rgb565_to_text+0x60>
	}
}
    1824:	0001883a 	nop
    1828:	0001883a 	nop
    182c:	e6ffff04 	addi	sp,fp,-4
    1830:	dfc00217 	ldw	ra,8(sp)
    1834:	df000117 	ldw	fp,4(sp)
    1838:	dc000017 	ldw	r16,0(sp)
    183c:	dec00304 	addi	sp,sp,12
    1840:	f800283a 	ret

00001844 <grey_to_text>:
//////////////////////////////////////////////////////////////////////////////
void grey_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
    1844:	deffdd04 	addi	sp,sp,-140
    1848:	dfc02215 	stw	ra,136(sp)
    184c:	df002115 	stw	fp,132(sp)
    1850:	dc002015 	stw	r16,128(sp)
    1854:	df002104 	addi	fp,sp,132
    1858:	e13fe215 	stw	r4,-120(fp)
    185c:	2805883a 	mov	r2,r5
    1860:	3009883a 	mov	r4,r6
    1864:	3807883a 	mov	r3,r7
    1868:	e0bfe10d 	sth	r2,-124(fp)
    186c:	2005883a 	mov	r2,r4
    1870:	e0bfe00d 	sth	r2,-128(fp)
    1874:	1805883a 	mov	r2,r3
    1878:	e0bfdf0d 	sth	r2,-132(fp)

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    187c:	e0ffe304 	addi	r3,fp,-116
    1880:	00800074 	movhi	r2,1
    1884:	10b9ca04 	addi	r2,r2,-6360
    1888:	01001704 	movi	r4,92
    188c:	200d883a 	mov	r6,r4
    1890:	100b883a 	mov	r5,r2
    1894:	1809883a 	mov	r4,r3
    1898:	0009c500 	call	9c50 <memcpy>
			47,99,76,92,122,114,115,55,84,105,118,74,116,67,123,51,70,41,73,108,
			40,120,90,102,89,53,83,50,101,97,106,111,49,52,91,110,117,121,69,93,
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
    189c:	e03ffe0d 	sth	zero,-8(fp)
    18a0:	00005706 	br	1a00 <grey_to_text+0x1bc>
		line = (y * res);
    18a4:	e0bffe0b 	ldhu	r2,-8(fp)
    18a8:	e0ffe10b 	ldhu	r3,-124(fp)
    18ac:	180b883a 	mov	r5,r3
    18b0:	1009883a 	mov	r4,r2
    18b4:	0005e880 	call	5e88 <__mulsi3>
    18b8:	e0bffb15 	stw	r2,-20(fp)
		for (x=0; x<res; x+=step) {
    18bc:	e03ffe8d 	sth	zero,-6(fp)
    18c0:	00004506 	br	19d8 <grey_to_text+0x194>
			sum = 0;
    18c4:	e03ffc15 	stw	zero,-16(fp)
			src_ptr = (x + line) << 1;
    18c8:	e0fffe8b 	ldhu	r3,-6(fp)
    18cc:	e0bffb17 	ldw	r2,-20(fp)
    18d0:	1885883a 	add	r2,r3,r2
    18d4:	1085883a 	add	r2,r2,r2
    18d8:	e0bffa15 	stw	r2,-24(fp)
			for (yy=0; yy<step; yy++)
    18dc:	e03ffd0d 	sth	zero,-12(fp)
    18e0:	00001d06 	br	1958 <grey_to_text+0x114>
				for (xx=0; xx<step; xx++)
    18e4:	e03ffd8d 	sth	zero,-10(fp)
    18e8:	00001506 	br	1940 <grey_to_text+0xfc>
					sum += IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1));
    18ec:	e43ffd8b 	ldhu	r16,-10(fp)
    18f0:	e0bffd0b 	ldhu	r2,-12(fp)
    18f4:	e0ffe10b 	ldhu	r3,-124(fp)
    18f8:	180b883a 	mov	r5,r3
    18fc:	1009883a 	mov	r4,r2
    1900:	0005e880 	call	5e88 <__mulsi3>
    1904:	8085883a 	add	r2,r16,r2
    1908:	1085883a 	add	r2,r2,r2
    190c:	1007883a 	mov	r3,r2
    1910:	e0bffa17 	ldw	r2,-24(fp)
    1914:	1885883a 	add	r2,r3,r2
    1918:	e0ffe217 	ldw	r3,-120(fp)
    191c:	1885883a 	add	r2,r3,r2
    1920:	1080002b 	ldhuio	r2,0(r2)
    1924:	10bfffcc 	andi	r2,r2,65535
    1928:	e0fffc17 	ldw	r3,-16(fp)
    192c:	1885883a 	add	r2,r3,r2
    1930:	e0bffc15 	stw	r2,-16(fp)
				for (xx=0; xx<step; xx++)
    1934:	e0bffd8b 	ldhu	r2,-10(fp)
    1938:	10800044 	addi	r2,r2,1
    193c:	e0bffd8d 	sth	r2,-10(fp)
    1940:	e0fffd8b 	ldhu	r3,-10(fp)
    1944:	e0bfe00b 	ldhu	r2,-128(fp)
    1948:	18bfe836 	bltu	r3,r2,18ec <grey_to_text+0xa8>
			for (yy=0; yy<step; yy++)
    194c:	e0bffd0b 	ldhu	r2,-12(fp)
    1950:	10800044 	addi	r2,r2,1
    1954:	e0bffd0d 	sth	r2,-12(fp)
    1958:	e0fffd0b 	ldhu	r3,-12(fp)
    195c:	e0bfe00b 	ldhu	r2,-128(fp)
    1960:	18bfe036 	bltu	r3,r2,18e4 <grey_to_text+0xa0>
			sum = (sum / (step * step));
    1964:	e0bfe00b 	ldhu	r2,-128(fp)
    1968:	e0ffe00b 	ldhu	r3,-128(fp)
    196c:	180b883a 	mov	r5,r3
    1970:	1009883a 	mov	r4,r2
    1974:	0005e880 	call	5e88 <__mulsi3>
    1978:	100b883a 	mov	r5,r2
    197c:	e13ffc17 	ldw	r4,-16(fp)
    1980:	0005dc80 	call	5dc8 <__udivsi3>
    1984:	e0bffc15 	stw	r2,-16(fp)
			sum = (sum * 92) / 255;		// scale grey count
    1988:	01401704 	movi	r5,92
    198c:	e13ffc17 	ldw	r4,-16(fp)
    1990:	0005e880 	call	5e88 <__mulsi3>
    1994:	01403fc4 	movi	r5,255
    1998:	1009883a 	mov	r4,r2
    199c:	0005dc80 	call	5dc8 <__udivsi3>
    19a0:	e0bffc15 	stw	r2,-16(fp)
			alt_printf("%c", char_grey[sum]);
    19a4:	e0bffc17 	ldw	r2,-16(fp)
    19a8:	e0ffff04 	addi	r3,fp,-4
    19ac:	1885883a 	add	r2,r3,r2
    19b0:	10bfe403 	ldbu	r2,-112(r2)
    19b4:	10803fcc 	andi	r2,r2,255
    19b8:	100b883a 	mov	r5,r2
    19bc:	01000074 	movhi	r4,1
    19c0:	2139c904 	addi	r4,r4,-6364
    19c4:	0009eb80 	call	9eb8 <alt_printf>
		for (x=0; x<res; x+=step) {
    19c8:	e0fffe8b 	ldhu	r3,-6(fp)
    19cc:	e0bfe00b 	ldhu	r2,-128(fp)
    19d0:	1885883a 	add	r2,r3,r2
    19d4:	e0bffe8d 	sth	r2,-6(fp)
    19d8:	e0fffe8b 	ldhu	r3,-6(fp)
    19dc:	e0bfe10b 	ldhu	r2,-124(fp)
    19e0:	18bfb836 	bltu	r3,r2,18c4 <grey_to_text+0x80>
		}
		alt_printf("\n");
    19e4:	01000074 	movhi	r4,1
    19e8:	2139c804 	addi	r4,r4,-6368
    19ec:	0009eb80 	call	9eb8 <alt_printf>
	for (y=0; y<res; y+=step) {
    19f0:	e0fffe0b 	ldhu	r3,-8(fp)
    19f4:	e0bfe00b 	ldhu	r2,-128(fp)
    19f8:	1885883a 	add	r2,r3,r2
    19fc:	e0bffe0d 	sth	r2,-8(fp)
    1a00:	e0fffe0b 	ldhu	r3,-8(fp)
    1a04:	e0bfe10b 	ldhu	r2,-124(fp)
    1a08:	18bfa636 	bltu	r3,r2,18a4 <grey_to_text+0x60>
	}
}
    1a0c:	0001883a 	nop
    1a10:	0001883a 	nop
    1a14:	e6ffff04 	addi	sp,fp,-4
    1a18:	dfc00217 	ldw	ra,8(sp)
    1a1c:	df000117 	ldw	fp,4(sp)
    1a20:	dc000017 	ldw	r16,0(sp)
    1a24:	dec00304 	addi	sp,sp,12
    1a28:	f800283a 	ret

00001a2c <main>:

//////////////////////////////////////////////////////////////////////////////
int main()
{
    1a2c:	deffff04 	addi	sp,sp,-4
    1a30:	df000015 	stw	fp,0(sp)
    1a34:	d839883a 	mov	fp,sp


	return 0;
    1a38:	0005883a 	mov	r2,zero
}
    1a3c:	e037883a 	mov	sp,fp
    1a40:	df000017 	ldw	fp,0(sp)
    1a44:	dec00104 	addi	sp,sp,4
    1a48:	f800283a 	ret

00001a4c <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
    1a4c:	defffb04 	addi	sp,sp,-20
    1a50:	df000415 	stw	fp,16(sp)
    1a54:	df000404 	addi	fp,sp,16
    1a58:	2005883a 	mov	r2,r4
    1a5c:	e17ffe15 	stw	r5,-8(fp)
    1a60:	e1bffd15 	stw	r6,-12(fp)
    1a64:	e1fffc15 	stw	r7,-16(fp)
    1a68:	e0bfff05 	stb	r2,-4(fp)
  if (idx < maxlen) {
    1a6c:	e0fffd17 	ldw	r3,-12(fp)
    1a70:	e0bffc17 	ldw	r2,-16(fp)
    1a74:	1880052e 	bgeu	r3,r2,1a8c <_out_buffer+0x40>
    ((char*)buffer)[idx] = character;
    1a78:	e0fffe17 	ldw	r3,-8(fp)
    1a7c:	e0bffd17 	ldw	r2,-12(fp)
    1a80:	1885883a 	add	r2,r3,r2
    1a84:	e0ffff03 	ldbu	r3,-4(fp)
    1a88:	10c00005 	stb	r3,0(r2)
  }
}
    1a8c:	0001883a 	nop
    1a90:	e037883a 	mov	sp,fp
    1a94:	df000017 	ldw	fp,0(sp)
    1a98:	dec00104 	addi	sp,sp,4
    1a9c:	f800283a 	ret

00001aa0 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    1aa0:	defffb04 	addi	sp,sp,-20
    1aa4:	df000415 	stw	fp,16(sp)
    1aa8:	df000404 	addi	fp,sp,16
    1aac:	2005883a 	mov	r2,r4
    1ab0:	e17ffe15 	stw	r5,-8(fp)
    1ab4:	e1bffd15 	stw	r6,-12(fp)
    1ab8:	e1fffc15 	stw	r7,-16(fp)
    1abc:	e0bfff05 	stb	r2,-4(fp)
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    1ac0:	0001883a 	nop
    1ac4:	e037883a 	mov	sp,fp
    1ac8:	df000017 	ldw	fp,0(sp)
    1acc:	dec00104 	addi	sp,sp,4
    1ad0:	f800283a 	ret

00001ad4 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
    1ad4:	defffa04 	addi	sp,sp,-24
    1ad8:	dfc00515 	stw	ra,20(sp)
    1adc:	df000415 	stw	fp,16(sp)
    1ae0:	df000404 	addi	fp,sp,16
    1ae4:	2005883a 	mov	r2,r4
    1ae8:	e17ffe15 	stw	r5,-8(fp)
    1aec:	e1bffd15 	stw	r6,-12(fp)
    1af0:	e1fffc15 	stw	r7,-16(fp)
    1af4:	e0bfff05 	stb	r2,-4(fp)
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
    1af8:	e0bfff07 	ldb	r2,-4(fp)
    1afc:	10000326 	beq	r2,zero,1b0c <_out_char+0x38>
    _putchar(character);
    1b00:	e0bfff07 	ldb	r2,-4(fp)
    1b04:	1009883a 	mov	r4,r2
    1b08:	00002400 	call	240 <_putchar>
  }
}
    1b0c:	0001883a 	nop
    1b10:	e037883a 	mov	sp,fp
    1b14:	dfc00117 	ldw	ra,4(sp)
    1b18:	df000017 	ldw	fp,0(sp)
    1b1c:	dec00204 	addi	sp,sp,8
    1b20:	f800283a 	ret

00001b24 <_out_fct>:


// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
    1b24:	defffa04 	addi	sp,sp,-24
    1b28:	dfc00515 	stw	ra,20(sp)
    1b2c:	df000415 	stw	fp,16(sp)
    1b30:	df000404 	addi	fp,sp,16
    1b34:	2005883a 	mov	r2,r4
    1b38:	e17ffe15 	stw	r5,-8(fp)
    1b3c:	e1bffd15 	stw	r6,-12(fp)
    1b40:	e1fffc15 	stw	r7,-16(fp)
    1b44:	e0bfff05 	stb	r2,-4(fp)
  (void)idx; (void)maxlen;
  if (character) {
    1b48:	e0bfff07 	ldb	r2,-4(fp)
    1b4c:	10000726 	beq	r2,zero,1b6c <_out_fct+0x48>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
    1b50:	e0bffe17 	ldw	r2,-8(fp)
    1b54:	10800017 	ldw	r2,0(r2)
    1b58:	e13fff07 	ldb	r4,-4(fp)
    1b5c:	e0fffe17 	ldw	r3,-8(fp)
    1b60:	18c00117 	ldw	r3,4(r3)
    1b64:	180b883a 	mov	r5,r3
    1b68:	103ee83a 	callr	r2
  }
}
    1b6c:	0001883a 	nop
    1b70:	e037883a 	mov	sp,fp
    1b74:	dfc00117 	ldw	ra,4(sp)
    1b78:	df000017 	ldw	fp,0(sp)
    1b7c:	dec00204 	addi	sp,sp,8
    1b80:	f800283a 	ret

00001b84 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
    1b84:	defffc04 	addi	sp,sp,-16
    1b88:	df000315 	stw	fp,12(sp)
    1b8c:	df000304 	addi	fp,sp,12
    1b90:	e13ffe15 	stw	r4,-8(fp)
    1b94:	e17ffd15 	stw	r5,-12(fp)
  const char* s;
  for (s = str; *s && maxsize--; ++s);
    1b98:	e0bffe17 	ldw	r2,-8(fp)
    1b9c:	e0bfff15 	stw	r2,-4(fp)
    1ba0:	00000306 	br	1bb0 <_strnlen_s+0x2c>
    1ba4:	e0bfff17 	ldw	r2,-4(fp)
    1ba8:	10800044 	addi	r2,r2,1
    1bac:	e0bfff15 	stw	r2,-4(fp)
    1bb0:	e0bfff17 	ldw	r2,-4(fp)
    1bb4:	10800003 	ldbu	r2,0(r2)
    1bb8:	10803fcc 	andi	r2,r2,255
    1bbc:	1080201c 	xori	r2,r2,128
    1bc0:	10bfe004 	addi	r2,r2,-128
    1bc4:	10000426 	beq	r2,zero,1bd8 <_strnlen_s+0x54>
    1bc8:	e0bffd17 	ldw	r2,-12(fp)
    1bcc:	10ffffc4 	addi	r3,r2,-1
    1bd0:	e0fffd15 	stw	r3,-12(fp)
    1bd4:	103ff31e 	bne	r2,zero,1ba4 <_strnlen_s+0x20>
  return (unsigned int)(s - str);
    1bd8:	e0ffff17 	ldw	r3,-4(fp)
    1bdc:	e0bffe17 	ldw	r2,-8(fp)
    1be0:	1885c83a 	sub	r2,r3,r2
}
    1be4:	e037883a 	mov	sp,fp
    1be8:	df000017 	ldw	fp,0(sp)
    1bec:	dec00104 	addi	sp,sp,4
    1bf0:	f800283a 	ret

00001bf4 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    1bf4:	defffe04 	addi	sp,sp,-8
    1bf8:	df000115 	stw	fp,4(sp)
    1bfc:	df000104 	addi	fp,sp,4
    1c00:	2005883a 	mov	r2,r4
    1c04:	e0bfff05 	stb	r2,-4(fp)
  return (ch >= '0') && (ch <= '9');
    1c08:	e0bfff07 	ldb	r2,-4(fp)
    1c0c:	10800c10 	cmplti	r2,r2,48
    1c10:	1000051e 	bne	r2,zero,1c28 <_is_digit+0x34>
    1c14:	e0bfff07 	ldb	r2,-4(fp)
    1c18:	10800e88 	cmpgei	r2,r2,58
    1c1c:	1000021e 	bne	r2,zero,1c28 <_is_digit+0x34>
    1c20:	00800044 	movi	r2,1
    1c24:	00000106 	br	1c2c <_is_digit+0x38>
    1c28:	0005883a 	mov	r2,zero
    1c2c:	1080004c 	andi	r2,r2,1
}
    1c30:	e037883a 	mov	sp,fp
    1c34:	df000017 	ldw	fp,0(sp)
    1c38:	dec00104 	addi	sp,sp,4
    1c3c:	f800283a 	ret

00001c40 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    1c40:	defffc04 	addi	sp,sp,-16
    1c44:	dfc00315 	stw	ra,12(sp)
    1c48:	df000215 	stw	fp,8(sp)
    1c4c:	df000204 	addi	fp,sp,8
    1c50:	e13ffe15 	stw	r4,-8(fp)
  unsigned int i = 0U;
    1c54:	e03fff15 	stw	zero,-4(fp)
  while (_is_digit(**str)) {
    1c58:	00001206 	br	1ca4 <_atoi+0x64>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1c5c:	e0ffff17 	ldw	r3,-4(fp)
    1c60:	1805883a 	mov	r2,r3
    1c64:	100490ba 	slli	r2,r2,2
    1c68:	10c5883a 	add	r2,r2,r3
    1c6c:	1085883a 	add	r2,r2,r2
    1c70:	100b883a 	mov	r5,r2
    1c74:	e0bffe17 	ldw	r2,-8(fp)
    1c78:	10800017 	ldw	r2,0(r2)
    1c7c:	11000044 	addi	r4,r2,1
    1c80:	e0fffe17 	ldw	r3,-8(fp)
    1c84:	19000015 	stw	r4,0(r3)
    1c88:	10800003 	ldbu	r2,0(r2)
    1c8c:	10803fcc 	andi	r2,r2,255
    1c90:	1080201c 	xori	r2,r2,128
    1c94:	10bfe004 	addi	r2,r2,-128
    1c98:	2885883a 	add	r2,r5,r2
    1c9c:	10bff404 	addi	r2,r2,-48
    1ca0:	e0bfff15 	stw	r2,-4(fp)
  while (_is_digit(**str)) {
    1ca4:	e0bffe17 	ldw	r2,-8(fp)
    1ca8:	10800017 	ldw	r2,0(r2)
    1cac:	10800003 	ldbu	r2,0(r2)
    1cb0:	10803fcc 	andi	r2,r2,255
    1cb4:	1080201c 	xori	r2,r2,128
    1cb8:	10bfe004 	addi	r2,r2,-128
    1cbc:	1009883a 	mov	r4,r2
    1cc0:	0001bf40 	call	1bf4 <_is_digit>
    1cc4:	10803fcc 	andi	r2,r2,255
    1cc8:	103fe41e 	bne	r2,zero,1c5c <_atoi+0x1c>
  }
  return i;
    1ccc:	e0bfff17 	ldw	r2,-4(fp)
}
    1cd0:	e037883a 	mov	sp,fp
    1cd4:	dfc00117 	ldw	ra,4(sp)
    1cd8:	df000017 	ldw	fp,0(sp)
    1cdc:	dec00204 	addi	sp,sp,8
    1ce0:	f800283a 	ret

00001ce4 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
    1ce4:	defff804 	addi	sp,sp,-32
    1ce8:	dfc00715 	stw	ra,28(sp)
    1cec:	df000615 	stw	fp,24(sp)
    1cf0:	df000604 	addi	fp,sp,24
    1cf4:	e13ffd15 	stw	r4,-12(fp)
    1cf8:	e17ffc15 	stw	r5,-16(fp)
    1cfc:	e1bffb15 	stw	r6,-20(fp)
    1d00:	e1fffa15 	stw	r7,-24(fp)
  const size_t start_idx = idx;
    1d04:	e0bffb17 	ldw	r2,-20(fp)
    1d08:	e0bffe15 	stw	r2,-8(fp)

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    1d0c:	e0800517 	ldw	r2,20(fp)
    1d10:	1080008c 	andi	r2,r2,2
    1d14:	1000281e 	bne	r2,zero,1db8 <_out_rev+0xd4>
    1d18:	e0800517 	ldw	r2,20(fp)
    1d1c:	1080004c 	andi	r2,r2,1
    1d20:	1000251e 	bne	r2,zero,1db8 <_out_rev+0xd4>
    for (size_t i = len; i < width; i++) {
    1d24:	e0800317 	ldw	r2,12(fp)
    1d28:	e0bfff15 	stw	r2,-4(fp)
    1d2c:	00000c06 	br	1d60 <_out_rev+0x7c>
      out(' ', buffer, idx++, maxlen);
    1d30:	e0bffb17 	ldw	r2,-20(fp)
    1d34:	10c00044 	addi	r3,r2,1
    1d38:	e0fffb15 	stw	r3,-20(fp)
    1d3c:	e0fffd17 	ldw	r3,-12(fp)
    1d40:	e1fffa17 	ldw	r7,-24(fp)
    1d44:	100d883a 	mov	r6,r2
    1d48:	e17ffc17 	ldw	r5,-16(fp)
    1d4c:	01000804 	movi	r4,32
    1d50:	183ee83a 	callr	r3
    for (size_t i = len; i < width; i++) {
    1d54:	e0bfff17 	ldw	r2,-4(fp)
    1d58:	10800044 	addi	r2,r2,1
    1d5c:	e0bfff15 	stw	r2,-4(fp)
    1d60:	e0ffff17 	ldw	r3,-4(fp)
    1d64:	e0800417 	ldw	r2,16(fp)
    1d68:	18bff136 	bltu	r3,r2,1d30 <_out_rev+0x4c>
    }
  }

  // reverse string
  while (len) {
    1d6c:	00001206 	br	1db8 <_out_rev+0xd4>
    out(buf[--len], buffer, idx++, maxlen);
    1d70:	e0800317 	ldw	r2,12(fp)
    1d74:	10bfffc4 	addi	r2,r2,-1
    1d78:	e0800315 	stw	r2,12(fp)
    1d7c:	e0c00217 	ldw	r3,8(fp)
    1d80:	e0800317 	ldw	r2,12(fp)
    1d84:	1885883a 	add	r2,r3,r2
    1d88:	10800003 	ldbu	r2,0(r2)
    1d8c:	11003fcc 	andi	r4,r2,255
    1d90:	2100201c 	xori	r4,r4,128
    1d94:	213fe004 	addi	r4,r4,-128
    1d98:	e0bffb17 	ldw	r2,-20(fp)
    1d9c:	10c00044 	addi	r3,r2,1
    1da0:	e0fffb15 	stw	r3,-20(fp)
    1da4:	e0fffd17 	ldw	r3,-12(fp)
    1da8:	e1fffa17 	ldw	r7,-24(fp)
    1dac:	100d883a 	mov	r6,r2
    1db0:	e17ffc17 	ldw	r5,-16(fp)
    1db4:	183ee83a 	callr	r3
  while (len) {
    1db8:	e0800317 	ldw	r2,12(fp)
    1dbc:	103fec1e 	bne	r2,zero,1d70 <_out_rev+0x8c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    1dc0:	e0800517 	ldw	r2,20(fp)
    1dc4:	1080008c 	andi	r2,r2,2
    1dc8:	10000f26 	beq	r2,zero,1e08 <_out_rev+0x124>
    while (idx - start_idx < width) {
    1dcc:	00000906 	br	1df4 <_out_rev+0x110>
      out(' ', buffer, idx++, maxlen);
    1dd0:	e0bffb17 	ldw	r2,-20(fp)
    1dd4:	10c00044 	addi	r3,r2,1
    1dd8:	e0fffb15 	stw	r3,-20(fp)
    1ddc:	e0fffd17 	ldw	r3,-12(fp)
    1de0:	e1fffa17 	ldw	r7,-24(fp)
    1de4:	100d883a 	mov	r6,r2
    1de8:	e17ffc17 	ldw	r5,-16(fp)
    1dec:	01000804 	movi	r4,32
    1df0:	183ee83a 	callr	r3
    while (idx - start_idx < width) {
    1df4:	e0fffb17 	ldw	r3,-20(fp)
    1df8:	e0bffe17 	ldw	r2,-8(fp)
    1dfc:	1887c83a 	sub	r3,r3,r2
    1e00:	e0800417 	ldw	r2,16(fp)
    1e04:	18bff236 	bltu	r3,r2,1dd0 <_out_rev+0xec>
    }
  }

  return idx;
    1e08:	e0bffb17 	ldw	r2,-20(fp)
}
    1e0c:	e037883a 	mov	sp,fp
    1e10:	dfc00117 	ldw	ra,4(sp)
    1e14:	df000017 	ldw	fp,0(sp)
    1e18:	dec00204 	addi	sp,sp,8
    1e1c:	f800283a 	ret

00001e20 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1e20:	defff504 	addi	sp,sp,-44
    1e24:	dfc00a15 	stw	ra,40(sp)
    1e28:	df000915 	stw	fp,36(sp)
    1e2c:	df000904 	addi	fp,sp,36
    1e30:	e13fff15 	stw	r4,-4(fp)
    1e34:	e17ffe15 	stw	r5,-8(fp)
    1e38:	e1bffd15 	stw	r6,-12(fp)
    1e3c:	e1fffc15 	stw	r7,-16(fp)
    1e40:	e0800417 	ldw	r2,16(fp)
    1e44:	e0bffb05 	stb	r2,-20(fp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    1e48:	e0800817 	ldw	r2,32(fp)
    1e4c:	1080008c 	andi	r2,r2,2
    1e50:	10002c1e 	bne	r2,zero,1f04 <_ntoa_format+0xe4>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    1e54:	e0800717 	ldw	r2,28(fp)
    1e58:	10001326 	beq	r2,zero,1ea8 <_ntoa_format+0x88>
    1e5c:	e0800817 	ldw	r2,32(fp)
    1e60:	1080004c 	andi	r2,r2,1
    1e64:	10001026 	beq	r2,zero,1ea8 <_ntoa_format+0x88>
    1e68:	e0bffb03 	ldbu	r2,-20(fp)
    1e6c:	1000031e 	bne	r2,zero,1e7c <_ntoa_format+0x5c>
    1e70:	e0800817 	ldw	r2,32(fp)
    1e74:	1080030c 	andi	r2,r2,12
    1e78:	10000b26 	beq	r2,zero,1ea8 <_ntoa_format+0x88>
      width--;
    1e7c:	e0800717 	ldw	r2,28(fp)
    1e80:	10bfffc4 	addi	r2,r2,-1
    1e84:	e0800715 	stw	r2,28(fp)
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1e88:	00000706 	br	1ea8 <_ntoa_format+0x88>
      buf[len++] = '0';
    1e8c:	e0800317 	ldw	r2,12(fp)
    1e90:	10c00044 	addi	r3,r2,1
    1e94:	e0c00315 	stw	r3,12(fp)
    1e98:	e0c00217 	ldw	r3,8(fp)
    1e9c:	1885883a 	add	r2,r3,r2
    1ea0:	00c00c04 	movi	r3,48
    1ea4:	10c00005 	stb	r3,0(r2)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1ea8:	e0c00317 	ldw	r3,12(fp)
    1eac:	e0800617 	ldw	r2,24(fp)
    1eb0:	18800b2e 	bgeu	r3,r2,1ee0 <_ntoa_format+0xc0>
    1eb4:	e0800317 	ldw	r2,12(fp)
    1eb8:	10800830 	cmpltui	r2,r2,32
    1ebc:	103ff31e 	bne	r2,zero,1e8c <_ntoa_format+0x6c>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1ec0:	00000706 	br	1ee0 <_ntoa_format+0xc0>
      buf[len++] = '0';
    1ec4:	e0800317 	ldw	r2,12(fp)
    1ec8:	10c00044 	addi	r3,r2,1
    1ecc:	e0c00315 	stw	r3,12(fp)
    1ed0:	e0c00217 	ldw	r3,8(fp)
    1ed4:	1885883a 	add	r2,r3,r2
    1ed8:	00c00c04 	movi	r3,48
    1edc:	10c00005 	stb	r3,0(r2)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1ee0:	e0800817 	ldw	r2,32(fp)
    1ee4:	1080004c 	andi	r2,r2,1
    1ee8:	10000626 	beq	r2,zero,1f04 <_ntoa_format+0xe4>
    1eec:	e0c00317 	ldw	r3,12(fp)
    1ef0:	e0800717 	ldw	r2,28(fp)
    1ef4:	1880032e 	bgeu	r3,r2,1f04 <_ntoa_format+0xe4>
    1ef8:	e0800317 	ldw	r2,12(fp)
    1efc:	10800830 	cmpltui	r2,r2,32
    1f00:	103ff01e 	bne	r2,zero,1ec4 <_ntoa_format+0xa4>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    1f04:	e0800817 	ldw	r2,32(fp)
    1f08:	1080040c 	andi	r2,r2,16
    1f0c:	10004f26 	beq	r2,zero,204c <_ntoa_format+0x22c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    1f10:	e0800817 	ldw	r2,32(fp)
    1f14:	1081000c 	andi	r2,r2,1024
    1f18:	1000131e 	bne	r2,zero,1f68 <_ntoa_format+0x148>
    1f1c:	e0800317 	ldw	r2,12(fp)
    1f20:	10001126 	beq	r2,zero,1f68 <_ntoa_format+0x148>
    1f24:	e0c00317 	ldw	r3,12(fp)
    1f28:	e0800617 	ldw	r2,24(fp)
    1f2c:	18800326 	beq	r3,r2,1f3c <_ntoa_format+0x11c>
    1f30:	e0c00317 	ldw	r3,12(fp)
    1f34:	e0800717 	ldw	r2,28(fp)
    1f38:	18800b1e 	bne	r3,r2,1f68 <_ntoa_format+0x148>
      len--;
    1f3c:	e0800317 	ldw	r2,12(fp)
    1f40:	10bfffc4 	addi	r2,r2,-1
    1f44:	e0800315 	stw	r2,12(fp)
      if (len && (base == 16U)) {
    1f48:	e0800317 	ldw	r2,12(fp)
    1f4c:	10000626 	beq	r2,zero,1f68 <_ntoa_format+0x148>
    1f50:	e0800517 	ldw	r2,20(fp)
    1f54:	10800418 	cmpnei	r2,r2,16
    1f58:	1000031e 	bne	r2,zero,1f68 <_ntoa_format+0x148>
        len--;
    1f5c:	e0800317 	ldw	r2,12(fp)
    1f60:	10bfffc4 	addi	r2,r2,-1
    1f64:	e0800315 	stw	r2,12(fp)
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1f68:	e0800517 	ldw	r2,20(fp)
    1f6c:	10800418 	cmpnei	r2,r2,16
    1f70:	10000e1e 	bne	r2,zero,1fac <_ntoa_format+0x18c>
    1f74:	e0800817 	ldw	r2,32(fp)
    1f78:	1080080c 	andi	r2,r2,32
    1f7c:	10000b1e 	bne	r2,zero,1fac <_ntoa_format+0x18c>
    1f80:	e0800317 	ldw	r2,12(fp)
    1f84:	10800828 	cmpgeui	r2,r2,32
    1f88:	1000081e 	bne	r2,zero,1fac <_ntoa_format+0x18c>
      buf[len++] = 'x';
    1f8c:	e0800317 	ldw	r2,12(fp)
    1f90:	10c00044 	addi	r3,r2,1
    1f94:	e0c00315 	stw	r3,12(fp)
    1f98:	e0c00217 	ldw	r3,8(fp)
    1f9c:	1885883a 	add	r2,r3,r2
    1fa0:	00c01e04 	movi	r3,120
    1fa4:	10c00005 	stb	r3,0(r2)
    1fa8:	00001e06 	br	2024 <_ntoa_format+0x204>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1fac:	e0800517 	ldw	r2,20(fp)
    1fb0:	10800418 	cmpnei	r2,r2,16
    1fb4:	10000e1e 	bne	r2,zero,1ff0 <_ntoa_format+0x1d0>
    1fb8:	e0800817 	ldw	r2,32(fp)
    1fbc:	1080080c 	andi	r2,r2,32
    1fc0:	10000b26 	beq	r2,zero,1ff0 <_ntoa_format+0x1d0>
    1fc4:	e0800317 	ldw	r2,12(fp)
    1fc8:	10800828 	cmpgeui	r2,r2,32
    1fcc:	1000081e 	bne	r2,zero,1ff0 <_ntoa_format+0x1d0>
      buf[len++] = 'X';
    1fd0:	e0800317 	ldw	r2,12(fp)
    1fd4:	10c00044 	addi	r3,r2,1
    1fd8:	e0c00315 	stw	r3,12(fp)
    1fdc:	e0c00217 	ldw	r3,8(fp)
    1fe0:	1885883a 	add	r2,r3,r2
    1fe4:	00c01604 	movi	r3,88
    1fe8:	10c00005 	stb	r3,0(r2)
    1fec:	00000d06 	br	2024 <_ntoa_format+0x204>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1ff0:	e0800517 	ldw	r2,20(fp)
    1ff4:	10800098 	cmpnei	r2,r2,2
    1ff8:	10000a1e 	bne	r2,zero,2024 <_ntoa_format+0x204>
    1ffc:	e0800317 	ldw	r2,12(fp)
    2000:	10800828 	cmpgeui	r2,r2,32
    2004:	1000071e 	bne	r2,zero,2024 <_ntoa_format+0x204>
      buf[len++] = 'b';
    2008:	e0800317 	ldw	r2,12(fp)
    200c:	10c00044 	addi	r3,r2,1
    2010:	e0c00315 	stw	r3,12(fp)
    2014:	e0c00217 	ldw	r3,8(fp)
    2018:	1885883a 	add	r2,r3,r2
    201c:	00c01884 	movi	r3,98
    2020:	10c00005 	stb	r3,0(r2)
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2024:	e0800317 	ldw	r2,12(fp)
    2028:	10800828 	cmpgeui	r2,r2,32
    202c:	1000071e 	bne	r2,zero,204c <_ntoa_format+0x22c>
      buf[len++] = '0';
    2030:	e0800317 	ldw	r2,12(fp)
    2034:	10c00044 	addi	r3,r2,1
    2038:	e0c00315 	stw	r3,12(fp)
    203c:	e0c00217 	ldw	r3,8(fp)
    2040:	1885883a 	add	r2,r3,r2
    2044:	00c00c04 	movi	r3,48
    2048:	10c00005 	stb	r3,0(r2)
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    204c:	e0800317 	ldw	r2,12(fp)
    2050:	10800828 	cmpgeui	r2,r2,32
    2054:	10001f1e 	bne	r2,zero,20d4 <_ntoa_format+0x2b4>
    if (negative) {
    2058:	e0bffb03 	ldbu	r2,-20(fp)
    205c:	10000826 	beq	r2,zero,2080 <_ntoa_format+0x260>
      buf[len++] = '-';
    2060:	e0800317 	ldw	r2,12(fp)
    2064:	10c00044 	addi	r3,r2,1
    2068:	e0c00315 	stw	r3,12(fp)
    206c:	e0c00217 	ldw	r3,8(fp)
    2070:	1885883a 	add	r2,r3,r2
    2074:	00c00b44 	movi	r3,45
    2078:	10c00005 	stb	r3,0(r2)
    207c:	00001506 	br	20d4 <_ntoa_format+0x2b4>
    }
    else if (flags & FLAGS_PLUS) {
    2080:	e0800817 	ldw	r2,32(fp)
    2084:	1080010c 	andi	r2,r2,4
    2088:	10000826 	beq	r2,zero,20ac <_ntoa_format+0x28c>
      buf[len++] = '+';  // ignore the space if the '+' exists
    208c:	e0800317 	ldw	r2,12(fp)
    2090:	10c00044 	addi	r3,r2,1
    2094:	e0c00315 	stw	r3,12(fp)
    2098:	e0c00217 	ldw	r3,8(fp)
    209c:	1885883a 	add	r2,r3,r2
    20a0:	00c00ac4 	movi	r3,43
    20a4:	10c00005 	stb	r3,0(r2)
    20a8:	00000a06 	br	20d4 <_ntoa_format+0x2b4>
    }
    else if (flags & FLAGS_SPACE) {
    20ac:	e0800817 	ldw	r2,32(fp)
    20b0:	1080020c 	andi	r2,r2,8
    20b4:	10000726 	beq	r2,zero,20d4 <_ntoa_format+0x2b4>
      buf[len++] = ' ';
    20b8:	e0800317 	ldw	r2,12(fp)
    20bc:	10c00044 	addi	r3,r2,1
    20c0:	e0c00315 	stw	r3,12(fp)
    20c4:	e0c00217 	ldw	r3,8(fp)
    20c8:	1885883a 	add	r2,r3,r2
    20cc:	00c00804 	movi	r3,32
    20d0:	10c00005 	stb	r3,0(r2)
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    20d4:	e0800817 	ldw	r2,32(fp)
    20d8:	d8800315 	stw	r2,12(sp)
    20dc:	e0800717 	ldw	r2,28(fp)
    20e0:	d8800215 	stw	r2,8(sp)
    20e4:	e0800317 	ldw	r2,12(fp)
    20e8:	d8800115 	stw	r2,4(sp)
    20ec:	e0800217 	ldw	r2,8(fp)
    20f0:	d8800015 	stw	r2,0(sp)
    20f4:	e1fffc17 	ldw	r7,-16(fp)
    20f8:	e1bffd17 	ldw	r6,-12(fp)
    20fc:	e17ffe17 	ldw	r5,-8(fp)
    2100:	e13fff17 	ldw	r4,-4(fp)
    2104:	0001ce40 	call	1ce4 <_out_rev>
}
    2108:	e037883a 	mov	sp,fp
    210c:	dfc00117 	ldw	ra,4(sp)
    2110:	df000017 	ldw	fp,0(sp)
    2114:	dec00204 	addi	sp,sp,8
    2118:	f800283a 	ret

0000211c <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    211c:	deffe804 	addi	sp,sp,-96
    2120:	dfc01715 	stw	ra,92(sp)
    2124:	df001615 	stw	fp,88(sp)
    2128:	df001604 	addi	fp,sp,88
    212c:	e13ff515 	stw	r4,-44(fp)
    2130:	e17ff415 	stw	r5,-48(fp)
    2134:	e1bff315 	stw	r6,-52(fp)
    2138:	e1fff215 	stw	r7,-56(fp)
    213c:	e0800317 	ldw	r2,12(fp)
    2140:	e0bff105 	stb	r2,-60(fp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    2144:	e03fff15 	stw	zero,-4(fp)

  // no hash for 0 values
  if (!value) {
    2148:	e0800217 	ldw	r2,8(fp)
    214c:	1000041e 	bne	r2,zero,2160 <_ntoa_long+0x44>
    flags &= ~FLAGS_HASH;
    2150:	e0c00717 	ldw	r3,28(fp)
    2154:	00bffbc4 	movi	r2,-17
    2158:	1884703a 	and	r2,r3,r2
    215c:	e0800715 	stw	r2,28(fp)
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    2160:	e0800717 	ldw	r2,28(fp)
    2164:	1081000c 	andi	r2,r2,1024
    2168:	10000226 	beq	r2,zero,2174 <_ntoa_long+0x58>
    216c:	e0800217 	ldw	r2,8(fp)
    2170:	10002426 	beq	r2,zero,2204 <_ntoa_long+0xe8>
    do {
      const char digit = (char)(value % base);
    2174:	e0800217 	ldw	r2,8(fp)
    2178:	e1400417 	ldw	r5,16(fp)
    217c:	1009883a 	mov	r4,r2
    2180:	0005e2c0 	call	5e2c <__umodsi3>
    2184:	e0bffec5 	stb	r2,-5(fp)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2188:	e0bffec7 	ldb	r2,-5(fp)
    218c:	10800288 	cmpgei	r2,r2,10
    2190:	1000041e 	bne	r2,zero,21a4 <_ntoa_long+0x88>
    2194:	e0bffec3 	ldbu	r2,-5(fp)
    2198:	10800c04 	addi	r2,r2,48
    219c:	1009883a 	mov	r4,r2
    21a0:	00000a06 	br	21cc <_ntoa_long+0xb0>
    21a4:	e0800717 	ldw	r2,28(fp)
    21a8:	1080080c 	andi	r2,r2,32
    21ac:	10000226 	beq	r2,zero,21b8 <_ntoa_long+0x9c>
    21b0:	00801044 	movi	r2,65
    21b4:	00000106 	br	21bc <_ntoa_long+0xa0>
    21b8:	00801844 	movi	r2,97
    21bc:	e0fffec3 	ldbu	r3,-5(fp)
    21c0:	10c5883a 	add	r2,r2,r3
    21c4:	10bffd84 	addi	r2,r2,-10
    21c8:	1009883a 	mov	r4,r2
    21cc:	e0bfff17 	ldw	r2,-4(fp)
    21d0:	10c00044 	addi	r3,r2,1
    21d4:	e0ffff15 	stw	r3,-4(fp)
    21d8:	e085883a 	add	r2,fp,r2
    21dc:	113ff6c5 	stb	r4,-37(r2)
      value /= base;
    21e0:	e1400417 	ldw	r5,16(fp)
    21e4:	e1000217 	ldw	r4,8(fp)
    21e8:	0005dc80 	call	5dc8 <__udivsi3>
    21ec:	e0800215 	stw	r2,8(fp)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    21f0:	e0800217 	ldw	r2,8(fp)
    21f4:	10000326 	beq	r2,zero,2204 <_ntoa_long+0xe8>
    21f8:	e0bfff17 	ldw	r2,-4(fp)
    21fc:	10800830 	cmpltui	r2,r2,32
    2200:	103fdc1e 	bne	r2,zero,2174 <_ntoa_long+0x58>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    2204:	e0bff103 	ldbu	r2,-60(fp)
    2208:	e0c00717 	ldw	r3,28(fp)
    220c:	d8c00615 	stw	r3,24(sp)
    2210:	e0c00617 	ldw	r3,24(fp)
    2214:	d8c00515 	stw	r3,20(sp)
    2218:	e0c00517 	ldw	r3,20(fp)
    221c:	d8c00415 	stw	r3,16(sp)
    2220:	e0c00417 	ldw	r3,16(fp)
    2224:	d8c00315 	stw	r3,12(sp)
    2228:	d8800215 	stw	r2,8(sp)
    222c:	e0bfff17 	ldw	r2,-4(fp)
    2230:	d8800115 	stw	r2,4(sp)
    2234:	e0bff6c4 	addi	r2,fp,-37
    2238:	d8800015 	stw	r2,0(sp)
    223c:	e1fff217 	ldw	r7,-56(fp)
    2240:	e1bff317 	ldw	r6,-52(fp)
    2244:	e17ff417 	ldw	r5,-48(fp)
    2248:	e13ff517 	ldw	r4,-44(fp)
    224c:	0001e200 	call	1e20 <_ntoa_format>
}
    2250:	e037883a 	mov	sp,fp
    2254:	dfc00117 	ldw	ra,4(sp)
    2258:	df000017 	ldw	fp,0(sp)
    225c:	dec00204 	addi	sp,sp,8
    2260:	f800283a 	ret

00002264 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    2264:	deffe804 	addi	sp,sp,-96
    2268:	dfc01715 	stw	ra,92(sp)
    226c:	df001615 	stw	fp,88(sp)
    2270:	df001604 	addi	fp,sp,88
    2274:	e13ff515 	stw	r4,-44(fp)
    2278:	e17ff415 	stw	r5,-48(fp)
    227c:	e1bff315 	stw	r6,-52(fp)
    2280:	e1fff215 	stw	r7,-56(fp)
    2284:	e0800417 	ldw	r2,16(fp)
    2288:	e0bff105 	stb	r2,-60(fp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    228c:	e03fff15 	stw	zero,-4(fp)

  // no hash for 0 values
  if (!value) {
    2290:	e0800217 	ldw	r2,8(fp)
    2294:	e0c00317 	ldw	r3,12(fp)
    2298:	10c4b03a 	or	r2,r2,r3
    229c:	1000041e 	bne	r2,zero,22b0 <_ntoa_long_long+0x4c>
    flags &= ~FLAGS_HASH;
    22a0:	e0c00917 	ldw	r3,36(fp)
    22a4:	00bffbc4 	movi	r2,-17
    22a8:	1884703a 	and	r2,r3,r2
    22ac:	e0800915 	stw	r2,36(fp)
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    22b0:	e0800917 	ldw	r2,36(fp)
    22b4:	1081000c 	andi	r2,r2,1024
    22b8:	10000426 	beq	r2,zero,22cc <_ntoa_long_long+0x68>
    22bc:	e0800217 	ldw	r2,8(fp)
    22c0:	e0c00317 	ldw	r3,12(fp)
    22c4:	10c4b03a 	or	r2,r2,r3
    22c8:	10003226 	beq	r2,zero,2394 <_ntoa_long_long+0x130>
    do {
      const char digit = (char)(value % base);
    22cc:	e0800217 	ldw	r2,8(fp)
    22d0:	e0c00317 	ldw	r3,12(fp)
    22d4:	e1800517 	ldw	r6,20(fp)
    22d8:	e1c00617 	ldw	r7,24(fp)
    22dc:	1009883a 	mov	r4,r2
    22e0:	180b883a 	mov	r5,r3
    22e4:	00057100 	call	5710 <__umoddi3>
    22e8:	1009883a 	mov	r4,r2
    22ec:	180b883a 	mov	r5,r3
    22f0:	2005883a 	mov	r2,r4
    22f4:	2807883a 	mov	r3,r5
    22f8:	e0bffec5 	stb	r2,-5(fp)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    22fc:	e0bffec7 	ldb	r2,-5(fp)
    2300:	10800288 	cmpgei	r2,r2,10
    2304:	1000041e 	bne	r2,zero,2318 <_ntoa_long_long+0xb4>
    2308:	e0bffec3 	ldbu	r2,-5(fp)
    230c:	10800c04 	addi	r2,r2,48
    2310:	1009883a 	mov	r4,r2
    2314:	00000a06 	br	2340 <_ntoa_long_long+0xdc>
    2318:	e0800917 	ldw	r2,36(fp)
    231c:	1080080c 	andi	r2,r2,32
    2320:	10000226 	beq	r2,zero,232c <_ntoa_long_long+0xc8>
    2324:	00801044 	movi	r2,65
    2328:	00000106 	br	2330 <_ntoa_long_long+0xcc>
    232c:	00801844 	movi	r2,97
    2330:	e0fffec3 	ldbu	r3,-5(fp)
    2334:	10c5883a 	add	r2,r2,r3
    2338:	10bffd84 	addi	r2,r2,-10
    233c:	1009883a 	mov	r4,r2
    2340:	e0bfff17 	ldw	r2,-4(fp)
    2344:	10c00044 	addi	r3,r2,1
    2348:	e0ffff15 	stw	r3,-4(fp)
    234c:	e085883a 	add	r2,fp,r2
    2350:	113ff6c5 	stb	r4,-37(r2)
      value /= base;
    2354:	e1800517 	ldw	r6,20(fp)
    2358:	e1c00617 	ldw	r7,24(fp)
    235c:	e1000217 	ldw	r4,8(fp)
    2360:	e1400317 	ldw	r5,12(fp)
    2364:	00050f00 	call	50f0 <__udivdi3>
    2368:	1009883a 	mov	r4,r2
    236c:	180b883a 	mov	r5,r3
    2370:	e1000215 	stw	r4,8(fp)
    2374:	e1400315 	stw	r5,12(fp)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    2378:	e0800217 	ldw	r2,8(fp)
    237c:	e0c00317 	ldw	r3,12(fp)
    2380:	10c4b03a 	or	r2,r2,r3
    2384:	10000326 	beq	r2,zero,2394 <_ntoa_long_long+0x130>
    2388:	e0bfff17 	ldw	r2,-4(fp)
    238c:	10800830 	cmpltui	r2,r2,32
    2390:	103fce1e 	bne	r2,zero,22cc <_ntoa_long_long+0x68>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    2394:	e0bff103 	ldbu	r2,-60(fp)
    2398:	e0c00517 	ldw	r3,20(fp)
    239c:	e1000917 	ldw	r4,36(fp)
    23a0:	d9000615 	stw	r4,24(sp)
    23a4:	e1000817 	ldw	r4,32(fp)
    23a8:	d9000515 	stw	r4,20(sp)
    23ac:	e1000717 	ldw	r4,28(fp)
    23b0:	d9000415 	stw	r4,16(sp)
    23b4:	d8c00315 	stw	r3,12(sp)
    23b8:	d8800215 	stw	r2,8(sp)
    23bc:	e0bfff17 	ldw	r2,-4(fp)
    23c0:	d8800115 	stw	r2,4(sp)
    23c4:	e0bff6c4 	addi	r2,fp,-37
    23c8:	d8800015 	stw	r2,0(sp)
    23cc:	e1fff217 	ldw	r7,-56(fp)
    23d0:	e1bff317 	ldw	r6,-52(fp)
    23d4:	e17ff417 	ldw	r5,-48(fp)
    23d8:	e13ff517 	ldw	r4,-44(fp)
    23dc:	0001e200 	call	1e20 <_ntoa_format>
}
    23e0:	e037883a 	mov	sp,fp
    23e4:	dfc00117 	ldw	ra,4(sp)
    23e8:	df000017 	ldw	fp,0(sp)
    23ec:	dec00204 	addi	sp,sp,8
    23f0:	f800283a 	ret

000023f4 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    23f4:	deffe304 	addi	sp,sp,-116
    23f8:	dfc01c15 	stw	ra,112(sp)
    23fc:	df001b15 	stw	fp,108(sp)
    2400:	dc001a15 	stw	r16,104(sp)
    2404:	df001b04 	addi	fp,sp,108
    2408:	e13fed15 	stw	r4,-76(fp)
    240c:	e17fec15 	stw	r5,-80(fp)
    2410:	e1bfeb15 	stw	r6,-84(fp)
    2414:	e1ffea15 	stw	r7,-88(fp)
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    2418:	e03ffe15 	stw	zero,-8(fp)
  double diff = 0.0;
    241c:	e03ff815 	stw	zero,-32(fp)
    2420:	e03ff915 	stw	zero,-28(fp)

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
    2424:	e1800217 	ldw	r6,8(fp)
    2428:	e1c00317 	ldw	r7,12(fp)
    242c:	e1000217 	ldw	r4,8(fp)
    2430:	e1400317 	ldw	r5,12(fp)
    2434:	000867c0 	call	867c <__eqdf2>
    2438:	10000f26 	beq	r2,zero,2478 <_ftoa+0x84>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    243c:	e0800617 	ldw	r2,24(fp)
    2440:	d8800315 	stw	r2,12(sp)
    2444:	e0800517 	ldw	r2,20(fp)
    2448:	d8800215 	stw	r2,8(sp)
    244c:	008000c4 	movi	r2,3
    2450:	d8800115 	stw	r2,4(sp)
    2454:	00800074 	movhi	r2,1
    2458:	10b9e104 	addi	r2,r2,-6268
    245c:	d8800015 	stw	r2,0(sp)
    2460:	e1ffea17 	ldw	r7,-88(fp)
    2464:	e1bfeb17 	ldw	r6,-84(fp)
    2468:	e17fec17 	ldw	r5,-80(fp)
    246c:	e13fed17 	ldw	r4,-76(fp)
    2470:	0001ce40 	call	1ce4 <_out_rev>
    2474:	0001a406 	br	2b08 <_ftoa+0x714>
  if (value < -DBL_MAX)
    2478:	01bfffc4 	movi	r6,-1
    247c:	01fffc34 	movhi	r7,65520
    2480:	39ffffc4 	addi	r7,r7,-1
    2484:	e1000217 	ldw	r4,8(fp)
    2488:	e1400317 	ldw	r5,12(fp)
    248c:	00087e40 	call	87e4 <__ledf2>
    2490:	10000f0e 	bge	r2,zero,24d0 <_ftoa+0xdc>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    2494:	e0800617 	ldw	r2,24(fp)
    2498:	d8800315 	stw	r2,12(sp)
    249c:	e0800517 	ldw	r2,20(fp)
    24a0:	d8800215 	stw	r2,8(sp)
    24a4:	00800104 	movi	r2,4
    24a8:	d8800115 	stw	r2,4(sp)
    24ac:	00800074 	movhi	r2,1
    24b0:	10b9e204 	addi	r2,r2,-6264
    24b4:	d8800015 	stw	r2,0(sp)
    24b8:	e1ffea17 	ldw	r7,-88(fp)
    24bc:	e1bfeb17 	ldw	r6,-84(fp)
    24c0:	e17fec17 	ldw	r5,-80(fp)
    24c4:	e13fed17 	ldw	r4,-76(fp)
    24c8:	0001ce40 	call	1ce4 <_out_rev>
    24cc:	00018e06 	br	2b08 <_ftoa+0x714>
  if (value > DBL_MAX)
    24d0:	01bfffc4 	movi	r6,-1
    24d4:	01dffc34 	movhi	r7,32752
    24d8:	39ffffc4 	addi	r7,r7,-1
    24dc:	e1000217 	ldw	r4,8(fp)
    24e0:	e1400317 	ldw	r5,12(fp)
    24e4:	00086fc0 	call	86fc <__gedf2>
    24e8:	00801a0e 	bge	zero,r2,2554 <_ftoa+0x160>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    24ec:	e0800617 	ldw	r2,24(fp)
    24f0:	1080010c 	andi	r2,r2,4
    24f4:	10000326 	beq	r2,zero,2504 <_ftoa+0x110>
    24f8:	00800074 	movhi	r2,1
    24fc:	10b9e404 	addi	r2,r2,-6256
    2500:	00000206 	br	250c <_ftoa+0x118>
    2504:	00800074 	movhi	r2,1
    2508:	10b9e604 	addi	r2,r2,-6248
    250c:	e0c00617 	ldw	r3,24(fp)
    2510:	18c0010c 	andi	r3,r3,4
    2514:	18000226 	beq	r3,zero,2520 <_ftoa+0x12c>
    2518:	00c00104 	movi	r3,4
    251c:	00000106 	br	2524 <_ftoa+0x130>
    2520:	00c000c4 	movi	r3,3
    2524:	e1000617 	ldw	r4,24(fp)
    2528:	d9000315 	stw	r4,12(sp)
    252c:	e1000517 	ldw	r4,20(fp)
    2530:	d9000215 	stw	r4,8(sp)
    2534:	d8c00115 	stw	r3,4(sp)
    2538:	d8800015 	stw	r2,0(sp)
    253c:	e1ffea17 	ldw	r7,-88(fp)
    2540:	e1bfeb17 	ldw	r6,-84(fp)
    2544:	e17fec17 	ldw	r5,-80(fp)
    2548:	e13fed17 	ldw	r4,-76(fp)
    254c:	0001ce40 	call	1ce4 <_out_rev>
    2550:	00016d06 	br	2b08 <_ftoa+0x714>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
    2554:	000d883a 	mov	r6,zero
    2558:	01d073b4 	movhi	r7,16846
    255c:	39f35944 	addi	r7,r7,-12955
    2560:	e1000217 	ldw	r4,8(fp)
    2564:	e1400317 	ldw	r5,12(fp)
    2568:	00086fc0 	call	86fc <__gedf2>
    256c:	00800716 	blt	zero,r2,258c <_ftoa+0x198>
    2570:	000d883a 	mov	r6,zero
    2574:	01f073b4 	movhi	r7,49614
    2578:	39f35944 	addi	r7,r7,-12955
    257c:	e1000217 	ldw	r4,8(fp)
    2580:	e1400317 	ldw	r5,12(fp)
    2584:	00087e40 	call	87e4 <__ledf2>
    2588:	1000100e 	bge	r2,zero,25cc <_ftoa+0x1d8>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    258c:	e0800617 	ldw	r2,24(fp)
    2590:	d8800415 	stw	r2,16(sp)
    2594:	e0800517 	ldw	r2,20(fp)
    2598:	d8800315 	stw	r2,12(sp)
    259c:	e0800417 	ldw	r2,16(fp)
    25a0:	d8800215 	stw	r2,8(sp)
    25a4:	e0800217 	ldw	r2,8(fp)
    25a8:	d8800015 	stw	r2,0(sp)
    25ac:	e0800317 	ldw	r2,12(fp)
    25b0:	d8800115 	stw	r2,4(sp)
    25b4:	e1ffea17 	ldw	r7,-88(fp)
    25b8:	e1bfeb17 	ldw	r6,-84(fp)
    25bc:	e17fec17 	ldw	r5,-80(fp)
    25c0:	e13fed17 	ldw	r4,-76(fp)
    25c4:	0002b200 	call	2b20 <_etoa>
    25c8:	00014f06 	br	2b08 <_ftoa+0x714>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
    25cc:	e03ffdc5 	stb	zero,-9(fp)
  if (value < 0) {
    25d0:	000d883a 	mov	r6,zero
    25d4:	000f883a 	mov	r7,zero
    25d8:	e1000217 	ldw	r4,8(fp)
    25dc:	e1400317 	ldw	r5,12(fp)
    25e0:	00087e40 	call	87e4 <__ledf2>
    25e4:	10000b0e 	bge	r2,zero,2614 <_ftoa+0x220>
    negative = true;
    25e8:	00800044 	movi	r2,1
    25ec:	e0bffdc5 	stb	r2,-9(fp)
    value = 0 - value;
    25f0:	e1800217 	ldw	r6,8(fp)
    25f4:	e1c00317 	ldw	r7,12(fp)
    25f8:	0009883a 	mov	r4,zero
    25fc:	000b883a 	mov	r5,zero
    2600:	00090780 	call	9078 <__subdf3>
    2604:	1009883a 	mov	r4,r2
    2608:	180b883a 	mov	r5,r3
    260c:	e1000215 	stw	r4,8(fp)
    2610:	e1400315 	stw	r5,12(fp)
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    2614:	e0800617 	ldw	r2,24(fp)
    2618:	1081000c 	andi	r2,r2,1024
    261c:	10000d1e 	bne	r2,zero,2654 <_ftoa+0x260>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    2620:	00800184 	movi	r2,6
    2624:	e0800415 	stw	r2,16(fp)
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    2628:	00000a06 	br	2654 <_ftoa+0x260>
    buf[len++] = '0';
    262c:	e0bffe17 	ldw	r2,-8(fp)
    2630:	10c00044 	addi	r3,r2,1
    2634:	e0fffe15 	stw	r3,-8(fp)
    2638:	e0ffff04 	addi	r3,fp,-4
    263c:	1885883a 	add	r2,r3,r2
    2640:	00c00c04 	movi	r3,48
    2644:	10ffef05 	stb	r3,-68(r2)
    prec--;
    2648:	e0800417 	ldw	r2,16(fp)
    264c:	10bfffc4 	addi	r2,r2,-1
    2650:	e0800415 	stw	r2,16(fp)
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    2654:	e0bffe17 	ldw	r2,-8(fp)
    2658:	10800828 	cmpgeui	r2,r2,32
    265c:	1000031e 	bne	r2,zero,266c <_ftoa+0x278>
    2660:	e0800417 	ldw	r2,16(fp)
    2664:	108002a8 	cmpgeui	r2,r2,10
    2668:	103ff01e 	bne	r2,zero,262c <_ftoa+0x238>
  }

  int whole = (int)value;
    266c:	e1000217 	ldw	r4,8(fp)
    2670:	e1400317 	ldw	r5,12(fp)
    2674:	000992c0 	call	992c <__fixdfsi>
    2678:	e0bffc15 	stw	r2,-16(fp)
  double tmp = (value - whole) * pow10[prec];
    267c:	e13ffc17 	ldw	r4,-16(fp)
    2680:	00099ac0 	call	99ac <__floatsidf>
    2684:	1009883a 	mov	r4,r2
    2688:	180b883a 	mov	r5,r3
    268c:	200d883a 	mov	r6,r4
    2690:	280f883a 	mov	r7,r5
    2694:	e1000217 	ldw	r4,8(fp)
    2698:	e1400317 	ldw	r5,12(fp)
    269c:	00090780 	call	9078 <__subdf3>
    26a0:	1009883a 	mov	r4,r2
    26a4:	180b883a 	mov	r5,r3
    26a8:	2011883a 	mov	r8,r4
    26ac:	2813883a 	mov	r9,r5
    26b0:	e0800417 	ldw	r2,16(fp)
    26b4:	100a90fa 	slli	r5,r2,3
    26b8:	01000074 	movhi	r4,1
    26bc:	2909883a 	add	r4,r5,r4
    26c0:	20b9e717 	ldw	r2,-6244(r4)
    26c4:	01000074 	movhi	r4,1
    26c8:	2909883a 	add	r4,r5,r4
    26cc:	20f9e817 	ldw	r3,-6240(r4)
    26d0:	100d883a 	mov	r6,r2
    26d4:	180f883a 	mov	r7,r3
    26d8:	4009883a 	mov	r4,r8
    26dc:	480b883a 	mov	r5,r9
    26e0:	00088cc0 	call	88cc <__muldf3>
    26e4:	1009883a 	mov	r4,r2
    26e8:	180b883a 	mov	r5,r3
    26ec:	e13ff615 	stw	r4,-40(fp)
    26f0:	e17ff715 	stw	r5,-36(fp)
  unsigned long frac = (unsigned long)tmp;
    26f4:	e13ff617 	ldw	r4,-40(fp)
    26f8:	e17ff717 	ldw	r5,-36(fp)
    26fc:	000507c0 	call	507c <__fixunsdfsi>
    2700:	e0bffb15 	stw	r2,-20(fp)
  diff = tmp - frac;
    2704:	e13ffb17 	ldw	r4,-20(fp)
    2708:	0009a640 	call	9a64 <__floatunsidf>
    270c:	1009883a 	mov	r4,r2
    2710:	180b883a 	mov	r5,r3
    2714:	200d883a 	mov	r6,r4
    2718:	280f883a 	mov	r7,r5
    271c:	e13ff617 	ldw	r4,-40(fp)
    2720:	e17ff717 	ldw	r5,-36(fp)
    2724:	00090780 	call	9078 <__subdf3>
    2728:	1009883a 	mov	r4,r2
    272c:	180b883a 	mov	r5,r3
    2730:	e13ff815 	stw	r4,-32(fp)
    2734:	e17ff915 	stw	r5,-28(fp)

  if (diff > 0.5) {
    2738:	000d883a 	mov	r6,zero
    273c:	01cff834 	movhi	r7,16352
    2740:	e13ff817 	ldw	r4,-32(fp)
    2744:	e17ff917 	ldw	r5,-28(fp)
    2748:	00086fc0 	call	86fc <__gedf2>
    274c:	00801a0e 	bge	zero,r2,27b8 <_ftoa+0x3c4>
    ++frac;
    2750:	e0bffb17 	ldw	r2,-20(fp)
    2754:	10800044 	addi	r2,r2,1
    2758:	e0bffb15 	stw	r2,-20(fp)
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    275c:	e13ffb17 	ldw	r4,-20(fp)
    2760:	0009a640 	call	9a64 <__floatunsidf>
    2764:	1011883a 	mov	r8,r2
    2768:	1813883a 	mov	r9,r3
    276c:	e0800417 	ldw	r2,16(fp)
    2770:	100a90fa 	slli	r5,r2,3
    2774:	01000074 	movhi	r4,1
    2778:	2909883a 	add	r4,r5,r4
    277c:	20b9e717 	ldw	r2,-6244(r4)
    2780:	01000074 	movhi	r4,1
    2784:	2909883a 	add	r4,r5,r4
    2788:	20f9e817 	ldw	r3,-6240(r4)
    278c:	100d883a 	mov	r6,r2
    2790:	180f883a 	mov	r7,r3
    2794:	4009883a 	mov	r4,r8
    2798:	480b883a 	mov	r5,r9
    279c:	00086fc0 	call	86fc <__gedf2>
    27a0:	10001316 	blt	r2,zero,27f0 <_ftoa+0x3fc>
      frac = 0;
    27a4:	e03ffb15 	stw	zero,-20(fp)
      ++whole;
    27a8:	e0bffc17 	ldw	r2,-16(fp)
    27ac:	10800044 	addi	r2,r2,1
    27b0:	e0bffc15 	stw	r2,-16(fp)
    27b4:	00000e06 	br	27f0 <_ftoa+0x3fc>
    }
  }
  else if (diff < 0.5) {
    27b8:	000d883a 	mov	r6,zero
    27bc:	01cff834 	movhi	r7,16352
    27c0:	e13ff817 	ldw	r4,-32(fp)
    27c4:	e17ff917 	ldw	r5,-28(fp)
    27c8:	00087e40 	call	87e4 <__ledf2>
    27cc:	10000816 	blt	r2,zero,27f0 <_ftoa+0x3fc>
  }
  else if ((frac == 0U) || (frac & 1U)) {
    27d0:	e0bffb17 	ldw	r2,-20(fp)
    27d4:	10000326 	beq	r2,zero,27e4 <_ftoa+0x3f0>
    27d8:	e0bffb17 	ldw	r2,-20(fp)
    27dc:	1080004c 	andi	r2,r2,1
    27e0:	10000326 	beq	r2,zero,27f0 <_ftoa+0x3fc>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
    27e4:	e0bffb17 	ldw	r2,-20(fp)
    27e8:	10800044 	addi	r2,r2,1
    27ec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (prec == 0U) {
    27f0:	e0800417 	ldw	r2,16(fp)
    27f4:	1000251e 	bne	r2,zero,288c <_ftoa+0x498>
    diff = value - (double)whole;
    27f8:	e13ffc17 	ldw	r4,-16(fp)
    27fc:	00099ac0 	call	99ac <__floatsidf>
    2800:	1009883a 	mov	r4,r2
    2804:	180b883a 	mov	r5,r3
    2808:	200d883a 	mov	r6,r4
    280c:	280f883a 	mov	r7,r5
    2810:	e1000217 	ldw	r4,8(fp)
    2814:	e1400317 	ldw	r5,12(fp)
    2818:	00090780 	call	9078 <__subdf3>
    281c:	1009883a 	mov	r4,r2
    2820:	180b883a 	mov	r5,r3
    2824:	e13ff815 	stw	r4,-32(fp)
    2828:	e17ff915 	stw	r5,-28(fp)
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    282c:	04000044 	movi	r16,1
    2830:	000d883a 	mov	r6,zero
    2834:	01cff834 	movhi	r7,16352
    2838:	e13ff817 	ldw	r4,-32(fp)
    283c:	e17ff917 	ldw	r5,-28(fp)
    2840:	00087e40 	call	87e4 <__ledf2>
    2844:	10000116 	blt	r2,zero,284c <_ftoa+0x458>
    2848:	0021883a 	mov	r16,zero
    284c:	8080005c 	xori	r2,r16,1
    2850:	10803fcc 	andi	r2,r2,255
    2854:	1000061e 	bne	r2,zero,2870 <_ftoa+0x47c>
    2858:	000d883a 	mov	r6,zero
    285c:	01cff834 	movhi	r7,16352
    2860:	e13ff817 	ldw	r4,-32(fp)
    2864:	e17ff917 	ldw	r5,-28(fp)
    2868:	00086fc0 	call	86fc <__gedf2>
    286c:	00803f0e 	bge	zero,r2,296c <_ftoa+0x578>
    2870:	e0bffc17 	ldw	r2,-16(fp)
    2874:	1080004c 	andi	r2,r2,1
    2878:	10005126 	beq	r2,zero,29c0 <_ftoa+0x5cc>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    287c:	e0bffc17 	ldw	r2,-16(fp)
    2880:	10800044 	addi	r2,r2,1
    2884:	e0bffc15 	stw	r2,-16(fp)
    2888:	00004d06 	br	29c0 <_ftoa+0x5cc>
    }
  }
  else {
    unsigned int count = prec;
    288c:	e0800417 	ldw	r2,16(fp)
    2890:	e0bffa15 	stw	r2,-24(fp)
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    2894:	00001706 	br	28f4 <_ftoa+0x500>
      --count;
    2898:	e0bffa17 	ldw	r2,-24(fp)
    289c:	10bfffc4 	addi	r2,r2,-1
    28a0:	e0bffa15 	stw	r2,-24(fp)
      buf[len++] = (char)(48U + (frac % 10U));
    28a4:	e0bffb17 	ldw	r2,-20(fp)
    28a8:	01400284 	movi	r5,10
    28ac:	1009883a 	mov	r4,r2
    28b0:	0005e2c0 	call	5e2c <__umodsi3>
    28b4:	10800c04 	addi	r2,r2,48
    28b8:	1009883a 	mov	r4,r2
    28bc:	e0bffe17 	ldw	r2,-8(fp)
    28c0:	10c00044 	addi	r3,r2,1
    28c4:	e0fffe15 	stw	r3,-8(fp)
    28c8:	2007883a 	mov	r3,r4
    28cc:	e13fff04 	addi	r4,fp,-4
    28d0:	2085883a 	add	r2,r4,r2
    28d4:	10ffef05 	stb	r3,-68(r2)
      if (!(frac /= 10U)) {
    28d8:	e0bffb17 	ldw	r2,-20(fp)
    28dc:	01400284 	movi	r5,10
    28e0:	1009883a 	mov	r4,r2
    28e4:	0005dc80 	call	5dc8 <__udivsi3>
    28e8:	e0bffb15 	stw	r2,-20(fp)
    28ec:	e0bffb17 	ldw	r2,-20(fp)
    28f0:	10000426 	beq	r2,zero,2904 <_ftoa+0x510>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    28f4:	e0bffe17 	ldw	r2,-8(fp)
    28f8:	10800830 	cmpltui	r2,r2,32
    28fc:	103fe61e 	bne	r2,zero,2898 <_ftoa+0x4a4>
    2900:	00000906 	br	2928 <_ftoa+0x534>
        break;
    2904:	0001883a 	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    2908:	00000706 	br	2928 <_ftoa+0x534>
      buf[len++] = '0';
    290c:	e0bffe17 	ldw	r2,-8(fp)
    2910:	10c00044 	addi	r3,r2,1
    2914:	e0fffe15 	stw	r3,-8(fp)
    2918:	e0ffff04 	addi	r3,fp,-4
    291c:	1885883a 	add	r2,r3,r2
    2920:	00c00c04 	movi	r3,48
    2924:	10ffef05 	stb	r3,-68(r2)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    2928:	e0bffe17 	ldw	r2,-8(fp)
    292c:	10800828 	cmpgeui	r2,r2,32
    2930:	1000041e 	bne	r2,zero,2944 <_ftoa+0x550>
    2934:	e0bffa17 	ldw	r2,-24(fp)
    2938:	10ffffc4 	addi	r3,r2,-1
    293c:	e0fffa15 	stw	r3,-24(fp)
    2940:	103ff21e 	bne	r2,zero,290c <_ftoa+0x518>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    2944:	e0bffe17 	ldw	r2,-8(fp)
    2948:	10800828 	cmpgeui	r2,r2,32
    294c:	10001c1e 	bne	r2,zero,29c0 <_ftoa+0x5cc>
      // add decimal
      buf[len++] = '.';
    2950:	e0bffe17 	ldw	r2,-8(fp)
    2954:	10c00044 	addi	r3,r2,1
    2958:	e0fffe15 	stw	r3,-8(fp)
    295c:	e0ffff04 	addi	r3,fp,-4
    2960:	1885883a 	add	r2,r3,r2
    2964:	00c00b84 	movi	r3,46
    2968:	10ffef05 	stb	r3,-68(r2)
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    296c:	00001406 	br	29c0 <_ftoa+0x5cc>
    buf[len++] = (char)(48 + (whole % 10));
    2970:	e0bffc17 	ldw	r2,-16(fp)
    2974:	01400284 	movi	r5,10
    2978:	1009883a 	mov	r4,r2
    297c:	0005d540 	call	5d54 <__modsi3>
    2980:	10800c04 	addi	r2,r2,48
    2984:	1009883a 	mov	r4,r2
    2988:	e0bffe17 	ldw	r2,-8(fp)
    298c:	10c00044 	addi	r3,r2,1
    2990:	e0fffe15 	stw	r3,-8(fp)
    2994:	2007883a 	mov	r3,r4
    2998:	e13fff04 	addi	r4,fp,-4
    299c:	2085883a 	add	r2,r4,r2
    29a0:	10ffef05 	stb	r3,-68(r2)
    if (!(whole /= 10)) {
    29a4:	e0bffc17 	ldw	r2,-16(fp)
    29a8:	01400284 	movi	r5,10
    29ac:	1009883a 	mov	r4,r2
    29b0:	0005cd40 	call	5cd4 <__divsi3>
    29b4:	e0bffc15 	stw	r2,-16(fp)
    29b8:	e0bffc17 	ldw	r2,-16(fp)
    29bc:	10000426 	beq	r2,zero,29d0 <_ftoa+0x5dc>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    29c0:	e0bffe17 	ldw	r2,-8(fp)
    29c4:	10800830 	cmpltui	r2,r2,32
    29c8:	103fe91e 	bne	r2,zero,2970 <_ftoa+0x57c>
    29cc:	00000106 	br	29d4 <_ftoa+0x5e0>
      break;
    29d0:	0001883a 	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    29d4:	e0800617 	ldw	r2,24(fp)
    29d8:	1080008c 	andi	r2,r2,2
    29dc:	10001b1e 	bne	r2,zero,2a4c <_ftoa+0x658>
    29e0:	e0800617 	ldw	r2,24(fp)
    29e4:	1080004c 	andi	r2,r2,1
    29e8:	10001826 	beq	r2,zero,2a4c <_ftoa+0x658>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    29ec:	e0800517 	ldw	r2,20(fp)
    29f0:	10001026 	beq	r2,zero,2a34 <_ftoa+0x640>
    29f4:	e0bffdc3 	ldbu	r2,-9(fp)
    29f8:	1000031e 	bne	r2,zero,2a08 <_ftoa+0x614>
    29fc:	e0800617 	ldw	r2,24(fp)
    2a00:	1080030c 	andi	r2,r2,12
    2a04:	10000b26 	beq	r2,zero,2a34 <_ftoa+0x640>
      width--;
    2a08:	e0800517 	ldw	r2,20(fp)
    2a0c:	10bfffc4 	addi	r2,r2,-1
    2a10:	e0800515 	stw	r2,20(fp)
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    2a14:	00000706 	br	2a34 <_ftoa+0x640>
      buf[len++] = '0';
    2a18:	e0bffe17 	ldw	r2,-8(fp)
    2a1c:	10c00044 	addi	r3,r2,1
    2a20:	e0fffe15 	stw	r3,-8(fp)
    2a24:	e0ffff04 	addi	r3,fp,-4
    2a28:	1885883a 	add	r2,r3,r2
    2a2c:	00c00c04 	movi	r3,48
    2a30:	10ffef05 	stb	r3,-68(r2)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    2a34:	e0fffe17 	ldw	r3,-8(fp)
    2a38:	e0800517 	ldw	r2,20(fp)
    2a3c:	1880032e 	bgeu	r3,r2,2a4c <_ftoa+0x658>
    2a40:	e0bffe17 	ldw	r2,-8(fp)
    2a44:	10800830 	cmpltui	r2,r2,32
    2a48:	103ff31e 	bne	r2,zero,2a18 <_ftoa+0x624>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    2a4c:	e0bffe17 	ldw	r2,-8(fp)
    2a50:	10800828 	cmpgeui	r2,r2,32
    2a54:	10001f1e 	bne	r2,zero,2ad4 <_ftoa+0x6e0>
    if (negative) {
    2a58:	e0bffdc3 	ldbu	r2,-9(fp)
    2a5c:	10000826 	beq	r2,zero,2a80 <_ftoa+0x68c>
      buf[len++] = '-';
    2a60:	e0bffe17 	ldw	r2,-8(fp)
    2a64:	10c00044 	addi	r3,r2,1
    2a68:	e0fffe15 	stw	r3,-8(fp)
    2a6c:	e0ffff04 	addi	r3,fp,-4
    2a70:	1885883a 	add	r2,r3,r2
    2a74:	00c00b44 	movi	r3,45
    2a78:	10ffef05 	stb	r3,-68(r2)
    2a7c:	00001506 	br	2ad4 <_ftoa+0x6e0>
    }
    else if (flags & FLAGS_PLUS) {
    2a80:	e0800617 	ldw	r2,24(fp)
    2a84:	1080010c 	andi	r2,r2,4
    2a88:	10000826 	beq	r2,zero,2aac <_ftoa+0x6b8>
      buf[len++] = '+';  // ignore the space if the '+' exists
    2a8c:	e0bffe17 	ldw	r2,-8(fp)
    2a90:	10c00044 	addi	r3,r2,1
    2a94:	e0fffe15 	stw	r3,-8(fp)
    2a98:	e0ffff04 	addi	r3,fp,-4
    2a9c:	1885883a 	add	r2,r3,r2
    2aa0:	00c00ac4 	movi	r3,43
    2aa4:	10ffef05 	stb	r3,-68(r2)
    2aa8:	00000a06 	br	2ad4 <_ftoa+0x6e0>
    }
    else if (flags & FLAGS_SPACE) {
    2aac:	e0800617 	ldw	r2,24(fp)
    2ab0:	1080020c 	andi	r2,r2,8
    2ab4:	10000726 	beq	r2,zero,2ad4 <_ftoa+0x6e0>
      buf[len++] = ' ';
    2ab8:	e0bffe17 	ldw	r2,-8(fp)
    2abc:	10c00044 	addi	r3,r2,1
    2ac0:	e0fffe15 	stw	r3,-8(fp)
    2ac4:	e0ffff04 	addi	r3,fp,-4
    2ac8:	1885883a 	add	r2,r3,r2
    2acc:	00c00804 	movi	r3,32
    2ad0:	10ffef05 	stb	r3,-68(r2)
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    2ad4:	e0800617 	ldw	r2,24(fp)
    2ad8:	d8800315 	stw	r2,12(sp)
    2adc:	e0800517 	ldw	r2,20(fp)
    2ae0:	d8800215 	stw	r2,8(sp)
    2ae4:	e0bffe17 	ldw	r2,-8(fp)
    2ae8:	d8800115 	stw	r2,4(sp)
    2aec:	e0bfee04 	addi	r2,fp,-72
    2af0:	d8800015 	stw	r2,0(sp)
    2af4:	e1ffea17 	ldw	r7,-88(fp)
    2af8:	e1bfeb17 	ldw	r6,-84(fp)
    2afc:	e17fec17 	ldw	r5,-80(fp)
    2b00:	e13fed17 	ldw	r4,-76(fp)
    2b04:	0001ce40 	call	1ce4 <_out_rev>
}
    2b08:	e6ffff04 	addi	sp,fp,-4
    2b0c:	dfc00217 	ldw	ra,8(sp)
    2b10:	df000117 	ldw	fp,4(sp)
    2b14:	dc000017 	ldw	r16,0(sp)
    2b18:	dec00304 	addi	sp,sp,12
    2b1c:	f800283a 	ret

00002b20 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    2b20:	deffdb04 	addi	sp,sp,-148
    2b24:	dfc02415 	stw	ra,144(sp)
    2b28:	df002315 	stw	fp,140(sp)
    2b2c:	ddc02215 	stw	r23,136(sp)
    2b30:	dd802115 	stw	r22,132(sp)
    2b34:	dd402015 	stw	r21,128(sp)
    2b38:	dd001f15 	stw	r20,124(sp)
    2b3c:	dcc01e15 	stw	r19,120(sp)
    2b40:	dc801d15 	stw	r18,116(sp)
    2b44:	dc401c15 	stw	r17,112(sp)
    2b48:	dc001b15 	stw	r16,108(sp)
    2b4c:	df002304 	addi	fp,sp,140
    2b50:	e13feb15 	stw	r4,-84(fp)
    2b54:	e17fea15 	stw	r5,-88(fp)
    2b58:	e1bfe915 	stw	r6,-92(fp)
    2b5c:	e1ffe815 	stw	r7,-96(fp)
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    2b60:	e1800217 	ldw	r6,8(fp)
    2b64:	e1c00317 	ldw	r7,12(fp)
    2b68:	e1000217 	ldw	r4,8(fp)
    2b6c:	e1400317 	ldw	r5,12(fp)
    2b70:	000867c0 	call	867c <__eqdf2>
    2b74:	10000e1e 	bne	r2,zero,2bb0 <_etoa+0x90>
    2b78:	01bfffc4 	movi	r6,-1
    2b7c:	01dffc34 	movhi	r7,32752
    2b80:	39ffffc4 	addi	r7,r7,-1
    2b84:	e1000217 	ldw	r4,8(fp)
    2b88:	e1400317 	ldw	r5,12(fp)
    2b8c:	00086fc0 	call	86fc <__gedf2>
    2b90:	00800716 	blt	zero,r2,2bb0 <_etoa+0x90>
    2b94:	01bfffc4 	movi	r6,-1
    2b98:	01fffc34 	movhi	r7,65520
    2b9c:	39ffffc4 	addi	r7,r7,-1
    2ba0:	e1000217 	ldw	r4,8(fp)
    2ba4:	e1400317 	ldw	r5,12(fp)
    2ba8:	00087e40 	call	87e4 <__ledf2>
    2bac:	1000100e 	bge	r2,zero,2bf0 <_etoa+0xd0>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    2bb0:	e0800617 	ldw	r2,24(fp)
    2bb4:	d8800415 	stw	r2,16(sp)
    2bb8:	e0800517 	ldw	r2,20(fp)
    2bbc:	d8800315 	stw	r2,12(sp)
    2bc0:	e0800417 	ldw	r2,16(fp)
    2bc4:	d8800215 	stw	r2,8(sp)
    2bc8:	e0800217 	ldw	r2,8(fp)
    2bcc:	d8800015 	stw	r2,0(sp)
    2bd0:	e0800317 	ldw	r2,12(fp)
    2bd4:	d8800115 	stw	r2,4(sp)
    2bd8:	e1ffe817 	ldw	r7,-96(fp)
    2bdc:	e1bfe917 	ldw	r6,-92(fp)
    2be0:	e17fea17 	ldw	r5,-88(fp)
    2be4:	e13feb17 	ldw	r4,-84(fp)
    2be8:	00023f40 	call	23f4 <_ftoa>
    2bec:	0001ea06 	br	3398 <_etoa+0x878>
  }

  // determine the sign
  const bool negative = value < 0;
    2bf0:	00800044 	movi	r2,1
    2bf4:	e0bfe3c5 	stb	r2,-113(fp)
    2bf8:	000d883a 	mov	r6,zero
    2bfc:	000f883a 	mov	r7,zero
    2c00:	e1000217 	ldw	r4,8(fp)
    2c04:	e1400317 	ldw	r5,12(fp)
    2c08:	00087e40 	call	87e4 <__ledf2>
    2c0c:	10000116 	blt	r2,zero,2c14 <_etoa+0xf4>
    2c10:	e03fe3c5 	stb	zero,-113(fp)
    2c14:	e0bfe3c3 	ldbu	r2,-113(fp)
    2c18:	e0bff4c5 	stb	r2,-45(fp)
  if (negative) {
    2c1c:	e0bff4c3 	ldbu	r2,-45(fp)
    2c20:	10000526 	beq	r2,zero,2c38 <_etoa+0x118>
    value = -value;
    2c24:	e0800217 	ldw	r2,8(fp)
    2c28:	e0800215 	stw	r2,8(fp)
    2c2c:	e0800317 	ldw	r2,12(fp)
    2c30:	10a0003c 	xorhi	r2,r2,32768
    2c34:	e0800315 	stw	r2,12(fp)
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
    2c38:	e0800617 	ldw	r2,24(fp)
    2c3c:	1081000c 	andi	r2,r2,1024
    2c40:	1000021e 	bne	r2,zero,2c4c <_etoa+0x12c>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    2c44:	00800184 	movi	r2,6
    2c48:	e0800415 	stw	r2,16(fp)
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
    2c4c:	e0800217 	ldw	r2,8(fp)
    2c50:	e0bfec15 	stw	r2,-80(fp)
    2c54:	e0800317 	ldw	r2,12(fp)
    2c58:	e0bfed15 	stw	r2,-76(fp)
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
    2c5c:	e0bfec17 	ldw	r2,-80(fp)
    2c60:	e0ffed17 	ldw	r3,-76(fp)
    2c64:	1804d53a 	srli	r2,r3,20
    2c68:	e0bfe615 	stw	r2,-104(fp)
    2c6c:	e03fe715 	stw	zero,-100(fp)
    2c70:	e0bfe617 	ldw	r2,-104(fp)
    2c74:	1081ffcc 	andi	r2,r2,2047
    2c78:	10bf0044 	addi	r2,r2,-1023
    2c7c:	e0bff315 	stw	r2,-52(fp)
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    2c80:	e0bfec17 	ldw	r2,-80(fp)
    2c84:	e0ffed17 	ldw	r3,-76(fp)
    2c88:	013fffc4 	movi	r4,-1
    2c8c:	1128703a 	and	r20,r2,r4
    2c90:	01000434 	movhi	r4,16
    2c94:	213fffc4 	addi	r4,r4,-1
    2c98:	192a703a 	and	r21,r3,r4
    2c9c:	a024b03a 	or	r18,r20,zero
    2ca0:	accffc34 	orhi	r19,r21,16368
    2ca4:	e4bfec15 	stw	r18,-80(fp)
    2ca8:	e4ffed15 	stw	r19,-76(fp)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    2cac:	e13ff317 	ldw	r4,-52(fp)
    2cb0:	00099ac0 	call	99ac <__floatsidf>
    2cb4:	1011883a 	mov	r8,r2
    2cb8:	1813883a 	mov	r9,r3
    2cbc:	019427f4 	movhi	r6,20639
    2cc0:	319e7ec4 	addi	r6,r6,31227
    2cc4:	01cff4f4 	movhi	r7,16339
    2cc8:	39d104c4 	addi	r7,r7,17427
    2ccc:	4009883a 	mov	r4,r8
    2cd0:	480b883a 	mov	r5,r9
    2cd4:	00088cc0 	call	88cc <__muldf3>
    2cd8:	1009883a 	mov	r4,r2
    2cdc:	180b883a 	mov	r5,r3
    2ce0:	2005883a 	mov	r2,r4
    2ce4:	2807883a 	mov	r3,r5
    2ce8:	01a2d874 	movhi	r6,35681
    2cec:	31b22cc4 	addi	r6,r6,-14157
    2cf0:	01cff1f4 	movhi	r7,16327
    2cf4:	39e28a04 	addi	r7,r7,-30168
    2cf8:	1009883a 	mov	r4,r2
    2cfc:	180b883a 	mov	r5,r3
    2d00:	000745c0 	call	745c <__adddf3>
    2d04:	1009883a 	mov	r4,r2
    2d08:	180b883a 	mov	r5,r3
    2d0c:	2025883a 	mov	r18,r4
    2d10:	2827883a 	mov	r19,r5
    2d14:	e0bfec17 	ldw	r2,-80(fp)
    2d18:	e0ffed17 	ldw	r3,-76(fp)
    2d1c:	000d883a 	mov	r6,zero
    2d20:	01cffe34 	movhi	r7,16376
    2d24:	1009883a 	mov	r4,r2
    2d28:	180b883a 	mov	r5,r3
    2d2c:	00090780 	call	9078 <__subdf3>
    2d30:	1009883a 	mov	r4,r2
    2d34:	180b883a 	mov	r5,r3
    2d38:	2005883a 	mov	r2,r4
    2d3c:	2807883a 	mov	r3,r5
    2d40:	0198dbf4 	movhi	r6,25455
    2d44:	3190d844 	addi	r6,r6,17249
    2d48:	01cff4f4 	movhi	r7,16339
    2d4c:	39e1e9c4 	addi	r7,r7,-30809
    2d50:	1009883a 	mov	r4,r2
    2d54:	180b883a 	mov	r5,r3
    2d58:	00088cc0 	call	88cc <__muldf3>
    2d5c:	1009883a 	mov	r4,r2
    2d60:	180b883a 	mov	r5,r3
    2d64:	2005883a 	mov	r2,r4
    2d68:	2807883a 	mov	r3,r5
    2d6c:	100d883a 	mov	r6,r2
    2d70:	180f883a 	mov	r7,r3
    2d74:	9009883a 	mov	r4,r18
    2d78:	980b883a 	mov	r5,r19
    2d7c:	000745c0 	call	745c <__adddf3>
    2d80:	1009883a 	mov	r4,r2
    2d84:	180b883a 	mov	r5,r3
    2d88:	2005883a 	mov	r2,r4
    2d8c:	2807883a 	mov	r3,r5
    2d90:	1009883a 	mov	r4,r2
    2d94:	180b883a 	mov	r5,r3
    2d98:	000992c0 	call	992c <__fixdfsi>
    2d9c:	e0bff715 	stw	r2,-36(fp)
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    2da0:	e13ff717 	ldw	r4,-36(fp)
    2da4:	00099ac0 	call	99ac <__floatsidf>
    2da8:	1011883a 	mov	r8,r2
    2dac:	1813883a 	mov	r9,r3
    2db0:	01825eb4 	movhi	r6,2426
    2db4:	31a8dc44 	addi	r6,r6,-23695
    2db8:	01d002f4 	movhi	r7,16395
    2dbc:	39e4d3c4 	addi	r7,r7,-27825
    2dc0:	4009883a 	mov	r4,r8
    2dc4:	480b883a 	mov	r5,r9
    2dc8:	00088cc0 	call	88cc <__muldf3>
    2dcc:	1009883a 	mov	r4,r2
    2dd0:	180b883a 	mov	r5,r3
    2dd4:	2005883a 	mov	r2,r4
    2dd8:	2807883a 	mov	r3,r5
    2ddc:	000d883a 	mov	r6,zero
    2de0:	01cff834 	movhi	r7,16352
    2de4:	1009883a 	mov	r4,r2
    2de8:	180b883a 	mov	r5,r3
    2dec:	000745c0 	call	745c <__adddf3>
    2df0:	1009883a 	mov	r4,r2
    2df4:	180b883a 	mov	r5,r3
    2df8:	2005883a 	mov	r2,r4
    2dfc:	2807883a 	mov	r3,r5
    2e00:	1009883a 	mov	r4,r2
    2e04:	180b883a 	mov	r5,r3
    2e08:	000992c0 	call	992c <__fixdfsi>
    2e0c:	e0bff315 	stw	r2,-52(fp)
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    2e10:	e13ff717 	ldw	r4,-36(fp)
    2e14:	00099ac0 	call	99ac <__floatsidf>
    2e18:	1011883a 	mov	r8,r2
    2e1c:	1813883a 	mov	r9,r3
    2e20:	01aeed74 	movhi	r6,48053
    2e24:	31954584 	addi	r6,r6,21782
    2e28:	01d000b4 	movhi	r7,16386
    2e2c:	39daec44 	addi	r7,r7,27569
    2e30:	4009883a 	mov	r4,r8
    2e34:	480b883a 	mov	r5,r9
    2e38:	00088cc0 	call	88cc <__muldf3>
    2e3c:	1009883a 	mov	r4,r2
    2e40:	180b883a 	mov	r5,r3
    2e44:	2025883a 	mov	r18,r4
    2e48:	2827883a 	mov	r19,r5
    2e4c:	e13ff317 	ldw	r4,-52(fp)
    2e50:	00099ac0 	call	99ac <__floatsidf>
    2e54:	1011883a 	mov	r8,r2
    2e58:	1813883a 	mov	r9,r3
    2e5c:	01bfbeb4 	movhi	r6,65274
    2e60:	318e7bc4 	addi	r6,r6,14831
    2e64:	01cff9b4 	movhi	r7,16358
    2e68:	39cb9084 	addi	r7,r7,11842
    2e6c:	4009883a 	mov	r4,r8
    2e70:	480b883a 	mov	r5,r9
    2e74:	00088cc0 	call	88cc <__muldf3>
    2e78:	1009883a 	mov	r4,r2
    2e7c:	180b883a 	mov	r5,r3
    2e80:	2005883a 	mov	r2,r4
    2e84:	2807883a 	mov	r3,r5
    2e88:	100d883a 	mov	r6,r2
    2e8c:	180f883a 	mov	r7,r3
    2e90:	9009883a 	mov	r4,r18
    2e94:	980b883a 	mov	r5,r19
    2e98:	00090780 	call	9078 <__subdf3>
    2e9c:	1009883a 	mov	r4,r2
    2ea0:	180b883a 	mov	r5,r3
    2ea4:	e13ff115 	stw	r4,-60(fp)
    2ea8:	e17ff215 	stw	r5,-56(fp)
  const double z2 = z * z;
    2eac:	e1bff117 	ldw	r6,-60(fp)
    2eb0:	e1fff217 	ldw	r7,-56(fp)
    2eb4:	e13ff117 	ldw	r4,-60(fp)
    2eb8:	e17ff217 	ldw	r5,-56(fp)
    2ebc:	00088cc0 	call	88cc <__muldf3>
    2ec0:	1009883a 	mov	r4,r2
    2ec4:	180b883a 	mov	r5,r3
    2ec8:	e13fef15 	stw	r4,-68(fp)
    2ecc:	e17ff015 	stw	r5,-64(fp)
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
    2ed0:	e0bff317 	ldw	r2,-52(fp)
    2ed4:	1080ffc4 	addi	r2,r2,1023
    2ed8:	e0bfe415 	stw	r2,-112(fp)
    2edc:	1005d7fa 	srai	r2,r2,31
    2ee0:	e0bfe515 	stw	r2,-108(fp)
    2ee4:	e0bfe417 	ldw	r2,-112(fp)
    2ee8:	102e953a 	slli	r23,r2,20
    2eec:	002d883a 	mov	r22,zero
    2ef0:	e5bfec15 	stw	r22,-80(fp)
    2ef4:	e5ffed15 	stw	r23,-76(fp)
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    2ef8:	e4bfec17 	ldw	r18,-80(fp)
    2efc:	e4ffed17 	ldw	r19,-76(fp)
    2f00:	e0bff117 	ldw	r2,-60(fp)
    2f04:	e0fff217 	ldw	r3,-56(fp)
    2f08:	100d883a 	mov	r6,r2
    2f0c:	180f883a 	mov	r7,r3
    2f10:	1009883a 	mov	r4,r2
    2f14:	180b883a 	mov	r5,r3
    2f18:	000745c0 	call	745c <__adddf3>
    2f1c:	1009883a 	mov	r4,r2
    2f20:	180b883a 	mov	r5,r3
    2f24:	2029883a 	mov	r20,r4
    2f28:	282b883a 	mov	r21,r5
    2f2c:	e1bff117 	ldw	r6,-60(fp)
    2f30:	e1fff217 	ldw	r7,-56(fp)
    2f34:	0009883a 	mov	r4,zero
    2f38:	01500034 	movhi	r5,16384
    2f3c:	00090780 	call	9078 <__subdf3>
    2f40:	1009883a 	mov	r4,r2
    2f44:	180b883a 	mov	r5,r3
    2f48:	202d883a 	mov	r22,r4
    2f4c:	282f883a 	mov	r23,r5
    2f50:	000d883a 	mov	r6,zero
    2f54:	01d00b34 	movhi	r7,16428
    2f58:	e13fef17 	ldw	r4,-68(fp)
    2f5c:	e17ff017 	ldw	r5,-64(fp)
    2f60:	0007d4c0 	call	7d4c <__divdf3>
    2f64:	1009883a 	mov	r4,r2
    2f68:	180b883a 	mov	r5,r3
    2f6c:	2005883a 	mov	r2,r4
    2f70:	2807883a 	mov	r3,r5
    2f74:	000d883a 	mov	r6,zero
    2f78:	01d00934 	movhi	r7,16420
    2f7c:	1009883a 	mov	r4,r2
    2f80:	180b883a 	mov	r5,r3
    2f84:	000745c0 	call	745c <__adddf3>
    2f88:	1009883a 	mov	r4,r2
    2f8c:	180b883a 	mov	r5,r3
    2f90:	2005883a 	mov	r2,r4
    2f94:	2807883a 	mov	r3,r5
    2f98:	100d883a 	mov	r6,r2
    2f9c:	180f883a 	mov	r7,r3
    2fa0:	e13fef17 	ldw	r4,-68(fp)
    2fa4:	e17ff017 	ldw	r5,-64(fp)
    2fa8:	0007d4c0 	call	7d4c <__divdf3>
    2fac:	1009883a 	mov	r4,r2
    2fb0:	180b883a 	mov	r5,r3
    2fb4:	2005883a 	mov	r2,r4
    2fb8:	2807883a 	mov	r3,r5
    2fbc:	000d883a 	mov	r6,zero
    2fc0:	01d00634 	movhi	r7,16408
    2fc4:	1009883a 	mov	r4,r2
    2fc8:	180b883a 	mov	r5,r3
    2fcc:	000745c0 	call	745c <__adddf3>
    2fd0:	1009883a 	mov	r4,r2
    2fd4:	180b883a 	mov	r5,r3
    2fd8:	2005883a 	mov	r2,r4
    2fdc:	2807883a 	mov	r3,r5
    2fe0:	100d883a 	mov	r6,r2
    2fe4:	180f883a 	mov	r7,r3
    2fe8:	e13fef17 	ldw	r4,-68(fp)
    2fec:	e17ff017 	ldw	r5,-64(fp)
    2ff0:	0007d4c0 	call	7d4c <__divdf3>
    2ff4:	1009883a 	mov	r4,r2
    2ff8:	180b883a 	mov	r5,r3
    2ffc:	2005883a 	mov	r2,r4
    3000:	2807883a 	mov	r3,r5
    3004:	100d883a 	mov	r6,r2
    3008:	180f883a 	mov	r7,r3
    300c:	b009883a 	mov	r4,r22
    3010:	b80b883a 	mov	r5,r23
    3014:	000745c0 	call	745c <__adddf3>
    3018:	1009883a 	mov	r4,r2
    301c:	180b883a 	mov	r5,r3
    3020:	2005883a 	mov	r2,r4
    3024:	2807883a 	mov	r3,r5
    3028:	100d883a 	mov	r6,r2
    302c:	180f883a 	mov	r7,r3
    3030:	a009883a 	mov	r4,r20
    3034:	a80b883a 	mov	r5,r21
    3038:	0007d4c0 	call	7d4c <__divdf3>
    303c:	1009883a 	mov	r4,r2
    3040:	180b883a 	mov	r5,r3
    3044:	2005883a 	mov	r2,r4
    3048:	2807883a 	mov	r3,r5
    304c:	000d883a 	mov	r6,zero
    3050:	01cffc34 	movhi	r7,16368
    3054:	1009883a 	mov	r4,r2
    3058:	180b883a 	mov	r5,r3
    305c:	000745c0 	call	745c <__adddf3>
    3060:	1009883a 	mov	r4,r2
    3064:	180b883a 	mov	r5,r3
    3068:	2005883a 	mov	r2,r4
    306c:	2807883a 	mov	r3,r5
    3070:	100d883a 	mov	r6,r2
    3074:	180f883a 	mov	r7,r3
    3078:	9009883a 	mov	r4,r18
    307c:	980b883a 	mov	r5,r19
    3080:	00088cc0 	call	88cc <__muldf3>
    3084:	1009883a 	mov	r4,r2
    3088:	180b883a 	mov	r5,r3
    308c:	2005883a 	mov	r2,r4
    3090:	2807883a 	mov	r3,r5
    3094:	e0bfec15 	stw	r2,-80(fp)
    3098:	e0ffed15 	stw	r3,-76(fp)
  // correct for rounding errors
  if (value < conv.F) {
    309c:	e0bfec17 	ldw	r2,-80(fp)
    30a0:	e0ffed17 	ldw	r3,-76(fp)
    30a4:	100d883a 	mov	r6,r2
    30a8:	180f883a 	mov	r7,r3
    30ac:	e1000217 	ldw	r4,8(fp)
    30b0:	e1400317 	ldw	r5,12(fp)
    30b4:	00087e40 	call	87e4 <__ledf2>
    30b8:	1000100e 	bge	r2,zero,30fc <_etoa+0x5dc>
    expval--;
    30bc:	e0bff717 	ldw	r2,-36(fp)
    30c0:	10bfffc4 	addi	r2,r2,-1
    30c4:	e0bff715 	stw	r2,-36(fp)
    conv.F /= 10;
    30c8:	e0bfec17 	ldw	r2,-80(fp)
    30cc:	e0ffed17 	ldw	r3,-76(fp)
    30d0:	000d883a 	mov	r6,zero
    30d4:	01d00934 	movhi	r7,16420
    30d8:	1009883a 	mov	r4,r2
    30dc:	180b883a 	mov	r5,r3
    30e0:	0007d4c0 	call	7d4c <__divdf3>
    30e4:	1009883a 	mov	r4,r2
    30e8:	180b883a 	mov	r5,r3
    30ec:	2005883a 	mov	r2,r4
    30f0:	2807883a 	mov	r3,r5
    30f4:	e0bfec15 	stw	r2,-80(fp)
    30f8:	e0ffed15 	stw	r3,-76(fp)
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    30fc:	e0bff717 	ldw	r2,-36(fp)
    3100:	10801908 	cmpgei	r2,r2,100
    3104:	1000051e 	bne	r2,zero,311c <_etoa+0x5fc>
    3108:	e0bff717 	ldw	r2,-36(fp)
    310c:	10bfe750 	cmplti	r2,r2,-99
    3110:	1000021e 	bne	r2,zero,311c <_etoa+0x5fc>
    3114:	00800104 	movi	r2,4
    3118:	00000106 	br	3120 <_etoa+0x600>
    311c:	00800144 	movi	r2,5
    3120:	e0bff615 	stw	r2,-40(fp)

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
    3124:	e0800617 	ldw	r2,24(fp)
    3128:	1082000c 	andi	r2,r2,2048
    312c:	10002726 	beq	r2,zero,31cc <_etoa+0x6ac>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
    3130:	01bac734 	movhi	r6,60188
    3134:	3190cb44 	addi	r6,r6,17197
    3138:	01cfc6b4 	movhi	r7,16154
    313c:	39cdb884 	addi	r7,r7,14050
    3140:	e1000217 	ldw	r4,8(fp)
    3144:	e1400317 	ldw	r5,12(fp)
    3148:	00086fc0 	call	86fc <__gedf2>
    314c:	10001716 	blt	r2,zero,31ac <_etoa+0x68c>
    3150:	000d883a 	mov	r6,zero
    3154:	01d04bf4 	movhi	r7,16687
    3158:	39e12004 	addi	r7,r7,-31616
    315c:	e1000217 	ldw	r4,8(fp)
    3160:	e1400317 	ldw	r5,12(fp)
    3164:	00087e40 	call	87e4 <__ledf2>
    3168:	1000100e 	bge	r2,zero,31ac <_etoa+0x68c>
      if ((int)prec > expval) {
    316c:	e0800417 	ldw	r2,16(fp)
    3170:	e0fff717 	ldw	r3,-36(fp)
    3174:	1880060e 	bge	r3,r2,3190 <_etoa+0x670>
        prec = (unsigned)((int)prec - expval - 1);
    3178:	e0c00417 	ldw	r3,16(fp)
    317c:	e0bff717 	ldw	r2,-36(fp)
    3180:	1885c83a 	sub	r2,r3,r2
    3184:	10bfffc4 	addi	r2,r2,-1
    3188:	e0800415 	stw	r2,16(fp)
    318c:	00000106 	br	3194 <_etoa+0x674>
      }
      else {
        prec = 0;
    3190:	e0000415 	stw	zero,16(fp)
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
    3194:	e0800617 	ldw	r2,24(fp)
    3198:	10810014 	ori	r2,r2,1024
    319c:	e0800615 	stw	r2,24(fp)
      // no characters in exponent
      minwidth = 0U;
    31a0:	e03ff615 	stw	zero,-40(fp)
      expval   = 0;
    31a4:	e03ff715 	stw	zero,-36(fp)
    31a8:	00000806 	br	31cc <_etoa+0x6ac>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
    31ac:	e0800417 	ldw	r2,16(fp)
    31b0:	10000626 	beq	r2,zero,31cc <_etoa+0x6ac>
    31b4:	e0800617 	ldw	r2,24(fp)
    31b8:	1081000c 	andi	r2,r2,1024
    31bc:	10000326 	beq	r2,zero,31cc <_etoa+0x6ac>
        --prec;
    31c0:	e0800417 	ldw	r2,16(fp)
    31c4:	10bfffc4 	addi	r2,r2,-1
    31c8:	e0800415 	stw	r2,16(fp)
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
    31cc:	e0800517 	ldw	r2,20(fp)
    31d0:	e0bff515 	stw	r2,-44(fp)
  if (width > minwidth) {
    31d4:	e0800517 	ldw	r2,20(fp)
    31d8:	e0fff617 	ldw	r3,-40(fp)
    31dc:	1880052e 	bgeu	r3,r2,31f4 <_etoa+0x6d4>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
    31e0:	e0fff517 	ldw	r3,-44(fp)
    31e4:	e0bff617 	ldw	r2,-40(fp)
    31e8:	1885c83a 	sub	r2,r3,r2
    31ec:	e0bff515 	stw	r2,-44(fp)
    31f0:	00000106 	br	31f8 <_etoa+0x6d8>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
    31f4:	e03ff515 	stw	zero,-44(fp)
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
    31f8:	e0800617 	ldw	r2,24(fp)
    31fc:	1080008c 	andi	r2,r2,2
    3200:	10000326 	beq	r2,zero,3210 <_etoa+0x6f0>
    3204:	e0bff617 	ldw	r2,-40(fp)
    3208:	10000126 	beq	r2,zero,3210 <_etoa+0x6f0>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
    320c:	e03ff515 	stw	zero,-44(fp)
  }

  // rescale the float value
  if (expval) {
    3210:	e0bff717 	ldw	r2,-36(fp)
    3214:	10000b26 	beq	r2,zero,3244 <_etoa+0x724>
    value /= conv.F;
    3218:	e0bfec17 	ldw	r2,-80(fp)
    321c:	e0ffed17 	ldw	r3,-76(fp)
    3220:	100d883a 	mov	r6,r2
    3224:	180f883a 	mov	r7,r3
    3228:	e1000217 	ldw	r4,8(fp)
    322c:	e1400317 	ldw	r5,12(fp)
    3230:	0007d4c0 	call	7d4c <__divdf3>
    3234:	1009883a 	mov	r4,r2
    3238:	180b883a 	mov	r5,r3
    323c:	e1000215 	stw	r4,8(fp)
    3240:	e1400315 	stw	r5,12(fp)
  }

  // output the floating part
  const size_t start_idx = idx;
    3244:	e0bfe917 	ldw	r2,-92(fp)
    3248:	e0bfee15 	stw	r2,-72(fp)
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
    324c:	e0bff4c3 	ldbu	r2,-45(fp)
    3250:	10000426 	beq	r2,zero,3264 <_etoa+0x744>
    3254:	e4000217 	ldw	r16,8(fp)
    3258:	e0800317 	ldw	r2,12(fp)
    325c:	1460003c 	xorhi	r17,r2,32768
    3260:	00000206 	br	326c <_etoa+0x74c>
    3264:	e4000217 	ldw	r16,8(fp)
    3268:	e4400317 	ldw	r17,12(fp)
    326c:	e0c00617 	ldw	r3,24(fp)
    3270:	00bdffc4 	movi	r2,-2049
    3274:	1884703a 	and	r2,r3,r2
    3278:	d8800415 	stw	r2,16(sp)
    327c:	e0bff517 	ldw	r2,-44(fp)
    3280:	d8800315 	stw	r2,12(sp)
    3284:	e0800417 	ldw	r2,16(fp)
    3288:	d8800215 	stw	r2,8(sp)
    328c:	dc000015 	stw	r16,0(sp)
    3290:	dc400115 	stw	r17,4(sp)
    3294:	e1ffe817 	ldw	r7,-96(fp)
    3298:	e1bfe917 	ldw	r6,-92(fp)
    329c:	e17fea17 	ldw	r5,-88(fp)
    32a0:	e13feb17 	ldw	r4,-84(fp)
    32a4:	00023f40 	call	23f4 <_ftoa>
    32a8:	e0bfe915 	stw	r2,-92(fp)

  // output the exponent part
  if (minwidth) {
    32ac:	e0bff617 	ldw	r2,-40(fp)
    32b0:	10003826 	beq	r2,zero,3394 <_etoa+0x874>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    32b4:	e0800617 	ldw	r2,24(fp)
    32b8:	1080080c 	andi	r2,r2,32
    32bc:	10000226 	beq	r2,zero,32c8 <_etoa+0x7a8>
    32c0:	00801144 	movi	r2,69
    32c4:	00000106 	br	32cc <_etoa+0x7ac>
    32c8:	00801944 	movi	r2,101
    32cc:	e0ffe917 	ldw	r3,-92(fp)
    32d0:	19000044 	addi	r4,r3,1
    32d4:	e13fe915 	stw	r4,-92(fp)
    32d8:	e23feb17 	ldw	r8,-84(fp)
    32dc:	e1ffe817 	ldw	r7,-96(fp)
    32e0:	180d883a 	mov	r6,r3
    32e4:	e17fea17 	ldw	r5,-88(fp)
    32e8:	1009883a 	mov	r4,r2
    32ec:	403ee83a 	callr	r8
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    32f0:	e0bff717 	ldw	r2,-36(fp)
    32f4:	1000010e 	bge	r2,zero,32fc <_etoa+0x7dc>
    32f8:	0085c83a 	sub	r2,zero,r2
    32fc:	100b883a 	mov	r5,r2
    3300:	e0bff717 	ldw	r2,-36(fp)
    3304:	1004d7fa 	srli	r2,r2,31
    3308:	10803fcc 	andi	r2,r2,255
    330c:	e0fff617 	ldw	r3,-40(fp)
    3310:	18ffffc4 	addi	r3,r3,-1
    3314:	01000144 	movi	r4,5
    3318:	d9000515 	stw	r4,20(sp)
    331c:	d8c00415 	stw	r3,16(sp)
    3320:	d8000315 	stw	zero,12(sp)
    3324:	00c00284 	movi	r3,10
    3328:	d8c00215 	stw	r3,8(sp)
    332c:	d8800115 	stw	r2,4(sp)
    3330:	d9400015 	stw	r5,0(sp)
    3334:	e1ffe817 	ldw	r7,-96(fp)
    3338:	e1bfe917 	ldw	r6,-92(fp)
    333c:	e17fea17 	ldw	r5,-88(fp)
    3340:	e13feb17 	ldw	r4,-84(fp)
    3344:	000211c0 	call	211c <_ntoa_long>
    3348:	e0bfe915 	stw	r2,-92(fp)
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
    334c:	e0800617 	ldw	r2,24(fp)
    3350:	1080008c 	andi	r2,r2,2
    3354:	10000f26 	beq	r2,zero,3394 <_etoa+0x874>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    3358:	00000906 	br	3380 <_etoa+0x860>
    335c:	e0bfe917 	ldw	r2,-92(fp)
    3360:	10c00044 	addi	r3,r2,1
    3364:	e0ffe915 	stw	r3,-92(fp)
    3368:	e0ffeb17 	ldw	r3,-84(fp)
    336c:	e1ffe817 	ldw	r7,-96(fp)
    3370:	100d883a 	mov	r6,r2
    3374:	e17fea17 	ldw	r5,-88(fp)
    3378:	01000804 	movi	r4,32
    337c:	183ee83a 	callr	r3
    3380:	e0ffe917 	ldw	r3,-92(fp)
    3384:	e0bfee17 	ldw	r2,-72(fp)
    3388:	1887c83a 	sub	r3,r3,r2
    338c:	e0800517 	ldw	r2,20(fp)
    3390:	18bff236 	bltu	r3,r2,335c <_etoa+0x83c>
    }
  }
  return idx;
    3394:	e0bfe917 	ldw	r2,-92(fp)
}
    3398:	e6fff804 	addi	sp,fp,-32
    339c:	dfc00917 	ldw	ra,36(sp)
    33a0:	df000817 	ldw	fp,32(sp)
    33a4:	ddc00717 	ldw	r23,28(sp)
    33a8:	dd800617 	ldw	r22,24(sp)
    33ac:	dd400517 	ldw	r21,20(sp)
    33b0:	dd000417 	ldw	r20,16(sp)
    33b4:	dcc00317 	ldw	r19,12(sp)
    33b8:	dc800217 	ldw	r18,8(sp)
    33bc:	dc400117 	ldw	r17,4(sp)
    33c0:	dc000017 	ldw	r16,0(sp)
    33c4:	dec00a04 	addi	sp,sp,40
    33c8:	f800283a 	ret

000033cc <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    33cc:	deffdb04 	addi	sp,sp,-148
    33d0:	dfc02415 	stw	ra,144(sp)
    33d4:	df002315 	stw	fp,140(sp)
    33d8:	dd402215 	stw	r21,136(sp)
    33dc:	dd002115 	stw	r20,132(sp)
    33e0:	dcc02015 	stw	r19,128(sp)
    33e4:	dc801f15 	stw	r18,124(sp)
    33e8:	dc401e15 	stw	r17,120(sp)
    33ec:	dc001d15 	stw	r16,116(sp)
    33f0:	df002304 	addi	fp,sp,140
    33f4:	e13fe815 	stw	r4,-96(fp)
    33f8:	e17fe715 	stw	r5,-100(fp)
    33fc:	e1bfe615 	stw	r6,-104(fp)
    3400:	e1ffe515 	stw	r7,-108(fp)
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    3404:	e03ff515 	stw	zero,-44(fp)

  if (!buffer) {
    3408:	e0bfe717 	ldw	r2,-100(fp)
    340c:	1004121e 	bne	r2,zero,4458 <_vsnprintf+0x108c>
    // use null output function
    out = _out_null;
    3410:	00800034 	movhi	r2,0
    3414:	1086a804 	addi	r2,r2,6816
    3418:	e0bfe815 	stw	r2,-96(fp)
  }

  while (*format)
    341c:	00040e06 	br	4458 <_vsnprintf+0x108c>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    3420:	e0bfe517 	ldw	r2,-108(fp)
    3424:	10800003 	ldbu	r2,0(r2)
    3428:	10803fcc 	andi	r2,r2,255
    342c:	1080201c 	xori	r2,r2,128
    3430:	10bfe004 	addi	r2,r2,-128
    3434:	10800960 	cmpeqi	r2,r2,37
    3438:	1000111e 	bne	r2,zero,3480 <_vsnprintf+0xb4>
      // no
      out(*format, buffer, idx++, maxlen);
    343c:	e0bfe517 	ldw	r2,-108(fp)
    3440:	10800003 	ldbu	r2,0(r2)
    3444:	11003fcc 	andi	r4,r2,255
    3448:	2100201c 	xori	r4,r4,128
    344c:	213fe004 	addi	r4,r4,-128
    3450:	e0bff517 	ldw	r2,-44(fp)
    3454:	10c00044 	addi	r3,r2,1
    3458:	e0fff515 	stw	r3,-44(fp)
    345c:	e0ffe817 	ldw	r3,-96(fp)
    3460:	e1ffe617 	ldw	r7,-104(fp)
    3464:	100d883a 	mov	r6,r2
    3468:	e17fe717 	ldw	r5,-100(fp)
    346c:	183ee83a 	callr	r3
      format++;
    3470:	e0bfe517 	ldw	r2,-108(fp)
    3474:	10800044 	addi	r2,r2,1
    3478:	e0bfe515 	stw	r2,-108(fp)
      continue;
    347c:	0003f606 	br	4458 <_vsnprintf+0x108c>
    }
    else {
      // yes, evaluate it
      format++;
    3480:	e0bfe517 	ldw	r2,-108(fp)
    3484:	10800044 	addi	r2,r2,1
    3488:	e0bfe515 	stw	r2,-108(fp)
    }

    // evaluate flags
    flags = 0U;
    348c:	e03ff915 	stw	zero,-28(fp)
    do {
      switch (*format) {
    3490:	e0bfe517 	ldw	r2,-108(fp)
    3494:	10800003 	ldbu	r2,0(r2)
    3498:	10803fcc 	andi	r2,r2,255
    349c:	1080201c 	xori	r2,r2,128
    34a0:	10bfe004 	addi	r2,r2,-128
    34a4:	10bff804 	addi	r2,r2,-32
    34a8:	10c00468 	cmpgeui	r3,r2,17
    34ac:	1800431e 	bne	r3,zero,35bc <_vsnprintf+0x1f0>
    34b0:	100690ba 	slli	r3,r2,2
    34b4:	00800034 	movhi	r2,0
    34b8:	1885883a 	add	r2,r3,r2
    34bc:	108d3117 	ldw	r2,13508(r2)
    34c0:	1000683a 	jmp	r2
    34c4:	00003574 	movhi	zero,213
    34c8:	000035bc 	xorhi	zero,zero,214
    34cc:	000035bc 	xorhi	zero,zero,214
    34d0:	00003598 	cmpnei	zero,zero,214
    34d4:	000035bc 	xorhi	zero,zero,214
    34d8:	000035bc 	xorhi	zero,zero,214
    34dc:	000035bc 	xorhi	zero,zero,214
    34e0:	000035bc 	xorhi	zero,zero,214
    34e4:	000035bc 	xorhi	zero,zero,214
    34e8:	000035bc 	xorhi	zero,zero,214
    34ec:	000035bc 	xorhi	zero,zero,214
    34f0:	00003550 	cmplti	zero,zero,213
    34f4:	000035bc 	xorhi	zero,zero,214
    34f8:	0000352c 	andhi	zero,zero,212
    34fc:	000035bc 	xorhi	zero,zero,214
    3500:	000035bc 	xorhi	zero,zero,214
    3504:	00003508 	cmpgei	zero,zero,212
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    3508:	e0bff917 	ldw	r2,-28(fp)
    350c:	10800054 	ori	r2,r2,1
    3510:	e0bff915 	stw	r2,-28(fp)
    3514:	e0bfe517 	ldw	r2,-108(fp)
    3518:	10800044 	addi	r2,r2,1
    351c:	e0bfe515 	stw	r2,-108(fp)
    3520:	00800044 	movi	r2,1
    3524:	e0bff615 	stw	r2,-40(fp)
    3528:	00002606 	br	35c4 <_vsnprintf+0x1f8>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    352c:	e0bff917 	ldw	r2,-28(fp)
    3530:	10800094 	ori	r2,r2,2
    3534:	e0bff915 	stw	r2,-28(fp)
    3538:	e0bfe517 	ldw	r2,-108(fp)
    353c:	10800044 	addi	r2,r2,1
    3540:	e0bfe515 	stw	r2,-108(fp)
    3544:	00800044 	movi	r2,1
    3548:	e0bff615 	stw	r2,-40(fp)
    354c:	00001d06 	br	35c4 <_vsnprintf+0x1f8>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    3550:	e0bff917 	ldw	r2,-28(fp)
    3554:	10800114 	ori	r2,r2,4
    3558:	e0bff915 	stw	r2,-28(fp)
    355c:	e0bfe517 	ldw	r2,-108(fp)
    3560:	10800044 	addi	r2,r2,1
    3564:	e0bfe515 	stw	r2,-108(fp)
    3568:	00800044 	movi	r2,1
    356c:	e0bff615 	stw	r2,-40(fp)
    3570:	00001406 	br	35c4 <_vsnprintf+0x1f8>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    3574:	e0bff917 	ldw	r2,-28(fp)
    3578:	10800214 	ori	r2,r2,8
    357c:	e0bff915 	stw	r2,-28(fp)
    3580:	e0bfe517 	ldw	r2,-108(fp)
    3584:	10800044 	addi	r2,r2,1
    3588:	e0bfe515 	stw	r2,-108(fp)
    358c:	00800044 	movi	r2,1
    3590:	e0bff615 	stw	r2,-40(fp)
    3594:	00000b06 	br	35c4 <_vsnprintf+0x1f8>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    3598:	e0bff917 	ldw	r2,-28(fp)
    359c:	10800414 	ori	r2,r2,16
    35a0:	e0bff915 	stw	r2,-28(fp)
    35a4:	e0bfe517 	ldw	r2,-108(fp)
    35a8:	10800044 	addi	r2,r2,1
    35ac:	e0bfe515 	stw	r2,-108(fp)
    35b0:	00800044 	movi	r2,1
    35b4:	e0bff615 	stw	r2,-40(fp)
    35b8:	00000206 	br	35c4 <_vsnprintf+0x1f8>
        default :                                   n = 0U; break;
    35bc:	e03ff615 	stw	zero,-40(fp)
    35c0:	0001883a 	nop
      }
    } while (n);
    35c4:	e0bff617 	ldw	r2,-40(fp)
    35c8:	103fb11e 	bne	r2,zero,3490 <_vsnprintf+0xc4>

    // evaluate width field
    width = 0U;
    35cc:	e03ff815 	stw	zero,-32(fp)
    if (_is_digit(*format)) {
    35d0:	e0bfe517 	ldw	r2,-108(fp)
    35d4:	10800003 	ldbu	r2,0(r2)
    35d8:	10803fcc 	andi	r2,r2,255
    35dc:	1080201c 	xori	r2,r2,128
    35e0:	10bfe004 	addi	r2,r2,-128
    35e4:	1009883a 	mov	r4,r2
    35e8:	0001bf40 	call	1bf4 <_is_digit>
    35ec:	10803fcc 	andi	r2,r2,255
    35f0:	10000526 	beq	r2,zero,3608 <_vsnprintf+0x23c>
      width = _atoi(&format);
    35f4:	e0bfe504 	addi	r2,fp,-108
    35f8:	1009883a 	mov	r4,r2
    35fc:	0001c400 	call	1c40 <_atoi>
    3600:	e0bff815 	stw	r2,-32(fp)
    3604:	00001a06 	br	3670 <_vsnprintf+0x2a4>
    }
    else if (*format == '*') {
    3608:	e0bfe517 	ldw	r2,-108(fp)
    360c:	10800003 	ldbu	r2,0(r2)
    3610:	10803fcc 	andi	r2,r2,255
    3614:	1080201c 	xori	r2,r2,128
    3618:	10bfe004 	addi	r2,r2,-128
    361c:	10800a98 	cmpnei	r2,r2,42
    3620:	1000131e 	bne	r2,zero,3670 <_vsnprintf+0x2a4>
      const int w = va_arg(va, int);
    3624:	e0800217 	ldw	r2,8(fp)
    3628:	10c00104 	addi	r3,r2,4
    362c:	e0c00215 	stw	r3,8(fp)
    3630:	10800017 	ldw	r2,0(r2)
    3634:	e0bff015 	stw	r2,-64(fp)
      if (w < 0) {
    3638:	e0bff017 	ldw	r2,-64(fp)
    363c:	1000070e 	bge	r2,zero,365c <_vsnprintf+0x290>
        flags |= FLAGS_LEFT;    // reverse padding
    3640:	e0bff917 	ldw	r2,-28(fp)
    3644:	10800094 	ori	r2,r2,2
    3648:	e0bff915 	stw	r2,-28(fp)
        width = (unsigned int)-w;
    364c:	e0bff017 	ldw	r2,-64(fp)
    3650:	0085c83a 	sub	r2,zero,r2
    3654:	e0bff815 	stw	r2,-32(fp)
    3658:	00000206 	br	3664 <_vsnprintf+0x298>
      }
      else {
        width = (unsigned int)w;
    365c:	e0bff017 	ldw	r2,-64(fp)
    3660:	e0bff815 	stw	r2,-32(fp)
      }
      format++;
    3664:	e0bfe517 	ldw	r2,-108(fp)
    3668:	10800044 	addi	r2,r2,1
    366c:	e0bfe515 	stw	r2,-108(fp)
    }

    // evaluate precision field
    precision = 0U;
    3670:	e03ff715 	stw	zero,-36(fp)
    if (*format == '.') {
    3674:	e0bfe517 	ldw	r2,-108(fp)
    3678:	10800003 	ldbu	r2,0(r2)
    367c:	10803fcc 	andi	r2,r2,255
    3680:	1080201c 	xori	r2,r2,128
    3684:	10bfe004 	addi	r2,r2,-128
    3688:	10800b98 	cmpnei	r2,r2,46
    368c:	1000271e 	bne	r2,zero,372c <_vsnprintf+0x360>
      flags |= FLAGS_PRECISION;
    3690:	e0bff917 	ldw	r2,-28(fp)
    3694:	10810014 	ori	r2,r2,1024
    3698:	e0bff915 	stw	r2,-28(fp)
      format++;
    369c:	e0bfe517 	ldw	r2,-108(fp)
    36a0:	10800044 	addi	r2,r2,1
    36a4:	e0bfe515 	stw	r2,-108(fp)
      if (_is_digit(*format)) {
    36a8:	e0bfe517 	ldw	r2,-108(fp)
    36ac:	10800003 	ldbu	r2,0(r2)
    36b0:	10803fcc 	andi	r2,r2,255
    36b4:	1080201c 	xori	r2,r2,128
    36b8:	10bfe004 	addi	r2,r2,-128
    36bc:	1009883a 	mov	r4,r2
    36c0:	0001bf40 	call	1bf4 <_is_digit>
    36c4:	10803fcc 	andi	r2,r2,255
    36c8:	10000526 	beq	r2,zero,36e0 <_vsnprintf+0x314>
        precision = _atoi(&format);
    36cc:	e0bfe504 	addi	r2,fp,-108
    36d0:	1009883a 	mov	r4,r2
    36d4:	0001c400 	call	1c40 <_atoi>
    36d8:	e0bff715 	stw	r2,-36(fp)
    36dc:	00001306 	br	372c <_vsnprintf+0x360>
      }
      else if (*format == '*') {
    36e0:	e0bfe517 	ldw	r2,-108(fp)
    36e4:	10800003 	ldbu	r2,0(r2)
    36e8:	10803fcc 	andi	r2,r2,255
    36ec:	1080201c 	xori	r2,r2,128
    36f0:	10bfe004 	addi	r2,r2,-128
    36f4:	10800a98 	cmpnei	r2,r2,42
    36f8:	10000c1e 	bne	r2,zero,372c <_vsnprintf+0x360>
        const int prec = (int)va_arg(va, int);
    36fc:	e0800217 	ldw	r2,8(fp)
    3700:	10c00104 	addi	r3,r2,4
    3704:	e0c00215 	stw	r3,8(fp)
    3708:	10800017 	ldw	r2,0(r2)
    370c:	e0bfef15 	stw	r2,-68(fp)
        precision = prec > 0 ? (unsigned int)prec : 0U;
    3710:	e0bfef17 	ldw	r2,-68(fp)
    3714:	1000010e 	bge	r2,zero,371c <_vsnprintf+0x350>
    3718:	0005883a 	mov	r2,zero
    371c:	e0bff715 	stw	r2,-36(fp)
        format++;
    3720:	e0bfe517 	ldw	r2,-108(fp)
    3724:	10800044 	addi	r2,r2,1
    3728:	e0bfe515 	stw	r2,-108(fp)
      }
    }

    // evaluate length field
    switch (*format) {
    372c:	e0bfe517 	ldw	r2,-108(fp)
    3730:	10800003 	ldbu	r2,0(r2)
    3734:	10803fcc 	andi	r2,r2,255
    3738:	1080201c 	xori	r2,r2,128
    373c:	10bfe004 	addi	r2,r2,-128
    3740:	10bfe604 	addi	r2,r2,-104
    3744:	10c004e8 	cmpgeui	r3,r2,19
    3748:	1800551e 	bne	r3,zero,38a0 <_vsnprintf+0x4d4>
    374c:	100690ba 	slli	r3,r2,2
    3750:	00800034 	movhi	r2,0
    3754:	1885883a 	add	r2,r3,r2
    3758:	108dd817 	ldw	r2,14176(r2)
    375c:	1000683a 	jmp	r2
    3760:	000037fc 	xorhi	zero,zero,223
    3764:	000038a0 	cmpeqi	zero,zero,226
    3768:	00003868 	cmpgeui	zero,zero,225
    376c:	000038a0 	cmpeqi	zero,zero,226
    3770:	000037ac 	andhi	zero,zero,222
    3774:	000038a0 	cmpeqi	zero,zero,226
    3778:	000038a0 	cmpeqi	zero,zero,226
    377c:	000038a0 	cmpeqi	zero,zero,226
    3780:	000038a0 	cmpeqi	zero,zero,226
    3784:	000038a0 	cmpeqi	zero,zero,226
    3788:	000038a0 	cmpeqi	zero,zero,226
    378c:	000038a0 	cmpeqi	zero,zero,226
    3790:	0000384c 	andi	zero,zero,225
    3794:	000038a0 	cmpeqi	zero,zero,226
    3798:	000038a0 	cmpeqi	zero,zero,226
    379c:	000038a0 	cmpeqi	zero,zero,226
    37a0:	000038a0 	cmpeqi	zero,zero,226
    37a4:	000038a0 	cmpeqi	zero,zero,226
    37a8:	00003884 	movi	zero,226
      case 'l' :
        flags |= FLAGS_LONG;
    37ac:	e0bff917 	ldw	r2,-28(fp)
    37b0:	10804014 	ori	r2,r2,256
    37b4:	e0bff915 	stw	r2,-28(fp)
        format++;
    37b8:	e0bfe517 	ldw	r2,-108(fp)
    37bc:	10800044 	addi	r2,r2,1
    37c0:	e0bfe515 	stw	r2,-108(fp)
        if (*format == 'l') {
    37c4:	e0bfe517 	ldw	r2,-108(fp)
    37c8:	10800003 	ldbu	r2,0(r2)
    37cc:	10803fcc 	andi	r2,r2,255
    37d0:	1080201c 	xori	r2,r2,128
    37d4:	10bfe004 	addi	r2,r2,-128
    37d8:	10801b18 	cmpnei	r2,r2,108
    37dc:	1000321e 	bne	r2,zero,38a8 <_vsnprintf+0x4dc>
          flags |= FLAGS_LONG_LONG;
    37e0:	e0bff917 	ldw	r2,-28(fp)
    37e4:	10808014 	ori	r2,r2,512
    37e8:	e0bff915 	stw	r2,-28(fp)
          format++;
    37ec:	e0bfe517 	ldw	r2,-108(fp)
    37f0:	10800044 	addi	r2,r2,1
    37f4:	e0bfe515 	stw	r2,-108(fp)
        }
        break;
    37f8:	00002b06 	br	38a8 <_vsnprintf+0x4dc>
      case 'h' :
        flags |= FLAGS_SHORT;
    37fc:	e0bff917 	ldw	r2,-28(fp)
    3800:	10802014 	ori	r2,r2,128
    3804:	e0bff915 	stw	r2,-28(fp)
        format++;
    3808:	e0bfe517 	ldw	r2,-108(fp)
    380c:	10800044 	addi	r2,r2,1
    3810:	e0bfe515 	stw	r2,-108(fp)
        if (*format == 'h') {
    3814:	e0bfe517 	ldw	r2,-108(fp)
    3818:	10800003 	ldbu	r2,0(r2)
    381c:	10803fcc 	andi	r2,r2,255
    3820:	1080201c 	xori	r2,r2,128
    3824:	10bfe004 	addi	r2,r2,-128
    3828:	10801a18 	cmpnei	r2,r2,104
    382c:	1000201e 	bne	r2,zero,38b0 <_vsnprintf+0x4e4>
          flags |= FLAGS_CHAR;
    3830:	e0bff917 	ldw	r2,-28(fp)
    3834:	10801014 	ori	r2,r2,64
    3838:	e0bff915 	stw	r2,-28(fp)
          format++;
    383c:	e0bfe517 	ldw	r2,-108(fp)
    3840:	10800044 	addi	r2,r2,1
    3844:	e0bfe515 	stw	r2,-108(fp)
        }
        break;
    3848:	00001906 	br	38b0 <_vsnprintf+0x4e4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    384c:	e0bff917 	ldw	r2,-28(fp)
    3850:	10804014 	ori	r2,r2,256
    3854:	e0bff915 	stw	r2,-28(fp)
        format++;
    3858:	e0bfe517 	ldw	r2,-108(fp)
    385c:	10800044 	addi	r2,r2,1
    3860:	e0bfe515 	stw	r2,-108(fp)
        break;
    3864:	00001306 	br	38b4 <_vsnprintf+0x4e8>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3868:	e0bff917 	ldw	r2,-28(fp)
    386c:	10808014 	ori	r2,r2,512
    3870:	e0bff915 	stw	r2,-28(fp)
        format++;
    3874:	e0bfe517 	ldw	r2,-108(fp)
    3878:	10800044 	addi	r2,r2,1
    387c:	e0bfe515 	stw	r2,-108(fp)
        break;
    3880:	00000c06 	br	38b4 <_vsnprintf+0x4e8>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3884:	e0bff917 	ldw	r2,-28(fp)
    3888:	10804014 	ori	r2,r2,256
    388c:	e0bff915 	stw	r2,-28(fp)
        format++;
    3890:	e0bfe517 	ldw	r2,-108(fp)
    3894:	10800044 	addi	r2,r2,1
    3898:	e0bfe515 	stw	r2,-108(fp)
        break;
    389c:	00000506 	br	38b4 <_vsnprintf+0x4e8>
      default :
        break;
    38a0:	0001883a 	nop
    38a4:	00000306 	br	38b4 <_vsnprintf+0x4e8>
        break;
    38a8:	0001883a 	nop
    38ac:	00000106 	br	38b4 <_vsnprintf+0x4e8>
        break;
    38b0:	0001883a 	nop
    }

    // evaluate specifier
    switch (*format) {
    38b4:	e0bfe517 	ldw	r2,-108(fp)
    38b8:	10800003 	ldbu	r2,0(r2)
    38bc:	10803fcc 	andi	r2,r2,255
    38c0:	1080201c 	xori	r2,r2,128
    38c4:	10bfe004 	addi	r2,r2,-128
    38c8:	10bff6c4 	addi	r2,r2,-37
    38cc:	10c01528 	cmpgeui	r3,r2,84
    38d0:	1802d01e 	bne	r3,zero,4414 <_vsnprintf+0x1048>
    38d4:	100690ba 	slli	r3,r2,2
    38d8:	00800034 	movhi	r2,0
    38dc:	1885883a 	add	r2,r3,r2
    38e0:	108e3a17 	ldw	r2,14568(r2)
    38e4:	1000683a 	jmp	r2
    38e8:	000043e0 	cmpeqi	zero,zero,271
    38ec:	00004414 	movui	zero,272
    38f0:	00004414 	movui	zero,272
    38f4:	00004414 	movui	zero,272
    38f8:	00004414 	movui	zero,272
    38fc:	00004414 	movui	zero,272
    3900:	00004414 	movui	zero,272
    3904:	00004414 	movui	zero,272
    3908:	00004414 	movui	zero,272
    390c:	00004414 	movui	zero,272
    3910:	00004414 	movui	zero,272
    3914:	00004414 	movui	zero,272
    3918:	00004414 	movui	zero,272
    391c:	00004414 	movui	zero,272
    3920:	00004414 	movui	zero,272
    3924:	00004414 	movui	zero,272
    3928:	00004414 	movui	zero,272
    392c:	00004414 	movui	zero,272
    3930:	00004414 	movui	zero,272
    3934:	00004414 	movui	zero,272
    3938:	00004414 	movui	zero,272
    393c:	00004414 	movui	zero,272
    3940:	00004414 	movui	zero,272
    3944:	00004414 	movui	zero,272
    3948:	00004414 	movui	zero,272
    394c:	00004414 	movui	zero,272
    3950:	00004414 	movui	zero,272
    3954:	00004414 	movui	zero,272
    3958:	00004414 	movui	zero,272
    395c:	00004414 	movui	zero,272
    3960:	00004414 	movui	zero,272
    3964:	00004414 	movui	zero,272
    3968:	00003fc4 	movi	zero,255
    396c:	00003f40 	call	3f4 <bf_neg+0x14>
    3970:	00003fc4 	movi	zero,255
    3974:	00004414 	movui	zero,272
    3978:	00004414 	movui	zero,272
    397c:	00004414 	movui	zero,272
    3980:	00004414 	movui	zero,272
    3984:	00004414 	movui	zero,272
    3988:	00004414 	movui	zero,272
    398c:	00004414 	movui	zero,272
    3990:	00004414 	movui	zero,272
    3994:	00004414 	movui	zero,272
    3998:	00004414 	movui	zero,272
    399c:	00004414 	movui	zero,272
    39a0:	00004414 	movui	zero,272
    39a4:	00004414 	movui	zero,272
    39a8:	00004414 	movui	zero,272
    39ac:	00004414 	movui	zero,272
    39b0:	00004414 	movui	zero,272
    39b4:	00003a38 	rdprs	zero,zero,232
    39b8:	00004414 	movui	zero,272
    39bc:	00004414 	movui	zero,272
    39c0:	00004414 	movui	zero,272
    39c4:	00004414 	movui	zero,272
    39c8:	00004414 	movui	zero,272
    39cc:	00004414 	movui	zero,272
    39d0:	00004414 	movui	zero,272
    39d4:	00004414 	movui	zero,272
    39d8:	00004414 	movui	zero,272
    39dc:	00003a38 	rdprs	zero,zero,232
    39e0:	000040a8 	cmpgeui	zero,zero,258
    39e4:	00003a38 	rdprs	zero,zero,232
    39e8:	00003fc4 	movi	zero,255
    39ec:	00003f40 	call	3f4 <bf_neg+0x14>
    39f0:	00003fc4 	movi	zero,255
    39f4:	00004414 	movui	zero,272
    39f8:	00003a38 	rdprs	zero,zero,232
    39fc:	00004414 	movui	zero,272
    3a00:	00004414 	movui	zero,272
    3a04:	00004414 	movui	zero,272
    3a08:	00004414 	movui	zero,272
    3a0c:	00004414 	movui	zero,272
    3a10:	00003a38 	rdprs	zero,zero,232
    3a14:	000042f8 	rdprs	zero,zero,267
    3a18:	00004414 	movui	zero,272
    3a1c:	00004414 	movui	zero,272
    3a20:	0000418c 	andi	zero,zero,262
    3a24:	00004414 	movui	zero,272
    3a28:	00003a38 	rdprs	zero,zero,232
    3a2c:	00004414 	movui	zero,272
    3a30:	00004414 	movui	zero,272
    3a34:	00003a38 	rdprs	zero,zero,232
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    3a38:	e0bfe517 	ldw	r2,-108(fp)
    3a3c:	10800003 	ldbu	r2,0(r2)
    3a40:	10803fcc 	andi	r2,r2,255
    3a44:	1080201c 	xori	r2,r2,128
    3a48:	10bfe004 	addi	r2,r2,-128
    3a4c:	10801e20 	cmpeqi	r2,r2,120
    3a50:	1000071e 	bne	r2,zero,3a70 <_vsnprintf+0x6a4>
    3a54:	e0bfe517 	ldw	r2,-108(fp)
    3a58:	10800003 	ldbu	r2,0(r2)
    3a5c:	10803fcc 	andi	r2,r2,255
    3a60:	1080201c 	xori	r2,r2,128
    3a64:	10bfe004 	addi	r2,r2,-128
    3a68:	10801618 	cmpnei	r2,r2,88
    3a6c:	1000031e 	bne	r2,zero,3a7c <_vsnprintf+0x6b0>
          base = 16U;
    3a70:	00800404 	movi	r2,16
    3a74:	e0bff415 	stw	r2,-48(fp)
    3a78:	00001a06 	br	3ae4 <_vsnprintf+0x718>
        }
        else if (*format == 'o') {
    3a7c:	e0bfe517 	ldw	r2,-108(fp)
    3a80:	10800003 	ldbu	r2,0(r2)
    3a84:	10803fcc 	andi	r2,r2,255
    3a88:	1080201c 	xori	r2,r2,128
    3a8c:	10bfe004 	addi	r2,r2,-128
    3a90:	10801bd8 	cmpnei	r2,r2,111
    3a94:	1000031e 	bne	r2,zero,3aa4 <_vsnprintf+0x6d8>
          base =  8U;
    3a98:	00800204 	movi	r2,8
    3a9c:	e0bff415 	stw	r2,-48(fp)
    3aa0:	00001006 	br	3ae4 <_vsnprintf+0x718>
        }
        else if (*format == 'b') {
    3aa4:	e0bfe517 	ldw	r2,-108(fp)
    3aa8:	10800003 	ldbu	r2,0(r2)
    3aac:	10803fcc 	andi	r2,r2,255
    3ab0:	1080201c 	xori	r2,r2,128
    3ab4:	10bfe004 	addi	r2,r2,-128
    3ab8:	10801898 	cmpnei	r2,r2,98
    3abc:	1000031e 	bne	r2,zero,3acc <_vsnprintf+0x700>
          base =  2U;
    3ac0:	00800084 	movi	r2,2
    3ac4:	e0bff415 	stw	r2,-48(fp)
    3ac8:	00000606 	br	3ae4 <_vsnprintf+0x718>
        }
        else {
          base = 10U;
    3acc:	00800284 	movi	r2,10
    3ad0:	e0bff415 	stw	r2,-48(fp)
          flags &= ~FLAGS_HASH;   // no hash for dec format
    3ad4:	e0fff917 	ldw	r3,-28(fp)
    3ad8:	00bffbc4 	movi	r2,-17
    3adc:	1884703a 	and	r2,r3,r2
    3ae0:	e0bff915 	stw	r2,-28(fp)
        }
        // uppercase
        if (*format == 'X') {
    3ae4:	e0bfe517 	ldw	r2,-108(fp)
    3ae8:	10800003 	ldbu	r2,0(r2)
    3aec:	10803fcc 	andi	r2,r2,255
    3af0:	1080201c 	xori	r2,r2,128
    3af4:	10bfe004 	addi	r2,r2,-128
    3af8:	10801618 	cmpnei	r2,r2,88
    3afc:	1000031e 	bne	r2,zero,3b0c <_vsnprintf+0x740>
          flags |= FLAGS_UPPERCASE;
    3b00:	e0bff917 	ldw	r2,-28(fp)
    3b04:	10800814 	ori	r2,r2,32
    3b08:	e0bff915 	stw	r2,-28(fp)
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    3b0c:	e0bfe517 	ldw	r2,-108(fp)
    3b10:	10800003 	ldbu	r2,0(r2)
    3b14:	10803fcc 	andi	r2,r2,255
    3b18:	1080201c 	xori	r2,r2,128
    3b1c:	10bfe004 	addi	r2,r2,-128
    3b20:	10801a60 	cmpeqi	r2,r2,105
    3b24:	10000b1e 	bne	r2,zero,3b54 <_vsnprintf+0x788>
    3b28:	e0bfe517 	ldw	r2,-108(fp)
    3b2c:	10800003 	ldbu	r2,0(r2)
    3b30:	10803fcc 	andi	r2,r2,255
    3b34:	1080201c 	xori	r2,r2,128
    3b38:	10bfe004 	addi	r2,r2,-128
    3b3c:	10801920 	cmpeqi	r2,r2,100
    3b40:	1000041e 	bne	r2,zero,3b54 <_vsnprintf+0x788>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    3b44:	e0fff917 	ldw	r3,-28(fp)
    3b48:	00bffcc4 	movi	r2,-13
    3b4c:	1884703a 	and	r2,r3,r2
    3b50:	e0bff915 	stw	r2,-28(fp)
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    3b54:	e0bff917 	ldw	r2,-28(fp)
    3b58:	1081000c 	andi	r2,r2,1024
    3b5c:	10000426 	beq	r2,zero,3b70 <_vsnprintf+0x7a4>
          flags &= ~FLAGS_ZEROPAD;
    3b60:	e0fff917 	ldw	r3,-28(fp)
    3b64:	00bfff84 	movi	r2,-2
    3b68:	1884703a 	and	r2,r3,r2
    3b6c:	e0bff915 	stw	r2,-28(fp)
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    3b70:	e0bfe517 	ldw	r2,-108(fp)
    3b74:	10800003 	ldbu	r2,0(r2)
    3b78:	10803fcc 	andi	r2,r2,255
    3b7c:	1080201c 	xori	r2,r2,128
    3b80:	10bfe004 	addi	r2,r2,-128
    3b84:	10801a60 	cmpeqi	r2,r2,105
    3b88:	1000071e 	bne	r2,zero,3ba8 <_vsnprintf+0x7dc>
    3b8c:	e0bfe517 	ldw	r2,-108(fp)
    3b90:	10800003 	ldbu	r2,0(r2)
    3b94:	10803fcc 	andi	r2,r2,255
    3b98:	1080201c 	xori	r2,r2,128
    3b9c:	10bfe004 	addi	r2,r2,-128
    3ba0:	10801918 	cmpnei	r2,r2,100
    3ba4:	1000851e 	bne	r2,zero,3dbc <_vsnprintf+0x9f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    3ba8:	e0bff917 	ldw	r2,-28(fp)
    3bac:	1080800c 	andi	r2,r2,512
    3bb0:	10002f26 	beq	r2,zero,3c70 <_vsnprintf+0x8a4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    3bb4:	e0800217 	ldw	r2,8(fp)
    3bb8:	10c00204 	addi	r3,r2,8
    3bbc:	e0c00215 	stw	r3,8(fp)
    3bc0:	10c00017 	ldw	r3,0(r2)
    3bc4:	e0ffe915 	stw	r3,-92(fp)
    3bc8:	10800117 	ldw	r2,4(r2)
    3bcc:	e0bfea15 	stw	r2,-88(fp)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3bd0:	e0bfe917 	ldw	r2,-92(fp)
    3bd4:	e0ffea17 	ldw	r3,-88(fp)
    3bd8:	1800090e 	bge	r3,zero,3c00 <_vsnprintf+0x834>
    3bdc:	000d883a 	mov	r6,zero
    3be0:	000f883a 	mov	r7,zero
    3be4:	3089c83a 	sub	r4,r6,r2
    3be8:	3111803a 	cmpltu	r8,r6,r4
    3bec:	38cbc83a 	sub	r5,r7,r3
    3bf0:	2a05c83a 	sub	r2,r5,r8
    3bf4:	100b883a 	mov	r5,r2
    3bf8:	2005883a 	mov	r2,r4
    3bfc:	2807883a 	mov	r3,r5
    3c00:	1009883a 	mov	r4,r2
    3c04:	180b883a 	mov	r5,r3
    3c08:	2005883a 	mov	r2,r4
    3c0c:	2807883a 	mov	r3,r5
    3c10:	e13fea17 	ldw	r4,-88(fp)
    3c14:	2008d7fa 	srli	r4,r4,31
    3c18:	21003fcc 	andi	r4,r4,255
    3c1c:	e17ff417 	ldw	r5,-48(fp)
    3c20:	2821883a 	mov	r16,r5
    3c24:	0023883a 	mov	r17,zero
    3c28:	e17ff917 	ldw	r5,-28(fp)
    3c2c:	d9400715 	stw	r5,28(sp)
    3c30:	e17ff817 	ldw	r5,-32(fp)
    3c34:	d9400615 	stw	r5,24(sp)
    3c38:	e17ff717 	ldw	r5,-36(fp)
    3c3c:	d9400515 	stw	r5,20(sp)
    3c40:	dc000315 	stw	r16,12(sp)
    3c44:	dc400415 	stw	r17,16(sp)
    3c48:	d9000215 	stw	r4,8(sp)
    3c4c:	d8800015 	stw	r2,0(sp)
    3c50:	d8c00115 	stw	r3,4(sp)
    3c54:	e1ffe617 	ldw	r7,-104(fp)
    3c58:	e1bff517 	ldw	r6,-44(fp)
    3c5c:	e17fe717 	ldw	r5,-100(fp)
    3c60:	e13fe817 	ldw	r4,-96(fp)
    3c64:	00022640 	call	2264 <_ntoa_long_long>
    3c68:	e0bff515 	stw	r2,-44(fp)
          if (flags & FLAGS_LONG_LONG) {
    3c6c:	0000b006 	br	3f30 <_vsnprintf+0xb64>
#endif
          }
          else if (flags & FLAGS_LONG) {
    3c70:	e0bff917 	ldw	r2,-28(fp)
    3c74:	1080400c 	andi	r2,r2,256
    3c78:	10001d26 	beq	r2,zero,3cf0 <_vsnprintf+0x924>
            const long value = va_arg(va, long);
    3c7c:	e0800217 	ldw	r2,8(fp)
    3c80:	10c00104 	addi	r3,r2,4
    3c84:	e0c00215 	stw	r3,8(fp)
    3c88:	10800017 	ldw	r2,0(r2)
    3c8c:	e0bfeb15 	stw	r2,-84(fp)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3c90:	e0bfeb17 	ldw	r2,-84(fp)
    3c94:	1000010e 	bge	r2,zero,3c9c <_vsnprintf+0x8d0>
    3c98:	0085c83a 	sub	r2,zero,r2
    3c9c:	1009883a 	mov	r4,r2
    3ca0:	e0bfeb17 	ldw	r2,-84(fp)
    3ca4:	1004d7fa 	srli	r2,r2,31
    3ca8:	10803fcc 	andi	r2,r2,255
    3cac:	e0fff917 	ldw	r3,-28(fp)
    3cb0:	d8c00515 	stw	r3,20(sp)
    3cb4:	e0fff817 	ldw	r3,-32(fp)
    3cb8:	d8c00415 	stw	r3,16(sp)
    3cbc:	e0fff717 	ldw	r3,-36(fp)
    3cc0:	d8c00315 	stw	r3,12(sp)
    3cc4:	e0fff417 	ldw	r3,-48(fp)
    3cc8:	d8c00215 	stw	r3,8(sp)
    3ccc:	d8800115 	stw	r2,4(sp)
    3cd0:	d9000015 	stw	r4,0(sp)
    3cd4:	e1ffe617 	ldw	r7,-104(fp)
    3cd8:	e1bff517 	ldw	r6,-44(fp)
    3cdc:	e17fe717 	ldw	r5,-100(fp)
    3ce0:	e13fe817 	ldw	r4,-96(fp)
    3ce4:	000211c0 	call	211c <_ntoa_long>
    3ce8:	e0bff515 	stw	r2,-44(fp)
          if (flags & FLAGS_LONG_LONG) {
    3cec:	00009006 	br	3f30 <_vsnprintf+0xb64>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3cf0:	e0bff917 	ldw	r2,-28(fp)
    3cf4:	1080100c 	andi	r2,r2,64
    3cf8:	10000826 	beq	r2,zero,3d1c <_vsnprintf+0x950>
    3cfc:	e0800217 	ldw	r2,8(fp)
    3d00:	10c00104 	addi	r3,r2,4
    3d04:	e0c00215 	stw	r3,8(fp)
    3d08:	10800017 	ldw	r2,0(r2)
    3d0c:	10803fcc 	andi	r2,r2,255
    3d10:	1080201c 	xori	r2,r2,128
    3d14:	10bfe004 	addi	r2,r2,-128
    3d18:	00000f06 	br	3d58 <_vsnprintf+0x98c>
    3d1c:	e0bff917 	ldw	r2,-28(fp)
    3d20:	1080200c 	andi	r2,r2,128
    3d24:	10000826 	beq	r2,zero,3d48 <_vsnprintf+0x97c>
    3d28:	e0800217 	ldw	r2,8(fp)
    3d2c:	10c00104 	addi	r3,r2,4
    3d30:	e0c00215 	stw	r3,8(fp)
    3d34:	10800017 	ldw	r2,0(r2)
    3d38:	10bfffcc 	andi	r2,r2,65535
    3d3c:	10a0001c 	xori	r2,r2,32768
    3d40:	10a00004 	addi	r2,r2,-32768
    3d44:	00000406 	br	3d58 <_vsnprintf+0x98c>
    3d48:	e0800217 	ldw	r2,8(fp)
    3d4c:	10c00104 	addi	r3,r2,4
    3d50:	e0c00215 	stw	r3,8(fp)
    3d54:	10800017 	ldw	r2,0(r2)
    3d58:	e0bfec15 	stw	r2,-80(fp)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3d5c:	e0bfec17 	ldw	r2,-80(fp)
    3d60:	1000010e 	bge	r2,zero,3d68 <_vsnprintf+0x99c>
    3d64:	0085c83a 	sub	r2,zero,r2
    3d68:	1009883a 	mov	r4,r2
    3d6c:	e0bfec17 	ldw	r2,-80(fp)
    3d70:	1004d7fa 	srli	r2,r2,31
    3d74:	10803fcc 	andi	r2,r2,255
    3d78:	e0fff917 	ldw	r3,-28(fp)
    3d7c:	d8c00515 	stw	r3,20(sp)
    3d80:	e0fff817 	ldw	r3,-32(fp)
    3d84:	d8c00415 	stw	r3,16(sp)
    3d88:	e0fff717 	ldw	r3,-36(fp)
    3d8c:	d8c00315 	stw	r3,12(sp)
    3d90:	e0fff417 	ldw	r3,-48(fp)
    3d94:	d8c00215 	stw	r3,8(sp)
    3d98:	d8800115 	stw	r2,4(sp)
    3d9c:	d9000015 	stw	r4,0(sp)
    3da0:	e1ffe617 	ldw	r7,-104(fp)
    3da4:	e1bff517 	ldw	r6,-44(fp)
    3da8:	e17fe717 	ldw	r5,-100(fp)
    3dac:	e13fe817 	ldw	r4,-96(fp)
    3db0:	000211c0 	call	211c <_ntoa_long>
    3db4:	e0bff515 	stw	r2,-44(fp)
          if (flags & FLAGS_LONG_LONG) {
    3db8:	00005d06 	br	3f30 <_vsnprintf+0xb64>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    3dbc:	e0bff917 	ldw	r2,-28(fp)
    3dc0:	1080800c 	andi	r2,r2,512
    3dc4:	10001a26 	beq	r2,zero,3e30 <_vsnprintf+0xa64>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    3dc8:	e1000217 	ldw	r4,8(fp)
    3dcc:	20800204 	addi	r2,r4,8
    3dd0:	e0800215 	stw	r2,8(fp)
    3dd4:	20800017 	ldw	r2,0(r4)
    3dd8:	20c00117 	ldw	r3,4(r4)
    3ddc:	e13ff417 	ldw	r4,-48(fp)
    3de0:	2025883a 	mov	r18,r4
    3de4:	0027883a 	mov	r19,zero
    3de8:	e13ff917 	ldw	r4,-28(fp)
    3dec:	d9000715 	stw	r4,28(sp)
    3df0:	e13ff817 	ldw	r4,-32(fp)
    3df4:	d9000615 	stw	r4,24(sp)
    3df8:	e13ff717 	ldw	r4,-36(fp)
    3dfc:	d9000515 	stw	r4,20(sp)
    3e00:	dc800315 	stw	r18,12(sp)
    3e04:	dcc00415 	stw	r19,16(sp)
    3e08:	d8000215 	stw	zero,8(sp)
    3e0c:	d8800015 	stw	r2,0(sp)
    3e10:	d8c00115 	stw	r3,4(sp)
    3e14:	e1ffe617 	ldw	r7,-104(fp)
    3e18:	e1bff517 	ldw	r6,-44(fp)
    3e1c:	e17fe717 	ldw	r5,-100(fp)
    3e20:	e13fe817 	ldw	r4,-96(fp)
    3e24:	00022640 	call	2264 <_ntoa_long_long>
    3e28:	e0bff515 	stw	r2,-44(fp)
    3e2c:	00004006 	br	3f30 <_vsnprintf+0xb64>
#endif
          }
          else if (flags & FLAGS_LONG) {
    3e30:	e0bff917 	ldw	r2,-28(fp)
    3e34:	1080400c 	andi	r2,r2,256
    3e38:	10001526 	beq	r2,zero,3e90 <_vsnprintf+0xac4>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3e3c:	e0800217 	ldw	r2,8(fp)
    3e40:	10c00104 	addi	r3,r2,4
    3e44:	e0c00215 	stw	r3,8(fp)
    3e48:	10800017 	ldw	r2,0(r2)
    3e4c:	e0fff917 	ldw	r3,-28(fp)
    3e50:	d8c00515 	stw	r3,20(sp)
    3e54:	e0fff817 	ldw	r3,-32(fp)
    3e58:	d8c00415 	stw	r3,16(sp)
    3e5c:	e0fff717 	ldw	r3,-36(fp)
    3e60:	d8c00315 	stw	r3,12(sp)
    3e64:	e0fff417 	ldw	r3,-48(fp)
    3e68:	d8c00215 	stw	r3,8(sp)
    3e6c:	d8000115 	stw	zero,4(sp)
    3e70:	d8800015 	stw	r2,0(sp)
    3e74:	e1ffe617 	ldw	r7,-104(fp)
    3e78:	e1bff517 	ldw	r6,-44(fp)
    3e7c:	e17fe717 	ldw	r5,-100(fp)
    3e80:	e13fe817 	ldw	r4,-96(fp)
    3e84:	000211c0 	call	211c <_ntoa_long>
    3e88:	e0bff515 	stw	r2,-44(fp)
    3e8c:	00002806 	br	3f30 <_vsnprintf+0xb64>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    3e90:	e0bff917 	ldw	r2,-28(fp)
    3e94:	1080100c 	andi	r2,r2,64
    3e98:	10000626 	beq	r2,zero,3eb4 <_vsnprintf+0xae8>
    3e9c:	e0800217 	ldw	r2,8(fp)
    3ea0:	10c00104 	addi	r3,r2,4
    3ea4:	e0c00215 	stw	r3,8(fp)
    3ea8:	10800017 	ldw	r2,0(r2)
    3eac:	10803fcc 	andi	r2,r2,255
    3eb0:	00000d06 	br	3ee8 <_vsnprintf+0xb1c>
    3eb4:	e0bff917 	ldw	r2,-28(fp)
    3eb8:	1080200c 	andi	r2,r2,128
    3ebc:	10000626 	beq	r2,zero,3ed8 <_vsnprintf+0xb0c>
    3ec0:	e0800217 	ldw	r2,8(fp)
    3ec4:	10c00104 	addi	r3,r2,4
    3ec8:	e0c00215 	stw	r3,8(fp)
    3ecc:	10800017 	ldw	r2,0(r2)
    3ed0:	10bfffcc 	andi	r2,r2,65535
    3ed4:	00000406 	br	3ee8 <_vsnprintf+0xb1c>
    3ed8:	e0800217 	ldw	r2,8(fp)
    3edc:	10c00104 	addi	r3,r2,4
    3ee0:	e0c00215 	stw	r3,8(fp)
    3ee4:	10800017 	ldw	r2,0(r2)
    3ee8:	e0bfed15 	stw	r2,-76(fp)
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3eec:	e0bff917 	ldw	r2,-28(fp)
    3ef0:	d8800515 	stw	r2,20(sp)
    3ef4:	e0bff817 	ldw	r2,-32(fp)
    3ef8:	d8800415 	stw	r2,16(sp)
    3efc:	e0bff717 	ldw	r2,-36(fp)
    3f00:	d8800315 	stw	r2,12(sp)
    3f04:	e0bff417 	ldw	r2,-48(fp)
    3f08:	d8800215 	stw	r2,8(sp)
    3f0c:	d8000115 	stw	zero,4(sp)
    3f10:	e0bfed17 	ldw	r2,-76(fp)
    3f14:	d8800015 	stw	r2,0(sp)
    3f18:	e1ffe617 	ldw	r7,-104(fp)
    3f1c:	e1bff517 	ldw	r6,-44(fp)
    3f20:	e17fe717 	ldw	r5,-100(fp)
    3f24:	e13fe817 	ldw	r4,-96(fp)
    3f28:	000211c0 	call	211c <_ntoa_long>
    3f2c:	e0bff515 	stw	r2,-44(fp)
          }
        }
        format++;
    3f30:	e0bfe517 	ldw	r2,-108(fp)
    3f34:	10800044 	addi	r2,r2,1
    3f38:	e0bfe515 	stw	r2,-108(fp)
        break;
    3f3c:	00014606 	br	4458 <_vsnprintf+0x108c>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    3f40:	e0bfe517 	ldw	r2,-108(fp)
    3f44:	10800003 	ldbu	r2,0(r2)
    3f48:	10803fcc 	andi	r2,r2,255
    3f4c:	1080201c 	xori	r2,r2,128
    3f50:	10bfe004 	addi	r2,r2,-128
    3f54:	10801198 	cmpnei	r2,r2,70
    3f58:	1000031e 	bne	r2,zero,3f68 <_vsnprintf+0xb9c>
    3f5c:	e0bff917 	ldw	r2,-28(fp)
    3f60:	10800814 	ori	r2,r2,32
    3f64:	e0bff915 	stw	r2,-28(fp)
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3f68:	e1000217 	ldw	r4,8(fp)
    3f6c:	20800204 	addi	r2,r4,8
    3f70:	e0800215 	stw	r2,8(fp)
    3f74:	20800017 	ldw	r2,0(r4)
    3f78:	20c00117 	ldw	r3,4(r4)
    3f7c:	e13ff917 	ldw	r4,-28(fp)
    3f80:	d9000415 	stw	r4,16(sp)
    3f84:	e13ff817 	ldw	r4,-32(fp)
    3f88:	d9000315 	stw	r4,12(sp)
    3f8c:	e13ff717 	ldw	r4,-36(fp)
    3f90:	d9000215 	stw	r4,8(sp)
    3f94:	d8800015 	stw	r2,0(sp)
    3f98:	d8c00115 	stw	r3,4(sp)
    3f9c:	e1ffe617 	ldw	r7,-104(fp)
    3fa0:	e1bff517 	ldw	r6,-44(fp)
    3fa4:	e17fe717 	ldw	r5,-100(fp)
    3fa8:	e13fe817 	ldw	r4,-96(fp)
    3fac:	00023f40 	call	23f4 <_ftoa>
    3fb0:	e0bff515 	stw	r2,-44(fp)
        format++;
    3fb4:	e0bfe517 	ldw	r2,-108(fp)
    3fb8:	10800044 	addi	r2,r2,1
    3fbc:	e0bfe515 	stw	r2,-108(fp)
        break;
    3fc0:	00012506 	br	4458 <_vsnprintf+0x108c>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    3fc4:	e0bfe517 	ldw	r2,-108(fp)
    3fc8:	10800003 	ldbu	r2,0(r2)
    3fcc:	10803fcc 	andi	r2,r2,255
    3fd0:	1080201c 	xori	r2,r2,128
    3fd4:	10bfe004 	addi	r2,r2,-128
    3fd8:	108019e0 	cmpeqi	r2,r2,103
    3fdc:	1000071e 	bne	r2,zero,3ffc <_vsnprintf+0xc30>
    3fe0:	e0bfe517 	ldw	r2,-108(fp)
    3fe4:	10800003 	ldbu	r2,0(r2)
    3fe8:	10803fcc 	andi	r2,r2,255
    3fec:	1080201c 	xori	r2,r2,128
    3ff0:	10bfe004 	addi	r2,r2,-128
    3ff4:	108011d8 	cmpnei	r2,r2,71
    3ff8:	1000031e 	bne	r2,zero,4008 <_vsnprintf+0xc3c>
    3ffc:	e0bff917 	ldw	r2,-28(fp)
    4000:	10820014 	ori	r2,r2,2048
    4004:	e0bff915 	stw	r2,-28(fp)
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    4008:	e0bfe517 	ldw	r2,-108(fp)
    400c:	10800003 	ldbu	r2,0(r2)
    4010:	10803fcc 	andi	r2,r2,255
    4014:	1080201c 	xori	r2,r2,128
    4018:	10bfe004 	addi	r2,r2,-128
    401c:	10801160 	cmpeqi	r2,r2,69
    4020:	1000071e 	bne	r2,zero,4040 <_vsnprintf+0xc74>
    4024:	e0bfe517 	ldw	r2,-108(fp)
    4028:	10800003 	ldbu	r2,0(r2)
    402c:	10803fcc 	andi	r2,r2,255
    4030:	1080201c 	xori	r2,r2,128
    4034:	10bfe004 	addi	r2,r2,-128
    4038:	108011d8 	cmpnei	r2,r2,71
    403c:	1000031e 	bne	r2,zero,404c <_vsnprintf+0xc80>
    4040:	e0bff917 	ldw	r2,-28(fp)
    4044:	10800814 	ori	r2,r2,32
    4048:	e0bff915 	stw	r2,-28(fp)
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    404c:	e1000217 	ldw	r4,8(fp)
    4050:	20800204 	addi	r2,r4,8
    4054:	e0800215 	stw	r2,8(fp)
    4058:	20800017 	ldw	r2,0(r4)
    405c:	20c00117 	ldw	r3,4(r4)
    4060:	e13ff917 	ldw	r4,-28(fp)
    4064:	d9000415 	stw	r4,16(sp)
    4068:	e13ff817 	ldw	r4,-32(fp)
    406c:	d9000315 	stw	r4,12(sp)
    4070:	e13ff717 	ldw	r4,-36(fp)
    4074:	d9000215 	stw	r4,8(sp)
    4078:	d8800015 	stw	r2,0(sp)
    407c:	d8c00115 	stw	r3,4(sp)
    4080:	e1ffe617 	ldw	r7,-104(fp)
    4084:	e1bff517 	ldw	r6,-44(fp)
    4088:	e17fe717 	ldw	r5,-100(fp)
    408c:	e13fe817 	ldw	r4,-96(fp)
    4090:	0002b200 	call	2b20 <_etoa>
    4094:	e0bff515 	stw	r2,-44(fp)
        format++;
    4098:	e0bfe517 	ldw	r2,-108(fp)
    409c:	10800044 	addi	r2,r2,1
    40a0:	e0bfe515 	stw	r2,-108(fp)
        break;
    40a4:	0000ec06 	br	4458 <_vsnprintf+0x108c>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    40a8:	00800044 	movi	r2,1
    40ac:	e0bff315 	stw	r2,-52(fp)
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    40b0:	e0bff917 	ldw	r2,-28(fp)
    40b4:	1080008c 	andi	r2,r2,2
    40b8:	10000f1e 	bne	r2,zero,40f8 <_vsnprintf+0xd2c>
          while (l++ < width) {
    40bc:	00000906 	br	40e4 <_vsnprintf+0xd18>
            out(' ', buffer, idx++, maxlen);
    40c0:	e0bff517 	ldw	r2,-44(fp)
    40c4:	10c00044 	addi	r3,r2,1
    40c8:	e0fff515 	stw	r3,-44(fp)
    40cc:	e0ffe817 	ldw	r3,-96(fp)
    40d0:	e1ffe617 	ldw	r7,-104(fp)
    40d4:	100d883a 	mov	r6,r2
    40d8:	e17fe717 	ldw	r5,-100(fp)
    40dc:	01000804 	movi	r4,32
    40e0:	183ee83a 	callr	r3
          while (l++ < width) {
    40e4:	e0bff317 	ldw	r2,-52(fp)
    40e8:	10c00044 	addi	r3,r2,1
    40ec:	e0fff315 	stw	r3,-52(fp)
    40f0:	e0fff817 	ldw	r3,-32(fp)
    40f4:	10fff236 	bltu	r2,r3,40c0 <_vsnprintf+0xcf4>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    40f8:	e0800217 	ldw	r2,8(fp)
    40fc:	10c00104 	addi	r3,r2,4
    4100:	e0c00215 	stw	r3,8(fp)
    4104:	10800017 	ldw	r2,0(r2)
    4108:	11003fcc 	andi	r4,r2,255
    410c:	2100201c 	xori	r4,r4,128
    4110:	213fe004 	addi	r4,r4,-128
    4114:	e0bff517 	ldw	r2,-44(fp)
    4118:	10c00044 	addi	r3,r2,1
    411c:	e0fff515 	stw	r3,-44(fp)
    4120:	e0ffe817 	ldw	r3,-96(fp)
    4124:	e1ffe617 	ldw	r7,-104(fp)
    4128:	100d883a 	mov	r6,r2
    412c:	e17fe717 	ldw	r5,-100(fp)
    4130:	183ee83a 	callr	r3
        // post padding
        if (flags & FLAGS_LEFT) {
    4134:	e0bff917 	ldw	r2,-28(fp)
    4138:	1080008c 	andi	r2,r2,2
    413c:	10000f26 	beq	r2,zero,417c <_vsnprintf+0xdb0>
          while (l++ < width) {
    4140:	00000906 	br	4168 <_vsnprintf+0xd9c>
            out(' ', buffer, idx++, maxlen);
    4144:	e0bff517 	ldw	r2,-44(fp)
    4148:	10c00044 	addi	r3,r2,1
    414c:	e0fff515 	stw	r3,-44(fp)
    4150:	e0ffe817 	ldw	r3,-96(fp)
    4154:	e1ffe617 	ldw	r7,-104(fp)
    4158:	100d883a 	mov	r6,r2
    415c:	e17fe717 	ldw	r5,-100(fp)
    4160:	01000804 	movi	r4,32
    4164:	183ee83a 	callr	r3
          while (l++ < width) {
    4168:	e0bff317 	ldw	r2,-52(fp)
    416c:	10c00044 	addi	r3,r2,1
    4170:	e0fff315 	stw	r3,-52(fp)
    4174:	e0fff817 	ldw	r3,-32(fp)
    4178:	10fff236 	bltu	r2,r3,4144 <_vsnprintf+0xd78>
          }
        }
        format++;
    417c:	e0bfe517 	ldw	r2,-108(fp)
    4180:	10800044 	addi	r2,r2,1
    4184:	e0bfe515 	stw	r2,-108(fp)
        break;
    4188:	0000b306 	br	4458 <_vsnprintf+0x108c>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    418c:	e0800217 	ldw	r2,8(fp)
    4190:	10c00104 	addi	r3,r2,4
    4194:	e0c00215 	stw	r3,8(fp)
    4198:	10800017 	ldw	r2,0(r2)
    419c:	e0bff215 	stw	r2,-56(fp)
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    41a0:	e0bff717 	ldw	r2,-36(fp)
    41a4:	10000226 	beq	r2,zero,41b0 <_vsnprintf+0xde4>
    41a8:	e0bff717 	ldw	r2,-36(fp)
    41ac:	00000106 	br	41b4 <_vsnprintf+0xde8>
    41b0:	00bfffc4 	movi	r2,-1
    41b4:	100b883a 	mov	r5,r2
    41b8:	e13ff217 	ldw	r4,-56(fp)
    41bc:	0001b840 	call	1b84 <_strnlen_s>
    41c0:	e0bff115 	stw	r2,-60(fp)
        // pre padding
        if (flags & FLAGS_PRECISION) {
    41c4:	e0bff917 	ldw	r2,-28(fp)
    41c8:	1081000c 	andi	r2,r2,1024
    41cc:	10000526 	beq	r2,zero,41e4 <_vsnprintf+0xe18>
          l = (l < precision ? l : precision);
    41d0:	e0fff117 	ldw	r3,-60(fp)
    41d4:	e0bff717 	ldw	r2,-36(fp)
    41d8:	1880012e 	bgeu	r3,r2,41e0 <_vsnprintf+0xe14>
    41dc:	1805883a 	mov	r2,r3
    41e0:	e0bff115 	stw	r2,-60(fp)
        }
        if (!(flags & FLAGS_LEFT)) {
    41e4:	e0bff917 	ldw	r2,-28(fp)
    41e8:	1080008c 	andi	r2,r2,2
    41ec:	10001f1e 	bne	r2,zero,426c <_vsnprintf+0xea0>
          while (l++ < width) {
    41f0:	00000906 	br	4218 <_vsnprintf+0xe4c>
            out(' ', buffer, idx++, maxlen);
    41f4:	e0bff517 	ldw	r2,-44(fp)
    41f8:	10c00044 	addi	r3,r2,1
    41fc:	e0fff515 	stw	r3,-44(fp)
    4200:	e0ffe817 	ldw	r3,-96(fp)
    4204:	e1ffe617 	ldw	r7,-104(fp)
    4208:	100d883a 	mov	r6,r2
    420c:	e17fe717 	ldw	r5,-100(fp)
    4210:	01000804 	movi	r4,32
    4214:	183ee83a 	callr	r3
          while (l++ < width) {
    4218:	e0bff117 	ldw	r2,-60(fp)
    421c:	10c00044 	addi	r3,r2,1
    4220:	e0fff115 	stw	r3,-60(fp)
    4224:	e0fff817 	ldw	r3,-32(fp)
    4228:	10fff236 	bltu	r2,r3,41f4 <_vsnprintf+0xe28>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    422c:	00000f06 	br	426c <_vsnprintf+0xea0>
          out(*(p++), buffer, idx++, maxlen);
    4230:	e0bff217 	ldw	r2,-56(fp)
    4234:	10c00044 	addi	r3,r2,1
    4238:	e0fff215 	stw	r3,-56(fp)
    423c:	10800003 	ldbu	r2,0(r2)
    4240:	11003fcc 	andi	r4,r2,255
    4244:	2100201c 	xori	r4,r4,128
    4248:	213fe004 	addi	r4,r4,-128
    424c:	e0bff517 	ldw	r2,-44(fp)
    4250:	10c00044 	addi	r3,r2,1
    4254:	e0fff515 	stw	r3,-44(fp)
    4258:	e0ffe817 	ldw	r3,-96(fp)
    425c:	e1ffe617 	ldw	r7,-104(fp)
    4260:	100d883a 	mov	r6,r2
    4264:	e17fe717 	ldw	r5,-100(fp)
    4268:	183ee83a 	callr	r3
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    426c:	e0bff217 	ldw	r2,-56(fp)
    4270:	10800003 	ldbu	r2,0(r2)
    4274:	10803fcc 	andi	r2,r2,255
    4278:	1080201c 	xori	r2,r2,128
    427c:	10bfe004 	addi	r2,r2,-128
    4280:	10000726 	beq	r2,zero,42a0 <_vsnprintf+0xed4>
    4284:	e0bff917 	ldw	r2,-28(fp)
    4288:	1081000c 	andi	r2,r2,1024
    428c:	103fe826 	beq	r2,zero,4230 <_vsnprintf+0xe64>
    4290:	e0bff717 	ldw	r2,-36(fp)
    4294:	10ffffc4 	addi	r3,r2,-1
    4298:	e0fff715 	stw	r3,-36(fp)
    429c:	103fe41e 	bne	r2,zero,4230 <_vsnprintf+0xe64>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    42a0:	e0bff917 	ldw	r2,-28(fp)
    42a4:	1080008c 	andi	r2,r2,2
    42a8:	10000f26 	beq	r2,zero,42e8 <_vsnprintf+0xf1c>
          while (l++ < width) {
    42ac:	00000906 	br	42d4 <_vsnprintf+0xf08>
            out(' ', buffer, idx++, maxlen);
    42b0:	e0bff517 	ldw	r2,-44(fp)
    42b4:	10c00044 	addi	r3,r2,1
    42b8:	e0fff515 	stw	r3,-44(fp)
    42bc:	e0ffe817 	ldw	r3,-96(fp)
    42c0:	e1ffe617 	ldw	r7,-104(fp)
    42c4:	100d883a 	mov	r6,r2
    42c8:	e17fe717 	ldw	r5,-100(fp)
    42cc:	01000804 	movi	r4,32
    42d0:	183ee83a 	callr	r3
          while (l++ < width) {
    42d4:	e0bff117 	ldw	r2,-60(fp)
    42d8:	10c00044 	addi	r3,r2,1
    42dc:	e0fff115 	stw	r3,-60(fp)
    42e0:	e0fff817 	ldw	r3,-32(fp)
    42e4:	10fff236 	bltu	r2,r3,42b0 <_vsnprintf+0xee4>
          }
        }
        format++;
    42e8:	e0bfe517 	ldw	r2,-108(fp)
    42ec:	10800044 	addi	r2,r2,1
    42f0:	e0bfe515 	stw	r2,-108(fp)
        break;
    42f4:	00005806 	br	4458 <_vsnprintf+0x108c>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    42f8:	00800204 	movi	r2,8
    42fc:	e0bff815 	stw	r2,-32(fp)
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    4300:	e0bff917 	ldw	r2,-28(fp)
    4304:	10800854 	ori	r2,r2,33
    4308:	e0bff915 	stw	r2,-28(fp)
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    430c:	e03feec5 	stb	zero,-69(fp)
        if (is_ll) {
    4310:	e0bfeec3 	ldbu	r2,-69(fp)
    4314:	10001926 	beq	r2,zero,437c <_vsnprintf+0xfb0>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
    4318:	e0800217 	ldw	r2,8(fp)
    431c:	10c00104 	addi	r3,r2,4
    4320:	e0c00215 	stw	r3,8(fp)
    4324:	10800017 	ldw	r2,0(r2)
    4328:	1029883a 	mov	r20,r2
    432c:	002b883a 	mov	r21,zero
    4330:	e0bff917 	ldw	r2,-28(fp)
    4334:	d8800715 	stw	r2,28(sp)
    4338:	e0bff817 	ldw	r2,-32(fp)
    433c:	d8800615 	stw	r2,24(sp)
    4340:	e0bff717 	ldw	r2,-36(fp)
    4344:	d8800515 	stw	r2,20(sp)
    4348:	00800404 	movi	r2,16
    434c:	d8800315 	stw	r2,12(sp)
    4350:	d8000415 	stw	zero,16(sp)
    4354:	d8000215 	stw	zero,8(sp)
    4358:	dd000015 	stw	r20,0(sp)
    435c:	dd400115 	stw	r21,4(sp)
    4360:	e1ffe617 	ldw	r7,-104(fp)
    4364:	e1bff517 	ldw	r6,-44(fp)
    4368:	e17fe717 	ldw	r5,-100(fp)
    436c:	e13fe817 	ldw	r4,-96(fp)
    4370:	00022640 	call	2264 <_ntoa_long_long>
    4374:	e0bff515 	stw	r2,-44(fp)
    4378:	00001506 	br	43d0 <_vsnprintf+0x1004>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    437c:	e0800217 	ldw	r2,8(fp)
    4380:	10c00104 	addi	r3,r2,4
    4384:	e0c00215 	stw	r3,8(fp)
    4388:	10800017 	ldw	r2,0(r2)
    438c:	1007883a 	mov	r3,r2
    4390:	e0bff917 	ldw	r2,-28(fp)
    4394:	d8800515 	stw	r2,20(sp)
    4398:	e0bff817 	ldw	r2,-32(fp)
    439c:	d8800415 	stw	r2,16(sp)
    43a0:	e0bff717 	ldw	r2,-36(fp)
    43a4:	d8800315 	stw	r2,12(sp)
    43a8:	00800404 	movi	r2,16
    43ac:	d8800215 	stw	r2,8(sp)
    43b0:	d8000115 	stw	zero,4(sp)
    43b4:	d8c00015 	stw	r3,0(sp)
    43b8:	e1ffe617 	ldw	r7,-104(fp)
    43bc:	e1bff517 	ldw	r6,-44(fp)
    43c0:	e17fe717 	ldw	r5,-100(fp)
    43c4:	e13fe817 	ldw	r4,-96(fp)
    43c8:	000211c0 	call	211c <_ntoa_long>
    43cc:	e0bff515 	stw	r2,-44(fp)
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    43d0:	e0bfe517 	ldw	r2,-108(fp)
    43d4:	10800044 	addi	r2,r2,1
    43d8:	e0bfe515 	stw	r2,-108(fp)
        break;
    43dc:	00001e06 	br	4458 <_vsnprintf+0x108c>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    43e0:	e0bff517 	ldw	r2,-44(fp)
    43e4:	10c00044 	addi	r3,r2,1
    43e8:	e0fff515 	stw	r3,-44(fp)
    43ec:	e0ffe817 	ldw	r3,-96(fp)
    43f0:	e1ffe617 	ldw	r7,-104(fp)
    43f4:	100d883a 	mov	r6,r2
    43f8:	e17fe717 	ldw	r5,-100(fp)
    43fc:	01000944 	movi	r4,37
    4400:	183ee83a 	callr	r3
        format++;
    4404:	e0bfe517 	ldw	r2,-108(fp)
    4408:	10800044 	addi	r2,r2,1
    440c:	e0bfe515 	stw	r2,-108(fp)
        break;
    4410:	00001106 	br	4458 <_vsnprintf+0x108c>

      default :
        out(*format, buffer, idx++, maxlen);
    4414:	e0bfe517 	ldw	r2,-108(fp)
    4418:	10800003 	ldbu	r2,0(r2)
    441c:	11003fcc 	andi	r4,r2,255
    4420:	2100201c 	xori	r4,r4,128
    4424:	213fe004 	addi	r4,r4,-128
    4428:	e0bff517 	ldw	r2,-44(fp)
    442c:	10c00044 	addi	r3,r2,1
    4430:	e0fff515 	stw	r3,-44(fp)
    4434:	e0ffe817 	ldw	r3,-96(fp)
    4438:	e1ffe617 	ldw	r7,-104(fp)
    443c:	100d883a 	mov	r6,r2
    4440:	e17fe717 	ldw	r5,-100(fp)
    4444:	183ee83a 	callr	r3
        format++;
    4448:	e0bfe517 	ldw	r2,-108(fp)
    444c:	10800044 	addi	r2,r2,1
    4450:	e0bfe515 	stw	r2,-108(fp)
        break;
    4454:	0001883a 	nop
  while (*format)
    4458:	e0bfe517 	ldw	r2,-108(fp)
    445c:	10800003 	ldbu	r2,0(r2)
    4460:	10803fcc 	andi	r2,r2,255
    4464:	1080201c 	xori	r2,r2,128
    4468:	10bfe004 	addi	r2,r2,-128
    446c:	103bec1e 	bne	r2,zero,3420 <_vsnprintf+0x54>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    4470:	e0fff517 	ldw	r3,-44(fp)
    4474:	e0bfe617 	ldw	r2,-104(fp)
    4478:	18800336 	bltu	r3,r2,4488 <_vsnprintf+0x10bc>
    447c:	e0bfe617 	ldw	r2,-104(fp)
    4480:	10bfffc4 	addi	r2,r2,-1
    4484:	00000106 	br	448c <_vsnprintf+0x10c0>
    4488:	e0bff517 	ldw	r2,-44(fp)
    448c:	e0ffe817 	ldw	r3,-96(fp)
    4490:	e1ffe617 	ldw	r7,-104(fp)
    4494:	100d883a 	mov	r6,r2
    4498:	e17fe717 	ldw	r5,-100(fp)
    449c:	0009883a 	mov	r4,zero
    44a0:	183ee83a 	callr	r3

  // return written chars without terminating \0
  return (int)idx;
    44a4:	e0bff517 	ldw	r2,-44(fp)
}
    44a8:	e6fffa04 	addi	sp,fp,-24
    44ac:	dfc00717 	ldw	ra,28(sp)
    44b0:	df000617 	ldw	fp,24(sp)
    44b4:	dd400517 	ldw	r21,20(sp)
    44b8:	dd000417 	ldw	r20,16(sp)
    44bc:	dcc00317 	ldw	r19,12(sp)
    44c0:	dc800217 	ldw	r18,8(sp)
    44c4:	dc400117 	ldw	r17,4(sp)
    44c8:	dc000017 	ldw	r16,0(sp)
    44cc:	dec00804 	addi	sp,sp,32
    44d0:	f800283a 	ret

000044d4 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    44d4:	defff604 	addi	sp,sp,-40
    44d8:	dfc00615 	stw	ra,24(sp)
    44dc:	df000515 	stw	fp,20(sp)
    44e0:	df000504 	addi	fp,sp,20
    44e4:	e13ffc15 	stw	r4,-16(fp)
    44e8:	e1400215 	stw	r5,8(fp)
    44ec:	e1800315 	stw	r6,12(fp)
    44f0:	e1c00415 	stw	r7,16(fp)
  va_list va;
  va_start(va, format);
    44f4:	e0800204 	addi	r2,fp,8
    44f8:	e0bffe15 	stw	r2,-8(fp)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    44fc:	e0bffe17 	ldw	r2,-8(fp)
    4500:	e0fffdc4 	addi	r3,fp,-9
    4504:	d8800015 	stw	r2,0(sp)
    4508:	e1fffc17 	ldw	r7,-16(fp)
    450c:	01bfffc4 	movi	r6,-1
    4510:	180b883a 	mov	r5,r3
    4514:	01000034 	movhi	r4,0
    4518:	2106b504 	addi	r4,r4,6868
    451c:	00033cc0 	call	33cc <_vsnprintf>
    4520:	e0bfff15 	stw	r2,-4(fp)
  va_end(va);
  return ret;
    4524:	e0bfff17 	ldw	r2,-4(fp)
}
    4528:	e037883a 	mov	sp,fp
    452c:	dfc00117 	ldw	ra,4(sp)
    4530:	df000017 	ldw	fp,0(sp)
    4534:	dec00504 	addi	sp,sp,20
    4538:	f800283a 	ret

0000453c <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
    453c:	defff704 	addi	sp,sp,-36
    4540:	dfc00615 	stw	ra,24(sp)
    4544:	df000515 	stw	fp,20(sp)
    4548:	df000504 	addi	fp,sp,20
    454c:	e13ffd15 	stw	r4,-12(fp)
    4550:	e17ffc15 	stw	r5,-16(fp)
    4554:	e1800215 	stw	r6,8(fp)
    4558:	e1c00315 	stw	r7,12(fp)
  va_list va;
  va_start(va, format);
    455c:	e0800204 	addi	r2,fp,8
    4560:	e0bffe15 	stw	r2,-8(fp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    4564:	e0bffe17 	ldw	r2,-8(fp)
    4568:	d8800015 	stw	r2,0(sp)
    456c:	e1fffc17 	ldw	r7,-16(fp)
    4570:	01bfffc4 	movi	r6,-1
    4574:	e17ffd17 	ldw	r5,-12(fp)
    4578:	01000034 	movhi	r4,0
    457c:	21069304 	addi	r4,r4,6732
    4580:	00033cc0 	call	33cc <_vsnprintf>
    4584:	e0bfff15 	stw	r2,-4(fp)
  va_end(va);
  return ret;
    4588:	e0bfff17 	ldw	r2,-4(fp)
}
    458c:	e037883a 	mov	sp,fp
    4590:	dfc00117 	ldw	ra,4(sp)
    4594:	df000017 	ldw	fp,0(sp)
    4598:	dec00404 	addi	sp,sp,16
    459c:	f800283a 	ret

000045a0 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
    45a0:	defff704 	addi	sp,sp,-36
    45a4:	dfc00715 	stw	ra,28(sp)
    45a8:	df000615 	stw	fp,24(sp)
    45ac:	df000604 	addi	fp,sp,24
    45b0:	e13ffd15 	stw	r4,-12(fp)
    45b4:	e17ffc15 	stw	r5,-16(fp)
    45b8:	e1bffb15 	stw	r6,-20(fp)
    45bc:	e1c00215 	stw	r7,8(fp)
  va_list va;
  va_start(va, format);
    45c0:	e0800204 	addi	r2,fp,8
    45c4:	e0bffe15 	stw	r2,-8(fp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    45c8:	e0bffe17 	ldw	r2,-8(fp)
    45cc:	d8800015 	stw	r2,0(sp)
    45d0:	e1fffb17 	ldw	r7,-20(fp)
    45d4:	e1bffc17 	ldw	r6,-16(fp)
    45d8:	e17ffd17 	ldw	r5,-12(fp)
    45dc:	01000034 	movhi	r4,0
    45e0:	21069304 	addi	r4,r4,6732
    45e4:	00033cc0 	call	33cc <_vsnprintf>
    45e8:	e0bfff15 	stw	r2,-4(fp)
  va_end(va);
  return ret;
    45ec:	e0bfff17 	ldw	r2,-4(fp)
}
    45f0:	e037883a 	mov	sp,fp
    45f4:	dfc00117 	ldw	ra,4(sp)
    45f8:	df000017 	ldw	fp,0(sp)
    45fc:	dec00304 	addi	sp,sp,12
    4600:	f800283a 	ret

00004604 <vprintf_>:


int vprintf_(const char* format, va_list va)
{
    4604:	defffa04 	addi	sp,sp,-24
    4608:	dfc00515 	stw	ra,20(sp)
    460c:	df000415 	stw	fp,16(sp)
    4610:	df000404 	addi	fp,sp,16
    4614:	e13ffe15 	stw	r4,-8(fp)
    4618:	e17ffd15 	stw	r5,-12(fp)
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    461c:	e0ffffc4 	addi	r3,fp,-1
    4620:	e0bffd17 	ldw	r2,-12(fp)
    4624:	d8800015 	stw	r2,0(sp)
    4628:	e1fffe17 	ldw	r7,-8(fp)
    462c:	01bfffc4 	movi	r6,-1
    4630:	180b883a 	mov	r5,r3
    4634:	01000034 	movhi	r4,0
    4638:	2106b504 	addi	r4,r4,6868
    463c:	00033cc0 	call	33cc <_vsnprintf>
}
    4640:	e037883a 	mov	sp,fp
    4644:	dfc00117 	ldw	ra,4(sp)
    4648:	df000017 	ldw	fp,0(sp)
    464c:	dec00204 	addi	sp,sp,8
    4650:	f800283a 	ret

00004654 <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
    4654:	defff904 	addi	sp,sp,-28
    4658:	dfc00615 	stw	ra,24(sp)
    465c:	df000515 	stw	fp,20(sp)
    4660:	df000504 	addi	fp,sp,20
    4664:	e13fff15 	stw	r4,-4(fp)
    4668:	e17ffe15 	stw	r5,-8(fp)
    466c:	e1bffd15 	stw	r6,-12(fp)
    4670:	e1fffc15 	stw	r7,-16(fp)
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    4674:	e0bffc17 	ldw	r2,-16(fp)
    4678:	d8800015 	stw	r2,0(sp)
    467c:	e1fffd17 	ldw	r7,-12(fp)
    4680:	e1bffe17 	ldw	r6,-8(fp)
    4684:	e17fff17 	ldw	r5,-4(fp)
    4688:	01000034 	movhi	r4,0
    468c:	21069304 	addi	r4,r4,6732
    4690:	00033cc0 	call	33cc <_vsnprintf>
}
    4694:	e037883a 	mov	sp,fp
    4698:	dfc00117 	ldw	ra,4(sp)
    469c:	df000017 	ldw	fp,0(sp)
    46a0:	dec00204 	addi	sp,sp,8
    46a4:	f800283a 	ret

000046a8 <fctprintf>:


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
    46a8:	defff504 	addi	sp,sp,-44
    46ac:	dfc00915 	stw	ra,36(sp)
    46b0:	df000815 	stw	fp,32(sp)
    46b4:	df000804 	addi	fp,sp,32
    46b8:	e13ffb15 	stw	r4,-20(fp)
    46bc:	e17ffa15 	stw	r5,-24(fp)
    46c0:	e1bff915 	stw	r6,-28(fp)
    46c4:	e1c00215 	stw	r7,8(fp)
  va_list va;
  va_start(va, format);
    46c8:	e0800204 	addi	r2,fp,8
    46cc:	e0bffe15 	stw	r2,-8(fp)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    46d0:	e0bffb17 	ldw	r2,-20(fp)
    46d4:	e0bffc15 	stw	r2,-16(fp)
    46d8:	e0bffa17 	ldw	r2,-24(fp)
    46dc:	e0bffd15 	stw	r2,-12(fp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    46e0:	e0bffe17 	ldw	r2,-8(fp)
    46e4:	e0fffc04 	addi	r3,fp,-16
    46e8:	d8800015 	stw	r2,0(sp)
    46ec:	e1fff917 	ldw	r7,-28(fp)
    46f0:	01bfffc4 	movi	r6,-1
    46f4:	180b883a 	mov	r5,r3
    46f8:	01000034 	movhi	r4,0
    46fc:	2106c904 	addi	r4,r4,6948
    4700:	00033cc0 	call	33cc <_vsnprintf>
    4704:	e0bfff15 	stw	r2,-4(fp)
  va_end(va);
  return ret;
    4708:	e0bfff17 	ldw	r2,-4(fp)
}
    470c:	e037883a 	mov	sp,fp
    4710:	dfc00117 	ldw	ra,4(sp)
    4714:	df000017 	ldw	fp,0(sp)
    4718:	dec00304 	addi	sp,sp,12
    471c:	f800283a 	ret

00004720 <expf>:
    4720:	defffc04 	addi	sp,sp,-16
    4724:	dc800215 	stw	r18,8(sp)
    4728:	dc400115 	stw	r17,4(sp)
    472c:	dfc00315 	stw	ra,12(sp)
    4730:	dc000015 	stw	r16,0(sp)
    4734:	2023883a 	mov	r17,r4
    4738:	00048880 	call	4888 <__ieee754_expf>
    473c:	1025883a 	mov	r18,r2
    4740:	00800074 	movhi	r2,1
    4744:	1088d917 	ldw	r2,9060(r2)
    4748:	10bfffe0 	cmpeqi	r2,r2,-1
    474c:	1000171e 	bne	r2,zero,47ac <expf+0x8c>
    4750:	01200034 	movhi	r4,32768
    4754:	213fffc4 	addi	r4,r4,-1
    4758:	8920703a 	and	r16,r17,r4
    475c:	015fe034 	movhi	r5,32640
    4760:	297fffc4 	addi	r5,r5,-1
    4764:	8009883a 	mov	r4,r16
    4768:	00071800 	call	7180 <__unordsf2>
    476c:	10000f1e 	bne	r2,zero,47ac <expf+0x8c>
    4770:	015fe034 	movhi	r5,32640
    4774:	297fffc4 	addi	r5,r5,-1
    4778:	8009883a 	mov	r4,r16
    477c:	00067800 	call	6780 <__gesf2>
    4780:	00800a16 	blt	zero,r2,47ac <expf+0x8c>
    4784:	0150ac74 	movhi	r5,17073
    4788:	295c6004 	addi	r5,r5,29056
    478c:	8809883a 	mov	r4,r17
    4790:	00067800 	call	6780 <__gesf2>
    4794:	00801116 	blt	zero,r2,47dc <expf+0xbc>
    4798:	0170b434 	movhi	r5,49872
    479c:	297c6d44 	addi	r5,r5,-3659
    47a0:	8809883a 	mov	r4,r17
    47a4:	00068380 	call	6838 <__lesf2>
    47a8:	10000716 	blt	r2,zero,47c8 <expf+0xa8>
    47ac:	9005883a 	mov	r2,r18
    47b0:	dfc00317 	ldw	ra,12(sp)
    47b4:	dc800217 	ldw	r18,8(sp)
    47b8:	dc400117 	ldw	r17,4(sp)
    47bc:	dc000017 	ldw	r16,0(sp)
    47c0:	dec00404 	addi	sp,sp,16
    47c4:	f800283a 	ret
    47c8:	0009c440 	call	9c44 <__errno>
    47cc:	00c00884 	movi	r3,34
    47d0:	10c00015 	stw	r3,0(r2)
    47d4:	0025883a 	mov	r18,zero
    47d8:	003ff406 	br	47ac <expf+0x8c>
    47dc:	0009c440 	call	9c44 <__errno>
    47e0:	00c00884 	movi	r3,34
    47e4:	10c00015 	stw	r3,0(r2)
    47e8:	049fe034 	movhi	r18,32640
    47ec:	003fef06 	br	47ac <expf+0x8c>

000047f0 <logf>:
    47f0:	defffd04 	addi	sp,sp,-12
    47f4:	dc400115 	stw	r17,4(sp)
    47f8:	dc000015 	stw	r16,0(sp)
    47fc:	dfc00215 	stw	ra,8(sp)
    4800:	2021883a 	mov	r16,r4
    4804:	0004c480 	call	4c48 <__ieee754_logf>
    4808:	1023883a 	mov	r17,r2
    480c:	00800074 	movhi	r2,1
    4810:	1088d917 	ldw	r2,9060(r2)
    4814:	10bfffe0 	cmpeqi	r2,r2,-1
    4818:	1000101e 	bne	r2,zero,485c <logf+0x6c>
    481c:	800b883a 	mov	r5,r16
    4820:	8009883a 	mov	r4,r16
    4824:	00071800 	call	7180 <__unordsf2>
    4828:	10000c1e 	bne	r2,zero,485c <logf+0x6c>
    482c:	000b883a 	mov	r5,zero
    4830:	8009883a 	mov	r4,r16
    4834:	00067800 	call	6780 <__gesf2>
    4838:	00800816 	blt	zero,r2,485c <logf+0x6c>
    483c:	000b883a 	mov	r5,zero
    4840:	8009883a 	mov	r4,r16
    4844:	00067100 	call	6710 <__eqsf2>
    4848:	10000a1e 	bne	r2,zero,4874 <logf+0x84>
    484c:	0009c440 	call	9c44 <__errno>
    4850:	00c00884 	movi	r3,34
    4854:	10c00015 	stw	r3,0(r2)
    4858:	047fe034 	movhi	r17,65408
    485c:	8805883a 	mov	r2,r17
    4860:	dfc00217 	ldw	ra,8(sp)
    4864:	dc400117 	ldw	r17,4(sp)
    4868:	dc000017 	ldw	r16,0(sp)
    486c:	dec00304 	addi	sp,sp,12
    4870:	f800283a 	ret
    4874:	0009c440 	call	9c44 <__errno>
    4878:	00c00844 	movi	r3,33
    487c:	10c00015 	stw	r3,0(r2)
    4880:	045ff034 	movhi	r17,32704
    4884:	003ff506 	br	485c <logf+0x6c>

00004888 <__ieee754_expf>:
    4888:	00a00034 	movhi	r2,32768
    488c:	defff804 	addi	sp,sp,-32
    4890:	10bfffc4 	addi	r2,r2,-1
    4894:	dfc00715 	stw	ra,28(sp)
    4898:	dd800615 	stw	r22,24(sp)
    489c:	dd400515 	stw	r21,20(sp)
    48a0:	dd000415 	stw	r20,16(sp)
    48a4:	dcc00315 	stw	r19,12(sp)
    48a8:	dc800215 	stw	r18,8(sp)
    48ac:	dc400115 	stw	r17,4(sp)
    48b0:	dc000015 	stw	r16,0(sp)
    48b4:	1104703a 	and	r2,r2,r4
    48b8:	00dfe034 	movhi	r3,32640
    48bc:	200b883a 	mov	r5,r4
    48c0:	18806c36 	bltu	r3,r2,4a74 <__ieee754_expf+0x1ec>
    48c4:	2022d7fa 	srli	r17,r4,31
    48c8:	2021883a 	mov	r16,r4
    48cc:	10c0b726 	beq	r2,r3,4bac <__ieee754_expf+0x324>
    48d0:	00d0ac74 	movhi	r3,17073
    48d4:	18dc85c4 	addi	r3,r3,29207
    48d8:	19007116 	blt	r3,r4,4aa0 <__ieee754_expf+0x218>
    48dc:	2000ae16 	blt	r4,zero,4b98 <__ieee754_expf+0x310>
    48e0:	00cfac74 	movhi	r3,16049
    48e4:	18dc8604 	addi	r3,r3,29208
    48e8:	1880562e 	bgeu	r3,r2,4a44 <__ieee754_expf+0x1bc>
    48ec:	00cfe174 	movhi	r3,16261
    48f0:	18c56444 	addi	r3,r3,5521
    48f4:	1880b636 	bltu	r3,r2,4bd0 <__ieee754_expf+0x348>
    48f8:	882490ba 	slli	r18,r17,2
    48fc:	00800074 	movhi	r2,1
    4900:	8009883a 	mov	r4,r16
    4904:	9085883a 	add	r2,r18,r2
    4908:	1148d517 	ldw	r5,9044(r2)
    490c:	04000044 	movi	r16,1
    4910:	8461c83a 	sub	r16,r16,r17
    4914:	0006cec0 	call	6cec <__subsf3>
    4918:	00c00074 	movhi	r3,1
    491c:	90c7883a 	add	r3,r18,r3
    4920:	1d08d317 	ldw	r20,9036(r3)
    4924:	1027883a 	mov	r19,r2
    4928:	8463c83a 	sub	r17,r16,r17
    492c:	a00b883a 	mov	r5,r20
    4930:	9809883a 	mov	r4,r19
    4934:	0006cec0 	call	6cec <__subsf3>
    4938:	100b883a 	mov	r5,r2
    493c:	1009883a 	mov	r4,r2
    4940:	1021883a 	mov	r16,r2
    4944:	00068ec0 	call	68ec <__mulsf3>
    4948:	014cccb4 	movhi	r5,13106
    494c:	296ed304 	addi	r5,r5,-17588
    4950:	1009883a 	mov	r4,r2
    4954:	1025883a 	mov	r18,r2
    4958:	00068ec0 	call	68ec <__mulsf3>
    495c:	014d77b4 	movhi	r5,13790
    4960:	297a8384 	addi	r5,r5,-5618
    4964:	1009883a 	mov	r4,r2
    4968:	0006cec0 	call	6cec <__subsf3>
    496c:	900b883a 	mov	r5,r18
    4970:	1009883a 	mov	r4,r2
    4974:	00068ec0 	call	68ec <__mulsf3>
    4978:	014e22f4 	movhi	r5,14475
    497c:	296cd544 	addi	r5,r5,-19627
    4980:	1009883a 	mov	r4,r2
    4984:	0005eb00 	call	5eb0 <__addsf3>
    4988:	900b883a 	mov	r5,r18
    498c:	1009883a 	mov	r4,r2
    4990:	00068ec0 	call	68ec <__mulsf3>
    4994:	014ecdb4 	movhi	r5,15158
    4998:	2942d844 	addi	r5,r5,2913
    499c:	1009883a 	mov	r4,r2
    49a0:	0006cec0 	call	6cec <__subsf3>
    49a4:	900b883a 	mov	r5,r18
    49a8:	1009883a 	mov	r4,r2
    49ac:	00068ec0 	call	68ec <__mulsf3>
    49b0:	014f8af4 	movhi	r5,15915
    49b4:	296aaac4 	addi	r5,r5,-21845
    49b8:	1009883a 	mov	r4,r2
    49bc:	0005eb00 	call	5eb0 <__addsf3>
    49c0:	900b883a 	mov	r5,r18
    49c4:	1009883a 	mov	r4,r2
    49c8:	00068ec0 	call	68ec <__mulsf3>
    49cc:	100b883a 	mov	r5,r2
    49d0:	8009883a 	mov	r4,r16
    49d4:	0006cec0 	call	6cec <__subsf3>
    49d8:	100b883a 	mov	r5,r2
    49dc:	8009883a 	mov	r4,r16
    49e0:	1025883a 	mov	r18,r2
    49e4:	00068ec0 	call	68ec <__mulsf3>
    49e8:	102d883a 	mov	r22,r2
    49ec:	902b883a 	mov	r21,r18
    49f0:	88005826 	beq	r17,zero,4b54 <__ieee754_expf+0x2cc>
    49f4:	900b883a 	mov	r5,r18
    49f8:	01100034 	movhi	r4,16384
    49fc:	0006cec0 	call	6cec <__subsf3>
    4a00:	100b883a 	mov	r5,r2
    4a04:	b009883a 	mov	r4,r22
    4a08:	000631c0 	call	631c <__divsf3>
    4a0c:	100b883a 	mov	r5,r2
    4a10:	a009883a 	mov	r4,r20
    4a14:	0006cec0 	call	6cec <__subsf3>
    4a18:	980b883a 	mov	r5,r19
    4a1c:	1009883a 	mov	r4,r2
    4a20:	0006cec0 	call	6cec <__subsf3>
    4a24:	100b883a 	mov	r5,r2
    4a28:	010fe034 	movhi	r4,16256
    4a2c:	0006cec0 	call	6cec <__subsf3>
    4a30:	88ffe0d0 	cmplti	r3,r17,-125
    4a34:	1800601e 	bne	r3,zero,4bb8 <__ieee754_expf+0x330>
    4a38:	882095fa 	slli	r16,r17,23
    4a3c:	8085883a 	add	r2,r16,r2
    4a40:	00000d06 	br	4a78 <__ieee754_expf+0x1f0>
    4a44:	00cc6034 	movhi	r3,12672
    4a48:	10c01a2e 	bgeu	r2,r3,4ab4 <__ieee754_expf+0x22c>
    4a4c:	015c52b4 	movhi	r5,29002
    4a50:	297cb284 	addi	r5,r5,-3382
    4a54:	8009883a 	mov	r4,r16
    4a58:	0005eb00 	call	5eb0 <__addsf3>
    4a5c:	014fe034 	movhi	r5,16256
    4a60:	1009883a 	mov	r4,r2
    4a64:	00067800 	call	6780 <__gesf2>
    4a68:	0080120e 	bge	zero,r2,4ab4 <__ieee754_expf+0x22c>
    4a6c:	014fe034 	movhi	r5,16256
    4a70:	8009883a 	mov	r4,r16
    4a74:	0005eb00 	call	5eb0 <__addsf3>
    4a78:	dfc00717 	ldw	ra,28(sp)
    4a7c:	dd800617 	ldw	r22,24(sp)
    4a80:	dd400517 	ldw	r21,20(sp)
    4a84:	dd000417 	ldw	r20,16(sp)
    4a88:	dcc00317 	ldw	r19,12(sp)
    4a8c:	dc800217 	ldw	r18,8(sp)
    4a90:	dc400117 	ldw	r17,4(sp)
    4a94:	dc000017 	ldw	r16,0(sp)
    4a98:	dec00804 	addi	sp,sp,32
    4a9c:	f800283a 	ret
    4aa0:	015c52b4 	movhi	r5,29002
    4aa4:	297cb284 	addi	r5,r5,-3382
    4aa8:	2809883a 	mov	r4,r5
    4aac:	00068ec0 	call	68ec <__mulsf3>
    4ab0:	003ff106 	br	4a78 <__ieee754_expf+0x1f0>
    4ab4:	800b883a 	mov	r5,r16
    4ab8:	8009883a 	mov	r4,r16
    4abc:	00068ec0 	call	68ec <__mulsf3>
    4ac0:	014cccb4 	movhi	r5,13106
    4ac4:	296ed304 	addi	r5,r5,-17588
    4ac8:	1009883a 	mov	r4,r2
    4acc:	1023883a 	mov	r17,r2
    4ad0:	00068ec0 	call	68ec <__mulsf3>
    4ad4:	014d77b4 	movhi	r5,13790
    4ad8:	297a8384 	addi	r5,r5,-5618
    4adc:	1009883a 	mov	r4,r2
    4ae0:	0006cec0 	call	6cec <__subsf3>
    4ae4:	880b883a 	mov	r5,r17
    4ae8:	1009883a 	mov	r4,r2
    4aec:	00068ec0 	call	68ec <__mulsf3>
    4af0:	014e22f4 	movhi	r5,14475
    4af4:	296cd544 	addi	r5,r5,-19627
    4af8:	1009883a 	mov	r4,r2
    4afc:	0005eb00 	call	5eb0 <__addsf3>
    4b00:	880b883a 	mov	r5,r17
    4b04:	1009883a 	mov	r4,r2
    4b08:	00068ec0 	call	68ec <__mulsf3>
    4b0c:	014ecdb4 	movhi	r5,15158
    4b10:	2942d844 	addi	r5,r5,2913
    4b14:	1009883a 	mov	r4,r2
    4b18:	0006cec0 	call	6cec <__subsf3>
    4b1c:	880b883a 	mov	r5,r17
    4b20:	1009883a 	mov	r4,r2
    4b24:	00068ec0 	call	68ec <__mulsf3>
    4b28:	014f8af4 	movhi	r5,15915
    4b2c:	296aaac4 	addi	r5,r5,-21845
    4b30:	1009883a 	mov	r4,r2
    4b34:	0005eb00 	call	5eb0 <__addsf3>
    4b38:	880b883a 	mov	r5,r17
    4b3c:	1009883a 	mov	r4,r2
    4b40:	00068ec0 	call	68ec <__mulsf3>
    4b44:	100b883a 	mov	r5,r2
    4b48:	8009883a 	mov	r4,r16
    4b4c:	0006cec0 	call	6cec <__subsf3>
    4b50:	102b883a 	mov	r21,r2
    4b54:	a80b883a 	mov	r5,r21
    4b58:	8009883a 	mov	r4,r16
    4b5c:	00068ec0 	call	68ec <__mulsf3>
    4b60:	a809883a 	mov	r4,r21
    4b64:	01500034 	movhi	r5,16384
    4b68:	1023883a 	mov	r17,r2
    4b6c:	0006cec0 	call	6cec <__subsf3>
    4b70:	8809883a 	mov	r4,r17
    4b74:	100b883a 	mov	r5,r2
    4b78:	000631c0 	call	631c <__divsf3>
    4b7c:	800b883a 	mov	r5,r16
    4b80:	1009883a 	mov	r4,r2
    4b84:	0006cec0 	call	6cec <__subsf3>
    4b88:	100b883a 	mov	r5,r2
    4b8c:	010fe034 	movhi	r4,16256
    4b90:	0006cec0 	call	6cec <__subsf3>
    4b94:	003fb806 	br	4a78 <__ieee754_expf+0x1f0>
    4b98:	00d0b434 	movhi	r3,17104
    4b9c:	18fc6d44 	addi	r3,r3,-3659
    4ba0:	18bf4f2e 	bgeu	r3,r2,48e0 <__ieee754_expf+0x58>
    4ba4:	0005883a 	mov	r2,zero
    4ba8:	003fb306 	br	4a78 <__ieee754_expf+0x1f0>
    4bac:	883ffd1e 	bne	r17,zero,4ba4 <__ieee754_expf+0x31c>
    4bb0:	2005883a 	mov	r2,r4
    4bb4:	003fb006 	br	4a78 <__ieee754_expf+0x1f0>
    4bb8:	8c401904 	addi	r17,r17,100
    4bbc:	882295fa 	slli	r17,r17,23
    4bc0:	01436034 	movhi	r5,3456
    4bc4:	8889883a 	add	r4,r17,r2
    4bc8:	00068ec0 	call	68ec <__mulsf3>
    4bcc:	003faa06 	br	4a78 <__ieee754_expf+0x1f0>
    4bd0:	014fee74 	movhi	r5,16313
    4bd4:	882290ba 	slli	r17,r17,2
    4bd8:	296a8ec4 	addi	r5,r5,-21957
    4bdc:	8009883a 	mov	r4,r16
    4be0:	00068ec0 	call	68ec <__mulsf3>
    4be4:	00c00074 	movhi	r3,1
    4be8:	88c7883a 	add	r3,r17,r3
    4bec:	1948d717 	ldw	r5,9052(r3)
    4bf0:	1009883a 	mov	r4,r2
    4bf4:	0005eb00 	call	5eb0 <__addsf3>
    4bf8:	1009883a 	mov	r4,r2
    4bfc:	00071cc0 	call	71cc <__fixsfsi>
    4c00:	1009883a 	mov	r4,r2
    4c04:	1023883a 	mov	r17,r2
    4c08:	000723c0 	call	723c <__floatsisf>
    4c0c:	014fcc74 	movhi	r5,16177
    4c10:	295c6004 	addi	r5,r5,29056
    4c14:	1009883a 	mov	r4,r2
    4c18:	1025883a 	mov	r18,r2
    4c1c:	00068ec0 	call	68ec <__mulsf3>
    4c20:	100b883a 	mov	r5,r2
    4c24:	8009883a 	mov	r4,r16
    4c28:	0006cec0 	call	6cec <__subsf3>
    4c2c:	014dc634 	movhi	r5,14104
    4c30:	297df444 	addi	r5,r5,-2095
    4c34:	9009883a 	mov	r4,r18
    4c38:	1027883a 	mov	r19,r2
    4c3c:	00068ec0 	call	68ec <__mulsf3>
    4c40:	1029883a 	mov	r20,r2
    4c44:	003f3906 	br	492c <__ieee754_expf+0xa4>

00004c48 <__ieee754_logf>:
    4c48:	00a00034 	movhi	r2,32768
    4c4c:	defff704 	addi	sp,sp,-36
    4c50:	10bfffc4 	addi	r2,r2,-1
    4c54:	dfc00815 	stw	ra,32(sp)
    4c58:	ddc00715 	stw	r23,28(sp)
    4c5c:	dd800615 	stw	r22,24(sp)
    4c60:	dd400515 	stw	r21,20(sp)
    4c64:	dd000415 	stw	r20,16(sp)
    4c68:	dcc00315 	stw	r19,12(sp)
    4c6c:	dc800215 	stw	r18,8(sp)
    4c70:	dc400115 	stw	r17,4(sp)
    4c74:	dc000015 	stw	r16,0(sp)
    4c78:	1104703a 	and	r2,r2,r4
    4c7c:	10002526 	beq	r2,zero,4d14 <__ieee754_logf+0xcc>
    4c80:	200b883a 	mov	r5,r4
    4c84:	2007883a 	mov	r3,r4
    4c88:	20004016 	blt	r4,zero,4d8c <__ieee754_logf+0x144>
    4c8c:	009fe034 	movhi	r2,32640
    4c90:	20803c0e 	bge	r4,r2,4d84 <__ieee754_logf+0x13c>
    4c94:	00802034 	movhi	r2,128
    4c98:	20804116 	blt	r4,r2,4da0 <__ieee754_logf+0x158>
    4c9c:	0005883a 	mov	r2,zero
    4ca0:	04002034 	movhi	r16,128
    4ca4:	843fffc4 	addi	r16,r16,-1
    4ca8:	010012f4 	movhi	r4,75
    4cac:	1c20703a 	and	r16,r3,r16
    4cb0:	213ec804 	addi	r4,r4,-1248
    4cb4:	1807d5fa 	srai	r3,r3,23
    4cb8:	8109883a 	add	r4,r16,r4
    4cbc:	2024d5fa 	srli	r18,r4,23
    4cc0:	2100202c 	andhi	r4,r4,128
    4cc4:	18ffe044 	addi	r3,r3,-127
    4cc8:	210fe03c 	xorhi	r4,r4,16256
    4ccc:	1887883a 	add	r3,r3,r2
    4cd0:	014fe034 	movhi	r5,16256
    4cd4:	2408b03a 	or	r4,r4,r16
    4cd8:	90e5883a 	add	r18,r18,r3
    4cdc:	0006cec0 	call	6cec <__subsf3>
    4ce0:	00c02034 	movhi	r3,128
    4ce4:	1023883a 	mov	r17,r2
    4ce8:	18fffc04 	addi	r3,r3,-16
    4cec:	808003c4 	addi	r2,r16,15
    4cf0:	10c4703a 	and	r2,r2,r3
    4cf4:	10002f1e 	bne	r2,zero,4db4 <__ieee754_logf+0x16c>
    4cf8:	000b883a 	mov	r5,zero
    4cfc:	8809883a 	mov	r4,r17
    4d00:	00067100 	call	6710 <__eqsf2>
    4d04:	10009a1e 	bne	r2,zero,4f70 <__ieee754_logf+0x328>
    4d08:	9000101e 	bne	r18,zero,4d4c <__ieee754_logf+0x104>
    4d0c:	0005883a 	mov	r2,zero
    4d10:	00000306 	br	4d20 <__ieee754_logf+0xd8>
    4d14:	000b883a 	mov	r5,zero
    4d18:	01330034 	movhi	r4,52224
    4d1c:	000631c0 	call	631c <__divsf3>
    4d20:	dfc00817 	ldw	ra,32(sp)
    4d24:	ddc00717 	ldw	r23,28(sp)
    4d28:	dd800617 	ldw	r22,24(sp)
    4d2c:	dd400517 	ldw	r21,20(sp)
    4d30:	dd000417 	ldw	r20,16(sp)
    4d34:	dcc00317 	ldw	r19,12(sp)
    4d38:	dc800217 	ldw	r18,8(sp)
    4d3c:	dc400117 	ldw	r17,4(sp)
    4d40:	dc000017 	ldw	r16,0(sp)
    4d44:	dec00904 	addi	sp,sp,36
    4d48:	f800283a 	ret
    4d4c:	9009883a 	mov	r4,r18
    4d50:	000723c0 	call	723c <__floatsisf>
    4d54:	014fcc74 	movhi	r5,16177
    4d58:	295c6004 	addi	r5,r5,29056
    4d5c:	1009883a 	mov	r4,r2
    4d60:	1021883a 	mov	r16,r2
    4d64:	00068ec0 	call	68ec <__mulsf3>
    4d68:	014dc634 	movhi	r5,14104
    4d6c:	297df444 	addi	r5,r5,-2095
    4d70:	8009883a 	mov	r4,r16
    4d74:	1023883a 	mov	r17,r2
    4d78:	00068ec0 	call	68ec <__mulsf3>
    4d7c:	100b883a 	mov	r5,r2
    4d80:	8809883a 	mov	r4,r17
    4d84:	0005eb00 	call	5eb0 <__addsf3>
    4d88:	003fe506 	br	4d20 <__ieee754_logf+0xd8>
    4d8c:	0006cec0 	call	6cec <__subsf3>
    4d90:	000b883a 	mov	r5,zero
    4d94:	1009883a 	mov	r4,r2
    4d98:	000631c0 	call	631c <__divsf3>
    4d9c:	003fe006 	br	4d20 <__ieee754_logf+0xd8>
    4da0:	01530034 	movhi	r5,19456
    4da4:	00068ec0 	call	68ec <__mulsf3>
    4da8:	1007883a 	mov	r3,r2
    4dac:	00bff9c4 	movi	r2,-25
    4db0:	003fbb06 	br	4ca0 <__ieee754_logf+0x58>
    4db4:	01500034 	movhi	r5,16384
    4db8:	8809883a 	mov	r4,r17
    4dbc:	0005eb00 	call	5eb0 <__addsf3>
    4dc0:	100b883a 	mov	r5,r2
    4dc4:	8809883a 	mov	r4,r17
    4dc8:	000631c0 	call	631c <__divsf3>
    4dcc:	9009883a 	mov	r4,r18
    4dd0:	102f883a 	mov	r23,r2
    4dd4:	000723c0 	call	723c <__floatsisf>
    4dd8:	b80b883a 	mov	r5,r23
    4ddc:	b809883a 	mov	r4,r23
    4de0:	102b883a 	mov	r21,r2
    4de4:	00068ec0 	call	68ec <__mulsf3>
    4de8:	1029883a 	mov	r20,r2
    4dec:	00bff3f4 	movhi	r2,65487
    4df0:	a00b883a 	mov	r5,r20
    4df4:	a009883a 	mov	r4,r20
    4df8:	10970c04 	addi	r2,r2,23600
    4dfc:	80ad883a 	add	r22,r16,r2
    4e00:	00068ec0 	call	68ec <__mulsf3>
    4e04:	014f8634 	movhi	r5,15896
    4e08:	296225c4 	addi	r5,r5,-30569
    4e0c:	1009883a 	mov	r4,r2
    4e10:	1027883a 	mov	r19,r2
    4e14:	00068ec0 	call	68ec <__mulsf3>
    4e18:	014f8eb4 	movhi	r5,15930
    4e1c:	294cc944 	addi	r5,r5,13093
    4e20:	1009883a 	mov	r4,r2
    4e24:	0005eb00 	call	5eb0 <__addsf3>
    4e28:	980b883a 	mov	r5,r19
    4e2c:	1009883a 	mov	r4,r2
    4e30:	00068ec0 	call	68ec <__mulsf3>
    4e34:	014fa4b4 	movhi	r5,16018
    4e38:	29524944 	addi	r5,r5,18725
    4e3c:	1009883a 	mov	r4,r2
    4e40:	0005eb00 	call	5eb0 <__addsf3>
    4e44:	980b883a 	mov	r5,r19
    4e48:	1009883a 	mov	r4,r2
    4e4c:	00068ec0 	call	68ec <__mulsf3>
    4e50:	014fcaf4 	movhi	r5,16171
    4e54:	296aaac4 	addi	r5,r5,-21845
    4e58:	1009883a 	mov	r4,r2
    4e5c:	0005eb00 	call	5eb0 <__addsf3>
    4e60:	a00b883a 	mov	r5,r20
    4e64:	1009883a 	mov	r4,r2
    4e68:	00068ec0 	call	68ec <__mulsf3>
    4e6c:	014f8774 	movhi	r5,15901
    4e70:	9809883a 	mov	r4,r19
    4e74:	297413c4 	addi	r5,r5,-12209
    4e78:	1029883a 	mov	r20,r2
    4e7c:	00068ec0 	call	68ec <__mulsf3>
    4e80:	014f9934 	movhi	r5,15972
    4e84:	29638a44 	addi	r5,r5,-29143
    4e88:	1009883a 	mov	r4,r2
    4e8c:	0005eb00 	call	5eb0 <__addsf3>
    4e90:	980b883a 	mov	r5,r19
    4e94:	1009883a 	mov	r4,r2
    4e98:	00068ec0 	call	68ec <__mulsf3>
    4e9c:	014fb374 	movhi	r5,16077
    4ea0:	29733344 	addi	r5,r5,-13107
    4ea4:	1009883a 	mov	r4,r2
    4ea8:	0005eb00 	call	5eb0 <__addsf3>
    4eac:	980b883a 	mov	r5,r19
    4eb0:	1009883a 	mov	r4,r2
    4eb4:	00068ec0 	call	68ec <__mulsf3>
    4eb8:	100b883a 	mov	r5,r2
    4ebc:	a009883a 	mov	r4,r20
    4ec0:	0005eb00 	call	5eb0 <__addsf3>
    4ec4:	1027883a 	mov	r19,r2
    4ec8:	00800db4 	movhi	r2,54
    4ecc:	10b0a204 	addi	r2,r2,-15736
    4ed0:	1405c83a 	sub	r2,r2,r16
    4ed4:	1584b03a 	or	r2,r2,r22
    4ed8:	0080390e 	bge	zero,r2,4fc0 <__ieee754_logf+0x378>
    4edc:	014fc034 	movhi	r5,16128
    4ee0:	8809883a 	mov	r4,r17
    4ee4:	00068ec0 	call	68ec <__mulsf3>
    4ee8:	880b883a 	mov	r5,r17
    4eec:	1009883a 	mov	r4,r2
    4ef0:	00068ec0 	call	68ec <__mulsf3>
    4ef4:	9809883a 	mov	r4,r19
    4ef8:	100b883a 	mov	r5,r2
    4efc:	1021883a 	mov	r16,r2
    4f00:	0005eb00 	call	5eb0 <__addsf3>
    4f04:	b80b883a 	mov	r5,r23
    4f08:	1009883a 	mov	r4,r2
    4f0c:	00068ec0 	call	68ec <__mulsf3>
    4f10:	1027883a 	mov	r19,r2
    4f14:	90003c26 	beq	r18,zero,5008 <__ieee754_logf+0x3c0>
    4f18:	014fcc74 	movhi	r5,16177
    4f1c:	295c6004 	addi	r5,r5,29056
    4f20:	a809883a 	mov	r4,r21
    4f24:	00068ec0 	call	68ec <__mulsf3>
    4f28:	014dc634 	movhi	r5,14104
    4f2c:	297df444 	addi	r5,r5,-2095
    4f30:	a809883a 	mov	r4,r21
    4f34:	1025883a 	mov	r18,r2
    4f38:	00068ec0 	call	68ec <__mulsf3>
    4f3c:	980b883a 	mov	r5,r19
    4f40:	1009883a 	mov	r4,r2
    4f44:	0005eb00 	call	5eb0 <__addsf3>
    4f48:	8009883a 	mov	r4,r16
    4f4c:	100b883a 	mov	r5,r2
    4f50:	0006cec0 	call	6cec <__subsf3>
    4f54:	880b883a 	mov	r5,r17
    4f58:	1009883a 	mov	r4,r2
    4f5c:	0006cec0 	call	6cec <__subsf3>
    4f60:	100b883a 	mov	r5,r2
    4f64:	9009883a 	mov	r4,r18
    4f68:	0006cec0 	call	6cec <__subsf3>
    4f6c:	003f6c06 	br	4d20 <__ieee754_logf+0xd8>
    4f70:	014faaf4 	movhi	r5,16043
    4f74:	8809883a 	mov	r4,r17
    4f78:	296aaac4 	addi	r5,r5,-21845
    4f7c:	00068ec0 	call	68ec <__mulsf3>
    4f80:	100b883a 	mov	r5,r2
    4f84:	010fc034 	movhi	r4,16128
    4f88:	0006cec0 	call	6cec <__subsf3>
    4f8c:	880b883a 	mov	r5,r17
    4f90:	8809883a 	mov	r4,r17
    4f94:	1021883a 	mov	r16,r2
    4f98:	00068ec0 	call	68ec <__mulsf3>
    4f9c:	8009883a 	mov	r4,r16
    4fa0:	100b883a 	mov	r5,r2
    4fa4:	00068ec0 	call	68ec <__mulsf3>
    4fa8:	1021883a 	mov	r16,r2
    4fac:	90001d1e 	bne	r18,zero,5024 <__ieee754_logf+0x3dc>
    4fb0:	800b883a 	mov	r5,r16
    4fb4:	8809883a 	mov	r4,r17
    4fb8:	0006cec0 	call	6cec <__subsf3>
    4fbc:	003f5806 	br	4d20 <__ieee754_logf+0xd8>
    4fc0:	980b883a 	mov	r5,r19
    4fc4:	8809883a 	mov	r4,r17
    4fc8:	0006cec0 	call	6cec <__subsf3>
    4fcc:	b80b883a 	mov	r5,r23
    4fd0:	1009883a 	mov	r4,r2
    4fd4:	00068ec0 	call	68ec <__mulsf3>
    4fd8:	1021883a 	mov	r16,r2
    4fdc:	903ff426 	beq	r18,zero,4fb0 <__ieee754_logf+0x368>
    4fe0:	014fcc74 	movhi	r5,16177
    4fe4:	a809883a 	mov	r4,r21
    4fe8:	295c6004 	addi	r5,r5,29056
    4fec:	00068ec0 	call	68ec <__mulsf3>
    4ff0:	014dc634 	movhi	r5,14104
    4ff4:	297df444 	addi	r5,r5,-2095
    4ff8:	a809883a 	mov	r4,r21
    4ffc:	1025883a 	mov	r18,r2
    5000:	00068ec0 	call	68ec <__mulsf3>
    5004:	003fd006 	br	4f48 <__ieee754_logf+0x300>
    5008:	8009883a 	mov	r4,r16
    500c:	100b883a 	mov	r5,r2
    5010:	0006cec0 	call	6cec <__subsf3>
    5014:	100b883a 	mov	r5,r2
    5018:	8809883a 	mov	r4,r17
    501c:	0006cec0 	call	6cec <__subsf3>
    5020:	003f3f06 	br	4d20 <__ieee754_logf+0xd8>
    5024:	9009883a 	mov	r4,r18
    5028:	000723c0 	call	723c <__floatsisf>
    502c:	014fcc74 	movhi	r5,16177
    5030:	295c6004 	addi	r5,r5,29056
    5034:	1009883a 	mov	r4,r2
    5038:	1025883a 	mov	r18,r2
    503c:	00068ec0 	call	68ec <__mulsf3>
    5040:	014dc634 	movhi	r5,14104
    5044:	9009883a 	mov	r4,r18
    5048:	297df444 	addi	r5,r5,-2095
    504c:	1027883a 	mov	r19,r2
    5050:	00068ec0 	call	68ec <__mulsf3>
    5054:	8009883a 	mov	r4,r16
    5058:	100b883a 	mov	r5,r2
    505c:	0006cec0 	call	6cec <__subsf3>
    5060:	880b883a 	mov	r5,r17
    5064:	1009883a 	mov	r4,r2
    5068:	0006cec0 	call	6cec <__subsf3>
    506c:	100b883a 	mov	r5,r2
    5070:	9809883a 	mov	r4,r19
    5074:	0006cec0 	call	6cec <__subsf3>
    5078:	003f2906 	br	4d20 <__ieee754_logf+0xd8>

0000507c <__fixunsdfsi>:
    507c:	defffd04 	addi	sp,sp,-12
    5080:	000d883a 	mov	r6,zero
    5084:	01d07834 	movhi	r7,16864
    5088:	dc400115 	stw	r17,4(sp)
    508c:	dc000015 	stw	r16,0(sp)
    5090:	dfc00215 	stw	ra,8(sp)
    5094:	2023883a 	mov	r17,r4
    5098:	2821883a 	mov	r16,r5
    509c:	00086fc0 	call	86fc <__gedf2>
    50a0:	1000080e 	bge	r2,zero,50c4 <__fixunsdfsi+0x48>
    50a4:	8809883a 	mov	r4,r17
    50a8:	800b883a 	mov	r5,r16
    50ac:	000992c0 	call	992c <__fixdfsi>
    50b0:	dfc00217 	ldw	ra,8(sp)
    50b4:	dc400117 	ldw	r17,4(sp)
    50b8:	dc000017 	ldw	r16,0(sp)
    50bc:	dec00304 	addi	sp,sp,12
    50c0:	f800283a 	ret
    50c4:	000d883a 	mov	r6,zero
    50c8:	01d07834 	movhi	r7,16864
    50cc:	8809883a 	mov	r4,r17
    50d0:	800b883a 	mov	r5,r16
    50d4:	00090780 	call	9078 <__subdf3>
    50d8:	180b883a 	mov	r5,r3
    50dc:	1009883a 	mov	r4,r2
    50e0:	000992c0 	call	992c <__fixdfsi>
    50e4:	00e00034 	movhi	r3,32768
    50e8:	10c5883a 	add	r2,r2,r3
    50ec:	003ff006 	br	50b0 <__fixunsdfsi+0x34>

000050f0 <__udivdi3>:
    50f0:	defff504 	addi	sp,sp,-44
    50f4:	dd000515 	stw	r20,20(sp)
    50f8:	dc800315 	stw	r18,12(sp)
    50fc:	dfc00a15 	stw	ra,40(sp)
    5100:	df000915 	stw	fp,36(sp)
    5104:	ddc00815 	stw	r23,32(sp)
    5108:	dd800715 	stw	r22,28(sp)
    510c:	dd400615 	stw	r21,24(sp)
    5110:	dcc00415 	stw	r19,16(sp)
    5114:	dc400215 	stw	r17,8(sp)
    5118:	dc000115 	stw	r16,4(sp)
    511c:	2029883a 	mov	r20,r4
    5120:	2825883a 	mov	r18,r5
    5124:	3800461e 	bne	r7,zero,5240 <__udivdi3+0x150>
    5128:	3823883a 	mov	r17,r7
    512c:	3021883a 	mov	r16,r6
    5130:	2027883a 	mov	r19,r4
    5134:	2980622e 	bgeu	r5,r6,52c0 <__udivdi3+0x1d0>
    5138:	00bfffd4 	movui	r2,65535
    513c:	282b883a 	mov	r21,r5
    5140:	1180aa2e 	bgeu	r2,r6,53ec <__udivdi3+0x2fc>
    5144:	00804034 	movhi	r2,256
    5148:	30815a36 	bltu	r6,r2,56b4 <__udivdi3+0x5c4>
    514c:	3006d63a 	srli	r3,r6,24
    5150:	04400604 	movi	r17,24
    5154:	00800074 	movhi	r2,1
    5158:	1885883a 	add	r2,r3,r2
    515c:	10b9fb03 	ldbu	r2,-6164(r2)
    5160:	00c00804 	movi	r3,32
    5164:	1463883a 	add	r17,r2,r17
    5168:	1c45c83a 	sub	r2,r3,r17
    516c:	1c400526 	beq	r3,r17,5184 <__udivdi3+0x94>
    5170:	9086983a 	sll	r3,r18,r2
    5174:	a462d83a 	srl	r17,r20,r17
    5178:	30a0983a 	sll	r16,r6,r2
    517c:	a0a6983a 	sll	r19,r20,r2
    5180:	88eab03a 	or	r21,r17,r3
    5184:	802cd43a 	srli	r22,r16,16
    5188:	a809883a 	mov	r4,r21
    518c:	853fffcc 	andi	r20,r16,65535
    5190:	b00b883a 	mov	r5,r22
    5194:	0005e2c0 	call	5e2c <__umodsi3>
    5198:	a809883a 	mov	r4,r21
    519c:	b00b883a 	mov	r5,r22
    51a0:	1025883a 	mov	r18,r2
    51a4:	0005dc80 	call	5dc8 <__udivsi3>
    51a8:	a009883a 	mov	r4,r20
    51ac:	100b883a 	mov	r5,r2
    51b0:	102b883a 	mov	r21,r2
    51b4:	0005e880 	call	5e88 <__mulsi3>
    51b8:	9024943a 	slli	r18,r18,16
    51bc:	9808d43a 	srli	r4,r19,16
    51c0:	9108b03a 	or	r4,r18,r4
    51c4:	2080052e 	bgeu	r4,r2,51dc <__udivdi3+0xec>
    51c8:	2409883a 	add	r4,r4,r16
    51cc:	a8ffffc4 	addi	r3,r21,-1
    51d0:	24000136 	bltu	r4,r16,51d8 <__udivdi3+0xe8>
    51d4:	20814836 	bltu	r4,r2,56f8 <__udivdi3+0x608>
    51d8:	182b883a 	mov	r21,r3
    51dc:	20a3c83a 	sub	r17,r4,r2
    51e0:	8809883a 	mov	r4,r17
    51e4:	b00b883a 	mov	r5,r22
    51e8:	0005e2c0 	call	5e2c <__umodsi3>
    51ec:	8809883a 	mov	r4,r17
    51f0:	1023883a 	mov	r17,r2
    51f4:	b00b883a 	mov	r5,r22
    51f8:	8822943a 	slli	r17,r17,16
    51fc:	0005dc80 	call	5dc8 <__udivsi3>
    5200:	100b883a 	mov	r5,r2
    5204:	a009883a 	mov	r4,r20
    5208:	9cffffcc 	andi	r19,r19,65535
    520c:	1025883a 	mov	r18,r2
    5210:	8ce6b03a 	or	r19,r17,r19
    5214:	0005e880 	call	5e88 <__mulsi3>
    5218:	9880052e 	bgeu	r19,r2,5230 <__udivdi3+0x140>
    521c:	84e7883a 	add	r19,r16,r19
    5220:	90ffffc4 	addi	r3,r18,-1
    5224:	9c000136 	bltu	r19,r16,522c <__udivdi3+0x13c>
    5228:	98813136 	bltu	r19,r2,56f0 <__udivdi3+0x600>
    522c:	1825883a 	mov	r18,r3
    5230:	a80c943a 	slli	r6,r21,16
    5234:	0007883a 	mov	r3,zero
    5238:	3484b03a 	or	r2,r6,r18
    523c:	00000306 	br	524c <__udivdi3+0x15c>
    5240:	29c00e2e 	bgeu	r5,r7,527c <__udivdi3+0x18c>
    5244:	0007883a 	mov	r3,zero
    5248:	0005883a 	mov	r2,zero
    524c:	dfc00a17 	ldw	ra,40(sp)
    5250:	df000917 	ldw	fp,36(sp)
    5254:	ddc00817 	ldw	r23,32(sp)
    5258:	dd800717 	ldw	r22,28(sp)
    525c:	dd400617 	ldw	r21,24(sp)
    5260:	dd000517 	ldw	r20,20(sp)
    5264:	dcc00417 	ldw	r19,16(sp)
    5268:	dc800317 	ldw	r18,12(sp)
    526c:	dc400217 	ldw	r17,8(sp)
    5270:	dc000117 	ldw	r16,4(sp)
    5274:	dec00b04 	addi	sp,sp,44
    5278:	f800283a 	ret
    527c:	00bfffd4 	movui	r2,65535
    5280:	11c05f2e 	bgeu	r2,r7,5400 <__udivdi3+0x310>
    5284:	00804034 	movhi	r2,256
    5288:	3880fc36 	bltu	r7,r2,567c <__udivdi3+0x58c>
    528c:	3804d63a 	srli	r2,r7,24
    5290:	01000604 	movi	r4,24
    5294:	00c00074 	movhi	r3,1
    5298:	10c7883a 	add	r3,r2,r3
    529c:	18b9fb03 	ldbu	r2,-6164(r3)
    52a0:	00c00804 	movi	r3,32
    52a4:	1105883a 	add	r2,r2,r4
    52a8:	18a3c83a 	sub	r17,r3,r2
    52ac:	1880901e 	bne	r3,r2,54f0 <__udivdi3+0x400>
    52b0:	3c80f736 	bltu	r7,r18,5690 <__udivdi3+0x5a0>
    52b4:	a185403a 	cmpgeu	r2,r20,r6
    52b8:	0007883a 	mov	r3,zero
    52bc:	003fe306 	br	524c <__udivdi3+0x15c>
    52c0:	3000041e 	bne	r6,zero,52d4 <__udivdi3+0x1e4>
    52c4:	000b883a 	mov	r5,zero
    52c8:	01000044 	movi	r4,1
    52cc:	0005dc80 	call	5dc8 <__udivsi3>
    52d0:	1021883a 	mov	r16,r2
    52d4:	00bfffd4 	movui	r2,65535
    52d8:	14003f2e 	bgeu	r2,r16,53d8 <__udivdi3+0x2e8>
    52dc:	00804034 	movhi	r2,256
    52e0:	8080f136 	bltu	r16,r2,56a8 <__udivdi3+0x5b8>
    52e4:	8006d63a 	srli	r3,r16,24
    52e8:	04400604 	movi	r17,24
    52ec:	00800074 	movhi	r2,1
    52f0:	1885883a 	add	r2,r3,r2
    52f4:	10b9fb03 	ldbu	r2,-6164(r2)
    52f8:	00c00804 	movi	r3,32
    52fc:	1463883a 	add	r17,r2,r17
    5300:	1c45c83a 	sub	r2,r3,r17
    5304:	1c40431e 	bne	r3,r17,5414 <__udivdi3+0x324>
    5308:	802cd43a 	srli	r22,r16,16
    530c:	9423c83a 	sub	r17,r18,r16
    5310:	853fffcc 	andi	r20,r16,65535
    5314:	00c00044 	movi	r3,1
    5318:	b00b883a 	mov	r5,r22
    531c:	8809883a 	mov	r4,r17
    5320:	d8c00015 	stw	r3,0(sp)
    5324:	0005e2c0 	call	5e2c <__umodsi3>
    5328:	b00b883a 	mov	r5,r22
    532c:	8809883a 	mov	r4,r17
    5330:	1025883a 	mov	r18,r2
    5334:	0005dc80 	call	5dc8 <__udivsi3>
    5338:	1009883a 	mov	r4,r2
    533c:	a00b883a 	mov	r5,r20
    5340:	102b883a 	mov	r21,r2
    5344:	0005e880 	call	5e88 <__mulsi3>
    5348:	9024943a 	slli	r18,r18,16
    534c:	9808d43a 	srli	r4,r19,16
    5350:	d8c00017 	ldw	r3,0(sp)
    5354:	9108b03a 	or	r4,r18,r4
    5358:	2080052e 	bgeu	r4,r2,5370 <__udivdi3+0x280>
    535c:	2409883a 	add	r4,r4,r16
    5360:	a97fffc4 	addi	r5,r21,-1
    5364:	24000136 	bltu	r4,r16,536c <__udivdi3+0x27c>
    5368:	2080e636 	bltu	r4,r2,5704 <__udivdi3+0x614>
    536c:	282b883a 	mov	r21,r5
    5370:	20a3c83a 	sub	r17,r4,r2
    5374:	8809883a 	mov	r4,r17
    5378:	b00b883a 	mov	r5,r22
    537c:	d8c00015 	stw	r3,0(sp)
    5380:	0005e2c0 	call	5e2c <__umodsi3>
    5384:	8809883a 	mov	r4,r17
    5388:	1023883a 	mov	r17,r2
    538c:	b00b883a 	mov	r5,r22
    5390:	8822943a 	slli	r17,r17,16
    5394:	0005dc80 	call	5dc8 <__udivsi3>
    5398:	a00b883a 	mov	r5,r20
    539c:	1009883a 	mov	r4,r2
    53a0:	9cffffcc 	andi	r19,r19,65535
    53a4:	1025883a 	mov	r18,r2
    53a8:	8ce6b03a 	or	r19,r17,r19
    53ac:	0005e880 	call	5e88 <__mulsi3>
    53b0:	d8c00017 	ldw	r3,0(sp)
    53b4:	9880052e 	bgeu	r19,r2,53cc <__udivdi3+0x2dc>
    53b8:	84e7883a 	add	r19,r16,r19
    53bc:	913fffc4 	addi	r4,r18,-1
    53c0:	9c000136 	bltu	r19,r16,53c8 <__udivdi3+0x2d8>
    53c4:	9880c836 	bltu	r19,r2,56e8 <__udivdi3+0x5f8>
    53c8:	2025883a 	mov	r18,r4
    53cc:	a80c943a 	slli	r6,r21,16
    53d0:	3484b03a 	or	r2,r6,r18
    53d4:	003f9d06 	br	524c <__udivdi3+0x15c>
    53d8:	80804030 	cmpltui	r2,r16,256
    53dc:	1000b81e 	bne	r2,zero,56c0 <__udivdi3+0x5d0>
    53e0:	8006d23a 	srli	r3,r16,8
    53e4:	04400204 	movi	r17,8
    53e8:	003fc006 	br	52ec <__udivdi3+0x1fc>
    53ec:	30804030 	cmpltui	r2,r6,256
    53f0:	1000a51e 	bne	r2,zero,5688 <__udivdi3+0x598>
    53f4:	3006d23a 	srli	r3,r6,8
    53f8:	04400204 	movi	r17,8
    53fc:	003f5506 	br	5154 <__udivdi3+0x64>
    5400:	38804030 	cmpltui	r2,r7,256
    5404:	1000a51e 	bne	r2,zero,569c <__udivdi3+0x5ac>
    5408:	3804d23a 	srli	r2,r7,8
    540c:	01000204 	movi	r4,8
    5410:	003fa006 	br	5294 <__udivdi3+0x1a4>
    5414:	80a0983a 	sll	r16,r16,r2
    5418:	946ed83a 	srl	r23,r18,r17
    541c:	9086983a 	sll	r3,r18,r2
    5420:	802cd43a 	srli	r22,r16,16
    5424:	a462d83a 	srl	r17,r20,r17
    5428:	b809883a 	mov	r4,r23
    542c:	b00b883a 	mov	r5,r22
    5430:	88eab03a 	or	r21,r17,r3
    5434:	a0a6983a 	sll	r19,r20,r2
    5438:	0005e2c0 	call	5e2c <__umodsi3>
    543c:	b809883a 	mov	r4,r23
    5440:	b00b883a 	mov	r5,r22
    5444:	1025883a 	mov	r18,r2
    5448:	853fffcc 	andi	r20,r16,65535
    544c:	0005dc80 	call	5dc8 <__udivsi3>
    5450:	a009883a 	mov	r4,r20
    5454:	100b883a 	mov	r5,r2
    5458:	102f883a 	mov	r23,r2
    545c:	0005e880 	call	5e88 <__mulsi3>
    5460:	9024943a 	slli	r18,r18,16
    5464:	a808d43a 	srli	r4,r21,16
    5468:	9108b03a 	or	r4,r18,r4
    546c:	2080062e 	bgeu	r4,r2,5488 <__udivdi3+0x398>
    5470:	2409883a 	add	r4,r4,r16
    5474:	b8ffffc4 	addi	r3,r23,-1
    5478:	24009936 	bltu	r4,r16,56e0 <__udivdi3+0x5f0>
    547c:	2080982e 	bgeu	r4,r2,56e0 <__udivdi3+0x5f0>
    5480:	bdffff84 	addi	r23,r23,-2
    5484:	2409883a 	add	r4,r4,r16
    5488:	20a3c83a 	sub	r17,r4,r2
    548c:	8809883a 	mov	r4,r17
    5490:	b00b883a 	mov	r5,r22
    5494:	0005e2c0 	call	5e2c <__umodsi3>
    5498:	1025883a 	mov	r18,r2
    549c:	8809883a 	mov	r4,r17
    54a0:	b00b883a 	mov	r5,r22
    54a4:	9024943a 	slli	r18,r18,16
    54a8:	0005dc80 	call	5dc8 <__udivsi3>
    54ac:	100b883a 	mov	r5,r2
    54b0:	a009883a 	mov	r4,r20
    54b4:	ac7fffcc 	andi	r17,r21,65535
    54b8:	1039883a 	mov	fp,r2
    54bc:	9462b03a 	or	r17,r18,r17
    54c0:	0005e880 	call	5e88 <__mulsi3>
    54c4:	8880062e 	bgeu	r17,r2,54e0 <__udivdi3+0x3f0>
    54c8:	8c23883a 	add	r17,r17,r16
    54cc:	e0ffffc4 	addi	r3,fp,-1
    54d0:	8c007f36 	bltu	r17,r16,56d0 <__udivdi3+0x5e0>
    54d4:	88807e2e 	bgeu	r17,r2,56d0 <__udivdi3+0x5e0>
    54d8:	e73fff84 	addi	fp,fp,-2
    54dc:	8c23883a 	add	r17,r17,r16
    54e0:	b806943a 	slli	r3,r23,16
    54e4:	88a3c83a 	sub	r17,r17,r2
    54e8:	1f06b03a 	or	r3,r3,fp
    54ec:	003f8a06 	br	5318 <__udivdi3+0x228>
    54f0:	30a6d83a 	srl	r19,r6,r2
    54f4:	3c4e983a 	sll	r7,r7,r17
    54f8:	90a0d83a 	srl	r16,r18,r2
    54fc:	9446983a 	sll	r3,r18,r17
    5500:	99e6b03a 	or	r19,r19,r7
    5504:	a084d83a 	srl	r2,r20,r2
    5508:	9838d43a 	srli	fp,r19,16
    550c:	8009883a 	mov	r4,r16
    5510:	10eab03a 	or	r21,r2,r3
    5514:	e00b883a 	mov	r5,fp
    5518:	346c983a 	sll	r22,r6,r17
    551c:	dd400015 	stw	r21,0(sp)
    5520:	0005e2c0 	call	5e2c <__umodsi3>
    5524:	8009883a 	mov	r4,r16
    5528:	e00b883a 	mov	r5,fp
    552c:	102f883a 	mov	r23,r2
    5530:	9cbfffcc 	andi	r18,r19,65535
    5534:	0005dc80 	call	5dc8 <__udivsi3>
    5538:	9009883a 	mov	r4,r18
    553c:	100b883a 	mov	r5,r2
    5540:	1021883a 	mov	r16,r2
    5544:	0005e880 	call	5e88 <__mulsi3>
    5548:	b82e943a 	slli	r23,r23,16
    554c:	a808d43a 	srli	r4,r21,16
    5550:	b908b03a 	or	r4,r23,r4
    5554:	2080062e 	bgeu	r4,r2,5570 <__udivdi3+0x480>
    5558:	24c9883a 	add	r4,r4,r19
    555c:	817fffc4 	addi	r5,r16,-1
    5560:	24c05d36 	bltu	r4,r19,56d8 <__udivdi3+0x5e8>
    5564:	20805c2e 	bgeu	r4,r2,56d8 <__udivdi3+0x5e8>
    5568:	843fff84 	addi	r16,r16,-2
    556c:	24c9883a 	add	r4,r4,r19
    5570:	20abc83a 	sub	r21,r4,r2
    5574:	a809883a 	mov	r4,r21
    5578:	e00b883a 	mov	r5,fp
    557c:	0005e2c0 	call	5e2c <__umodsi3>
    5580:	a809883a 	mov	r4,r21
    5584:	e00b883a 	mov	r5,fp
    5588:	102b883a 	mov	r21,r2
    558c:	0005dc80 	call	5dc8 <__udivsi3>
    5590:	9009883a 	mov	r4,r18
    5594:	100b883a 	mov	r5,r2
    5598:	102f883a 	mov	r23,r2
    559c:	0005e880 	call	5e88 <__mulsi3>
    55a0:	d8c00017 	ldw	r3,0(sp)
    55a4:	a82a943a 	slli	r21,r21,16
    55a8:	100d883a 	mov	r6,r2
    55ac:	1cbfffcc 	andi	r18,r3,65535
    55b0:	aca4b03a 	or	r18,r21,r18
    55b4:	9080062e 	bgeu	r18,r2,55d0 <__udivdi3+0x4e0>
    55b8:	94e5883a 	add	r18,r18,r19
    55bc:	b8bfffc4 	addi	r2,r23,-1
    55c0:	94c04136 	bltu	r18,r19,56c8 <__udivdi3+0x5d8>
    55c4:	9180402e 	bgeu	r18,r6,56c8 <__udivdi3+0x5d8>
    55c8:	bdffff84 	addi	r23,r23,-2
    55cc:	94e5883a 	add	r18,r18,r19
    55d0:	8004943a 	slli	r2,r16,16
    55d4:	bd7fffcc 	andi	r21,r23,65535
    55d8:	b73fffcc 	andi	fp,r22,65535
    55dc:	15e0b03a 	or	r16,r2,r23
    55e0:	8026d43a 	srli	r19,r16,16
    55e4:	a809883a 	mov	r4,r21
    55e8:	e00b883a 	mov	r5,fp
    55ec:	91a5c83a 	sub	r18,r18,r6
    55f0:	b02cd43a 	srli	r22,r22,16
    55f4:	0005e880 	call	5e88 <__mulsi3>
    55f8:	9809883a 	mov	r4,r19
    55fc:	e00b883a 	mov	r5,fp
    5600:	102f883a 	mov	r23,r2
    5604:	0005e880 	call	5e88 <__mulsi3>
    5608:	9809883a 	mov	r4,r19
    560c:	b00b883a 	mov	r5,r22
    5610:	1027883a 	mov	r19,r2
    5614:	0005e880 	call	5e88 <__mulsi3>
    5618:	a809883a 	mov	r4,r21
    561c:	b00b883a 	mov	r5,r22
    5620:	102b883a 	mov	r21,r2
    5624:	0005e880 	call	5e88 <__mulsi3>
    5628:	b806d43a 	srli	r3,r23,16
    562c:	14c5883a 	add	r2,r2,r19
    5630:	1887883a 	add	r3,r3,r2
    5634:	1cc0022e 	bgeu	r3,r19,5640 <__udivdi3+0x550>
    5638:	00800074 	movhi	r2,1
    563c:	a8ab883a 	add	r21,r21,r2
    5640:	1804d43a 	srli	r2,r3,16
    5644:	156b883a 	add	r21,r2,r21
    5648:	95400936 	bltu	r18,r21,5670 <__udivdi3+0x580>
    564c:	95400326 	beq	r18,r21,565c <__udivdi3+0x56c>
    5650:	8005883a 	mov	r2,r16
    5654:	0007883a 	mov	r3,zero
    5658:	003efc06 	br	524c <__udivdi3+0x15c>
    565c:	1806943a 	slli	r3,r3,16
    5660:	a44c983a 	sll	r6,r20,r17
    5664:	bdffffcc 	andi	r23,r23,65535
    5668:	1dc7883a 	add	r3,r3,r23
    566c:	30fff82e 	bgeu	r6,r3,5650 <__udivdi3+0x560>
    5670:	80bfffc4 	addi	r2,r16,-1
    5674:	0007883a 	mov	r3,zero
    5678:	003ef406 	br	524c <__udivdi3+0x15c>
    567c:	3804d43a 	srli	r2,r7,16
    5680:	01000404 	movi	r4,16
    5684:	003f0306 	br	5294 <__udivdi3+0x1a4>
    5688:	3007883a 	mov	r3,r6
    568c:	003eb106 	br	5154 <__udivdi3+0x64>
    5690:	0007883a 	mov	r3,zero
    5694:	00800044 	movi	r2,1
    5698:	003eec06 	br	524c <__udivdi3+0x15c>
    569c:	3805883a 	mov	r2,r7
    56a0:	0009883a 	mov	r4,zero
    56a4:	003efb06 	br	5294 <__udivdi3+0x1a4>
    56a8:	8006d43a 	srli	r3,r16,16
    56ac:	04400404 	movi	r17,16
    56b0:	003f0e06 	br	52ec <__udivdi3+0x1fc>
    56b4:	3006d43a 	srli	r3,r6,16
    56b8:	04400404 	movi	r17,16
    56bc:	003ea506 	br	5154 <__udivdi3+0x64>
    56c0:	8007883a 	mov	r3,r16
    56c4:	003f0906 	br	52ec <__udivdi3+0x1fc>
    56c8:	102f883a 	mov	r23,r2
    56cc:	003fc006 	br	55d0 <__udivdi3+0x4e0>
    56d0:	1839883a 	mov	fp,r3
    56d4:	003f8206 	br	54e0 <__udivdi3+0x3f0>
    56d8:	2821883a 	mov	r16,r5
    56dc:	003fa406 	br	5570 <__udivdi3+0x480>
    56e0:	182f883a 	mov	r23,r3
    56e4:	003f6806 	br	5488 <__udivdi3+0x398>
    56e8:	94bfff84 	addi	r18,r18,-2
    56ec:	003f3706 	br	53cc <__udivdi3+0x2dc>
    56f0:	94bfff84 	addi	r18,r18,-2
    56f4:	003ece06 	br	5230 <__udivdi3+0x140>
    56f8:	ad7fff84 	addi	r21,r21,-2
    56fc:	2409883a 	add	r4,r4,r16
    5700:	003eb606 	br	51dc <__udivdi3+0xec>
    5704:	ad7fff84 	addi	r21,r21,-2
    5708:	2409883a 	add	r4,r4,r16
    570c:	003f1806 	br	5370 <__udivdi3+0x280>

00005710 <__umoddi3>:
    5710:	defff304 	addi	sp,sp,-52
    5714:	dc400415 	stw	r17,16(sp)
    5718:	dc000315 	stw	r16,12(sp)
    571c:	dfc00c15 	stw	ra,48(sp)
    5720:	df000b15 	stw	fp,44(sp)
    5724:	ddc00a15 	stw	r23,40(sp)
    5728:	dd800915 	stw	r22,36(sp)
    572c:	dd400815 	stw	r21,32(sp)
    5730:	dd000715 	stw	r20,28(sp)
    5734:	dcc00615 	stw	r19,24(sp)
    5738:	dc800515 	stw	r18,20(sp)
    573c:	2823883a 	mov	r17,r5
    5740:	2021883a 	mov	r16,r4
    5744:	38003b1e 	bne	r7,zero,5834 <__umoddi3+0x124>
    5748:	3825883a 	mov	r18,r7
    574c:	3029883a 	mov	r20,r6
    5750:	2027883a 	mov	r19,r4
    5754:	29805b2e 	bgeu	r5,r6,58c4 <__umoddi3+0x1b4>
    5758:	00bfffd4 	movui	r2,65535
    575c:	282d883a 	mov	r22,r5
    5760:	11809a2e 	bgeu	r2,r6,59cc <__umoddi3+0x2bc>
    5764:	00804034 	movhi	r2,256
    5768:	30814436 	bltu	r6,r2,5c7c <__umoddi3+0x56c>
    576c:	3006d63a 	srli	r3,r6,24
    5770:	04800604 	movi	r18,24
    5774:	00800074 	movhi	r2,1
    5778:	1885883a 	add	r2,r3,r2
    577c:	10b9fb03 	ldbu	r2,-6164(r2)
    5780:	00c00804 	movi	r3,32
    5784:	1485883a 	add	r2,r2,r18
    5788:	18a5c83a 	sub	r18,r3,r2
    578c:	18800526 	beq	r3,r2,57a4 <__umoddi3+0x94>
    5790:	8ca2983a 	sll	r17,r17,r18
    5794:	8084d83a 	srl	r2,r16,r2
    5798:	34a8983a 	sll	r20,r6,r18
    579c:	84a6983a 	sll	r19,r16,r18
    57a0:	146cb03a 	or	r22,r2,r17
    57a4:	a02ed43a 	srli	r23,r20,16
    57a8:	b009883a 	mov	r4,r22
    57ac:	a57fffcc 	andi	r21,r20,65535
    57b0:	b80b883a 	mov	r5,r23
    57b4:	0005e2c0 	call	5e2c <__umodsi3>
    57b8:	b80b883a 	mov	r5,r23
    57bc:	b009883a 	mov	r4,r22
    57c0:	1023883a 	mov	r17,r2
    57c4:	0005dc80 	call	5dc8 <__udivsi3>
    57c8:	a809883a 	mov	r4,r21
    57cc:	100b883a 	mov	r5,r2
    57d0:	0005e880 	call	5e88 <__mulsi3>
    57d4:	8822943a 	slli	r17,r17,16
    57d8:	9808d43a 	srli	r4,r19,16
    57dc:	8908b03a 	or	r4,r17,r4
    57e0:	2080042e 	bgeu	r4,r2,57f4 <__umoddi3+0xe4>
    57e4:	2509883a 	add	r4,r4,r20
    57e8:	25000236 	bltu	r4,r20,57f4 <__umoddi3+0xe4>
    57ec:	2080012e 	bgeu	r4,r2,57f4 <__umoddi3+0xe4>
    57f0:	2509883a 	add	r4,r4,r20
    57f4:	20a1c83a 	sub	r16,r4,r2
    57f8:	b80b883a 	mov	r5,r23
    57fc:	8009883a 	mov	r4,r16
    5800:	0005e2c0 	call	5e2c <__umodsi3>
    5804:	b80b883a 	mov	r5,r23
    5808:	8009883a 	mov	r4,r16
    580c:	1023883a 	mov	r17,r2
    5810:	0005dc80 	call	5dc8 <__udivsi3>
    5814:	8822943a 	slli	r17,r17,16
    5818:	100b883a 	mov	r5,r2
    581c:	a809883a 	mov	r4,r21
    5820:	0005e880 	call	5e88 <__mulsi3>
    5824:	98ffffcc 	andi	r3,r19,65535
    5828:	88c6b03a 	or	r3,r17,r3
    582c:	18805e2e 	bgeu	r3,r2,59a8 <__umoddi3+0x298>
    5830:	00005906 	br	5998 <__umoddi3+0x288>
    5834:	2005883a 	mov	r2,r4
    5838:	29c00d2e 	bgeu	r5,r7,5870 <__umoddi3+0x160>
    583c:	2807883a 	mov	r3,r5
    5840:	dfc00c17 	ldw	ra,48(sp)
    5844:	df000b17 	ldw	fp,44(sp)
    5848:	ddc00a17 	ldw	r23,40(sp)
    584c:	dd800917 	ldw	r22,36(sp)
    5850:	dd400817 	ldw	r21,32(sp)
    5854:	dd000717 	ldw	r20,28(sp)
    5858:	dcc00617 	ldw	r19,24(sp)
    585c:	dc800517 	ldw	r18,20(sp)
    5860:	dc400417 	ldw	r17,16(sp)
    5864:	dc000317 	ldw	r16,12(sp)
    5868:	dec00d04 	addi	sp,sp,52
    586c:	f800283a 	ret
    5870:	013fffd4 	movui	r4,65535
    5874:	2807883a 	mov	r3,r5
    5878:	21c0592e 	bgeu	r4,r7,59e0 <__umoddi3+0x2d0>
    587c:	01004034 	movhi	r4,256
    5880:	39010336 	bltu	r7,r4,5c90 <__umoddi3+0x580>
    5884:	3808d63a 	srli	r4,r7,24
    5888:	02000604 	movi	r8,24
    588c:	01400074 	movhi	r5,1
    5890:	214b883a 	add	r5,r4,r5
    5894:	2d39fb03 	ldbu	r20,-6164(r5)
    5898:	01000804 	movi	r4,32
    589c:	a229883a 	add	r20,r20,r8
    58a0:	252bc83a 	sub	r21,r4,r20
    58a4:	2500531e 	bne	r4,r20,59f4 <__umoddi3+0x2e4>
    58a8:	3c400136 	bltu	r7,r17,58b0 <__umoddi3+0x1a0>
    58ac:	81bfe436 	bltu	r16,r6,5840 <__umoddi3+0x130>
    58b0:	8185c83a 	sub	r2,r16,r6
    58b4:	89cfc83a 	sub	r7,r17,r7
    58b8:	8087803a 	cmpltu	r3,r16,r2
    58bc:	38c7c83a 	sub	r3,r7,r3
    58c0:	003fdf06 	br	5840 <__umoddi3+0x130>
    58c4:	3000041e 	bne	r6,zero,58d8 <__umoddi3+0x1c8>
    58c8:	000b883a 	mov	r5,zero
    58cc:	01000044 	movi	r4,1
    58d0:	0005dc80 	call	5dc8 <__udivsi3>
    58d4:	1029883a 	mov	r20,r2
    58d8:	00bfffd4 	movui	r2,65535
    58dc:	1500362e 	bgeu	r2,r20,59b8 <__umoddi3+0x2a8>
    58e0:	00804034 	movhi	r2,256
    58e4:	a080ed36 	bltu	r20,r2,5c9c <__umoddi3+0x58c>
    58e8:	a006d63a 	srli	r3,r20,24
    58ec:	04800604 	movi	r18,24
    58f0:	00800074 	movhi	r2,1
    58f4:	1885883a 	add	r2,r3,r2
    58f8:	15b9fb03 	ldbu	r22,-6164(r2)
    58fc:	00800804 	movi	r2,32
    5900:	b4ad883a 	add	r22,r22,r18
    5904:	15a5c83a 	sub	r18,r2,r22
    5908:	1580a51e 	bne	r2,r22,5ba0 <__umoddi3+0x490>
    590c:	a02ed43a 	srli	r23,r20,16
    5910:	8d23c83a 	sub	r17,r17,r20
    5914:	a57fffcc 	andi	r21,r20,65535
    5918:	8809883a 	mov	r4,r17
    591c:	b80b883a 	mov	r5,r23
    5920:	0005e2c0 	call	5e2c <__umodsi3>
    5924:	8809883a 	mov	r4,r17
    5928:	b80b883a 	mov	r5,r23
    592c:	1023883a 	mov	r17,r2
    5930:	0005dc80 	call	5dc8 <__udivsi3>
    5934:	1009883a 	mov	r4,r2
    5938:	a80b883a 	mov	r5,r21
    593c:	0005e880 	call	5e88 <__mulsi3>
    5940:	8822943a 	slli	r17,r17,16
    5944:	9808d43a 	srli	r4,r19,16
    5948:	8908b03a 	or	r4,r17,r4
    594c:	2080032e 	bgeu	r4,r2,595c <__umoddi3+0x24c>
    5950:	2509883a 	add	r4,r4,r20
    5954:	25000136 	bltu	r4,r20,595c <__umoddi3+0x24c>
    5958:	2080dc36 	bltu	r4,r2,5ccc <__umoddi3+0x5bc>
    595c:	20a1c83a 	sub	r16,r4,r2
    5960:	b80b883a 	mov	r5,r23
    5964:	8009883a 	mov	r4,r16
    5968:	0005e2c0 	call	5e2c <__umodsi3>
    596c:	b80b883a 	mov	r5,r23
    5970:	8009883a 	mov	r4,r16
    5974:	1023883a 	mov	r17,r2
    5978:	8822943a 	slli	r17,r17,16
    597c:	0005dc80 	call	5dc8 <__udivsi3>
    5980:	a80b883a 	mov	r5,r21
    5984:	1009883a 	mov	r4,r2
    5988:	0005e880 	call	5e88 <__mulsi3>
    598c:	9cffffcc 	andi	r19,r19,65535
    5990:	8cc6b03a 	or	r3,r17,r19
    5994:	1880042e 	bgeu	r3,r2,59a8 <__umoddi3+0x298>
    5998:	1d07883a 	add	r3,r3,r20
    599c:	1d000236 	bltu	r3,r20,59a8 <__umoddi3+0x298>
    59a0:	1880012e 	bgeu	r3,r2,59a8 <__umoddi3+0x298>
    59a4:	1d07883a 	add	r3,r3,r20
    59a8:	1885c83a 	sub	r2,r3,r2
    59ac:	1484d83a 	srl	r2,r2,r18
    59b0:	0007883a 	mov	r3,zero
    59b4:	003fa206 	br	5840 <__umoddi3+0x130>
    59b8:	a0804030 	cmpltui	r2,r20,256
    59bc:	1000ba1e 	bne	r2,zero,5ca8 <__umoddi3+0x598>
    59c0:	a006d23a 	srli	r3,r20,8
    59c4:	04800204 	movi	r18,8
    59c8:	003fc906 	br	58f0 <__umoddi3+0x1e0>
    59cc:	30804030 	cmpltui	r2,r6,256
    59d0:	1000ad1e 	bne	r2,zero,5c88 <__umoddi3+0x578>
    59d4:	3006d23a 	srli	r3,r6,8
    59d8:	04800204 	movi	r18,8
    59dc:	003f6506 	br	5774 <__umoddi3+0x64>
    59e0:	39004030 	cmpltui	r4,r7,256
    59e4:	2000b21e 	bne	r4,zero,5cb0 <__umoddi3+0x5a0>
    59e8:	3808d23a 	srli	r4,r7,8
    59ec:	02000204 	movi	r8,8
    59f0:	003fa606 	br	588c <__umoddi3+0x17c>
    59f4:	3d4e983a 	sll	r7,r7,r21
    59f8:	3508d83a 	srl	r4,r6,r20
    59fc:	8d2cd83a 	srl	r22,r17,r20
    5a00:	8504d83a 	srl	r2,r16,r20
    5a04:	21e4b03a 	or	r18,r4,r7
    5a08:	8d62983a 	sll	r17,r17,r21
    5a0c:	9026d43a 	srli	r19,r18,16
    5a10:	354c983a 	sll	r6,r6,r21
    5a14:	1444b03a 	or	r2,r2,r17
    5a18:	b009883a 	mov	r4,r22
    5a1c:	980b883a 	mov	r5,r19
    5a20:	d9800115 	stw	r6,4(sp)
    5a24:	d8800015 	stw	r2,0(sp)
    5a28:	0005e2c0 	call	5e2c <__umodsi3>
    5a2c:	980b883a 	mov	r5,r19
    5a30:	b009883a 	mov	r4,r22
    5a34:	102f883a 	mov	r23,r2
    5a38:	947fffcc 	andi	r17,r18,65535
    5a3c:	0005dc80 	call	5dc8 <__udivsi3>
    5a40:	8809883a 	mov	r4,r17
    5a44:	100b883a 	mov	r5,r2
    5a48:	1039883a 	mov	fp,r2
    5a4c:	0005e880 	call	5e88 <__mulsi3>
    5a50:	d8c00017 	ldw	r3,0(sp)
    5a54:	b82e943a 	slli	r23,r23,16
    5a58:	8560983a 	sll	r16,r16,r21
    5a5c:	1808d43a 	srli	r4,r3,16
    5a60:	b908b03a 	or	r4,r23,r4
    5a64:	2080062e 	bgeu	r4,r2,5a80 <__umoddi3+0x370>
    5a68:	2489883a 	add	r4,r4,r18
    5a6c:	e17fffc4 	addi	r5,fp,-1
    5a70:	24809436 	bltu	r4,r18,5cc4 <__umoddi3+0x5b4>
    5a74:	2080932e 	bgeu	r4,r2,5cc4 <__umoddi3+0x5b4>
    5a78:	e73fff84 	addi	fp,fp,-2
    5a7c:	2489883a 	add	r4,r4,r18
    5a80:	20adc83a 	sub	r22,r4,r2
    5a84:	980b883a 	mov	r5,r19
    5a88:	b009883a 	mov	r4,r22
    5a8c:	0005e2c0 	call	5e2c <__umodsi3>
    5a90:	980b883a 	mov	r5,r19
    5a94:	b009883a 	mov	r4,r22
    5a98:	102f883a 	mov	r23,r2
    5a9c:	0005dc80 	call	5dc8 <__udivsi3>
    5aa0:	100b883a 	mov	r5,r2
    5aa4:	8809883a 	mov	r4,r17
    5aa8:	d8800215 	stw	r2,8(sp)
    5aac:	0005e880 	call	5e88 <__mulsi3>
    5ab0:	d8c00017 	ldw	r3,0(sp)
    5ab4:	b82e943a 	slli	r23,r23,16
    5ab8:	d9400217 	ldw	r5,8(sp)
    5abc:	1c7fffcc 	andi	r17,r3,65535
    5ac0:	bc62b03a 	or	r17,r23,r17
    5ac4:	8880062e 	bgeu	r17,r2,5ae0 <__umoddi3+0x3d0>
    5ac8:	8ca3883a 	add	r17,r17,r18
    5acc:	28ffffc4 	addi	r3,r5,-1
    5ad0:	8c807a36 	bltu	r17,r18,5cbc <__umoddi3+0x5ac>
    5ad4:	8880792e 	bgeu	r17,r2,5cbc <__umoddi3+0x5ac>
    5ad8:	297fff84 	addi	r5,r5,-2
    5adc:	8ca3883a 	add	r17,r17,r18
    5ae0:	e02c943a 	slli	r22,fp,16
    5ae4:	d9c00117 	ldw	r7,4(sp)
    5ae8:	29bfffcc 	andi	r6,r5,65535
    5aec:	b16cb03a 	or	r22,r22,r5
    5af0:	38ffffcc 	andi	r3,r7,65535
    5af4:	b02cd43a 	srli	r22,r22,16
    5af8:	180b883a 	mov	r5,r3
    5afc:	3009883a 	mov	r4,r6
    5b00:	3838d43a 	srli	fp,r7,16
    5b04:	182f883a 	mov	r23,r3
    5b08:	d9800015 	stw	r6,0(sp)
    5b0c:	88a3c83a 	sub	r17,r17,r2
    5b10:	0005e880 	call	5e88 <__mulsi3>
    5b14:	b80b883a 	mov	r5,r23
    5b18:	b009883a 	mov	r4,r22
    5b1c:	102f883a 	mov	r23,r2
    5b20:	0005e880 	call	5e88 <__mulsi3>
    5b24:	e00b883a 	mov	r5,fp
    5b28:	b009883a 	mov	r4,r22
    5b2c:	102d883a 	mov	r22,r2
    5b30:	0005e880 	call	5e88 <__mulsi3>
    5b34:	d9800017 	ldw	r6,0(sp)
    5b38:	e00b883a 	mov	r5,fp
    5b3c:	1039883a 	mov	fp,r2
    5b40:	3009883a 	mov	r4,r6
    5b44:	0005e880 	call	5e88 <__mulsi3>
    5b48:	b808d43a 	srli	r4,r23,16
    5b4c:	1585883a 	add	r2,r2,r22
    5b50:	2089883a 	add	r4,r4,r2
    5b54:	2580022e 	bgeu	r4,r22,5b60 <__umoddi3+0x450>
    5b58:	00800074 	movhi	r2,1
    5b5c:	e0b9883a 	add	fp,fp,r2
    5b60:	2006d43a 	srli	r3,r4,16
    5b64:	2008943a 	slli	r4,r4,16
    5b68:	bdffffcc 	andi	r23,r23,65535
    5b6c:	1f07883a 	add	r3,r3,fp
    5b70:	25c9883a 	add	r4,r4,r23
    5b74:	88c03a36 	bltu	r17,r3,5c60 <__umoddi3+0x550>
    5b78:	88c03826 	beq	r17,r3,5c5c <__umoddi3+0x54c>
    5b7c:	8109c83a 	sub	r4,r16,r4
    5b80:	8121803a 	cmpltu	r16,r16,r4
    5b84:	88c7c83a 	sub	r3,r17,r3
    5b88:	1c07c83a 	sub	r3,r3,r16
    5b8c:	1d04983a 	sll	r2,r3,r20
    5b90:	2548d83a 	srl	r4,r4,r21
    5b94:	1d46d83a 	srl	r3,r3,r21
    5b98:	1104b03a 	or	r2,r2,r4
    5b9c:	003f2806 	br	5840 <__umoddi3+0x130>
    5ba0:	a4a8983a 	sll	r20,r20,r18
    5ba4:	8da6d83a 	srl	r19,r17,r22
    5ba8:	8ca2983a 	sll	r17,r17,r18
    5bac:	a02ed43a 	srli	r23,r20,16
    5bb0:	9809883a 	mov	r4,r19
    5bb4:	85acd83a 	srl	r22,r16,r22
    5bb8:	b80b883a 	mov	r5,r23
    5bbc:	0005e2c0 	call	5e2c <__umodsi3>
    5bc0:	9809883a 	mov	r4,r19
    5bc4:	b80b883a 	mov	r5,r23
    5bc8:	b46cb03a 	or	r22,r22,r17
    5bcc:	a57fffcc 	andi	r21,r20,65535
    5bd0:	1023883a 	mov	r17,r2
    5bd4:	0005dc80 	call	5dc8 <__udivsi3>
    5bd8:	a809883a 	mov	r4,r21
    5bdc:	100b883a 	mov	r5,r2
    5be0:	0005e880 	call	5e88 <__mulsi3>
    5be4:	8822943a 	slli	r17,r17,16
    5be8:	b008d43a 	srli	r4,r22,16
    5bec:	84a6983a 	sll	r19,r16,r18
    5bf0:	8908b03a 	or	r4,r17,r4
    5bf4:	2080042e 	bgeu	r4,r2,5c08 <__umoddi3+0x4f8>
    5bf8:	2509883a 	add	r4,r4,r20
    5bfc:	25000236 	bltu	r4,r20,5c08 <__umoddi3+0x4f8>
    5c00:	2080012e 	bgeu	r4,r2,5c08 <__umoddi3+0x4f8>
    5c04:	2509883a 	add	r4,r4,r20
    5c08:	20a1c83a 	sub	r16,r4,r2
    5c0c:	8009883a 	mov	r4,r16
    5c10:	b80b883a 	mov	r5,r23
    5c14:	0005e2c0 	call	5e2c <__umodsi3>
    5c18:	8009883a 	mov	r4,r16
    5c1c:	1021883a 	mov	r16,r2
    5c20:	b80b883a 	mov	r5,r23
    5c24:	8020943a 	slli	r16,r16,16
    5c28:	0005dc80 	call	5dc8 <__udivsi3>
    5c2c:	100b883a 	mov	r5,r2
    5c30:	a809883a 	mov	r4,r21
    5c34:	b47fffcc 	andi	r17,r22,65535
    5c38:	0005e880 	call	5e88 <__mulsi3>
    5c3c:	8462b03a 	or	r17,r16,r17
    5c40:	8880042e 	bgeu	r17,r2,5c54 <__umoddi3+0x544>
    5c44:	8d23883a 	add	r17,r17,r20
    5c48:	8d000236 	bltu	r17,r20,5c54 <__umoddi3+0x544>
    5c4c:	8880012e 	bgeu	r17,r2,5c54 <__umoddi3+0x544>
    5c50:	8d23883a 	add	r17,r17,r20
    5c54:	88a3c83a 	sub	r17,r17,r2
    5c58:	003f2f06 	br	5918 <__umoddi3+0x208>
    5c5c:	813fc72e 	bgeu	r16,r4,5b7c <__umoddi3+0x46c>
    5c60:	d8800117 	ldw	r2,4(sp)
    5c64:	20a7c83a 	sub	r19,r4,r2
    5c68:	24c9803a 	cmpltu	r4,r4,r19
    5c6c:	2489883a 	add	r4,r4,r18
    5c70:	1907c83a 	sub	r3,r3,r4
    5c74:	9809883a 	mov	r4,r19
    5c78:	003fc006 	br	5b7c <__umoddi3+0x46c>
    5c7c:	3006d43a 	srli	r3,r6,16
    5c80:	04800404 	movi	r18,16
    5c84:	003ebb06 	br	5774 <__umoddi3+0x64>
    5c88:	3007883a 	mov	r3,r6
    5c8c:	003eb906 	br	5774 <__umoddi3+0x64>
    5c90:	3808d43a 	srli	r4,r7,16
    5c94:	02000404 	movi	r8,16
    5c98:	003efc06 	br	588c <__umoddi3+0x17c>
    5c9c:	a006d43a 	srli	r3,r20,16
    5ca0:	04800404 	movi	r18,16
    5ca4:	003f1206 	br	58f0 <__umoddi3+0x1e0>
    5ca8:	a007883a 	mov	r3,r20
    5cac:	003f1006 	br	58f0 <__umoddi3+0x1e0>
    5cb0:	3809883a 	mov	r4,r7
    5cb4:	0011883a 	mov	r8,zero
    5cb8:	003ef406 	br	588c <__umoddi3+0x17c>
    5cbc:	180b883a 	mov	r5,r3
    5cc0:	003f8706 	br	5ae0 <__umoddi3+0x3d0>
    5cc4:	2839883a 	mov	fp,r5
    5cc8:	003f6d06 	br	5a80 <__umoddi3+0x370>
    5ccc:	2509883a 	add	r4,r4,r20
    5cd0:	003f2206 	br	595c <__umoddi3+0x24c>

00005cd4 <__divsi3>:
    5cd4:	20001a16 	blt	r4,zero,5d40 <__divsi3+0x6c>
    5cd8:	000f883a 	mov	r7,zero
    5cdc:	2800020e 	bge	r5,zero,5ce8 <__divsi3+0x14>
    5ce0:	014bc83a 	sub	r5,zero,r5
    5ce4:	39c0005c 	xori	r7,r7,1
    5ce8:	200d883a 	mov	r6,r4
    5cec:	00c00044 	movi	r3,1
    5cf0:	2900092e 	bgeu	r5,r4,5d18 <__divsi3+0x44>
    5cf4:	00800804 	movi	r2,32
    5cf8:	00c00044 	movi	r3,1
    5cfc:	00000106 	br	5d04 <__divsi3+0x30>
    5d00:	10001226 	beq	r2,zero,5d4c <__divsi3+0x78>
    5d04:	294b883a 	add	r5,r5,r5
    5d08:	10bfffc4 	addi	r2,r2,-1
    5d0c:	18c7883a 	add	r3,r3,r3
    5d10:	293ffb36 	bltu	r5,r4,5d00 <__divsi3+0x2c>
    5d14:	18000d26 	beq	r3,zero,5d4c <__divsi3+0x78>
    5d18:	0005883a 	mov	r2,zero
    5d1c:	31400236 	bltu	r6,r5,5d28 <__divsi3+0x54>
    5d20:	314dc83a 	sub	r6,r6,r5
    5d24:	10c4b03a 	or	r2,r2,r3
    5d28:	1806d07a 	srli	r3,r3,1
    5d2c:	280ad07a 	srli	r5,r5,1
    5d30:	183ffa1e 	bne	r3,zero,5d1c <__divsi3+0x48>
    5d34:	38000126 	beq	r7,zero,5d3c <__divsi3+0x68>
    5d38:	0085c83a 	sub	r2,zero,r2
    5d3c:	f800283a 	ret
    5d40:	0109c83a 	sub	r4,zero,r4
    5d44:	01c00044 	movi	r7,1
    5d48:	003fe406 	br	5cdc <__divsi3+0x8>
    5d4c:	0005883a 	mov	r2,zero
    5d50:	003ff806 	br	5d34 <__divsi3+0x60>

00005d54 <__modsi3>:
    5d54:	20001916 	blt	r4,zero,5dbc <__modsi3+0x68>
    5d58:	000f883a 	mov	r7,zero
    5d5c:	2005883a 	mov	r2,r4
    5d60:	2800010e 	bge	r5,zero,5d68 <__modsi3+0x14>
    5d64:	014bc83a 	sub	r5,zero,r5
    5d68:	00c00044 	movi	r3,1
    5d6c:	2900092e 	bgeu	r5,r4,5d94 <__modsi3+0x40>
    5d70:	01800804 	movi	r6,32
    5d74:	00c00044 	movi	r3,1
    5d78:	00000106 	br	5d80 <__modsi3+0x2c>
    5d7c:	30000d26 	beq	r6,zero,5db4 <__modsi3+0x60>
    5d80:	294b883a 	add	r5,r5,r5
    5d84:	31bfffc4 	addi	r6,r6,-1
    5d88:	18c7883a 	add	r3,r3,r3
    5d8c:	293ffb36 	bltu	r5,r4,5d7c <__modsi3+0x28>
    5d90:	18000826 	beq	r3,zero,5db4 <__modsi3+0x60>
    5d94:	1806d07a 	srli	r3,r3,1
    5d98:	11400136 	bltu	r2,r5,5da0 <__modsi3+0x4c>
    5d9c:	1145c83a 	sub	r2,r2,r5
    5da0:	280ad07a 	srli	r5,r5,1
    5da4:	183ffb1e 	bne	r3,zero,5d94 <__modsi3+0x40>
    5da8:	38000126 	beq	r7,zero,5db0 <__modsi3+0x5c>
    5dac:	0085c83a 	sub	r2,zero,r2
    5db0:	f800283a 	ret
    5db4:	2005883a 	mov	r2,r4
    5db8:	003ffb06 	br	5da8 <__modsi3+0x54>
    5dbc:	0109c83a 	sub	r4,zero,r4
    5dc0:	01c00044 	movi	r7,1
    5dc4:	003fe506 	br	5d5c <__modsi3+0x8>

00005dc8 <__udivsi3>:
    5dc8:	200d883a 	mov	r6,r4
    5dcc:	2900152e 	bgeu	r5,r4,5e24 <__udivsi3+0x5c>
    5dd0:	28001416 	blt	r5,zero,5e24 <__udivsi3+0x5c>
    5dd4:	00800804 	movi	r2,32
    5dd8:	00c00044 	movi	r3,1
    5ddc:	00000206 	br	5de8 <__udivsi3+0x20>
    5de0:	10000e26 	beq	r2,zero,5e1c <__udivsi3+0x54>
    5de4:	28000516 	blt	r5,zero,5dfc <__udivsi3+0x34>
    5de8:	294b883a 	add	r5,r5,r5
    5dec:	10bfffc4 	addi	r2,r2,-1
    5df0:	18c7883a 	add	r3,r3,r3
    5df4:	293ffa36 	bltu	r5,r4,5de0 <__udivsi3+0x18>
    5df8:	18000826 	beq	r3,zero,5e1c <__udivsi3+0x54>
    5dfc:	0005883a 	mov	r2,zero
    5e00:	31400236 	bltu	r6,r5,5e0c <__udivsi3+0x44>
    5e04:	314dc83a 	sub	r6,r6,r5
    5e08:	10c4b03a 	or	r2,r2,r3
    5e0c:	1806d07a 	srli	r3,r3,1
    5e10:	280ad07a 	srli	r5,r5,1
    5e14:	183ffa1e 	bne	r3,zero,5e00 <__udivsi3+0x38>
    5e18:	f800283a 	ret
    5e1c:	0005883a 	mov	r2,zero
    5e20:	f800283a 	ret
    5e24:	00c00044 	movi	r3,1
    5e28:	003ff406 	br	5dfc <__udivsi3+0x34>

00005e2c <__umodsi3>:
    5e2c:	2005883a 	mov	r2,r4
    5e30:	2900132e 	bgeu	r5,r4,5e80 <__umodsi3+0x54>
    5e34:	28001216 	blt	r5,zero,5e80 <__umodsi3+0x54>
    5e38:	01800804 	movi	r6,32
    5e3c:	00c00044 	movi	r3,1
    5e40:	00000206 	br	5e4c <__umodsi3+0x20>
    5e44:	30000c26 	beq	r6,zero,5e78 <__umodsi3+0x4c>
    5e48:	28000516 	blt	r5,zero,5e60 <__umodsi3+0x34>
    5e4c:	294b883a 	add	r5,r5,r5
    5e50:	31bfffc4 	addi	r6,r6,-1
    5e54:	18c7883a 	add	r3,r3,r3
    5e58:	293ffa36 	bltu	r5,r4,5e44 <__umodsi3+0x18>
    5e5c:	18000626 	beq	r3,zero,5e78 <__umodsi3+0x4c>
    5e60:	1806d07a 	srli	r3,r3,1
    5e64:	11400136 	bltu	r2,r5,5e6c <__umodsi3+0x40>
    5e68:	1145c83a 	sub	r2,r2,r5
    5e6c:	280ad07a 	srli	r5,r5,1
    5e70:	183ffb1e 	bne	r3,zero,5e60 <__umodsi3+0x34>
    5e74:	f800283a 	ret
    5e78:	2005883a 	mov	r2,r4
    5e7c:	f800283a 	ret
    5e80:	00c00044 	movi	r3,1
    5e84:	003ff606 	br	5e60 <__umodsi3+0x34>

00005e88 <__mulsi3>:
    5e88:	0005883a 	mov	r2,zero
    5e8c:	20000726 	beq	r4,zero,5eac <__mulsi3+0x24>
    5e90:	20c0004c 	andi	r3,r4,1
    5e94:	2008d07a 	srli	r4,r4,1
    5e98:	18000126 	beq	r3,zero,5ea0 <__mulsi3+0x18>
    5e9c:	1145883a 	add	r2,r2,r5
    5ea0:	294b883a 	add	r5,r5,r5
    5ea4:	203ffa1e 	bne	r4,zero,5e90 <__mulsi3+0x8>
    5ea8:	f800283a 	ret
    5eac:	f800283a 	ret

00005eb0 <__addsf3>:
    5eb0:	defffc04 	addi	sp,sp,-16
    5eb4:	2806d5fa 	srli	r3,r5,23
    5eb8:	dc000015 	stw	r16,0(sp)
    5ebc:	2020d5fa 	srli	r16,r4,23
    5ec0:	200cd7fa 	srli	r6,r4,31
    5ec4:	00802034 	movhi	r2,128
    5ec8:	2812d7fa 	srli	r9,r5,31
    5ecc:	10bfffc4 	addi	r2,r2,-1
    5ed0:	1114703a 	and	r10,r2,r4
    5ed4:	1b003fcc 	andi	r12,r3,255
    5ed8:	dc400115 	stw	r17,4(sp)
    5edc:	84003fcc 	andi	r16,r16,255
    5ee0:	115a703a 	and	r13,r2,r5
    5ee4:	dfc00315 	stw	ra,12(sp)
    5ee8:	dc800215 	stw	r18,8(sp)
    5eec:	500e90fa 	slli	r7,r10,3
    5ef0:	681090fa 	slli	r8,r13,3
    5ef4:	5007883a 	mov	r3,r10
    5ef8:	3023883a 	mov	r17,r6
    5efc:	8317c83a 	sub	r11,r16,r12
    5f00:	32403926 	beq	r6,r9,5fe8 <__addsf3+0x138>
    5f04:	02c02e0e 	bge	zero,r11,5fc0 <__addsf3+0x110>
    5f08:	60004c26 	beq	r12,zero,603c <__addsf3+0x18c>
    5f0c:	80803fe0 	cmpeqi	r2,r16,255
    5f10:	1000801e 	bne	r2,zero,6114 <__addsf3+0x264>
    5f14:	42010034 	orhi	r8,r8,1024
    5f18:	58800710 	cmplti	r2,r11,28
    5f1c:	10009e1e 	bne	r2,zero,6198 <__addsf3+0x2e8>
    5f20:	01000044 	movi	r4,1
    5f24:	3909c83a 	sub	r4,r7,r4
    5f28:	2081002c 	andhi	r2,r4,1024
    5f2c:	10006826 	beq	r2,zero,60d0 <__addsf3+0x220>
    5f30:	04810034 	movhi	r18,1024
    5f34:	94bfffc4 	addi	r18,r18,-1
    5f38:	24a4703a 	and	r18,r4,r18
    5f3c:	9009883a 	mov	r4,r18
    5f40:	0009bf00 	call	9bf0 <__clzsi2>
    5f44:	10bffec4 	addi	r2,r2,-5
    5f48:	9088983a 	sll	r4,r18,r2
    5f4c:	1400880e 	bge	r2,r16,6170 <__addsf3+0x2c0>
    5f50:	00ff0034 	movhi	r3,64512
    5f54:	18ffffc4 	addi	r3,r3,-1
    5f58:	80a1c83a 	sub	r16,r16,r2
    5f5c:	20c8703a 	and	r4,r4,r3
    5f60:	208001cc 	andi	r2,r4,7
    5f64:	10000426 	beq	r2,zero,5f78 <__addsf3+0xc8>
    5f68:	208003cc 	andi	r2,r4,15
    5f6c:	10800120 	cmpeqi	r2,r2,4
    5f70:	1000011e 	bne	r2,zero,5f78 <__addsf3+0xc8>
    5f74:	21000104 	addi	r4,r4,4
    5f78:	2081002c 	andhi	r2,r4,1024
    5f7c:	10005626 	beq	r2,zero,60d8 <__addsf3+0x228>
    5f80:	84000044 	addi	r16,r16,1
    5f84:	80803fe0 	cmpeqi	r2,r16,255
    5f88:	1000461e 	bne	r2,zero,60a4 <__addsf3+0x1f4>
    5f8c:	200491ba 	slli	r2,r4,6
    5f90:	1006d27a 	srli	r3,r2,9
    5f94:	84003fcc 	andi	r16,r16,255
    5f98:	800495fa 	slli	r2,r16,23
    5f9c:	882297fa 	slli	r17,r17,31
    5fa0:	10c4b03a 	or	r2,r2,r3
    5fa4:	1444b03a 	or	r2,r2,r17
    5fa8:	dfc00317 	ldw	ra,12(sp)
    5fac:	dc800217 	ldw	r18,8(sp)
    5fb0:	dc400117 	ldw	r17,4(sp)
    5fb4:	dc000017 	ldw	r16,0(sp)
    5fb8:	dec00404 	addi	sp,sp,16
    5fbc:	f800283a 	ret
    5fc0:	58002526 	beq	r11,zero,6058 <__addsf3+0x1a8>
    5fc4:	6417c83a 	sub	r11,r12,r16
    5fc8:	8000821e 	bne	r16,zero,61d4 <__addsf3+0x324>
    5fcc:	38006426 	beq	r7,zero,6160 <__addsf3+0x2b0>
    5fd0:	58bfffc4 	addi	r2,r11,-1
    5fd4:	1000c226 	beq	r2,zero,62e0 <__addsf3+0x430>
    5fd8:	5ac03fe0 	cmpeqi	r11,r11,255
    5fdc:	58004b1e 	bne	r11,zero,610c <__addsf3+0x25c>
    5fe0:	1017883a 	mov	r11,r2
    5fe4:	00007e06 	br	61e0 <__addsf3+0x330>
    5fe8:	02c0510e 	bge	zero,r11,6130 <__addsf3+0x280>
    5fec:	60002626 	beq	r12,zero,6088 <__addsf3+0x1d8>
    5ff0:	80803fe0 	cmpeqi	r2,r16,255
    5ff4:	1000471e 	bne	r2,zero,6114 <__addsf3+0x264>
    5ff8:	42010034 	orhi	r8,r8,1024
    5ffc:	58800710 	cmplti	r2,r11,28
    6000:	10007e1e 	bne	r2,zero,61fc <__addsf3+0x34c>
    6004:	01000044 	movi	r4,1
    6008:	21c9883a 	add	r4,r4,r7
    600c:	2081002c 	andhi	r2,r4,1024
    6010:	10002f26 	beq	r2,zero,60d0 <__addsf3+0x220>
    6014:	84000044 	addi	r16,r16,1
    6018:	80803fe0 	cmpeqi	r2,r16,255
    601c:	1000211e 	bne	r2,zero,60a4 <__addsf3+0x1f4>
    6020:	2004d07a 	srli	r2,r4,1
    6024:	00df8034 	movhi	r3,32256
    6028:	18ffffc4 	addi	r3,r3,-1
    602c:	2100004c 	andi	r4,r4,1
    6030:	10c4703a 	and	r2,r2,r3
    6034:	1108b03a 	or	r4,r2,r4
    6038:	003fc906 	br	5f60 <__addsf3+0xb0>
    603c:	40004a26 	beq	r8,zero,6168 <__addsf3+0x2b8>
    6040:	58bfffc4 	addi	r2,r11,-1
    6044:	10009326 	beq	r2,zero,6294 <__addsf3+0x3e4>
    6048:	59003fe0 	cmpeqi	r4,r11,255
    604c:	2000311e 	bne	r4,zero,6114 <__addsf3+0x264>
    6050:	1017883a 	mov	r11,r2
    6054:	003fb006 	br	5f18 <__addsf3+0x68>
    6058:	81800044 	addi	r6,r16,1
    605c:	31803f8c 	andi	r6,r6,254
    6060:	3000541e 	bne	r6,zero,61b4 <__addsf3+0x304>
    6064:	80007e1e 	bne	r16,zero,6260 <__addsf3+0x3b0>
    6068:	3800a326 	beq	r7,zero,62f8 <__addsf3+0x448>
    606c:	40009326 	beq	r8,zero,62bc <__addsf3+0x40c>
    6070:	3a09c83a 	sub	r4,r7,r8
    6074:	2081002c 	andhi	r2,r4,1024
    6078:	1000a626 	beq	r2,zero,6314 <__addsf3+0x464>
    607c:	41c9c83a 	sub	r4,r8,r7
    6080:	4823883a 	mov	r17,r9
    6084:	003fb606 	br	5f60 <__addsf3+0xb0>
    6088:	40003726 	beq	r8,zero,6168 <__addsf3+0x2b8>
    608c:	58bfffc4 	addi	r2,r11,-1
    6090:	10007b26 	beq	r2,zero,6280 <__addsf3+0x3d0>
    6094:	5ac03fe0 	cmpeqi	r11,r11,255
    6098:	58001e1e 	bne	r11,zero,6114 <__addsf3+0x264>
    609c:	1017883a 	mov	r11,r2
    60a0:	003fd606 	br	5ffc <__addsf3+0x14c>
    60a4:	043fffc4 	movi	r16,-1
    60a8:	0007883a 	mov	r3,zero
    60ac:	003fb906 	br	5f94 <__addsf3+0xe4>
    60b0:	80800044 	addi	r2,r16,1
    60b4:	11803f8c 	andi	r6,r2,254
    60b8:	30005726 	beq	r6,zero,6218 <__addsf3+0x368>
    60bc:	10c03fe0 	cmpeqi	r3,r2,255
    60c0:	183ff81e 	bne	r3,zero,60a4 <__addsf3+0x1f4>
    60c4:	3a09883a 	add	r4,r7,r8
    60c8:	2008d07a 	srli	r4,r4,1
    60cc:	1021883a 	mov	r16,r2
    60d0:	208001cc 	andi	r2,r4,7
    60d4:	103fa41e 	bne	r2,zero,5f68 <__addsf3+0xb8>
    60d8:	2014d0fa 	srli	r10,r4,3
    60dc:	80803fe0 	cmpeqi	r2,r16,255
    60e0:	10000c1e 	bne	r2,zero,6114 <__addsf3+0x264>
    60e4:	00802034 	movhi	r2,128
    60e8:	10bfffc4 	addi	r2,r2,-1
    60ec:	5086703a 	and	r3,r10,r2
    60f0:	003fa806 	br	5f94 <__addsf3+0xe4>
    60f4:	38000626 	beq	r7,zero,6110 <__addsf3+0x260>
    60f8:	40000626 	beq	r8,zero,6114 <__addsf3+0x264>
    60fc:	2080102c 	andhi	r2,r4,64
    6100:	10000426 	beq	r2,zero,6114 <__addsf3+0x264>
    6104:	2940102c 	andhi	r5,r5,64
    6108:	2800021e 	bne	r5,zero,6114 <__addsf3+0x264>
    610c:	4823883a 	mov	r17,r9
    6110:	6815883a 	mov	r10,r13
    6114:	503fe326 	beq	r10,zero,60a4 <__addsf3+0x1f4>
    6118:	00802034 	movhi	r2,128
    611c:	50c01034 	orhi	r3,r10,64
    6120:	10bfffc4 	addi	r2,r2,-1
    6124:	1886703a 	and	r3,r3,r2
    6128:	043fffc4 	movi	r16,-1
    612c:	003f9906 	br	5f94 <__addsf3+0xe4>
    6130:	583fdf26 	beq	r11,zero,60b0 <__addsf3+0x200>
    6134:	6417c83a 	sub	r11,r12,r16
    6138:	80004226 	beq	r16,zero,6244 <__addsf3+0x394>
    613c:	60803fe0 	cmpeqi	r2,r12,255
    6140:	103ff31e 	bne	r2,zero,6110 <__addsf3+0x260>
    6144:	39c10034 	orhi	r7,r7,1024
    6148:	58800710 	cmplti	r2,r11,28
    614c:	10005d1e 	bne	r2,zero,62c4 <__addsf3+0x414>
    6150:	01000044 	movi	r4,1
    6154:	2209883a 	add	r4,r4,r8
    6158:	6021883a 	mov	r16,r12
    615c:	003fab06 	br	600c <__addsf3+0x15c>
    6160:	4823883a 	mov	r17,r9
    6164:	6815883a 	mov	r10,r13
    6168:	5821883a 	mov	r16,r11
    616c:	003fdb06 	br	60dc <__addsf3+0x22c>
    6170:	1405c83a 	sub	r2,r2,r16
    6174:	14800044 	addi	r18,r2,1
    6178:	00800804 	movi	r2,32
    617c:	1485c83a 	sub	r2,r2,r18
    6180:	2084983a 	sll	r2,r4,r2
    6184:	2488d83a 	srl	r4,r4,r18
    6188:	0021883a 	mov	r16,zero
    618c:	1004c03a 	cmpne	r2,r2,zero
    6190:	1108b03a 	or	r4,r2,r4
    6194:	003f7206 	br	5f60 <__addsf3+0xb0>
    6198:	01000804 	movi	r4,32
    619c:	22c9c83a 	sub	r4,r4,r11
    61a0:	4108983a 	sll	r4,r8,r4
    61a4:	42d0d83a 	srl	r8,r8,r11
    61a8:	2008c03a 	cmpne	r4,r4,zero
    61ac:	2208b03a 	or	r4,r4,r8
    61b0:	003f5c06 	br	5f24 <__addsf3+0x74>
    61b4:	3a25c83a 	sub	r18,r7,r8
    61b8:	9081002c 	andhi	r2,r18,1024
    61bc:	10002d1e 	bne	r2,zero,6274 <__addsf3+0x3c4>
    61c0:	903f5e1e 	bne	r18,zero,5f3c <__addsf3+0x8c>
    61c4:	0023883a 	mov	r17,zero
    61c8:	0021883a 	mov	r16,zero
    61cc:	0007883a 	mov	r3,zero
    61d0:	003f7006 	br	5f94 <__addsf3+0xe4>
    61d4:	60803fe0 	cmpeqi	r2,r12,255
    61d8:	103fcc1e 	bne	r2,zero,610c <__addsf3+0x25c>
    61dc:	39c10034 	orhi	r7,r7,1024
    61e0:	58800710 	cmplti	r2,r11,28
    61e4:	10002e1e 	bne	r2,zero,62a0 <__addsf3+0x3f0>
    61e8:	01000044 	movi	r4,1
    61ec:	4109c83a 	sub	r4,r8,r4
    61f0:	4823883a 	mov	r17,r9
    61f4:	6021883a 	mov	r16,r12
    61f8:	003f4b06 	br	5f28 <__addsf3+0x78>
    61fc:	01000804 	movi	r4,32
    6200:	22c9c83a 	sub	r4,r4,r11
    6204:	4108983a 	sll	r4,r8,r4
    6208:	42d0d83a 	srl	r8,r8,r11
    620c:	2008c03a 	cmpne	r4,r4,zero
    6210:	2208b03a 	or	r4,r4,r8
    6214:	003f7c06 	br	6008 <__addsf3+0x158>
    6218:	803fb61e 	bne	r16,zero,60f4 <__addsf3+0x244>
    621c:	38003a26 	beq	r7,zero,6308 <__addsf3+0x458>
    6220:	40002626 	beq	r8,zero,62bc <__addsf3+0x40c>
    6224:	3a09883a 	add	r4,r7,r8
    6228:	2081002c 	andhi	r2,r4,1024
    622c:	103fa826 	beq	r2,zero,60d0 <__addsf3+0x220>
    6230:	00bf0034 	movhi	r2,64512
    6234:	10bfffc4 	addi	r2,r2,-1
    6238:	2088703a 	and	r4,r4,r2
    623c:	04000044 	movi	r16,1
    6240:	003fa306 	br	60d0 <__addsf3+0x220>
    6244:	383fc726 	beq	r7,zero,6164 <__addsf3+0x2b4>
    6248:	58bfffc4 	addi	r2,r11,-1
    624c:	10000c26 	beq	r2,zero,6280 <__addsf3+0x3d0>
    6250:	5ac03fe0 	cmpeqi	r11,r11,255
    6254:	583fae1e 	bne	r11,zero,6110 <__addsf3+0x260>
    6258:	1017883a 	mov	r11,r2
    625c:	003fba06 	br	6148 <__addsf3+0x298>
    6260:	383fa51e 	bne	r7,zero,60f8 <__addsf3+0x248>
    6264:	403fa91e 	bne	r8,zero,610c <__addsf3+0x25c>
    6268:	0023883a 	mov	r17,zero
    626c:	1007883a 	mov	r3,r2
    6270:	003fad06 	br	6128 <__addsf3+0x278>
    6274:	41e5c83a 	sub	r18,r8,r7
    6278:	4823883a 	mov	r17,r9
    627c:	003f2f06 	br	5f3c <__addsf3+0x8c>
    6280:	3a09883a 	add	r4,r7,r8
    6284:	2081002c 	andhi	r2,r4,1024
    6288:	10001926 	beq	r2,zero,62f0 <__addsf3+0x440>
    628c:	04000084 	movi	r16,2
    6290:	003f6306 	br	6020 <__addsf3+0x170>
    6294:	3a09c83a 	sub	r4,r7,r8
    6298:	04000044 	movi	r16,1
    629c:	003f2206 	br	5f28 <__addsf3+0x78>
    62a0:	00800804 	movi	r2,32
    62a4:	12c5c83a 	sub	r2,r2,r11
    62a8:	3884983a 	sll	r2,r7,r2
    62ac:	3aced83a 	srl	r7,r7,r11
    62b0:	1008c03a 	cmpne	r4,r2,zero
    62b4:	21c8b03a 	or	r4,r4,r7
    62b8:	003fcc06 	br	61ec <__addsf3+0x33c>
    62bc:	0021883a 	mov	r16,zero
    62c0:	003f3406 	br	5f94 <__addsf3+0xe4>
    62c4:	01000804 	movi	r4,32
    62c8:	22c9c83a 	sub	r4,r4,r11
    62cc:	3908983a 	sll	r4,r7,r4
    62d0:	3aced83a 	srl	r7,r7,r11
    62d4:	2008c03a 	cmpne	r4,r4,zero
    62d8:	21c8b03a 	or	r4,r4,r7
    62dc:	003f9d06 	br	6154 <__addsf3+0x2a4>
    62e0:	41c9c83a 	sub	r4,r8,r7
    62e4:	4823883a 	mov	r17,r9
    62e8:	04000044 	movi	r16,1
    62ec:	003f0e06 	br	5f28 <__addsf3+0x78>
    62f0:	04000044 	movi	r16,1
    62f4:	003f7606 	br	60d0 <__addsf3+0x220>
    62f8:	403fb226 	beq	r8,zero,61c4 <__addsf3+0x314>
    62fc:	4823883a 	mov	r17,r9
    6300:	6807883a 	mov	r3,r13
    6304:	003f2306 	br	5f94 <__addsf3+0xe4>
    6308:	6807883a 	mov	r3,r13
    630c:	0021883a 	mov	r16,zero
    6310:	003f2006 	br	5f94 <__addsf3+0xe4>
    6314:	203fab26 	beq	r4,zero,61c4 <__addsf3+0x314>
    6318:	003f6d06 	br	60d0 <__addsf3+0x220>

0000631c <__divsf3>:
    631c:	defff604 	addi	sp,sp,-40
    6320:	2006d5fa 	srli	r3,r4,23
    6324:	dd400615 	stw	r21,24(sp)
    6328:	202ad7fa 	srli	r21,r4,31
    632c:	00802034 	movhi	r2,128
    6330:	dc800315 	stw	r18,12(sp)
    6334:	dc000115 	stw	r16,4(sp)
    6338:	10bfffc4 	addi	r2,r2,-1
    633c:	dfc00915 	stw	ra,36(sp)
    6340:	ddc00815 	stw	r23,32(sp)
    6344:	dd800715 	stw	r22,28(sp)
    6348:	dd000515 	stw	r20,20(sp)
    634c:	dcc00415 	stw	r19,16(sp)
    6350:	dc400215 	stw	r17,8(sp)
    6354:	18c03fcc 	andi	r3,r3,255
    6358:	1120703a 	and	r16,r2,r4
    635c:	a825883a 	mov	r18,r21
    6360:	18007b26 	beq	r3,zero,6550 <__divsf3+0x234>
    6364:	18803fe0 	cmpeqi	r2,r3,255
    6368:	10007e1e 	bne	r2,zero,6564 <__divsf3+0x248>
    636c:	800490fa 	slli	r2,r16,3
    6370:	1d3fe044 	addi	r20,r3,-127
    6374:	0023883a 	mov	r17,zero
    6378:	14010034 	orhi	r16,r2,1024
    637c:	002d883a 	mov	r22,zero
    6380:	2806d5fa 	srli	r3,r5,23
    6384:	01002034 	movhi	r4,128
    6388:	213fffc4 	addi	r4,r4,-1
    638c:	18c03fcc 	andi	r3,r3,255
    6390:	282ed7fa 	srli	r23,r5,31
    6394:	2166703a 	and	r19,r4,r5
    6398:	18005326 	beq	r3,zero,64e8 <__divsf3+0x1cc>
    639c:	18803fe0 	cmpeqi	r2,r3,255
    63a0:	10004d1e 	bne	r2,zero,64d8 <__divsf3+0x1bc>
    63a4:	980a90fa 	slli	r5,r19,3
    63a8:	18ffe044 	addi	r3,r3,-127
    63ac:	a0e9c83a 	sub	r20,r20,r3
    63b0:	2cc10034 	orhi	r19,r5,1024
    63b4:	0007883a 	mov	r3,zero
    63b8:	1c62b03a 	or	r17,r3,r17
    63bc:	882290ba 	slli	r17,r17,2
    63c0:	00800034 	movhi	r2,0
    63c4:	bd6af03a 	xor	r21,r23,r21
    63c8:	8885883a 	add	r2,r17,r2
    63cc:	1098f617 	ldw	r2,25560(r2)
    63d0:	a809883a 	mov	r4,r21
    63d4:	1000683a 	jmp	r2
    63d8:	0000669c 	xori	zero,zero,410
    63dc:	000065dc 	xori	zero,zero,407
    63e0:	0000648c 	andi	zero,zero,402
    63e4:	0000641c 	xori	zero,zero,400
    63e8:	0000648c 	andi	zero,zero,402
    63ec:	00006648 	cmpgei	zero,zero,409
    63f0:	0000648c 	andi	zero,zero,402
    63f4:	0000641c 	xori	zero,zero,400
    63f8:	000065dc 	xori	zero,zero,407
    63fc:	000065dc 	xori	zero,zero,407
    6400:	00006648 	cmpgei	zero,zero,409
    6404:	0000641c 	xori	zero,zero,400
    6408:	00006428 	cmpgeui	zero,zero,400
    640c:	00006428 	cmpgeui	zero,zero,400
    6410:	00006428 	cmpgeui	zero,zero,400
    6414:	00006660 	cmpeqi	zero,zero,409
    6418:	0027883a 	mov	r19,zero
    641c:	b825883a 	mov	r18,r23
    6420:	9821883a 	mov	r16,r19
    6424:	182d883a 	mov	r22,r3
    6428:	b08000a0 	cmpeqi	r2,r22,2
    642c:	1000831e 	bne	r2,zero,663c <__divsf3+0x320>
    6430:	b08000e0 	cmpeqi	r2,r22,3
    6434:	1000941e 	bne	r2,zero,6688 <__divsf3+0x36c>
    6438:	b5800060 	cmpeqi	r22,r22,1
    643c:	b000141e 	bne	r22,zero,6490 <__divsf3+0x174>
    6440:	a0801fc4 	addi	r2,r20,127
    6444:	0080690e 	bge	zero,r2,65ec <__divsf3+0x2d0>
    6448:	80c001cc 	andi	r3,r16,7
    644c:	18000426 	beq	r3,zero,6460 <__divsf3+0x144>
    6450:	80c003cc 	andi	r3,r16,15
    6454:	18c00120 	cmpeqi	r3,r3,4
    6458:	1800011e 	bne	r3,zero,6460 <__divsf3+0x144>
    645c:	84000104 	addi	r16,r16,4
    6460:	80c2002c 	andhi	r3,r16,2048
    6464:	18000426 	beq	r3,zero,6478 <__divsf3+0x15c>
    6468:	00be0034 	movhi	r2,63488
    646c:	10bfffc4 	addi	r2,r2,-1
    6470:	80a0703a 	and	r16,r16,r2
    6474:	a0802004 	addi	r2,r20,128
    6478:	10c03fc8 	cmpgei	r3,r2,255
    647c:	18006f1e 	bne	r3,zero,663c <__divsf3+0x320>
    6480:	802091ba 	slli	r16,r16,6
    6484:	8020d27a 	srli	r16,r16,9
    6488:	00000306 	br	6498 <__divsf3+0x17c>
    648c:	a825883a 	mov	r18,r21
    6490:	0005883a 	mov	r2,zero
    6494:	0021883a 	mov	r16,zero
    6498:	10803fcc 	andi	r2,r2,255
    649c:	100495fa 	slli	r2,r2,23
    64a0:	902497fa 	slli	r18,r18,31
    64a4:	1404b03a 	or	r2,r2,r16
    64a8:	1484b03a 	or	r2,r2,r18
    64ac:	dfc00917 	ldw	ra,36(sp)
    64b0:	ddc00817 	ldw	r23,32(sp)
    64b4:	dd800717 	ldw	r22,28(sp)
    64b8:	dd400617 	ldw	r21,24(sp)
    64bc:	dd000517 	ldw	r20,20(sp)
    64c0:	dcc00417 	ldw	r19,16(sp)
    64c4:	dc800317 	ldw	r18,12(sp)
    64c8:	dc400217 	ldw	r17,8(sp)
    64cc:	dc000117 	ldw	r16,4(sp)
    64d0:	dec00a04 	addi	sp,sp,40
    64d4:	f800283a 	ret
    64d8:	a53fc044 	addi	r20,r20,-255
    64dc:	98003d1e 	bne	r19,zero,65d4 <__divsf3+0x2b8>
    64e0:	00c00084 	movi	r3,2
    64e4:	00000206 	br	64f0 <__divsf3+0x1d4>
    64e8:	9800321e 	bne	r19,zero,65b4 <__divsf3+0x298>
    64ec:	00c00044 	movi	r3,1
    64f0:	1c62b03a 	or	r17,r3,r17
    64f4:	882290ba 	slli	r17,r17,2
    64f8:	00800034 	movhi	r2,0
    64fc:	bd6af03a 	xor	r21,r23,r21
    6500:	8885883a 	add	r2,r17,r2
    6504:	10994417 	ldw	r2,25872(r2)
    6508:	a809883a 	mov	r4,r21
    650c:	1000683a 	jmp	r2
    6510:	000065dc 	xori	zero,zero,407
    6514:	000065dc 	xori	zero,zero,407
    6518:	0000648c 	andi	zero,zero,402
    651c:	00006418 	cmpnei	zero,zero,400
    6520:	0000648c 	andi	zero,zero,402
    6524:	00006648 	cmpgei	zero,zero,409
    6528:	0000648c 	andi	zero,zero,402
    652c:	00006418 	cmpnei	zero,zero,400
    6530:	000065dc 	xori	zero,zero,407
    6534:	000065dc 	xori	zero,zero,407
    6538:	00006648 	cmpgei	zero,zero,409
    653c:	00006418 	cmpnei	zero,zero,400
    6540:	00006428 	cmpgeui	zero,zero,400
    6544:	00006428 	cmpgeui	zero,zero,400
    6548:	00006428 	cmpgeui	zero,zero,400
    654c:	0000665c 	xori	zero,zero,409
    6550:	80000d1e 	bne	r16,zero,6588 <__divsf3+0x26c>
    6554:	04400104 	movi	r17,4
    6558:	0029883a 	mov	r20,zero
    655c:	05800044 	movi	r22,1
    6560:	003f8706 	br	6380 <__divsf3+0x64>
    6564:	8000041e 	bne	r16,zero,6578 <__divsf3+0x25c>
    6568:	04400204 	movi	r17,8
    656c:	05003fc4 	movi	r20,255
    6570:	05800084 	movi	r22,2
    6574:	003f8206 	br	6380 <__divsf3+0x64>
    6578:	04400304 	movi	r17,12
    657c:	05003fc4 	movi	r20,255
    6580:	058000c4 	movi	r22,3
    6584:	003f7e06 	br	6380 <__divsf3+0x64>
    6588:	8009883a 	mov	r4,r16
    658c:	d9400015 	stw	r5,0(sp)
    6590:	0009bf00 	call	9bf0 <__clzsi2>
    6594:	10fffec4 	addi	r3,r2,-5
    6598:	80e0983a 	sll	r16,r16,r3
    659c:	00ffe284 	movi	r3,-118
    65a0:	d9400017 	ldw	r5,0(sp)
    65a4:	18a9c83a 	sub	r20,r3,r2
    65a8:	0023883a 	mov	r17,zero
    65ac:	002d883a 	mov	r22,zero
    65b0:	003f7306 	br	6380 <__divsf3+0x64>
    65b4:	9809883a 	mov	r4,r19
    65b8:	0009bf00 	call	9bf0 <__clzsi2>
    65bc:	a087883a 	add	r3,r20,r2
    65c0:	113ffec4 	addi	r4,r2,-5
    65c4:	1d001d84 	addi	r20,r3,118
    65c8:	9926983a 	sll	r19,r19,r4
    65cc:	0007883a 	mov	r3,zero
    65d0:	003f7906 	br	63b8 <__divsf3+0x9c>
    65d4:	00c000c4 	movi	r3,3
    65d8:	003f7706 	br	63b8 <__divsf3+0x9c>
    65dc:	2025883a 	mov	r18,r4
    65e0:	00bfffc4 	movi	r2,-1
    65e4:	0021883a 	mov	r16,zero
    65e8:	003fab06 	br	6498 <__divsf3+0x17c>
    65ec:	00c00044 	movi	r3,1
    65f0:	1885c83a 	sub	r2,r3,r2
    65f4:	10c00708 	cmpgei	r3,r2,28
    65f8:	183fa51e 	bne	r3,zero,6490 <__divsf3+0x174>
    65fc:	a0c02784 	addi	r3,r20,158
    6600:	80c6983a 	sll	r3,r16,r3
    6604:	8084d83a 	srl	r2,r16,r2
    6608:	1820c03a 	cmpne	r16,r3,zero
    660c:	1404b03a 	or	r2,r2,r16
    6610:	10c001cc 	andi	r3,r2,7
    6614:	18000426 	beq	r3,zero,6628 <__divsf3+0x30c>
    6618:	10c003cc 	andi	r3,r2,15
    661c:	18c00120 	cmpeqi	r3,r3,4
    6620:	1800011e 	bne	r3,zero,6628 <__divsf3+0x30c>
    6624:	10800104 	addi	r2,r2,4
    6628:	10c1002c 	andhi	r3,r2,1024
    662c:	18003426 	beq	r3,zero,6700 <__divsf3+0x3e4>
    6630:	00800044 	movi	r2,1
    6634:	0021883a 	mov	r16,zero
    6638:	003f9706 	br	6498 <__divsf3+0x17c>
    663c:	00bfffc4 	movi	r2,-1
    6640:	0021883a 	mov	r16,zero
    6644:	003f9406 	br	6498 <__divsf3+0x17c>
    6648:	04002034 	movhi	r16,128
    664c:	0025883a 	mov	r18,zero
    6650:	843fffc4 	addi	r16,r16,-1
    6654:	00bfffc4 	movi	r2,-1
    6658:	003f8f06 	br	6498 <__divsf3+0x17c>
    665c:	0027883a 	mov	r19,zero
    6660:	8080102c 	andhi	r2,r16,64
    6664:	10000826 	beq	r2,zero,6688 <__divsf3+0x36c>
    6668:	9880102c 	andhi	r2,r19,64
    666c:	1000061e 	bne	r2,zero,6688 <__divsf3+0x36c>
    6670:	00802034 	movhi	r2,128
    6674:	9c001034 	orhi	r16,r19,64
    6678:	10bfffc4 	addi	r2,r2,-1
    667c:	80a0703a 	and	r16,r16,r2
    6680:	b825883a 	mov	r18,r23
    6684:	003ff306 	br	6654 <__divsf3+0x338>
    6688:	00802034 	movhi	r2,128
    668c:	84001034 	orhi	r16,r16,64
    6690:	10bfffc4 	addi	r2,r2,-1
    6694:	80a0703a 	and	r16,r16,r2
    6698:	003fee06 	br	6654 <__divsf3+0x338>
    669c:	8004917a 	slli	r2,r16,5
    66a0:	980a917a 	slli	r5,r19,5
    66a4:	1140122e 	bgeu	r2,r5,66f0 <__divsf3+0x3d4>
    66a8:	a53fffc4 	addi	r20,r20,-1
    66ac:	010006c4 	movi	r4,27
    66b0:	0021883a 	mov	r16,zero
    66b4:	1007883a 	mov	r3,r2
    66b8:	213fffc4 	addi	r4,r4,-1
    66bc:	1085883a 	add	r2,r2,r2
    66c0:	8421883a 	add	r16,r16,r16
    66c4:	18000116 	blt	r3,zero,66cc <__divsf3+0x3b0>
    66c8:	11400236 	bltu	r2,r5,66d4 <__divsf3+0x3b8>
    66cc:	1145c83a 	sub	r2,r2,r5
    66d0:	84000054 	ori	r16,r16,1
    66d4:	203ff71e 	bne	r4,zero,66b4 <__divsf3+0x398>
    66d8:	1004c03a 	cmpne	r2,r2,zero
    66dc:	1420b03a 	or	r16,r2,r16
    66e0:	a0801fc4 	addi	r2,r20,127
    66e4:	a825883a 	mov	r18,r21
    66e8:	00bf5716 	blt	zero,r2,6448 <__divsf3+0x12c>
    66ec:	003fbf06 	br	65ec <__divsf3+0x2d0>
    66f0:	1145c83a 	sub	r2,r2,r5
    66f4:	01000684 	movi	r4,26
    66f8:	04000044 	movi	r16,1
    66fc:	003fed06 	br	66b4 <__divsf3+0x398>
    6700:	102091ba 	slli	r16,r2,6
    6704:	0005883a 	mov	r2,zero
    6708:	8020d27a 	srli	r16,r16,9
    670c:	003f6206 	br	6498 <__divsf3+0x17c>

00006710 <__eqsf2>:
    6710:	200cd5fa 	srli	r6,r4,23
    6714:	2806d5fa 	srli	r3,r5,23
    6718:	00802034 	movhi	r2,128
    671c:	31803fcc 	andi	r6,r6,255
    6720:	10bfffc4 	addi	r2,r2,-1
    6724:	31c03fd8 	cmpnei	r7,r6,255
    6728:	2010d7fa 	srli	r8,r4,31
    672c:	2812d7fa 	srli	r9,r5,31
    6730:	1108703a 	and	r4,r2,r4
    6734:	18c03fcc 	andi	r3,r3,255
    6738:	1144703a 	and	r2,r2,r5
    673c:	38000626 	beq	r7,zero,6758 <__eqsf2+0x48>
    6740:	19403fe0 	cmpeqi	r5,r3,255
    6744:	2800021e 	bne	r5,zero,6750 <__eqsf2+0x40>
    6748:	30c0011e 	bne	r6,r3,6750 <__eqsf2+0x40>
    674c:	20800626 	beq	r4,r2,6768 <__eqsf2+0x58>
    6750:	00800044 	movi	r2,1
    6754:	f800283a 	ret
    6758:	203ffd1e 	bne	r4,zero,6750 <__eqsf2+0x40>
    675c:	18c03fd8 	cmpnei	r3,r3,255
    6760:	183ffb1e 	bne	r3,zero,6750 <__eqsf2+0x40>
    6764:	103ffa1e 	bne	r2,zero,6750 <__eqsf2+0x40>
    6768:	42400326 	beq	r8,r9,6778 <__eqsf2+0x68>
    676c:	303ff81e 	bne	r6,zero,6750 <__eqsf2+0x40>
    6770:	2004c03a 	cmpne	r2,r4,zero
    6774:	f800283a 	ret
    6778:	0005883a 	mov	r2,zero
    677c:	f800283a 	ret

00006780 <__gesf2>:
    6780:	200cd5fa 	srli	r6,r4,23
    6784:	280ed5fa 	srli	r7,r5,23
    6788:	00c02034 	movhi	r3,128
    678c:	31803fcc 	andi	r6,r6,255
    6790:	18ffffc4 	addi	r3,r3,-1
    6794:	32003fd8 	cmpnei	r8,r6,255
    6798:	2012d7fa 	srli	r9,r4,31
    679c:	2804d7fa 	srli	r2,r5,31
    67a0:	1908703a 	and	r4,r3,r4
    67a4:	1946703a 	and	r3,r3,r5
    67a8:	39403fcc 	andi	r5,r7,255
    67ac:	40000826 	beq	r8,zero,67d0 <__gesf2+0x50>
    67b0:	29c03fd8 	cmpnei	r7,r5,255
    67b4:	38000926 	beq	r7,zero,67dc <__gesf2+0x5c>
    67b8:	3000121e 	bne	r6,zero,6804 <__gesf2+0x84>
    67bc:	28000e1e 	bne	r5,zero,67f8 <__gesf2+0x78>
    67c0:	18000d1e 	bne	r3,zero,67f8 <__gesf2+0x78>
    67c4:	2000081e 	bne	r4,zero,67e8 <__gesf2+0x68>
    67c8:	0005883a 	mov	r2,zero
    67cc:	f800283a 	ret
    67d0:	2000171e 	bne	r4,zero,6830 <__gesf2+0xb0>
    67d4:	29c03fe0 	cmpeqi	r7,r5,255
    67d8:	38000a26 	beq	r7,zero,6804 <__gesf2+0x84>
    67dc:	1800141e 	bne	r3,zero,6830 <__gesf2+0xb0>
    67e0:	30000526 	beq	r6,zero,67f8 <__gesf2+0x78>
    67e4:	48800a26 	beq	r9,r2,6810 <__gesf2+0x90>
    67e8:	00800044 	movi	r2,1
    67ec:	48000426 	beq	r9,zero,6800 <__gesf2+0x80>
    67f0:	00bfffc4 	movi	r2,-1
    67f4:	f800283a 	ret
    67f8:	203ffa1e 	bne	r4,zero,67e4 <__gesf2+0x64>
    67fc:	103ffc26 	beq	r2,zero,67f0 <__gesf2+0x70>
    6800:	f800283a 	ret
    6804:	283ff71e 	bne	r5,zero,67e4 <__gesf2+0x64>
    6808:	183ff61e 	bne	r3,zero,67e4 <__gesf2+0x64>
    680c:	003ff606 	br	67e8 <__gesf2+0x68>
    6810:	29800416 	blt	r5,r6,6824 <__gesf2+0xa4>
    6814:	317ff916 	blt	r6,r5,67fc <__gesf2+0x7c>
    6818:	19000236 	bltu	r3,r4,6824 <__gesf2+0xa4>
    681c:	20ffea2e 	bgeu	r4,r3,67c8 <__gesf2+0x48>
    6820:	003ff606 	br	67fc <__gesf2+0x7c>
    6824:	103ff21e 	bne	r2,zero,67f0 <__gesf2+0x70>
    6828:	00800044 	movi	r2,1
    682c:	f800283a 	ret
    6830:	00bfff84 	movi	r2,-2
    6834:	f800283a 	ret

00006838 <__lesf2>:
    6838:	200cd5fa 	srli	r6,r4,23
    683c:	280ed5fa 	srli	r7,r5,23
    6840:	00c02034 	movhi	r3,128
    6844:	31803fcc 	andi	r6,r6,255
    6848:	18ffffc4 	addi	r3,r3,-1
    684c:	32003fd8 	cmpnei	r8,r6,255
    6850:	2012d7fa 	srli	r9,r4,31
    6854:	2804d7fa 	srli	r2,r5,31
    6858:	1908703a 	and	r4,r3,r4
    685c:	1946703a 	and	r3,r3,r5
    6860:	39403fcc 	andi	r5,r7,255
    6864:	40000826 	beq	r8,zero,6888 <__lesf2+0x50>
    6868:	29c03fd8 	cmpnei	r7,r5,255
    686c:	38000926 	beq	r7,zero,6894 <__lesf2+0x5c>
    6870:	3000181e 	bne	r6,zero,68d4 <__lesf2+0x9c>
    6874:	2800091e 	bne	r5,zero,689c <__lesf2+0x64>
    6878:	1800081e 	bne	r3,zero,689c <__lesf2+0x64>
    687c:	2000091e 	bne	r4,zero,68a4 <__lesf2+0x6c>
    6880:	0005883a 	mov	r2,zero
    6884:	f800283a 	ret
    6888:	20000a1e 	bne	r4,zero,68b4 <__lesf2+0x7c>
    688c:	29c03fe0 	cmpeqi	r7,r5,255
    6890:	38001026 	beq	r7,zero,68d4 <__lesf2+0x9c>
    6894:	1800071e 	bne	r3,zero,68b4 <__lesf2+0x7c>
    6898:	3000011e 	bne	r6,zero,68a0 <__lesf2+0x68>
    689c:	20000b26 	beq	r4,zero,68cc <__lesf2+0x94>
    68a0:	48800626 	beq	r9,r2,68bc <__lesf2+0x84>
    68a4:	00800044 	movi	r2,1
    68a8:	48000926 	beq	r9,zero,68d0 <__lesf2+0x98>
    68ac:	00bfffc4 	movi	r2,-1
    68b0:	f800283a 	ret
    68b4:	00800084 	movi	r2,2
    68b8:	f800283a 	ret
    68bc:	29800816 	blt	r5,r6,68e0 <__lesf2+0xa8>
    68c0:	31400216 	blt	r6,r5,68cc <__lesf2+0x94>
    68c4:	19000636 	bltu	r3,r4,68e0 <__lesf2+0xa8>
    68c8:	20ffed2e 	bgeu	r4,r3,6880 <__lesf2+0x48>
    68cc:	103ff726 	beq	r2,zero,68ac <__lesf2+0x74>
    68d0:	f800283a 	ret
    68d4:	283ff21e 	bne	r5,zero,68a0 <__lesf2+0x68>
    68d8:	183ff11e 	bne	r3,zero,68a0 <__lesf2+0x68>
    68dc:	003ff106 	br	68a4 <__lesf2+0x6c>
    68e0:	103ff21e 	bne	r2,zero,68ac <__lesf2+0x74>
    68e4:	00800044 	movi	r2,1
    68e8:	f800283a 	ret

000068ec <__mulsf3>:
    68ec:	defff504 	addi	sp,sp,-44
    68f0:	dc400215 	stw	r17,8(sp)
    68f4:	2022d5fa 	srli	r17,r4,23
    68f8:	dc000115 	stw	r16,4(sp)
    68fc:	04002034 	movhi	r16,128
    6900:	dd800715 	stw	r22,28(sp)
    6904:	843fffc4 	addi	r16,r16,-1
    6908:	dfc00a15 	stw	ra,40(sp)
    690c:	df000915 	stw	fp,36(sp)
    6910:	ddc00815 	stw	r23,32(sp)
    6914:	dd400615 	stw	r21,24(sp)
    6918:	dd000515 	stw	r20,20(sp)
    691c:	dcc00415 	stw	r19,16(sp)
    6920:	dc800315 	stw	r18,12(sp)
    6924:	8c403fcc 	andi	r17,r17,255
    6928:	202cd7fa 	srli	r22,r4,31
    692c:	8120703a 	and	r16,r16,r4
    6930:	88008d26 	beq	r17,zero,6b68 <__mulsf3+0x27c>
    6934:	88803fe0 	cmpeqi	r2,r17,255
    6938:	1000901e 	bne	r2,zero,6b7c <__mulsf3+0x290>
    693c:	802090fa 	slli	r16,r16,3
    6940:	8c7fe044 	addi	r17,r17,-127
    6944:	0025883a 	mov	r18,zero
    6948:	84010034 	orhi	r16,r16,1024
    694c:	0029883a 	mov	r20,zero
    6950:	2804d5fa 	srli	r2,r5,23
    6954:	01002034 	movhi	r4,128
    6958:	213fffc4 	addi	r4,r4,-1
    695c:	10803fcc 	andi	r2,r2,255
    6960:	282ed7fa 	srli	r23,r5,31
    6964:	2166703a 	and	r19,r4,r5
    6968:	10007b26 	beq	r2,zero,6b58 <__mulsf3+0x26c>
    696c:	10c03fe0 	cmpeqi	r3,r2,255
    6970:	1800871e 	bne	r3,zero,6b90 <__mulsf3+0x2a4>
    6974:	980890fa 	slli	r4,r19,3
    6978:	10bfe044 	addi	r2,r2,-127
    697c:	88a3883a 	add	r17,r17,r2
    6980:	24c10034 	orhi	r19,r4,1024
    6984:	0007883a 	mov	r3,zero
    6988:	90800428 	cmpgeui	r2,r18,16
    698c:	b5eaf03a 	xor	r21,r22,r23
    6990:	8f000044 	addi	fp,r17,1
    6994:	1000341e 	bne	r2,zero,6a68 <__mulsf3+0x17c>
    6998:	902490ba 	slli	r18,r18,2
    699c:	00800034 	movhi	r2,0
    69a0:	9085883a 	add	r2,r18,r2
    69a4:	109a6b17 	ldw	r2,27052(r2)
    69a8:	1000683a 	jmp	r2
    69ac:	00006a68 	cmpgeui	zero,zero,425
    69b0:	000069f0 	cmpltui	zero,zero,423
    69b4:	000069f0 	cmpltui	zero,zero,423
    69b8:	000069ec 	andhi	zero,zero,423
    69bc:	000069f8 	rdprs	zero,zero,423
    69c0:	000069f8 	rdprs	zero,zero,423
    69c4:	00006c1c 	xori	zero,zero,432
    69c8:	000069ec 	andhi	zero,zero,423
    69cc:	000069f8 	rdprs	zero,zero,423
    69d0:	00006c1c 	xori	zero,zero,432
    69d4:	000069f8 	rdprs	zero,zero,423
    69d8:	000069ec 	andhi	zero,zero,423
    69dc:	00006ba4 	muli	zero,zero,430
    69e0:	00006ba4 	muli	zero,zero,430
    69e4:	00006ba4 	muli	zero,zero,430
    69e8:	00006c80 	call	6c8 <show_featuremap+0x84>
    69ec:	b82b883a 	mov	r21,r23
    69f0:	9821883a 	mov	r16,r19
    69f4:	1829883a 	mov	r20,r3
    69f8:	a08000a0 	cmpeqi	r2,r20,2
    69fc:	1000171e 	bne	r2,zero,6a5c <__mulsf3+0x170>
    6a00:	a08000e0 	cmpeqi	r2,r20,3
    6a04:	1000b41e 	bne	r2,zero,6cd8 <__mulsf3+0x3ec>
    6a08:	a0800060 	cmpeqi	r2,r20,1
    6a0c:	10003f26 	beq	r2,zero,6b0c <__mulsf3+0x220>
    6a10:	0007883a 	mov	r3,zero
    6a14:	0009883a 	mov	r4,zero
    6a18:	1c003fcc 	andi	r16,r3,255
    6a1c:	802095fa 	slli	r16,r16,23
    6a20:	a80497fa 	slli	r2,r21,31
    6a24:	8120b03a 	or	r16,r16,r4
    6a28:	8084b03a 	or	r2,r16,r2
    6a2c:	dfc00a17 	ldw	ra,40(sp)
    6a30:	df000917 	ldw	fp,36(sp)
    6a34:	ddc00817 	ldw	r23,32(sp)
    6a38:	dd800717 	ldw	r22,28(sp)
    6a3c:	dd400617 	ldw	r21,24(sp)
    6a40:	dd000517 	ldw	r20,20(sp)
    6a44:	dcc00417 	ldw	r19,16(sp)
    6a48:	dc800317 	ldw	r18,12(sp)
    6a4c:	dc400217 	ldw	r17,8(sp)
    6a50:	dc000117 	ldw	r16,4(sp)
    6a54:	dec00b04 	addi	sp,sp,44
    6a58:	f800283a 	ret
    6a5c:	00ffffc4 	movi	r3,-1
    6a60:	0009883a 	mov	r4,zero
    6a64:	003fec06 	br	6a18 <__mulsf3+0x12c>
    6a68:	8028d43a 	srli	r20,r16,16
    6a6c:	9cbfffcc 	andi	r18,r19,65535
    6a70:	843fffcc 	andi	r16,r16,65535
    6a74:	900b883a 	mov	r5,r18
    6a78:	8009883a 	mov	r4,r16
    6a7c:	0005e880 	call	5e88 <__mulsi3>
    6a80:	9826d43a 	srli	r19,r19,16
    6a84:	900b883a 	mov	r5,r18
    6a88:	a009883a 	mov	r4,r20
    6a8c:	1025883a 	mov	r18,r2
    6a90:	0005e880 	call	5e88 <__mulsi3>
    6a94:	980b883a 	mov	r5,r19
    6a98:	a009883a 	mov	r4,r20
    6a9c:	1029883a 	mov	r20,r2
    6aa0:	0005e880 	call	5e88 <__mulsi3>
    6aa4:	9809883a 	mov	r4,r19
    6aa8:	800b883a 	mov	r5,r16
    6aac:	1027883a 	mov	r19,r2
    6ab0:	0005e880 	call	5e88 <__mulsi3>
    6ab4:	9006d43a 	srli	r3,r18,16
    6ab8:	1505883a 	add	r2,r2,r20
    6abc:	1887883a 	add	r3,r3,r2
    6ac0:	1d00022e 	bgeu	r3,r20,6acc <__mulsf3+0x1e0>
    6ac4:	00800074 	movhi	r2,1
    6ac8:	98a7883a 	add	r19,r19,r2
    6acc:	1808943a 	slli	r4,r3,16
    6ad0:	1820d43a 	srli	r16,r3,16
    6ad4:	94bfffcc 	andi	r18,r18,65535
    6ad8:	2489883a 	add	r4,r4,r18
    6adc:	200a91ba 	slli	r5,r4,6
    6ae0:	84e1883a 	add	r16,r16,r19
    6ae4:	802091ba 	slli	r16,r16,6
    6ae8:	2008d6ba 	srli	r4,r4,26
    6aec:	2804c03a 	cmpne	r2,r5,zero
    6af0:	80c2002c 	andhi	r3,r16,2048
    6af4:	1108b03a 	or	r4,r2,r4
    6af8:	8120b03a 	or	r16,r16,r4
    6afc:	18007026 	beq	r3,zero,6cc0 <__mulsf3+0x3d4>
    6b00:	8004d07a 	srli	r2,r16,1
    6b04:	8400004c 	andi	r16,r16,1
    6b08:	1420b03a 	or	r16,r2,r16
    6b0c:	e0c01fc4 	addi	r3,fp,127
    6b10:	00c0470e 	bge	zero,r3,6c30 <__mulsf3+0x344>
    6b14:	808001cc 	andi	r2,r16,7
    6b18:	10000426 	beq	r2,zero,6b2c <__mulsf3+0x240>
    6b1c:	808003cc 	andi	r2,r16,15
    6b20:	10800120 	cmpeqi	r2,r2,4
    6b24:	1000011e 	bne	r2,zero,6b2c <__mulsf3+0x240>
    6b28:	84000104 	addi	r16,r16,4
    6b2c:	8082002c 	andhi	r2,r16,2048
    6b30:	10000426 	beq	r2,zero,6b44 <__mulsf3+0x258>
    6b34:	00be0034 	movhi	r2,63488
    6b38:	10bfffc4 	addi	r2,r2,-1
    6b3c:	80a0703a 	and	r16,r16,r2
    6b40:	e0c02004 	addi	r3,fp,128
    6b44:	18803fc8 	cmpgei	r2,r3,255
    6b48:	103fc41e 	bne	r2,zero,6a5c <__mulsf3+0x170>
    6b4c:	802091ba 	slli	r16,r16,6
    6b50:	8008d27a 	srli	r4,r16,9
    6b54:	003fb006 	br	6a18 <__mulsf3+0x12c>
    6b58:	9800281e 	bne	r19,zero,6bfc <__mulsf3+0x310>
    6b5c:	94800054 	ori	r18,r18,1
    6b60:	00c00044 	movi	r3,1
    6b64:	003f8806 	br	6988 <__mulsf3+0x9c>
    6b68:	8000191e 	bne	r16,zero,6bd0 <__mulsf3+0x2e4>
    6b6c:	04800104 	movi	r18,4
    6b70:	0023883a 	mov	r17,zero
    6b74:	05000044 	movi	r20,1
    6b78:	003f7506 	br	6950 <__mulsf3+0x64>
    6b7c:	8000101e 	bne	r16,zero,6bc0 <__mulsf3+0x2d4>
    6b80:	04800204 	movi	r18,8
    6b84:	04403fc4 	movi	r17,255
    6b88:	05000084 	movi	r20,2
    6b8c:	003f7006 	br	6950 <__mulsf3+0x64>
    6b90:	8c403fc4 	addi	r17,r17,255
    6b94:	9800071e 	bne	r19,zero,6bb4 <__mulsf3+0x2c8>
    6b98:	94800094 	ori	r18,r18,2
    6b9c:	00c00084 	movi	r3,2
    6ba0:	003f7906 	br	6988 <__mulsf3+0x9c>
    6ba4:	a08000a0 	cmpeqi	r2,r20,2
    6ba8:	b02b883a 	mov	r21,r22
    6bac:	103f9426 	beq	r2,zero,6a00 <__mulsf3+0x114>
    6bb0:	003faa06 	br	6a5c <__mulsf3+0x170>
    6bb4:	948000d4 	ori	r18,r18,3
    6bb8:	00c000c4 	movi	r3,3
    6bbc:	003f7206 	br	6988 <__mulsf3+0x9c>
    6bc0:	04800304 	movi	r18,12
    6bc4:	04403fc4 	movi	r17,255
    6bc8:	050000c4 	movi	r20,3
    6bcc:	003f6006 	br	6950 <__mulsf3+0x64>
    6bd0:	8009883a 	mov	r4,r16
    6bd4:	d9400015 	stw	r5,0(sp)
    6bd8:	0009bf00 	call	9bf0 <__clzsi2>
    6bdc:	10fffec4 	addi	r3,r2,-5
    6be0:	047fe284 	movi	r17,-118
    6be4:	80e0983a 	sll	r16,r16,r3
    6be8:	d9400017 	ldw	r5,0(sp)
    6bec:	88a3c83a 	sub	r17,r17,r2
    6bf0:	0025883a 	mov	r18,zero
    6bf4:	0029883a 	mov	r20,zero
    6bf8:	003f5506 	br	6950 <__mulsf3+0x64>
    6bfc:	9809883a 	mov	r4,r19
    6c00:	0009bf00 	call	9bf0 <__clzsi2>
    6c04:	10fffec4 	addi	r3,r2,-5
    6c08:	88a3c83a 	sub	r17,r17,r2
    6c0c:	98e6983a 	sll	r19,r19,r3
    6c10:	8c7fe284 	addi	r17,r17,-118
    6c14:	0007883a 	mov	r3,zero
    6c18:	003f5b06 	br	6988 <__mulsf3+0x9c>
    6c1c:	01002034 	movhi	r4,128
    6c20:	002b883a 	mov	r21,zero
    6c24:	213fffc4 	addi	r4,r4,-1
    6c28:	00ffffc4 	movi	r3,-1
    6c2c:	003f7a06 	br	6a18 <__mulsf3+0x12c>
    6c30:	00800044 	movi	r2,1
    6c34:	10c7c83a 	sub	r3,r2,r3
    6c38:	18800708 	cmpgei	r2,r3,28
    6c3c:	103f741e 	bne	r2,zero,6a10 <__mulsf3+0x124>
    6c40:	e1002784 	addi	r4,fp,158
    6c44:	8108983a 	sll	r4,r16,r4
    6c48:	80e0d83a 	srl	r16,r16,r3
    6c4c:	2008c03a 	cmpne	r4,r4,zero
    6c50:	8120b03a 	or	r16,r16,r4
    6c54:	808001cc 	andi	r2,r16,7
    6c58:	10000426 	beq	r2,zero,6c6c <__mulsf3+0x380>
    6c5c:	808003cc 	andi	r2,r16,15
    6c60:	10800120 	cmpeqi	r2,r2,4
    6c64:	1000011e 	bne	r2,zero,6c6c <__mulsf3+0x380>
    6c68:	84000104 	addi	r16,r16,4
    6c6c:	8081002c 	andhi	r2,r16,1024
    6c70:	10001526 	beq	r2,zero,6cc8 <__mulsf3+0x3dc>
    6c74:	00c00044 	movi	r3,1
    6c78:	0009883a 	mov	r4,zero
    6c7c:	003f6606 	br	6a18 <__mulsf3+0x12c>
    6c80:	8080102c 	andhi	r2,r16,64
    6c84:	10000826 	beq	r2,zero,6ca8 <__mulsf3+0x3bc>
    6c88:	9880102c 	andhi	r2,r19,64
    6c8c:	1000061e 	bne	r2,zero,6ca8 <__mulsf3+0x3bc>
    6c90:	00802034 	movhi	r2,128
    6c94:	99001034 	orhi	r4,r19,64
    6c98:	10bfffc4 	addi	r2,r2,-1
    6c9c:	2088703a 	and	r4,r4,r2
    6ca0:	b82b883a 	mov	r21,r23
    6ca4:	003fe006 	br	6c28 <__mulsf3+0x33c>
    6ca8:	00802034 	movhi	r2,128
    6cac:	81001034 	orhi	r4,r16,64
    6cb0:	10bfffc4 	addi	r2,r2,-1
    6cb4:	2088703a 	and	r4,r4,r2
    6cb8:	b02b883a 	mov	r21,r22
    6cbc:	003fda06 	br	6c28 <__mulsf3+0x33c>
    6cc0:	8839883a 	mov	fp,r17
    6cc4:	003f9106 	br	6b0c <__mulsf3+0x220>
    6cc8:	802091ba 	slli	r16,r16,6
    6ccc:	0007883a 	mov	r3,zero
    6cd0:	8008d27a 	srli	r4,r16,9
    6cd4:	003f5006 	br	6a18 <__mulsf3+0x12c>
    6cd8:	00802034 	movhi	r2,128
    6cdc:	81001034 	orhi	r4,r16,64
    6ce0:	10bfffc4 	addi	r2,r2,-1
    6ce4:	2088703a 	and	r4,r4,r2
    6ce8:	003fcf06 	br	6c28 <__mulsf3+0x33c>

00006cec <__subsf3>:
    6cec:	2804d5fa 	srli	r2,r5,23
    6cf0:	2006d5fa 	srli	r3,r4,23
    6cf4:	200cd7fa 	srli	r6,r4,31
    6cf8:	01c02034 	movhi	r7,128
    6cfc:	defffc04 	addi	sp,sp,-16
    6d00:	39ffffc4 	addi	r7,r7,-1
    6d04:	12803fcc 	andi	r10,r2,255
    6d08:	3908703a 	and	r4,r7,r4
    6d0c:	dc800215 	stw	r18,8(sp)
    6d10:	394e703a 	and	r7,r7,r5
    6d14:	dc400115 	stw	r17,4(sp)
    6d18:	1c803fcc 	andi	r18,r3,255
    6d1c:	dfc00315 	stw	ra,12(sp)
    6d20:	dc000015 	stw	r16,0(sp)
    6d24:	50803fd8 	cmpnei	r2,r10,255
    6d28:	3023883a 	mov	r17,r6
    6d2c:	201090fa 	slli	r8,r4,3
    6d30:	280ad7fa 	srli	r5,r5,31
    6d34:	381290fa 	slli	r9,r7,3
    6d38:	2019883a 	mov	r12,r4
    6d3c:	31803fcc 	andi	r6,r6,255
    6d40:	9297c83a 	sub	r11,r18,r10
    6d44:	10003f26 	beq	r2,zero,6e44 <__subsf3+0x158>
    6d48:	2880005c 	xori	r2,r5,1
    6d4c:	30804526 	beq	r6,r2,6e64 <__subsf3+0x178>
    6d50:	02c0310e 	bge	zero,r11,6e18 <__subsf3+0x12c>
    6d54:	50003f1e 	bne	r10,zero,6e54 <__subsf3+0x168>
    6d58:	48009526 	beq	r9,zero,6fb0 <__subsf3+0x2c4>
    6d5c:	58bfffc4 	addi	r2,r11,-1
    6d60:	1000de26 	beq	r2,zero,70dc <__subsf3+0x3f0>
    6d64:	59003fe0 	cmpeqi	r4,r11,255
    6d68:	20007d1e 	bne	r4,zero,6f60 <__subsf3+0x274>
    6d6c:	1017883a 	mov	r11,r2
    6d70:	58800710 	cmplti	r2,r11,28
    6d74:	10009a1e 	bne	r2,zero,6fe0 <__subsf3+0x2f4>
    6d78:	01000044 	movi	r4,1
    6d7c:	4109c83a 	sub	r4,r8,r4
    6d80:	2081002c 	andhi	r2,r4,1024
    6d84:	10006a26 	beq	r2,zero,6f30 <__subsf3+0x244>
    6d88:	04010034 	movhi	r16,1024
    6d8c:	843fffc4 	addi	r16,r16,-1
    6d90:	2420703a 	and	r16,r4,r16
    6d94:	8009883a 	mov	r4,r16
    6d98:	0009bf00 	call	9bf0 <__clzsi2>
    6d9c:	10bffec4 	addi	r2,r2,-5
    6da0:	8088983a 	sll	r4,r16,r2
    6da4:	1480840e 	bge	r2,r18,6fb8 <__subsf3+0x2cc>
    6da8:	00ff0034 	movhi	r3,64512
    6dac:	18ffffc4 	addi	r3,r3,-1
    6db0:	90a5c83a 	sub	r18,r18,r2
    6db4:	20c8703a 	and	r4,r4,r3
    6db8:	208001cc 	andi	r2,r4,7
    6dbc:	10000426 	beq	r2,zero,6dd0 <__subsf3+0xe4>
    6dc0:	208003cc 	andi	r2,r4,15
    6dc4:	10800120 	cmpeqi	r2,r2,4
    6dc8:	1000011e 	bne	r2,zero,6dd0 <__subsf3+0xe4>
    6dcc:	21000104 	addi	r4,r4,4
    6dd0:	2081002c 	andhi	r2,r4,1024
    6dd4:	10005826 	beq	r2,zero,6f38 <__subsf3+0x24c>
    6dd8:	90c00044 	addi	r3,r18,1
    6ddc:	18803fe0 	cmpeqi	r2,r3,255
    6de0:	1000481e 	bne	r2,zero,6f04 <__subsf3+0x218>
    6de4:	200891ba 	slli	r4,r4,6
    6de8:	2008d27a 	srli	r4,r4,9
    6dec:	18803fcc 	andi	r2,r3,255
    6df0:	100495fa 	slli	r2,r2,23
    6df4:	880697fa 	slli	r3,r17,31
    6df8:	1108b03a 	or	r4,r2,r4
    6dfc:	20c4b03a 	or	r2,r4,r3
    6e00:	dfc00317 	ldw	ra,12(sp)
    6e04:	dc800217 	ldw	r18,8(sp)
    6e08:	dc400117 	ldw	r17,4(sp)
    6e0c:	dc000017 	ldw	r16,0(sp)
    6e10:	dec00404 	addi	sp,sp,16
    6e14:	f800283a 	ret
    6e18:	58002726 	beq	r11,zero,6eb8 <__subsf3+0x1cc>
    6e1c:	5497c83a 	sub	r11,r10,r18
    6e20:	1023883a 	mov	r17,r2
    6e24:	9000751e 	bne	r18,zero,6ffc <__subsf3+0x310>
    6e28:	40006026 	beq	r8,zero,6fac <__subsf3+0x2c0>
    6e2c:	58bfffc4 	addi	r2,r11,-1
    6e30:	1000cb26 	beq	r2,zero,7160 <__subsf3+0x474>
    6e34:	5ac03fe0 	cmpeqi	r11,r11,255
    6e38:	5800481e 	bne	r11,zero,6f5c <__subsf3+0x270>
    6e3c:	1017883a 	mov	r11,r2
    6e40:	00007106 	br	7008 <__subsf3+0x31c>
    6e44:	483fc026 	beq	r9,zero,6d48 <__subsf3+0x5c>
    6e48:	28803fcc 	andi	r2,r5,255
    6e4c:	31404b26 	beq	r6,r5,6f7c <__subsf3+0x290>
    6e50:	02fff10e 	bge	zero,r11,6e18 <__subsf3+0x12c>
    6e54:	90803fe0 	cmpeqi	r2,r18,255
    6e58:	1000411e 	bne	r2,zero,6f60 <__subsf3+0x274>
    6e5c:	4a410034 	orhi	r9,r9,1024
    6e60:	003fc306 	br	6d70 <__subsf3+0x84>
    6e64:	02c0450e 	bge	zero,r11,6f7c <__subsf3+0x290>
    6e68:	50001f26 	beq	r10,zero,6ee8 <__subsf3+0x1fc>
    6e6c:	90803fe0 	cmpeqi	r2,r18,255
    6e70:	10003b1e 	bne	r2,zero,6f60 <__subsf3+0x274>
    6e74:	4a410034 	orhi	r9,r9,1024
    6e78:	58800710 	cmplti	r2,r11,28
    6e7c:	1000701e 	bne	r2,zero,7040 <__subsf3+0x354>
    6e80:	01000044 	movi	r4,1
    6e84:	2209883a 	add	r4,r4,r8
    6e88:	2081002c 	andhi	r2,r4,1024
    6e8c:	10002826 	beq	r2,zero,6f30 <__subsf3+0x244>
    6e90:	94800044 	addi	r18,r18,1
    6e94:	90803fe0 	cmpeqi	r2,r18,255
    6e98:	10001a1e 	bne	r2,zero,6f04 <__subsf3+0x218>
    6e9c:	2004d07a 	srli	r2,r4,1
    6ea0:	00df8034 	movhi	r3,32256
    6ea4:	18ffffc4 	addi	r3,r3,-1
    6ea8:	2100004c 	andi	r4,r4,1
    6eac:	10c4703a 	and	r2,r2,r3
    6eb0:	1108b03a 	or	r4,r2,r4
    6eb4:	003fc006 	br	6db8 <__subsf3+0xcc>
    6eb8:	90c00044 	addi	r3,r18,1
    6ebc:	18c03f8c 	andi	r3,r3,254
    6ec0:	1800571e 	bne	r3,zero,7020 <__subsf3+0x334>
    6ec4:	90007a1e 	bne	r18,zero,70b0 <__subsf3+0x3c4>
    6ec8:	4000a126 	beq	r8,zero,7150 <__subsf3+0x464>
    6ecc:	48008d26 	beq	r9,zero,7104 <__subsf3+0x418>
    6ed0:	4249c83a 	sub	r4,r8,r9
    6ed4:	20c1002c 	andhi	r3,r4,1024
    6ed8:	1800a726 	beq	r3,zero,7178 <__subsf3+0x48c>
    6edc:	4a09c83a 	sub	r4,r9,r8
    6ee0:	1023883a 	mov	r17,r2
    6ee4:	003fb406 	br	6db8 <__subsf3+0xcc>
    6ee8:	48003126 	beq	r9,zero,6fb0 <__subsf3+0x2c4>
    6eec:	58bfffc4 	addi	r2,r11,-1
    6ef0:	10007526 	beq	r2,zero,70c8 <__subsf3+0x3dc>
    6ef4:	5ac03fe0 	cmpeqi	r11,r11,255
    6ef8:	5800191e 	bne	r11,zero,6f60 <__subsf3+0x274>
    6efc:	1017883a 	mov	r11,r2
    6f00:	003fdd06 	br	6e78 <__subsf3+0x18c>
    6f04:	00ffffc4 	movi	r3,-1
    6f08:	0009883a 	mov	r4,zero
    6f0c:	003fb706 	br	6dec <__subsf3+0x100>
    6f10:	90c00044 	addi	r3,r18,1
    6f14:	19403f8c 	andi	r5,r3,254
    6f18:	28005026 	beq	r5,zero,705c <__subsf3+0x370>
    6f1c:	18803fe0 	cmpeqi	r2,r3,255
    6f20:	103ff81e 	bne	r2,zero,6f04 <__subsf3+0x218>
    6f24:	4249883a 	add	r4,r8,r9
    6f28:	2008d07a 	srli	r4,r4,1
    6f2c:	1825883a 	mov	r18,r3
    6f30:	208001cc 	andi	r2,r4,7
    6f34:	103fa21e 	bne	r2,zero,6dc0 <__subsf3+0xd4>
    6f38:	2018d0fa 	srli	r12,r4,3
    6f3c:	90803fe0 	cmpeqi	r2,r18,255
    6f40:	1000071e 	bne	r2,zero,6f60 <__subsf3+0x274>
    6f44:	01002034 	movhi	r4,128
    6f48:	213fffc4 	addi	r4,r4,-1
    6f4c:	6108703a 	and	r4,r12,r4
    6f50:	9007883a 	mov	r3,r18
    6f54:	003fa506 	br	6dec <__subsf3+0x100>
    6f58:	40006c1e 	bne	r8,zero,710c <__subsf3+0x420>
    6f5c:	3819883a 	mov	r12,r7
    6f60:	603fe826 	beq	r12,zero,6f04 <__subsf3+0x218>
    6f64:	00802034 	movhi	r2,128
    6f68:	61001034 	orhi	r4,r12,64
    6f6c:	10bfffc4 	addi	r2,r2,-1
    6f70:	2088703a 	and	r4,r4,r2
    6f74:	00ffffc4 	movi	r3,-1
    6f78:	003f9c06 	br	6dec <__subsf3+0x100>
    6f7c:	583fe426 	beq	r11,zero,6f10 <__subsf3+0x224>
    6f80:	5497c83a 	sub	r11,r10,r18
    6f84:	90004026 	beq	r18,zero,7088 <__subsf3+0x39c>
    6f88:	50803fe0 	cmpeqi	r2,r10,255
    6f8c:	103ff31e 	bne	r2,zero,6f5c <__subsf3+0x270>
    6f90:	42010034 	orhi	r8,r8,1024
    6f94:	58800710 	cmplti	r2,r11,28
    6f98:	1000641e 	bne	r2,zero,712c <__subsf3+0x440>
    6f9c:	01000044 	movi	r4,1
    6fa0:	2249883a 	add	r4,r4,r9
    6fa4:	5025883a 	mov	r18,r10
    6fa8:	003fb706 	br	6e88 <__subsf3+0x19c>
    6fac:	3819883a 	mov	r12,r7
    6fb0:	5825883a 	mov	r18,r11
    6fb4:	003fe106 	br	6f3c <__subsf3+0x250>
    6fb8:	1485c83a 	sub	r2,r2,r18
    6fbc:	14000044 	addi	r16,r2,1
    6fc0:	00800804 	movi	r2,32
    6fc4:	1405c83a 	sub	r2,r2,r16
    6fc8:	2084983a 	sll	r2,r4,r2
    6fcc:	2408d83a 	srl	r4,r4,r16
    6fd0:	0025883a 	mov	r18,zero
    6fd4:	1004c03a 	cmpne	r2,r2,zero
    6fd8:	1108b03a 	or	r4,r2,r4
    6fdc:	003f7606 	br	6db8 <__subsf3+0xcc>
    6fe0:	01000804 	movi	r4,32
    6fe4:	22c9c83a 	sub	r4,r4,r11
    6fe8:	4908983a 	sll	r4,r9,r4
    6fec:	4ad2d83a 	srl	r9,r9,r11
    6ff0:	2008c03a 	cmpne	r4,r4,zero
    6ff4:	2248b03a 	or	r4,r4,r9
    6ff8:	003f6006 	br	6d7c <__subsf3+0x90>
    6ffc:	50803fe0 	cmpeqi	r2,r10,255
    7000:	103fd61e 	bne	r2,zero,6f5c <__subsf3+0x270>
    7004:	42010034 	orhi	r8,r8,1024
    7008:	58800710 	cmplti	r2,r11,28
    700c:	1000361e 	bne	r2,zero,70e8 <__subsf3+0x3fc>
    7010:	01000044 	movi	r4,1
    7014:	4909c83a 	sub	r4,r9,r4
    7018:	5025883a 	mov	r18,r10
    701c:	003f5806 	br	6d80 <__subsf3+0x94>
    7020:	4261c83a 	sub	r16,r8,r9
    7024:	80c1002c 	andhi	r3,r16,1024
    7028:	18001e1e 	bne	r3,zero,70a4 <__subsf3+0x3b8>
    702c:	803f591e 	bne	r16,zero,6d94 <__subsf3+0xa8>
    7030:	0023883a 	mov	r17,zero
    7034:	0007883a 	mov	r3,zero
    7038:	0009883a 	mov	r4,zero
    703c:	003f6b06 	br	6dec <__subsf3+0x100>
    7040:	01000804 	movi	r4,32
    7044:	22c9c83a 	sub	r4,r4,r11
    7048:	4908983a 	sll	r4,r9,r4
    704c:	4ad2d83a 	srl	r9,r9,r11
    7050:	2008c03a 	cmpne	r4,r4,zero
    7054:	2248b03a 	or	r4,r4,r9
    7058:	003f8a06 	br	6e84 <__subsf3+0x198>
    705c:	903fbe1e 	bne	r18,zero,6f58 <__subsf3+0x26c>
    7060:	40004226 	beq	r8,zero,716c <__subsf3+0x480>
    7064:	48002726 	beq	r9,zero,7104 <__subsf3+0x418>
    7068:	4249883a 	add	r4,r8,r9
    706c:	2081002c 	andhi	r2,r4,1024
    7070:	103faf26 	beq	r2,zero,6f30 <__subsf3+0x244>
    7074:	00bf0034 	movhi	r2,64512
    7078:	10bfffc4 	addi	r2,r2,-1
    707c:	2088703a 	and	r4,r4,r2
    7080:	04800044 	movi	r18,1
    7084:	003faa06 	br	6f30 <__subsf3+0x244>
    7088:	403fc826 	beq	r8,zero,6fac <__subsf3+0x2c0>
    708c:	58bfffc4 	addi	r2,r11,-1
    7090:	10000d26 	beq	r2,zero,70c8 <__subsf3+0x3dc>
    7094:	5ac03fe0 	cmpeqi	r11,r11,255
    7098:	583fb01e 	bne	r11,zero,6f5c <__subsf3+0x270>
    709c:	1017883a 	mov	r11,r2
    70a0:	003fbc06 	br	6f94 <__subsf3+0x2a8>
    70a4:	4a21c83a 	sub	r16,r9,r8
    70a8:	1023883a 	mov	r17,r2
    70ac:	003f3906 	br	6d94 <__subsf3+0xa8>
    70b0:	4000161e 	bne	r8,zero,710c <__subsf3+0x420>
    70b4:	48001a1e 	bne	r9,zero,7120 <__subsf3+0x434>
    70b8:	01002034 	movhi	r4,128
    70bc:	0023883a 	mov	r17,zero
    70c0:	213fffc4 	addi	r4,r4,-1
    70c4:	003fab06 	br	6f74 <__subsf3+0x288>
    70c8:	4249883a 	add	r4,r8,r9
    70cc:	2081002c 	andhi	r2,r4,1024
    70d0:	10001d26 	beq	r2,zero,7148 <__subsf3+0x45c>
    70d4:	04800084 	movi	r18,2
    70d8:	003f7006 	br	6e9c <__subsf3+0x1b0>
    70dc:	4249c83a 	sub	r4,r8,r9
    70e0:	04800044 	movi	r18,1
    70e4:	003f2606 	br	6d80 <__subsf3+0x94>
    70e8:	00c00804 	movi	r3,32
    70ec:	1ac7c83a 	sub	r3,r3,r11
    70f0:	40c6983a 	sll	r3,r8,r3
    70f4:	42d0d83a 	srl	r8,r8,r11
    70f8:	1808c03a 	cmpne	r4,r3,zero
    70fc:	2208b03a 	or	r4,r4,r8
    7100:	003fc406 	br	7014 <__subsf3+0x328>
    7104:	0007883a 	mov	r3,zero
    7108:	003f3806 	br	6dec <__subsf3+0x100>
    710c:	483f9426 	beq	r9,zero,6f60 <__subsf3+0x274>
    7110:	2100102c 	andhi	r4,r4,64
    7114:	203f9226 	beq	r4,zero,6f60 <__subsf3+0x274>
    7118:	38c0102c 	andhi	r3,r7,64
    711c:	183f901e 	bne	r3,zero,6f60 <__subsf3+0x274>
    7120:	1023883a 	mov	r17,r2
    7124:	3819883a 	mov	r12,r7
    7128:	003f8d06 	br	6f60 <__subsf3+0x274>
    712c:	01000804 	movi	r4,32
    7130:	22c9c83a 	sub	r4,r4,r11
    7134:	4106983a 	sll	r3,r8,r4
    7138:	42d0d83a 	srl	r8,r8,r11
    713c:	1808c03a 	cmpne	r4,r3,zero
    7140:	2208b03a 	or	r4,r4,r8
    7144:	003f9606 	br	6fa0 <__subsf3+0x2b4>
    7148:	04800044 	movi	r18,1
    714c:	003f7806 	br	6f30 <__subsf3+0x244>
    7150:	483fb726 	beq	r9,zero,7030 <__subsf3+0x344>
    7154:	1023883a 	mov	r17,r2
    7158:	3809883a 	mov	r4,r7
    715c:	003f2306 	br	6dec <__subsf3+0x100>
    7160:	4a09c83a 	sub	r4,r9,r8
    7164:	04800044 	movi	r18,1
    7168:	003f0506 	br	6d80 <__subsf3+0x94>
    716c:	3809883a 	mov	r4,r7
    7170:	0007883a 	mov	r3,zero
    7174:	003f1d06 	br	6dec <__subsf3+0x100>
    7178:	203fad26 	beq	r4,zero,7030 <__subsf3+0x344>
    717c:	003f6c06 	br	6f30 <__subsf3+0x244>

00007180 <__unordsf2>:
    7180:	2006d5fa 	srli	r3,r4,23
    7184:	00802034 	movhi	r2,128
    7188:	10bfffc4 	addi	r2,r2,-1
    718c:	18c03fcc 	andi	r3,r3,255
    7190:	18c03fd8 	cmpnei	r3,r3,255
    7194:	1108703a 	and	r4,r2,r4
    7198:	280cd5fa 	srli	r6,r5,23
    719c:	1144703a 	and	r2,r2,r5
    71a0:	18000526 	beq	r3,zero,71b8 <__unordsf2+0x38>
    71a4:	31803fcc 	andi	r6,r6,255
    71a8:	31803fd8 	cmpnei	r6,r6,255
    71ac:	30000526 	beq	r6,zero,71c4 <__unordsf2+0x44>
    71b0:	0005883a 	mov	r2,zero
    71b4:	f800283a 	ret
    71b8:	203ffa26 	beq	r4,zero,71a4 <__unordsf2+0x24>
    71bc:	00800044 	movi	r2,1
    71c0:	f800283a 	ret
    71c4:	1004c03a 	cmpne	r2,r2,zero
    71c8:	f800283a 	ret

000071cc <__fixsfsi>:
    71cc:	200ad5fa 	srli	r5,r4,23
    71d0:	00c02034 	movhi	r3,128
    71d4:	18ffffc4 	addi	r3,r3,-1
    71d8:	29403fcc 	andi	r5,r5,255
    71dc:	29801fd0 	cmplti	r6,r5,127
    71e0:	200ed7fa 	srli	r7,r4,31
    71e4:	1906703a 	and	r3,r3,r4
    71e8:	3000061e 	bne	r6,zero,7204 <__fixsfsi+0x38>
    71ec:	28802790 	cmplti	r2,r5,158
    71f0:	1000061e 	bne	r2,zero,720c <__fixsfsi+0x40>
    71f4:	00a00034 	movhi	r2,32768
    71f8:	10bfffc4 	addi	r2,r2,-1
    71fc:	3885883a 	add	r2,r7,r2
    7200:	f800283a 	ret
    7204:	0005883a 	mov	r2,zero
    7208:	f800283a 	ret
    720c:	28802590 	cmplti	r2,r5,150
    7210:	18c02034 	orhi	r3,r3,128
    7214:	1000051e 	bne	r2,zero,722c <__fixsfsi+0x60>
    7218:	28bfda84 	addi	r2,r5,-150
    721c:	1884983a 	sll	r2,r3,r2
    7220:	383ff926 	beq	r7,zero,7208 <__fixsfsi+0x3c>
    7224:	0085c83a 	sub	r2,zero,r2
    7228:	f800283a 	ret
    722c:	00802584 	movi	r2,150
    7230:	1145c83a 	sub	r2,r2,r5
    7234:	1884d83a 	srl	r2,r3,r2
    7238:	003ff906 	br	7220 <__fixsfsi+0x54>

0000723c <__floatsisf>:
    723c:	defffd04 	addi	sp,sp,-12
    7240:	dfc00215 	stw	ra,8(sp)
    7244:	dc400115 	stw	r17,4(sp)
    7248:	dc000015 	stw	r16,0(sp)
    724c:	20001226 	beq	r4,zero,7298 <__floatsisf+0x5c>
    7250:	2022d7fa 	srli	r17,r4,31
    7254:	2021883a 	mov	r16,r4
    7258:	20003816 	blt	r4,zero,733c <__floatsisf+0x100>
    725c:	8009883a 	mov	r4,r16
    7260:	0009bf00 	call	9bf0 <__clzsi2>
    7264:	1009883a 	mov	r4,r2
    7268:	00802784 	movi	r2,158
    726c:	1105c83a 	sub	r2,r2,r4
    7270:	10c025c8 	cmpgei	r3,r2,151
    7274:	1800151e 	bne	r3,zero,72cc <__floatsisf+0x90>
    7278:	20c00248 	cmpgei	r3,r4,9
    727c:	18003126 	beq	r3,zero,7344 <__floatsisf+0x108>
    7280:	213ffe04 	addi	r4,r4,-8
    7284:	8120983a 	sll	r16,r16,r4
    7288:	00c02034 	movhi	r3,128
    728c:	18ffffc4 	addi	r3,r3,-1
    7290:	80e0703a 	and	r16,r16,r3
    7294:	00000306 	br	72a4 <__floatsisf+0x68>
    7298:	0023883a 	mov	r17,zero
    729c:	0005883a 	mov	r2,zero
    72a0:	0021883a 	mov	r16,zero
    72a4:	10803fcc 	andi	r2,r2,255
    72a8:	100495fa 	slli	r2,r2,23
    72ac:	882297fa 	slli	r17,r17,31
    72b0:	1404b03a 	or	r2,r2,r16
    72b4:	1444b03a 	or	r2,r2,r17
    72b8:	dfc00217 	ldw	ra,8(sp)
    72bc:	dc400117 	ldw	r17,4(sp)
    72c0:	dc000017 	ldw	r16,0(sp)
    72c4:	dec00304 	addi	sp,sp,12
    72c8:	f800283a 	ret
    72cc:	10c02690 	cmplti	r3,r2,154
    72d0:	1800071e 	bne	r3,zero,72f0 <__floatsisf+0xb4>
    72d4:	20c006c4 	addi	r3,r4,27
    72d8:	01400144 	movi	r5,5
    72dc:	80c6983a 	sll	r3,r16,r3
    72e0:	290bc83a 	sub	r5,r5,r4
    72e4:	814ad83a 	srl	r5,r16,r5
    72e8:	1806c03a 	cmpne	r3,r3,zero
    72ec:	28e0b03a 	or	r16,r5,r3
    72f0:	20c00188 	cmpgei	r3,r4,6
    72f4:	1800171e 	bne	r3,zero,7354 <__floatsisf+0x118>
    72f8:	00ff0034 	movhi	r3,64512
    72fc:	18ffffc4 	addi	r3,r3,-1
    7300:	818001cc 	andi	r6,r16,7
    7304:	80ca703a 	and	r5,r16,r3
    7308:	30000926 	beq	r6,zero,7330 <__floatsisf+0xf4>
    730c:	818003cc 	andi	r6,r16,15
    7310:	31800120 	cmpeqi	r6,r6,4
    7314:	3000061e 	bne	r6,zero,7330 <__floatsisf+0xf4>
    7318:	29400104 	addi	r5,r5,4
    731c:	2981002c 	andhi	r6,r5,1024
    7320:	30000326 	beq	r6,zero,7330 <__floatsisf+0xf4>
    7324:	28ca703a 	and	r5,r5,r3
    7328:	00c027c4 	movi	r3,159
    732c:	1905c83a 	sub	r2,r3,r4
    7330:	282091ba 	slli	r16,r5,6
    7334:	8020d27a 	srli	r16,r16,9
    7338:	003fda06 	br	72a4 <__floatsisf+0x68>
    733c:	0121c83a 	sub	r16,zero,r4
    7340:	003fc606 	br	725c <__floatsisf+0x20>
    7344:	01002034 	movhi	r4,128
    7348:	213fffc4 	addi	r4,r4,-1
    734c:	8120703a 	and	r16,r16,r4
    7350:	003fd406 	br	72a4 <__floatsisf+0x68>
    7354:	20fffec4 	addi	r3,r4,-5
    7358:	80e0983a 	sll	r16,r16,r3
    735c:	003fe606 	br	72f8 <__floatsisf+0xbc>

00007360 <__floatunsisf>:
    7360:	defffe04 	addi	sp,sp,-8
    7364:	dfc00115 	stw	ra,4(sp)
    7368:	dc000015 	stw	r16,0(sp)
    736c:	20000f26 	beq	r4,zero,73ac <__floatunsisf+0x4c>
    7370:	2021883a 	mov	r16,r4
    7374:	0009bf00 	call	9bf0 <__clzsi2>
    7378:	1009883a 	mov	r4,r2
    737c:	00802784 	movi	r2,158
    7380:	1105c83a 	sub	r2,r2,r4
    7384:	10c025c8 	cmpgei	r3,r2,151
    7388:	1800111e 	bne	r3,zero,73d0 <__floatunsisf+0x70>
    738c:	20c00248 	cmpgei	r3,r4,9
    7390:	18002b26 	beq	r3,zero,7440 <__floatunsisf+0xe0>
    7394:	213ffe04 	addi	r4,r4,-8
    7398:	8120983a 	sll	r16,r16,r4
    739c:	00c02034 	movhi	r3,128
    73a0:	18ffffc4 	addi	r3,r3,-1
    73a4:	80e0703a 	and	r16,r16,r3
    73a8:	00000206 	br	73b4 <__floatunsisf+0x54>
    73ac:	0005883a 	mov	r2,zero
    73b0:	0021883a 	mov	r16,zero
    73b4:	10803fcc 	andi	r2,r2,255
    73b8:	100495fa 	slli	r2,r2,23
    73bc:	1404b03a 	or	r2,r2,r16
    73c0:	dfc00117 	ldw	ra,4(sp)
    73c4:	dc000017 	ldw	r16,0(sp)
    73c8:	dec00204 	addi	sp,sp,8
    73cc:	f800283a 	ret
    73d0:	10c02690 	cmplti	r3,r2,154
    73d4:	1800071e 	bne	r3,zero,73f4 <__floatunsisf+0x94>
    73d8:	20c006c4 	addi	r3,r4,27
    73dc:	80ca983a 	sll	r5,r16,r3
    73e0:	00c00144 	movi	r3,5
    73e4:	1907c83a 	sub	r3,r3,r4
    73e8:	80e0d83a 	srl	r16,r16,r3
    73ec:	2806c03a 	cmpne	r3,r5,zero
    73f0:	1c20b03a 	or	r16,r3,r16
    73f4:	20c00188 	cmpgei	r3,r4,6
    73f8:	1800151e 	bne	r3,zero,7450 <__floatunsisf+0xf0>
    73fc:	00ff0034 	movhi	r3,64512
    7400:	18ffffc4 	addi	r3,r3,-1
    7404:	818001cc 	andi	r6,r16,7
    7408:	80ca703a 	and	r5,r16,r3
    740c:	30000926 	beq	r6,zero,7434 <__floatunsisf+0xd4>
    7410:	840003cc 	andi	r16,r16,15
    7414:	84000120 	cmpeqi	r16,r16,4
    7418:	8000061e 	bne	r16,zero,7434 <__floatunsisf+0xd4>
    741c:	29400104 	addi	r5,r5,4
    7420:	2981002c 	andhi	r6,r5,1024
    7424:	30000326 	beq	r6,zero,7434 <__floatunsisf+0xd4>
    7428:	28ca703a 	and	r5,r5,r3
    742c:	00c027c4 	movi	r3,159
    7430:	1905c83a 	sub	r2,r3,r4
    7434:	282091ba 	slli	r16,r5,6
    7438:	8020d27a 	srli	r16,r16,9
    743c:	003fdd06 	br	73b4 <__floatunsisf+0x54>
    7440:	01002034 	movhi	r4,128
    7444:	213fffc4 	addi	r4,r4,-1
    7448:	8120703a 	and	r16,r16,r4
    744c:	003fd906 	br	73b4 <__floatunsisf+0x54>
    7450:	20fffec4 	addi	r3,r4,-5
    7454:	80e0983a 	sll	r16,r16,r3
    7458:	003fe806 	br	73fc <__floatunsisf+0x9c>

0000745c <__adddf3>:
    745c:	02000434 	movhi	r8,16
    7460:	423fffc4 	addi	r8,r8,-1
    7464:	2806d53a 	srli	r3,r5,20
    7468:	3804d53a 	srli	r2,r7,20
    746c:	2a14703a 	and	r10,r5,r8
    7470:	3a12703a 	and	r9,r7,r8
    7474:	280ad7fa 	srli	r5,r5,31
    7478:	501490fa 	slli	r10,r10,3
    747c:	2018d77a 	srli	r12,r4,29
    7480:	481290fa 	slli	r9,r9,3
    7484:	3016d77a 	srli	r11,r6,29
    7488:	380ed7fa 	srli	r7,r7,31
    748c:	defffb04 	addi	sp,sp,-20
    7490:	dc800215 	stw	r18,8(sp)
    7494:	dc000015 	stw	r16,0(sp)
    7498:	1c81ffcc 	andi	r18,r3,2047
    749c:	1081ffcc 	andi	r2,r2,2047
    74a0:	dfc00415 	stw	ra,16(sp)
    74a4:	dcc00315 	stw	r19,12(sp)
    74a8:	dc400115 	stw	r17,4(sp)
    74ac:	201c90fa 	slli	r14,r4,3
    74b0:	301a90fa 	slli	r13,r6,3
    74b4:	2821883a 	mov	r16,r5
    74b8:	6294b03a 	or	r10,r12,r10
    74bc:	5a52b03a 	or	r9,r11,r9
    74c0:	9087c83a 	sub	r3,r18,r2
    74c4:	29c06126 	beq	r5,r7,764c <__adddf3+0x1f0>
    74c8:	00c0550e 	bge	zero,r3,7620 <__adddf3+0x1c4>
    74cc:	10007326 	beq	r2,zero,769c <__adddf3+0x240>
    74d0:	9081ffd8 	cmpnei	r2,r18,2047
    74d4:	1000bd26 	beq	r2,zero,77cc <__adddf3+0x370>
    74d8:	4a402034 	orhi	r9,r9,128
    74dc:	18800e48 	cmpgei	r2,r3,57
    74e0:	1000ef1e 	bne	r2,zero,78a0 <__adddf3+0x444>
    74e4:	18800808 	cmpgei	r2,r3,32
    74e8:	1001321e 	bne	r2,zero,79b4 <__adddf3+0x558>
    74ec:	00800804 	movi	r2,32
    74f0:	10c5c83a 	sub	r2,r2,r3
    74f4:	68c8d83a 	srl	r4,r13,r3
    74f8:	48a2983a 	sll	r17,r9,r2
    74fc:	689a983a 	sll	r13,r13,r2
    7500:	48c6d83a 	srl	r3,r9,r3
    7504:	8922b03a 	or	r17,r17,r4
    7508:	681ac03a 	cmpne	r13,r13,zero
    750c:	8b62b03a 	or	r17,r17,r13
    7510:	50d5c83a 	sub	r10,r10,r3
    7514:	7463c83a 	sub	r17,r14,r17
    7518:	7451803a 	cmpltu	r8,r14,r17
    751c:	5211c83a 	sub	r8,r10,r8
    7520:	4080202c 	andhi	r2,r8,128
    7524:	10008d26 	beq	r2,zero,775c <__adddf3+0x300>
    7528:	02402034 	movhi	r9,128
    752c:	4a7fffc4 	addi	r9,r9,-1
    7530:	4266703a 	and	r19,r8,r9
    7534:	9800b326 	beq	r19,zero,7804 <__adddf3+0x3a8>
    7538:	9809883a 	mov	r4,r19
    753c:	0009bf00 	call	9bf0 <__clzsi2>
    7540:	10fffe04 	addi	r3,r2,-8
    7544:	02000804 	movi	r8,32
    7548:	40d1c83a 	sub	r8,r8,r3
    754c:	8a10d83a 	srl	r8,r17,r8
    7550:	98d2983a 	sll	r9,r19,r3
    7554:	88e2983a 	sll	r17,r17,r3
    7558:	4250b03a 	or	r8,r8,r9
    755c:	1c80b216 	blt	r3,r18,7828 <__adddf3+0x3cc>
    7560:	1c87c83a 	sub	r3,r3,r18
    7564:	19000044 	addi	r4,r3,1
    7568:	20800808 	cmpgei	r2,r4,32
    756c:	10006f1e 	bne	r2,zero,772c <__adddf3+0x2d0>
    7570:	00800804 	movi	r2,32
    7574:	1105c83a 	sub	r2,r2,r4
    7578:	8906d83a 	srl	r3,r17,r4
    757c:	88a2983a 	sll	r17,r17,r2
    7580:	4084983a 	sll	r2,r8,r2
    7584:	4110d83a 	srl	r8,r8,r4
    7588:	8822c03a 	cmpne	r17,r17,zero
    758c:	10c4b03a 	or	r2,r2,r3
    7590:	1462b03a 	or	r17,r2,r17
    7594:	0025883a 	mov	r18,zero
    7598:	888001cc 	andi	r2,r17,7
    759c:	10000726 	beq	r2,zero,75bc <__adddf3+0x160>
    75a0:	888003cc 	andi	r2,r17,15
    75a4:	10800120 	cmpeqi	r2,r2,4
    75a8:	1000041e 	bne	r2,zero,75bc <__adddf3+0x160>
    75ac:	88c00104 	addi	r3,r17,4
    75b0:	1c63803a 	cmpltu	r17,r3,r17
    75b4:	4451883a 	add	r8,r8,r17
    75b8:	1823883a 	mov	r17,r3
    75bc:	4080202c 	andhi	r2,r8,128
    75c0:	10006826 	beq	r2,zero,7764 <__adddf3+0x308>
    75c4:	90c00044 	addi	r3,r18,1
    75c8:	1881ffe0 	cmpeqi	r2,r3,2047
    75cc:	18c1ffcc 	andi	r3,r3,2047
    75d0:	10007a1e 	bne	r2,zero,77bc <__adddf3+0x360>
    75d4:	00bfe034 	movhi	r2,65408
    75d8:	10bfffc4 	addi	r2,r2,-1
    75dc:	4090703a 	and	r8,r8,r2
    75e0:	4004977a 	slli	r2,r8,29
    75e4:	4010927a 	slli	r8,r8,9
    75e8:	8822d0fa 	srli	r17,r17,3
    75ec:	4010d33a 	srli	r8,r8,12
    75f0:	1444b03a 	or	r2,r2,r17
    75f4:	1806953a 	slli	r3,r3,20
    75f8:	802097fa 	slli	r16,r16,31
    75fc:	1a06b03a 	or	r3,r3,r8
    7600:	1c06b03a 	or	r3,r3,r16
    7604:	dfc00417 	ldw	ra,16(sp)
    7608:	dcc00317 	ldw	r19,12(sp)
    760c:	dc800217 	ldw	r18,8(sp)
    7610:	dc400117 	ldw	r17,4(sp)
    7614:	dc000017 	ldw	r16,0(sp)
    7618:	dec00504 	addi	sp,sp,20
    761c:	f800283a 	ret
    7620:	18002626 	beq	r3,zero,76bc <__adddf3+0x260>
    7624:	1487c83a 	sub	r3,r2,r18
    7628:	9000ba1e 	bne	r18,zero,7914 <__adddf3+0x4b8>
    762c:	5388b03a 	or	r4,r10,r14
    7630:	20011826 	beq	r4,zero,7a94 <__adddf3+0x638>
    7634:	193fffc4 	addi	r4,r3,-1
    7638:	20015726 	beq	r4,zero,7b98 <__adddf3+0x73c>
    763c:	18c1ffd8 	cmpnei	r3,r3,2047
    7640:	18013026 	beq	r3,zero,7b04 <__adddf3+0x6a8>
    7644:	2007883a 	mov	r3,r4
    7648:	0000b506 	br	7920 <__adddf3+0x4c4>
    764c:	00c07b0e 	bge	zero,r3,783c <__adddf3+0x3e0>
    7650:	10002e26 	beq	r2,zero,770c <__adddf3+0x2b0>
    7654:	9081ffd8 	cmpnei	r2,r18,2047
    7658:	10005c26 	beq	r2,zero,77cc <__adddf3+0x370>
    765c:	4a402034 	orhi	r9,r9,128
    7660:	18800e48 	cmpgei	r2,r3,57
    7664:	10004b1e 	bne	r2,zero,7794 <__adddf3+0x338>
    7668:	18800808 	cmpgei	r2,r3,32
    766c:	1000ec26 	beq	r2,zero,7a20 <__adddf3+0x5c4>
    7670:	1c7ff804 	addi	r17,r3,-32
    7674:	19000820 	cmpeqi	r4,r3,32
    7678:	4c44d83a 	srl	r2,r9,r17
    767c:	2000041e 	bne	r4,zero,7690 <__adddf3+0x234>
    7680:	01001004 	movi	r4,64
    7684:	20c7c83a 	sub	r3,r4,r3
    7688:	48d2983a 	sll	r9,r9,r3
    768c:	6a5ab03a 	or	r13,r13,r9
    7690:	6822c03a 	cmpne	r17,r13,zero
    7694:	88a2b03a 	or	r17,r17,r2
    7698:	00004006 	br	779c <__adddf3+0x340>
    769c:	4b44b03a 	or	r2,r9,r13
    76a0:	10008226 	beq	r2,zero,78ac <__adddf3+0x450>
    76a4:	18bfffc4 	addi	r2,r3,-1
    76a8:	10011026 	beq	r2,zero,7aec <__adddf3+0x690>
    76ac:	18c1ffd8 	cmpnei	r3,r3,2047
    76b0:	18004626 	beq	r3,zero,77cc <__adddf3+0x370>
    76b4:	1007883a 	mov	r3,r2
    76b8:	003f8806 	br	74dc <__adddf3+0x80>
    76bc:	90800044 	addi	r2,r18,1
    76c0:	1081ff8c 	andi	r2,r2,2046
    76c4:	1000a51e 	bne	r2,zero,795c <__adddf3+0x500>
    76c8:	538ab03a 	or	r5,r10,r14
    76cc:	4b44b03a 	or	r2,r9,r13
    76d0:	9000f81e 	bne	r18,zero,7ab4 <__adddf3+0x658>
    76d4:	28013726 	beq	r5,zero,7bb4 <__adddf3+0x758>
    76d8:	10011226 	beq	r2,zero,7b24 <__adddf3+0x6c8>
    76dc:	7363c83a 	sub	r17,r14,r13
    76e0:	7445803a 	cmpltu	r2,r14,r17
    76e4:	5251c83a 	sub	r8,r10,r9
    76e8:	4091c83a 	sub	r8,r8,r2
    76ec:	4080202c 	andhi	r2,r8,128
    76f0:	10018f26 	beq	r2,zero,7d30 <__adddf3+0x8d4>
    76f4:	6ba3c83a 	sub	r17,r13,r14
    76f8:	4a95c83a 	sub	r10,r9,r10
    76fc:	6c51803a 	cmpltu	r8,r13,r17
    7700:	5211c83a 	sub	r8,r10,r8
    7704:	3821883a 	mov	r16,r7
    7708:	003fa306 	br	7598 <__adddf3+0x13c>
    770c:	4b44b03a 	or	r2,r9,r13
    7710:	10006626 	beq	r2,zero,78ac <__adddf3+0x450>
    7714:	18bfffc4 	addi	r2,r3,-1
    7718:	1000ec26 	beq	r2,zero,7acc <__adddf3+0x670>
    771c:	18c1ffd8 	cmpnei	r3,r3,2047
    7720:	18012d26 	beq	r3,zero,7bd8 <__adddf3+0x77c>
    7724:	1007883a 	mov	r3,r2
    7728:	003fcd06 	br	7660 <__adddf3+0x204>
    772c:	18fff844 	addi	r3,r3,-31
    7730:	20800820 	cmpeqi	r2,r4,32
    7734:	40c6d83a 	srl	r3,r8,r3
    7738:	1000041e 	bne	r2,zero,774c <__adddf3+0x2f0>
    773c:	00801004 	movi	r2,64
    7740:	1109c83a 	sub	r4,r2,r4
    7744:	4110983a 	sll	r8,r8,r4
    7748:	8a22b03a 	or	r17,r17,r8
    774c:	8822c03a 	cmpne	r17,r17,zero
    7750:	88e2b03a 	or	r17,r17,r3
    7754:	0011883a 	mov	r8,zero
    7758:	0025883a 	mov	r18,zero
    775c:	888001cc 	andi	r2,r17,7
    7760:	103f8f1e 	bne	r2,zero,75a0 <__adddf3+0x144>
    7764:	8822d0fa 	srli	r17,r17,3
    7768:	4004977a 	slli	r2,r8,29
    776c:	4014d0fa 	srli	r10,r8,3
    7770:	9007883a 	mov	r3,r18
    7774:	8884b03a 	or	r2,r17,r2
    7778:	1901ffe0 	cmpeqi	r4,r3,2047
    777c:	2000191e 	bne	r4,zero,77e4 <__adddf3+0x388>
    7780:	02000434 	movhi	r8,16
    7784:	423fffc4 	addi	r8,r8,-1
    7788:	5210703a 	and	r8,r10,r8
    778c:	18c1ffcc 	andi	r3,r3,2047
    7790:	003f9806 	br	75f4 <__adddf3+0x198>
    7794:	4b62b03a 	or	r17,r9,r13
    7798:	8822c03a 	cmpne	r17,r17,zero
    779c:	8ba3883a 	add	r17,r17,r14
    77a0:	8b91803a 	cmpltu	r8,r17,r14
    77a4:	4291883a 	add	r8,r8,r10
    77a8:	4080202c 	andhi	r2,r8,128
    77ac:	103feb26 	beq	r2,zero,775c <__adddf3+0x300>
    77b0:	94800044 	addi	r18,r18,1
    77b4:	9081ffe0 	cmpeqi	r2,r18,2047
    77b8:	10007426 	beq	r2,zero,798c <__adddf3+0x530>
    77bc:	00c1ffc4 	movi	r3,2047
    77c0:	0011883a 	mov	r8,zero
    77c4:	0005883a 	mov	r2,zero
    77c8:	003f8a06 	br	75f4 <__adddf3+0x198>
    77cc:	500a977a 	slli	r5,r10,29
    77d0:	00c80034 	movhi	r3,8192
    77d4:	18ffffc4 	addi	r3,r3,-1
    77d8:	5014d0fa 	srli	r10,r10,3
    77dc:	20c4703a 	and	r2,r4,r3
    77e0:	1144b03a 	or	r2,r2,r5
    77e4:	1286b03a 	or	r3,r2,r10
    77e8:	18015426 	beq	r3,zero,7d3c <__adddf3+0x8e0>
    77ec:	00c00434 	movhi	r3,16
    77f0:	18ffffc4 	addi	r3,r3,-1
    77f4:	52000234 	orhi	r8,r10,8
    77f8:	40d0703a 	and	r8,r8,r3
    77fc:	00c1ffc4 	movi	r3,2047
    7800:	003f7c06 	br	75f4 <__adddf3+0x198>
    7804:	8809883a 	mov	r4,r17
    7808:	0009bf00 	call	9bf0 <__clzsi2>
    780c:	10c00604 	addi	r3,r2,24
    7810:	19000808 	cmpgei	r4,r3,32
    7814:	203f4b26 	beq	r4,zero,7544 <__adddf3+0xe8>
    7818:	123ffe04 	addi	r8,r2,-8
    781c:	8a10983a 	sll	r8,r17,r8
    7820:	0023883a 	mov	r17,zero
    7824:	1cbf4e0e 	bge	r3,r18,7560 <__adddf3+0x104>
    7828:	00bfe034 	movhi	r2,65408
    782c:	10bfffc4 	addi	r2,r2,-1
    7830:	90e5c83a 	sub	r18,r18,r3
    7834:	4090703a 	and	r8,r8,r2
    7838:	003f5706 	br	7598 <__adddf3+0x13c>
    783c:	18002226 	beq	r3,zero,78c8 <__adddf3+0x46c>
    7840:	1487c83a 	sub	r3,r2,r18
    7844:	90006e26 	beq	r18,zero,7a00 <__adddf3+0x5a4>
    7848:	1101ffd8 	cmpnei	r4,r2,2047
    784c:	2000e926 	beq	r4,zero,7bf4 <__adddf3+0x798>
    7850:	52802034 	orhi	r10,r10,128
    7854:	19000e48 	cmpgei	r4,r3,57
    7858:	2000b91e 	bne	r4,zero,7b40 <__adddf3+0x6e4>
    785c:	19000808 	cmpgei	r4,r3,32
    7860:	2001101e 	bne	r4,zero,7ca4 <__adddf3+0x848>
    7864:	01000804 	movi	r4,32
    7868:	20c9c83a 	sub	r4,r4,r3
    786c:	5122983a 	sll	r17,r10,r4
    7870:	70cad83a 	srl	r5,r14,r3
    7874:	7108983a 	sll	r4,r14,r4
    7878:	50d4d83a 	srl	r10,r10,r3
    787c:	8962b03a 	or	r17,r17,r5
    7880:	2008c03a 	cmpne	r4,r4,zero
    7884:	8922b03a 	or	r17,r17,r4
    7888:	4a93883a 	add	r9,r9,r10
    788c:	8b63883a 	add	r17,r17,r13
    7890:	8b51803a 	cmpltu	r8,r17,r13
    7894:	4251883a 	add	r8,r8,r9
    7898:	1025883a 	mov	r18,r2
    789c:	003fc206 	br	77a8 <__adddf3+0x34c>
    78a0:	4b62b03a 	or	r17,r9,r13
    78a4:	8822c03a 	cmpne	r17,r17,zero
    78a8:	003f1a06 	br	7514 <__adddf3+0xb8>
    78ac:	500c977a 	slli	r6,r10,29
    78b0:	01480034 	movhi	r5,8192
    78b4:	297fffc4 	addi	r5,r5,-1
    78b8:	2144703a 	and	r2,r4,r5
    78bc:	5014d0fa 	srli	r10,r10,3
    78c0:	1184b03a 	or	r2,r2,r6
    78c4:	003fac06 	br	7778 <__adddf3+0x31c>
    78c8:	90800044 	addi	r2,r18,1
    78cc:	1141ff8c 	andi	r5,r2,2046
    78d0:	28005e1e 	bne	r5,zero,7a4c <__adddf3+0x5f0>
    78d4:	5384b03a 	or	r2,r10,r14
    78d8:	9000a71e 	bne	r18,zero,7b78 <__adddf3+0x71c>
    78dc:	1000e526 	beq	r2,zero,7c74 <__adddf3+0x818>
    78e0:	4b44b03a 	or	r2,r9,r13
    78e4:	10008f26 	beq	r2,zero,7b24 <__adddf3+0x6c8>
    78e8:	7363883a 	add	r17,r14,r13
    78ec:	5255883a 	add	r10,r10,r9
    78f0:	8b91803a 	cmpltu	r8,r17,r14
    78f4:	5211883a 	add	r8,r10,r8
    78f8:	4080202c 	andhi	r2,r8,128
    78fc:	103f9726 	beq	r2,zero,775c <__adddf3+0x300>
    7900:	00bfe034 	movhi	r2,65408
    7904:	10bfffc4 	addi	r2,r2,-1
    7908:	4090703a 	and	r8,r8,r2
    790c:	04800044 	movi	r18,1
    7910:	003f9206 	br	775c <__adddf3+0x300>
    7914:	1101ffd8 	cmpnei	r4,r2,2047
    7918:	20007a26 	beq	r4,zero,7b04 <__adddf3+0x6a8>
    791c:	52802034 	orhi	r10,r10,128
    7920:	19000e48 	cmpgei	r4,r3,57
    7924:	20002e1e 	bne	r4,zero,79e0 <__adddf3+0x584>
    7928:	19000808 	cmpgei	r4,r3,32
    792c:	2000871e 	bne	r4,zero,7b4c <__adddf3+0x6f0>
    7930:	01000804 	movi	r4,32
    7934:	20c9c83a 	sub	r4,r4,r3
    7938:	5122983a 	sll	r17,r10,r4
    793c:	70cad83a 	srl	r5,r14,r3
    7940:	711c983a 	sll	r14,r14,r4
    7944:	50d4d83a 	srl	r10,r10,r3
    7948:	8962b03a 	or	r17,r17,r5
    794c:	701cc03a 	cmpne	r14,r14,zero
    7950:	8ba2b03a 	or	r17,r17,r14
    7954:	4a93c83a 	sub	r9,r9,r10
    7958:	00002306 	br	79e8 <__adddf3+0x58c>
    795c:	7363c83a 	sub	r17,r14,r13
    7960:	5267c83a 	sub	r19,r10,r9
    7964:	7451803a 	cmpltu	r8,r14,r17
    7968:	9a27c83a 	sub	r19,r19,r8
    796c:	9880202c 	andhi	r2,r19,128
    7970:	1000421e 	bne	r2,zero,7a7c <__adddf3+0x620>
    7974:	8cc4b03a 	or	r2,r17,r19
    7978:	103eee1e 	bne	r2,zero,7534 <__adddf3+0xd8>
    797c:	0015883a 	mov	r10,zero
    7980:	0021883a 	mov	r16,zero
    7984:	003f7e06 	br	7780 <__adddf3+0x324>
    7988:	04800084 	movi	r18,2
    798c:	00bfe034 	movhi	r2,65408
    7990:	10bfffc4 	addi	r2,r2,-1
    7994:	8806d07a 	srli	r3,r17,1
    7998:	4090703a 	and	r8,r8,r2
    799c:	400497fa 	slli	r2,r8,31
    79a0:	8c40004c 	andi	r17,r17,1
    79a4:	1c62b03a 	or	r17,r3,r17
    79a8:	4010d07a 	srli	r8,r8,1
    79ac:	1462b03a 	or	r17,r2,r17
    79b0:	003ef906 	br	7598 <__adddf3+0x13c>
    79b4:	1c7ff804 	addi	r17,r3,-32
    79b8:	19000820 	cmpeqi	r4,r3,32
    79bc:	4c44d83a 	srl	r2,r9,r17
    79c0:	2000041e 	bne	r4,zero,79d4 <__adddf3+0x578>
    79c4:	01001004 	movi	r4,64
    79c8:	20c7c83a 	sub	r3,r4,r3
    79cc:	48d2983a 	sll	r9,r9,r3
    79d0:	6a5ab03a 	or	r13,r13,r9
    79d4:	6822c03a 	cmpne	r17,r13,zero
    79d8:	88a2b03a 	or	r17,r17,r2
    79dc:	003ecd06 	br	7514 <__adddf3+0xb8>
    79e0:	5394b03a 	or	r10,r10,r14
    79e4:	5022c03a 	cmpne	r17,r10,zero
    79e8:	6c63c83a 	sub	r17,r13,r17
    79ec:	6c51803a 	cmpltu	r8,r13,r17
    79f0:	4a11c83a 	sub	r8,r9,r8
    79f4:	3821883a 	mov	r16,r7
    79f8:	1025883a 	mov	r18,r2
    79fc:	003ec806 	br	7520 <__adddf3+0xc4>
    7a00:	5388b03a 	or	r4,r10,r14
    7a04:	20008226 	beq	r4,zero,7c10 <__adddf3+0x7b4>
    7a08:	193fffc4 	addi	r4,r3,-1
    7a0c:	2000b026 	beq	r4,zero,7cd0 <__adddf3+0x874>
    7a10:	18c1ffd8 	cmpnei	r3,r3,2047
    7a14:	18007726 	beq	r3,zero,7bf4 <__adddf3+0x798>
    7a18:	2007883a 	mov	r3,r4
    7a1c:	003f8d06 	br	7854 <__adddf3+0x3f8>
    7a20:	00800804 	movi	r2,32
    7a24:	10c5c83a 	sub	r2,r2,r3
    7a28:	68c8d83a 	srl	r4,r13,r3
    7a2c:	48a2983a 	sll	r17,r9,r2
    7a30:	689a983a 	sll	r13,r13,r2
    7a34:	48c6d83a 	srl	r3,r9,r3
    7a38:	8922b03a 	or	r17,r17,r4
    7a3c:	681ac03a 	cmpne	r13,r13,zero
    7a40:	8b62b03a 	or	r17,r17,r13
    7a44:	50d5883a 	add	r10,r10,r3
    7a48:	003f5406 	br	779c <__adddf3+0x340>
    7a4c:	10c1ffe0 	cmpeqi	r3,r2,2047
    7a50:	183f5a1e 	bne	r3,zero,77bc <__adddf3+0x360>
    7a54:	7351883a 	add	r8,r14,r13
    7a58:	4387803a 	cmpltu	r3,r8,r14
    7a5c:	5255883a 	add	r10,r10,r9
    7a60:	50c7883a 	add	r3,r10,r3
    7a64:	401ad07a 	srli	r13,r8,1
    7a68:	182297fa 	slli	r17,r3,31
    7a6c:	1810d07a 	srli	r8,r3,1
    7a70:	1025883a 	mov	r18,r2
    7a74:	8b62b03a 	or	r17,r17,r13
    7a78:	003f3806 	br	775c <__adddf3+0x300>
    7a7c:	6ba3c83a 	sub	r17,r13,r14
    7a80:	4a93c83a 	sub	r9,r9,r10
    7a84:	6c51803a 	cmpltu	r8,r13,r17
    7a88:	4a27c83a 	sub	r19,r9,r8
    7a8c:	3821883a 	mov	r16,r7
    7a90:	003ea806 	br	7534 <__adddf3+0xd8>
    7a94:	480a977a 	slli	r5,r9,29
    7a98:	01080034 	movhi	r4,8192
    7a9c:	213fffc4 	addi	r4,r4,-1
    7aa0:	3104703a 	and	r2,r6,r4
    7aa4:	4814d0fa 	srli	r10,r9,3
    7aa8:	1144b03a 	or	r2,r2,r5
    7aac:	3821883a 	mov	r16,r7
    7ab0:	003f3106 	br	7778 <__adddf3+0x31c>
    7ab4:	28005d1e 	bne	r5,zero,7c2c <__adddf3+0x7d0>
    7ab8:	1000121e 	bne	r2,zero,7b04 <__adddf3+0x6a8>
    7abc:	0021883a 	mov	r16,zero
    7ac0:	4015883a 	mov	r10,r8
    7ac4:	00bfffc4 	movi	r2,-1
    7ac8:	003f4806 	br	77ec <__adddf3+0x390>
    7acc:	7363883a 	add	r17,r14,r13
    7ad0:	5255883a 	add	r10,r10,r9
    7ad4:	8b91803a 	cmpltu	r8,r17,r14
    7ad8:	5211883a 	add	r8,r10,r8
    7adc:	4080202c 	andhi	r2,r8,128
    7ae0:	103fa91e 	bne	r2,zero,7988 <__adddf3+0x52c>
    7ae4:	04800044 	movi	r18,1
    7ae8:	003f1c06 	br	775c <__adddf3+0x300>
    7aec:	7363c83a 	sub	r17,r14,r13
    7af0:	5255c83a 	sub	r10,r10,r9
    7af4:	7451803a 	cmpltu	r8,r14,r17
    7af8:	5211c83a 	sub	r8,r10,r8
    7afc:	04800044 	movi	r18,1
    7b00:	003e8706 	br	7520 <__adddf3+0xc4>
    7b04:	4806977a 	slli	r3,r9,29
    7b08:	00880034 	movhi	r2,8192
    7b0c:	10bfffc4 	addi	r2,r2,-1
    7b10:	3084703a 	and	r2,r6,r2
    7b14:	4814d0fa 	srli	r10,r9,3
    7b18:	10c4b03a 	or	r2,r2,r3
    7b1c:	3821883a 	mov	r16,r7
    7b20:	003f3006 	br	77e4 <__adddf3+0x388>
    7b24:	500a977a 	slli	r5,r10,29
    7b28:	00880034 	movhi	r2,8192
    7b2c:	10bfffc4 	addi	r2,r2,-1
    7b30:	2084703a 	and	r2,r4,r2
    7b34:	5014d0fa 	srli	r10,r10,3
    7b38:	1144b03a 	or	r2,r2,r5
    7b3c:	003f1006 	br	7780 <__adddf3+0x324>
    7b40:	5394b03a 	or	r10,r10,r14
    7b44:	5022c03a 	cmpne	r17,r10,zero
    7b48:	003f5006 	br	788c <__adddf3+0x430>
    7b4c:	1c7ff804 	addi	r17,r3,-32
    7b50:	19400820 	cmpeqi	r5,r3,32
    7b54:	5448d83a 	srl	r4,r10,r17
    7b58:	2800041e 	bne	r5,zero,7b6c <__adddf3+0x710>
    7b5c:	01401004 	movi	r5,64
    7b60:	28c7c83a 	sub	r3,r5,r3
    7b64:	50d4983a 	sll	r10,r10,r3
    7b68:	729cb03a 	or	r14,r14,r10
    7b6c:	7022c03a 	cmpne	r17,r14,zero
    7b70:	8922b03a 	or	r17,r17,r4
    7b74:	003f9c06 	br	79e8 <__adddf3+0x58c>
    7b78:	10005a1e 	bne	r2,zero,7ce4 <__adddf3+0x888>
    7b7c:	4804977a 	slli	r2,r9,29
    7b80:	00c80034 	movhi	r3,8192
    7b84:	18ffffc4 	addi	r3,r3,-1
    7b88:	30cc703a 	and	r6,r6,r3
    7b8c:	4814d0fa 	srli	r10,r9,3
    7b90:	1184b03a 	or	r2,r2,r6
    7b94:	003f1306 	br	77e4 <__adddf3+0x388>
    7b98:	6ba3c83a 	sub	r17,r13,r14
    7b9c:	4a95c83a 	sub	r10,r9,r10
    7ba0:	6c51803a 	cmpltu	r8,r13,r17
    7ba4:	5211c83a 	sub	r8,r10,r8
    7ba8:	3821883a 	mov	r16,r7
    7bac:	04800044 	movi	r18,1
    7bb0:	003e5b06 	br	7520 <__adddf3+0xc4>
    7bb4:	103f7126 	beq	r2,zero,797c <__adddf3+0x520>
    7bb8:	4808977a 	slli	r4,r9,29
    7bbc:	00880034 	movhi	r2,8192
    7bc0:	10bfffc4 	addi	r2,r2,-1
    7bc4:	3084703a 	and	r2,r6,r2
    7bc8:	4814d0fa 	srli	r10,r9,3
    7bcc:	1104b03a 	or	r2,r2,r4
    7bd0:	3821883a 	mov	r16,r7
    7bd4:	003eea06 	br	7780 <__adddf3+0x324>
    7bd8:	5006977a 	slli	r3,r10,29
    7bdc:	00880034 	movhi	r2,8192
    7be0:	10bfffc4 	addi	r2,r2,-1
    7be4:	2084703a 	and	r2,r4,r2
    7be8:	5014d0fa 	srli	r10,r10,3
    7bec:	10c4b03a 	or	r2,r2,r3
    7bf0:	003efc06 	br	77e4 <__adddf3+0x388>
    7bf4:	4806977a 	slli	r3,r9,29
    7bf8:	00880034 	movhi	r2,8192
    7bfc:	10bfffc4 	addi	r2,r2,-1
    7c00:	3084703a 	and	r2,r6,r2
    7c04:	4814d0fa 	srli	r10,r9,3
    7c08:	10c4b03a 	or	r2,r2,r3
    7c0c:	003ef506 	br	77e4 <__adddf3+0x388>
    7c10:	4808977a 	slli	r4,r9,29
    7c14:	00880034 	movhi	r2,8192
    7c18:	10bfffc4 	addi	r2,r2,-1
    7c1c:	3084703a 	and	r2,r6,r2
    7c20:	4814d0fa 	srli	r10,r9,3
    7c24:	1104b03a 	or	r2,r2,r4
    7c28:	003ed306 	br	7778 <__adddf3+0x31c>
    7c2c:	500a977a 	slli	r5,r10,29
    7c30:	5014d0fa 	srli	r10,r10,3
    7c34:	10001626 	beq	r2,zero,7c90 <__adddf3+0x834>
    7c38:	00c80034 	movhi	r3,8192
    7c3c:	18ffffc4 	addi	r3,r3,-1
    7c40:	20c4703a 	and	r2,r4,r3
    7c44:	5100022c 	andhi	r4,r10,8
    7c48:	1144b03a 	or	r2,r2,r5
    7c4c:	203ee526 	beq	r4,zero,77e4 <__adddf3+0x388>
    7c50:	4808d0fa 	srli	r4,r9,3
    7c54:	2140022c 	andhi	r5,r4,8
    7c58:	283ee21e 	bne	r5,zero,77e4 <__adddf3+0x388>
    7c5c:	4812977a 	slli	r9,r9,29
    7c60:	30c4703a 	and	r2,r6,r3
    7c64:	3821883a 	mov	r16,r7
    7c68:	1244b03a 	or	r2,r2,r9
    7c6c:	2015883a 	mov	r10,r4
    7c70:	003edc06 	br	77e4 <__adddf3+0x388>
    7c74:	4804977a 	slli	r2,r9,29
    7c78:	01080034 	movhi	r4,8192
    7c7c:	213fffc4 	addi	r4,r4,-1
    7c80:	310c703a 	and	r6,r6,r4
    7c84:	4814d0fa 	srli	r10,r9,3
    7c88:	1184b03a 	or	r2,r2,r6
    7c8c:	003ebc06 	br	7780 <__adddf3+0x324>
    7c90:	00880034 	movhi	r2,8192
    7c94:	10bfffc4 	addi	r2,r2,-1
    7c98:	2084703a 	and	r2,r4,r2
    7c9c:	1144b03a 	or	r2,r2,r5
    7ca0:	003ed006 	br	77e4 <__adddf3+0x388>
    7ca4:	193ff804 	addi	r4,r3,-32
    7ca8:	19400820 	cmpeqi	r5,r3,32
    7cac:	5108d83a 	srl	r4,r10,r4
    7cb0:	2800041e 	bne	r5,zero,7cc4 <__adddf3+0x868>
    7cb4:	01401004 	movi	r5,64
    7cb8:	28c7c83a 	sub	r3,r5,r3
    7cbc:	50d4983a 	sll	r10,r10,r3
    7cc0:	729cb03a 	or	r14,r14,r10
    7cc4:	7022c03a 	cmpne	r17,r14,zero
    7cc8:	8922b03a 	or	r17,r17,r4
    7ccc:	003eef06 	br	788c <__adddf3+0x430>
    7cd0:	7363883a 	add	r17,r14,r13
    7cd4:	5255883a 	add	r10,r10,r9
    7cd8:	8b51803a 	cmpltu	r8,r17,r13
    7cdc:	5211883a 	add	r8,r10,r8
    7ce0:	003f7e06 	br	7adc <__adddf3+0x680>
    7ce4:	4b50b03a 	or	r8,r9,r13
    7ce8:	500a977a 	slli	r5,r10,29
    7cec:	5014d0fa 	srli	r10,r10,3
    7cf0:	403fe726 	beq	r8,zero,7c90 <__adddf3+0x834>
    7cf4:	00c80034 	movhi	r3,8192
    7cf8:	18ffffc4 	addi	r3,r3,-1
    7cfc:	20c4703a 	and	r2,r4,r3
    7d00:	5100022c 	andhi	r4,r10,8
    7d04:	1144b03a 	or	r2,r2,r5
    7d08:	203eb626 	beq	r4,zero,77e4 <__adddf3+0x388>
    7d0c:	4808d0fa 	srli	r4,r9,3
    7d10:	2140022c 	andhi	r5,r4,8
    7d14:	283eb31e 	bne	r5,zero,77e4 <__adddf3+0x388>
    7d18:	4804977a 	slli	r2,r9,29
    7d1c:	30cc703a 	and	r6,r6,r3
    7d20:	3821883a 	mov	r16,r7
    7d24:	3084b03a 	or	r2,r6,r2
    7d28:	2015883a 	mov	r10,r4
    7d2c:	003ead06 	br	77e4 <__adddf3+0x388>
    7d30:	8a04b03a 	or	r2,r17,r8
    7d34:	103f1126 	beq	r2,zero,797c <__adddf3+0x520>
    7d38:	003e8806 	br	775c <__adddf3+0x300>
    7d3c:	0005883a 	mov	r2,zero
    7d40:	00c1ffc4 	movi	r3,2047
    7d44:	0011883a 	mov	r8,zero
    7d48:	003e2a06 	br	75f4 <__adddf3+0x198>

00007d4c <__divdf3>:
    7d4c:	2810d53a 	srli	r8,r5,20
    7d50:	defff004 	addi	sp,sp,-64
    7d54:	dc000615 	stw	r16,24(sp)
    7d58:	04000434 	movhi	r16,16
    7d5c:	df000e15 	stw	fp,56(sp)
    7d60:	ddc00d15 	stw	r23,52(sp)
    7d64:	dd800c15 	stw	r22,48(sp)
    7d68:	dd000a15 	stw	r20,40(sp)
    7d6c:	843fffc4 	addi	r16,r16,-1
    7d70:	dfc00f15 	stw	ra,60(sp)
    7d74:	dd400b15 	stw	r21,44(sp)
    7d78:	dcc00915 	stw	r19,36(sp)
    7d7c:	dc800815 	stw	r18,32(sp)
    7d80:	dc400715 	stw	r17,28(sp)
    7d84:	4201ffcc 	andi	r8,r8,2047
    7d88:	282ed7fa 	srli	r23,r5,31
    7d8c:	3039883a 	mov	fp,r6
    7d90:	382d883a 	mov	r22,r7
    7d94:	2029883a 	mov	r20,r4
    7d98:	2c20703a 	and	r16,r5,r16
    7d9c:	40006826 	beq	r8,zero,7f40 <__divdf3+0x1f4>
    7da0:	4081ffe0 	cmpeqi	r2,r8,2047
    7da4:	1000791e 	bne	r2,zero,7f8c <__divdf3+0x240>
    7da8:	2026d77a 	srli	r19,r4,29
    7dac:	800a90fa 	slli	r5,r16,3
    7db0:	202890fa 	slli	r20,r4,3
    7db4:	44bf0044 	addi	r18,r8,-1023
    7db8:	994ab03a 	or	r5,r19,r5
    7dbc:	2cc02034 	orhi	r19,r5,128
    7dc0:	0021883a 	mov	r16,zero
    7dc4:	0023883a 	mov	r17,zero
    7dc8:	b010d53a 	srli	r8,r22,20
    7dcc:	00c00434 	movhi	r3,16
    7dd0:	18ffffc4 	addi	r3,r3,-1
    7dd4:	4201ffcc 	andi	r8,r8,2047
    7dd8:	b02ad7fa 	srli	r21,r22,31
    7ddc:	b0ec703a 	and	r22,r22,r3
    7de0:	40004626 	beq	r8,zero,7efc <__divdf3+0x1b0>
    7de4:	4081ffe0 	cmpeqi	r2,r8,2047
    7de8:	10006f1e 	bne	r2,zero,7fa8 <__divdf3+0x25c>
    7dec:	b00690fa 	slli	r3,r22,3
    7df0:	e004d77a 	srli	r2,fp,29
    7df4:	e01290fa 	slli	r9,fp,3
    7df8:	423f0044 	addi	r8,r8,-1023
    7dfc:	10c6b03a 	or	r3,r2,r3
    7e00:	1d802034 	orhi	r22,r3,128
    7e04:	9225c83a 	sub	r18,r18,r8
    7e08:	0007883a 	mov	r3,zero
    7e0c:	80800428 	cmpgeui	r2,r16,16
    7e10:	bd4ef03a 	xor	r7,r23,r21
    7e14:	1000a71e 	bne	r2,zero,80b4 <__divdf3+0x368>
    7e18:	800c90ba 	slli	r6,r16,2
    7e1c:	00800034 	movhi	r2,0
    7e20:	3085883a 	add	r2,r6,r2
    7e24:	109f8b17 	ldw	r2,32300(r2)
    7e28:	1000683a 	jmp	r2
    7e2c:	000080b4 	movhi	zero,514
    7e30:	00007ed8 	cmpnei	zero,zero,507
    7e34:	00007e88 	cmpgei	zero,zero,506
    7e38:	00007ee8 	cmpgeui	zero,zero,507
    7e3c:	00007e88 	cmpgei	zero,zero,506
    7e40:	00008058 	cmpnei	zero,zero,513
    7e44:	00007e88 	cmpgei	zero,zero,506
    7e48:	00007ee8 	cmpgeui	zero,zero,507
    7e4c:	00007ed8 	cmpnei	zero,zero,507
    7e50:	00007ed8 	cmpnei	zero,zero,507
    7e54:	00008058 	cmpnei	zero,zero,513
    7e58:	00007ee8 	cmpgeui	zero,zero,507
    7e5c:	00007e6c 	andhi	zero,zero,505
    7e60:	00007e6c 	andhi	zero,zero,505
    7e64:	00007e6c 	andhi	zero,zero,505
    7e68:	00008070 	cmpltui	zero,zero,513
    7e6c:	b80f883a 	mov	r7,r23
    7e70:	888000a0 	cmpeqi	r2,r17,2
    7e74:	1000181e 	bne	r2,zero,7ed8 <__divdf3+0x18c>
    7e78:	888000e0 	cmpeqi	r2,r17,3
    7e7c:	1001f61e 	bne	r2,zero,8658 <__divdf3+0x90c>
    7e80:	88800060 	cmpeqi	r2,r17,1
    7e84:	10006126 	beq	r2,zero,800c <__divdf3+0x2c0>
    7e88:	0007883a 	mov	r3,zero
    7e8c:	000b883a 	mov	r5,zero
    7e90:	0029883a 	mov	r20,zero
    7e94:	1806953a 	slli	r3,r3,20
    7e98:	380e97fa 	slli	r7,r7,31
    7e9c:	a005883a 	mov	r2,r20
    7ea0:	1946b03a 	or	r3,r3,r5
    7ea4:	19c6b03a 	or	r3,r3,r7
    7ea8:	dfc00f17 	ldw	ra,60(sp)
    7eac:	df000e17 	ldw	fp,56(sp)
    7eb0:	ddc00d17 	ldw	r23,52(sp)
    7eb4:	dd800c17 	ldw	r22,48(sp)
    7eb8:	dd400b17 	ldw	r21,44(sp)
    7ebc:	dd000a17 	ldw	r20,40(sp)
    7ec0:	dcc00917 	ldw	r19,36(sp)
    7ec4:	dc800817 	ldw	r18,32(sp)
    7ec8:	dc400717 	ldw	r17,28(sp)
    7ecc:	dc000617 	ldw	r16,24(sp)
    7ed0:	dec01004 	addi	sp,sp,64
    7ed4:	f800283a 	ret
    7ed8:	00c1ffc4 	movi	r3,2047
    7edc:	000b883a 	mov	r5,zero
    7ee0:	0029883a 	mov	r20,zero
    7ee4:	003feb06 	br	7e94 <__divdf3+0x148>
    7ee8:	a80f883a 	mov	r7,r21
    7eec:	b027883a 	mov	r19,r22
    7ef0:	4829883a 	mov	r20,r9
    7ef4:	1823883a 	mov	r17,r3
    7ef8:	003fdd06 	br	7e70 <__divdf3+0x124>
    7efc:	b712b03a 	or	r9,r22,fp
    7f00:	48003e26 	beq	r9,zero,7ffc <__divdf3+0x2b0>
    7f04:	b0017726 	beq	r22,zero,84e4 <__divdf3+0x798>
    7f08:	b009883a 	mov	r4,r22
    7f0c:	0009bf00 	call	9bf0 <__clzsi2>
    7f10:	117ffd44 	addi	r5,r2,-11
    7f14:	01000744 	movi	r4,29
    7f18:	127ffe04 	addi	r9,r2,-8
    7f1c:	2149c83a 	sub	r4,r4,r5
    7f20:	b246983a 	sll	r3,r22,r9
    7f24:	e108d83a 	srl	r4,fp,r4
    7f28:	e252983a 	sll	r9,fp,r9
    7f2c:	20ecb03a 	or	r22,r4,r3
    7f30:	1491883a 	add	r8,r2,r18
    7f34:	4480fcc4 	addi	r18,r8,1011
    7f38:	0007883a 	mov	r3,zero
    7f3c:	003fb306 	br	7e0c <__divdf3+0xc0>
    7f40:	8126b03a 	or	r19,r16,r4
    7f44:	2023883a 	mov	r17,r4
    7f48:	98002726 	beq	r19,zero,7fe8 <__divdf3+0x29c>
    7f4c:	80017026 	beq	r16,zero,8510 <__divdf3+0x7c4>
    7f50:	8009883a 	mov	r4,r16
    7f54:	0009bf00 	call	9bf0 <__clzsi2>
    7f58:	113ffd44 	addi	r4,r2,-11
    7f5c:	00c00744 	movi	r3,29
    7f60:	14fffe04 	addi	r19,r2,-8
    7f64:	1907c83a 	sub	r3,r3,r4
    7f68:	84ca983a 	sll	r5,r16,r19
    7f6c:	88c6d83a 	srl	r3,r17,r3
    7f70:	8ce8983a 	sll	r20,r17,r19
    7f74:	1966b03a 	or	r19,r3,r5
    7f78:	023f0344 	movi	r8,-1011
    7f7c:	40a5c83a 	sub	r18,r8,r2
    7f80:	0021883a 	mov	r16,zero
    7f84:	0023883a 	mov	r17,zero
    7f88:	003f8f06 	br	7dc8 <__divdf3+0x7c>
    7f8c:	8126b03a 	or	r19,r16,r4
    7f90:	9800101e 	bne	r19,zero,7fd4 <__divdf3+0x288>
    7f94:	0029883a 	mov	r20,zero
    7f98:	04000204 	movi	r16,8
    7f9c:	0481ffc4 	movi	r18,2047
    7fa0:	04400084 	movi	r17,2
    7fa4:	003f8806 	br	7dc8 <__divdf3+0x7c>
    7fa8:	b712b03a 	or	r9,r22,fp
    7fac:	94be0044 	addi	r18,r18,-2047
    7fb0:	4800041e 	bne	r9,zero,7fc4 <__divdf3+0x278>
    7fb4:	84000094 	ori	r16,r16,2
    7fb8:	002d883a 	mov	r22,zero
    7fbc:	00c00084 	movi	r3,2
    7fc0:	003f9206 	br	7e0c <__divdf3+0xc0>
    7fc4:	840000d4 	ori	r16,r16,3
    7fc8:	e013883a 	mov	r9,fp
    7fcc:	00c000c4 	movi	r3,3
    7fd0:	003f8e06 	br	7e0c <__divdf3+0xc0>
    7fd4:	8027883a 	mov	r19,r16
    7fd8:	0481ffc4 	movi	r18,2047
    7fdc:	04000304 	movi	r16,12
    7fe0:	044000c4 	movi	r17,3
    7fe4:	003f7806 	br	7dc8 <__divdf3+0x7c>
    7fe8:	0029883a 	mov	r20,zero
    7fec:	04000104 	movi	r16,4
    7ff0:	0025883a 	mov	r18,zero
    7ff4:	04400044 	movi	r17,1
    7ff8:	003f7306 	br	7dc8 <__divdf3+0x7c>
    7ffc:	84000054 	ori	r16,r16,1
    8000:	002d883a 	mov	r22,zero
    8004:	00c00044 	movi	r3,1
    8008:	003f8006 	br	7e0c <__divdf3+0xc0>
    800c:	9440ffc4 	addi	r17,r18,1023
    8010:	0441050e 	bge	zero,r17,8428 <__divdf3+0x6dc>
    8014:	a08001cc 	andi	r2,r20,7
    8018:	10016c1e 	bne	r2,zero,85cc <__divdf3+0x880>
    801c:	a008d0fa 	srli	r4,r20,3
    8020:	9880402c 	andhi	r2,r19,256
    8024:	10000426 	beq	r2,zero,8038 <__divdf3+0x2ec>
    8028:	00bfc034 	movhi	r2,65280
    802c:	10bfffc4 	addi	r2,r2,-1
    8030:	98a6703a 	and	r19,r19,r2
    8034:	94410004 	addi	r17,r18,1024
    8038:	8881ffc8 	cmpgei	r2,r17,2047
    803c:	103fa61e 	bne	r2,zero,7ed8 <__divdf3+0x18c>
    8040:	9828977a 	slli	r20,r19,29
    8044:	980a927a 	slli	r5,r19,9
    8048:	88c1ffcc 	andi	r3,r17,2047
    804c:	a128b03a 	or	r20,r20,r4
    8050:	280ad33a 	srli	r5,r5,12
    8054:	003f8f06 	br	7e94 <__divdf3+0x148>
    8058:	01400434 	movhi	r5,16
    805c:	000f883a 	mov	r7,zero
    8060:	297fffc4 	addi	r5,r5,-1
    8064:	053fffc4 	movi	r20,-1
    8068:	00c1ffc4 	movi	r3,2047
    806c:	003f8906 	br	7e94 <__divdf3+0x148>
    8070:	9880022c 	andhi	r2,r19,8
    8074:	10000926 	beq	r2,zero,809c <__divdf3+0x350>
    8078:	b080022c 	andhi	r2,r22,8
    807c:	1000071e 	bne	r2,zero,809c <__divdf3+0x350>
    8080:	00800434 	movhi	r2,16
    8084:	b1400234 	orhi	r5,r22,8
    8088:	10bfffc4 	addi	r2,r2,-1
    808c:	288a703a 	and	r5,r5,r2
    8090:	a80f883a 	mov	r7,r21
    8094:	4829883a 	mov	r20,r9
    8098:	003ff306 	br	8068 <__divdf3+0x31c>
    809c:	00800434 	movhi	r2,16
    80a0:	99400234 	orhi	r5,r19,8
    80a4:	10bfffc4 	addi	r2,r2,-1
    80a8:	288a703a 	and	r5,r5,r2
    80ac:	b80f883a 	mov	r7,r23
    80b0:	003fed06 	br	8068 <__divdf3+0x31c>
    80b4:	b4c10536 	bltu	r22,r19,84cc <__divdf3+0x780>
    80b8:	b4c10326 	beq	r22,r19,84c8 <__divdf3+0x77c>
    80bc:	94bfffc4 	addi	r18,r18,-1
    80c0:	a039883a 	mov	fp,r20
    80c4:	9821883a 	mov	r16,r19
    80c8:	0023883a 	mov	r17,zero
    80cc:	b006923a 	slli	r3,r22,8
    80d0:	482cd63a 	srli	r22,r9,24
    80d4:	8009883a 	mov	r4,r16
    80d8:	182ed43a 	srli	r23,r3,16
    80dc:	b0ecb03a 	or	r22,r22,r3
    80e0:	d9c00015 	stw	r7,0(sp)
    80e4:	b80b883a 	mov	r5,r23
    80e8:	482a923a 	slli	r21,r9,8
    80ec:	b53fffcc 	andi	r20,r22,65535
    80f0:	0005dc80 	call	5dc8 <__udivsi3>
    80f4:	100b883a 	mov	r5,r2
    80f8:	a009883a 	mov	r4,r20
    80fc:	1027883a 	mov	r19,r2
    8100:	0005e880 	call	5e88 <__mulsi3>
    8104:	8009883a 	mov	r4,r16
    8108:	b80b883a 	mov	r5,r23
    810c:	1021883a 	mov	r16,r2
    8110:	0005e2c0 	call	5e2c <__umodsi3>
    8114:	1004943a 	slli	r2,r2,16
    8118:	e008d43a 	srli	r4,fp,16
    811c:	d9c00017 	ldw	r7,0(sp)
    8120:	2088b03a 	or	r4,r4,r2
    8124:	2400042e 	bgeu	r4,r16,8138 <__divdf3+0x3ec>
    8128:	2589883a 	add	r4,r4,r22
    812c:	98bfffc4 	addi	r2,r19,-1
    8130:	2581082e 	bgeu	r4,r22,8554 <__divdf3+0x808>
    8134:	1027883a 	mov	r19,r2
    8138:	2421c83a 	sub	r16,r4,r16
    813c:	b80b883a 	mov	r5,r23
    8140:	8009883a 	mov	r4,r16
    8144:	d9c00215 	stw	r7,8(sp)
    8148:	0005dc80 	call	5dc8 <__udivsi3>
    814c:	100b883a 	mov	r5,r2
    8150:	a009883a 	mov	r4,r20
    8154:	d8800115 	stw	r2,4(sp)
    8158:	0005e880 	call	5e88 <__mulsi3>
    815c:	b80b883a 	mov	r5,r23
    8160:	8009883a 	mov	r4,r16
    8164:	d8800015 	stw	r2,0(sp)
    8168:	0005e2c0 	call	5e2c <__umodsi3>
    816c:	100c943a 	slli	r6,r2,16
    8170:	d8c00017 	ldw	r3,0(sp)
    8174:	e73fffcc 	andi	fp,fp,65535
    8178:	e18cb03a 	or	r6,fp,r6
    817c:	da000117 	ldw	r8,4(sp)
    8180:	d9c00217 	ldw	r7,8(sp)
    8184:	30c0042e 	bgeu	r6,r3,8198 <__divdf3+0x44c>
    8188:	358d883a 	add	r6,r6,r22
    818c:	40bfffc4 	addi	r2,r8,-1
    8190:	3580ec2e 	bgeu	r6,r22,8544 <__divdf3+0x7f8>
    8194:	1011883a 	mov	r8,r2
    8198:	9826943a 	slli	r19,r19,16
    819c:	af3fffcc 	andi	fp,r21,65535
    81a0:	30c7c83a 	sub	r3,r6,r3
    81a4:	9a26b03a 	or	r19,r19,r8
    81a8:	9810d43a 	srli	r8,r19,16
    81ac:	9abfffcc 	andi	r10,r19,65535
    81b0:	5009883a 	mov	r4,r10
    81b4:	e00b883a 	mov	r5,fp
    81b8:	d9c00515 	stw	r7,20(sp)
    81bc:	d8c00315 	stw	r3,12(sp)
    81c0:	da800415 	stw	r10,16(sp)
    81c4:	da000015 	stw	r8,0(sp)
    81c8:	0005e880 	call	5e88 <__mulsi3>
    81cc:	da000017 	ldw	r8,0(sp)
    81d0:	e00b883a 	mov	r5,fp
    81d4:	d8800215 	stw	r2,8(sp)
    81d8:	4009883a 	mov	r4,r8
    81dc:	0005e880 	call	5e88 <__mulsi3>
    81e0:	da000017 	ldw	r8,0(sp)
    81e4:	a820d43a 	srli	r16,r21,16
    81e8:	d8800115 	stw	r2,4(sp)
    81ec:	4009883a 	mov	r4,r8
    81f0:	800b883a 	mov	r5,r16
    81f4:	0005e880 	call	5e88 <__mulsi3>
    81f8:	da800417 	ldw	r10,16(sp)
    81fc:	8009883a 	mov	r4,r16
    8200:	d8800015 	stw	r2,0(sp)
    8204:	500b883a 	mov	r5,r10
    8208:	0005e880 	call	5e88 <__mulsi3>
    820c:	d9800217 	ldw	r6,8(sp)
    8210:	da000117 	ldw	r8,4(sp)
    8214:	da400017 	ldw	r9,0(sp)
    8218:	3008d43a 	srli	r4,r6,16
    821c:	1205883a 	add	r2,r2,r8
    8220:	d8c00317 	ldw	r3,12(sp)
    8224:	2089883a 	add	r4,r4,r2
    8228:	d9c00517 	ldw	r7,20(sp)
    822c:	2200022e 	bgeu	r4,r8,8238 <__divdf3+0x4ec>
    8230:	00800074 	movhi	r2,1
    8234:	4893883a 	add	r9,r9,r2
    8238:	200ad43a 	srli	r5,r4,16
    823c:	2008943a 	slli	r4,r4,16
    8240:	31bfffcc 	andi	r6,r6,65535
    8244:	2a4b883a 	add	r5,r5,r9
    8248:	218d883a 	add	r6,r4,r6
    824c:	19409436 	bltu	r3,r5,84a0 <__divdf3+0x754>
    8250:	19409226 	beq	r3,r5,849c <__divdf3+0x750>
    8254:	898dc83a 	sub	r6,r17,r6
    8258:	89a3803a 	cmpltu	r17,r17,r6
    825c:	1947c83a 	sub	r3,r3,r5
    8260:	1c47c83a 	sub	r3,r3,r17
    8264:	9440ffc4 	addi	r17,r18,1023
    8268:	b0c0d326 	beq	r22,r3,85b8 <__divdf3+0x86c>
    826c:	1809883a 	mov	r4,r3
    8270:	b80b883a 	mov	r5,r23
    8274:	d9800315 	stw	r6,12(sp)
    8278:	d9c00215 	stw	r7,8(sp)
    827c:	d8c00015 	stw	r3,0(sp)
    8280:	0005dc80 	call	5dc8 <__udivsi3>
    8284:	100b883a 	mov	r5,r2
    8288:	a009883a 	mov	r4,r20
    828c:	d8800115 	stw	r2,4(sp)
    8290:	0005e880 	call	5e88 <__mulsi3>
    8294:	d8c00017 	ldw	r3,0(sp)
    8298:	b80b883a 	mov	r5,r23
    829c:	d8800015 	stw	r2,0(sp)
    82a0:	1809883a 	mov	r4,r3
    82a4:	0005e2c0 	call	5e2c <__umodsi3>
    82a8:	d9800317 	ldw	r6,12(sp)
    82ac:	1006943a 	slli	r3,r2,16
    82b0:	da400017 	ldw	r9,0(sp)
    82b4:	3008d43a 	srli	r4,r6,16
    82b8:	da000117 	ldw	r8,4(sp)
    82bc:	d9c00217 	ldw	r7,8(sp)
    82c0:	20c6b03a 	or	r3,r4,r3
    82c4:	1a40062e 	bgeu	r3,r9,82e0 <__divdf3+0x594>
    82c8:	1d87883a 	add	r3,r3,r22
    82cc:	40bfffc4 	addi	r2,r8,-1
    82d0:	1d80c836 	bltu	r3,r22,85f4 <__divdf3+0x8a8>
    82d4:	1a40c72e 	bgeu	r3,r9,85f4 <__divdf3+0x8a8>
    82d8:	423fff84 	addi	r8,r8,-2
    82dc:	1d87883a 	add	r3,r3,r22
    82e0:	1a47c83a 	sub	r3,r3,r9
    82e4:	1809883a 	mov	r4,r3
    82e8:	b80b883a 	mov	r5,r23
    82ec:	d9800415 	stw	r6,16(sp)
    82f0:	d9c00315 	stw	r7,12(sp)
    82f4:	da000215 	stw	r8,8(sp)
    82f8:	d8c00115 	stw	r3,4(sp)
    82fc:	0005dc80 	call	5dc8 <__udivsi3>
    8300:	100b883a 	mov	r5,r2
    8304:	a009883a 	mov	r4,r20
    8308:	d8800015 	stw	r2,0(sp)
    830c:	0005e880 	call	5e88 <__mulsi3>
    8310:	d8c00117 	ldw	r3,4(sp)
    8314:	b80b883a 	mov	r5,r23
    8318:	102f883a 	mov	r23,r2
    831c:	1809883a 	mov	r4,r3
    8320:	0005e2c0 	call	5e2c <__umodsi3>
    8324:	d9800417 	ldw	r6,16(sp)
    8328:	1004943a 	slli	r2,r2,16
    832c:	da400017 	ldw	r9,0(sp)
    8330:	31bfffcc 	andi	r6,r6,65535
    8334:	308cb03a 	or	r6,r6,r2
    8338:	da000217 	ldw	r8,8(sp)
    833c:	d9c00317 	ldw	r7,12(sp)
    8340:	35c0062e 	bgeu	r6,r23,835c <__divdf3+0x610>
    8344:	358d883a 	add	r6,r6,r22
    8348:	48bfffc4 	addi	r2,r9,-1
    834c:	3580a736 	bltu	r6,r22,85ec <__divdf3+0x8a0>
    8350:	35c0a62e 	bgeu	r6,r23,85ec <__divdf3+0x8a0>
    8354:	4a7fff84 	addi	r9,r9,-2
    8358:	358d883a 	add	r6,r6,r22
    835c:	4028943a 	slli	r20,r8,16
    8360:	35d5c83a 	sub	r10,r6,r23
    8364:	e009883a 	mov	r4,fp
    8368:	a268b03a 	or	r20,r20,r9
    836c:	a23fffcc 	andi	r8,r20,65535
    8370:	a02ed43a 	srli	r23,r20,16
    8374:	400b883a 	mov	r5,r8
    8378:	d9c00315 	stw	r7,12(sp)
    837c:	da800215 	stw	r10,8(sp)
    8380:	da000115 	stw	r8,4(sp)
    8384:	0005e880 	call	5e88 <__mulsi3>
    8388:	e00b883a 	mov	r5,fp
    838c:	b809883a 	mov	r4,r23
    8390:	1039883a 	mov	fp,r2
    8394:	0005e880 	call	5e88 <__mulsi3>
    8398:	8009883a 	mov	r4,r16
    839c:	b80b883a 	mov	r5,r23
    83a0:	d8800015 	stw	r2,0(sp)
    83a4:	0005e880 	call	5e88 <__mulsi3>
    83a8:	da000117 	ldw	r8,4(sp)
    83ac:	8009883a 	mov	r4,r16
    83b0:	1021883a 	mov	r16,r2
    83b4:	400b883a 	mov	r5,r8
    83b8:	0005e880 	call	5e88 <__mulsi3>
    83bc:	d9800017 	ldw	r6,0(sp)
    83c0:	e006d43a 	srli	r3,fp,16
    83c4:	da800217 	ldw	r10,8(sp)
    83c8:	1185883a 	add	r2,r2,r6
    83cc:	1887883a 	add	r3,r3,r2
    83d0:	d9c00317 	ldw	r7,12(sp)
    83d4:	1980022e 	bgeu	r3,r6,83e0 <__divdf3+0x694>
    83d8:	00800074 	movhi	r2,1
    83dc:	80a1883a 	add	r16,r16,r2
    83e0:	1808d43a 	srli	r4,r3,16
    83e4:	1806943a 	slli	r3,r3,16
    83e8:	e73fffcc 	andi	fp,fp,65535
    83ec:	2409883a 	add	r4,r4,r16
    83f0:	1f07883a 	add	r3,r3,fp
    83f4:	51000436 	bltu	r10,r4,8408 <__divdf3+0x6bc>
    83f8:	51000226 	beq	r10,r4,8404 <__divdf3+0x6b8>
    83fc:	a5000054 	ori	r20,r20,1
    8400:	003f0306 	br	8010 <__divdf3+0x2c4>
    8404:	183f0226 	beq	r3,zero,8010 <__divdf3+0x2c4>
    8408:	b28d883a 	add	r6,r22,r10
    840c:	a0bfffc4 	addi	r2,r20,-1
    8410:	35806536 	bltu	r6,r22,85a8 <__divdf3+0x85c>
    8414:	31008036 	bltu	r6,r4,8618 <__divdf3+0x8cc>
    8418:	31009426 	beq	r6,r4,866c <__divdf3+0x920>
    841c:	1029883a 	mov	r20,r2
    8420:	003ff606 	br	83fc <__divdf3+0x6b0>
    8424:	053fffc4 	movi	r20,-1
    8428:	01400044 	movi	r5,1
    842c:	2c4bc83a 	sub	r5,r5,r17
    8430:	28800e48 	cmpgei	r2,r5,57
    8434:	103e941e 	bne	r2,zero,7e88 <__divdf3+0x13c>
    8438:	28800808 	cmpgei	r2,r5,32
    843c:	1000491e 	bne	r2,zero,8564 <__divdf3+0x818>
    8440:	92010784 	addi	r8,r18,1054
    8444:	9a04983a 	sll	r2,r19,r8
    8448:	a146d83a 	srl	r3,r20,r5
    844c:	a210983a 	sll	r8,r20,r8
    8450:	994ad83a 	srl	r5,r19,r5
    8454:	10e8b03a 	or	r20,r2,r3
    8458:	4010c03a 	cmpne	r8,r8,zero
    845c:	a228b03a 	or	r20,r20,r8
    8460:	a08001cc 	andi	r2,r20,7
    8464:	10000726 	beq	r2,zero,8484 <__divdf3+0x738>
    8468:	a08003cc 	andi	r2,r20,15
    846c:	10800120 	cmpeqi	r2,r2,4
    8470:	1000041e 	bne	r2,zero,8484 <__divdf3+0x738>
    8474:	a0800104 	addi	r2,r20,4
    8478:	1529803a 	cmpltu	r20,r2,r20
    847c:	2d0b883a 	add	r5,r5,r20
    8480:	1029883a 	mov	r20,r2
    8484:	2880202c 	andhi	r2,r5,128
    8488:	10006f26 	beq	r2,zero,8648 <__divdf3+0x8fc>
    848c:	00c00044 	movi	r3,1
    8490:	000b883a 	mov	r5,zero
    8494:	0029883a 	mov	r20,zero
    8498:	003e7e06 	br	7e94 <__divdf3+0x148>
    849c:	89bf6d2e 	bgeu	r17,r6,8254 <__divdf3+0x508>
    84a0:	8d63883a 	add	r17,r17,r21
    84a4:	8d45803a 	cmpltu	r2,r17,r21
    84a8:	1585883a 	add	r2,r2,r22
    84ac:	1887883a 	add	r3,r3,r2
    84b0:	98bfffc4 	addi	r2,r19,-1
    84b4:	b0c0202e 	bgeu	r22,r3,8538 <__divdf3+0x7ec>
    84b8:	19405136 	bltu	r3,r5,8600 <__divdf3+0x8b4>
    84bc:	28c04f26 	beq	r5,r3,85fc <__divdf3+0x8b0>
    84c0:	1027883a 	mov	r19,r2
    84c4:	003f6306 	br	8254 <__divdf3+0x508>
    84c8:	a27efc36 	bltu	r20,r9,80bc <__divdf3+0x370>
    84cc:	983897fa 	slli	fp,r19,31
    84d0:	a004d07a 	srli	r2,r20,1
    84d4:	9820d07a 	srli	r16,r19,1
    84d8:	a02297fa 	slli	r17,r20,31
    84dc:	e0b8b03a 	or	fp,fp,r2
    84e0:	003efa06 	br	80cc <__divdf3+0x380>
    84e4:	e009883a 	mov	r4,fp
    84e8:	0009bf00 	call	9bf0 <__clzsi2>
    84ec:	11400544 	addi	r5,r2,21
    84f0:	29000748 	cmpgei	r4,r5,29
    84f4:	1007883a 	mov	r3,r2
    84f8:	10800804 	addi	r2,r2,32
    84fc:	203e8526 	beq	r4,zero,7f14 <__divdf3+0x1c8>
    8500:	18fffe04 	addi	r3,r3,-8
    8504:	e0ec983a 	sll	r22,fp,r3
    8508:	0013883a 	mov	r9,zero
    850c:	003e8806 	br	7f30 <__divdf3+0x1e4>
    8510:	0009bf00 	call	9bf0 <__clzsi2>
    8514:	11000544 	addi	r4,r2,21
    8518:	20c00748 	cmpgei	r3,r4,29
    851c:	100b883a 	mov	r5,r2
    8520:	10800804 	addi	r2,r2,32
    8524:	183e8d26 	beq	r3,zero,7f5c <__divdf3+0x210>
    8528:	297ffe04 	addi	r5,r5,-8
    852c:	a166983a 	sll	r19,r20,r5
    8530:	0029883a 	mov	r20,zero
    8534:	003e9006 	br	7f78 <__divdf3+0x22c>
    8538:	b0ffe11e 	bne	r22,r3,84c0 <__divdf3+0x774>
    853c:	8d7fe036 	bltu	r17,r21,84c0 <__divdf3+0x774>
    8540:	003fdd06 	br	84b8 <__divdf3+0x76c>
    8544:	30ff132e 	bgeu	r6,r3,8194 <__divdf3+0x448>
    8548:	423fff84 	addi	r8,r8,-2
    854c:	358d883a 	add	r6,r6,r22
    8550:	003f1106 	br	8198 <__divdf3+0x44c>
    8554:	243ef72e 	bgeu	r4,r16,8134 <__divdf3+0x3e8>
    8558:	9cffff84 	addi	r19,r19,-2
    855c:	2589883a 	add	r4,r4,r22
    8560:	003ef506 	br	8138 <__divdf3+0x3ec>
    8564:	00fff844 	movi	r3,-31
    8568:	1c47c83a 	sub	r3,r3,r17
    856c:	29400820 	cmpeqi	r5,r5,32
    8570:	98c6d83a 	srl	r3,r19,r3
    8574:	2800031e 	bne	r5,zero,8584 <__divdf3+0x838>
    8578:	91410f84 	addi	r5,r18,1086
    857c:	994a983a 	sll	r5,r19,r5
    8580:	a168b03a 	or	r20,r20,r5
    8584:	a028c03a 	cmpne	r20,r20,zero
    8588:	a0e8b03a 	or	r20,r20,r3
    858c:	a4c001cc 	andi	r19,r20,7
    8590:	9800291e 	bne	r19,zero,8638 <__divdf3+0x8ec>
    8594:	000b883a 	mov	r5,zero
    8598:	a028d0fa 	srli	r20,r20,3
    859c:	0007883a 	mov	r3,zero
    85a0:	a4e8b03a 	or	r20,r20,r19
    85a4:	003e3b06 	br	7e94 <__divdf3+0x148>
    85a8:	1029883a 	mov	r20,r2
    85ac:	313f931e 	bne	r6,r4,83fc <__divdf3+0x6b0>
    85b0:	1d7f921e 	bne	r3,r21,83fc <__divdf3+0x6b0>
    85b4:	003e9606 	br	8010 <__divdf3+0x2c4>
    85b8:	047f9a0e 	bge	zero,r17,8424 <__divdf3+0x6d8>
    85bc:	0009883a 	mov	r4,zero
    85c0:	05000044 	movi	r20,1
    85c4:	9d27883a 	add	r19,r19,r20
    85c8:	003e9506 	br	8020 <__divdf3+0x2d4>
    85cc:	a08003cc 	andi	r2,r20,15
    85d0:	10800118 	cmpnei	r2,r2,4
    85d4:	103e9126 	beq	r2,zero,801c <__divdf3+0x2d0>
    85d8:	a1000104 	addi	r4,r20,4
    85dc:	00bffec4 	movi	r2,-5
    85e0:	2008d0fa 	srli	r4,r4,3
    85e4:	1529803a 	cmpltu	r20,r2,r20
    85e8:	003ff606 	br	85c4 <__divdf3+0x878>
    85ec:	1013883a 	mov	r9,r2
    85f0:	003f5a06 	br	835c <__divdf3+0x610>
    85f4:	1011883a 	mov	r8,r2
    85f8:	003f3906 	br	82e0 <__divdf3+0x594>
    85fc:	89bfb02e 	bgeu	r17,r6,84c0 <__divdf3+0x774>
    8600:	8d63883a 	add	r17,r17,r21
    8604:	8d45803a 	cmpltu	r2,r17,r21
    8608:	1585883a 	add	r2,r2,r22
    860c:	9cffff84 	addi	r19,r19,-2
    8610:	1887883a 	add	r3,r3,r2
    8614:	003f0f06 	br	8254 <__divdf3+0x508>
    8618:	ad45883a 	add	r2,r21,r21
    861c:	156b803a 	cmpltu	r21,r2,r21
    8620:	adad883a 	add	r22,r21,r22
    8624:	358d883a 	add	r6,r6,r22
    8628:	a53fff84 	addi	r20,r20,-2
    862c:	102b883a 	mov	r21,r2
    8630:	313fdf26 	beq	r6,r4,85b0 <__divdf3+0x864>
    8634:	003f7106 	br	83fc <__divdf3+0x6b0>
    8638:	a08003cc 	andi	r2,r20,15
    863c:	10800118 	cmpnei	r2,r2,4
    8640:	000b883a 	mov	r5,zero
    8644:	103f8b1e 	bne	r2,zero,8474 <__divdf3+0x728>
    8648:	2804927a 	slli	r2,r5,9
    864c:	2826977a 	slli	r19,r5,29
    8650:	100ad33a 	srli	r5,r2,12
    8654:	003fd006 	br	8598 <__divdf3+0x84c>
    8658:	00800434 	movhi	r2,16
    865c:	99400234 	orhi	r5,r19,8
    8660:	10bfffc4 	addi	r2,r2,-1
    8664:	288a703a 	and	r5,r5,r2
    8668:	003e7f06 	br	8068 <__divdf3+0x31c>
    866c:	a8ffea36 	bltu	r21,r3,8618 <__divdf3+0x8cc>
    8670:	1029883a 	mov	r20,r2
    8674:	1d7f611e 	bne	r3,r21,83fc <__divdf3+0x6b0>
    8678:	003e6506 	br	8010 <__divdf3+0x2c4>

0000867c <__eqdf2>:
    867c:	2810d53a 	srli	r8,r5,20
    8680:	3806d53a 	srli	r3,r7,20
    8684:	00800434 	movhi	r2,16
    8688:	4201ffcc 	andi	r8,r8,2047
    868c:	10bfffc4 	addi	r2,r2,-1
    8690:	4241ffd8 	cmpnei	r9,r8,2047
    8694:	2814d7fa 	srli	r10,r5,31
    8698:	3816d7fa 	srli	r11,r7,31
    869c:	288a703a 	and	r5,r5,r2
    86a0:	388e703a 	and	r7,r7,r2
    86a4:	1881ffcc 	andi	r2,r3,2047
    86a8:	48000626 	beq	r9,zero,86c4 <__eqdf2+0x48>
    86ac:	10c1ffe0 	cmpeqi	r3,r2,2047
    86b0:	1800021e 	bne	r3,zero,86bc <__eqdf2+0x40>
    86b4:	4080011e 	bne	r8,r2,86bc <__eqdf2+0x40>
    86b8:	29c00826 	beq	r5,r7,86dc <__eqdf2+0x60>
    86bc:	00800044 	movi	r2,1
    86c0:	f800283a 	ret
    86c4:	2906b03a 	or	r3,r5,r4
    86c8:	183ffc1e 	bne	r3,zero,86bc <__eqdf2+0x40>
    86cc:	1081ffd8 	cmpnei	r2,r2,2047
    86d0:	103ffa1e 	bne	r2,zero,86bc <__eqdf2+0x40>
    86d4:	398eb03a 	or	r7,r7,r6
    86d8:	383ff81e 	bne	r7,zero,86bc <__eqdf2+0x40>
    86dc:	21bff71e 	bne	r4,r6,86bc <__eqdf2+0x40>
    86e0:	52c00426 	beq	r10,r11,86f4 <__eqdf2+0x78>
    86e4:	403ff51e 	bne	r8,zero,86bc <__eqdf2+0x40>
    86e8:	290ab03a 	or	r5,r5,r4
    86ec:	2804c03a 	cmpne	r2,r5,zero
    86f0:	f800283a 	ret
    86f4:	0005883a 	mov	r2,zero
    86f8:	f800283a 	ret

000086fc <__gedf2>:
    86fc:	2810d53a 	srli	r8,r5,20
    8700:	3812d53a 	srli	r9,r7,20
    8704:	00c00434 	movhi	r3,16
    8708:	4201ffcc 	andi	r8,r8,2047
    870c:	18ffffc4 	addi	r3,r3,-1
    8710:	4281ffd8 	cmpnei	r10,r8,2047
    8714:	2816d7fa 	srli	r11,r5,31
    8718:	3804d7fa 	srli	r2,r7,31
    871c:	28ca703a 	and	r5,r5,r3
    8720:	38ce703a 	and	r7,r7,r3
    8724:	48c1ffcc 	andi	r3,r9,2047
    8728:	50000a26 	beq	r10,zero,8754 <__gedf2+0x58>
    872c:	1a41ffd8 	cmpnei	r9,r3,2047
    8730:	48000c26 	beq	r9,zero,8764 <__gedf2+0x68>
    8734:	4000171e 	bne	r8,zero,8794 <__gedf2+0x98>
    8738:	2912b03a 	or	r9,r5,r4
    873c:	1800121e 	bne	r3,zero,8788 <__gedf2+0x8c>
    8740:	3994b03a 	or	r10,r7,r6
    8744:	5000101e 	bne	r10,zero,8788 <__gedf2+0x8c>
    8748:	48000a1e 	bne	r9,zero,8774 <__gedf2+0x78>
    874c:	0005883a 	mov	r2,zero
    8750:	f800283a 	ret
    8754:	2912b03a 	or	r9,r5,r4
    8758:	48001d1e 	bne	r9,zero,87d0 <__gedf2+0xd4>
    875c:	1a41ffe0 	cmpeqi	r9,r3,2047
    8760:	48000c26 	beq	r9,zero,8794 <__gedf2+0x98>
    8764:	3992b03a 	or	r9,r7,r6
    8768:	4800191e 	bne	r9,zero,87d0 <__gedf2+0xd4>
    876c:	40000526 	beq	r8,zero,8784 <__gedf2+0x88>
    8770:	58800c26 	beq	r11,r2,87a4 <__gedf2+0xa8>
    8774:	00800044 	movi	r2,1
    8778:	58000526 	beq	r11,zero,8790 <__gedf2+0x94>
    877c:	00bfffc4 	movi	r2,-1
    8780:	f800283a 	ret
    8784:	2912b03a 	or	r9,r5,r4
    8788:	483ff91e 	bne	r9,zero,8770 <__gedf2+0x74>
    878c:	103ffb26 	beq	r2,zero,877c <__gedf2+0x80>
    8790:	f800283a 	ret
    8794:	183ff61e 	bne	r3,zero,8770 <__gedf2+0x74>
    8798:	3992b03a 	or	r9,r7,r6
    879c:	483ff41e 	bne	r9,zero,8770 <__gedf2+0x74>
    87a0:	003ff406 	br	8774 <__gedf2+0x78>
    87a4:	1a000716 	blt	r3,r8,87c4 <__gedf2+0xc8>
    87a8:	40fff816 	blt	r8,r3,878c <__gedf2+0x90>
    87ac:	397ff136 	bltu	r7,r5,8774 <__gedf2+0x78>
    87b0:	29c00926 	beq	r5,r7,87d8 <__gedf2+0xdc>
    87b4:	29ffe52e 	bgeu	r5,r7,874c <__gedf2+0x50>
    87b8:	583ff026 	beq	r11,zero,877c <__gedf2+0x80>
    87bc:	5805883a 	mov	r2,r11
    87c0:	f800283a 	ret
    87c4:	103fed1e 	bne	r2,zero,877c <__gedf2+0x80>
    87c8:	00800044 	movi	r2,1
    87cc:	f800283a 	ret
    87d0:	00bfff84 	movi	r2,-2
    87d4:	f800283a 	ret
    87d8:	313fe636 	bltu	r6,r4,8774 <__gedf2+0x78>
    87dc:	21bfdb2e 	bgeu	r4,r6,874c <__gedf2+0x50>
    87e0:	003ff506 	br	87b8 <__gedf2+0xbc>

000087e4 <__ledf2>:
    87e4:	2810d53a 	srli	r8,r5,20
    87e8:	3812d53a 	srli	r9,r7,20
    87ec:	00c00434 	movhi	r3,16
    87f0:	4201ffcc 	andi	r8,r8,2047
    87f4:	18ffffc4 	addi	r3,r3,-1
    87f8:	4281ffd8 	cmpnei	r10,r8,2047
    87fc:	2816d7fa 	srli	r11,r5,31
    8800:	3804d7fa 	srli	r2,r7,31
    8804:	28ca703a 	and	r5,r5,r3
    8808:	38ce703a 	and	r7,r7,r3
    880c:	48c1ffcc 	andi	r3,r9,2047
    8810:	50000a26 	beq	r10,zero,883c <__ledf2+0x58>
    8814:	1a41ffd8 	cmpnei	r9,r3,2047
    8818:	48000c26 	beq	r9,zero,884c <__ledf2+0x68>
    881c:	4000191e 	bne	r8,zero,8884 <__ledf2+0xa0>
    8820:	2912b03a 	or	r9,r5,r4
    8824:	18000d1e 	bne	r3,zero,885c <__ledf2+0x78>
    8828:	3994b03a 	or	r10,r7,r6
    882c:	50000b1e 	bne	r10,zero,885c <__ledf2+0x78>
    8830:	48000c1e 	bne	r9,zero,8864 <__ledf2+0x80>
    8834:	0005883a 	mov	r2,zero
    8838:	f800283a 	ret
    883c:	2912b03a 	or	r9,r5,r4
    8840:	48000c1e 	bne	r9,zero,8874 <__ledf2+0x90>
    8844:	1a41ffe0 	cmpeqi	r9,r3,2047
    8848:	48000e26 	beq	r9,zero,8884 <__ledf2+0xa0>
    884c:	3992b03a 	or	r9,r7,r6
    8850:	4800081e 	bne	r9,zero,8874 <__ledf2+0x90>
    8854:	4000021e 	bne	r8,zero,8860 <__ledf2+0x7c>
    8858:	2912b03a 	or	r9,r5,r4
    885c:	48000726 	beq	r9,zero,887c <__ledf2+0x98>
    8860:	58800c26 	beq	r11,r2,8894 <__ledf2+0xb0>
    8864:	00800044 	movi	r2,1
    8868:	58000526 	beq	r11,zero,8880 <__ledf2+0x9c>
    886c:	00bfffc4 	movi	r2,-1
    8870:	f800283a 	ret
    8874:	00800084 	movi	r2,2
    8878:	f800283a 	ret
    887c:	103ffb26 	beq	r2,zero,886c <__ledf2+0x88>
    8880:	f800283a 	ret
    8884:	183ff61e 	bne	r3,zero,8860 <__ledf2+0x7c>
    8888:	3992b03a 	or	r9,r7,r6
    888c:	483ff41e 	bne	r9,zero,8860 <__ledf2+0x7c>
    8890:	003ff406 	br	8864 <__ledf2+0x80>
    8894:	1a00030e 	bge	r3,r8,88a4 <__ledf2+0xc0>
    8898:	103ff41e 	bne	r2,zero,886c <__ledf2+0x88>
    889c:	00800044 	movi	r2,1
    88a0:	f800283a 	ret
    88a4:	40fff516 	blt	r8,r3,887c <__ledf2+0x98>
    88a8:	397fee36 	bltu	r7,r5,8864 <__ledf2+0x80>
    88ac:	29c00426 	beq	r5,r7,88c0 <__ledf2+0xdc>
    88b0:	29ffe02e 	bgeu	r5,r7,8834 <__ledf2+0x50>
    88b4:	583fed26 	beq	r11,zero,886c <__ledf2+0x88>
    88b8:	5805883a 	mov	r2,r11
    88bc:	f800283a 	ret
    88c0:	313fe836 	bltu	r6,r4,8864 <__ledf2+0x80>
    88c4:	21bfdb2e 	bgeu	r4,r6,8834 <__ledf2+0x50>
    88c8:	003ffa06 	br	88b4 <__ledf2+0xd0>

000088cc <__muldf3>:
    88cc:	2810d53a 	srli	r8,r5,20
    88d0:	defff004 	addi	sp,sp,-64
    88d4:	00800434 	movhi	r2,16
    88d8:	df000e15 	stw	fp,56(sp)
    88dc:	dd000a15 	stw	r20,40(sp)
    88e0:	dcc00915 	stw	r19,36(sp)
    88e4:	dc400715 	stw	r17,28(sp)
    88e8:	10bfffc4 	addi	r2,r2,-1
    88ec:	dfc00f15 	stw	ra,60(sp)
    88f0:	ddc00d15 	stw	r23,52(sp)
    88f4:	dd800c15 	stw	r22,48(sp)
    88f8:	dd400b15 	stw	r21,44(sp)
    88fc:	dc800815 	stw	r18,32(sp)
    8900:	dc000615 	stw	r16,24(sp)
    8904:	4201ffcc 	andi	r8,r8,2047
    8908:	2828d7fa 	srli	r20,r5,31
    890c:	2023883a 	mov	r17,r4
    8910:	3039883a 	mov	fp,r6
    8914:	28a6703a 	and	r19,r5,r2
    8918:	40013426 	beq	r8,zero,8dec <__muldf3+0x520>
    891c:	4081ffe0 	cmpeqi	r2,r8,2047
    8920:	1001461e 	bne	r2,zero,8e3c <__muldf3+0x570>
    8924:	980a90fa 	slli	r5,r19,3
    8928:	2026d77a 	srli	r19,r4,29
    892c:	202490fa 	slli	r18,r4,3
    8930:	423f0044 	addi	r8,r8,-1023
    8934:	9966b03a 	or	r19,r19,r5
    8938:	9cc02034 	orhi	r19,r19,128
    893c:	002b883a 	mov	r21,zero
    8940:	002d883a 	mov	r22,zero
    8944:	3804d53a 	srli	r2,r7,20
    8948:	00c00434 	movhi	r3,16
    894c:	18ffffc4 	addi	r3,r3,-1
    8950:	1081ffcc 	andi	r2,r2,2047
    8954:	382ed7fa 	srli	r23,r7,31
    8958:	38e0703a 	and	r16,r7,r3
    895c:	10011026 	beq	r2,zero,8da0 <__muldf3+0x4d4>
    8960:	10c1ffe0 	cmpeqi	r3,r2,2047
    8964:	18013c1e 	bne	r3,zero,8e58 <__muldf3+0x58c>
    8968:	e008d77a 	srli	r4,fp,29
    896c:	802090fa 	slli	r16,r16,3
    8970:	e02290fa 	slli	r17,fp,3
    8974:	10bf0044 	addi	r2,r2,-1023
    8978:	2420b03a 	or	r16,r4,r16
    897c:	84002034 	orhi	r16,r16,128
    8980:	4091883a 	add	r8,r8,r2
    8984:	0009883a 	mov	r4,zero
    8988:	a8800428 	cmpgeui	r2,r21,16
    898c:	a5ccf03a 	xor	r6,r20,r23
    8990:	41c00044 	addi	r7,r8,1
    8994:	1000371e 	bne	r2,zero,8a74 <__muldf3+0x1a8>
    8998:	a80490ba 	slli	r2,r21,2
    899c:	00c00074 	movhi	r3,1
    89a0:	10c7883a 	add	r3,r2,r3
    89a4:	18a26b17 	ldw	r2,-30292(r3)
    89a8:	1000683a 	jmp	r2
    89ac:	00008a74 	movhi	zero,553
    89b0:	000089f0 	cmpltui	zero,zero,551
    89b4:	000089f0 	cmpltui	zero,zero,551
    89b8:	000089ec 	andhi	zero,zero,551
    89bc:	000089fc 	xorhi	zero,zero,551
    89c0:	000089fc 	xorhi	zero,zero,551
    89c4:	00008ecc 	andi	zero,zero,571
    89c8:	000089ec 	andhi	zero,zero,551
    89cc:	000089fc 	xorhi	zero,zero,551
    89d0:	00008ecc 	andi	zero,zero,571
    89d4:	000089fc 	xorhi	zero,zero,551
    89d8:	000089ec 	andhi	zero,zero,551
    89dc:	00008e74 	movhi	zero,569
    89e0:	00008e74 	movhi	zero,569
    89e4:	00008e74 	movhi	zero,569
    89e8:	00008f58 	cmpnei	zero,zero,573
    89ec:	b80d883a 	mov	r6,r23
    89f0:	8027883a 	mov	r19,r16
    89f4:	8825883a 	mov	r18,r17
    89f8:	202d883a 	mov	r22,r4
    89fc:	b08000a0 	cmpeqi	r2,r22,2
    8a00:	1000181e 	bne	r2,zero,8a64 <__muldf3+0x198>
    8a04:	b08000e0 	cmpeqi	r2,r22,3
    8a08:	1001961e 	bne	r2,zero,9064 <__muldf3+0x798>
    8a0c:	b0800060 	cmpeqi	r2,r22,1
    8a10:	1000c926 	beq	r2,zero,8d38 <__muldf3+0x46c>
    8a14:	0007883a 	mov	r3,zero
    8a18:	0027883a 	mov	r19,zero
    8a1c:	0025883a 	mov	r18,zero
    8a20:	1806953a 	slli	r3,r3,20
    8a24:	300c97fa 	slli	r6,r6,31
    8a28:	9005883a 	mov	r2,r18
    8a2c:	1cc6b03a 	or	r3,r3,r19
    8a30:	1986b03a 	or	r3,r3,r6
    8a34:	dfc00f17 	ldw	ra,60(sp)
    8a38:	df000e17 	ldw	fp,56(sp)
    8a3c:	ddc00d17 	ldw	r23,52(sp)
    8a40:	dd800c17 	ldw	r22,48(sp)
    8a44:	dd400b17 	ldw	r21,44(sp)
    8a48:	dd000a17 	ldw	r20,40(sp)
    8a4c:	dcc00917 	ldw	r19,36(sp)
    8a50:	dc800817 	ldw	r18,32(sp)
    8a54:	dc400717 	ldw	r17,28(sp)
    8a58:	dc000617 	ldw	r16,24(sp)
    8a5c:	dec01004 	addi	sp,sp,64
    8a60:	f800283a 	ret
    8a64:	00c1ffc4 	movi	r3,2047
    8a68:	0027883a 	mov	r19,zero
    8a6c:	0025883a 	mov	r18,zero
    8a70:	003feb06 	br	8a20 <__muldf3+0x154>
    8a74:	9028d43a 	srli	r20,r18,16
    8a78:	8f3fffcc 	andi	fp,r17,65535
    8a7c:	957fffcc 	andi	r21,r18,65535
    8a80:	a80b883a 	mov	r5,r21
    8a84:	e009883a 	mov	r4,fp
    8a88:	d9800315 	stw	r6,12(sp)
    8a8c:	da000215 	stw	r8,8(sp)
    8a90:	d9c00115 	stw	r7,4(sp)
    8a94:	8822d43a 	srli	r17,r17,16
    8a98:	0005e880 	call	5e88 <__mulsi3>
    8a9c:	e00b883a 	mov	r5,fp
    8aa0:	a009883a 	mov	r4,r20
    8aa4:	102d883a 	mov	r22,r2
    8aa8:	0005e880 	call	5e88 <__mulsi3>
    8aac:	880b883a 	mov	r5,r17
    8ab0:	a009883a 	mov	r4,r20
    8ab4:	102f883a 	mov	r23,r2
    8ab8:	0005e880 	call	5e88 <__mulsi3>
    8abc:	a80b883a 	mov	r5,r21
    8ac0:	8809883a 	mov	r4,r17
    8ac4:	d8800015 	stw	r2,0(sp)
    8ac8:	0005e880 	call	5e88 <__mulsi3>
    8acc:	b006d43a 	srli	r3,r22,16
    8ad0:	15e5883a 	add	r18,r2,r23
    8ad4:	d9c00117 	ldw	r7,4(sp)
    8ad8:	1c87883a 	add	r3,r3,r18
    8adc:	da000217 	ldw	r8,8(sp)
    8ae0:	d9800317 	ldw	r6,12(sp)
    8ae4:	1dc0042e 	bgeu	r3,r23,8af8 <__muldf3+0x22c>
    8ae8:	d9000017 	ldw	r4,0(sp)
    8aec:	00800074 	movhi	r2,1
    8af0:	2085883a 	add	r2,r4,r2
    8af4:	d8800015 	stw	r2,0(sp)
    8af8:	1804943a 	slli	r2,r3,16
    8afc:	85ffffcc 	andi	r23,r16,65535
    8b00:	b5bfffcc 	andi	r22,r22,65535
    8b04:	1585883a 	add	r2,r2,r22
    8b08:	a80b883a 	mov	r5,r21
    8b0c:	b809883a 	mov	r4,r23
    8b10:	1824d43a 	srli	r18,r3,16
    8b14:	d9800515 	stw	r6,20(sp)
    8b18:	da000415 	stw	r8,16(sp)
    8b1c:	d9c00315 	stw	r7,12(sp)
    8b20:	8020d43a 	srli	r16,r16,16
    8b24:	d8800115 	stw	r2,4(sp)
    8b28:	0005e880 	call	5e88 <__mulsi3>
    8b2c:	a009883a 	mov	r4,r20
    8b30:	b80b883a 	mov	r5,r23
    8b34:	d8800215 	stw	r2,8(sp)
    8b38:	0005e880 	call	5e88 <__mulsi3>
    8b3c:	a009883a 	mov	r4,r20
    8b40:	800b883a 	mov	r5,r16
    8b44:	102d883a 	mov	r22,r2
    8b48:	0005e880 	call	5e88 <__mulsi3>
    8b4c:	a80b883a 	mov	r5,r21
    8b50:	8009883a 	mov	r4,r16
    8b54:	1029883a 	mov	r20,r2
    8b58:	0005e880 	call	5e88 <__mulsi3>
    8b5c:	da800217 	ldw	r10,8(sp)
    8b60:	1585883a 	add	r2,r2,r22
    8b64:	d9c00317 	ldw	r7,12(sp)
    8b68:	5006d43a 	srli	r3,r10,16
    8b6c:	da000417 	ldw	r8,16(sp)
    8b70:	d9800517 	ldw	r6,20(sp)
    8b74:	1887883a 	add	r3,r3,r2
    8b78:	1d80022e 	bgeu	r3,r22,8b84 <__muldf3+0x2b8>
    8b7c:	00800074 	movhi	r2,1
    8b80:	a0a9883a 	add	r20,r20,r2
    8b84:	1804d43a 	srli	r2,r3,16
    8b88:	1806943a 	slli	r3,r3,16
    8b8c:	982cd43a 	srli	r22,r19,16
    8b90:	9d7fffcc 	andi	r21,r19,65535
    8b94:	e009883a 	mov	r4,fp
    8b98:	54ffffcc 	andi	r19,r10,65535
    8b9c:	a80b883a 	mov	r5,r21
    8ba0:	1ce7883a 	add	r19,r3,r19
    8ba4:	d9800515 	stw	r6,20(sp)
    8ba8:	da000415 	stw	r8,16(sp)
    8bac:	d9c00315 	stw	r7,12(sp)
    8bb0:	1529883a 	add	r20,r2,r20
    8bb4:	0005e880 	call	5e88 <__mulsi3>
    8bb8:	e00b883a 	mov	r5,fp
    8bbc:	b009883a 	mov	r4,r22
    8bc0:	d8800215 	stw	r2,8(sp)
    8bc4:	0005e880 	call	5e88 <__mulsi3>
    8bc8:	8809883a 	mov	r4,r17
    8bcc:	b00b883a 	mov	r5,r22
    8bd0:	1039883a 	mov	fp,r2
    8bd4:	0005e880 	call	5e88 <__mulsi3>
    8bd8:	8809883a 	mov	r4,r17
    8bdc:	a80b883a 	mov	r5,r21
    8be0:	1023883a 	mov	r17,r2
    8be4:	0005e880 	call	5e88 <__mulsi3>
    8be8:	d8c00217 	ldw	r3,8(sp)
    8bec:	1705883a 	add	r2,r2,fp
    8bf0:	d9c00317 	ldw	r7,12(sp)
    8bf4:	1808d43a 	srli	r4,r3,16
    8bf8:	da000417 	ldw	r8,16(sp)
    8bfc:	d9800517 	ldw	r6,20(sp)
    8c00:	2089883a 	add	r4,r4,r2
    8c04:	94e5883a 	add	r18,r18,r19
    8c08:	2700022e 	bgeu	r4,fp,8c14 <__muldf3+0x348>
    8c0c:	00800074 	movhi	r2,1
    8c10:	88a3883a 	add	r17,r17,r2
    8c14:	2004d43a 	srli	r2,r4,16
    8c18:	2038943a 	slli	fp,r4,16
    8c1c:	18ffffcc 	andi	r3,r3,65535
    8c20:	b809883a 	mov	r4,r23
    8c24:	a80b883a 	mov	r5,r21
    8c28:	d9800415 	stw	r6,16(sp)
    8c2c:	da000315 	stw	r8,12(sp)
    8c30:	d9c00215 	stw	r7,8(sp)
    8c34:	e0f9883a 	add	fp,fp,r3
    8c38:	1463883a 	add	r17,r2,r17
    8c3c:	0005e880 	call	5e88 <__mulsi3>
    8c40:	b80b883a 	mov	r5,r23
    8c44:	b009883a 	mov	r4,r22
    8c48:	102f883a 	mov	r23,r2
    8c4c:	0005e880 	call	5e88 <__mulsi3>
    8c50:	b00b883a 	mov	r5,r22
    8c54:	8009883a 	mov	r4,r16
    8c58:	102d883a 	mov	r22,r2
    8c5c:	0005e880 	call	5e88 <__mulsi3>
    8c60:	a80b883a 	mov	r5,r21
    8c64:	8009883a 	mov	r4,r16
    8c68:	1021883a 	mov	r16,r2
    8c6c:	0005e880 	call	5e88 <__mulsi3>
    8c70:	b80ad43a 	srli	r5,r23,16
    8c74:	1585883a 	add	r2,r2,r22
    8c78:	d9c00217 	ldw	r7,8(sp)
    8c7c:	288b883a 	add	r5,r5,r2
    8c80:	da000317 	ldw	r8,12(sp)
    8c84:	d9800417 	ldw	r6,16(sp)
    8c88:	2d80022e 	bgeu	r5,r22,8c94 <__muldf3+0x3c8>
    8c8c:	00800074 	movhi	r2,1
    8c90:	80a1883a 	add	r16,r16,r2
    8c94:	2806943a 	slli	r3,r5,16
    8c98:	d8800017 	ldw	r2,0(sp)
    8c9c:	bdffffcc 	andi	r23,r23,65535
    8ca0:	1dc7883a 	add	r3,r3,r23
    8ca4:	90ab883a 	add	r21,r18,r2
    8ca8:	acd5803a 	cmpltu	r10,r21,r19
    8cac:	1d07883a 	add	r3,r3,r20
    8cb0:	af2b883a 	add	r21,r21,fp
    8cb4:	1a97883a 	add	r11,r3,r10
    8cb8:	af09803a 	cmpltu	r4,r21,fp
    8cbc:	2826d43a 	srli	r19,r5,16
    8cc0:	5c53883a 	add	r9,r11,r17
    8cc4:	4905883a 	add	r2,r9,r4
    8cc8:	1d07803a 	cmpltu	r3,r3,r20
    8ccc:	5a95803a 	cmpltu	r10,r11,r10
    8cd0:	1a86b03a 	or	r3,r3,r10
    8cd4:	1109803a 	cmpltu	r4,r2,r4
    8cd8:	4c53803a 	cmpltu	r9,r9,r17
    8cdc:	1ce7883a 	add	r19,r3,r19
    8ce0:	4908b03a 	or	r4,r9,r4
    8ce4:	a824927a 	slli	r18,r21,9
    8ce8:	d8c00117 	ldw	r3,4(sp)
    8cec:	9927883a 	add	r19,r19,r4
    8cf0:	9c27883a 	add	r19,r19,r16
    8cf4:	9826927a 	slli	r19,r19,9
    8cf8:	a82ad5fa 	srli	r21,r21,23
    8cfc:	100ad5fa 	srli	r5,r2,23
    8d00:	90e4b03a 	or	r18,r18,r3
    8d04:	1004927a 	slli	r2,r2,9
    8d08:	9024c03a 	cmpne	r18,r18,zero
    8d0c:	9564b03a 	or	r18,r18,r21
    8d10:	98c0402c 	andhi	r3,r19,256
    8d14:	90a4b03a 	or	r18,r18,r2
    8d18:	9966b03a 	or	r19,r19,r5
    8d1c:	1800b626 	beq	r3,zero,8ff8 <__muldf3+0x72c>
    8d20:	9006d07a 	srli	r3,r18,1
    8d24:	980497fa 	slli	r2,r19,31
    8d28:	9480004c 	andi	r18,r18,1
    8d2c:	9826d07a 	srli	r19,r19,1
    8d30:	1c86b03a 	or	r3,r3,r18
    8d34:	18a4b03a 	or	r18,r3,r2
    8d38:	3900ffc4 	addi	r4,r7,1023
    8d3c:	0100690e 	bge	zero,r4,8ee4 <__muldf3+0x618>
    8d40:	908001cc 	andi	r2,r18,7
    8d44:	10000726 	beq	r2,zero,8d64 <__muldf3+0x498>
    8d48:	908003cc 	andi	r2,r18,15
    8d4c:	10800120 	cmpeqi	r2,r2,4
    8d50:	1000041e 	bne	r2,zero,8d64 <__muldf3+0x498>
    8d54:	90800104 	addi	r2,r18,4
    8d58:	14a5803a 	cmpltu	r18,r2,r18
    8d5c:	9ca7883a 	add	r19,r19,r18
    8d60:	1025883a 	mov	r18,r2
    8d64:	9880402c 	andhi	r2,r19,256
    8d68:	10000426 	beq	r2,zero,8d7c <__muldf3+0x4b0>
    8d6c:	00bfc034 	movhi	r2,65280
    8d70:	10bfffc4 	addi	r2,r2,-1
    8d74:	98a6703a 	and	r19,r19,r2
    8d78:	39010004 	addi	r4,r7,1024
    8d7c:	2081ffc8 	cmpgei	r2,r4,2047
    8d80:	103f381e 	bne	r2,zero,8a64 <__muldf3+0x198>
    8d84:	9804977a 	slli	r2,r19,29
    8d88:	9024d0fa 	srli	r18,r18,3
    8d8c:	9826927a 	slli	r19,r19,9
    8d90:	20c1ffcc 	andi	r3,r4,2047
    8d94:	14a4b03a 	or	r18,r2,r18
    8d98:	9826d33a 	srli	r19,r19,12
    8d9c:	003f2006 	br	8a20 <__muldf3+0x154>
    8da0:	8722b03a 	or	r17,r16,fp
    8da4:	88004526 	beq	r17,zero,8ebc <__muldf3+0x5f0>
    8da8:	da000015 	stw	r8,0(sp)
    8dac:	80008626 	beq	r16,zero,8fc8 <__muldf3+0x6fc>
    8db0:	8009883a 	mov	r4,r16
    8db4:	0009bf00 	call	9bf0 <__clzsi2>
    8db8:	da000017 	ldw	r8,0(sp)
    8dbc:	117ffd44 	addi	r5,r2,-11
    8dc0:	01000744 	movi	r4,29
    8dc4:	147ffe04 	addi	r17,r2,-8
    8dc8:	2149c83a 	sub	r4,r4,r5
    8dcc:	8460983a 	sll	r16,r16,r17
    8dd0:	e108d83a 	srl	r4,fp,r4
    8dd4:	e462983a 	sll	r17,fp,r17
    8dd8:	2420b03a 	or	r16,r4,r16
    8ddc:	4091c83a 	sub	r8,r8,r2
    8de0:	423f0344 	addi	r8,r8,-1011
    8de4:	0009883a 	mov	r4,zero
    8de8:	003ee706 	br	8988 <__muldf3+0xbc>
    8dec:	9924b03a 	or	r18,r19,r4
    8df0:	90002d26 	beq	r18,zero,8ea8 <__muldf3+0x5dc>
    8df4:	d9c00015 	stw	r7,0(sp)
    8df8:	98006826 	beq	r19,zero,8f9c <__muldf3+0x6d0>
    8dfc:	9809883a 	mov	r4,r19
    8e00:	0009bf00 	call	9bf0 <__clzsi2>
    8e04:	d9c00017 	ldw	r7,0(sp)
    8e08:	113ffd44 	addi	r4,r2,-11
    8e0c:	00c00744 	movi	r3,29
    8e10:	14bffe04 	addi	r18,r2,-8
    8e14:	1907c83a 	sub	r3,r3,r4
    8e18:	9ca6983a 	sll	r19,r19,r18
    8e1c:	88c6d83a 	srl	r3,r17,r3
    8e20:	8ca4983a 	sll	r18,r17,r18
    8e24:	1ce6b03a 	or	r19,r3,r19
    8e28:	023f0344 	movi	r8,-1011
    8e2c:	4091c83a 	sub	r8,r8,r2
    8e30:	002b883a 	mov	r21,zero
    8e34:	002d883a 	mov	r22,zero
    8e38:	003ec206 	br	8944 <__muldf3+0x78>
    8e3c:	9924b03a 	or	r18,r19,r4
    8e40:	9000141e 	bne	r18,zero,8e94 <__muldf3+0x5c8>
    8e44:	0027883a 	mov	r19,zero
    8e48:	05400204 	movi	r21,8
    8e4c:	0201ffc4 	movi	r8,2047
    8e50:	05800084 	movi	r22,2
    8e54:	003ebb06 	br	8944 <__muldf3+0x78>
    8e58:	8722b03a 	or	r17,r16,fp
    8e5c:	4201ffc4 	addi	r8,r8,2047
    8e60:	8800081e 	bne	r17,zero,8e84 <__muldf3+0x5b8>
    8e64:	ad400094 	ori	r21,r21,2
    8e68:	0021883a 	mov	r16,zero
    8e6c:	01000084 	movi	r4,2
    8e70:	003ec506 	br	8988 <__muldf3+0xbc>
    8e74:	b08000a0 	cmpeqi	r2,r22,2
    8e78:	a00d883a 	mov	r6,r20
    8e7c:	103ee126 	beq	r2,zero,8a04 <__muldf3+0x138>
    8e80:	003ef806 	br	8a64 <__muldf3+0x198>
    8e84:	ad4000d4 	ori	r21,r21,3
    8e88:	e023883a 	mov	r17,fp
    8e8c:	010000c4 	movi	r4,3
    8e90:	003ebd06 	br	8988 <__muldf3+0xbc>
    8e94:	2025883a 	mov	r18,r4
    8e98:	05400304 	movi	r21,12
    8e9c:	0201ffc4 	movi	r8,2047
    8ea0:	058000c4 	movi	r22,3
    8ea4:	003ea706 	br	8944 <__muldf3+0x78>
    8ea8:	0027883a 	mov	r19,zero
    8eac:	05400104 	movi	r21,4
    8eb0:	0011883a 	mov	r8,zero
    8eb4:	05800044 	movi	r22,1
    8eb8:	003ea206 	br	8944 <__muldf3+0x78>
    8ebc:	ad400054 	ori	r21,r21,1
    8ec0:	0021883a 	mov	r16,zero
    8ec4:	01000044 	movi	r4,1
    8ec8:	003eaf06 	br	8988 <__muldf3+0xbc>
    8ecc:	04c00434 	movhi	r19,16
    8ed0:	000d883a 	mov	r6,zero
    8ed4:	9cffffc4 	addi	r19,r19,-1
    8ed8:	04bfffc4 	movi	r18,-1
    8edc:	00c1ffc4 	movi	r3,2047
    8ee0:	003ecf06 	br	8a20 <__muldf3+0x154>
    8ee4:	00800044 	movi	r2,1
    8ee8:	1105c83a 	sub	r2,r2,r4
    8eec:	10c00e48 	cmpgei	r3,r2,57
    8ef0:	183ec81e 	bne	r3,zero,8a14 <__muldf3+0x148>
    8ef4:	10c00808 	cmpgei	r3,r2,32
    8ef8:	1800411e 	bne	r3,zero,9000 <__muldf3+0x734>
    8efc:	39c10784 	addi	r7,r7,1054
    8f00:	99c6983a 	sll	r3,r19,r7
    8f04:	9088d83a 	srl	r4,r18,r2
    8f08:	91ce983a 	sll	r7,r18,r7
    8f0c:	98a6d83a 	srl	r19,r19,r2
    8f10:	1904b03a 	or	r2,r3,r4
    8f14:	3824c03a 	cmpne	r18,r7,zero
    8f18:	1484b03a 	or	r2,r2,r18
    8f1c:	10c001cc 	andi	r3,r2,7
    8f20:	18000726 	beq	r3,zero,8f40 <__muldf3+0x674>
    8f24:	10c003cc 	andi	r3,r2,15
    8f28:	18c00120 	cmpeqi	r3,r3,4
    8f2c:	1800041e 	bne	r3,zero,8f40 <__muldf3+0x674>
    8f30:	10c00104 	addi	r3,r2,4
    8f34:	1885803a 	cmpltu	r2,r3,r2
    8f38:	98a7883a 	add	r19,r19,r2
    8f3c:	1805883a 	mov	r2,r3
    8f40:	98c0202c 	andhi	r3,r19,128
    8f44:	18004326 	beq	r3,zero,9054 <__muldf3+0x788>
    8f48:	00c00044 	movi	r3,1
    8f4c:	0027883a 	mov	r19,zero
    8f50:	0025883a 	mov	r18,zero
    8f54:	003eb206 	br	8a20 <__muldf3+0x154>
    8f58:	9880022c 	andhi	r2,r19,8
    8f5c:	10000926 	beq	r2,zero,8f84 <__muldf3+0x6b8>
    8f60:	8080022c 	andhi	r2,r16,8
    8f64:	1000071e 	bne	r2,zero,8f84 <__muldf3+0x6b8>
    8f68:	00800434 	movhi	r2,16
    8f6c:	84c00234 	orhi	r19,r16,8
    8f70:	10bfffc4 	addi	r2,r2,-1
    8f74:	98a6703a 	and	r19,r19,r2
    8f78:	b80d883a 	mov	r6,r23
    8f7c:	8825883a 	mov	r18,r17
    8f80:	003fd606 	br	8edc <__muldf3+0x610>
    8f84:	00800434 	movhi	r2,16
    8f88:	9cc00234 	orhi	r19,r19,8
    8f8c:	10bfffc4 	addi	r2,r2,-1
    8f90:	98a6703a 	and	r19,r19,r2
    8f94:	a00d883a 	mov	r6,r20
    8f98:	003fd006 	br	8edc <__muldf3+0x610>
    8f9c:	0009bf00 	call	9bf0 <__clzsi2>
    8fa0:	11000544 	addi	r4,r2,21
    8fa4:	21400748 	cmpgei	r5,r4,29
    8fa8:	1007883a 	mov	r3,r2
    8fac:	d9c00017 	ldw	r7,0(sp)
    8fb0:	10800804 	addi	r2,r2,32
    8fb4:	283f9526 	beq	r5,zero,8e0c <__muldf3+0x540>
    8fb8:	18fffe04 	addi	r3,r3,-8
    8fbc:	88e6983a 	sll	r19,r17,r3
    8fc0:	0025883a 	mov	r18,zero
    8fc4:	003f9806 	br	8e28 <__muldf3+0x55c>
    8fc8:	e009883a 	mov	r4,fp
    8fcc:	0009bf00 	call	9bf0 <__clzsi2>
    8fd0:	11400544 	addi	r5,r2,21
    8fd4:	29000748 	cmpgei	r4,r5,29
    8fd8:	1007883a 	mov	r3,r2
    8fdc:	da000017 	ldw	r8,0(sp)
    8fe0:	10800804 	addi	r2,r2,32
    8fe4:	203f7626 	beq	r4,zero,8dc0 <__muldf3+0x4f4>
    8fe8:	1c3ffe04 	addi	r16,r3,-8
    8fec:	e420983a 	sll	r16,fp,r16
    8ff0:	0023883a 	mov	r17,zero
    8ff4:	003f7906 	br	8ddc <__muldf3+0x510>
    8ff8:	400f883a 	mov	r7,r8
    8ffc:	003f4e06 	br	8d38 <__muldf3+0x46c>
    9000:	00fff844 	movi	r3,-31
    9004:	1907c83a 	sub	r3,r3,r4
    9008:	10800820 	cmpeqi	r2,r2,32
    900c:	98c6d83a 	srl	r3,r19,r3
    9010:	1000031e 	bne	r2,zero,9020 <__muldf3+0x754>
    9014:	39c10f84 	addi	r7,r7,1086
    9018:	99e6983a 	sll	r19,r19,r7
    901c:	94e4b03a 	or	r18,r18,r19
    9020:	9024c03a 	cmpne	r18,r18,zero
    9024:	90c4b03a 	or	r2,r18,r3
    9028:	148001cc 	andi	r18,r2,7
    902c:	9000051e 	bne	r18,zero,9044 <__muldf3+0x778>
    9030:	0027883a 	mov	r19,zero
    9034:	1004d0fa 	srli	r2,r2,3
    9038:	0007883a 	mov	r3,zero
    903c:	14a4b03a 	or	r18,r2,r18
    9040:	003e7706 	br	8a20 <__muldf3+0x154>
    9044:	10c003cc 	andi	r3,r2,15
    9048:	18c00118 	cmpnei	r3,r3,4
    904c:	0027883a 	mov	r19,zero
    9050:	183fb71e 	bne	r3,zero,8f30 <__muldf3+0x664>
    9054:	9806927a 	slli	r3,r19,9
    9058:	9824977a 	slli	r18,r19,29
    905c:	1826d33a 	srli	r19,r3,12
    9060:	003ff406 	br	9034 <__muldf3+0x768>
    9064:	00800434 	movhi	r2,16
    9068:	9cc00234 	orhi	r19,r19,8
    906c:	10bfffc4 	addi	r2,r2,-1
    9070:	98a6703a 	and	r19,r19,r2
    9074:	003f9906 	br	8edc <__muldf3+0x610>

00009078 <__subdf3>:
    9078:	00800434 	movhi	r2,16
    907c:	3810d53a 	srli	r8,r7,20
    9080:	10bfffc4 	addi	r2,r2,-1
    9084:	2806d53a 	srli	r3,r5,20
    9088:	2892703a 	and	r9,r5,r2
    908c:	3884703a 	and	r2,r7,r2
    9090:	280ad7fa 	srli	r5,r5,31
    9094:	481290fa 	slli	r9,r9,3
    9098:	2018d77a 	srli	r12,r4,29
    909c:	100490fa 	slli	r2,r2,3
    90a0:	3016d77a 	srli	r11,r6,29
    90a4:	defffb04 	addi	sp,sp,-20
    90a8:	4201ffcc 	andi	r8,r8,2047
    90ac:	dc800215 	stw	r18,8(sp)
    90b0:	dc400115 	stw	r17,4(sp)
    90b4:	1c81ffcc 	andi	r18,r3,2047
    90b8:	dfc00415 	stw	ra,16(sp)
    90bc:	dcc00315 	stw	r19,12(sp)
    90c0:	dc000015 	stw	r16,0(sp)
    90c4:	4281ffd8 	cmpnei	r10,r8,2047
    90c8:	2823883a 	mov	r17,r5
    90cc:	201c90fa 	slli	r14,r4,3
    90d0:	380ed7fa 	srli	r7,r7,31
    90d4:	301a90fa 	slli	r13,r6,3
    90d8:	29403fcc 	andi	r5,r5,255
    90dc:	6252b03a 	or	r9,r12,r9
    90e0:	589eb03a 	or	r15,r11,r2
    90e4:	9207c83a 	sub	r3,r18,r8
    90e8:	50006826 	beq	r10,zero,928c <__subdf3+0x214>
    90ec:	3ac0005c 	xori	r11,r7,1
    90f0:	2ac07326 	beq	r5,r11,92c0 <__subdf3+0x248>
    90f4:	00c0590e 	bge	zero,r3,925c <__subdf3+0x1e4>
    90f8:	4000691e 	bne	r8,zero,92a0 <__subdf3+0x228>
    90fc:	7b44b03a 	or	r2,r15,r13
    9100:	1000fb26 	beq	r2,zero,94f0 <__subdf3+0x478>
    9104:	18bfffc4 	addi	r2,r3,-1
    9108:	10019126 	beq	r2,zero,9750 <__subdf3+0x6d8>
    910c:	18c1ffd8 	cmpnei	r3,r3,2047
    9110:	1800c326 	beq	r3,zero,9420 <__subdf3+0x3a8>
    9114:	1007883a 	mov	r3,r2
    9118:	18800e48 	cmpgei	r2,r3,57
    911c:	1000651e 	bne	r2,zero,92b4 <__subdf3+0x23c>
    9120:	18800808 	cmpgei	r2,r3,32
    9124:	1001331e 	bne	r2,zero,95f4 <__subdf3+0x57c>
    9128:	00800804 	movi	r2,32
    912c:	10c5c83a 	sub	r2,r2,r3
    9130:	78a0983a 	sll	r16,r15,r2
    9134:	68c8d83a 	srl	r4,r13,r3
    9138:	689a983a 	sll	r13,r13,r2
    913c:	78c4d83a 	srl	r2,r15,r3
    9140:	8120b03a 	or	r16,r16,r4
    9144:	681ac03a 	cmpne	r13,r13,zero
    9148:	8360b03a 	or	r16,r16,r13
    914c:	4893c83a 	sub	r9,r9,r2
    9150:	7421c83a 	sub	r16,r14,r16
    9154:	7409803a 	cmpltu	r4,r14,r16
    9158:	4909c83a 	sub	r4,r9,r4
    915c:	2080202c 	andhi	r2,r4,128
    9160:	10009326 	beq	r2,zero,93b0 <__subdf3+0x338>
    9164:	04c02034 	movhi	r19,128
    9168:	9cffffc4 	addi	r19,r19,-1
    916c:	24e6703a 	and	r19,r4,r19
    9170:	9800b926 	beq	r19,zero,9458 <__subdf3+0x3e0>
    9174:	9809883a 	mov	r4,r19
    9178:	0009bf00 	call	9bf0 <__clzsi2>
    917c:	10fffe04 	addi	r3,r2,-8
    9180:	01000804 	movi	r4,32
    9184:	20c9c83a 	sub	r4,r4,r3
    9188:	8108d83a 	srl	r4,r16,r4
    918c:	98e6983a 	sll	r19,r19,r3
    9190:	80e0983a 	sll	r16,r16,r3
    9194:	24c8b03a 	or	r4,r4,r19
    9198:	1c80b816 	blt	r3,r18,947c <__subdf3+0x404>
    919c:	1c87c83a 	sub	r3,r3,r18
    91a0:	19400044 	addi	r5,r3,1
    91a4:	28800808 	cmpgei	r2,r5,32
    91a8:	1000751e 	bne	r2,zero,9380 <__subdf3+0x308>
    91ac:	00800804 	movi	r2,32
    91b0:	1145c83a 	sub	r2,r2,r5
    91b4:	8146d83a 	srl	r3,r16,r5
    91b8:	80a0983a 	sll	r16,r16,r2
    91bc:	2084983a 	sll	r2,r4,r2
    91c0:	2148d83a 	srl	r4,r4,r5
    91c4:	8020c03a 	cmpne	r16,r16,zero
    91c8:	10c4b03a 	or	r2,r2,r3
    91cc:	1420b03a 	or	r16,r2,r16
    91d0:	0025883a 	mov	r18,zero
    91d4:	808001cc 	andi	r2,r16,7
    91d8:	10000726 	beq	r2,zero,91f8 <__subdf3+0x180>
    91dc:	808003cc 	andi	r2,r16,15
    91e0:	10800120 	cmpeqi	r2,r2,4
    91e4:	1000041e 	bne	r2,zero,91f8 <__subdf3+0x180>
    91e8:	80800104 	addi	r2,r16,4
    91ec:	1421803a 	cmpltu	r16,r2,r16
    91f0:	2409883a 	add	r4,r4,r16
    91f4:	1021883a 	mov	r16,r2
    91f8:	2080202c 	andhi	r2,r4,128
    91fc:	10006e26 	beq	r2,zero,93b8 <__subdf3+0x340>
    9200:	90c00044 	addi	r3,r18,1
    9204:	1881ffe0 	cmpeqi	r2,r3,2047
    9208:	18c1ffcc 	andi	r3,r3,2047
    920c:	1000801e 	bne	r2,zero,9410 <__subdf3+0x398>
    9210:	00bfe034 	movhi	r2,65408
    9214:	10bfffc4 	addi	r2,r2,-1
    9218:	2088703a 	and	r4,r4,r2
    921c:	2004977a 	slli	r2,r4,29
    9220:	2008927a 	slli	r4,r4,9
    9224:	8020d0fa 	srli	r16,r16,3
    9228:	2008d33a 	srli	r4,r4,12
    922c:	1404b03a 	or	r2,r2,r16
    9230:	1806953a 	slli	r3,r3,20
    9234:	882297fa 	slli	r17,r17,31
    9238:	1906b03a 	or	r3,r3,r4
    923c:	1c46b03a 	or	r3,r3,r17
    9240:	dfc00417 	ldw	ra,16(sp)
    9244:	dcc00317 	ldw	r19,12(sp)
    9248:	dc800217 	ldw	r18,8(sp)
    924c:	dc400117 	ldw	r17,4(sp)
    9250:	dc000017 	ldw	r16,0(sp)
    9254:	dec00504 	addi	sp,sp,20
    9258:	f800283a 	ret
    925c:	18002c26 	beq	r3,zero,9310 <__subdf3+0x298>
    9260:	4487c83a 	sub	r3,r8,r18
    9264:	5823883a 	mov	r17,r11
    9268:	9000bb1e 	bne	r18,zero,9558 <__subdf3+0x4e0>
    926c:	4b84b03a 	or	r2,r9,r14
    9270:	10011726 	beq	r2,zero,96d0 <__subdf3+0x658>
    9274:	18bfffc4 	addi	r2,r3,-1
    9278:	10016326 	beq	r2,zero,9808 <__subdf3+0x790>
    927c:	18c1ffd8 	cmpnei	r3,r3,2047
    9280:	18012c26 	beq	r3,zero,9734 <__subdf3+0x6bc>
    9284:	1007883a 	mov	r3,r2
    9288:	0000b506 	br	9560 <__subdf3+0x4e8>
    928c:	7b44b03a 	or	r2,r15,r13
    9290:	103f9626 	beq	r2,zero,90ec <__subdf3+0x74>
    9294:	3ac03fcc 	andi	r11,r7,255
    9298:	29c07d26 	beq	r5,r7,9490 <__subdf3+0x418>
    929c:	00ffef0e 	bge	zero,r3,925c <__subdf3+0x1e4>
    92a0:	9081ffd8 	cmpnei	r2,r18,2047
    92a4:	10005e26 	beq	r2,zero,9420 <__subdf3+0x3a8>
    92a8:	18800e48 	cmpgei	r2,r3,57
    92ac:	7bc02034 	orhi	r15,r15,128
    92b0:	103f9b26 	beq	r2,zero,9120 <__subdf3+0xa8>
    92b4:	7b60b03a 	or	r16,r15,r13
    92b8:	8020c03a 	cmpne	r16,r16,zero
    92bc:	003fa406 	br	9150 <__subdf3+0xd8>
    92c0:	00c0730e 	bge	zero,r3,9490 <__subdf3+0x418>
    92c4:	40002626 	beq	r8,zero,9360 <__subdf3+0x2e8>
    92c8:	9081ffd8 	cmpnei	r2,r18,2047
    92cc:	10005426 	beq	r2,zero,9420 <__subdf3+0x3a8>
    92d0:	7bc02034 	orhi	r15,r15,128
    92d4:	18800e48 	cmpgei	r2,r3,57
    92d8:	1000431e 	bne	r2,zero,93e8 <__subdf3+0x370>
    92dc:	18800808 	cmpgei	r2,r3,32
    92e0:	1000de26 	beq	r2,zero,965c <__subdf3+0x5e4>
    92e4:	1c3ff804 	addi	r16,r3,-32
    92e8:	18800820 	cmpeqi	r2,r3,32
    92ec:	7c0ad83a 	srl	r5,r15,r16
    92f0:	1000041e 	bne	r2,zero,9304 <__subdf3+0x28c>
    92f4:	00801004 	movi	r2,64
    92f8:	10c5c83a 	sub	r2,r2,r3
    92fc:	7884983a 	sll	r2,r15,r2
    9300:	689ab03a 	or	r13,r13,r2
    9304:	6820c03a 	cmpne	r16,r13,zero
    9308:	8160b03a 	or	r16,r16,r5
    930c:	00003806 	br	93f0 <__subdf3+0x378>
    9310:	90800044 	addi	r2,r18,1
    9314:	1081ff8c 	andi	r2,r2,2046
    9318:	1000a01e 	bne	r2,zero,959c <__subdf3+0x524>
    931c:	4b8ab03a 	or	r5,r9,r14
    9320:	7b44b03a 	or	r2,r15,r13
    9324:	9000f11e 	bne	r18,zero,96ec <__subdf3+0x674>
    9328:	28012e26 	beq	r5,zero,97e4 <__subdf3+0x76c>
    932c:	10010e26 	beq	r2,zero,9768 <__subdf3+0x6f0>
    9330:	7361c83a 	sub	r16,r14,r13
    9334:	7405803a 	cmpltu	r2,r14,r16
    9338:	4bc9c83a 	sub	r4,r9,r15
    933c:	2089c83a 	sub	r4,r4,r2
    9340:	2080202c 	andhi	r2,r4,128
    9344:	10016d26 	beq	r2,zero,98fc <__subdf3+0x884>
    9348:	6ba1c83a 	sub	r16,r13,r14
    934c:	7a49c83a 	sub	r4,r15,r9
    9350:	6c1b803a 	cmpltu	r13,r13,r16
    9354:	2349c83a 	sub	r4,r4,r13
    9358:	5823883a 	mov	r17,r11
    935c:	003f9d06 	br	91d4 <__subdf3+0x15c>
    9360:	7b44b03a 	or	r2,r15,r13
    9364:	10006226 	beq	r2,zero,94f0 <__subdf3+0x478>
    9368:	18bfffc4 	addi	r2,r3,-1
    936c:	1000e926 	beq	r2,zero,9714 <__subdf3+0x69c>
    9370:	18c1ffd8 	cmpnei	r3,r3,2047
    9374:	18012a26 	beq	r3,zero,9820 <__subdf3+0x7a8>
    9378:	1007883a 	mov	r3,r2
    937c:	003fd506 	br	92d4 <__subdf3+0x25c>
    9380:	18fff844 	addi	r3,r3,-31
    9384:	28800820 	cmpeqi	r2,r5,32
    9388:	20c6d83a 	srl	r3,r4,r3
    938c:	1000041e 	bne	r2,zero,93a0 <__subdf3+0x328>
    9390:	00801004 	movi	r2,64
    9394:	114bc83a 	sub	r5,r2,r5
    9398:	2148983a 	sll	r4,r4,r5
    939c:	8120b03a 	or	r16,r16,r4
    93a0:	8020c03a 	cmpne	r16,r16,zero
    93a4:	80e0b03a 	or	r16,r16,r3
    93a8:	0009883a 	mov	r4,zero
    93ac:	0025883a 	mov	r18,zero
    93b0:	808001cc 	andi	r2,r16,7
    93b4:	103f891e 	bne	r2,zero,91dc <__subdf3+0x164>
    93b8:	8020d0fa 	srli	r16,r16,3
    93bc:	2004977a 	slli	r2,r4,29
    93c0:	2012d0fa 	srli	r9,r4,3
    93c4:	9007883a 	mov	r3,r18
    93c8:	8084b03a 	or	r2,r16,r2
    93cc:	1901ffe0 	cmpeqi	r4,r3,2047
    93d0:	2000191e 	bne	r4,zero,9438 <__subdf3+0x3c0>
    93d4:	01000434 	movhi	r4,16
    93d8:	213fffc4 	addi	r4,r4,-1
    93dc:	4908703a 	and	r4,r9,r4
    93e0:	18c1ffcc 	andi	r3,r3,2047
    93e4:	003f9206 	br	9230 <__subdf3+0x1b8>
    93e8:	7b60b03a 	or	r16,r15,r13
    93ec:	8020c03a 	cmpne	r16,r16,zero
    93f0:	83a1883a 	add	r16,r16,r14
    93f4:	8389803a 	cmpltu	r4,r16,r14
    93f8:	2249883a 	add	r4,r4,r9
    93fc:	2080202c 	andhi	r2,r4,128
    9400:	103feb26 	beq	r2,zero,93b0 <__subdf3+0x338>
    9404:	94800044 	addi	r18,r18,1
    9408:	9081ffe0 	cmpeqi	r2,r18,2047
    940c:	10006f26 	beq	r2,zero,95cc <__subdf3+0x554>
    9410:	00c1ffc4 	movi	r3,2047
    9414:	0009883a 	mov	r4,zero
    9418:	0005883a 	mov	r2,zero
    941c:	003f8406 	br	9230 <__subdf3+0x1b8>
    9420:	4806977a 	slli	r3,r9,29
    9424:	00880034 	movhi	r2,8192
    9428:	10bfffc4 	addi	r2,r2,-1
    942c:	4812d0fa 	srli	r9,r9,3
    9430:	2088703a 	and	r4,r4,r2
    9434:	20c4b03a 	or	r2,r4,r3
    9438:	4886b03a 	or	r3,r9,r2
    943c:	18013726 	beq	r3,zero,991c <__subdf3+0x8a4>
    9440:	00c00434 	movhi	r3,16
    9444:	18ffffc4 	addi	r3,r3,-1
    9448:	49000234 	orhi	r4,r9,8
    944c:	20c8703a 	and	r4,r4,r3
    9450:	00c1ffc4 	movi	r3,2047
    9454:	003f7606 	br	9230 <__subdf3+0x1b8>
    9458:	8009883a 	mov	r4,r16
    945c:	0009bf00 	call	9bf0 <__clzsi2>
    9460:	10c00604 	addi	r3,r2,24
    9464:	19000808 	cmpgei	r4,r3,32
    9468:	203f4526 	beq	r4,zero,9180 <__subdf3+0x108>
    946c:	113ffe04 	addi	r4,r2,-8
    9470:	8108983a 	sll	r4,r16,r4
    9474:	0021883a 	mov	r16,zero
    9478:	1cbf480e 	bge	r3,r18,919c <__subdf3+0x124>
    947c:	00bfe034 	movhi	r2,65408
    9480:	10bfffc4 	addi	r2,r2,-1
    9484:	90e5c83a 	sub	r18,r18,r3
    9488:	2088703a 	and	r4,r4,r2
    948c:	003f5106 	br	91d4 <__subdf3+0x15c>
    9490:	18001e26 	beq	r3,zero,950c <__subdf3+0x494>
    9494:	4487c83a 	sub	r3,r8,r18
    9498:	90006826 	beq	r18,zero,963c <__subdf3+0x5c4>
    949c:	5000a526 	beq	r10,zero,9734 <__subdf3+0x6bc>
    94a0:	4a402034 	orhi	r9,r9,128
    94a4:	18800e48 	cmpgei	r2,r3,57
    94a8:	1000b61e 	bne	r2,zero,9784 <__subdf3+0x70c>
    94ac:	18800808 	cmpgei	r2,r3,32
    94b0:	1001021e 	bne	r2,zero,98bc <__subdf3+0x844>
    94b4:	00800804 	movi	r2,32
    94b8:	10c5c83a 	sub	r2,r2,r3
    94bc:	48a0983a 	sll	r16,r9,r2
    94c0:	70c8d83a 	srl	r4,r14,r3
    94c4:	7084983a 	sll	r2,r14,r2
    94c8:	48d2d83a 	srl	r9,r9,r3
    94cc:	8120b03a 	or	r16,r16,r4
    94d0:	1004c03a 	cmpne	r2,r2,zero
    94d4:	80a0b03a 	or	r16,r16,r2
    94d8:	7a5f883a 	add	r15,r15,r9
    94dc:	8361883a 	add	r16,r16,r13
    94e0:	8349803a 	cmpltu	r4,r16,r13
    94e4:	23c9883a 	add	r4,r4,r15
    94e8:	4025883a 	mov	r18,r8
    94ec:	003fc306 	br	93fc <__subdf3+0x384>
    94f0:	480a977a 	slli	r5,r9,29
    94f4:	00880034 	movhi	r2,8192
    94f8:	10bfffc4 	addi	r2,r2,-1
    94fc:	2088703a 	and	r4,r4,r2
    9500:	4812d0fa 	srli	r9,r9,3
    9504:	2144b03a 	or	r2,r4,r5
    9508:	003fb006 	br	93cc <__subdf3+0x354>
    950c:	90800044 	addi	r2,r18,1
    9510:	1141ff8c 	andi	r5,r2,2046
    9514:	28005c1e 	bne	r5,zero,9688 <__subdf3+0x610>
    9518:	4b84b03a 	or	r2,r9,r14
    951c:	9000a71e 	bne	r18,zero,97bc <__subdf3+0x744>
    9520:	1000df26 	beq	r2,zero,98a0 <__subdf3+0x828>
    9524:	7b44b03a 	or	r2,r15,r13
    9528:	10008f26 	beq	r2,zero,9768 <__subdf3+0x6f0>
    952c:	7361883a 	add	r16,r14,r13
    9530:	4bc9883a 	add	r4,r9,r15
    9534:	839d803a 	cmpltu	r14,r16,r14
    9538:	2389883a 	add	r4,r4,r14
    953c:	2080202c 	andhi	r2,r4,128
    9540:	103f9b26 	beq	r2,zero,93b0 <__subdf3+0x338>
    9544:	00bfe034 	movhi	r2,65408
    9548:	10bfffc4 	addi	r2,r2,-1
    954c:	2088703a 	and	r4,r4,r2
    9550:	04800044 	movi	r18,1
    9554:	003f9606 	br	93b0 <__subdf3+0x338>
    9558:	50007626 	beq	r10,zero,9734 <__subdf3+0x6bc>
    955c:	4a402034 	orhi	r9,r9,128
    9560:	18800e48 	cmpgei	r2,r3,57
    9564:	10002e1e 	bne	r2,zero,9620 <__subdf3+0x5a8>
    9568:	18800808 	cmpgei	r2,r3,32
    956c:	1000881e 	bne	r2,zero,9790 <__subdf3+0x718>
    9570:	00800804 	movi	r2,32
    9574:	10c5c83a 	sub	r2,r2,r3
    9578:	48a0983a 	sll	r16,r9,r2
    957c:	70c8d83a 	srl	r4,r14,r3
    9580:	709c983a 	sll	r14,r14,r2
    9584:	48d2d83a 	srl	r9,r9,r3
    9588:	8120b03a 	or	r16,r16,r4
    958c:	701cc03a 	cmpne	r14,r14,zero
    9590:	83a0b03a 	or	r16,r16,r14
    9594:	7a5fc83a 	sub	r15,r15,r9
    9598:	00002306 	br	9628 <__subdf3+0x5b0>
    959c:	7361c83a 	sub	r16,r14,r13
    95a0:	4be7c83a 	sub	r19,r9,r15
    95a4:	7409803a 	cmpltu	r4,r14,r16
    95a8:	9927c83a 	sub	r19,r19,r4
    95ac:	9880202c 	andhi	r2,r19,128
    95b0:	1000411e 	bne	r2,zero,96b8 <__subdf3+0x640>
    95b4:	84c4b03a 	or	r2,r16,r19
    95b8:	103eed1e 	bne	r2,zero,9170 <__subdf3+0xf8>
    95bc:	0013883a 	mov	r9,zero
    95c0:	0023883a 	mov	r17,zero
    95c4:	003f8306 	br	93d4 <__subdf3+0x35c>
    95c8:	04800084 	movi	r18,2
    95cc:	00bfe034 	movhi	r2,65408
    95d0:	10bfffc4 	addi	r2,r2,-1
    95d4:	8006d07a 	srli	r3,r16,1
    95d8:	2088703a 	and	r4,r4,r2
    95dc:	200497fa 	slli	r2,r4,31
    95e0:	8400004c 	andi	r16,r16,1
    95e4:	1c20b03a 	or	r16,r3,r16
    95e8:	2008d07a 	srli	r4,r4,1
    95ec:	1420b03a 	or	r16,r2,r16
    95f0:	003ef806 	br	91d4 <__subdf3+0x15c>
    95f4:	1c3ff804 	addi	r16,r3,-32
    95f8:	18800820 	cmpeqi	r2,r3,32
    95fc:	7c0ad83a 	srl	r5,r15,r16
    9600:	1000041e 	bne	r2,zero,9614 <__subdf3+0x59c>
    9604:	00801004 	movi	r2,64
    9608:	10c5c83a 	sub	r2,r2,r3
    960c:	7884983a 	sll	r2,r15,r2
    9610:	689ab03a 	or	r13,r13,r2
    9614:	6820c03a 	cmpne	r16,r13,zero
    9618:	8160b03a 	or	r16,r16,r5
    961c:	003ecc06 	br	9150 <__subdf3+0xd8>
    9620:	4b92b03a 	or	r9,r9,r14
    9624:	4820c03a 	cmpne	r16,r9,zero
    9628:	6c21c83a 	sub	r16,r13,r16
    962c:	6c09803a 	cmpltu	r4,r13,r16
    9630:	7909c83a 	sub	r4,r15,r4
    9634:	4025883a 	mov	r18,r8
    9638:	003ec806 	br	915c <__subdf3+0xe4>
    963c:	4b84b03a 	or	r2,r9,r14
    9640:	10007e26 	beq	r2,zero,983c <__subdf3+0x7c4>
    9644:	18bfffc4 	addi	r2,r3,-1
    9648:	1000a726 	beq	r2,zero,98e8 <__subdf3+0x870>
    964c:	18c1ffd8 	cmpnei	r3,r3,2047
    9650:	18003826 	beq	r3,zero,9734 <__subdf3+0x6bc>
    9654:	1007883a 	mov	r3,r2
    9658:	003f9206 	br	94a4 <__subdf3+0x42c>
    965c:	00800804 	movi	r2,32
    9660:	10c5c83a 	sub	r2,r2,r3
    9664:	78a0983a 	sll	r16,r15,r2
    9668:	68c8d83a 	srl	r4,r13,r3
    966c:	689a983a 	sll	r13,r13,r2
    9670:	78c4d83a 	srl	r2,r15,r3
    9674:	8120b03a 	or	r16,r16,r4
    9678:	681ac03a 	cmpne	r13,r13,zero
    967c:	8360b03a 	or	r16,r16,r13
    9680:	4893883a 	add	r9,r9,r2
    9684:	003f5a06 	br	93f0 <__subdf3+0x378>
    9688:	10c1ffe0 	cmpeqi	r3,r2,2047
    968c:	183f601e 	bne	r3,zero,9410 <__subdf3+0x398>
    9690:	735b883a 	add	r13,r14,r13
    9694:	6b9d803a 	cmpltu	r14,r13,r14
    9698:	4bc9883a 	add	r4,r9,r15
    969c:	2389883a 	add	r4,r4,r14
    96a0:	202097fa 	slli	r16,r4,31
    96a4:	681ad07a 	srli	r13,r13,1
    96a8:	2008d07a 	srli	r4,r4,1
    96ac:	1025883a 	mov	r18,r2
    96b0:	8360b03a 	or	r16,r16,r13
    96b4:	003f3e06 	br	93b0 <__subdf3+0x338>
    96b8:	6ba1c83a 	sub	r16,r13,r14
    96bc:	7a49c83a 	sub	r4,r15,r9
    96c0:	6c1b803a 	cmpltu	r13,r13,r16
    96c4:	2367c83a 	sub	r19,r4,r13
    96c8:	5823883a 	mov	r17,r11
    96cc:	003ea806 	br	9170 <__subdf3+0xf8>
    96d0:	7808977a 	slli	r4,r15,29
    96d4:	00880034 	movhi	r2,8192
    96d8:	10bfffc4 	addi	r2,r2,-1
    96dc:	308c703a 	and	r6,r6,r2
    96e0:	7812d0fa 	srli	r9,r15,3
    96e4:	3104b03a 	or	r2,r6,r4
    96e8:	003f3806 	br	93cc <__subdf3+0x354>
    96ec:	28005a1e 	bne	r5,zero,9858 <__subdf3+0x7e0>
    96f0:	10008526 	beq	r2,zero,9908 <__subdf3+0x890>
    96f4:	7806977a 	slli	r3,r15,29
    96f8:	00880034 	movhi	r2,8192
    96fc:	10bfffc4 	addi	r2,r2,-1
    9700:	3084703a 	and	r2,r6,r2
    9704:	7812d0fa 	srli	r9,r15,3
    9708:	10c4b03a 	or	r2,r2,r3
    970c:	5823883a 	mov	r17,r11
    9710:	003f4906 	br	9438 <__subdf3+0x3c0>
    9714:	7361883a 	add	r16,r14,r13
    9718:	4bc9883a 	add	r4,r9,r15
    971c:	839d803a 	cmpltu	r14,r16,r14
    9720:	2389883a 	add	r4,r4,r14
    9724:	2080202c 	andhi	r2,r4,128
    9728:	103fa71e 	bne	r2,zero,95c8 <__subdf3+0x550>
    972c:	04800044 	movi	r18,1
    9730:	003f1f06 	br	93b0 <__subdf3+0x338>
    9734:	7806977a 	slli	r3,r15,29
    9738:	00880034 	movhi	r2,8192
    973c:	10bfffc4 	addi	r2,r2,-1
    9740:	3084703a 	and	r2,r6,r2
    9744:	7812d0fa 	srli	r9,r15,3
    9748:	10c4b03a 	or	r2,r2,r3
    974c:	003f3a06 	br	9438 <__subdf3+0x3c0>
    9750:	7361c83a 	sub	r16,r14,r13
    9754:	4bc9c83a 	sub	r4,r9,r15
    9758:	741d803a 	cmpltu	r14,r14,r16
    975c:	2389c83a 	sub	r4,r4,r14
    9760:	04800044 	movi	r18,1
    9764:	003e7d06 	br	915c <__subdf3+0xe4>
    9768:	480a977a 	slli	r5,r9,29
    976c:	00880034 	movhi	r2,8192
    9770:	10bfffc4 	addi	r2,r2,-1
    9774:	2084703a 	and	r2,r4,r2
    9778:	4812d0fa 	srli	r9,r9,3
    977c:	1144b03a 	or	r2,r2,r5
    9780:	003f1406 	br	93d4 <__subdf3+0x35c>
    9784:	4b92b03a 	or	r9,r9,r14
    9788:	4820c03a 	cmpne	r16,r9,zero
    978c:	003f5306 	br	94dc <__subdf3+0x464>
    9790:	1c3ff804 	addi	r16,r3,-32
    9794:	19000820 	cmpeqi	r4,r3,32
    9798:	4c04d83a 	srl	r2,r9,r16
    979c:	2000041e 	bne	r4,zero,97b0 <__subdf3+0x738>
    97a0:	01001004 	movi	r4,64
    97a4:	20c7c83a 	sub	r3,r4,r3
    97a8:	48d2983a 	sll	r9,r9,r3
    97ac:	725cb03a 	or	r14,r14,r9
    97b0:	7020c03a 	cmpne	r16,r14,zero
    97b4:	80a0b03a 	or	r16,r16,r2
    97b8:	003f9b06 	br	9628 <__subdf3+0x5b0>
    97bc:	103fdd26 	beq	r2,zero,9734 <__subdf3+0x6bc>
    97c0:	7b5ab03a 	or	r13,r15,r13
    97c4:	480a977a 	slli	r5,r9,29
    97c8:	4812d0fa 	srli	r9,r9,3
    97cc:	6800251e 	bne	r13,zero,9864 <__subdf3+0x7ec>
    97d0:	00880034 	movhi	r2,8192
    97d4:	10bfffc4 	addi	r2,r2,-1
    97d8:	2084703a 	and	r2,r4,r2
    97dc:	1144b03a 	or	r2,r2,r5
    97e0:	003f1506 	br	9438 <__subdf3+0x3c0>
    97e4:	103f7526 	beq	r2,zero,95bc <__subdf3+0x544>
    97e8:	7808977a 	slli	r4,r15,29
    97ec:	00880034 	movhi	r2,8192
    97f0:	10bfffc4 	addi	r2,r2,-1
    97f4:	3084703a 	and	r2,r6,r2
    97f8:	7812d0fa 	srli	r9,r15,3
    97fc:	1104b03a 	or	r2,r2,r4
    9800:	5823883a 	mov	r17,r11
    9804:	003ef306 	br	93d4 <__subdf3+0x35c>
    9808:	6ba1c83a 	sub	r16,r13,r14
    980c:	7a49c83a 	sub	r4,r15,r9
    9810:	6c1b803a 	cmpltu	r13,r13,r16
    9814:	2349c83a 	sub	r4,r4,r13
    9818:	04800044 	movi	r18,1
    981c:	003e4f06 	br	915c <__subdf3+0xe4>
    9820:	4806977a 	slli	r3,r9,29
    9824:	00880034 	movhi	r2,8192
    9828:	10bfffc4 	addi	r2,r2,-1
    982c:	2084703a 	and	r2,r4,r2
    9830:	4812d0fa 	srli	r9,r9,3
    9834:	10c4b03a 	or	r2,r2,r3
    9838:	003eff06 	br	9438 <__subdf3+0x3c0>
    983c:	7808977a 	slli	r4,r15,29
    9840:	00880034 	movhi	r2,8192
    9844:	10bfffc4 	addi	r2,r2,-1
    9848:	3084703a 	and	r2,r6,r2
    984c:	7812d0fa 	srli	r9,r15,3
    9850:	1104b03a 	or	r2,r2,r4
    9854:	003edd06 	br	93cc <__subdf3+0x354>
    9858:	480a977a 	slli	r5,r9,29
    985c:	4812d0fa 	srli	r9,r9,3
    9860:	103fdb26 	beq	r2,zero,97d0 <__subdf3+0x758>
    9864:	00c80034 	movhi	r3,8192
    9868:	18ffffc4 	addi	r3,r3,-1
    986c:	20c4703a 	and	r2,r4,r3
    9870:	4900022c 	andhi	r4,r9,8
    9874:	1144b03a 	or	r2,r2,r5
    9878:	203eef26 	beq	r4,zero,9438 <__subdf3+0x3c0>
    987c:	7808d0fa 	srli	r4,r15,3
    9880:	2140022c 	andhi	r5,r4,8
    9884:	283eec1e 	bne	r5,zero,9438 <__subdf3+0x3c0>
    9888:	7804977a 	slli	r2,r15,29
    988c:	30cc703a 	and	r6,r6,r3
    9890:	5823883a 	mov	r17,r11
    9894:	3084b03a 	or	r2,r6,r2
    9898:	2013883a 	mov	r9,r4
    989c:	003ee606 	br	9438 <__subdf3+0x3c0>
    98a0:	7808977a 	slli	r4,r15,29
    98a4:	00880034 	movhi	r2,8192
    98a8:	10bfffc4 	addi	r2,r2,-1
    98ac:	3084703a 	and	r2,r6,r2
    98b0:	7812d0fa 	srli	r9,r15,3
    98b4:	1104b03a 	or	r2,r2,r4
    98b8:	003ec606 	br	93d4 <__subdf3+0x35c>
    98bc:	18bff804 	addi	r2,r3,-32
    98c0:	19000820 	cmpeqi	r4,r3,32
    98c4:	4884d83a 	srl	r2,r9,r2
    98c8:	2000041e 	bne	r4,zero,98dc <__subdf3+0x864>
    98cc:	01001004 	movi	r4,64
    98d0:	20c7c83a 	sub	r3,r4,r3
    98d4:	48d2983a 	sll	r9,r9,r3
    98d8:	725cb03a 	or	r14,r14,r9
    98dc:	7020c03a 	cmpne	r16,r14,zero
    98e0:	80a0b03a 	or	r16,r16,r2
    98e4:	003efd06 	br	94dc <__subdf3+0x464>
    98e8:	7361883a 	add	r16,r14,r13
    98ec:	4bc9883a 	add	r4,r9,r15
    98f0:	835b803a 	cmpltu	r13,r16,r13
    98f4:	2349883a 	add	r4,r4,r13
    98f8:	003f8a06 	br	9724 <__subdf3+0x6ac>
    98fc:	8104b03a 	or	r2,r16,r4
    9900:	103f2e26 	beq	r2,zero,95bc <__subdf3+0x544>
    9904:	003eaa06 	br	93b0 <__subdf3+0x338>
    9908:	02400434 	movhi	r9,16
    990c:	0023883a 	mov	r17,zero
    9910:	00bfffc4 	movi	r2,-1
    9914:	4a7fffc4 	addi	r9,r9,-1
    9918:	003ec906 	br	9440 <__subdf3+0x3c8>
    991c:	0005883a 	mov	r2,zero
    9920:	00c1ffc4 	movi	r3,2047
    9924:	0009883a 	mov	r4,zero
    9928:	003e4106 	br	9230 <__subdf3+0x1b8>

0000992c <__fixdfsi>:
    992c:	2806d53a 	srli	r3,r5,20
    9930:	01800434 	movhi	r6,16
    9934:	31bfffc4 	addi	r6,r6,-1
    9938:	18c1ffcc 	andi	r3,r3,2047
    993c:	19c0ffd0 	cmplti	r7,r3,1023
    9940:	2810d7fa 	srli	r8,r5,31
    9944:	298a703a 	and	r5,r5,r6
    9948:	3800061e 	bne	r7,zero,9964 <__fixdfsi+0x38>
    994c:	18810790 	cmplti	r2,r3,1054
    9950:	1000061e 	bne	r2,zero,996c <__fixdfsi+0x40>
    9954:	00a00034 	movhi	r2,32768
    9958:	10bfffc4 	addi	r2,r2,-1
    995c:	4085883a 	add	r2,r8,r2
    9960:	f800283a 	ret
    9964:	0005883a 	mov	r2,zero
    9968:	f800283a 	ret
    996c:	01810cc4 	movi	r6,1075
    9970:	30cdc83a 	sub	r6,r6,r3
    9974:	30800808 	cmpgei	r2,r6,32
    9978:	29400434 	orhi	r5,r5,16
    997c:	1000071e 	bne	r2,zero,999c <__fixdfsi+0x70>
    9980:	18befb44 	addi	r2,r3,-1043
    9984:	2884983a 	sll	r2,r5,r2
    9988:	2188d83a 	srl	r4,r4,r6
    998c:	1104b03a 	or	r2,r2,r4
    9990:	403ff526 	beq	r8,zero,9968 <__fixdfsi+0x3c>
    9994:	0085c83a 	sub	r2,zero,r2
    9998:	f800283a 	ret
    999c:	008104c4 	movi	r2,1043
    99a0:	10c5c83a 	sub	r2,r2,r3
    99a4:	2884d83a 	srl	r2,r5,r2
    99a8:	003ff906 	br	9990 <__fixdfsi+0x64>

000099ac <__floatsidf>:
    99ac:	defffd04 	addi	sp,sp,-12
    99b0:	dfc00215 	stw	ra,8(sp)
    99b4:	dc400115 	stw	r17,4(sp)
    99b8:	dc000015 	stw	r16,0(sp)
    99bc:	20001326 	beq	r4,zero,9a0c <__floatsidf+0x60>
    99c0:	2022d7fa 	srli	r17,r4,31
    99c4:	2021883a 	mov	r16,r4
    99c8:	20002416 	blt	r4,zero,9a5c <__floatsidf+0xb0>
    99cc:	8009883a 	mov	r4,r16
    99d0:	0009bf00 	call	9bf0 <__clzsi2>
    99d4:	01010784 	movi	r4,1054
    99d8:	2089c83a 	sub	r4,r4,r2
    99dc:	114002c8 	cmpgei	r5,r2,11
    99e0:	20c1ffcc 	andi	r3,r4,2047
    99e4:	2800161e 	bne	r5,zero,9a40 <__floatsidf+0x94>
    99e8:	010002c4 	movi	r4,11
    99ec:	2089c83a 	sub	r4,r4,r2
    99f0:	810ad83a 	srl	r5,r16,r4
    99f4:	01000434 	movhi	r4,16
    99f8:	10800544 	addi	r2,r2,21
    99fc:	213fffc4 	addi	r4,r4,-1
    9a00:	8084983a 	sll	r2,r16,r2
    9a04:	290a703a 	and	r5,r5,r4
    9a08:	00000406 	br	9a1c <__floatsidf+0x70>
    9a0c:	0023883a 	mov	r17,zero
    9a10:	0007883a 	mov	r3,zero
    9a14:	000b883a 	mov	r5,zero
    9a18:	0005883a 	mov	r2,zero
    9a1c:	1808953a 	slli	r4,r3,20
    9a20:	880697fa 	slli	r3,r17,31
    9a24:	2148b03a 	or	r4,r4,r5
    9a28:	20c6b03a 	or	r3,r4,r3
    9a2c:	dfc00217 	ldw	ra,8(sp)
    9a30:	dc400117 	ldw	r17,4(sp)
    9a34:	dc000017 	ldw	r16,0(sp)
    9a38:	dec00304 	addi	sp,sp,12
    9a3c:	f800283a 	ret
    9a40:	10bffd44 	addi	r2,r2,-11
    9a44:	808a983a 	sll	r5,r16,r2
    9a48:	00800434 	movhi	r2,16
    9a4c:	10bfffc4 	addi	r2,r2,-1
    9a50:	288a703a 	and	r5,r5,r2
    9a54:	0005883a 	mov	r2,zero
    9a58:	003ff006 	br	9a1c <__floatsidf+0x70>
    9a5c:	0121c83a 	sub	r16,zero,r4
    9a60:	003fda06 	br	99cc <__floatsidf+0x20>

00009a64 <__floatunsidf>:
    9a64:	defffe04 	addi	sp,sp,-8
    9a68:	dc000015 	stw	r16,0(sp)
    9a6c:	dfc00115 	stw	ra,4(sp)
    9a70:	2021883a 	mov	r16,r4
    9a74:	20000f26 	beq	r4,zero,9ab4 <__floatunsidf+0x50>
    9a78:	0009bf00 	call	9bf0 <__clzsi2>
    9a7c:	00c10784 	movi	r3,1054
    9a80:	1887c83a 	sub	r3,r3,r2
    9a84:	110002c8 	cmpgei	r4,r2,11
    9a88:	18c1ffcc 	andi	r3,r3,2047
    9a8c:	2000121e 	bne	r4,zero,9ad8 <__floatunsidf+0x74>
    9a90:	014002c4 	movi	r5,11
    9a94:	288bc83a 	sub	r5,r5,r2
    9a98:	814ad83a 	srl	r5,r16,r5
    9a9c:	01000434 	movhi	r4,16
    9aa0:	10800544 	addi	r2,r2,21
    9aa4:	213fffc4 	addi	r4,r4,-1
    9aa8:	80a0983a 	sll	r16,r16,r2
    9aac:	290a703a 	and	r5,r5,r4
    9ab0:	00000206 	br	9abc <__floatunsidf+0x58>
    9ab4:	0007883a 	mov	r3,zero
    9ab8:	000b883a 	mov	r5,zero
    9abc:	1806953a 	slli	r3,r3,20
    9ac0:	8005883a 	mov	r2,r16
    9ac4:	1946b03a 	or	r3,r3,r5
    9ac8:	dfc00117 	ldw	ra,4(sp)
    9acc:	dc000017 	ldw	r16,0(sp)
    9ad0:	dec00204 	addi	sp,sp,8
    9ad4:	f800283a 	ret
    9ad8:	117ffd44 	addi	r5,r2,-11
    9adc:	814a983a 	sll	r5,r16,r5
    9ae0:	00800434 	movhi	r2,16
    9ae4:	10bfffc4 	addi	r2,r2,-1
    9ae8:	288a703a 	and	r5,r5,r2
    9aec:	0021883a 	mov	r16,zero
    9af0:	003ff206 	br	9abc <__floatunsidf+0x58>

00009af4 <__extendsfdf2>:
    9af4:	200ad5fa 	srli	r5,r4,23
    9af8:	defffd04 	addi	sp,sp,-12
    9afc:	dc000015 	stw	r16,0(sp)
    9b00:	29403fcc 	andi	r5,r5,255
    9b04:	04002034 	movhi	r16,128
    9b08:	28800044 	addi	r2,r5,1
    9b0c:	dc400115 	stw	r17,4(sp)
    9b10:	843fffc4 	addi	r16,r16,-1
    9b14:	dfc00215 	stw	ra,8(sp)
    9b18:	10803f8c 	andi	r2,r2,254
    9b1c:	2022d7fa 	srli	r17,r4,31
    9b20:	8120703a 	and	r16,r16,r4
    9b24:	10000d26 	beq	r2,zero,9b5c <__extendsfdf2+0x68>
    9b28:	8008d0fa 	srli	r4,r16,3
    9b2c:	8020977a 	slli	r16,r16,29
    9b30:	28c0e004 	addi	r3,r5,896
    9b34:	180a953a 	slli	r5,r3,20
    9b38:	880697fa 	slli	r3,r17,31
    9b3c:	8005883a 	mov	r2,r16
    9b40:	290ab03a 	or	r5,r5,r4
    9b44:	28c6b03a 	or	r3,r5,r3
    9b48:	dfc00217 	ldw	ra,8(sp)
    9b4c:	dc400117 	ldw	r17,4(sp)
    9b50:	dc000017 	ldw	r16,0(sp)
    9b54:	dec00304 	addi	sp,sp,12
    9b58:	f800283a 	ret
    9b5c:	2800111e 	bne	r5,zero,9ba4 <__extendsfdf2+0xb0>
    9b60:	80001926 	beq	r16,zero,9bc8 <__extendsfdf2+0xd4>
    9b64:	8009883a 	mov	r4,r16
    9b68:	0009bf00 	call	9bf0 <__clzsi2>
    9b6c:	10c002c8 	cmpgei	r3,r2,11
    9b70:	18001b1e 	bne	r3,zero,9be0 <__extendsfdf2+0xec>
    9b74:	010002c4 	movi	r4,11
    9b78:	2089c83a 	sub	r4,r4,r2
    9b7c:	10c00544 	addi	r3,r2,21
    9b80:	810ad83a 	srl	r5,r16,r4
    9b84:	80e0983a 	sll	r16,r16,r3
    9b88:	01000434 	movhi	r4,16
    9b8c:	00c0e244 	movi	r3,905
    9b90:	213fffc4 	addi	r4,r4,-1
    9b94:	1887c83a 	sub	r3,r3,r2
    9b98:	2908703a 	and	r4,r5,r4
    9b9c:	18c1ffcc 	andi	r3,r3,2047
    9ba0:	003fe406 	br	9b34 <__extendsfdf2+0x40>
    9ba4:	80000b26 	beq	r16,zero,9bd4 <__extendsfdf2+0xe0>
    9ba8:	800ad0fa 	srli	r5,r16,3
    9bac:	00800434 	movhi	r2,16
    9bb0:	10bfffc4 	addi	r2,r2,-1
    9bb4:	29000234 	orhi	r4,r5,8
    9bb8:	8020977a 	slli	r16,r16,29
    9bbc:	2088703a 	and	r4,r4,r2
    9bc0:	00c1ffc4 	movi	r3,2047
    9bc4:	003fdb06 	br	9b34 <__extendsfdf2+0x40>
    9bc8:	0007883a 	mov	r3,zero
    9bcc:	0009883a 	mov	r4,zero
    9bd0:	003fd806 	br	9b34 <__extendsfdf2+0x40>
    9bd4:	00c1ffc4 	movi	r3,2047
    9bd8:	0009883a 	mov	r4,zero
    9bdc:	003fd506 	br	9b34 <__extendsfdf2+0x40>
    9be0:	113ffd44 	addi	r4,r2,-11
    9be4:	810a983a 	sll	r5,r16,r4
    9be8:	0021883a 	mov	r16,zero
    9bec:	003fe606 	br	9b88 <__extendsfdf2+0x94>

00009bf0 <__clzsi2>:
    9bf0:	00bfffd4 	movui	r2,65535
    9bf4:	11000436 	bltu	r2,r4,9c08 <__clzsi2+0x18>
    9bf8:	20804030 	cmpltui	r2,r4,256
    9bfc:	10000e26 	beq	r2,zero,9c38 <__clzsi2+0x48>
    9c00:	01400804 	movi	r5,32
    9c04:	00000406 	br	9c18 <__clzsi2+0x28>
    9c08:	00804034 	movhi	r2,256
    9c0c:	20800736 	bltu	r4,r2,9c2c <__clzsi2+0x3c>
    9c10:	2008d63a 	srli	r4,r4,24
    9c14:	01400204 	movi	r5,8
    9c18:	00c00074 	movhi	r3,1
    9c1c:	20c7883a 	add	r3,r4,r3
    9c20:	18b9fb03 	ldbu	r2,-6164(r3)
    9c24:	2885c83a 	sub	r2,r5,r2
    9c28:	f800283a 	ret
    9c2c:	2008d43a 	srli	r4,r4,16
    9c30:	01400404 	movi	r5,16
    9c34:	003ff806 	br	9c18 <__clzsi2+0x28>
    9c38:	2008d23a 	srli	r4,r4,8
    9c3c:	01400604 	movi	r5,24
    9c40:	003ff506 	br	9c18 <__clzsi2+0x28>

00009c44 <__errno>:
    9c44:	00800074 	movhi	r2,1
    9c48:	1088db17 	ldw	r2,9068(r2)
    9c4c:	f800283a 	ret

00009c50 <memcpy>:
    9c50:	30c00430 	cmpltui	r3,r6,16
    9c54:	2005883a 	mov	r2,r4
    9c58:	18002d1e 	bne	r3,zero,9d10 <memcpy+0xc0>
    9c5c:	2906b03a 	or	r3,r5,r4
    9c60:	18c000cc 	andi	r3,r3,3
    9c64:	1800351e 	bne	r3,zero,9d3c <memcpy+0xec>
    9c68:	32fffc04 	addi	r11,r6,-16
    9c6c:	5816d13a 	srli	r11,r11,4
    9c70:	280f883a 	mov	r7,r5
    9c74:	2007883a 	mov	r3,r4
    9c78:	5ac00044 	addi	r11,r11,1
    9c7c:	5816913a 	slli	r11,r11,4
    9c80:	22d5883a 	add	r10,r4,r11
    9c84:	39000117 	ldw	r4,4(r7)
    9c88:	3a400017 	ldw	r9,0(r7)
    9c8c:	3a000217 	ldw	r8,8(r7)
    9c90:	19000115 	stw	r4,4(r3)
    9c94:	39000317 	ldw	r4,12(r7)
    9c98:	1a400015 	stw	r9,0(r3)
    9c9c:	1a000215 	stw	r8,8(r3)
    9ca0:	19000315 	stw	r4,12(r3)
    9ca4:	18c00404 	addi	r3,r3,16
    9ca8:	39c00404 	addi	r7,r7,16
    9cac:	50fff51e 	bne	r10,r3,9c84 <memcpy+0x34>
    9cb0:	3100030c 	andi	r4,r6,12
    9cb4:	2acb883a 	add	r5,r5,r11
    9cb8:	320003cc 	andi	r8,r6,15
    9cbc:	20002226 	beq	r4,zero,9d48 <memcpy+0xf8>
    9cc0:	280f883a 	mov	r7,r5
    9cc4:	1813883a 	mov	r9,r3
    9cc8:	39c00104 	addi	r7,r7,4
    9ccc:	3abfff17 	ldw	r10,-4(r7)
    9cd0:	41c9c83a 	sub	r4,r8,r7
    9cd4:	2909883a 	add	r4,r5,r4
    9cd8:	4a800015 	stw	r10,0(r9)
    9cdc:	21000128 	cmpgeui	r4,r4,4
    9ce0:	4a400104 	addi	r9,r9,4
    9ce4:	203ff81e 	bne	r4,zero,9cc8 <memcpy+0x78>
    9ce8:	413fff04 	addi	r4,r8,-4
    9cec:	2008d0ba 	srli	r4,r4,2
    9cf0:	318000cc 	andi	r6,r6,3
    9cf4:	31ffffc4 	addi	r7,r6,-1
    9cf8:	21000044 	addi	r4,r4,1
    9cfc:	200890ba 	slli	r4,r4,2
    9d00:	1907883a 	add	r3,r3,r4
    9d04:	290b883a 	add	r5,r5,r4
    9d08:	3000041e 	bne	r6,zero,9d1c <memcpy+0xcc>
    9d0c:	f800283a 	ret
    9d10:	2007883a 	mov	r3,r4
    9d14:	31ffffc4 	addi	r7,r6,-1
    9d18:	303ffc26 	beq	r6,zero,9d0c <memcpy+0xbc>
    9d1c:	39c00044 	addi	r7,r7,1
    9d20:	19cf883a 	add	r7,r3,r7
    9d24:	29800003 	ldbu	r6,0(r5)
    9d28:	18c00044 	addi	r3,r3,1
    9d2c:	29400044 	addi	r5,r5,1
    9d30:	19bfffc5 	stb	r6,-1(r3)
    9d34:	38fffb1e 	bne	r7,r3,9d24 <memcpy+0xd4>
    9d38:	f800283a 	ret
    9d3c:	31ffffc4 	addi	r7,r6,-1
    9d40:	2007883a 	mov	r3,r4
    9d44:	003ff506 	br	9d1c <memcpy+0xcc>
    9d48:	400d883a 	mov	r6,r8
    9d4c:	003ff106 	br	9d14 <memcpy+0xc4>

00009d50 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9d50:	defffc04 	addi	sp,sp,-16
    9d54:	df000315 	stw	fp,12(sp)
    9d58:	df000304 	addi	fp,sp,12
    9d5c:	e13fff15 	stw	r4,-4(fp)
    9d60:	e17ffe15 	stw	r5,-8(fp)
    9d64:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    9d68:	e0fffe17 	ldw	r3,-8(fp)
    9d6c:	e0bfff17 	ldw	r2,-4(fp)
    9d70:	18800c26 	beq	r3,r2,9da4 <alt_load_section+0x54>
  {
    while( to != end )
    9d74:	00000806 	br	9d98 <alt_load_section+0x48>
    {
      *to++ = *from++;
    9d78:	e0ffff17 	ldw	r3,-4(fp)
    9d7c:	18800104 	addi	r2,r3,4
    9d80:	e0bfff15 	stw	r2,-4(fp)
    9d84:	e0bffe17 	ldw	r2,-8(fp)
    9d88:	11000104 	addi	r4,r2,4
    9d8c:	e13ffe15 	stw	r4,-8(fp)
    9d90:	18c00017 	ldw	r3,0(r3)
    9d94:	10c00015 	stw	r3,0(r2)
    while( to != end )
    9d98:	e0fffe17 	ldw	r3,-8(fp)
    9d9c:	e0bffd17 	ldw	r2,-12(fp)
    9da0:	18bff51e 	bne	r3,r2,9d78 <alt_load_section+0x28>
    }
  }
}
    9da4:	0001883a 	nop
    9da8:	e037883a 	mov	sp,fp
    9dac:	df000017 	ldw	fp,0(sp)
    9db0:	dec00104 	addi	sp,sp,4
    9db4:	f800283a 	ret

00009db8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9db8:	defffe04 	addi	sp,sp,-8
    9dbc:	dfc00115 	stw	ra,4(sp)
    9dc0:	df000015 	stw	fp,0(sp)
    9dc4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9dc8:	01800074 	movhi	r6,1
    9dcc:	3188e804 	addi	r6,r6,9120
    9dd0:	01400074 	movhi	r5,1
    9dd4:	297a4604 	addi	r5,r5,-5864
    9dd8:	01000074 	movhi	r4,1
    9ddc:	2108e804 	addi	r4,r4,9120
    9de0:	0009d500 	call	9d50 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9de4:	01808034 	movhi	r6,512
    9de8:	31888904 	addi	r6,r6,8740
    9dec:	01408034 	movhi	r5,512
    9df0:	29480804 	addi	r5,r5,8224
    9df4:	01000034 	movhi	r4,0
    9df8:	21000004 	addi	r4,r4,0
    9dfc:	0009d500 	call	9d50 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9e00:	01800074 	movhi	r6,1
    9e04:	31ba4604 	addi	r6,r6,-5864
    9e08:	01400074 	movhi	r5,1
    9e0c:	2979c704 	addi	r5,r5,-6372
    9e10:	01000074 	movhi	r4,1
    9e14:	2139c704 	addi	r4,r4,-6372
    9e18:	0009d500 	call	9d50 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9e1c:	000ae8c0 	call	ae8c <alt_dcache_flush_all>
  alt_icache_flush_all();
    9e20:	000b0840 	call	b084 <alt_icache_flush_all>
}
    9e24:	0001883a 	nop
    9e28:	e037883a 	mov	sp,fp
    9e2c:	dfc00117 	ldw	ra,4(sp)
    9e30:	df000017 	ldw	fp,0(sp)
    9e34:	dec00204 	addi	sp,sp,8
    9e38:	f800283a 	ret

00009e3c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9e3c:	defffd04 	addi	sp,sp,-12
    9e40:	dfc00215 	stw	ra,8(sp)
    9e44:	df000115 	stw	fp,4(sp)
    9e48:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9e4c:	0009883a 	mov	r4,zero
    9e50:	000a1480 	call	a148 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    9e54:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9e58:	000a1840 	call	a184 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9e5c:	01800074 	movhi	r6,1
    9e60:	31ba3b04 	addi	r6,r6,-5908
    9e64:	01400074 	movhi	r5,1
    9e68:	297a3b04 	addi	r5,r5,-5908
    9e6c:	01000074 	movhi	r4,1
    9e70:	213a3b04 	addi	r4,r4,-5908
    9e74:	000b4100 	call	b410 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    9e78:	000afbc0 	call	afbc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    9e7c:	01000074 	movhi	r4,1
    9e80:	212c0804 	addi	r4,r4,-20448
    9e84:	000bc2c0 	call	bc2c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    9e88:	d0aeb717 	ldw	r2,-17700(gp)
    9e8c:	d0eeb817 	ldw	r3,-17696(gp)
    9e90:	d12eb917 	ldw	r4,-17692(gp)
    9e94:	200d883a 	mov	r6,r4
    9e98:	180b883a 	mov	r5,r3
    9e9c:	1009883a 	mov	r4,r2
    9ea0:	0001a2c0 	call	1a2c <main>
    9ea4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9ea8:	01000044 	movi	r4,1
    9eac:	000adb00 	call	adb0 <close>
  exit (result);
    9eb0:	e13fff17 	ldw	r4,-4(fp)
    9eb4:	000bc400 	call	bc40 <exit>

00009eb8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    9eb8:	defff204 	addi	sp,sp,-56
    9ebc:	dfc00a15 	stw	ra,40(sp)
    9ec0:	df000915 	stw	fp,36(sp)
    9ec4:	df000904 	addi	fp,sp,36
    9ec8:	e13ff715 	stw	r4,-36(fp)
    9ecc:	e1400215 	stw	r5,8(fp)
    9ed0:	e1800315 	stw	r6,12(fp)
    9ed4:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
    9ed8:	e0800204 	addi	r2,fp,8
    9edc:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    9ee0:	e0bff717 	ldw	r2,-36(fp)
    9ee4:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
    9ee8:	00006f06 	br	a0a8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    9eec:	e0bffec7 	ldb	r2,-5(fp)
    9ef0:	10800960 	cmpeqi	r2,r2,37
    9ef4:	1000041e 	bne	r2,zero,9f08 <alt_printf+0x50>
        {
            alt_putchar(c);
    9ef8:	e0bffec7 	ldb	r2,-5(fp)
    9efc:	1009883a 	mov	r4,r2
    9f00:	000a0e40 	call	a0e4 <alt_putchar>
    9f04:	00006806 	br	a0a8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    9f08:	e0bfff17 	ldw	r2,-4(fp)
    9f0c:	10c00044 	addi	r3,r2,1
    9f10:	e0ffff15 	stw	r3,-4(fp)
    9f14:	10800003 	ldbu	r2,0(r2)
    9f18:	e0bffec5 	stb	r2,-5(fp)
    9f1c:	e0bffec7 	ldb	r2,-5(fp)
    9f20:	10006926 	beq	r2,zero,a0c8 <alt_printf+0x210>
            {
                if (c == '%')
    9f24:	e0bffec7 	ldb	r2,-5(fp)
    9f28:	10800958 	cmpnei	r2,r2,37
    9f2c:	1000041e 	bne	r2,zero,9f40 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    9f30:	e0bffec7 	ldb	r2,-5(fp)
    9f34:	1009883a 	mov	r4,r2
    9f38:	000a0e40 	call	a0e4 <alt_putchar>
    9f3c:	00005a06 	br	a0a8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
    9f40:	e0bffec7 	ldb	r2,-5(fp)
    9f44:	108018d8 	cmpnei	r2,r2,99
    9f48:	1000081e 	bne	r2,zero,9f6c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
    9f4c:	e0bff817 	ldw	r2,-32(fp)
    9f50:	10c00104 	addi	r3,r2,4
    9f54:	e0fff815 	stw	r3,-32(fp)
    9f58:	10800017 	ldw	r2,0(r2)
    9f5c:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
    9f60:	e13ff917 	ldw	r4,-28(fp)
    9f64:	000a0e40 	call	a0e4 <alt_putchar>
    9f68:	00004f06 	br	a0a8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
    9f6c:	e0bffec7 	ldb	r2,-5(fp)
    9f70:	10801e18 	cmpnei	r2,r2,120
    9f74:	1000341e 	bne	r2,zero,a048 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    9f78:	e0bff817 	ldw	r2,-32(fp)
    9f7c:	10c00104 	addi	r3,r2,4
    9f80:	e0fff815 	stw	r3,-32(fp)
    9f84:	10800017 	ldw	r2,0(r2)
    9f88:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    9f8c:	e0bffb17 	ldw	r2,-20(fp)
    9f90:	1000031e 	bne	r2,zero,9fa0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
    9f94:	01000c04 	movi	r4,48
    9f98:	000a0e40 	call	a0e4 <alt_putchar>
                        continue;
    9f9c:	00004206 	br	a0a8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    9fa0:	00800704 	movi	r2,28
    9fa4:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
    9fa8:	00000306 	br	9fb8 <alt_printf+0x100>
                        digit_shift -= 4;
    9fac:	e0bffd17 	ldw	r2,-12(fp)
    9fb0:	10bfff04 	addi	r2,r2,-4
    9fb4:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
    9fb8:	00c003c4 	movi	r3,15
    9fbc:	e0bffd17 	ldw	r2,-12(fp)
    9fc0:	1884983a 	sll	r2,r3,r2
    9fc4:	1007883a 	mov	r3,r2
    9fc8:	e0bffb17 	ldw	r2,-20(fp)
    9fcc:	1884703a 	and	r2,r3,r2
    9fd0:	103ff626 	beq	r2,zero,9fac <alt_printf+0xf4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    9fd4:	00001906 	br	a03c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    9fd8:	00c003c4 	movi	r3,15
    9fdc:	e0bffd17 	ldw	r2,-12(fp)
    9fe0:	1884983a 	sll	r2,r3,r2
    9fe4:	1007883a 	mov	r3,r2
    9fe8:	e0bffb17 	ldw	r2,-20(fp)
    9fec:	1886703a 	and	r3,r3,r2
    9ff0:	e0bffd17 	ldw	r2,-12(fp)
    9ff4:	1884d83a 	srl	r2,r3,r2
    9ff8:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
    9ffc:	e0bffa17 	ldw	r2,-24(fp)
    a000:	108002a8 	cmpgeui	r2,r2,10
    a004:	1000041e 	bne	r2,zero,a018 <alt_printf+0x160>
                            c = '0' + digit;
    a008:	e0bffa17 	ldw	r2,-24(fp)
    a00c:	10800c04 	addi	r2,r2,48
    a010:	e0bffec5 	stb	r2,-5(fp)
    a014:	00000306 	br	a024 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
    a018:	e0bffa17 	ldw	r2,-24(fp)
    a01c:	108015c4 	addi	r2,r2,87
    a020:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
    a024:	e0bffec7 	ldb	r2,-5(fp)
    a028:	1009883a 	mov	r4,r2
    a02c:	000a0e40 	call	a0e4 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
    a030:	e0bffd17 	ldw	r2,-12(fp)
    a034:	10bfff04 	addi	r2,r2,-4
    a038:	e0bffd15 	stw	r2,-12(fp)
    a03c:	e0bffd17 	ldw	r2,-12(fp)
    a040:	103fe50e 	bge	r2,zero,9fd8 <alt_printf+0x120>
    a044:	00001806 	br	a0a8 <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
    a048:	e0bffec7 	ldb	r2,-5(fp)
    a04c:	10801cd8 	cmpnei	r2,r2,115
    a050:	1000151e 	bne	r2,zero,a0a8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    a054:	e0bff817 	ldw	r2,-32(fp)
    a058:	10c00104 	addi	r3,r2,4
    a05c:	e0fff815 	stw	r3,-32(fp)
    a060:	10800017 	ldw	r2,0(r2)
    a064:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
    a068:	00000906 	br	a090 <alt_printf+0x1d8>
                      alt_putchar(*s++);
    a06c:	e0bffc17 	ldw	r2,-16(fp)
    a070:	10c00044 	addi	r3,r2,1
    a074:	e0fffc15 	stw	r3,-16(fp)
    a078:	10800003 	ldbu	r2,0(r2)
    a07c:	10803fcc 	andi	r2,r2,255
    a080:	1080201c 	xori	r2,r2,128
    a084:	10bfe004 	addi	r2,r2,-128
    a088:	1009883a 	mov	r4,r2
    a08c:	000a0e40 	call	a0e4 <alt_putchar>
                    while(*s)
    a090:	e0bffc17 	ldw	r2,-16(fp)
    a094:	10800003 	ldbu	r2,0(r2)
    a098:	10803fcc 	andi	r2,r2,255
    a09c:	1080201c 	xori	r2,r2,128
    a0a0:	10bfe004 	addi	r2,r2,-128
    a0a4:	103ff11e 	bne	r2,zero,a06c <alt_printf+0x1b4>
    while ((c = *w++) != 0)
    a0a8:	e0bfff17 	ldw	r2,-4(fp)
    a0ac:	10c00044 	addi	r3,r2,1
    a0b0:	e0ffff15 	stw	r3,-4(fp)
    a0b4:	10800003 	ldbu	r2,0(r2)
    a0b8:	e0bffec5 	stb	r2,-5(fp)
    a0bc:	e0bffec7 	ldb	r2,-5(fp)
    a0c0:	103f8a1e 	bne	r2,zero,9eec <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    a0c4:	00000106 	br	a0cc <alt_printf+0x214>
                break;
    a0c8:	0001883a 	nop
}
    a0cc:	0001883a 	nop
    a0d0:	e037883a 	mov	sp,fp
    a0d4:	dfc00117 	ldw	ra,4(sp)
    a0d8:	df000017 	ldw	fp,0(sp)
    a0dc:	dec00504 	addi	sp,sp,20
    a0e0:	f800283a 	ret

0000a0e4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    a0e4:	defffd04 	addi	sp,sp,-12
    a0e8:	dfc00215 	stw	ra,8(sp)
    a0ec:	df000115 	stw	fp,4(sp)
    a0f0:	df000104 	addi	fp,sp,4
    a0f4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    a0f8:	e13fff17 	ldw	r4,-4(fp)
    a0fc:	000bcf40 	call	bcf4 <putchar>
#endif
#endif
}
    a100:	e037883a 	mov	sp,fp
    a104:	dfc00117 	ldw	ra,4(sp)
    a108:	df000017 	ldw	fp,0(sp)
    a10c:	dec00204 	addi	sp,sp,8
    a110:	f800283a 	ret

0000a114 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a114:	defffd04 	addi	sp,sp,-12
    a118:	dfc00215 	stw	ra,8(sp)
    a11c:	df000115 	stw	fp,4(sp)
    a120:	df000104 	addi	fp,sp,4
    a124:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a128:	d1600b04 	addi	r5,gp,-32724
    a12c:	e13fff17 	ldw	r4,-4(fp)
    a130:	000af140 	call	af14 <alt_dev_llist_insert>
}
    a134:	e037883a 	mov	sp,fp
    a138:	dfc00117 	ldw	ra,4(sp)
    a13c:	df000017 	ldw	fp,0(sp)
    a140:	dec00204 	addi	sp,sp,8
    a144:	f800283a 	ret

0000a148 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a148:	defffd04 	addi	sp,sp,-12
    a14c:	dfc00215 	stw	ra,8(sp)
    a150:	df000115 	stw	fp,4(sp)
    a154:	df000104 	addi	fp,sp,4
    a158:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2E, nios2e);
    a15c:	000b9200 	call	b920 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a160:	00800044 	movi	r2,1
    a164:	1001703a 	wrctl	status,r2
}
    a168:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    a16c:	0001883a 	nop
    a170:	e037883a 	mov	sp,fp
    a174:	dfc00117 	ldw	ra,4(sp)
    a178:	df000017 	ldw	fp,0(sp)
    a17c:	dec00204 	addi	sp,sp,8
    a180:	f800283a 	ret

0000a184 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a184:	defffe04 	addi	sp,sp,-8
    a188:	dfc00115 	stw	ra,4(sp)
    a18c:	df000015 	stw	fp,0(sp)
    a190:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    a194:	000d883a 	mov	r6,zero
    a198:	000b883a 	mov	r5,zero
    a19c:	01000074 	movhi	r4,1
    a1a0:	21035904 	addi	r4,r4,3428
    a1a4:	000a3300 	call	a330 <altera_avalon_jtag_uart_init>
    a1a8:	01000074 	movhi	r4,1
    a1ac:	21034f04 	addi	r4,r4,3388
    a1b0:	000a1140 	call	a114 <alt_dev_reg>
}
    a1b4:	0001883a 	nop
    a1b8:	e037883a 	mov	sp,fp
    a1bc:	dfc00117 	ldw	ra,4(sp)
    a1c0:	df000017 	ldw	fp,0(sp)
    a1c4:	dec00204 	addi	sp,sp,8
    a1c8:	f800283a 	ret

0000a1cc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a1cc:	defffa04 	addi	sp,sp,-24
    a1d0:	dfc00515 	stw	ra,20(sp)
    a1d4:	df000415 	stw	fp,16(sp)
    a1d8:	df000404 	addi	fp,sp,16
    a1dc:	e13ffe15 	stw	r4,-8(fp)
    a1e0:	e17ffd15 	stw	r5,-12(fp)
    a1e4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a1e8:	e0bffe17 	ldw	r2,-8(fp)
    a1ec:	10800017 	ldw	r2,0(r2)
    a1f0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    a1f4:	e0bfff17 	ldw	r2,-4(fp)
    a1f8:	10c00a04 	addi	r3,r2,40
    a1fc:	e0bffe17 	ldw	r2,-8(fp)
    a200:	10800217 	ldw	r2,8(r2)
    a204:	100f883a 	mov	r7,r2
    a208:	e1bffc17 	ldw	r6,-16(fp)
    a20c:	e17ffd17 	ldw	r5,-12(fp)
    a210:	1809883a 	mov	r4,r3
    a214:	000a7f80 	call	a7f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    a218:	e037883a 	mov	sp,fp
    a21c:	dfc00117 	ldw	ra,4(sp)
    a220:	df000017 	ldw	fp,0(sp)
    a224:	dec00204 	addi	sp,sp,8
    a228:	f800283a 	ret

0000a22c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a22c:	defffa04 	addi	sp,sp,-24
    a230:	dfc00515 	stw	ra,20(sp)
    a234:	df000415 	stw	fp,16(sp)
    a238:	df000404 	addi	fp,sp,16
    a23c:	e13ffe15 	stw	r4,-8(fp)
    a240:	e17ffd15 	stw	r5,-12(fp)
    a244:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a248:	e0bffe17 	ldw	r2,-8(fp)
    a24c:	10800017 	ldw	r2,0(r2)
    a250:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    a254:	e0bfff17 	ldw	r2,-4(fp)
    a258:	10c00a04 	addi	r3,r2,40
    a25c:	e0bffe17 	ldw	r2,-8(fp)
    a260:	10800217 	ldw	r2,8(r2)
    a264:	100f883a 	mov	r7,r2
    a268:	e1bffc17 	ldw	r6,-16(fp)
    a26c:	e17ffd17 	ldw	r5,-12(fp)
    a270:	1809883a 	mov	r4,r3
    a274:	000aa180 	call	aa18 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    a278:	e037883a 	mov	sp,fp
    a27c:	dfc00117 	ldw	ra,4(sp)
    a280:	df000017 	ldw	fp,0(sp)
    a284:	dec00204 	addi	sp,sp,8
    a288:	f800283a 	ret

0000a28c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    a28c:	defffc04 	addi	sp,sp,-16
    a290:	dfc00315 	stw	ra,12(sp)
    a294:	df000215 	stw	fp,8(sp)
    a298:	df000204 	addi	fp,sp,8
    a29c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a2a0:	e0bffe17 	ldw	r2,-8(fp)
    a2a4:	10800017 	ldw	r2,0(r2)
    a2a8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    a2ac:	e0bfff17 	ldw	r2,-4(fp)
    a2b0:	10c00a04 	addi	r3,r2,40
    a2b4:	e0bffe17 	ldw	r2,-8(fp)
    a2b8:	10800217 	ldw	r2,8(r2)
    a2bc:	100b883a 	mov	r5,r2
    a2c0:	1809883a 	mov	r4,r3
    a2c4:	000a69c0 	call	a69c <altera_avalon_jtag_uart_close>
}
    a2c8:	e037883a 	mov	sp,fp
    a2cc:	dfc00117 	ldw	ra,4(sp)
    a2d0:	df000017 	ldw	fp,0(sp)
    a2d4:	dec00204 	addi	sp,sp,8
    a2d8:	f800283a 	ret

0000a2dc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    a2dc:	defffa04 	addi	sp,sp,-24
    a2e0:	dfc00515 	stw	ra,20(sp)
    a2e4:	df000415 	stw	fp,16(sp)
    a2e8:	df000404 	addi	fp,sp,16
    a2ec:	e13ffe15 	stw	r4,-8(fp)
    a2f0:	e17ffd15 	stw	r5,-12(fp)
    a2f4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    a2f8:	e0bffe17 	ldw	r2,-8(fp)
    a2fc:	10800017 	ldw	r2,0(r2)
    a300:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    a304:	e0bfff17 	ldw	r2,-4(fp)
    a308:	10800a04 	addi	r2,r2,40
    a30c:	e1bffc17 	ldw	r6,-16(fp)
    a310:	e17ffd17 	ldw	r5,-12(fp)
    a314:	1009883a 	mov	r4,r2
    a318:	000a7040 	call	a704 <altera_avalon_jtag_uart_ioctl>
}
    a31c:	e037883a 	mov	sp,fp
    a320:	dfc00117 	ldw	ra,4(sp)
    a324:	df000017 	ldw	fp,0(sp)
    a328:	dec00204 	addi	sp,sp,8
    a32c:	f800283a 	ret

0000a330 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    a330:	defffa04 	addi	sp,sp,-24
    a334:	dfc00515 	stw	ra,20(sp)
    a338:	df000415 	stw	fp,16(sp)
    a33c:	df000404 	addi	fp,sp,16
    a340:	e13fff15 	stw	r4,-4(fp)
    a344:	e17ffe15 	stw	r5,-8(fp)
    a348:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a34c:	e0bfff17 	ldw	r2,-4(fp)
    a350:	00c00044 	movi	r3,1
    a354:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    a358:	e0bfff17 	ldw	r2,-4(fp)
    a35c:	10800017 	ldw	r2,0(r2)
    a360:	10800104 	addi	r2,r2,4
    a364:	1007883a 	mov	r3,r2
    a368:	e0bfff17 	ldw	r2,-4(fp)
    a36c:	10800817 	ldw	r2,32(r2)
    a370:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    a374:	e0bffe17 	ldw	r2,-8(fp)
    a378:	e0fffd17 	ldw	r3,-12(fp)
    a37c:	d8000015 	stw	zero,0(sp)
    a380:	e1ffff17 	ldw	r7,-4(fp)
    a384:	01800074 	movhi	r6,1
    a388:	31a8fc04 	addi	r6,r6,-23568
    a38c:	180b883a 	mov	r5,r3
    a390:	1009883a 	mov	r4,r2
    a394:	000b0a40 	call	b0a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    a398:	e0bfff17 	ldw	r2,-4(fp)
    a39c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    a3a0:	e0bfff17 	ldw	r2,-4(fp)
    a3a4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    a3a8:	d0eebb17 	ldw	r3,-17684(gp)
    a3ac:	e1ffff17 	ldw	r7,-4(fp)
    a3b0:	01800074 	movhi	r6,1
    a3b4:	31a97f04 	addi	r6,r6,-23044
    a3b8:	180b883a 	mov	r5,r3
    a3bc:	1009883a 	mov	r4,r2
    a3c0:	000ac400 	call	ac40 <alt_alarm_start>
    a3c4:	1000040e 	bge	r2,zero,a3d8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    a3c8:	e0ffff17 	ldw	r3,-4(fp)
    a3cc:	00a00034 	movhi	r2,32768
    a3d0:	10bfffc4 	addi	r2,r2,-1
    a3d4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    a3d8:	0001883a 	nop
    a3dc:	e037883a 	mov	sp,fp
    a3e0:	dfc00117 	ldw	ra,4(sp)
    a3e4:	df000017 	ldw	fp,0(sp)
    a3e8:	dec00204 	addi	sp,sp,8
    a3ec:	f800283a 	ret

0000a3f0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    a3f0:	defff804 	addi	sp,sp,-32
    a3f4:	df000715 	stw	fp,28(sp)
    a3f8:	df000704 	addi	fp,sp,28
    a3fc:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    a400:	e0bff917 	ldw	r2,-28(fp)
    a404:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    a408:	e0bffd17 	ldw	r2,-12(fp)
    a40c:	10800017 	ldw	r2,0(r2)
    a410:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a414:	e0bffc17 	ldw	r2,-16(fp)
    a418:	10800104 	addi	r2,r2,4
    a41c:	10800037 	ldwio	r2,0(r2)
    a420:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    a424:	e0bffb17 	ldw	r2,-20(fp)
    a428:	1080c00c 	andi	r2,r2,768
    a42c:	10006d26 	beq	r2,zero,a5e4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    a430:	e0bffb17 	ldw	r2,-20(fp)
    a434:	1080400c 	andi	r2,r2,256
    a438:	10003526 	beq	r2,zero,a510 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    a43c:	00800074 	movhi	r2,1
    a440:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a444:	e0bffd17 	ldw	r2,-12(fp)
    a448:	10800a17 	ldw	r2,40(r2)
    a44c:	10800044 	addi	r2,r2,1
    a450:	1081ffcc 	andi	r2,r2,2047
    a454:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    a458:	e0bffd17 	ldw	r2,-12(fp)
    a45c:	10800b17 	ldw	r2,44(r2)
    a460:	e0fffa17 	ldw	r3,-24(fp)
    a464:	18801526 	beq	r3,r2,a4bc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    a468:	e0bffc17 	ldw	r2,-16(fp)
    a46c:	10800037 	ldwio	r2,0(r2)
    a470:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    a474:	e0bfff17 	ldw	r2,-4(fp)
    a478:	10a0000c 	andi	r2,r2,32768
    a47c:	10001126 	beq	r2,zero,a4c4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    a480:	e0bffd17 	ldw	r2,-12(fp)
    a484:	10800a17 	ldw	r2,40(r2)
    a488:	e0ffff17 	ldw	r3,-4(fp)
    a48c:	1809883a 	mov	r4,r3
    a490:	e0fffd17 	ldw	r3,-12(fp)
    a494:	1885883a 	add	r2,r3,r2
    a498:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a49c:	e0bffd17 	ldw	r2,-12(fp)
    a4a0:	10800a17 	ldw	r2,40(r2)
    a4a4:	10800044 	addi	r2,r2,1
    a4a8:	10c1ffcc 	andi	r3,r2,2047
    a4ac:	e0bffd17 	ldw	r2,-12(fp)
    a4b0:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    a4b4:	0001883a 	nop
      {
    a4b8:	003fe206 	br	a444 <altera_avalon_jtag_uart_irq+0x54>
          break;
    a4bc:	0001883a 	nop
    a4c0:	00000106 	br	a4c8 <altera_avalon_jtag_uart_irq+0xd8>
          break;
    a4c4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    a4c8:	e0bfff17 	ldw	r2,-4(fp)
    a4cc:	10bfffec 	andhi	r2,r2,65535
    a4d0:	10000f26 	beq	r2,zero,a510 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a4d4:	e0bffd17 	ldw	r2,-12(fp)
    a4d8:	10c00817 	ldw	r3,32(r2)
    a4dc:	00bfff84 	movi	r2,-2
    a4e0:	1886703a 	and	r3,r3,r2
    a4e4:	e0bffd17 	ldw	r2,-12(fp)
    a4e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    a4ec:	e0bffc17 	ldw	r2,-16(fp)
    a4f0:	10800104 	addi	r2,r2,4
    a4f4:	1007883a 	mov	r3,r2
    a4f8:	e0bffd17 	ldw	r2,-12(fp)
    a4fc:	10800817 	ldw	r2,32(r2)
    a500:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a504:	e0bffc17 	ldw	r2,-16(fp)
    a508:	10800104 	addi	r2,r2,4
    a50c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    a510:	e0bffb17 	ldw	r2,-20(fp)
    a514:	1080800c 	andi	r2,r2,512
    a518:	103fbe26 	beq	r2,zero,a414 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    a51c:	e0bffb17 	ldw	r2,-20(fp)
    a520:	1004d43a 	srli	r2,r2,16
    a524:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    a528:	00001406 	br	a57c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    a52c:	e0bffc17 	ldw	r2,-16(fp)
    a530:	e0fffd17 	ldw	r3,-12(fp)
    a534:	18c00d17 	ldw	r3,52(r3)
    a538:	e13ffd17 	ldw	r4,-12(fp)
    a53c:	20c7883a 	add	r3,r4,r3
    a540:	18c20e03 	ldbu	r3,2104(r3)
    a544:	18c03fcc 	andi	r3,r3,255
    a548:	18c0201c 	xori	r3,r3,128
    a54c:	18ffe004 	addi	r3,r3,-128
    a550:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a554:	e0bffd17 	ldw	r2,-12(fp)
    a558:	10800d17 	ldw	r2,52(r2)
    a55c:	10800044 	addi	r2,r2,1
    a560:	10c1ffcc 	andi	r3,r2,2047
    a564:	e0bffd17 	ldw	r2,-12(fp)
    a568:	10c00d15 	stw	r3,52(r2)
    a56c:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    a570:	e0bffe17 	ldw	r2,-8(fp)
    a574:	10bfffc4 	addi	r2,r2,-1
    a578:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
    a57c:	e0bffe17 	ldw	r2,-8(fp)
    a580:	10000526 	beq	r2,zero,a598 <altera_avalon_jtag_uart_irq+0x1a8>
    a584:	e0bffd17 	ldw	r2,-12(fp)
    a588:	10c00d17 	ldw	r3,52(r2)
    a58c:	e0bffd17 	ldw	r2,-12(fp)
    a590:	10800c17 	ldw	r2,48(r2)
    a594:	18bfe51e 	bne	r3,r2,a52c <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
    a598:	e0bffe17 	ldw	r2,-8(fp)
    a59c:	103f9d26 	beq	r2,zero,a414 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    a5a0:	e0bffd17 	ldw	r2,-12(fp)
    a5a4:	10c00817 	ldw	r3,32(r2)
    a5a8:	00bfff44 	movi	r2,-3
    a5ac:	1886703a 	and	r3,r3,r2
    a5b0:	e0bffd17 	ldw	r2,-12(fp)
    a5b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    a5b8:	e0bffd17 	ldw	r2,-12(fp)
    a5bc:	10800017 	ldw	r2,0(r2)
    a5c0:	10800104 	addi	r2,r2,4
    a5c4:	1007883a 	mov	r3,r2
    a5c8:	e0bffd17 	ldw	r2,-12(fp)
    a5cc:	10800817 	ldw	r2,32(r2)
    a5d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a5d4:	e0bffc17 	ldw	r2,-16(fp)
    a5d8:	10800104 	addi	r2,r2,4
    a5dc:	10800037 	ldwio	r2,0(r2)
  {
    a5e0:	003f8c06 	br	a414 <altera_avalon_jtag_uart_irq+0x24>
      break;
    a5e4:	0001883a 	nop
      }
    }
  }
}
    a5e8:	0001883a 	nop
    a5ec:	e037883a 	mov	sp,fp
    a5f0:	df000017 	ldw	fp,0(sp)
    a5f4:	dec00104 	addi	sp,sp,4
    a5f8:	f800283a 	ret

0000a5fc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    a5fc:	defffc04 	addi	sp,sp,-16
    a600:	df000315 	stw	fp,12(sp)
    a604:	df000304 	addi	fp,sp,12
    a608:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    a60c:	e0bffd17 	ldw	r2,-12(fp)
    a610:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    a614:	e0bfff17 	ldw	r2,-4(fp)
    a618:	10800017 	ldw	r2,0(r2)
    a61c:	10800104 	addi	r2,r2,4
    a620:	10800037 	ldwio	r2,0(r2)
    a624:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    a628:	e0bffe17 	ldw	r2,-8(fp)
    a62c:	1081000c 	andi	r2,r2,1024
    a630:	10000b26 	beq	r2,zero,a660 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    a634:	e0bfff17 	ldw	r2,-4(fp)
    a638:	10800017 	ldw	r2,0(r2)
    a63c:	10800104 	addi	r2,r2,4
    a640:	1007883a 	mov	r3,r2
    a644:	e0bfff17 	ldw	r2,-4(fp)
    a648:	10800817 	ldw	r2,32(r2)
    a64c:	10810014 	ori	r2,r2,1024
    a650:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    a654:	e0bfff17 	ldw	r2,-4(fp)
    a658:	10000915 	stw	zero,36(r2)
    a65c:	00000a06 	br	a688 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    a660:	e0bfff17 	ldw	r2,-4(fp)
    a664:	10c00917 	ldw	r3,36(r2)
    a668:	00a00034 	movhi	r2,32768
    a66c:	10bfff04 	addi	r2,r2,-4
    a670:	10c00536 	bltu	r2,r3,a688 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    a674:	e0bfff17 	ldw	r2,-4(fp)
    a678:	10800917 	ldw	r2,36(r2)
    a67c:	10c00044 	addi	r3,r2,1
    a680:	e0bfff17 	ldw	r2,-4(fp)
    a684:	10c00915 	stw	r3,36(r2)
    a688:	d0aebb17 	ldw	r2,-17684(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    a68c:	e037883a 	mov	sp,fp
    a690:	df000017 	ldw	fp,0(sp)
    a694:	dec00104 	addi	sp,sp,4
    a698:	f800283a 	ret

0000a69c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    a69c:	defffd04 	addi	sp,sp,-12
    a6a0:	df000215 	stw	fp,8(sp)
    a6a4:	df000204 	addi	fp,sp,8
    a6a8:	e13fff15 	stw	r4,-4(fp)
    a6ac:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    a6b0:	00000506 	br	a6c8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    a6b4:	e0bffe17 	ldw	r2,-8(fp)
    a6b8:	1090000c 	andi	r2,r2,16384
    a6bc:	10000226 	beq	r2,zero,a6c8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    a6c0:	00bffd44 	movi	r2,-11
    a6c4:	00000b06 	br	a6f4 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    a6c8:	e0bfff17 	ldw	r2,-4(fp)
    a6cc:	10c00d17 	ldw	r3,52(r2)
    a6d0:	e0bfff17 	ldw	r2,-4(fp)
    a6d4:	10800c17 	ldw	r2,48(r2)
    a6d8:	18800526 	beq	r3,r2,a6f0 <altera_avalon_jtag_uart_close+0x54>
    a6dc:	e0bfff17 	ldw	r2,-4(fp)
    a6e0:	10c00917 	ldw	r3,36(r2)
    a6e4:	e0bfff17 	ldw	r2,-4(fp)
    a6e8:	10800117 	ldw	r2,4(r2)
    a6ec:	18bff136 	bltu	r3,r2,a6b4 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
    a6f0:	0005883a 	mov	r2,zero
}
    a6f4:	e037883a 	mov	sp,fp
    a6f8:	df000017 	ldw	fp,0(sp)
    a6fc:	dec00104 	addi	sp,sp,4
    a700:	f800283a 	ret

0000a704 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    a704:	defffa04 	addi	sp,sp,-24
    a708:	df000515 	stw	fp,20(sp)
    a70c:	df000504 	addi	fp,sp,20
    a710:	e13ffd15 	stw	r4,-12(fp)
    a714:	e17ffc15 	stw	r5,-16(fp)
    a718:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
    a71c:	00bff9c4 	movi	r2,-25
    a720:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
    a724:	e0bffc17 	ldw	r2,-16(fp)
    a728:	109a8060 	cmpeqi	r2,r2,27137
    a72c:	1000041e 	bne	r2,zero,a740 <altera_avalon_jtag_uart_ioctl+0x3c>
    a730:	e0bffc17 	ldw	r2,-16(fp)
    a734:	109a80a0 	cmpeqi	r2,r2,27138
    a738:	1000181e 	bne	r2,zero,a79c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    a73c:	00002906 	br	a7e4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    a740:	e0bffd17 	ldw	r2,-12(fp)
    a744:	10c00117 	ldw	r3,4(r2)
    a748:	00a00034 	movhi	r2,32768
    a74c:	10bfffc4 	addi	r2,r2,-1
    a750:	18802126 	beq	r3,r2,a7d8 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
    a754:	e0bffb17 	ldw	r2,-20(fp)
    a758:	10800017 	ldw	r2,0(r2)
    a75c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    a760:	e0bffe17 	ldw	r2,-8(fp)
    a764:	10800090 	cmplti	r2,r2,2
    a768:	1000061e 	bne	r2,zero,a784 <altera_avalon_jtag_uart_ioctl+0x80>
    a76c:	e0fffe17 	ldw	r3,-8(fp)
    a770:	00a00034 	movhi	r2,32768
    a774:	10bfffc4 	addi	r2,r2,-1
    a778:	18800226 	beq	r3,r2,a784 <altera_avalon_jtag_uart_ioctl+0x80>
    a77c:	e0bffe17 	ldw	r2,-8(fp)
    a780:	00000206 	br	a78c <altera_avalon_jtag_uart_ioctl+0x88>
    a784:	00a00034 	movhi	r2,32768
    a788:	10bfff84 	addi	r2,r2,-2
    a78c:	e0fffd17 	ldw	r3,-12(fp)
    a790:	18800115 	stw	r2,4(r3)
      rc = 0;
    a794:	e03fff15 	stw	zero,-4(fp)
    break;
    a798:	00000f06 	br	a7d8 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
    a79c:	e0bffd17 	ldw	r2,-12(fp)
    a7a0:	10c00117 	ldw	r3,4(r2)
    a7a4:	00a00034 	movhi	r2,32768
    a7a8:	10bfffc4 	addi	r2,r2,-1
    a7ac:	18800c26 	beq	r3,r2,a7e0 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    a7b0:	e0bffd17 	ldw	r2,-12(fp)
    a7b4:	10c00917 	ldw	r3,36(r2)
    a7b8:	e0bffd17 	ldw	r2,-12(fp)
    a7bc:	10800117 	ldw	r2,4(r2)
    a7c0:	1885803a 	cmpltu	r2,r3,r2
    a7c4:	10c03fcc 	andi	r3,r2,255
    a7c8:	e0bffb17 	ldw	r2,-20(fp)
    a7cc:	10c00015 	stw	r3,0(r2)
      rc = 0;
    a7d0:	e03fff15 	stw	zero,-4(fp)
    break;
    a7d4:	00000206 	br	a7e0 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
    a7d8:	0001883a 	nop
    a7dc:	00000106 	br	a7e4 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
    a7e0:	0001883a 	nop
  }

  return rc;
    a7e4:	e0bfff17 	ldw	r2,-4(fp)
}
    a7e8:	e037883a 	mov	sp,fp
    a7ec:	df000017 	ldw	fp,0(sp)
    a7f0:	dec00104 	addi	sp,sp,4
    a7f4:	f800283a 	ret

0000a7f8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    a7f8:	defff304 	addi	sp,sp,-52
    a7fc:	dfc00c15 	stw	ra,48(sp)
    a800:	df000b15 	stw	fp,44(sp)
    a804:	df000b04 	addi	fp,sp,44
    a808:	e13ff815 	stw	r4,-32(fp)
    a80c:	e17ff715 	stw	r5,-36(fp)
    a810:	e1bff615 	stw	r6,-40(fp)
    a814:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
    a818:	e0bff717 	ldw	r2,-36(fp)
    a81c:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    a820:	00004706 	br	a940 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    a824:	e0bff817 	ldw	r2,-32(fp)
    a828:	10800a17 	ldw	r2,40(r2)
    a82c:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
    a830:	e0bff817 	ldw	r2,-32(fp)
    a834:	10800b17 	ldw	r2,44(r2)
    a838:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
    a83c:	e0fffd17 	ldw	r3,-12(fp)
    a840:	e0bffc17 	ldw	r2,-16(fp)
    a844:	18800536 	bltu	r3,r2,a85c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    a848:	e0fffd17 	ldw	r3,-12(fp)
    a84c:	e0bffc17 	ldw	r2,-16(fp)
    a850:	1885c83a 	sub	r2,r3,r2
    a854:	e0bffe15 	stw	r2,-8(fp)
    a858:	00000406 	br	a86c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    a85c:	00c20004 	movi	r3,2048
    a860:	e0bffc17 	ldw	r2,-16(fp)
    a864:	1885c83a 	sub	r2,r3,r2
    a868:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    a86c:	e0bffe17 	ldw	r2,-8(fp)
    a870:	10001e26 	beq	r2,zero,a8ec <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    a874:	e0fff617 	ldw	r3,-40(fp)
    a878:	e0bffe17 	ldw	r2,-8(fp)
    a87c:	1880022e 	bgeu	r3,r2,a888 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    a880:	e0bff617 	ldw	r2,-40(fp)
    a884:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    a888:	e0bff817 	ldw	r2,-32(fp)
    a88c:	10c00e04 	addi	r3,r2,56
    a890:	e0bffc17 	ldw	r2,-16(fp)
    a894:	1885883a 	add	r2,r3,r2
    a898:	e1bffe17 	ldw	r6,-8(fp)
    a89c:	100b883a 	mov	r5,r2
    a8a0:	e13fff17 	ldw	r4,-4(fp)
    a8a4:	0009c500 	call	9c50 <memcpy>
      ptr   += n;
    a8a8:	e0ffff17 	ldw	r3,-4(fp)
    a8ac:	e0bffe17 	ldw	r2,-8(fp)
    a8b0:	1885883a 	add	r2,r3,r2
    a8b4:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
    a8b8:	e0fff617 	ldw	r3,-40(fp)
    a8bc:	e0bffe17 	ldw	r2,-8(fp)
    a8c0:	1885c83a 	sub	r2,r3,r2
    a8c4:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a8c8:	e0fffc17 	ldw	r3,-16(fp)
    a8cc:	e0bffe17 	ldw	r2,-8(fp)
    a8d0:	1885883a 	add	r2,r3,r2
    a8d4:	10c1ffcc 	andi	r3,r2,2047
    a8d8:	e0bff817 	ldw	r2,-32(fp)
    a8dc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    a8e0:	e0bff617 	ldw	r2,-40(fp)
    a8e4:	00bfcf16 	blt	zero,r2,a824 <altera_avalon_jtag_uart_read+0x2c>
    a8e8:	00000106 	br	a8f0 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
    a8ec:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
    a8f0:	e0ffff17 	ldw	r3,-4(fp)
    a8f4:	e0bff717 	ldw	r2,-36(fp)
    a8f8:	1880141e 	bne	r3,r2,a94c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    a8fc:	e0bff517 	ldw	r2,-44(fp)
    a900:	1090000c 	andi	r2,r2,16384
    a904:	1000131e 	bne	r2,zero,a954 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    a908:	0001883a 	nop
    a90c:	e0bff817 	ldw	r2,-32(fp)
    a910:	10800a17 	ldw	r2,40(r2)
    a914:	e0fffd17 	ldw	r3,-12(fp)
    a918:	1880051e 	bne	r3,r2,a930 <altera_avalon_jtag_uart_read+0x138>
    a91c:	e0bff817 	ldw	r2,-32(fp)
    a920:	10c00917 	ldw	r3,36(r2)
    a924:	e0bff817 	ldw	r2,-32(fp)
    a928:	10800117 	ldw	r2,4(r2)
    a92c:	18bff736 	bltu	r3,r2,a90c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    a930:	e0bff817 	ldw	r2,-32(fp)
    a934:	10800a17 	ldw	r2,40(r2)
    a938:	e0fffd17 	ldw	r3,-12(fp)
    a93c:	18800726 	beq	r3,r2,a95c <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
    a940:	e0bff617 	ldw	r2,-40(fp)
    a944:	00bfb716 	blt	zero,r2,a824 <altera_avalon_jtag_uart_read+0x2c>
    a948:	00000506 	br	a960 <altera_avalon_jtag_uart_read+0x168>
      break;
    a94c:	0001883a 	nop
    a950:	00000306 	br	a960 <altera_avalon_jtag_uart_read+0x168>
      break;
    a954:	0001883a 	nop
    a958:	00000106 	br	a960 <altera_avalon_jtag_uart_read+0x168>
      break;
    a95c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    a960:	e0ffff17 	ldw	r3,-4(fp)
    a964:	e0bff717 	ldw	r2,-36(fp)
    a968:	18801926 	beq	r3,r2,a9d0 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
    a96c:	0005303a 	rdctl	r2,status
    a970:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a974:	e0fff917 	ldw	r3,-28(fp)
    a978:	00bfff84 	movi	r2,-2
    a97c:	1884703a 	and	r2,r3,r2
    a980:	1001703a 	wrctl	status,r2
  return context;
    a984:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    a988:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a98c:	e0bff817 	ldw	r2,-32(fp)
    a990:	10800817 	ldw	r2,32(r2)
    a994:	10c00054 	ori	r3,r2,1
    a998:	e0bff817 	ldw	r2,-32(fp)
    a99c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    a9a0:	e0bff817 	ldw	r2,-32(fp)
    a9a4:	10800017 	ldw	r2,0(r2)
    a9a8:	10800104 	addi	r2,r2,4
    a9ac:	1007883a 	mov	r3,r2
    a9b0:	e0bff817 	ldw	r2,-32(fp)
    a9b4:	10800817 	ldw	r2,32(r2)
    a9b8:	18800035 	stwio	r2,0(r3)
    a9bc:	e0bffb17 	ldw	r2,-20(fp)
    a9c0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    a9c4:	e0bffa17 	ldw	r2,-24(fp)
    a9c8:	1001703a 	wrctl	status,r2
}
    a9cc:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    a9d0:	e0ffff17 	ldw	r3,-4(fp)
    a9d4:	e0bff717 	ldw	r2,-36(fp)
    a9d8:	18800426 	beq	r3,r2,a9ec <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
    a9dc:	e0ffff17 	ldw	r3,-4(fp)
    a9e0:	e0bff717 	ldw	r2,-36(fp)
    a9e4:	1885c83a 	sub	r2,r3,r2
    a9e8:	00000606 	br	aa04 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    a9ec:	e0bff517 	ldw	r2,-44(fp)
    a9f0:	1090000c 	andi	r2,r2,16384
    a9f4:	10000226 	beq	r2,zero,aa00 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
    a9f8:	00bffd44 	movi	r2,-11
    a9fc:	00000106 	br	aa04 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    aa00:	00bffec4 	movi	r2,-5
}
    aa04:	e037883a 	mov	sp,fp
    aa08:	dfc00117 	ldw	ra,4(sp)
    aa0c:	df000017 	ldw	fp,0(sp)
    aa10:	dec00204 	addi	sp,sp,8
    aa14:	f800283a 	ret

0000aa18 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    aa18:	defff304 	addi	sp,sp,-52
    aa1c:	dfc00c15 	stw	ra,48(sp)
    aa20:	df000b15 	stw	fp,44(sp)
    aa24:	df000b04 	addi	fp,sp,44
    aa28:	e13ff815 	stw	r4,-32(fp)
    aa2c:	e17ff715 	stw	r5,-36(fp)
    aa30:	e1bff615 	stw	r6,-40(fp)
    aa34:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    aa38:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    aa3c:	e0bff717 	ldw	r2,-36(fp)
    aa40:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    aa44:	00003706 	br	ab24 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    aa48:	e0bff817 	ldw	r2,-32(fp)
    aa4c:	10800c17 	ldw	r2,48(r2)
    aa50:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
    aa54:	e0bff817 	ldw	r2,-32(fp)
    aa58:	10800d17 	ldw	r2,52(r2)
    aa5c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
    aa60:	e0fffc17 	ldw	r3,-16(fp)
    aa64:	e0bfff17 	ldw	r2,-4(fp)
    aa68:	1880062e 	bgeu	r3,r2,aa84 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    aa6c:	e0ffff17 	ldw	r3,-4(fp)
    aa70:	e0bffc17 	ldw	r2,-16(fp)
    aa74:	1885c83a 	sub	r2,r3,r2
    aa78:	10bfffc4 	addi	r2,r2,-1
    aa7c:	e0bffe15 	stw	r2,-8(fp)
    aa80:	00000b06 	br	aab0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    aa84:	e0bfff17 	ldw	r2,-4(fp)
    aa88:	10000526 	beq	r2,zero,aaa0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    aa8c:	00c20004 	movi	r3,2048
    aa90:	e0bffc17 	ldw	r2,-16(fp)
    aa94:	1885c83a 	sub	r2,r3,r2
    aa98:	e0bffe15 	stw	r2,-8(fp)
    aa9c:	00000406 	br	aab0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    aaa0:	00c1ffc4 	movi	r3,2047
    aaa4:	e0bffc17 	ldw	r2,-16(fp)
    aaa8:	1885c83a 	sub	r2,r3,r2
    aaac:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    aab0:	e0bffe17 	ldw	r2,-8(fp)
    aab4:	10001e26 	beq	r2,zero,ab30 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    aab8:	e0fff617 	ldw	r3,-40(fp)
    aabc:	e0bffe17 	ldw	r2,-8(fp)
    aac0:	1880022e 	bgeu	r3,r2,aacc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    aac4:	e0bff617 	ldw	r2,-40(fp)
    aac8:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    aacc:	e0bff817 	ldw	r2,-32(fp)
    aad0:	10c20e04 	addi	r3,r2,2104
    aad4:	e0bffc17 	ldw	r2,-16(fp)
    aad8:	1885883a 	add	r2,r3,r2
    aadc:	e1bffe17 	ldw	r6,-8(fp)
    aae0:	e17ff717 	ldw	r5,-36(fp)
    aae4:	1009883a 	mov	r4,r2
    aae8:	0009c500 	call	9c50 <memcpy>
      ptr   += n;
    aaec:	e0fff717 	ldw	r3,-36(fp)
    aaf0:	e0bffe17 	ldw	r2,-8(fp)
    aaf4:	1885883a 	add	r2,r3,r2
    aaf8:	e0bff715 	stw	r2,-36(fp)
      count -= n;
    aafc:	e0fff617 	ldw	r3,-40(fp)
    ab00:	e0bffe17 	ldw	r2,-8(fp)
    ab04:	1885c83a 	sub	r2,r3,r2
    ab08:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ab0c:	e0fffc17 	ldw	r3,-16(fp)
    ab10:	e0bffe17 	ldw	r2,-8(fp)
    ab14:	1885883a 	add	r2,r3,r2
    ab18:	10c1ffcc 	andi	r3,r2,2047
    ab1c:	e0bff817 	ldw	r2,-32(fp)
    ab20:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
    ab24:	e0bff617 	ldw	r2,-40(fp)
    ab28:	00bfc716 	blt	zero,r2,aa48 <altera_avalon_jtag_uart_write+0x30>
    ab2c:	00000106 	br	ab34 <altera_avalon_jtag_uart_write+0x11c>
        break;
    ab30:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    ab34:	0005303a 	rdctl	r2,status
    ab38:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ab3c:	e0fff917 	ldw	r3,-28(fp)
    ab40:	00bfff84 	movi	r2,-2
    ab44:	1884703a 	and	r2,r3,r2
    ab48:	1001703a 	wrctl	status,r2
  return context;
    ab4c:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    ab50:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ab54:	e0bff817 	ldw	r2,-32(fp)
    ab58:	10800817 	ldw	r2,32(r2)
    ab5c:	10c00094 	ori	r3,r2,2
    ab60:	e0bff817 	ldw	r2,-32(fp)
    ab64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ab68:	e0bff817 	ldw	r2,-32(fp)
    ab6c:	10800017 	ldw	r2,0(r2)
    ab70:	10800104 	addi	r2,r2,4
    ab74:	1007883a 	mov	r3,r2
    ab78:	e0bff817 	ldw	r2,-32(fp)
    ab7c:	10800817 	ldw	r2,32(r2)
    ab80:	18800035 	stwio	r2,0(r3)
    ab84:	e0bffb17 	ldw	r2,-20(fp)
    ab88:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    ab8c:	e0bffa17 	ldw	r2,-24(fp)
    ab90:	1001703a 	wrctl	status,r2
}
    ab94:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    ab98:	e0bff617 	ldw	r2,-40(fp)
    ab9c:	0080100e 	bge	zero,r2,abe0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    aba0:	e0bff517 	ldw	r2,-44(fp)
    aba4:	1090000c 	andi	r2,r2,16384
    aba8:	1000101e 	bne	r2,zero,abec <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    abac:	0001883a 	nop
    abb0:	e0bff817 	ldw	r2,-32(fp)
    abb4:	10800d17 	ldw	r2,52(r2)
    abb8:	e0ffff17 	ldw	r3,-4(fp)
    abbc:	1880051e 	bne	r3,r2,abd4 <altera_avalon_jtag_uart_write+0x1bc>
    abc0:	e0bff817 	ldw	r2,-32(fp)
    abc4:	10c00917 	ldw	r3,36(r2)
    abc8:	e0bff817 	ldw	r2,-32(fp)
    abcc:	10800117 	ldw	r2,4(r2)
    abd0:	18bff736 	bltu	r3,r2,abb0 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    abd4:	e0bff817 	ldw	r2,-32(fp)
    abd8:	10800917 	ldw	r2,36(r2)
    abdc:	1000051e 	bne	r2,zero,abf4 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
    abe0:	e0bff617 	ldw	r2,-40(fp)
    abe4:	00bfcf16 	blt	zero,r2,ab24 <altera_avalon_jtag_uart_write+0x10c>
    abe8:	00000306 	br	abf8 <altera_avalon_jtag_uart_write+0x1e0>
        break;
    abec:	0001883a 	nop
    abf0:	00000106 	br	abf8 <altera_avalon_jtag_uart_write+0x1e0>
         break;
    abf4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    abf8:	e0fff717 	ldw	r3,-36(fp)
    abfc:	e0bffd17 	ldw	r2,-12(fp)
    ac00:	18800426 	beq	r3,r2,ac14 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
    ac04:	e0fff717 	ldw	r3,-36(fp)
    ac08:	e0bffd17 	ldw	r2,-12(fp)
    ac0c:	1885c83a 	sub	r2,r3,r2
    ac10:	00000606 	br	ac2c <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
    ac14:	e0bff517 	ldw	r2,-44(fp)
    ac18:	1090000c 	andi	r2,r2,16384
    ac1c:	10000226 	beq	r2,zero,ac28 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
    ac20:	00bffd44 	movi	r2,-11
    ac24:	00000106 	br	ac2c <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    ac28:	00bffec4 	movi	r2,-5
}
    ac2c:	e037883a 	mov	sp,fp
    ac30:	dfc00117 	ldw	ra,4(sp)
    ac34:	df000017 	ldw	fp,0(sp)
    ac38:	dec00204 	addi	sp,sp,8
    ac3c:	f800283a 	ret

0000ac40 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    ac40:	defff504 	addi	sp,sp,-44
    ac44:	df000a15 	stw	fp,40(sp)
    ac48:	df000a04 	addi	fp,sp,40
    ac4c:	e13ff915 	stw	r4,-28(fp)
    ac50:	e17ff815 	stw	r5,-32(fp)
    ac54:	e1bff715 	stw	r6,-36(fp)
    ac58:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    ac5c:	e03fff15 	stw	zero,-4(fp)
    ac60:	d0aebb17 	ldw	r2,-17684(gp)
  
  if (alt_ticks_per_second ())
    ac64:	10003e26 	beq	r2,zero,ad60 <alt_alarm_start+0x120>
  {
    if (alarm)
    ac68:	e0bff917 	ldw	r2,-28(fp)
    ac6c:	10003a26 	beq	r2,zero,ad58 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
    ac70:	e0bff917 	ldw	r2,-28(fp)
    ac74:	e0fff717 	ldw	r3,-36(fp)
    ac78:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    ac7c:	e0bff917 	ldw	r2,-28(fp)
    ac80:	e0fff617 	ldw	r3,-40(fp)
    ac84:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
    ac88:	0005303a 	rdctl	r2,status
    ac8c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ac90:	e0fffd17 	ldw	r3,-12(fp)
    ac94:	00bfff84 	movi	r2,-2
    ac98:	1884703a 	and	r2,r3,r2
    ac9c:	1001703a 	wrctl	status,r2
  return context;
    aca0:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
    aca4:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    aca8:	d0aebc17 	ldw	r2,-17680(gp)
      
      current_nticks = alt_nticks();
    acac:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    acb0:	e0fff817 	ldw	r3,-32(fp)
    acb4:	e0bfff17 	ldw	r2,-4(fp)
    acb8:	1885883a 	add	r2,r3,r2
    acbc:	10c00044 	addi	r3,r2,1
    acc0:	e0bff917 	ldw	r2,-28(fp)
    acc4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    acc8:	e0bff917 	ldw	r2,-28(fp)
    accc:	10c00217 	ldw	r3,8(r2)
    acd0:	e0bfff17 	ldw	r2,-4(fp)
    acd4:	1880042e 	bgeu	r3,r2,ace8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    acd8:	e0bff917 	ldw	r2,-28(fp)
    acdc:	00c00044 	movi	r3,1
    ace0:	10c00405 	stb	r3,16(r2)
    ace4:	00000206 	br	acf0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    ace8:	e0bff917 	ldw	r2,-28(fp)
    acec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    acf0:	e0bff917 	ldw	r2,-28(fp)
    acf4:	d0e01004 	addi	r3,gp,-32704
    acf8:	e0fffb15 	stw	r3,-20(fp)
    acfc:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ad00:	e0bffa17 	ldw	r2,-24(fp)
    ad04:	e0fffb17 	ldw	r3,-20(fp)
    ad08:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ad0c:	e0bffb17 	ldw	r2,-20(fp)
    ad10:	10c00017 	ldw	r3,0(r2)
    ad14:	e0bffa17 	ldw	r2,-24(fp)
    ad18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ad1c:	e0bffb17 	ldw	r2,-20(fp)
    ad20:	10800017 	ldw	r2,0(r2)
    ad24:	e0fffa17 	ldw	r3,-24(fp)
    ad28:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ad2c:	e0bffb17 	ldw	r2,-20(fp)
    ad30:	e0fffa17 	ldw	r3,-24(fp)
    ad34:	10c00015 	stw	r3,0(r2)
}
    ad38:	0001883a 	nop
    ad3c:	e0bffe17 	ldw	r2,-8(fp)
    ad40:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    ad44:	e0bffc17 	ldw	r2,-16(fp)
    ad48:	1001703a 	wrctl	status,r2
}
    ad4c:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
    ad50:	0005883a 	mov	r2,zero
    ad54:	00000306 	br	ad64 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
    ad58:	00bffa84 	movi	r2,-22
    ad5c:	00000106 	br	ad64 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
    ad60:	00bfde84 	movi	r2,-134
  }
}
    ad64:	e037883a 	mov	sp,fp
    ad68:	df000017 	ldw	fp,0(sp)
    ad6c:	dec00104 	addi	sp,sp,4
    ad70:	f800283a 	ret

0000ad74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ad74:	defffe04 	addi	sp,sp,-8
    ad78:	dfc00115 	stw	ra,4(sp)
    ad7c:	df000015 	stw	fp,0(sp)
    ad80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ad84:	d0a00e17 	ldw	r2,-32712(gp)
    ad88:	10000326 	beq	r2,zero,ad98 <alt_get_errno+0x24>
    ad8c:	d0a00e17 	ldw	r2,-32712(gp)
    ad90:	103ee83a 	callr	r2
    ad94:	00000106 	br	ad9c <alt_get_errno+0x28>
    ad98:	d0aebe04 	addi	r2,gp,-17672
}
    ad9c:	e037883a 	mov	sp,fp
    ada0:	dfc00117 	ldw	ra,4(sp)
    ada4:	df000017 	ldw	fp,0(sp)
    ada8:	dec00204 	addi	sp,sp,8
    adac:	f800283a 	ret

0000adb0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    adb0:	defffb04 	addi	sp,sp,-20
    adb4:	dfc00415 	stw	ra,16(sp)
    adb8:	df000315 	stw	fp,12(sp)
    adbc:	df000304 	addi	fp,sp,12
    adc0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    adc4:	e0bffd17 	ldw	r2,-12(fp)
    adc8:	10000916 	blt	r2,zero,adf0 <close+0x40>
    adcc:	e0fffd17 	ldw	r3,-12(fp)
    add0:	1805883a 	mov	r2,r3
    add4:	1085883a 	add	r2,r2,r2
    add8:	10c5883a 	add	r2,r2,r3
    addc:	100490ba 	slli	r2,r2,2
    ade0:	00c00074 	movhi	r3,1
    ade4:	18c77104 	addi	r3,r3,7620
    ade8:	10c5883a 	add	r2,r2,r3
    adec:	00000106 	br	adf4 <close+0x44>
    adf0:	0005883a 	mov	r2,zero
    adf4:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    adf8:	e0bfff17 	ldw	r2,-4(fp)
    adfc:	10001926 	beq	r2,zero,ae64 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ae00:	e0bfff17 	ldw	r2,-4(fp)
    ae04:	10800017 	ldw	r2,0(r2)
    ae08:	10800417 	ldw	r2,16(r2)
    ae0c:	10000626 	beq	r2,zero,ae28 <close+0x78>
    ae10:	e0bfff17 	ldw	r2,-4(fp)
    ae14:	10800017 	ldw	r2,0(r2)
    ae18:	10800417 	ldw	r2,16(r2)
    ae1c:	e13fff17 	ldw	r4,-4(fp)
    ae20:	103ee83a 	callr	r2
    ae24:	00000106 	br	ae2c <close+0x7c>
    ae28:	0005883a 	mov	r2,zero
    ae2c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ae30:	e13ffd17 	ldw	r4,-12(fp)
    ae34:	000b7040 	call	b704 <alt_release_fd>
    if (rval < 0)
    ae38:	e0bffe17 	ldw	r2,-8(fp)
    ae3c:	1000070e 	bge	r2,zero,ae5c <close+0xac>
    {
      ALT_ERRNO = -rval;
    ae40:	000ad740 	call	ad74 <alt_get_errno>
    ae44:	1007883a 	mov	r3,r2
    ae48:	e0bffe17 	ldw	r2,-8(fp)
    ae4c:	0085c83a 	sub	r2,zero,r2
    ae50:	18800015 	stw	r2,0(r3)
      return -1;
    ae54:	00bfffc4 	movi	r2,-1
    ae58:	00000706 	br	ae78 <close+0xc8>
    }
    return 0;
    ae5c:	0005883a 	mov	r2,zero
    ae60:	00000506 	br	ae78 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ae64:	000ad740 	call	ad74 <alt_get_errno>
    ae68:	1007883a 	mov	r3,r2
    ae6c:	00801444 	movi	r2,81
    ae70:	18800015 	stw	r2,0(r3)
    return -1;
    ae74:	00bfffc4 	movi	r2,-1
  }
}
    ae78:	e037883a 	mov	sp,fp
    ae7c:	dfc00117 	ldw	ra,4(sp)
    ae80:	df000017 	ldw	fp,0(sp)
    ae84:	dec00204 	addi	sp,sp,8
    ae88:	f800283a 	ret

0000ae8c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    ae8c:	deffff04 	addi	sp,sp,-4
    ae90:	df000015 	stw	fp,0(sp)
    ae94:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ae98:	0001883a 	nop
    ae9c:	e037883a 	mov	sp,fp
    aea0:	df000017 	ldw	fp,0(sp)
    aea4:	dec00104 	addi	sp,sp,4
    aea8:	f800283a 	ret

0000aeac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    aeac:	defffc04 	addi	sp,sp,-16
    aeb0:	df000315 	stw	fp,12(sp)
    aeb4:	df000304 	addi	fp,sp,12
    aeb8:	e13fff15 	stw	r4,-4(fp)
    aebc:	e17ffe15 	stw	r5,-8(fp)
    aec0:	e1bffd15 	stw	r6,-12(fp)
  return len;
    aec4:	e0bffd17 	ldw	r2,-12(fp)
}
    aec8:	e037883a 	mov	sp,fp
    aecc:	df000017 	ldw	fp,0(sp)
    aed0:	dec00104 	addi	sp,sp,4
    aed4:	f800283a 	ret

0000aed8 <alt_get_errno>:
{
    aed8:	defffe04 	addi	sp,sp,-8
    aedc:	dfc00115 	stw	ra,4(sp)
    aee0:	df000015 	stw	fp,0(sp)
    aee4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    aee8:	d0a00e17 	ldw	r2,-32712(gp)
    aeec:	10000326 	beq	r2,zero,aefc <alt_get_errno+0x24>
    aef0:	d0a00e17 	ldw	r2,-32712(gp)
    aef4:	103ee83a 	callr	r2
    aef8:	00000106 	br	af00 <alt_get_errno+0x28>
    aefc:	d0aebe04 	addi	r2,gp,-17672
}
    af00:	e037883a 	mov	sp,fp
    af04:	dfc00117 	ldw	ra,4(sp)
    af08:	df000017 	ldw	fp,0(sp)
    af0c:	dec00204 	addi	sp,sp,8
    af10:	f800283a 	ret

0000af14 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    af14:	defffa04 	addi	sp,sp,-24
    af18:	dfc00515 	stw	ra,20(sp)
    af1c:	df000415 	stw	fp,16(sp)
    af20:	df000404 	addi	fp,sp,16
    af24:	e13ffd15 	stw	r4,-12(fp)
    af28:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    af2c:	e0bffd17 	ldw	r2,-12(fp)
    af30:	10000326 	beq	r2,zero,af40 <alt_dev_llist_insert+0x2c>
    af34:	e0bffd17 	ldw	r2,-12(fp)
    af38:	10800217 	ldw	r2,8(r2)
    af3c:	1000061e 	bne	r2,zero,af58 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    af40:	000aed80 	call	aed8 <alt_get_errno>
    af44:	1007883a 	mov	r3,r2
    af48:	00800584 	movi	r2,22
    af4c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    af50:	00bffa84 	movi	r2,-22
    af54:	00001406 	br	afa8 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    af58:	e0bffd17 	ldw	r2,-12(fp)
    af5c:	e0fffc17 	ldw	r3,-16(fp)
    af60:	e0ffff15 	stw	r3,-4(fp)
    af64:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
    af68:	e0bffe17 	ldw	r2,-8(fp)
    af6c:	e0ffff17 	ldw	r3,-4(fp)
    af70:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    af74:	e0bfff17 	ldw	r2,-4(fp)
    af78:	10c00017 	ldw	r3,0(r2)
    af7c:	e0bffe17 	ldw	r2,-8(fp)
    af80:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
    af84:	e0bfff17 	ldw	r2,-4(fp)
    af88:	10800017 	ldw	r2,0(r2)
    af8c:	e0fffe17 	ldw	r3,-8(fp)
    af90:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    af94:	e0bfff17 	ldw	r2,-4(fp)
    af98:	e0fffe17 	ldw	r3,-8(fp)
    af9c:	10c00015 	stw	r3,0(r2)
}
    afa0:	0001883a 	nop

  return 0;  
    afa4:	0005883a 	mov	r2,zero
}
    afa8:	e037883a 	mov	sp,fp
    afac:	dfc00117 	ldw	ra,4(sp)
    afb0:	df000017 	ldw	fp,0(sp)
    afb4:	dec00204 	addi	sp,sp,8
    afb8:	f800283a 	ret

0000afbc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    afbc:	defffd04 	addi	sp,sp,-12
    afc0:	dfc00215 	stw	ra,8(sp)
    afc4:	df000115 	stw	fp,4(sp)
    afc8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    afcc:	00800074 	movhi	r2,1
    afd0:	10b9c604 	addi	r2,r2,-6376
    afd4:	e0bfff15 	stw	r2,-4(fp)
    afd8:	00000606 	br	aff4 <_do_ctors+0x38>
        (*ctor) (); 
    afdc:	e0bfff17 	ldw	r2,-4(fp)
    afe0:	10800017 	ldw	r2,0(r2)
    afe4:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    afe8:	e0bfff17 	ldw	r2,-4(fp)
    afec:	10bfff04 	addi	r2,r2,-4
    aff0:	e0bfff15 	stw	r2,-4(fp)
    aff4:	e0ffff17 	ldw	r3,-4(fp)
    aff8:	00800074 	movhi	r2,1
    affc:	10b9c704 	addi	r2,r2,-6372
    b000:	18bff62e 	bgeu	r3,r2,afdc <_do_ctors+0x20>
}
    b004:	0001883a 	nop
    b008:	0001883a 	nop
    b00c:	e037883a 	mov	sp,fp
    b010:	dfc00117 	ldw	ra,4(sp)
    b014:	df000017 	ldw	fp,0(sp)
    b018:	dec00204 	addi	sp,sp,8
    b01c:	f800283a 	ret

0000b020 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    b020:	defffd04 	addi	sp,sp,-12
    b024:	dfc00215 	stw	ra,8(sp)
    b028:	df000115 	stw	fp,4(sp)
    b02c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b030:	00800074 	movhi	r2,1
    b034:	10b9c604 	addi	r2,r2,-6376
    b038:	e0bfff15 	stw	r2,-4(fp)
    b03c:	00000606 	br	b058 <_do_dtors+0x38>
        (*dtor) (); 
    b040:	e0bfff17 	ldw	r2,-4(fp)
    b044:	10800017 	ldw	r2,0(r2)
    b048:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b04c:	e0bfff17 	ldw	r2,-4(fp)
    b050:	10bfff04 	addi	r2,r2,-4
    b054:	e0bfff15 	stw	r2,-4(fp)
    b058:	e0ffff17 	ldw	r3,-4(fp)
    b05c:	00800074 	movhi	r2,1
    b060:	10b9c704 	addi	r2,r2,-6372
    b064:	18bff62e 	bgeu	r3,r2,b040 <_do_dtors+0x20>
}
    b068:	0001883a 	nop
    b06c:	0001883a 	nop
    b070:	e037883a 	mov	sp,fp
    b074:	dfc00117 	ldw	ra,4(sp)
    b078:	df000017 	ldw	fp,0(sp)
    b07c:	dec00204 	addi	sp,sp,8
    b080:	f800283a 	ret

0000b084 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b084:	deffff04 	addi	sp,sp,-4
    b088:	df000015 	stw	fp,0(sp)
    b08c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    b090:	0001883a 	nop
    b094:	e037883a 	mov	sp,fp
    b098:	df000017 	ldw	fp,0(sp)
    b09c:	dec00104 	addi	sp,sp,4
    b0a0:	f800283a 	ret

0000b0a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b0a4:	defff904 	addi	sp,sp,-28
    b0a8:	dfc00615 	stw	ra,24(sp)
    b0ac:	df000515 	stw	fp,20(sp)
    b0b0:	df000504 	addi	fp,sp,20
    b0b4:	e13fff15 	stw	r4,-4(fp)
    b0b8:	e17ffe15 	stw	r5,-8(fp)
    b0bc:	e1bffd15 	stw	r6,-12(fp)
    b0c0:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    b0c4:	e0800217 	ldw	r2,8(fp)
    b0c8:	d8800015 	stw	r2,0(sp)
    b0cc:	e1fffc17 	ldw	r7,-16(fp)
    b0d0:	e1bffd17 	ldw	r6,-12(fp)
    b0d4:	e17ffe17 	ldw	r5,-8(fp)
    b0d8:	e13fff17 	ldw	r4,-4(fp)
    b0dc:	000b2540 	call	b254 <alt_iic_isr_register>
}  
    b0e0:	e037883a 	mov	sp,fp
    b0e4:	dfc00117 	ldw	ra,4(sp)
    b0e8:	df000017 	ldw	fp,0(sp)
    b0ec:	dec00204 	addi	sp,sp,8
    b0f0:	f800283a 	ret

0000b0f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    b0f4:	defff904 	addi	sp,sp,-28
    b0f8:	df000615 	stw	fp,24(sp)
    b0fc:	df000604 	addi	fp,sp,24
    b100:	e13ffb15 	stw	r4,-20(fp)
    b104:	e17ffa15 	stw	r5,-24(fp)
    b108:	e0bffa17 	ldw	r2,-24(fp)
    b10c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    b110:	0005303a 	rdctl	r2,status
    b114:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b118:	e0fffe17 	ldw	r3,-8(fp)
    b11c:	00bfff84 	movi	r2,-2
    b120:	1884703a 	and	r2,r3,r2
    b124:	1001703a 	wrctl	status,r2
  return context;
    b128:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b12c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    b130:	00c00044 	movi	r3,1
    b134:	e0bfff17 	ldw	r2,-4(fp)
    b138:	1884983a 	sll	r2,r3,r2
    b13c:	1007883a 	mov	r3,r2
    b140:	d0aeba17 	ldw	r2,-17688(gp)
    b144:	1884b03a 	or	r2,r3,r2
    b148:	d0aeba15 	stw	r2,-17688(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b14c:	d0aeba17 	ldw	r2,-17688(gp)
    b150:	100170fa 	wrctl	ienable,r2
    b154:	e0bffd17 	ldw	r2,-12(fp)
    b158:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    b15c:	e0bffc17 	ldw	r2,-16(fp)
    b160:	1001703a 	wrctl	status,r2
}
    b164:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
    b168:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    b16c:	e037883a 	mov	sp,fp
    b170:	df000017 	ldw	fp,0(sp)
    b174:	dec00104 	addi	sp,sp,4
    b178:	f800283a 	ret

0000b17c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    b17c:	defff904 	addi	sp,sp,-28
    b180:	df000615 	stw	fp,24(sp)
    b184:	df000604 	addi	fp,sp,24
    b188:	e13ffb15 	stw	r4,-20(fp)
    b18c:	e17ffa15 	stw	r5,-24(fp)
    b190:	e0bffa17 	ldw	r2,-24(fp)
    b194:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    b198:	0005303a 	rdctl	r2,status
    b19c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b1a0:	e0fffe17 	ldw	r3,-8(fp)
    b1a4:	00bfff84 	movi	r2,-2
    b1a8:	1884703a 	and	r2,r3,r2
    b1ac:	1001703a 	wrctl	status,r2
  return context;
    b1b0:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
    b1b4:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
    b1b8:	00c00044 	movi	r3,1
    b1bc:	e0bfff17 	ldw	r2,-4(fp)
    b1c0:	1884983a 	sll	r2,r3,r2
    b1c4:	0084303a 	nor	r2,zero,r2
    b1c8:	1007883a 	mov	r3,r2
    b1cc:	d0aeba17 	ldw	r2,-17688(gp)
    b1d0:	1884703a 	and	r2,r3,r2
    b1d4:	d0aeba15 	stw	r2,-17688(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b1d8:	d0aeba17 	ldw	r2,-17688(gp)
    b1dc:	100170fa 	wrctl	ienable,r2
    b1e0:	e0bffd17 	ldw	r2,-12(fp)
    b1e4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    b1e8:	e0bffc17 	ldw	r2,-16(fp)
    b1ec:	1001703a 	wrctl	status,r2
}
    b1f0:	0001883a 	nop
  return 0;
    b1f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    b1f8:	e037883a 	mov	sp,fp
    b1fc:	df000017 	ldw	fp,0(sp)
    b200:	dec00104 	addi	sp,sp,4
    b204:	f800283a 	ret

0000b208 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    b208:	defffc04 	addi	sp,sp,-16
    b20c:	df000315 	stw	fp,12(sp)
    b210:	df000304 	addi	fp,sp,12
    b214:	e13ffe15 	stw	r4,-8(fp)
    b218:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    b21c:	000530fa 	rdctl	r2,ienable
    b220:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    b224:	00c00044 	movi	r3,1
    b228:	e0bffd17 	ldw	r2,-12(fp)
    b22c:	1884983a 	sll	r2,r3,r2
    b230:	1007883a 	mov	r3,r2
    b234:	e0bfff17 	ldw	r2,-4(fp)
    b238:	1884703a 	and	r2,r3,r2
    b23c:	1004c03a 	cmpne	r2,r2,zero
    b240:	10803fcc 	andi	r2,r2,255
}
    b244:	e037883a 	mov	sp,fp
    b248:	df000017 	ldw	fp,0(sp)
    b24c:	dec00104 	addi	sp,sp,4
    b250:	f800283a 	ret

0000b254 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b254:	defff504 	addi	sp,sp,-44
    b258:	dfc00a15 	stw	ra,40(sp)
    b25c:	df000915 	stw	fp,36(sp)
    b260:	df000904 	addi	fp,sp,36
    b264:	e13ffa15 	stw	r4,-24(fp)
    b268:	e17ff915 	stw	r5,-28(fp)
    b26c:	e1bff815 	stw	r6,-32(fp)
    b270:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
    b274:	00bffa84 	movi	r2,-22
    b278:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    b27c:	e0bff917 	ldw	r2,-28(fp)
    b280:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b284:	e0bffe17 	ldw	r2,-8(fp)
    b288:	10800808 	cmpgei	r2,r2,32
    b28c:	1000251e 	bne	r2,zero,b324 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
    b290:	0005303a 	rdctl	r2,status
    b294:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b298:	e0fffc17 	ldw	r3,-16(fp)
    b29c:	00bfff84 	movi	r2,-2
    b2a0:	1884703a 	and	r2,r3,r2
    b2a4:	1001703a 	wrctl	status,r2
  return context;
    b2a8:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    b2ac:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
    b2b0:	e0bffe17 	ldw	r2,-8(fp)
    b2b4:	100890fa 	slli	r4,r2,3
    b2b8:	e0fff817 	ldw	r3,-32(fp)
    b2bc:	00800074 	movhi	r2,1
    b2c0:	2085883a 	add	r2,r4,r2
    b2c4:	10d79515 	stw	r3,24148(r2)
    alt_irq[id].context = isr_context;
    b2c8:	e0bffe17 	ldw	r2,-8(fp)
    b2cc:	100890fa 	slli	r4,r2,3
    b2d0:	e0fff717 	ldw	r3,-36(fp)
    b2d4:	00800074 	movhi	r2,1
    b2d8:	2085883a 	add	r2,r4,r2
    b2dc:	10d79615 	stw	r3,24152(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    b2e0:	e0bff817 	ldw	r2,-32(fp)
    b2e4:	10000526 	beq	r2,zero,b2fc <alt_iic_isr_register+0xa8>
    b2e8:	e0bffe17 	ldw	r2,-8(fp)
    b2ec:	100b883a 	mov	r5,r2
    b2f0:	e13ffa17 	ldw	r4,-24(fp)
    b2f4:	000b0f40 	call	b0f4 <alt_ic_irq_enable>
    b2f8:	00000406 	br	b30c <alt_iic_isr_register+0xb8>
    b2fc:	e0bffe17 	ldw	r2,-8(fp)
    b300:	100b883a 	mov	r5,r2
    b304:	e13ffa17 	ldw	r4,-24(fp)
    b308:	000b17c0 	call	b17c <alt_ic_irq_disable>
    b30c:	e0bfff15 	stw	r2,-4(fp)
    b310:	e0bffd17 	ldw	r2,-12(fp)
    b314:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    b318:	e0bffb17 	ldw	r2,-20(fp)
    b31c:	1001703a 	wrctl	status,r2
}
    b320:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    b324:	e0bfff17 	ldw	r2,-4(fp)
}
    b328:	e037883a 	mov	sp,fp
    b32c:	dfc00117 	ldw	ra,4(sp)
    b330:	df000017 	ldw	fp,0(sp)
    b334:	dec00204 	addi	sp,sp,8
    b338:	f800283a 	ret

0000b33c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    b33c:	defff904 	addi	sp,sp,-28
    b340:	dfc00615 	stw	ra,24(sp)
    b344:	df000515 	stw	fp,20(sp)
    b348:	df000504 	addi	fp,sp,20
    b34c:	e13ffe15 	stw	r4,-8(fp)
    b350:	e17ffd15 	stw	r5,-12(fp)
    b354:	e1bffc15 	stw	r6,-16(fp)
    b358:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    b35c:	e1bffb17 	ldw	r6,-20(fp)
    b360:	e17ffc17 	ldw	r5,-16(fp)
    b364:	e13ffd17 	ldw	r4,-12(fp)
    b368:	000b5a40 	call	b5a4 <open>
    b36c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    b370:	e0bfff17 	ldw	r2,-4(fp)
    b374:	10002016 	blt	r2,zero,b3f8 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
    b378:	e0ffff17 	ldw	r3,-4(fp)
    b37c:	1805883a 	mov	r2,r3
    b380:	1085883a 	add	r2,r2,r2
    b384:	10c5883a 	add	r2,r2,r3
    b388:	100490ba 	slli	r2,r2,2
    b38c:	00c00074 	movhi	r3,1
    b390:	10c7883a 	add	r3,r2,r3
    b394:	18c77117 	ldw	r3,7620(r3)
    b398:	e0bffe17 	ldw	r2,-8(fp)
    b39c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    b3a0:	e0ffff17 	ldw	r3,-4(fp)
    b3a4:	1805883a 	mov	r2,r3
    b3a8:	1085883a 	add	r2,r2,r2
    b3ac:	10c5883a 	add	r2,r2,r3
    b3b0:	100490ba 	slli	r2,r2,2
    b3b4:	00c00074 	movhi	r3,1
    b3b8:	10c7883a 	add	r3,r2,r3
    b3bc:	18c77217 	ldw	r3,7624(r3)
    b3c0:	e0bffe17 	ldw	r2,-8(fp)
    b3c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    b3c8:	e0ffff17 	ldw	r3,-4(fp)
    b3cc:	1805883a 	mov	r2,r3
    b3d0:	1085883a 	add	r2,r2,r2
    b3d4:	10c5883a 	add	r2,r2,r3
    b3d8:	100490ba 	slli	r2,r2,2
    b3dc:	00c00074 	movhi	r3,1
    b3e0:	10c7883a 	add	r3,r2,r3
    b3e4:	18c77317 	ldw	r3,7628(r3)
    b3e8:	e0bffe17 	ldw	r2,-8(fp)
    b3ec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    b3f0:	e13fff17 	ldw	r4,-4(fp)
    b3f4:	000b7040 	call	b704 <alt_release_fd>
  }
} 
    b3f8:	0001883a 	nop
    b3fc:	e037883a 	mov	sp,fp
    b400:	dfc00117 	ldw	ra,4(sp)
    b404:	df000017 	ldw	fp,0(sp)
    b408:	dec00204 	addi	sp,sp,8
    b40c:	f800283a 	ret

0000b410 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    b410:	defffb04 	addi	sp,sp,-20
    b414:	dfc00415 	stw	ra,16(sp)
    b418:	df000315 	stw	fp,12(sp)
    b41c:	df000304 	addi	fp,sp,12
    b420:	e13fff15 	stw	r4,-4(fp)
    b424:	e17ffe15 	stw	r5,-8(fp)
    b428:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    b42c:	01c07fc4 	movi	r7,511
    b430:	01800044 	movi	r6,1
    b434:	e17fff17 	ldw	r5,-4(fp)
    b438:	01000074 	movhi	r4,1
    b43c:	21077404 	addi	r4,r4,7632
    b440:	000b33c0 	call	b33c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    b444:	01c07fc4 	movi	r7,511
    b448:	000d883a 	mov	r6,zero
    b44c:	e17ffe17 	ldw	r5,-8(fp)
    b450:	01000074 	movhi	r4,1
    b454:	21077104 	addi	r4,r4,7620
    b458:	000b33c0 	call	b33c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    b45c:	01c07fc4 	movi	r7,511
    b460:	01800044 	movi	r6,1
    b464:	e17ffd17 	ldw	r5,-12(fp)
    b468:	01000074 	movhi	r4,1
    b46c:	21077704 	addi	r4,r4,7644
    b470:	000b33c0 	call	b33c <alt_open_fd>
}  
    b474:	0001883a 	nop
    b478:	e037883a 	mov	sp,fp
    b47c:	dfc00117 	ldw	ra,4(sp)
    b480:	df000017 	ldw	fp,0(sp)
    b484:	dec00204 	addi	sp,sp,8
    b488:	f800283a 	ret

0000b48c <alt_get_errno>:
{
    b48c:	defffe04 	addi	sp,sp,-8
    b490:	dfc00115 	stw	ra,4(sp)
    b494:	df000015 	stw	fp,0(sp)
    b498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b49c:	d0a00e17 	ldw	r2,-32712(gp)
    b4a0:	10000326 	beq	r2,zero,b4b0 <alt_get_errno+0x24>
    b4a4:	d0a00e17 	ldw	r2,-32712(gp)
    b4a8:	103ee83a 	callr	r2
    b4ac:	00000106 	br	b4b4 <alt_get_errno+0x28>
    b4b0:	d0aebe04 	addi	r2,gp,-17672
}
    b4b4:	e037883a 	mov	sp,fp
    b4b8:	dfc00117 	ldw	ra,4(sp)
    b4bc:	df000017 	ldw	fp,0(sp)
    b4c0:	dec00204 	addi	sp,sp,8
    b4c4:	f800283a 	ret

0000b4c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    b4c8:	defffd04 	addi	sp,sp,-12
    b4cc:	df000215 	stw	fp,8(sp)
    b4d0:	df000204 	addi	fp,sp,8
    b4d4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    b4d8:	e0bffe17 	ldw	r2,-8(fp)
    b4dc:	10800217 	ldw	r2,8(r2)
    b4e0:	10d00034 	orhi	r3,r2,16384
    b4e4:	e0bffe17 	ldw	r2,-8(fp)
    b4e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    b4ec:	e03fff15 	stw	zero,-4(fp)
    b4f0:	00002306 	br	b580 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    b4f4:	e0ffff17 	ldw	r3,-4(fp)
    b4f8:	1805883a 	mov	r2,r3
    b4fc:	1085883a 	add	r2,r2,r2
    b500:	10c5883a 	add	r2,r2,r3
    b504:	100490ba 	slli	r2,r2,2
    b508:	00c00074 	movhi	r3,1
    b50c:	10c7883a 	add	r3,r2,r3
    b510:	18c77117 	ldw	r3,7620(r3)
    b514:	e0bffe17 	ldw	r2,-8(fp)
    b518:	10800017 	ldw	r2,0(r2)
    b51c:	1880151e 	bne	r3,r2,b574 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    b520:	e0ffff17 	ldw	r3,-4(fp)
    b524:	1805883a 	mov	r2,r3
    b528:	1085883a 	add	r2,r2,r2
    b52c:	10c5883a 	add	r2,r2,r3
    b530:	100490ba 	slli	r2,r2,2
    b534:	00c00074 	movhi	r3,1
    b538:	10c7883a 	add	r3,r2,r3
    b53c:	18877317 	ldw	r2,7628(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
    b540:	10000c0e 	bge	r2,zero,b574 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
    b544:	e0ffff17 	ldw	r3,-4(fp)
    b548:	1805883a 	mov	r2,r3
    b54c:	1085883a 	add	r2,r2,r2
    b550:	10c5883a 	add	r2,r2,r3
    b554:	100490ba 	slli	r2,r2,2
    b558:	00c00074 	movhi	r3,1
    b55c:	18c77104 	addi	r3,r3,7620
    b560:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    b564:	e0fffe17 	ldw	r3,-8(fp)
    b568:	18800226 	beq	r3,r2,b574 <alt_file_locked+0xac>
    {
      return -EACCES;
    b56c:	00bffcc4 	movi	r2,-13
    b570:	00000806 	br	b594 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
    b574:	e0bfff17 	ldw	r2,-4(fp)
    b578:	10800044 	addi	r2,r2,1
    b57c:	e0bfff15 	stw	r2,-4(fp)
    b580:	d0a00d17 	ldw	r2,-32716(gp)
    b584:	1007883a 	mov	r3,r2
    b588:	e0bfff17 	ldw	r2,-4(fp)
    b58c:	18bfd92e 	bgeu	r3,r2,b4f4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    b590:	0005883a 	mov	r2,zero
}
    b594:	e037883a 	mov	sp,fp
    b598:	df000017 	ldw	fp,0(sp)
    b59c:	dec00104 	addi	sp,sp,4
    b5a0:	f800283a 	ret

0000b5a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    b5a4:	defff604 	addi	sp,sp,-40
    b5a8:	dfc00915 	stw	ra,36(sp)
    b5ac:	df000815 	stw	fp,32(sp)
    b5b0:	df000804 	addi	fp,sp,32
    b5b4:	e13ffa15 	stw	r4,-24(fp)
    b5b8:	e17ff915 	stw	r5,-28(fp)
    b5bc:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    b5c0:	00bfffc4 	movi	r2,-1
    b5c4:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    b5c8:	00bffb44 	movi	r2,-19
    b5cc:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    b5d0:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    b5d4:	d1600b04 	addi	r5,gp,-32724
    b5d8:	e13ffa17 	ldw	r4,-24(fp)
    b5dc:	000b9440 	call	b944 <alt_find_dev>
    b5e0:	e0bfff15 	stw	r2,-4(fp)
    b5e4:	e0bfff17 	ldw	r2,-4(fp)
    b5e8:	1000051e 	bne	r2,zero,b600 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    b5ec:	e13ffa17 	ldw	r4,-24(fp)
    b5f0:	000b9d40 	call	b9d4 <alt_find_file>
    b5f4:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    b5f8:	00800044 	movi	r2,1
    b5fc:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    b600:	e0bfff17 	ldw	r2,-4(fp)
    b604:	10002c26 	beq	r2,zero,b6b8 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    b608:	e13fff17 	ldw	r4,-4(fp)
    b60c:	000badc0 	call	badc <alt_get_fd>
    b610:	e0bffe15 	stw	r2,-8(fp)
    b614:	e0bffe17 	ldw	r2,-8(fp)
    b618:	1000030e 	bge	r2,zero,b628 <open+0x84>
    {
      status = index;
    b61c:	e0bffe17 	ldw	r2,-8(fp)
    b620:	e0bffd15 	stw	r2,-12(fp)
    b624:	00002606 	br	b6c0 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    b628:	e0fffe17 	ldw	r3,-8(fp)
    b62c:	1805883a 	mov	r2,r3
    b630:	1085883a 	add	r2,r2,r2
    b634:	10c5883a 	add	r2,r2,r3
    b638:	100490ba 	slli	r2,r2,2
    b63c:	00c00074 	movhi	r3,1
    b640:	18c77104 	addi	r3,r3,7620
    b644:	10c5883a 	add	r2,r2,r3
    b648:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    b64c:	e0fff917 	ldw	r3,-28(fp)
    b650:	00900034 	movhi	r2,16384
    b654:	10bfffc4 	addi	r2,r2,-1
    b658:	1886703a 	and	r3,r3,r2
    b65c:	e0bffb17 	ldw	r2,-20(fp)
    b660:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    b664:	e0bffc17 	ldw	r2,-16(fp)
    b668:	1000051e 	bne	r2,zero,b680 <open+0xdc>
    b66c:	e13ffb17 	ldw	r4,-20(fp)
    b670:	000b4c80 	call	b4c8 <alt_file_locked>
    b674:	e0bffd15 	stw	r2,-12(fp)
    b678:	e0bffd17 	ldw	r2,-12(fp)
    b67c:	10001016 	blt	r2,zero,b6c0 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    b680:	e0bfff17 	ldw	r2,-4(fp)
    b684:	10800317 	ldw	r2,12(r2)
    b688:	10000826 	beq	r2,zero,b6ac <open+0x108>
    b68c:	e0bfff17 	ldw	r2,-4(fp)
    b690:	10800317 	ldw	r2,12(r2)
    b694:	e1fff817 	ldw	r7,-32(fp)
    b698:	e1bff917 	ldw	r6,-28(fp)
    b69c:	e17ffa17 	ldw	r5,-24(fp)
    b6a0:	e13ffb17 	ldw	r4,-20(fp)
    b6a4:	103ee83a 	callr	r2
    b6a8:	00000106 	br	b6b0 <open+0x10c>
    b6ac:	0005883a 	mov	r2,zero
    b6b0:	e0bffd15 	stw	r2,-12(fp)
    b6b4:	00000206 	br	b6c0 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    b6b8:	00bffb44 	movi	r2,-19
    b6bc:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    b6c0:	e0bffd17 	ldw	r2,-12(fp)
    b6c4:	1000090e 	bge	r2,zero,b6ec <open+0x148>
  {
    alt_release_fd (index);  
    b6c8:	e13ffe17 	ldw	r4,-8(fp)
    b6cc:	000b7040 	call	b704 <alt_release_fd>
    ALT_ERRNO = -status;
    b6d0:	000b48c0 	call	b48c <alt_get_errno>
    b6d4:	1007883a 	mov	r3,r2
    b6d8:	e0bffd17 	ldw	r2,-12(fp)
    b6dc:	0085c83a 	sub	r2,zero,r2
    b6e0:	18800015 	stw	r2,0(r3)
    return -1;
    b6e4:	00bfffc4 	movi	r2,-1
    b6e8:	00000106 	br	b6f0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    b6ec:	e0bffe17 	ldw	r2,-8(fp)
}
    b6f0:	e037883a 	mov	sp,fp
    b6f4:	dfc00117 	ldw	ra,4(sp)
    b6f8:	df000017 	ldw	fp,0(sp)
    b6fc:	dec00204 	addi	sp,sp,8
    b700:	f800283a 	ret

0000b704 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b704:	defffe04 	addi	sp,sp,-8
    b708:	df000115 	stw	fp,4(sp)
    b70c:	df000104 	addi	fp,sp,4
    b710:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b714:	e0bfff17 	ldw	r2,-4(fp)
    b718:	108000d0 	cmplti	r2,r2,3
    b71c:	1000101e 	bne	r2,zero,b760 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    b720:	e0ffff17 	ldw	r3,-4(fp)
    b724:	1805883a 	mov	r2,r3
    b728:	1085883a 	add	r2,r2,r2
    b72c:	10c5883a 	add	r2,r2,r3
    b730:	100490ba 	slli	r2,r2,2
    b734:	00c00074 	movhi	r3,1
    b738:	10c7883a 	add	r3,r2,r3
    b73c:	18077315 	stw	zero,7628(r3)
    alt_fd_list[fd].dev      = 0;
    b740:	e0ffff17 	ldw	r3,-4(fp)
    b744:	1805883a 	mov	r2,r3
    b748:	1085883a 	add	r2,r2,r2
    b74c:	10c5883a 	add	r2,r2,r3
    b750:	100490ba 	slli	r2,r2,2
    b754:	00c00074 	movhi	r3,1
    b758:	10c7883a 	add	r3,r2,r3
    b75c:	18077115 	stw	zero,7620(r3)
  }
}
    b760:	0001883a 	nop
    b764:	e037883a 	mov	sp,fp
    b768:	df000017 	ldw	fp,0(sp)
    b76c:	dec00104 	addi	sp,sp,4
    b770:	f800283a 	ret

0000b774 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    b774:	defffa04 	addi	sp,sp,-24
    b778:	df000515 	stw	fp,20(sp)
    b77c:	df000504 	addi	fp,sp,20
    b780:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    b784:	0005303a 	rdctl	r2,status
    b788:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b78c:	e0fffc17 	ldw	r3,-16(fp)
    b790:	00bfff84 	movi	r2,-2
    b794:	1884703a 	and	r2,r3,r2
    b798:	1001703a 	wrctl	status,r2
  return context;
    b79c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    b7a0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    b7a4:	e0bffb17 	ldw	r2,-20(fp)
    b7a8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    b7ac:	e0bffd17 	ldw	r2,-12(fp)
    b7b0:	10800017 	ldw	r2,0(r2)
    b7b4:	e0fffd17 	ldw	r3,-12(fp)
    b7b8:	18c00117 	ldw	r3,4(r3)
    b7bc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    b7c0:	e0bffd17 	ldw	r2,-12(fp)
    b7c4:	10800117 	ldw	r2,4(r2)
    b7c8:	e0fffd17 	ldw	r3,-12(fp)
    b7cc:	18c00017 	ldw	r3,0(r3)
    b7d0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    b7d4:	e0bffd17 	ldw	r2,-12(fp)
    b7d8:	e0fffd17 	ldw	r3,-12(fp)
    b7dc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    b7e0:	e0bffd17 	ldw	r2,-12(fp)
    b7e4:	e0fffd17 	ldw	r3,-12(fp)
    b7e8:	10c00015 	stw	r3,0(r2)
} 
    b7ec:	0001883a 	nop
    b7f0:	e0bfff17 	ldw	r2,-4(fp)
    b7f4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    b7f8:	e0bffe17 	ldw	r2,-8(fp)
    b7fc:	1001703a 	wrctl	status,r2
}
    b800:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    b804:	0001883a 	nop
    b808:	e037883a 	mov	sp,fp
    b80c:	df000017 	ldw	fp,0(sp)
    b810:	dec00104 	addi	sp,sp,4
    b814:	f800283a 	ret

0000b818 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    b818:	defffb04 	addi	sp,sp,-20
    b81c:	dfc00415 	stw	ra,16(sp)
    b820:	df000315 	stw	fp,12(sp)
    b824:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    b828:	d0a01017 	ldw	r2,-32704(gp)
    b82c:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    b830:	d0aebc17 	ldw	r2,-17680(gp)
    b834:	10800044 	addi	r2,r2,1
    b838:	d0aebc15 	stw	r2,-17680(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b83c:	00002e06 	br	b8f8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    b840:	e0bfff17 	ldw	r2,-4(fp)
    b844:	10800017 	ldw	r2,0(r2)
    b848:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    b84c:	e0bfff17 	ldw	r2,-4(fp)
    b850:	10800403 	ldbu	r2,16(r2)
    b854:	10803fcc 	andi	r2,r2,255
    b858:	10000426 	beq	r2,zero,b86c <alt_tick+0x54>
    b85c:	d0aebc17 	ldw	r2,-17680(gp)
    b860:	1000021e 	bne	r2,zero,b86c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    b864:	e0bfff17 	ldw	r2,-4(fp)
    b868:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    b86c:	e0bfff17 	ldw	r2,-4(fp)
    b870:	10800217 	ldw	r2,8(r2)
    b874:	d0eebc17 	ldw	r3,-17680(gp)
    b878:	18801d36 	bltu	r3,r2,b8f0 <alt_tick+0xd8>
    b87c:	e0bfff17 	ldw	r2,-4(fp)
    b880:	10800403 	ldbu	r2,16(r2)
    b884:	10803fcc 	andi	r2,r2,255
    b888:	1000191e 	bne	r2,zero,b8f0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    b88c:	e0bfff17 	ldw	r2,-4(fp)
    b890:	10800317 	ldw	r2,12(r2)
    b894:	e0ffff17 	ldw	r3,-4(fp)
    b898:	18c00517 	ldw	r3,20(r3)
    b89c:	1809883a 	mov	r4,r3
    b8a0:	103ee83a 	callr	r2
    b8a4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    b8a8:	e0bffd17 	ldw	r2,-12(fp)
    b8ac:	1000031e 	bne	r2,zero,b8bc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    b8b0:	e13fff17 	ldw	r4,-4(fp)
    b8b4:	000b7740 	call	b774 <alt_alarm_stop>
    b8b8:	00000d06 	br	b8f0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    b8bc:	e0bfff17 	ldw	r2,-4(fp)
    b8c0:	10c00217 	ldw	r3,8(r2)
    b8c4:	e0bffd17 	ldw	r2,-12(fp)
    b8c8:	1887883a 	add	r3,r3,r2
    b8cc:	e0bfff17 	ldw	r2,-4(fp)
    b8d0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    b8d4:	e0bfff17 	ldw	r2,-4(fp)
    b8d8:	10c00217 	ldw	r3,8(r2)
    b8dc:	d0aebc17 	ldw	r2,-17680(gp)
    b8e0:	1880032e 	bgeu	r3,r2,b8f0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    b8e4:	e0bfff17 	ldw	r2,-4(fp)
    b8e8:	00c00044 	movi	r3,1
    b8ec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    b8f0:	e0bffe17 	ldw	r2,-8(fp)
    b8f4:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    b8f8:	e0ffff17 	ldw	r3,-4(fp)
    b8fc:	d0a01004 	addi	r2,gp,-32704
    b900:	18bfcf1e 	bne	r3,r2,b840 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    b904:	0001883a 	nop
}
    b908:	0001883a 	nop
    b90c:	e037883a 	mov	sp,fp
    b910:	dfc00117 	ldw	ra,4(sp)
    b914:	df000017 	ldw	fp,0(sp)
    b918:	dec00204 	addi	sp,sp,8
    b91c:	f800283a 	ret

0000b920 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    b920:	deffff04 	addi	sp,sp,-4
    b924:	df000015 	stw	fp,0(sp)
    b928:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    b92c:	000170fa 	wrctl	ienable,zero
}
    b930:	0001883a 	nop
    b934:	e037883a 	mov	sp,fp
    b938:	df000017 	ldw	fp,0(sp)
    b93c:	dec00104 	addi	sp,sp,4
    b940:	f800283a 	ret

0000b944 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    b944:	defffa04 	addi	sp,sp,-24
    b948:	dfc00515 	stw	ra,20(sp)
    b94c:	df000415 	stw	fp,16(sp)
    b950:	df000404 	addi	fp,sp,16
    b954:	e13ffd15 	stw	r4,-12(fp)
    b958:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    b95c:	e0bffc17 	ldw	r2,-16(fp)
    b960:	10800017 	ldw	r2,0(r2)
    b964:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    b968:	e13ffd17 	ldw	r4,-12(fp)
    b96c:	000bd0c0 	call	bd0c <strlen>
    b970:	10800044 	addi	r2,r2,1
    b974:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    b978:	00000d06 	br	b9b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    b97c:	e0bfff17 	ldw	r2,-4(fp)
    b980:	10800217 	ldw	r2,8(r2)
    b984:	e0fffe17 	ldw	r3,-8(fp)
    b988:	180d883a 	mov	r6,r3
    b98c:	e17ffd17 	ldw	r5,-12(fp)
    b990:	1009883a 	mov	r4,r2
    b994:	000bc740 	call	bc74 <memcmp>
    b998:	1000021e 	bne	r2,zero,b9a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    b99c:	e0bfff17 	ldw	r2,-4(fp)
    b9a0:	00000706 	br	b9c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    b9a4:	e0bfff17 	ldw	r2,-4(fp)
    b9a8:	10800017 	ldw	r2,0(r2)
    b9ac:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    b9b0:	e0ffff17 	ldw	r3,-4(fp)
    b9b4:	e0bffc17 	ldw	r2,-16(fp)
    b9b8:	18bff01e 	bne	r3,r2,b97c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    b9bc:	0005883a 	mov	r2,zero
}
    b9c0:	e037883a 	mov	sp,fp
    b9c4:	dfc00117 	ldw	ra,4(sp)
    b9c8:	df000017 	ldw	fp,0(sp)
    b9cc:	dec00204 	addi	sp,sp,8
    b9d0:	f800283a 	ret

0000b9d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    b9d4:	defffb04 	addi	sp,sp,-20
    b9d8:	dfc00415 	stw	ra,16(sp)
    b9dc:	df000315 	stw	fp,12(sp)
    b9e0:	df000304 	addi	fp,sp,12
    b9e4:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    b9e8:	d0a00917 	ldw	r2,-32732(gp)
    b9ec:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    b9f0:	00003106 	br	bab8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    b9f4:	e0bfff17 	ldw	r2,-4(fp)
    b9f8:	10800217 	ldw	r2,8(r2)
    b9fc:	1009883a 	mov	r4,r2
    ba00:	000bd0c0 	call	bd0c <strlen>
    ba04:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    ba08:	e0bfff17 	ldw	r2,-4(fp)
    ba0c:	10c00217 	ldw	r3,8(r2)
    ba10:	e0bffe17 	ldw	r2,-8(fp)
    ba14:	10bfffc4 	addi	r2,r2,-1
    ba18:	1885883a 	add	r2,r3,r2
    ba1c:	10800003 	ldbu	r2,0(r2)
    ba20:	10803fcc 	andi	r2,r2,255
    ba24:	1080201c 	xori	r2,r2,128
    ba28:	10bfe004 	addi	r2,r2,-128
    ba2c:	10800bd8 	cmpnei	r2,r2,47
    ba30:	1000031e 	bne	r2,zero,ba40 <alt_find_file+0x6c>
    {
      len -= 1;
    ba34:	e0bffe17 	ldw	r2,-8(fp)
    ba38:	10bfffc4 	addi	r2,r2,-1
    ba3c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ba40:	e0bffe17 	ldw	r2,-8(fp)
    ba44:	e0fffd17 	ldw	r3,-12(fp)
    ba48:	1885883a 	add	r2,r3,r2
    ba4c:	10800003 	ldbu	r2,0(r2)
    ba50:	10803fcc 	andi	r2,r2,255
    ba54:	1080201c 	xori	r2,r2,128
    ba58:	10bfe004 	addi	r2,r2,-128
    ba5c:	10800be0 	cmpeqi	r2,r2,47
    ba60:	1000081e 	bne	r2,zero,ba84 <alt_find_file+0xb0>
    ba64:	e0bffe17 	ldw	r2,-8(fp)
    ba68:	e0fffd17 	ldw	r3,-12(fp)
    ba6c:	1885883a 	add	r2,r3,r2
    ba70:	10800003 	ldbu	r2,0(r2)
    ba74:	10803fcc 	andi	r2,r2,255
    ba78:	1080201c 	xori	r2,r2,128
    ba7c:	10bfe004 	addi	r2,r2,-128
    ba80:	10000a1e 	bne	r2,zero,baac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    ba84:	e0bfff17 	ldw	r2,-4(fp)
    ba88:	10800217 	ldw	r2,8(r2)
    ba8c:	e0fffe17 	ldw	r3,-8(fp)
    ba90:	180d883a 	mov	r6,r3
    ba94:	e17ffd17 	ldw	r5,-12(fp)
    ba98:	1009883a 	mov	r4,r2
    ba9c:	000bc740 	call	bc74 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    baa0:	1000021e 	bne	r2,zero,baac <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    baa4:	e0bfff17 	ldw	r2,-4(fp)
    baa8:	00000706 	br	bac8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    baac:	e0bfff17 	ldw	r2,-4(fp)
    bab0:	10800017 	ldw	r2,0(r2)
    bab4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    bab8:	e0ffff17 	ldw	r3,-4(fp)
    babc:	d0a00904 	addi	r2,gp,-32732
    bac0:	18bfcc1e 	bne	r3,r2,b9f4 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    bac4:	0005883a 	mov	r2,zero
}
    bac8:	e037883a 	mov	sp,fp
    bacc:	dfc00117 	ldw	ra,4(sp)
    bad0:	df000017 	ldw	fp,0(sp)
    bad4:	dec00204 	addi	sp,sp,8
    bad8:	f800283a 	ret

0000badc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    badc:	defffc04 	addi	sp,sp,-16
    bae0:	df000315 	stw	fp,12(sp)
    bae4:	df000304 	addi	fp,sp,12
    bae8:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    baec:	00bffa04 	movi	r2,-24
    baf0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    baf4:	e03fff15 	stw	zero,-4(fp)
    baf8:	00001d06 	br	bb70 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    bafc:	e0ffff17 	ldw	r3,-4(fp)
    bb00:	1805883a 	mov	r2,r3
    bb04:	1085883a 	add	r2,r2,r2
    bb08:	10c5883a 	add	r2,r2,r3
    bb0c:	100490ba 	slli	r2,r2,2
    bb10:	00c00074 	movhi	r3,1
    bb14:	10c7883a 	add	r3,r2,r3
    bb18:	18877117 	ldw	r2,7620(r3)
    bb1c:	1000111e 	bne	r2,zero,bb64 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    bb20:	e0ffff17 	ldw	r3,-4(fp)
    bb24:	1805883a 	mov	r2,r3
    bb28:	1085883a 	add	r2,r2,r2
    bb2c:	10c5883a 	add	r2,r2,r3
    bb30:	100490ba 	slli	r2,r2,2
    bb34:	e13ffd17 	ldw	r4,-12(fp)
    bb38:	00c00074 	movhi	r3,1
    bb3c:	10c7883a 	add	r3,r2,r3
    bb40:	19077115 	stw	r4,7620(r3)
      if (i > alt_max_fd)
    bb44:	d0e00d17 	ldw	r3,-32716(gp)
    bb48:	e0bfff17 	ldw	r2,-4(fp)
    bb4c:	1880020e 	bge	r3,r2,bb58 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    bb50:	e0bfff17 	ldw	r2,-4(fp)
    bb54:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
    bb58:	e0bfff17 	ldw	r2,-4(fp)
    bb5c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    bb60:	00000706 	br	bb80 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
    bb64:	e0bfff17 	ldw	r2,-4(fp)
    bb68:	10800044 	addi	r2,r2,1
    bb6c:	e0bfff15 	stw	r2,-4(fp)
    bb70:	e0bfff17 	ldw	r2,-4(fp)
    bb74:	10800810 	cmplti	r2,r2,32
    bb78:	103fe01e 	bne	r2,zero,bafc <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    bb7c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    bb80:	e0bffe17 	ldw	r2,-8(fp)
}
    bb84:	e037883a 	mov	sp,fp
    bb88:	df000017 	ldw	fp,0(sp)
    bb8c:	dec00104 	addi	sp,sp,4
    bb90:	f800283a 	ret

0000bb94 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    bb94:	defffe04 	addi	sp,sp,-8
    bb98:	df000115 	stw	fp,4(sp)
    bb9c:	df000104 	addi	fp,sp,4
    bba0:	e13fff15 	stw	r4,-4(fp)
    bba4:	e0bfff17 	ldw	r2,-4(fp)
    bba8:	10bffe84 	addi	r2,r2,-6
    bbac:	10c00428 	cmpgeui	r3,r2,16
    bbb0:	1800191e 	bne	r3,zero,bc18 <alt_exception_cause_generated_bad_addr+0x84>
    bbb4:	100690ba 	slli	r3,r2,2
    bbb8:	00800074 	movhi	r2,1
    bbbc:	1885883a 	add	r2,r3,r2
    bbc0:	10aef217 	ldw	r2,-17464(r2)
    bbc4:	1000683a 	jmp	r2
    bbc8:	0000bc08 	cmpgei	zero,zero,752
    bbcc:	0000bc08 	cmpgei	zero,zero,752
    bbd0:	0000bc18 	cmpnei	zero,zero,752
    bbd4:	0000bc18 	cmpnei	zero,zero,752
    bbd8:	0000bc18 	cmpnei	zero,zero,752
    bbdc:	0000bc08 	cmpgei	zero,zero,752
    bbe0:	0000bc10 	cmplti	zero,zero,752
    bbe4:	0000bc18 	cmpnei	zero,zero,752
    bbe8:	0000bc08 	cmpgei	zero,zero,752
    bbec:	0000bc08 	cmpgei	zero,zero,752
    bbf0:	0000bc18 	cmpnei	zero,zero,752
    bbf4:	0000bc08 	cmpgei	zero,zero,752
    bbf8:	0000bc10 	cmplti	zero,zero,752
    bbfc:	0000bc18 	cmpnei	zero,zero,752
    bc00:	0000bc18 	cmpnei	zero,zero,752
    bc04:	0000bc08 	cmpgei	zero,zero,752
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    bc08:	00800044 	movi	r2,1
    bc0c:	00000306 	br	bc1c <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    bc10:	0005883a 	mov	r2,zero
    bc14:	00000106 	br	bc1c <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
    bc18:	0005883a 	mov	r2,zero
  }
}
    bc1c:	e037883a 	mov	sp,fp
    bc20:	df000017 	ldw	fp,0(sp)
    bc24:	dec00104 	addi	sp,sp,4
    bc28:	f800283a 	ret

0000bc2c <atexit>:
    bc2c:	200b883a 	mov	r5,r4
    bc30:	000f883a 	mov	r7,zero
    bc34:	000d883a 	mov	r6,zero
    bc38:	0009883a 	mov	r4,zero
    bc3c:	000bda41 	jmpi	bda4 <__register_exitproc>

0000bc40 <exit>:
    bc40:	defffe04 	addi	sp,sp,-8
    bc44:	000b883a 	mov	r5,zero
    bc48:	dc000015 	stw	r16,0(sp)
    bc4c:	dfc00115 	stw	ra,4(sp)
    bc50:	2021883a 	mov	r16,r4
    bc54:	000be340 	call	be34 <__call_exitprocs>
    bc58:	00800074 	movhi	r2,1
    bc5c:	1108da17 	ldw	r4,9064(r2)
    bc60:	20800f17 	ldw	r2,60(r4)
    bc64:	10000126 	beq	r2,zero,bc6c <exit+0x2c>
    bc68:	103ee83a 	callr	r2
    bc6c:	8009883a 	mov	r4,r16
    bc70:	000e0600 	call	e060 <_exit>

0000bc74 <memcmp>:
    bc74:	30800130 	cmpltui	r2,r6,4
    bc78:	10000b1e 	bne	r2,zero,bca8 <memcmp+0x34>
    bc7c:	2144b03a 	or	r2,r4,r5
    bc80:	108000cc 	andi	r2,r2,3
    bc84:	1000171e 	bne	r2,zero,bce4 <memcmp+0x70>
    bc88:	20c00017 	ldw	r3,0(r4)
    bc8c:	28800017 	ldw	r2,0(r5)
    bc90:	1880141e 	bne	r3,r2,bce4 <memcmp+0x70>
    bc94:	31bfff04 	addi	r6,r6,-4
    bc98:	30800128 	cmpgeui	r2,r6,4
    bc9c:	21000104 	addi	r4,r4,4
    bca0:	29400104 	addi	r5,r5,4
    bca4:	103ff81e 	bne	r2,zero,bc88 <memcmp+0x14>
    bca8:	30bfffc4 	addi	r2,r6,-1
    bcac:	30000b26 	beq	r6,zero,bcdc <memcmp+0x68>
    bcb0:	11800044 	addi	r6,r2,1
    bcb4:	218d883a 	add	r6,r4,r6
    bcb8:	00000106 	br	bcc0 <memcmp+0x4c>
    bcbc:	21800726 	beq	r4,r6,bcdc <memcmp+0x68>
    bcc0:	20800003 	ldbu	r2,0(r4)
    bcc4:	28c00003 	ldbu	r3,0(r5)
    bcc8:	21000044 	addi	r4,r4,1
    bccc:	29400044 	addi	r5,r5,1
    bcd0:	10fffa26 	beq	r2,r3,bcbc <memcmp+0x48>
    bcd4:	10c5c83a 	sub	r2,r2,r3
    bcd8:	f800283a 	ret
    bcdc:	0005883a 	mov	r2,zero
    bce0:	f800283a 	ret
    bce4:	30bfffc4 	addi	r2,r6,-1
    bce8:	003ff106 	br	bcb0 <memcmp+0x3c>

0000bcec <_putchar_r>:
    bcec:	21800217 	ldw	r6,8(r4)
    bcf0:	000bf541 	jmpi	bf54 <_putc_r>

0000bcf4 <putchar>:
    bcf4:	00800074 	movhi	r2,1
    bcf8:	1088db17 	ldw	r2,9068(r2)
    bcfc:	200b883a 	mov	r5,r4
    bd00:	11800217 	ldw	r6,8(r2)
    bd04:	1009883a 	mov	r4,r2
    bd08:	000bf541 	jmpi	bf54 <_putc_r>

0000bd0c <strlen>:
    bd0c:	208000cc 	andi	r2,r4,3
    bd10:	10000926 	beq	r2,zero,bd38 <strlen+0x2c>
    bd14:	2005883a 	mov	r2,r4
    bd18:	00000306 	br	bd28 <strlen+0x1c>
    bd1c:	10800044 	addi	r2,r2,1
    bd20:	10c000cc 	andi	r3,r2,3
    bd24:	18000526 	beq	r3,zero,bd3c <strlen+0x30>
    bd28:	10c00007 	ldb	r3,0(r2)
    bd2c:	183ffb1e 	bne	r3,zero,bd1c <strlen+0x10>
    bd30:	1105c83a 	sub	r2,r2,r4
    bd34:	f800283a 	ret
    bd38:	2005883a 	mov	r2,r4
    bd3c:	11400017 	ldw	r5,0(r2)
    bd40:	01ffbff4 	movhi	r7,65279
    bd44:	39ffbfc4 	addi	r7,r7,-257
    bd48:	29c7883a 	add	r3,r5,r7
    bd4c:	01a02074 	movhi	r6,32897
    bd50:	014a303a 	nor	r5,zero,r5
    bd54:	1946703a 	and	r3,r3,r5
    bd58:	31a02004 	addi	r6,r6,-32640
    bd5c:	1986703a 	and	r3,r3,r6
    bd60:	1800071e 	bne	r3,zero,bd80 <strlen+0x74>
    bd64:	11400117 	ldw	r5,4(r2)
    bd68:	10800104 	addi	r2,r2,4
    bd6c:	29c7883a 	add	r3,r5,r7
    bd70:	014a303a 	nor	r5,zero,r5
    bd74:	1946703a 	and	r3,r3,r5
    bd78:	1986703a 	and	r3,r3,r6
    bd7c:	183ff926 	beq	r3,zero,bd64 <strlen+0x58>
    bd80:	10c00007 	ldb	r3,0(r2)
    bd84:	183fea26 	beq	r3,zero,bd30 <strlen+0x24>
    bd88:	10c00047 	ldb	r3,1(r2)
    bd8c:	10800044 	addi	r2,r2,1
    bd90:	183fe726 	beq	r3,zero,bd30 <strlen+0x24>
    bd94:	10c00047 	ldb	r3,1(r2)
    bd98:	10800044 	addi	r2,r2,1
    bd9c:	183ffa1e 	bne	r3,zero,bd88 <strlen+0x7c>
    bda0:	003fe306 	br	bd30 <strlen+0x24>

0000bda4 <__register_exitproc>:
    bda4:	00800074 	movhi	r2,1
    bda8:	10c8da17 	ldw	r3,9064(r2)
    bdac:	18805217 	ldw	r2,328(r3)
    bdb0:	10001726 	beq	r2,zero,be10 <__register_exitproc+0x6c>
    bdb4:	10c00117 	ldw	r3,4(r2)
    bdb8:	1a000808 	cmpgei	r8,r3,32
    bdbc:	40001b1e 	bne	r8,zero,be2c <__register_exitproc+0x88>
    bdc0:	20000b26 	beq	r4,zero,bdf0 <__register_exitproc+0x4c>
    bdc4:	181090ba 	slli	r8,r3,2
    bdc8:	02400044 	movi	r9,1
    bdcc:	48d2983a 	sll	r9,r9,r3
    bdd0:	1211883a 	add	r8,r2,r8
    bdd4:	41802215 	stw	r6,136(r8)
    bdd8:	11806217 	ldw	r6,392(r2)
    bddc:	21000098 	cmpnei	r4,r4,2
    bde0:	324cb03a 	or	r6,r6,r9
    bde4:	11806215 	stw	r6,392(r2)
    bde8:	41c04215 	stw	r7,264(r8)
    bdec:	20000b26 	beq	r4,zero,be1c <__register_exitproc+0x78>
    bdf0:	19000084 	addi	r4,r3,2
    bdf4:	200890ba 	slli	r4,r4,2
    bdf8:	18c00044 	addi	r3,r3,1
    bdfc:	10c00115 	stw	r3,4(r2)
    be00:	1105883a 	add	r2,r2,r4
    be04:	11400015 	stw	r5,0(r2)
    be08:	0005883a 	mov	r2,zero
    be0c:	f800283a 	ret
    be10:	18805304 	addi	r2,r3,332
    be14:	18805215 	stw	r2,328(r3)
    be18:	003fe606 	br	bdb4 <__register_exitproc+0x10>
    be1c:	11006317 	ldw	r4,396(r2)
    be20:	2252b03a 	or	r9,r4,r9
    be24:	12406315 	stw	r9,396(r2)
    be28:	003ff106 	br	bdf0 <__register_exitproc+0x4c>
    be2c:	00bfffc4 	movi	r2,-1
    be30:	f800283a 	ret

0000be34 <__call_exitprocs>:
    be34:	defff704 	addi	sp,sp,-36
    be38:	00800074 	movhi	r2,1
    be3c:	dcc00315 	stw	r19,12(sp)
    be40:	14c8da17 	ldw	r19,9064(r2)
    be44:	dc800215 	stw	r18,8(sp)
    be48:	dfc00815 	stw	ra,32(sp)
    be4c:	9c805217 	ldw	r18,328(r19)
    be50:	ddc00715 	stw	r23,28(sp)
    be54:	dd800615 	stw	r22,24(sp)
    be58:	dd400515 	stw	r21,20(sp)
    be5c:	dd000415 	stw	r20,16(sp)
    be60:	dc400115 	stw	r17,4(sp)
    be64:	dc000015 	stw	r16,0(sp)
    be68:	90001026 	beq	r18,zero,beac <__call_exitprocs+0x78>
    be6c:	202b883a 	mov	r21,r4
    be70:	282d883a 	mov	r22,r5
    be74:	05000044 	movi	r20,1
    be78:	94000117 	ldw	r16,4(r18)
    be7c:	847fffc4 	addi	r17,r16,-1
    be80:	88000a16 	blt	r17,zero,beac <__call_exitprocs+0x78>
    be84:	84000044 	addi	r16,r16,1
    be88:	802090ba 	slli	r16,r16,2
    be8c:	9421883a 	add	r16,r18,r16
    be90:	b0001126 	beq	r22,zero,bed8 <__call_exitprocs+0xa4>
    be94:	80804017 	ldw	r2,256(r16)
    be98:	15800f26 	beq	r2,r22,bed8 <__call_exitprocs+0xa4>
    be9c:	8c7fffc4 	addi	r17,r17,-1
    bea0:	88bfffd8 	cmpnei	r2,r17,-1
    bea4:	843fff04 	addi	r16,r16,-4
    bea8:	103ff91e 	bne	r2,zero,be90 <__call_exitprocs+0x5c>
    beac:	dfc00817 	ldw	ra,32(sp)
    beb0:	ddc00717 	ldw	r23,28(sp)
    beb4:	dd800617 	ldw	r22,24(sp)
    beb8:	dd400517 	ldw	r21,20(sp)
    bebc:	dd000417 	ldw	r20,16(sp)
    bec0:	dcc00317 	ldw	r19,12(sp)
    bec4:	dc800217 	ldw	r18,8(sp)
    bec8:	dc400117 	ldw	r17,4(sp)
    becc:	dc000017 	ldw	r16,0(sp)
    bed0:	dec00904 	addi	sp,sp,36
    bed4:	f800283a 	ret
    bed8:	90800117 	ldw	r2,4(r18)
    bedc:	81800017 	ldw	r6,0(r16)
    bee0:	10bfffc4 	addi	r2,r2,-1
    bee4:	14401726 	beq	r2,r17,bf44 <__call_exitprocs+0x110>
    bee8:	80000015 	stw	zero,0(r16)
    beec:	303feb26 	beq	r6,zero,be9c <__call_exitprocs+0x68>
    bef0:	a446983a 	sll	r3,r20,r17
    bef4:	90806217 	ldw	r2,392(r18)
    bef8:	95c00117 	ldw	r23,4(r18)
    befc:	1884703a 	and	r2,r3,r2
    bf00:	1000081e 	bne	r2,zero,bf24 <__call_exitprocs+0xf0>
    bf04:	303ee83a 	callr	r6
    bf08:	90c00117 	ldw	r3,4(r18)
    bf0c:	98805217 	ldw	r2,328(r19)
    bf10:	1dc0011e 	bne	r3,r23,bf18 <__call_exitprocs+0xe4>
    bf14:	90bfe126 	beq	r18,r2,be9c <__call_exitprocs+0x68>
    bf18:	103fe426 	beq	r2,zero,beac <__call_exitprocs+0x78>
    bf1c:	1025883a 	mov	r18,r2
    bf20:	003fd506 	br	be78 <__call_exitprocs+0x44>
    bf24:	90806317 	ldw	r2,396(r18)
    bf28:	81002017 	ldw	r4,128(r16)
    bf2c:	1886703a 	and	r3,r3,r2
    bf30:	1800061e 	bne	r3,zero,bf4c <__call_exitprocs+0x118>
    bf34:	200b883a 	mov	r5,r4
    bf38:	a809883a 	mov	r4,r21
    bf3c:	303ee83a 	callr	r6
    bf40:	003ff106 	br	bf08 <__call_exitprocs+0xd4>
    bf44:	94400115 	stw	r17,4(r18)
    bf48:	003fe806 	br	beec <__call_exitprocs+0xb8>
    bf4c:	303ee83a 	callr	r6
    bf50:	003fed06 	br	bf08 <__call_exitprocs+0xd4>

0000bf54 <_putc_r>:
    bf54:	defffc04 	addi	sp,sp,-16
    bf58:	dc400215 	stw	r17,8(sp)
    bf5c:	dfc00315 	stw	ra,12(sp)
    bf60:	2023883a 	mov	r17,r4
    bf64:	20000226 	beq	r4,zero,bf70 <_putc_r+0x1c>
    bf68:	20800e17 	ldw	r2,56(r4)
    bf6c:	10000e26 	beq	r2,zero,bfa8 <_putc_r+0x54>
    bf70:	30800217 	ldw	r2,8(r6)
    bf74:	10bfffc4 	addi	r2,r2,-1
    bf78:	30800215 	stw	r2,8(r6)
    bf7c:	10001316 	blt	r2,zero,bfcc <_putc_r+0x78>
    bf80:	30800017 	ldw	r2,0(r6)
    bf84:	11400005 	stb	r5,0(r2)
    bf88:	30800017 	ldw	r2,0(r6)
    bf8c:	10c00044 	addi	r3,r2,1
    bf90:	30c00015 	stw	r3,0(r6)
    bf94:	10800003 	ldbu	r2,0(r2)
    bf98:	dfc00317 	ldw	ra,12(sp)
    bf9c:	dc400217 	ldw	r17,8(sp)
    bfa0:	dec00404 	addi	sp,sp,16
    bfa4:	f800283a 	ret
    bfa8:	d9800115 	stw	r6,4(sp)
    bfac:	d9400015 	stw	r5,0(sp)
    bfb0:	000ca340 	call	ca34 <__sinit>
    bfb4:	d9800117 	ldw	r6,4(sp)
    bfb8:	d9400017 	ldw	r5,0(sp)
    bfbc:	30800217 	ldw	r2,8(r6)
    bfc0:	10bfffc4 	addi	r2,r2,-1
    bfc4:	30800215 	stw	r2,8(r6)
    bfc8:	103fed0e 	bge	r2,zero,bf80 <_putc_r+0x2c>
    bfcc:	30c00617 	ldw	r3,24(r6)
    bfd0:	10c00e16 	blt	r2,r3,c00c <_putc_r+0xb8>
    bfd4:	30800017 	ldw	r2,0(r6)
    bfd8:	11400005 	stb	r5,0(r2)
    bfdc:	30c00017 	ldw	r3,0(r6)
    bfe0:	18800003 	ldbu	r2,0(r3)
    bfe4:	108002a0 	cmpeqi	r2,r2,10
    bfe8:	1000071e 	bne	r2,zero,c008 <_putc_r+0xb4>
    bfec:	18800044 	addi	r2,r3,1
    bff0:	30800015 	stw	r2,0(r6)
    bff4:	18800003 	ldbu	r2,0(r3)
    bff8:	dfc00317 	ldw	ra,12(sp)
    bffc:	dc400217 	ldw	r17,8(sp)
    c000:	dec00404 	addi	sp,sp,16
    c004:	f800283a 	ret
    c008:	01400284 	movi	r5,10
    c00c:	8809883a 	mov	r4,r17
    c010:	dfc00317 	ldw	ra,12(sp)
    c014:	dc400217 	ldw	r17,8(sp)
    c018:	dec00404 	addi	sp,sp,16
    c01c:	000c1001 	jmpi	c100 <__swbuf_r>

0000c020 <putc>:
    c020:	defffc04 	addi	sp,sp,-16
    c024:	00800074 	movhi	r2,1
    c028:	dc800215 	stw	r18,8(sp)
    c02c:	1488db17 	ldw	r18,9068(r2)
    c030:	dc400115 	stw	r17,4(sp)
    c034:	dfc00315 	stw	ra,12(sp)
    c038:	2023883a 	mov	r17,r4
    c03c:	90000226 	beq	r18,zero,c048 <putc+0x28>
    c040:	90800e17 	ldw	r2,56(r18)
    c044:	10000f26 	beq	r2,zero,c084 <putc+0x64>
    c048:	28800217 	ldw	r2,8(r5)
    c04c:	10bfffc4 	addi	r2,r2,-1
    c050:	28800215 	stw	r2,8(r5)
    c054:	10001316 	blt	r2,zero,c0a4 <putc+0x84>
    c058:	28800017 	ldw	r2,0(r5)
    c05c:	14400005 	stb	r17,0(r2)
    c060:	28800017 	ldw	r2,0(r5)
    c064:	10c00044 	addi	r3,r2,1
    c068:	28c00015 	stw	r3,0(r5)
    c06c:	10800003 	ldbu	r2,0(r2)
    c070:	dfc00317 	ldw	ra,12(sp)
    c074:	dc800217 	ldw	r18,8(sp)
    c078:	dc400117 	ldw	r17,4(sp)
    c07c:	dec00404 	addi	sp,sp,16
    c080:	f800283a 	ret
    c084:	9009883a 	mov	r4,r18
    c088:	d9400015 	stw	r5,0(sp)
    c08c:	000ca340 	call	ca34 <__sinit>
    c090:	d9400017 	ldw	r5,0(sp)
    c094:	28800217 	ldw	r2,8(r5)
    c098:	10bfffc4 	addi	r2,r2,-1
    c09c:	28800215 	stw	r2,8(r5)
    c0a0:	103fed0e 	bge	r2,zero,c058 <putc+0x38>
    c0a4:	28c00617 	ldw	r3,24(r5)
    c0a8:	10c00a16 	blt	r2,r3,c0d4 <putc+0xb4>
    c0ac:	28800017 	ldw	r2,0(r5)
    c0b0:	14400005 	stb	r17,0(r2)
    c0b4:	28c00017 	ldw	r3,0(r5)
    c0b8:	18800003 	ldbu	r2,0(r3)
    c0bc:	108002a0 	cmpeqi	r2,r2,10
    c0c0:	10000c1e 	bne	r2,zero,c0f4 <putc+0xd4>
    c0c4:	18800044 	addi	r2,r3,1
    c0c8:	28800015 	stw	r2,0(r5)
    c0cc:	18800003 	ldbu	r2,0(r3)
    c0d0:	003fe706 	br	c070 <putc+0x50>
    c0d4:	280d883a 	mov	r6,r5
    c0d8:	880b883a 	mov	r5,r17
    c0dc:	9009883a 	mov	r4,r18
    c0e0:	dfc00317 	ldw	ra,12(sp)
    c0e4:	dc800217 	ldw	r18,8(sp)
    c0e8:	dc400117 	ldw	r17,4(sp)
    c0ec:	dec00404 	addi	sp,sp,16
    c0f0:	000c1001 	jmpi	c100 <__swbuf_r>
    c0f4:	280d883a 	mov	r6,r5
    c0f8:	01400284 	movi	r5,10
    c0fc:	003ff706 	br	c0dc <putc+0xbc>

0000c100 <__swbuf_r>:
    c100:	defffb04 	addi	sp,sp,-20
    c104:	dcc00315 	stw	r19,12(sp)
    c108:	dc400115 	stw	r17,4(sp)
    c10c:	dc000015 	stw	r16,0(sp)
    c110:	dfc00415 	stw	ra,16(sp)
    c114:	dc800215 	stw	r18,8(sp)
    c118:	2027883a 	mov	r19,r4
    c11c:	2823883a 	mov	r17,r5
    c120:	3021883a 	mov	r16,r6
    c124:	20000226 	beq	r4,zero,c130 <__swbuf_r+0x30>
    c128:	20800e17 	ldw	r2,56(r4)
    c12c:	10003e26 	beq	r2,zero,c228 <__swbuf_r+0x128>
    c130:	80800617 	ldw	r2,24(r16)
    c134:	80c0030b 	ldhu	r3,12(r16)
    c138:	80800215 	stw	r2,8(r16)
    c13c:	1880020c 	andi	r2,r3,8
    c140:	10001f26 	beq	r2,zero,c1c0 <__swbuf_r+0xc0>
    c144:	80800417 	ldw	r2,16(r16)
    c148:	10001d26 	beq	r2,zero,c1c0 <__swbuf_r+0xc0>
    c14c:	1948000c 	andi	r5,r3,8192
    c150:	8c803fcc 	andi	r18,r17,255
    c154:	28002326 	beq	r5,zero,c1e4 <__swbuf_r+0xe4>
    c158:	80c00017 	ldw	r3,0(r16)
    c15c:	81000517 	ldw	r4,20(r16)
    c160:	1885c83a 	sub	r2,r3,r2
    c164:	1100290e 	bge	r2,r4,c20c <__swbuf_r+0x10c>
    c168:	10800044 	addi	r2,r2,1
    c16c:	81400217 	ldw	r5,8(r16)
    c170:	19000044 	addi	r4,r3,1
    c174:	81000015 	stw	r4,0(r16)
    c178:	297fffc4 	addi	r5,r5,-1
    c17c:	81400215 	stw	r5,8(r16)
    c180:	1c400005 	stb	r17,0(r3)
    c184:	80c00517 	ldw	r3,20(r16)
    c188:	18802926 	beq	r3,r2,c230 <__swbuf_r+0x130>
    c18c:	8080030b 	ldhu	r2,12(r16)
    c190:	1080004c 	andi	r2,r2,1
    c194:	10000226 	beq	r2,zero,c1a0 <__swbuf_r+0xa0>
    c198:	90800298 	cmpnei	r2,r18,10
    c19c:	10002426 	beq	r2,zero,c230 <__swbuf_r+0x130>
    c1a0:	9005883a 	mov	r2,r18
    c1a4:	dfc00417 	ldw	ra,16(sp)
    c1a8:	dcc00317 	ldw	r19,12(sp)
    c1ac:	dc800217 	ldw	r18,8(sp)
    c1b0:	dc400117 	ldw	r17,4(sp)
    c1b4:	dc000017 	ldw	r16,0(sp)
    c1b8:	dec00504 	addi	sp,sp,20
    c1bc:	f800283a 	ret
    c1c0:	800b883a 	mov	r5,r16
    c1c4:	9809883a 	mov	r4,r19
    c1c8:	000c2600 	call	c260 <__swsetup_r>
    c1cc:	10001c1e 	bne	r2,zero,c240 <__swbuf_r+0x140>
    c1d0:	80c0030b 	ldhu	r3,12(r16)
    c1d4:	80800417 	ldw	r2,16(r16)
    c1d8:	8c803fcc 	andi	r18,r17,255
    c1dc:	1948000c 	andi	r5,r3,8192
    c1e0:	283fdd1e 	bne	r5,zero,c158 <__swbuf_r+0x58>
    c1e4:	81001917 	ldw	r4,100(r16)
    c1e8:	18c80014 	ori	r3,r3,8192
    c1ec:	0177ffc4 	movi	r5,-8193
    c1f0:	2148703a 	and	r4,r4,r5
    c1f4:	80c0030d 	sth	r3,12(r16)
    c1f8:	80c00017 	ldw	r3,0(r16)
    c1fc:	81001915 	stw	r4,100(r16)
    c200:	81000517 	ldw	r4,20(r16)
    c204:	1885c83a 	sub	r2,r3,r2
    c208:	113fd716 	blt	r2,r4,c168 <__swbuf_r+0x68>
    c20c:	800b883a 	mov	r5,r16
    c210:	9809883a 	mov	r4,r19
    c214:	000c5ec0 	call	c5ec <_fflush_r>
    c218:	1000091e 	bne	r2,zero,c240 <__swbuf_r+0x140>
    c21c:	80c00017 	ldw	r3,0(r16)
    c220:	00800044 	movi	r2,1
    c224:	003fd106 	br	c16c <__swbuf_r+0x6c>
    c228:	000ca340 	call	ca34 <__sinit>
    c22c:	003fc006 	br	c130 <__swbuf_r+0x30>
    c230:	800b883a 	mov	r5,r16
    c234:	9809883a 	mov	r4,r19
    c238:	000c5ec0 	call	c5ec <_fflush_r>
    c23c:	103fd826 	beq	r2,zero,c1a0 <__swbuf_r+0xa0>
    c240:	04bfffc4 	movi	r18,-1
    c244:	003fd606 	br	c1a0 <__swbuf_r+0xa0>

0000c248 <__swbuf>:
    c248:	00c00074 	movhi	r3,1
    c24c:	2005883a 	mov	r2,r4
    c250:	1908db17 	ldw	r4,9068(r3)
    c254:	280d883a 	mov	r6,r5
    c258:	100b883a 	mov	r5,r2
    c25c:	000c1001 	jmpi	c100 <__swbuf_r>

0000c260 <__swsetup_r>:
    c260:	00800074 	movhi	r2,1
    c264:	1088db17 	ldw	r2,9068(r2)
    c268:	defffd04 	addi	sp,sp,-12
    c26c:	dc400115 	stw	r17,4(sp)
    c270:	dc000015 	stw	r16,0(sp)
    c274:	dfc00215 	stw	ra,8(sp)
    c278:	2023883a 	mov	r17,r4
    c27c:	2821883a 	mov	r16,r5
    c280:	10000226 	beq	r2,zero,c28c <__swsetup_r+0x2c>
    c284:	10c00e17 	ldw	r3,56(r2)
    c288:	18001f26 	beq	r3,zero,c308 <__swsetup_r+0xa8>
    c28c:	8180030b 	ldhu	r6,12(r16)
    c290:	30c0020c 	andi	r3,r6,8
    c294:	3005883a 	mov	r2,r6
    c298:	18002126 	beq	r3,zero,c320 <__swsetup_r+0xc0>
    c29c:	80c00417 	ldw	r3,16(r16)
    c2a0:	18002826 	beq	r3,zero,c344 <__swsetup_r+0xe4>
    c2a4:	1100004c 	andi	r4,r2,1
    c2a8:	20000b1e 	bne	r4,zero,c2d8 <__swsetup_r+0x78>
    c2ac:	1100008c 	andi	r4,r2,2
    c2b0:	20002e1e 	bne	r4,zero,c36c <__swsetup_r+0x10c>
    c2b4:	81000517 	ldw	r4,20(r16)
    c2b8:	81000215 	stw	r4,8(r16)
    c2bc:	18000b26 	beq	r3,zero,c2ec <__swsetup_r+0x8c>
    c2c0:	0005883a 	mov	r2,zero
    c2c4:	dfc00217 	ldw	ra,8(sp)
    c2c8:	dc400117 	ldw	r17,4(sp)
    c2cc:	dc000017 	ldw	r16,0(sp)
    c2d0:	dec00304 	addi	sp,sp,12
    c2d4:	f800283a 	ret
    c2d8:	81000517 	ldw	r4,20(r16)
    c2dc:	80000215 	stw	zero,8(r16)
    c2e0:	0109c83a 	sub	r4,zero,r4
    c2e4:	81000615 	stw	r4,24(r16)
    c2e8:	183ff51e 	bne	r3,zero,c2c0 <__swsetup_r+0x60>
    c2ec:	10c0200c 	andi	r3,r2,128
    c2f0:	0005883a 	mov	r2,zero
    c2f4:	183ff326 	beq	r3,zero,c2c4 <__swsetup_r+0x64>
    c2f8:	31801014 	ori	r6,r6,64
    c2fc:	8180030d 	sth	r6,12(r16)
    c300:	00bfffc4 	movi	r2,-1
    c304:	003fef06 	br	c2c4 <__swsetup_r+0x64>
    c308:	1009883a 	mov	r4,r2
    c30c:	000ca340 	call	ca34 <__sinit>
    c310:	8180030b 	ldhu	r6,12(r16)
    c314:	30c0020c 	andi	r3,r6,8
    c318:	3005883a 	mov	r2,r6
    c31c:	183fdf1e 	bne	r3,zero,c29c <__swsetup_r+0x3c>
    c320:	3080040c 	andi	r2,r6,16
    c324:	10002126 	beq	r2,zero,c3ac <__swsetup_r+0x14c>
    c328:	3080010c 	andi	r2,r6,4
    c32c:	1000111e 	bne	r2,zero,c374 <__swsetup_r+0x114>
    c330:	80c00417 	ldw	r3,16(r16)
    c334:	30800214 	ori	r2,r6,8
    c338:	8080030d 	sth	r2,12(r16)
    c33c:	100d883a 	mov	r6,r2
    c340:	183fd81e 	bne	r3,zero,c2a4 <__swsetup_r+0x44>
    c344:	1100a00c 	andi	r4,r2,640
    c348:	21008020 	cmpeqi	r4,r4,512
    c34c:	203fd51e 	bne	r4,zero,c2a4 <__swsetup_r+0x44>
    c350:	800b883a 	mov	r5,r16
    c354:	8809883a 	mov	r4,r17
    c358:	000cfd40 	call	cfd4 <__smakebuf_r>
    c35c:	8180030b 	ldhu	r6,12(r16)
    c360:	80c00417 	ldw	r3,16(r16)
    c364:	3005883a 	mov	r2,r6
    c368:	003fce06 	br	c2a4 <__swsetup_r+0x44>
    c36c:	0009883a 	mov	r4,zero
    c370:	003fd106 	br	c2b8 <__swsetup_r+0x58>
    c374:	81400c17 	ldw	r5,48(r16)
    c378:	28000626 	beq	r5,zero,c394 <__swsetup_r+0x134>
    c37c:	80801004 	addi	r2,r16,64
    c380:	28800326 	beq	r5,r2,c390 <__swsetup_r+0x130>
    c384:	8809883a 	mov	r4,r17
    c388:	000cb980 	call	cb98 <_free_r>
    c38c:	8180030b 	ldhu	r6,12(r16)
    c390:	80000c15 	stw	zero,48(r16)
    c394:	80c00417 	ldw	r3,16(r16)
    c398:	00bff6c4 	movi	r2,-37
    c39c:	118c703a 	and	r6,r2,r6
    c3a0:	80000115 	stw	zero,4(r16)
    c3a4:	80c00015 	stw	r3,0(r16)
    c3a8:	003fe206 	br	c334 <__swsetup_r+0xd4>
    c3ac:	00800244 	movi	r2,9
    c3b0:	88800015 	stw	r2,0(r17)
    c3b4:	31801014 	ori	r6,r6,64
    c3b8:	8180030d 	sth	r6,12(r16)
    c3bc:	00bfffc4 	movi	r2,-1
    c3c0:	003fc006 	br	c2c4 <__swsetup_r+0x64>

0000c3c4 <__sflush_r>:
    c3c4:	2880030b 	ldhu	r2,12(r5)
    c3c8:	defffb04 	addi	sp,sp,-20
    c3cc:	dcc00315 	stw	r19,12(sp)
    c3d0:	dc000015 	stw	r16,0(sp)
    c3d4:	dfc00415 	stw	ra,16(sp)
    c3d8:	dc800215 	stw	r18,8(sp)
    c3dc:	dc400115 	stw	r17,4(sp)
    c3e0:	10c0020c 	andi	r3,r2,8
    c3e4:	2821883a 	mov	r16,r5
    c3e8:	2027883a 	mov	r19,r4
    c3ec:	18003f1e 	bne	r3,zero,c4ec <__sflush_r+0x128>
    c3f0:	28c00117 	ldw	r3,4(r5)
    c3f4:	10820014 	ori	r2,r2,2048
    c3f8:	2880030d 	sth	r2,12(r5)
    c3fc:	00c0550e 	bge	zero,r3,c554 <__sflush_r+0x190>
    c400:	82000a17 	ldw	r8,40(r16)
    c404:	40003126 	beq	r8,zero,c4cc <__sflush_r+0x108>
    c408:	9c400017 	ldw	r17,0(r19)
    c40c:	1104000c 	andi	r4,r2,4096
    c410:	98000015 	stw	zero,0(r19)
    c414:	81400717 	ldw	r5,28(r16)
    c418:	1007883a 	mov	r3,r2
    c41c:	2000521e 	bne	r4,zero,c568 <__sflush_r+0x1a4>
    c420:	01c00044 	movi	r7,1
    c424:	000d883a 	mov	r6,zero
    c428:	9809883a 	mov	r4,r19
    c42c:	403ee83a 	callr	r8
    c430:	10ffffd8 	cmpnei	r3,r2,-1
    c434:	18005826 	beq	r3,zero,c598 <__sflush_r+0x1d4>
    c438:	80c0030b 	ldhu	r3,12(r16)
    c43c:	82000a17 	ldw	r8,40(r16)
    c440:	81400717 	ldw	r5,28(r16)
    c444:	18c0010c 	andi	r3,r3,4
    c448:	18000626 	beq	r3,zero,c464 <__sflush_r+0xa0>
    c44c:	81000117 	ldw	r4,4(r16)
    c450:	80c00c17 	ldw	r3,48(r16)
    c454:	1105c83a 	sub	r2,r2,r4
    c458:	18000226 	beq	r3,zero,c464 <__sflush_r+0xa0>
    c45c:	80c00f17 	ldw	r3,60(r16)
    c460:	10c5c83a 	sub	r2,r2,r3
    c464:	100d883a 	mov	r6,r2
    c468:	000f883a 	mov	r7,zero
    c46c:	9809883a 	mov	r4,r19
    c470:	403ee83a 	callr	r8
    c474:	10ffffd8 	cmpnei	r3,r2,-1
    c478:	18003d1e 	bne	r3,zero,c570 <__sflush_r+0x1ac>
    c47c:	99000017 	ldw	r4,0(r19)
    c480:	80c0030b 	ldhu	r3,12(r16)
    c484:	20004e26 	beq	r4,zero,c5c0 <__sflush_r+0x1fc>
    c488:	21400760 	cmpeqi	r5,r4,29
    c48c:	2800021e 	bne	r5,zero,c498 <__sflush_r+0xd4>
    c490:	210005a0 	cmpeqi	r4,r4,22
    c494:	20002c26 	beq	r4,zero,c548 <__sflush_r+0x184>
    c498:	80800417 	ldw	r2,16(r16)
    c49c:	18fdffcc 	andi	r3,r3,63487
    c4a0:	80c0030d 	sth	r3,12(r16)
    c4a4:	80000115 	stw	zero,4(r16)
    c4a8:	80800015 	stw	r2,0(r16)
    c4ac:	81400c17 	ldw	r5,48(r16)
    c4b0:	9c400015 	stw	r17,0(r19)
    c4b4:	28000526 	beq	r5,zero,c4cc <__sflush_r+0x108>
    c4b8:	80801004 	addi	r2,r16,64
    c4bc:	28800226 	beq	r5,r2,c4c8 <__sflush_r+0x104>
    c4c0:	9809883a 	mov	r4,r19
    c4c4:	000cb980 	call	cb98 <_free_r>
    c4c8:	80000c15 	stw	zero,48(r16)
    c4cc:	0005883a 	mov	r2,zero
    c4d0:	dfc00417 	ldw	ra,16(sp)
    c4d4:	dcc00317 	ldw	r19,12(sp)
    c4d8:	dc800217 	ldw	r18,8(sp)
    c4dc:	dc400117 	ldw	r17,4(sp)
    c4e0:	dc000017 	ldw	r16,0(sp)
    c4e4:	dec00504 	addi	sp,sp,20
    c4e8:	f800283a 	ret
    c4ec:	2c800417 	ldw	r18,16(r5)
    c4f0:	903ff626 	beq	r18,zero,c4cc <__sflush_r+0x108>
    c4f4:	2c400017 	ldw	r17,0(r5)
    c4f8:	108000cc 	andi	r2,r2,3
    c4fc:	2c800015 	stw	r18,0(r5)
    c500:	8ca3c83a 	sub	r17,r17,r18
    c504:	1000161e 	bne	r2,zero,c560 <__sflush_r+0x19c>
    c508:	28800517 	ldw	r2,20(r5)
    c50c:	80800215 	stw	r2,8(r16)
    c510:	04400316 	blt	zero,r17,c520 <__sflush_r+0x15c>
    c514:	003fed06 	br	c4cc <__sflush_r+0x108>
    c518:	90a5883a 	add	r18,r18,r2
    c51c:	047feb0e 	bge	zero,r17,c4cc <__sflush_r+0x108>
    c520:	80800917 	ldw	r2,36(r16)
    c524:	81400717 	ldw	r5,28(r16)
    c528:	880f883a 	mov	r7,r17
    c52c:	900d883a 	mov	r6,r18
    c530:	9809883a 	mov	r4,r19
    c534:	103ee83a 	callr	r2
    c538:	88a3c83a 	sub	r17,r17,r2
    c53c:	00bff616 	blt	zero,r2,c518 <__sflush_r+0x154>
    c540:	80c0030b 	ldhu	r3,12(r16)
    c544:	00bfffc4 	movi	r2,-1
    c548:	18c01014 	ori	r3,r3,64
    c54c:	80c0030d 	sth	r3,12(r16)
    c550:	003fdf06 	br	c4d0 <__sflush_r+0x10c>
    c554:	28c00f17 	ldw	r3,60(r5)
    c558:	00ffa916 	blt	zero,r3,c400 <__sflush_r+0x3c>
    c55c:	003fdb06 	br	c4cc <__sflush_r+0x108>
    c560:	0005883a 	mov	r2,zero
    c564:	003fe906 	br	c50c <__sflush_r+0x148>
    c568:	80801417 	ldw	r2,80(r16)
    c56c:	003fb506 	br	c444 <__sflush_r+0x80>
    c570:	80c0030b 	ldhu	r3,12(r16)
    c574:	81000417 	ldw	r4,16(r16)
    c578:	80000115 	stw	zero,4(r16)
    c57c:	197dffcc 	andi	r5,r3,63487
    c580:	8140030d 	sth	r5,12(r16)
    c584:	81000015 	stw	r4,0(r16)
    c588:	18c4000c 	andi	r3,r3,4096
    c58c:	183fc726 	beq	r3,zero,c4ac <__sflush_r+0xe8>
    c590:	80801415 	stw	r2,80(r16)
    c594:	003fc506 	br	c4ac <__sflush_r+0xe8>
    c598:	98c00017 	ldw	r3,0(r19)
    c59c:	183fa626 	beq	r3,zero,c438 <__sflush_r+0x74>
    c5a0:	19000760 	cmpeqi	r4,r3,29
    c5a4:	20000e1e 	bne	r4,zero,c5e0 <__sflush_r+0x21c>
    c5a8:	18c00598 	cmpnei	r3,r3,22
    c5ac:	18000c26 	beq	r3,zero,c5e0 <__sflush_r+0x21c>
    c5b0:	80c0030b 	ldhu	r3,12(r16)
    c5b4:	18c01014 	ori	r3,r3,64
    c5b8:	80c0030d 	sth	r3,12(r16)
    c5bc:	003fc406 	br	c4d0 <__sflush_r+0x10c>
    c5c0:	81000417 	ldw	r4,16(r16)
    c5c4:	197dffcc 	andi	r5,r3,63487
    c5c8:	8140030d 	sth	r5,12(r16)
    c5cc:	80000115 	stw	zero,4(r16)
    c5d0:	81000015 	stw	r4,0(r16)
    c5d4:	18c4000c 	andi	r3,r3,4096
    c5d8:	183fb426 	beq	r3,zero,c4ac <__sflush_r+0xe8>
    c5dc:	003fec06 	br	c590 <__sflush_r+0x1cc>
    c5e0:	9c400015 	stw	r17,0(r19)
    c5e4:	0005883a 	mov	r2,zero
    c5e8:	003fb906 	br	c4d0 <__sflush_r+0x10c>

0000c5ec <_fflush_r>:
    c5ec:	defffd04 	addi	sp,sp,-12
    c5f0:	dc000115 	stw	r16,4(sp)
    c5f4:	dfc00215 	stw	ra,8(sp)
    c5f8:	2021883a 	mov	r16,r4
    c5fc:	20000226 	beq	r4,zero,c608 <_fflush_r+0x1c>
    c600:	20800e17 	ldw	r2,56(r4)
    c604:	10000726 	beq	r2,zero,c624 <_fflush_r+0x38>
    c608:	2880030f 	ldh	r2,12(r5)
    c60c:	10000a1e 	bne	r2,zero,c638 <_fflush_r+0x4c>
    c610:	0005883a 	mov	r2,zero
    c614:	dfc00217 	ldw	ra,8(sp)
    c618:	dc000117 	ldw	r16,4(sp)
    c61c:	dec00304 	addi	sp,sp,12
    c620:	f800283a 	ret
    c624:	d9400015 	stw	r5,0(sp)
    c628:	000ca340 	call	ca34 <__sinit>
    c62c:	d9400017 	ldw	r5,0(sp)
    c630:	2880030f 	ldh	r2,12(r5)
    c634:	103ff626 	beq	r2,zero,c610 <_fflush_r+0x24>
    c638:	8009883a 	mov	r4,r16
    c63c:	dfc00217 	ldw	ra,8(sp)
    c640:	dc000117 	ldw	r16,4(sp)
    c644:	dec00304 	addi	sp,sp,12
    c648:	000c3c41 	jmpi	c3c4 <__sflush_r>

0000c64c <fflush>:
    c64c:	20001726 	beq	r4,zero,c6ac <fflush+0x60>
    c650:	00800074 	movhi	r2,1
    c654:	200b883a 	mov	r5,r4
    c658:	1108db17 	ldw	r4,9068(r2)
    c65c:	20000226 	beq	r4,zero,c668 <fflush+0x1c>
    c660:	20800e17 	ldw	r2,56(r4)
    c664:	10000526 	beq	r2,zero,c67c <fflush+0x30>
    c668:	2880030f 	ldh	r2,12(r5)
    c66c:	1000021e 	bne	r2,zero,c678 <fflush+0x2c>
    c670:	0005883a 	mov	r2,zero
    c674:	f800283a 	ret
    c678:	000c3c41 	jmpi	c3c4 <__sflush_r>
    c67c:	defffd04 	addi	sp,sp,-12
    c680:	d9400115 	stw	r5,4(sp)
    c684:	d9000015 	stw	r4,0(sp)
    c688:	dfc00215 	stw	ra,8(sp)
    c68c:	000ca340 	call	ca34 <__sinit>
    c690:	d9400117 	ldw	r5,4(sp)
    c694:	d9000017 	ldw	r4,0(sp)
    c698:	2880030f 	ldh	r2,12(r5)
    c69c:	10000826 	beq	r2,zero,c6c0 <fflush+0x74>
    c6a0:	dfc00217 	ldw	ra,8(sp)
    c6a4:	dec00304 	addi	sp,sp,12
    c6a8:	000c3c41 	jmpi	c3c4 <__sflush_r>
    c6ac:	00800074 	movhi	r2,1
    c6b0:	1108da17 	ldw	r4,9064(r2)
    c6b4:	01400074 	movhi	r5,1
    c6b8:	29717b04 	addi	r5,r5,-14868
    c6bc:	000cf2c1 	jmpi	cf2c <_fwalk_reent>
    c6c0:	0005883a 	mov	r2,zero
    c6c4:	dfc00217 	ldw	ra,8(sp)
    c6c8:	dec00304 	addi	sp,sp,12
    c6cc:	f800283a 	ret

0000c6d0 <__fp_lock>:
    c6d0:	0005883a 	mov	r2,zero
    c6d4:	f800283a 	ret

0000c6d8 <_cleanup_r>:
    c6d8:	01400074 	movhi	r5,1
    c6dc:	29778004 	addi	r5,r5,-8704
    c6e0:	000cf2c1 	jmpi	cf2c <_fwalk_reent>

0000c6e4 <__fp_unlock>:
    c6e4:	0005883a 	mov	r2,zero
    c6e8:	f800283a 	ret

0000c6ec <__sinit.part.0>:
    c6ec:	00c00074 	movhi	r3,1
    c6f0:	20800117 	ldw	r2,4(r4)
    c6f4:	18f1b604 	addi	r3,r3,-14632
    c6f8:	20c00f15 	stw	r3,60(r4)
    c6fc:	2140bb04 	addi	r5,r4,748
    c700:	00c000c4 	movi	r3,3
    c704:	20c0b915 	stw	r3,740(r4)
    c708:	2140ba15 	stw	r5,744(r4)
    c70c:	2000b815 	stw	zero,736(r4)
    c710:	10001705 	stb	zero,92(r2)
    c714:	10001745 	stb	zero,93(r2)
    c718:	10001785 	stb	zero,94(r2)
    c71c:	100017c5 	stb	zero,95(r2)
    c720:	10001805 	stb	zero,96(r2)
    c724:	10001845 	stb	zero,97(r2)
    c728:	10001885 	stb	zero,98(r2)
    c72c:	100018c5 	stb	zero,99(r2)
    c730:	00c00104 	movi	r3,4
    c734:	10c00315 	stw	r3,12(r2)
    c738:	02000074 	movhi	r8,1
    c73c:	20c00217 	ldw	r3,8(r4)
    c740:	01c00074 	movhi	r7,1
    c744:	01800074 	movhi	r6,1
    c748:	01400074 	movhi	r5,1
    c74c:	4236d104 	addi	r8,r8,-9404
    c750:	39f6e804 	addi	r7,r7,-9312
    c754:	31b70804 	addi	r6,r6,-9184
    c758:	29771f04 	addi	r5,r5,-9092
    c75c:	02400074 	movhi	r9,1
    c760:	10001915 	stw	zero,100(r2)
    c764:	10000015 	stw	zero,0(r2)
    c768:	10000115 	stw	zero,4(r2)
    c76c:	10000215 	stw	zero,8(r2)
    c770:	10000415 	stw	zero,16(r2)
    c774:	10000515 	stw	zero,20(r2)
    c778:	10000615 	stw	zero,24(r2)
    c77c:	10800715 	stw	r2,28(r2)
    c780:	12000815 	stw	r8,32(r2)
    c784:	11c00915 	stw	r7,36(r2)
    c788:	11800a15 	stw	r6,40(r2)
    c78c:	11400b15 	stw	r5,44(r2)
    c790:	4a400284 	addi	r9,r9,10
    c794:	1a400315 	stw	r9,12(r3)
    c798:	18001915 	stw	zero,100(r3)
    c79c:	18000015 	stw	zero,0(r3)
    c7a0:	18000115 	stw	zero,4(r3)
    c7a4:	18000215 	stw	zero,8(r3)
    c7a8:	18000415 	stw	zero,16(r3)
    c7ac:	18001705 	stb	zero,92(r3)
    c7b0:	18001745 	stb	zero,93(r3)
    c7b4:	18001785 	stb	zero,94(r3)
    c7b8:	180017c5 	stb	zero,95(r3)
    c7bc:	18001805 	stb	zero,96(r3)
    c7c0:	18001845 	stb	zero,97(r3)
    c7c4:	18001885 	stb	zero,98(r3)
    c7c8:	180018c5 	stb	zero,99(r3)
    c7cc:	20800317 	ldw	r2,12(r4)
    c7d0:	024000b4 	movhi	r9,2
    c7d4:	18000515 	stw	zero,20(r3)
    c7d8:	18000615 	stw	zero,24(r3)
    c7dc:	18c00715 	stw	r3,28(r3)
    c7e0:	1a000815 	stw	r8,32(r3)
    c7e4:	19c00915 	stw	r7,36(r3)
    c7e8:	19800a15 	stw	r6,40(r3)
    c7ec:	19400b15 	stw	r5,44(r3)
    c7f0:	4a400484 	addi	r9,r9,18
    c7f4:	10001915 	stw	zero,100(r2)
    c7f8:	10000015 	stw	zero,0(r2)
    c7fc:	10000115 	stw	zero,4(r2)
    c800:	10000215 	stw	zero,8(r2)
    c804:	12400315 	stw	r9,12(r2)
    c808:	10000415 	stw	zero,16(r2)
    c80c:	10000515 	stw	zero,20(r2)
    c810:	10000615 	stw	zero,24(r2)
    c814:	10001705 	stb	zero,92(r2)
    c818:	10001745 	stb	zero,93(r2)
    c81c:	10001785 	stb	zero,94(r2)
    c820:	100017c5 	stb	zero,95(r2)
    c824:	10001805 	stb	zero,96(r2)
    c828:	10001845 	stb	zero,97(r2)
    c82c:	10001885 	stb	zero,98(r2)
    c830:	100018c5 	stb	zero,99(r2)
    c834:	10800715 	stw	r2,28(r2)
    c838:	12000815 	stw	r8,32(r2)
    c83c:	11c00915 	stw	r7,36(r2)
    c840:	11800a15 	stw	r6,40(r2)
    c844:	11400b15 	stw	r5,44(r2)
    c848:	00800044 	movi	r2,1
    c84c:	20800e15 	stw	r2,56(r4)
    c850:	f800283a 	ret

0000c854 <__sfmoreglue>:
    c854:	defffc04 	addi	sp,sp,-16
    c858:	dc800215 	stw	r18,8(sp)
    c85c:	2825883a 	mov	r18,r5
    c860:	dc000015 	stw	r16,0(sp)
    c864:	01401a04 	movi	r5,104
    c868:	2021883a 	mov	r16,r4
    c86c:	913fffc4 	addi	r4,r18,-1
    c870:	dfc00315 	stw	ra,12(sp)
    c874:	dc400115 	stw	r17,4(sp)
    c878:	0005e880 	call	5e88 <__mulsi3>
    c87c:	8009883a 	mov	r4,r16
    c880:	11401d04 	addi	r5,r2,116
    c884:	1023883a 	mov	r17,r2
    c888:	000d21c0 	call	d21c <_malloc_r>
    c88c:	1021883a 	mov	r16,r2
    c890:	10000726 	beq	r2,zero,c8b0 <__sfmoreglue+0x5c>
    c894:	11000304 	addi	r4,r2,12
    c898:	10000015 	stw	zero,0(r2)
    c89c:	14800115 	stw	r18,4(r2)
    c8a0:	11000215 	stw	r4,8(r2)
    c8a4:	89801a04 	addi	r6,r17,104
    c8a8:	000b883a 	mov	r5,zero
    c8ac:	000d9fc0 	call	d9fc <memset>
    c8b0:	8005883a 	mov	r2,r16
    c8b4:	dfc00317 	ldw	ra,12(sp)
    c8b8:	dc800217 	ldw	r18,8(sp)
    c8bc:	dc400117 	ldw	r17,4(sp)
    c8c0:	dc000017 	ldw	r16,0(sp)
    c8c4:	dec00404 	addi	sp,sp,16
    c8c8:	f800283a 	ret

0000c8cc <__sfp>:
    c8cc:	defffb04 	addi	sp,sp,-20
    c8d0:	00800074 	movhi	r2,1
    c8d4:	dc000015 	stw	r16,0(sp)
    c8d8:	1408da17 	ldw	r16,9064(r2)
    c8dc:	dc400115 	stw	r17,4(sp)
    c8e0:	dfc00415 	stw	ra,16(sp)
    c8e4:	80800e17 	ldw	r2,56(r16)
    c8e8:	dcc00315 	stw	r19,12(sp)
    c8ec:	dc800215 	stw	r18,8(sp)
    c8f0:	2023883a 	mov	r17,r4
    c8f4:	10003126 	beq	r2,zero,c9bc <__sfp+0xf0>
    c8f8:	8100ba17 	ldw	r4,744(r16)
    c8fc:	8140b917 	ldw	r5,740(r16)
    c900:	04c00104 	movi	r19,4
    c904:	8400b804 	addi	r16,r16,736
    c908:	297fffc4 	addi	r5,r5,-1
    c90c:	2800050e 	bge	r5,zero,c924 <__sfp+0x58>
    c910:	00002406 	br	c9a4 <__sfp+0xd8>
    c914:	297fffc4 	addi	r5,r5,-1
    c918:	28bfffd8 	cmpnei	r2,r5,-1
    c91c:	21001a04 	addi	r4,r4,104
    c920:	10002026 	beq	r2,zero,c9a4 <__sfp+0xd8>
    c924:	2080030f 	ldh	r2,12(r4)
    c928:	103ffa1e 	bne	r2,zero,c914 <__sfp+0x48>
    c92c:	00bffff4 	movhi	r2,65535
    c930:	10800044 	addi	r2,r2,1
    c934:	20001915 	stw	zero,100(r4)
    c938:	20000015 	stw	zero,0(r4)
    c93c:	20000115 	stw	zero,4(r4)
    c940:	20000215 	stw	zero,8(r4)
    c944:	20800315 	stw	r2,12(r4)
    c948:	20000415 	stw	zero,16(r4)
    c94c:	20000515 	stw	zero,20(r4)
    c950:	20000615 	stw	zero,24(r4)
    c954:	20001705 	stb	zero,92(r4)
    c958:	20001745 	stb	zero,93(r4)
    c95c:	20001785 	stb	zero,94(r4)
    c960:	200017c5 	stb	zero,95(r4)
    c964:	20001805 	stb	zero,96(r4)
    c968:	20001845 	stb	zero,97(r4)
    c96c:	20001885 	stb	zero,98(r4)
    c970:	200018c5 	stb	zero,99(r4)
    c974:	20000c15 	stw	zero,48(r4)
    c978:	20000d15 	stw	zero,52(r4)
    c97c:	20001115 	stw	zero,68(r4)
    c980:	20001215 	stw	zero,72(r4)
    c984:	2005883a 	mov	r2,r4
    c988:	dfc00417 	ldw	ra,16(sp)
    c98c:	dcc00317 	ldw	r19,12(sp)
    c990:	dc800217 	ldw	r18,8(sp)
    c994:	dc400117 	ldw	r17,4(sp)
    c998:	dc000017 	ldw	r16,0(sp)
    c99c:	dec00504 	addi	sp,sp,20
    c9a0:	f800283a 	ret
    c9a4:	80800017 	ldw	r2,0(r16)
    c9a8:	10000726 	beq	r2,zero,c9c8 <__sfp+0xfc>
    c9ac:	11000217 	ldw	r4,8(r2)
    c9b0:	11400117 	ldw	r5,4(r2)
    c9b4:	1021883a 	mov	r16,r2
    c9b8:	003fd306 	br	c908 <__sfp+0x3c>
    c9bc:	8009883a 	mov	r4,r16
    c9c0:	000c6ec0 	call	c6ec <__sinit.part.0>
    c9c4:	003fcc06 	br	c8f8 <__sfp+0x2c>
    c9c8:	01406b04 	movi	r5,428
    c9cc:	8809883a 	mov	r4,r17
    c9d0:	000d21c0 	call	d21c <_malloc_r>
    c9d4:	1025883a 	mov	r18,r2
    c9d8:	10000c26 	beq	r2,zero,ca0c <__sfp+0x140>
    c9dc:	11000304 	addi	r4,r2,12
    c9e0:	11000215 	stw	r4,8(r2)
    c9e4:	000b883a 	mov	r5,zero
    c9e8:	10000015 	stw	zero,0(r2)
    c9ec:	14c00115 	stw	r19,4(r2)
    c9f0:	01806804 	movi	r6,416
    c9f4:	000d9fc0 	call	d9fc <memset>
    c9f8:	1009883a 	mov	r4,r2
    c9fc:	84800015 	stw	r18,0(r16)
    ca00:	014000c4 	movi	r5,3
    ca04:	9021883a 	mov	r16,r18
    ca08:	003fc606 	br	c924 <__sfp+0x58>
    ca0c:	80000015 	stw	zero,0(r16)
    ca10:	00800304 	movi	r2,12
    ca14:	88800015 	stw	r2,0(r17)
    ca18:	0009883a 	mov	r4,zero
    ca1c:	003fd906 	br	c984 <__sfp+0xb8>

0000ca20 <_cleanup>:
    ca20:	00800074 	movhi	r2,1
    ca24:	1108da17 	ldw	r4,9064(r2)
    ca28:	01400074 	movhi	r5,1
    ca2c:	29778004 	addi	r5,r5,-8704
    ca30:	000cf2c1 	jmpi	cf2c <_fwalk_reent>

0000ca34 <__sinit>:
    ca34:	20800e17 	ldw	r2,56(r4)
    ca38:	10000126 	beq	r2,zero,ca40 <__sinit+0xc>
    ca3c:	f800283a 	ret
    ca40:	000c6ec1 	jmpi	c6ec <__sinit.part.0>

0000ca44 <__sfp_lock_acquire>:
    ca44:	f800283a 	ret

0000ca48 <__sfp_lock_release>:
    ca48:	f800283a 	ret

0000ca4c <__sinit_lock_acquire>:
    ca4c:	f800283a 	ret

0000ca50 <__sinit_lock_release>:
    ca50:	f800283a 	ret

0000ca54 <__fp_lock_all>:
    ca54:	00800074 	movhi	r2,1
    ca58:	1108db17 	ldw	r4,9068(r2)
    ca5c:	01400074 	movhi	r5,1
    ca60:	2971b404 	addi	r5,r5,-14640
    ca64:	000ce941 	jmpi	ce94 <_fwalk>

0000ca68 <__fp_unlock_all>:
    ca68:	00800074 	movhi	r2,1
    ca6c:	1108db17 	ldw	r4,9068(r2)
    ca70:	01400074 	movhi	r5,1
    ca74:	2971b904 	addi	r5,r5,-14620
    ca78:	000ce941 	jmpi	ce94 <_fwalk>

0000ca7c <_malloc_trim_r>:
    ca7c:	defffb04 	addi	sp,sp,-20
    ca80:	dcc00315 	stw	r19,12(sp)
    ca84:	04c00074 	movhi	r19,1
    ca88:	dc800215 	stw	r18,8(sp)
    ca8c:	dc400115 	stw	r17,4(sp)
    ca90:	dc000015 	stw	r16,0(sp)
    ca94:	dfc00415 	stw	ra,16(sp)
    ca98:	2821883a 	mov	r16,r5
    ca9c:	9cc7d104 	addi	r19,r19,8004
    caa0:	2025883a 	mov	r18,r4
    caa4:	000e3980 	call	e398 <__malloc_lock>
    caa8:	98800217 	ldw	r2,8(r19)
    caac:	14400117 	ldw	r17,4(r2)
    cab0:	00bfff04 	movi	r2,-4
    cab4:	88a2703a 	and	r17,r17,r2
    cab8:	8c21c83a 	sub	r16,r17,r16
    cabc:	8403fbc4 	addi	r16,r16,4079
    cac0:	8020d33a 	srli	r16,r16,12
    cac4:	843fffc4 	addi	r16,r16,-1
    cac8:	8020933a 	slli	r16,r16,12
    cacc:	80840008 	cmpgei	r2,r16,4096
    cad0:	10000626 	beq	r2,zero,caec <_malloc_trim_r+0x70>
    cad4:	000b883a 	mov	r5,zero
    cad8:	9009883a 	mov	r4,r18
    cadc:	000daec0 	call	daec <_sbrk_r>
    cae0:	98c00217 	ldw	r3,8(r19)
    cae4:	1c47883a 	add	r3,r3,r17
    cae8:	10c00a26 	beq	r2,r3,cb14 <_malloc_trim_r+0x98>
    caec:	9009883a 	mov	r4,r18
    caf0:	000e3bc0 	call	e3bc <__malloc_unlock>
    caf4:	0005883a 	mov	r2,zero
    caf8:	dfc00417 	ldw	ra,16(sp)
    cafc:	dcc00317 	ldw	r19,12(sp)
    cb00:	dc800217 	ldw	r18,8(sp)
    cb04:	dc400117 	ldw	r17,4(sp)
    cb08:	dc000017 	ldw	r16,0(sp)
    cb0c:	dec00504 	addi	sp,sp,20
    cb10:	f800283a 	ret
    cb14:	040bc83a 	sub	r5,zero,r16
    cb18:	9009883a 	mov	r4,r18
    cb1c:	000daec0 	call	daec <_sbrk_r>
    cb20:	10bfffd8 	cmpnei	r2,r2,-1
    cb24:	10000d26 	beq	r2,zero,cb5c <_malloc_trim_r+0xe0>
    cb28:	00800074 	movhi	r2,1
    cb2c:	1097d517 	ldw	r2,24404(r2)
    cb30:	98c00217 	ldw	r3,8(r19)
    cb34:	8c23c83a 	sub	r17,r17,r16
    cb38:	8c400054 	ori	r17,r17,1
    cb3c:	1421c83a 	sub	r16,r2,r16
    cb40:	1c400115 	stw	r17,4(r3)
    cb44:	00800074 	movhi	r2,1
    cb48:	9009883a 	mov	r4,r18
    cb4c:	1417d515 	stw	r16,24404(r2)
    cb50:	000e3bc0 	call	e3bc <__malloc_unlock>
    cb54:	00800044 	movi	r2,1
    cb58:	003fe706 	br	caf8 <_malloc_trim_r+0x7c>
    cb5c:	000b883a 	mov	r5,zero
    cb60:	9009883a 	mov	r4,r18
    cb64:	000daec0 	call	daec <_sbrk_r>
    cb68:	99000217 	ldw	r4,8(r19)
    cb6c:	1107c83a 	sub	r3,r2,r4
    cb70:	19400410 	cmplti	r5,r3,16
    cb74:	283fdd1e 	bne	r5,zero,caec <_malloc_trim_r+0x70>
    cb78:	01400074 	movhi	r5,1
    cb7c:	2948e517 	ldw	r5,9108(r5)
    cb80:	18c00054 	ori	r3,r3,1
    cb84:	20c00115 	stw	r3,4(r4)
    cb88:	1145c83a 	sub	r2,r2,r5
    cb8c:	01400074 	movhi	r5,1
    cb90:	2897d515 	stw	r2,24404(r5)
    cb94:	003fd506 	br	caec <_malloc_trim_r+0x70>

0000cb98 <_free_r>:
    cb98:	28004f26 	beq	r5,zero,ccd8 <_free_r+0x140>
    cb9c:	defffd04 	addi	sp,sp,-12
    cba0:	dc400115 	stw	r17,4(sp)
    cba4:	dc000015 	stw	r16,0(sp)
    cba8:	2023883a 	mov	r17,r4
    cbac:	2821883a 	mov	r16,r5
    cbb0:	dfc00215 	stw	ra,8(sp)
    cbb4:	000e3980 	call	e398 <__malloc_lock>
    cbb8:	81ffff17 	ldw	r7,-4(r16)
    cbbc:	00bfff84 	movi	r2,-2
    cbc0:	80fffe04 	addi	r3,r16,-8
    cbc4:	3884703a 	and	r2,r7,r2
    cbc8:	01000074 	movhi	r4,1
    cbcc:	188d883a 	add	r6,r3,r2
    cbd0:	2107d104 	addi	r4,r4,8004
    cbd4:	31400117 	ldw	r5,4(r6)
    cbd8:	22000217 	ldw	r8,8(r4)
    cbdc:	027fff04 	movi	r9,-4
    cbe0:	2a4a703a 	and	r5,r5,r9
    cbe4:	41806426 	beq	r8,r6,cd78 <_free_r+0x1e0>
    cbe8:	31400115 	stw	r5,4(r6)
    cbec:	39c0004c 	andi	r7,r7,1
    cbf0:	3151883a 	add	r8,r6,r5
    cbf4:	3800281e 	bne	r7,zero,cc98 <_free_r+0x100>
    cbf8:	82bffe17 	ldw	r10,-8(r16)
    cbfc:	42000117 	ldw	r8,4(r8)
    cc00:	01c00074 	movhi	r7,1
    cc04:	1a87c83a 	sub	r3,r3,r10
    cc08:	1a400217 	ldw	r9,8(r3)
    cc0c:	39c7d304 	addi	r7,r7,8012
    cc10:	1285883a 	add	r2,r2,r10
    cc14:	4200004c 	andi	r8,r8,1
    cc18:	49c04c26 	beq	r9,r7,cd4c <_free_r+0x1b4>
    cc1c:	1a800317 	ldw	r10,12(r3)
    cc20:	4a800315 	stw	r10,12(r9)
    cc24:	52400215 	stw	r9,8(r10)
    cc28:	40007126 	beq	r8,zero,cdf0 <_free_r+0x258>
    cc2c:	11400054 	ori	r5,r2,1
    cc30:	19400115 	stw	r5,4(r3)
    cc34:	30800015 	stw	r2,0(r6)
    cc38:	11408028 	cmpgeui	r5,r2,512
    cc3c:	28002c1e 	bne	r5,zero,ccf0 <_free_r+0x158>
    cc40:	100ad0fa 	srli	r5,r2,3
    cc44:	100cd17a 	srli	r6,r2,5
    cc48:	00800044 	movi	r2,1
    cc4c:	29400044 	addi	r5,r5,1
    cc50:	280a90fa 	slli	r5,r5,3
    cc54:	21c00117 	ldw	r7,4(r4)
    cc58:	1184983a 	sll	r2,r2,r6
    cc5c:	214b883a 	add	r5,r4,r5
    cc60:	29800017 	ldw	r6,0(r5)
    cc64:	11c4b03a 	or	r2,r2,r7
    cc68:	29fffe04 	addi	r7,r5,-8
    cc6c:	19c00315 	stw	r7,12(r3)
    cc70:	19800215 	stw	r6,8(r3)
    cc74:	20800115 	stw	r2,4(r4)
    cc78:	28c00015 	stw	r3,0(r5)
    cc7c:	30c00315 	stw	r3,12(r6)
    cc80:	8809883a 	mov	r4,r17
    cc84:	dfc00217 	ldw	ra,8(sp)
    cc88:	dc400117 	ldw	r17,4(sp)
    cc8c:	dc000017 	ldw	r16,0(sp)
    cc90:	dec00304 	addi	sp,sp,12
    cc94:	000e3bc1 	jmpi	e3bc <__malloc_unlock>
    cc98:	41c00117 	ldw	r7,4(r8)
    cc9c:	39c0004c 	andi	r7,r7,1
    cca0:	38000e1e 	bne	r7,zero,ccdc <_free_r+0x144>
    cca4:	01c00074 	movhi	r7,1
    cca8:	1145883a 	add	r2,r2,r5
    ccac:	39c7d304 	addi	r7,r7,8012
    ccb0:	31400217 	ldw	r5,8(r6)
    ccb4:	12400054 	ori	r9,r2,1
    ccb8:	1891883a 	add	r8,r3,r2
    ccbc:	29c05226 	beq	r5,r7,ce08 <_free_r+0x270>
    ccc0:	31800317 	ldw	r6,12(r6)
    ccc4:	29800315 	stw	r6,12(r5)
    ccc8:	31400215 	stw	r5,8(r6)
    cccc:	1a400115 	stw	r9,4(r3)
    ccd0:	40800015 	stw	r2,0(r8)
    ccd4:	003fd806 	br	cc38 <_free_r+0xa0>
    ccd8:	f800283a 	ret
    ccdc:	11400054 	ori	r5,r2,1
    cce0:	817fff15 	stw	r5,-4(r16)
    cce4:	30800015 	stw	r2,0(r6)
    cce8:	11408028 	cmpgeui	r5,r2,512
    ccec:	283fd426 	beq	r5,zero,cc40 <_free_r+0xa8>
    ccf0:	100ad27a 	srli	r5,r2,9
    ccf4:	29800168 	cmpgeui	r6,r5,5
    ccf8:	3000341e 	bne	r6,zero,cdcc <_free_r+0x234>
    ccfc:	100ad1ba 	srli	r5,r2,6
    cd00:	29800e44 	addi	r6,r5,57
    cd04:	300c90fa 	slli	r6,r6,3
    cd08:	29c00e04 	addi	r7,r5,56
    cd0c:	218d883a 	add	r6,r4,r6
    cd10:	31400017 	ldw	r5,0(r6)
    cd14:	31bffe04 	addi	r6,r6,-8
    cd18:	31404226 	beq	r6,r5,ce24 <_free_r+0x28c>
    cd1c:	01ffff04 	movi	r7,-4
    cd20:	29000117 	ldw	r4,4(r5)
    cd24:	21c8703a 	and	r4,r4,r7
    cd28:	1100022e 	bgeu	r2,r4,cd34 <_free_r+0x19c>
    cd2c:	29400217 	ldw	r5,8(r5)
    cd30:	317ffb1e 	bne	r6,r5,cd20 <_free_r+0x188>
    cd34:	29800317 	ldw	r6,12(r5)
    cd38:	19800315 	stw	r6,12(r3)
    cd3c:	19400215 	stw	r5,8(r3)
    cd40:	30c00215 	stw	r3,8(r6)
    cd44:	28c00315 	stw	r3,12(r5)
    cd48:	003fcd06 	br	cc80 <_free_r+0xe8>
    cd4c:	40004d1e 	bne	r8,zero,ce84 <_free_r+0x2ec>
    cd50:	31000317 	ldw	r4,12(r6)
    cd54:	31800217 	ldw	r6,8(r6)
    cd58:	2885883a 	add	r2,r5,r2
    cd5c:	11400054 	ori	r5,r2,1
    cd60:	31000315 	stw	r4,12(r6)
    cd64:	21800215 	stw	r6,8(r4)
    cd68:	19400115 	stw	r5,4(r3)
    cd6c:	1887883a 	add	r3,r3,r2
    cd70:	18800015 	stw	r2,0(r3)
    cd74:	003fc206 	br	cc80 <_free_r+0xe8>
    cd78:	39c0004c 	andi	r7,r7,1
    cd7c:	1145883a 	add	r2,r2,r5
    cd80:	3800071e 	bne	r7,zero,cda0 <_free_r+0x208>
    cd84:	81fffe17 	ldw	r7,-8(r16)
    cd88:	19c7c83a 	sub	r3,r3,r7
    cd8c:	19400317 	ldw	r5,12(r3)
    cd90:	19800217 	ldw	r6,8(r3)
    cd94:	11c5883a 	add	r2,r2,r7
    cd98:	31400315 	stw	r5,12(r6)
    cd9c:	29800215 	stw	r6,8(r5)
    cda0:	01400074 	movhi	r5,1
    cda4:	11800054 	ori	r6,r2,1
    cda8:	2948e617 	ldw	r5,9112(r5)
    cdac:	19800115 	stw	r6,4(r3)
    cdb0:	20c00215 	stw	r3,8(r4)
    cdb4:	117fb236 	bltu	r2,r5,cc80 <_free_r+0xe8>
    cdb8:	00800074 	movhi	r2,1
    cdbc:	11579417 	ldw	r5,24144(r2)
    cdc0:	8809883a 	mov	r4,r17
    cdc4:	000ca7c0 	call	ca7c <_malloc_trim_r>
    cdc8:	003fad06 	br	cc80 <_free_r+0xe8>
    cdcc:	29800568 	cmpgeui	r6,r5,21
    cdd0:	30000926 	beq	r6,zero,cdf8 <_free_r+0x260>
    cdd4:	29801568 	cmpgeui	r6,r5,85
    cdd8:	3000191e 	bne	r6,zero,ce40 <_free_r+0x2a8>
    cddc:	100ad33a 	srli	r5,r2,12
    cde0:	29801bc4 	addi	r6,r5,111
    cde4:	300c90fa 	slli	r6,r6,3
    cde8:	29c01b84 	addi	r7,r5,110
    cdec:	003fc706 	br	cd0c <_free_r+0x174>
    cdf0:	1145883a 	add	r2,r2,r5
    cdf4:	003fae06 	br	ccb0 <_free_r+0x118>
    cdf8:	29801704 	addi	r6,r5,92
    cdfc:	300c90fa 	slli	r6,r6,3
    ce00:	29c016c4 	addi	r7,r5,91
    ce04:	003fc106 	br	cd0c <_free_r+0x174>
    ce08:	20c00515 	stw	r3,20(r4)
    ce0c:	20c00415 	stw	r3,16(r4)
    ce10:	19c00315 	stw	r7,12(r3)
    ce14:	19c00215 	stw	r7,8(r3)
    ce18:	1a400115 	stw	r9,4(r3)
    ce1c:	40800015 	stw	r2,0(r8)
    ce20:	003f9706 	br	cc80 <_free_r+0xe8>
    ce24:	380fd0ba 	srai	r7,r7,2
    ce28:	00800044 	movi	r2,1
    ce2c:	22000117 	ldw	r8,4(r4)
    ce30:	11ce983a 	sll	r7,r2,r7
    ce34:	3a0eb03a 	or	r7,r7,r8
    ce38:	21c00115 	stw	r7,4(r4)
    ce3c:	003fbe06 	br	cd38 <_free_r+0x1a0>
    ce40:	29805568 	cmpgeui	r6,r5,341
    ce44:	3000051e 	bne	r6,zero,ce5c <_free_r+0x2c4>
    ce48:	100ad3fa 	srli	r5,r2,15
    ce4c:	29801e04 	addi	r6,r5,120
    ce50:	300c90fa 	slli	r6,r6,3
    ce54:	29c01dc4 	addi	r7,r5,119
    ce58:	003fac06 	br	cd0c <_free_r+0x174>
    ce5c:	29415568 	cmpgeui	r5,r5,1365
    ce60:	2800051e 	bne	r5,zero,ce78 <_free_r+0x2e0>
    ce64:	100ad4ba 	srli	r5,r2,18
    ce68:	29801f44 	addi	r6,r5,125
    ce6c:	300c90fa 	slli	r6,r6,3
    ce70:	29c01f04 	addi	r7,r5,124
    ce74:	003fa506 	br	cd0c <_free_r+0x174>
    ce78:	0180fe04 	movi	r6,1016
    ce7c:	01c01f84 	movi	r7,126
    ce80:	003fa206 	br	cd0c <_free_r+0x174>
    ce84:	11000054 	ori	r4,r2,1
    ce88:	19000115 	stw	r4,4(r3)
    ce8c:	30800015 	stw	r2,0(r6)
    ce90:	003f7b06 	br	cc80 <_free_r+0xe8>

0000ce94 <_fwalk>:
    ce94:	defffa04 	addi	sp,sp,-24
    ce98:	dd000415 	stw	r20,16(sp)
    ce9c:	dcc00315 	stw	r19,12(sp)
    cea0:	dc800215 	stw	r18,8(sp)
    cea4:	dfc00515 	stw	ra,20(sp)
    cea8:	dc400115 	stw	r17,4(sp)
    ceac:	dc000015 	stw	r16,0(sp)
    ceb0:	2827883a 	mov	r19,r5
    ceb4:	2480b804 	addi	r18,r4,736
    ceb8:	0029883a 	mov	r20,zero
    cebc:	94400117 	ldw	r17,4(r18)
    cec0:	94000217 	ldw	r16,8(r18)
    cec4:	8c7fffc4 	addi	r17,r17,-1
    cec8:	88000d16 	blt	r17,zero,cf00 <_fwalk+0x6c>
    cecc:	8080030b 	ldhu	r2,12(r16)
    ced0:	8c7fffc4 	addi	r17,r17,-1
    ced4:	108000b0 	cmpltui	r2,r2,2
    ced8:	1000061e 	bne	r2,zero,cef4 <_fwalk+0x60>
    cedc:	8080038f 	ldh	r2,14(r16)
    cee0:	8009883a 	mov	r4,r16
    cee4:	10bfffe0 	cmpeqi	r2,r2,-1
    cee8:	1000021e 	bne	r2,zero,cef4 <_fwalk+0x60>
    ceec:	983ee83a 	callr	r19
    cef0:	a0a8b03a 	or	r20,r20,r2
    cef4:	88bfffd8 	cmpnei	r2,r17,-1
    cef8:	84001a04 	addi	r16,r16,104
    cefc:	103ff31e 	bne	r2,zero,cecc <_fwalk+0x38>
    cf00:	94800017 	ldw	r18,0(r18)
    cf04:	903fed1e 	bne	r18,zero,cebc <_fwalk+0x28>
    cf08:	a005883a 	mov	r2,r20
    cf0c:	dfc00517 	ldw	ra,20(sp)
    cf10:	dd000417 	ldw	r20,16(sp)
    cf14:	dcc00317 	ldw	r19,12(sp)
    cf18:	dc800217 	ldw	r18,8(sp)
    cf1c:	dc400117 	ldw	r17,4(sp)
    cf20:	dc000017 	ldw	r16,0(sp)
    cf24:	dec00604 	addi	sp,sp,24
    cf28:	f800283a 	ret

0000cf2c <_fwalk_reent>:
    cf2c:	defff904 	addi	sp,sp,-28
    cf30:	dd400515 	stw	r21,20(sp)
    cf34:	dd000415 	stw	r20,16(sp)
    cf38:	dcc00315 	stw	r19,12(sp)
    cf3c:	dc800215 	stw	r18,8(sp)
    cf40:	dfc00615 	stw	ra,24(sp)
    cf44:	dc400115 	stw	r17,4(sp)
    cf48:	dc000015 	stw	r16,0(sp)
    cf4c:	202b883a 	mov	r21,r4
    cf50:	2827883a 	mov	r19,r5
    cf54:	2480b804 	addi	r18,r4,736
    cf58:	0029883a 	mov	r20,zero
    cf5c:	94400117 	ldw	r17,4(r18)
    cf60:	94000217 	ldw	r16,8(r18)
    cf64:	8c7fffc4 	addi	r17,r17,-1
    cf68:	88000e16 	blt	r17,zero,cfa4 <_fwalk_reent+0x78>
    cf6c:	8080030b 	ldhu	r2,12(r16)
    cf70:	8c7fffc4 	addi	r17,r17,-1
    cf74:	108000b0 	cmpltui	r2,r2,2
    cf78:	1000071e 	bne	r2,zero,cf98 <_fwalk_reent+0x6c>
    cf7c:	8080038f 	ldh	r2,14(r16)
    cf80:	800b883a 	mov	r5,r16
    cf84:	a809883a 	mov	r4,r21
    cf88:	10bfffe0 	cmpeqi	r2,r2,-1
    cf8c:	1000021e 	bne	r2,zero,cf98 <_fwalk_reent+0x6c>
    cf90:	983ee83a 	callr	r19
    cf94:	a0a8b03a 	or	r20,r20,r2
    cf98:	88bfffd8 	cmpnei	r2,r17,-1
    cf9c:	84001a04 	addi	r16,r16,104
    cfa0:	103ff21e 	bne	r2,zero,cf6c <_fwalk_reent+0x40>
    cfa4:	94800017 	ldw	r18,0(r18)
    cfa8:	903fec1e 	bne	r18,zero,cf5c <_fwalk_reent+0x30>
    cfac:	a005883a 	mov	r2,r20
    cfb0:	dfc00617 	ldw	ra,24(sp)
    cfb4:	dd400517 	ldw	r21,20(sp)
    cfb8:	dd000417 	ldw	r20,16(sp)
    cfbc:	dcc00317 	ldw	r19,12(sp)
    cfc0:	dc800217 	ldw	r18,8(sp)
    cfc4:	dc400117 	ldw	r17,4(sp)
    cfc8:	dc000017 	ldw	r16,0(sp)
    cfcc:	dec00704 	addi	sp,sp,28
    cfd0:	f800283a 	ret

0000cfd4 <__smakebuf_r>:
    cfd4:	2880030b 	ldhu	r2,12(r5)
    cfd8:	deffe804 	addi	sp,sp,-96
    cfdc:	dc001215 	stw	r16,72(sp)
    cfe0:	dfc01715 	stw	ra,92(sp)
    cfe4:	dd001615 	stw	r20,88(sp)
    cfe8:	dcc01515 	stw	r19,84(sp)
    cfec:	dc801415 	stw	r18,80(sp)
    cff0:	dc401315 	stw	r17,76(sp)
    cff4:	10c0008c 	andi	r3,r2,2
    cff8:	2821883a 	mov	r16,r5
    cffc:	18000d26 	beq	r3,zero,d034 <__smakebuf_r+0x60>
    d000:	288010c4 	addi	r2,r5,67
    d004:	28800015 	stw	r2,0(r5)
    d008:	28800415 	stw	r2,16(r5)
    d00c:	00800044 	movi	r2,1
    d010:	28800515 	stw	r2,20(r5)
    d014:	dfc01717 	ldw	ra,92(sp)
    d018:	dd001617 	ldw	r20,88(sp)
    d01c:	dcc01517 	ldw	r19,84(sp)
    d020:	dc801417 	ldw	r18,80(sp)
    d024:	dc401317 	ldw	r17,76(sp)
    d028:	dc001217 	ldw	r16,72(sp)
    d02c:	dec01804 	addi	sp,sp,96
    d030:	f800283a 	ret
    d034:	2940038f 	ldh	r5,14(r5)
    d038:	2023883a 	mov	r17,r4
    d03c:	28002816 	blt	r5,zero,d0e0 <__smakebuf_r+0x10c>
    d040:	d80d883a 	mov	r6,sp
    d044:	000dee00 	call	dee0 <_fstat_r>
    d048:	10002416 	blt	r2,zero,d0dc <__smakebuf_r+0x108>
    d04c:	d8800117 	ldw	r2,4(sp)
    d050:	10bc000c 	andi	r2,r2,61440
    d054:	10880018 	cmpnei	r2,r2,8192
    d058:	1000461e 	bne	r2,zero,d174 <__smakebuf_r+0x1a0>
    d05c:	8140038f 	ldh	r5,14(r16)
    d060:	8809883a 	mov	r4,r17
    d064:	000df400 	call	df40 <_isatty_r>
    d068:	10003e26 	beq	r2,zero,d164 <__smakebuf_r+0x190>
    d06c:	8080030b 	ldhu	r2,12(r16)
    d070:	80c010c4 	addi	r3,r16,67
    d074:	80c00015 	stw	r3,0(r16)
    d078:	10800054 	ori	r2,r2,1
    d07c:	8080030d 	sth	r2,12(r16)
    d080:	00800044 	movi	r2,1
    d084:	80c00415 	stw	r3,16(r16)
    d088:	80800515 	stw	r2,20(r16)
    d08c:	04c00044 	movi	r19,1
    d090:	05010004 	movi	r20,1024
    d094:	04820004 	movi	r18,2048
    d098:	a00b883a 	mov	r5,r20
    d09c:	8809883a 	mov	r4,r17
    d0a0:	000d21c0 	call	d21c <_malloc_r>
    d0a4:	10001726 	beq	r2,zero,d104 <__smakebuf_r+0x130>
    d0a8:	80c0030b 	ldhu	r3,12(r16)
    d0ac:	01000074 	movhi	r4,1
    d0b0:	2131b604 	addi	r4,r4,-14632
    d0b4:	89000f15 	stw	r4,60(r17)
    d0b8:	18c02014 	ori	r3,r3,128
    d0bc:	80c0030d 	sth	r3,12(r16)
    d0c0:	80800015 	stw	r2,0(r16)
    d0c4:	80800415 	stw	r2,16(r16)
    d0c8:	85000515 	stw	r20,20(r16)
    d0cc:	98001d1e 	bne	r19,zero,d144 <__smakebuf_r+0x170>
    d0d0:	90c6b03a 	or	r3,r18,r3
    d0d4:	80c0030d 	sth	r3,12(r16)
    d0d8:	003fce06 	br	d014 <__smakebuf_r+0x40>
    d0dc:	8080030b 	ldhu	r2,12(r16)
    d0e0:	1080200c 	andi	r2,r2,128
    d0e4:	0027883a 	mov	r19,zero
    d0e8:	10001326 	beq	r2,zero,d138 <__smakebuf_r+0x164>
    d0ec:	05001004 	movi	r20,64
    d0f0:	a00b883a 	mov	r5,r20
    d0f4:	8809883a 	mov	r4,r17
    d0f8:	0025883a 	mov	r18,zero
    d0fc:	000d21c0 	call	d21c <_malloc_r>
    d100:	103fe91e 	bne	r2,zero,d0a8 <__smakebuf_r+0xd4>
    d104:	8080030b 	ldhu	r2,12(r16)
    d108:	10c0800c 	andi	r3,r2,512
    d10c:	183fc11e 	bne	r3,zero,d014 <__smakebuf_r+0x40>
    d110:	00ffff04 	movi	r3,-4
    d114:	10c4703a 	and	r2,r2,r3
    d118:	10800094 	ori	r2,r2,2
    d11c:	80c010c4 	addi	r3,r16,67
    d120:	8080030d 	sth	r2,12(r16)
    d124:	00800044 	movi	r2,1
    d128:	80c00015 	stw	r3,0(r16)
    d12c:	80c00415 	stw	r3,16(r16)
    d130:	80800515 	stw	r2,20(r16)
    d134:	003fb706 	br	d014 <__smakebuf_r+0x40>
    d138:	05010004 	movi	r20,1024
    d13c:	0025883a 	mov	r18,zero
    d140:	003fd506 	br	d098 <__smakebuf_r+0xc4>
    d144:	8140038f 	ldh	r5,14(r16)
    d148:	8809883a 	mov	r4,r17
    d14c:	000df400 	call	df40 <_isatty_r>
    d150:	80c0030b 	ldhu	r3,12(r16)
    d154:	103fde26 	beq	r2,zero,d0d0 <__smakebuf_r+0xfc>
    d158:	18ffff0c 	andi	r3,r3,65532
    d15c:	18c00054 	ori	r3,r3,1
    d160:	003fdb06 	br	d0d0 <__smakebuf_r+0xfc>
    d164:	04c00044 	movi	r19,1
    d168:	05010004 	movi	r20,1024
    d16c:	04820004 	movi	r18,2048
    d170:	003fc906 	br	d098 <__smakebuf_r+0xc4>
    d174:	0027883a 	mov	r19,zero
    d178:	05010004 	movi	r20,1024
    d17c:	04820004 	movi	r18,2048
    d180:	003fc506 	br	d098 <__smakebuf_r+0xc4>

0000d184 <__swhatbuf_r>:
    d184:	deffea04 	addi	sp,sp,-88
    d188:	dc001215 	stw	r16,72(sp)
    d18c:	2821883a 	mov	r16,r5
    d190:	2940038f 	ldh	r5,14(r5)
    d194:	dc801415 	stw	r18,80(sp)
    d198:	dc401315 	stw	r17,76(sp)
    d19c:	dfc01515 	stw	ra,84(sp)
    d1a0:	3023883a 	mov	r17,r6
    d1a4:	3825883a 	mov	r18,r7
    d1a8:	28001016 	blt	r5,zero,d1ec <__swhatbuf_r+0x68>
    d1ac:	d80d883a 	mov	r6,sp
    d1b0:	000dee00 	call	dee0 <_fstat_r>
    d1b4:	10000d16 	blt	r2,zero,d1ec <__swhatbuf_r+0x68>
    d1b8:	d8c00117 	ldw	r3,4(sp)
    d1bc:	00820004 	movi	r2,2048
    d1c0:	18fc000c 	andi	r3,r3,61440
    d1c4:	18c80020 	cmpeqi	r3,r3,8192
    d1c8:	90c00015 	stw	r3,0(r18)
    d1cc:	00c10004 	movi	r3,1024
    d1d0:	88c00015 	stw	r3,0(r17)
    d1d4:	dfc01517 	ldw	ra,84(sp)
    d1d8:	dc801417 	ldw	r18,80(sp)
    d1dc:	dc401317 	ldw	r17,76(sp)
    d1e0:	dc001217 	ldw	r16,72(sp)
    d1e4:	dec01604 	addi	sp,sp,88
    d1e8:	f800283a 	ret
    d1ec:	8080030b 	ldhu	r2,12(r16)
    d1f0:	90000015 	stw	zero,0(r18)
    d1f4:	1080200c 	andi	r2,r2,128
    d1f8:	10000426 	beq	r2,zero,d20c <__swhatbuf_r+0x88>
    d1fc:	00801004 	movi	r2,64
    d200:	88800015 	stw	r2,0(r17)
    d204:	0005883a 	mov	r2,zero
    d208:	003ff206 	br	d1d4 <__swhatbuf_r+0x50>
    d20c:	00810004 	movi	r2,1024
    d210:	88800015 	stw	r2,0(r17)
    d214:	0005883a 	mov	r2,zero
    d218:	003fee06 	br	d1d4 <__swhatbuf_r+0x50>

0000d21c <_malloc_r>:
    d21c:	defff604 	addi	sp,sp,-40
    d220:	dc400115 	stw	r17,4(sp)
    d224:	2c4002c4 	addi	r17,r5,11
    d228:	dc800215 	stw	r18,8(sp)
    d22c:	dfc00915 	stw	ra,36(sp)
    d230:	df000815 	stw	fp,32(sp)
    d234:	ddc00715 	stw	r23,28(sp)
    d238:	dd800615 	stw	r22,24(sp)
    d23c:	dd400515 	stw	r21,20(sp)
    d240:	dd000415 	stw	r20,16(sp)
    d244:	dcc00315 	stw	r19,12(sp)
    d248:	dc000015 	stw	r16,0(sp)
    d24c:	888005e8 	cmpgeui	r2,r17,23
    d250:	2025883a 	mov	r18,r4
    d254:	10001b1e 	bne	r2,zero,d2c4 <_malloc_r+0xa8>
    d258:	29400468 	cmpgeui	r5,r5,17
    d25c:	2800821e 	bne	r5,zero,d468 <_malloc_r+0x24c>
    d260:	000e3980 	call	e398 <__malloc_lock>
    d264:	04400404 	movi	r17,16
    d268:	00800604 	movi	r2,24
    d26c:	01c00084 	movi	r7,2
    d270:	04c00074 	movhi	r19,1
    d274:	9cc7d104 	addi	r19,r19,8004
    d278:	9885883a 	add	r2,r19,r2
    d27c:	14000117 	ldw	r16,4(r2)
    d280:	10fffe04 	addi	r3,r2,-8
    d284:	80c08b26 	beq	r16,r3,d4b4 <_malloc_r+0x298>
    d288:	80800117 	ldw	r2,4(r16)
    d28c:	81000317 	ldw	r4,12(r16)
    d290:	00ffff04 	movi	r3,-4
    d294:	10c4703a 	and	r2,r2,r3
    d298:	81400217 	ldw	r5,8(r16)
    d29c:	8085883a 	add	r2,r16,r2
    d2a0:	10c00117 	ldw	r3,4(r2)
    d2a4:	29000315 	stw	r4,12(r5)
    d2a8:	21400215 	stw	r5,8(r4)
    d2ac:	18c00054 	ori	r3,r3,1
    d2b0:	10c00115 	stw	r3,4(r2)
    d2b4:	9009883a 	mov	r4,r18
    d2b8:	000e3bc0 	call	e3bc <__malloc_unlock>
    d2bc:	80800204 	addi	r2,r16,8
    d2c0:	00006c06 	br	d474 <_malloc_r+0x258>
    d2c4:	00bffe04 	movi	r2,-8
    d2c8:	88a2703a 	and	r17,r17,r2
    d2cc:	88006616 	blt	r17,zero,d468 <_malloc_r+0x24c>
    d2d0:	89406536 	bltu	r17,r5,d468 <_malloc_r+0x24c>
    d2d4:	000e3980 	call	e398 <__malloc_lock>
    d2d8:	88807e28 	cmpgeui	r2,r17,504
    d2dc:	10012226 	beq	r2,zero,d768 <_malloc_r+0x54c>
    d2e0:	8804d27a 	srli	r2,r17,9
    d2e4:	10006f26 	beq	r2,zero,d4a4 <_malloc_r+0x288>
    d2e8:	10c00168 	cmpgeui	r3,r2,5
    d2ec:	1800fe1e 	bne	r3,zero,d6e8 <_malloc_r+0x4cc>
    d2f0:	8804d1ba 	srli	r2,r17,6
    d2f4:	11c00e44 	addi	r7,r2,57
    d2f8:	380890fa 	slli	r4,r7,3
    d2fc:	12000e04 	addi	r8,r2,56
    d300:	04c00074 	movhi	r19,1
    d304:	9cc7d104 	addi	r19,r19,8004
    d308:	9909883a 	add	r4,r19,r4
    d30c:	24000117 	ldw	r16,4(r4)
    d310:	213ffe04 	addi	r4,r4,-8
    d314:	24000b26 	beq	r4,r16,d344 <_malloc_r+0x128>
    d318:	01bfff04 	movi	r6,-4
    d31c:	00000306 	br	d32c <_malloc_r+0x110>
    d320:	1800d60e 	bge	r3,zero,d67c <_malloc_r+0x460>
    d324:	84000317 	ldw	r16,12(r16)
    d328:	24000626 	beq	r4,r16,d344 <_malloc_r+0x128>
    d32c:	80800117 	ldw	r2,4(r16)
    d330:	1184703a 	and	r2,r2,r6
    d334:	1447c83a 	sub	r3,r2,r17
    d338:	19400408 	cmpgei	r5,r3,16
    d33c:	283ff826 	beq	r5,zero,d320 <_malloc_r+0x104>
    d340:	400f883a 	mov	r7,r8
    d344:	9c000417 	ldw	r16,16(r19)
    d348:	02400074 	movhi	r9,1
    d34c:	4a47d304 	addi	r9,r9,8012
    d350:	82405f26 	beq	r16,r9,d4d0 <_malloc_r+0x2b4>
    d354:	80c00117 	ldw	r3,4(r16)
    d358:	00bfff04 	movi	r2,-4
    d35c:	1884703a 	and	r2,r3,r2
    d360:	1447c83a 	sub	r3,r2,r17
    d364:	19000410 	cmplti	r4,r3,16
    d368:	20010a26 	beq	r4,zero,d794 <_malloc_r+0x578>
    d36c:	9a400515 	stw	r9,20(r19)
    d370:	9a400415 	stw	r9,16(r19)
    d374:	1800ff0e 	bge	r3,zero,d774 <_malloc_r+0x558>
    d378:	10c08028 	cmpgeui	r3,r2,512
    d37c:	1800c11e 	bne	r3,zero,d684 <_malloc_r+0x468>
    d380:	1006d0fa 	srli	r3,r2,3
    d384:	1008d17a 	srli	r4,r2,5
    d388:	00800044 	movi	r2,1
    d38c:	18c00044 	addi	r3,r3,1
    d390:	180690fa 	slli	r3,r3,3
    d394:	99400117 	ldw	r5,4(r19)
    d398:	1104983a 	sll	r2,r2,r4
    d39c:	98c7883a 	add	r3,r19,r3
    d3a0:	19000017 	ldw	r4,0(r3)
    d3a4:	1144b03a 	or	r2,r2,r5
    d3a8:	197ffe04 	addi	r5,r3,-8
    d3ac:	81400315 	stw	r5,12(r16)
    d3b0:	81000215 	stw	r4,8(r16)
    d3b4:	98800115 	stw	r2,4(r19)
    d3b8:	1c000015 	stw	r16,0(r3)
    d3bc:	24000315 	stw	r16,12(r4)
    d3c0:	3807d0ba 	srai	r3,r7,2
    d3c4:	01000044 	movi	r4,1
    d3c8:	20c8983a 	sll	r4,r4,r3
    d3cc:	11004536 	bltu	r2,r4,d4e4 <_malloc_r+0x2c8>
    d3d0:	2086703a 	and	r3,r4,r2
    d3d4:	18000a1e 	bne	r3,zero,d400 <_malloc_r+0x1e4>
    d3d8:	00ffff04 	movi	r3,-4
    d3dc:	2109883a 	add	r4,r4,r4
    d3e0:	38ce703a 	and	r7,r7,r3
    d3e4:	2086703a 	and	r3,r4,r2
    d3e8:	39c00104 	addi	r7,r7,4
    d3ec:	1800041e 	bne	r3,zero,d400 <_malloc_r+0x1e4>
    d3f0:	2109883a 	add	r4,r4,r4
    d3f4:	2086703a 	and	r3,r4,r2
    d3f8:	39c00104 	addi	r7,r7,4
    d3fc:	183ffc26 	beq	r3,zero,d3f0 <_malloc_r+0x1d4>
    d400:	02bfff04 	movi	r10,-4
    d404:	381690fa 	slli	r11,r7,3
    d408:	3819883a 	mov	r12,r7
    d40c:	9ad7883a 	add	r11,r19,r11
    d410:	5811883a 	mov	r8,r11
    d414:	40800317 	ldw	r2,12(r8)
    d418:	4080bc26 	beq	r8,r2,d70c <_malloc_r+0x4f0>
    d41c:	10c00117 	ldw	r3,4(r2)
    d420:	1021883a 	mov	r16,r2
    d424:	10800317 	ldw	r2,12(r2)
    d428:	1a86703a 	and	r3,r3,r10
    d42c:	1c4bc83a 	sub	r5,r3,r17
    d430:	29800410 	cmplti	r6,r5,16
    d434:	3000ba26 	beq	r6,zero,d720 <_malloc_r+0x504>
    d438:	283ff716 	blt	r5,zero,d418 <_malloc_r+0x1fc>
    d43c:	80c7883a 	add	r3,r16,r3
    d440:	19400117 	ldw	r5,4(r3)
    d444:	81800217 	ldw	r6,8(r16)
    d448:	9009883a 	mov	r4,r18
    d44c:	29400054 	ori	r5,r5,1
    d450:	19400115 	stw	r5,4(r3)
    d454:	30800315 	stw	r2,12(r6)
    d458:	11800215 	stw	r6,8(r2)
    d45c:	000e3bc0 	call	e3bc <__malloc_unlock>
    d460:	80800204 	addi	r2,r16,8
    d464:	00000306 	br	d474 <_malloc_r+0x258>
    d468:	00800304 	movi	r2,12
    d46c:	90800015 	stw	r2,0(r18)
    d470:	0005883a 	mov	r2,zero
    d474:	dfc00917 	ldw	ra,36(sp)
    d478:	df000817 	ldw	fp,32(sp)
    d47c:	ddc00717 	ldw	r23,28(sp)
    d480:	dd800617 	ldw	r22,24(sp)
    d484:	dd400517 	ldw	r21,20(sp)
    d488:	dd000417 	ldw	r20,16(sp)
    d48c:	dcc00317 	ldw	r19,12(sp)
    d490:	dc800217 	ldw	r18,8(sp)
    d494:	dc400117 	ldw	r17,4(sp)
    d498:	dc000017 	ldw	r16,0(sp)
    d49c:	dec00a04 	addi	sp,sp,40
    d4a0:	f800283a 	ret
    d4a4:	01008004 	movi	r4,512
    d4a8:	01c01004 	movi	r7,64
    d4ac:	02000fc4 	movi	r8,63
    d4b0:	003f9306 	br	d300 <_malloc_r+0xe4>
    d4b4:	14000317 	ldw	r16,12(r2)
    d4b8:	39c00084 	addi	r7,r7,2
    d4bc:	143f721e 	bne	r2,r16,d288 <_malloc_r+0x6c>
    d4c0:	9c000417 	ldw	r16,16(r19)
    d4c4:	02400074 	movhi	r9,1
    d4c8:	4a47d304 	addi	r9,r9,8012
    d4cc:	827fa11e 	bne	r16,r9,d354 <_malloc_r+0x138>
    d4d0:	3807d0ba 	srai	r3,r7,2
    d4d4:	01000044 	movi	r4,1
    d4d8:	98800117 	ldw	r2,4(r19)
    d4dc:	20c8983a 	sll	r4,r4,r3
    d4e0:	113fbb2e 	bgeu	r2,r4,d3d0 <_malloc_r+0x1b4>
    d4e4:	9c000217 	ldw	r16,8(r19)
    d4e8:	00bfff04 	movi	r2,-4
    d4ec:	85400117 	ldw	r21,4(r16)
    d4f0:	a8ac703a 	and	r22,r21,r2
    d4f4:	b4400336 	bltu	r22,r17,d504 <_malloc_r+0x2e8>
    d4f8:	b445c83a 	sub	r2,r22,r17
    d4fc:	10c00408 	cmpgei	r3,r2,16
    d500:	1800541e 	bne	r3,zero,d654 <_malloc_r+0x438>
    d504:	00800074 	movhi	r2,1
    d508:	1088e517 	ldw	r2,9108(r2)
    d50c:	00c00074 	movhi	r3,1
    d510:	1d579417 	ldw	r21,24144(r3)
    d514:	10bfffd8 	cmpnei	r2,r2,-1
    d518:	85b9883a 	add	fp,r16,r22
    d51c:	8d6b883a 	add	r21,r17,r21
    d520:	1000d626 	beq	r2,zero,d87c <_malloc_r+0x660>
    d524:	ad4403c4 	addi	r21,r21,4111
    d528:	00bc0004 	movi	r2,-4096
    d52c:	a8aa703a 	and	r21,r21,r2
    d530:	a80b883a 	mov	r5,r21
    d534:	9009883a 	mov	r4,r18
    d538:	000daec0 	call	daec <_sbrk_r>
    d53c:	102f883a 	mov	r23,r2
    d540:	10bfffd8 	cmpnei	r2,r2,-1
    d544:	1000a826 	beq	r2,zero,d7e8 <_malloc_r+0x5cc>
    d548:	bf00a636 	bltu	r23,fp,d7e4 <_malloc_r+0x5c8>
    d54c:	00800074 	movhi	r2,1
    d550:	1517d517 	ldw	r20,24404(r2)
    d554:	ad29883a 	add	r20,r21,r20
    d558:	1517d515 	stw	r20,24404(r2)
    d55c:	a007883a 	mov	r3,r20
    d560:	e5c0ec26 	beq	fp,r23,d914 <_malloc_r+0x6f8>
    d564:	00800074 	movhi	r2,1
    d568:	1088e517 	ldw	r2,9108(r2)
    d56c:	10bfffd8 	cmpnei	r2,r2,-1
    d570:	1000ef26 	beq	r2,zero,d930 <_malloc_r+0x714>
    d574:	bf39c83a 	sub	fp,r23,fp
    d578:	e0c7883a 	add	r3,fp,r3
    d57c:	00800074 	movhi	r2,1
    d580:	10d7d515 	stw	r3,24404(r2)
    d584:	bf0001cc 	andi	fp,r23,7
    d588:	e000c526 	beq	fp,zero,d8a0 <_malloc_r+0x684>
    d58c:	bf2fc83a 	sub	r23,r23,fp
    d590:	bdc00204 	addi	r23,r23,8
    d594:	05040204 	movi	r20,4104
    d598:	a729c83a 	sub	r20,r20,fp
    d59c:	bd6b883a 	add	r21,r23,r21
    d5a0:	a569c83a 	sub	r20,r20,r21
    d5a4:	a503ffcc 	andi	r20,r20,4095
    d5a8:	a00b883a 	mov	r5,r20
    d5ac:	9009883a 	mov	r4,r18
    d5b0:	000daec0 	call	daec <_sbrk_r>
    d5b4:	10ffffe0 	cmpeqi	r3,r2,-1
    d5b8:	1800f31e 	bne	r3,zero,d988 <_malloc_r+0x76c>
    d5bc:	15c5c83a 	sub	r2,r2,r23
    d5c0:	152b883a 	add	r21,r2,r20
    d5c4:	00800074 	movhi	r2,1
    d5c8:	1157d517 	ldw	r5,24404(r2)
    d5cc:	9dc00215 	stw	r23,8(r19)
    d5d0:	ad400054 	ori	r21,r21,1
    d5d4:	a169883a 	add	r20,r20,r5
    d5d8:	1517d515 	stw	r20,24404(r2)
    d5dc:	bd400115 	stw	r21,4(r23)
    d5e0:	84c0d626 	beq	r16,r19,d93c <_malloc_r+0x720>
    d5e4:	b0800428 	cmpgeui	r2,r22,16
    d5e8:	1000d626 	beq	r2,zero,d944 <_malloc_r+0x728>
    d5ec:	80c00117 	ldw	r3,4(r16)
    d5f0:	013ffe04 	movi	r4,-8
    d5f4:	b0bffd04 	addi	r2,r22,-12
    d5f8:	1104703a 	and	r2,r2,r4
    d5fc:	18c0004c 	andi	r3,r3,1
    d600:	1886b03a 	or	r3,r3,r2
    d604:	80c00115 	stw	r3,4(r16)
    d608:	01000144 	movi	r4,5
    d60c:	8087883a 	add	r3,r16,r2
    d610:	19000115 	stw	r4,4(r3)
    d614:	19000215 	stw	r4,8(r3)
    d618:	10800428 	cmpgeui	r2,r2,16
    d61c:	1000df1e 	bne	r2,zero,d99c <_malloc_r+0x780>
    d620:	bd400117 	ldw	r21,4(r23)
    d624:	b821883a 	mov	r16,r23
    d628:	00800074 	movhi	r2,1
    d62c:	10979317 	ldw	r2,24140(r2)
    d630:	1500022e 	bgeu	r2,r20,d63c <_malloc_r+0x420>
    d634:	00800074 	movhi	r2,1
    d638:	15179315 	stw	r20,24140(r2)
    d63c:	00800074 	movhi	r2,1
    d640:	10979217 	ldw	r2,24136(r2)
    d644:	15006a2e 	bgeu	r2,r20,d7f0 <_malloc_r+0x5d4>
    d648:	00800074 	movhi	r2,1
    d64c:	15179215 	stw	r20,24136(r2)
    d650:	00006706 	br	d7f0 <_malloc_r+0x5d4>
    d654:	88c00054 	ori	r3,r17,1
    d658:	80c00115 	stw	r3,4(r16)
    d65c:	8463883a 	add	r17,r16,r17
    d660:	10800054 	ori	r2,r2,1
    d664:	9c400215 	stw	r17,8(r19)
    d668:	88800115 	stw	r2,4(r17)
    d66c:	9009883a 	mov	r4,r18
    d670:	000e3bc0 	call	e3bc <__malloc_unlock>
    d674:	80800204 	addi	r2,r16,8
    d678:	003f7e06 	br	d474 <_malloc_r+0x258>
    d67c:	81000317 	ldw	r4,12(r16)
    d680:	003f0506 	br	d298 <_malloc_r+0x7c>
    d684:	1006d27a 	srli	r3,r2,9
    d688:	19000168 	cmpgeui	r4,r3,5
    d68c:	20005026 	beq	r4,zero,d7d0 <_malloc_r+0x5b4>
    d690:	19000568 	cmpgeui	r4,r3,21
    d694:	20008c1e 	bne	r4,zero,d8c8 <_malloc_r+0x6ac>
    d698:	19401704 	addi	r5,r3,92
    d69c:	280a90fa 	slli	r5,r5,3
    d6a0:	190016c4 	addi	r4,r3,91
    d6a4:	994b883a 	add	r5,r19,r5
    d6a8:	28c00017 	ldw	r3,0(r5)
    d6ac:	297ffe04 	addi	r5,r5,-8
    d6b0:	28c07426 	beq	r5,r3,d884 <_malloc_r+0x668>
    d6b4:	01bfff04 	movi	r6,-4
    d6b8:	19000117 	ldw	r4,4(r3)
    d6bc:	2188703a 	and	r4,r4,r6
    d6c0:	1100022e 	bgeu	r2,r4,d6cc <_malloc_r+0x4b0>
    d6c4:	18c00217 	ldw	r3,8(r3)
    d6c8:	28fffb1e 	bne	r5,r3,d6b8 <_malloc_r+0x49c>
    d6cc:	19400317 	ldw	r5,12(r3)
    d6d0:	98800117 	ldw	r2,4(r19)
    d6d4:	81400315 	stw	r5,12(r16)
    d6d8:	80c00215 	stw	r3,8(r16)
    d6dc:	2c000215 	stw	r16,8(r5)
    d6e0:	1c000315 	stw	r16,12(r3)
    d6e4:	003f3606 	br	d3c0 <_malloc_r+0x1a4>
    d6e8:	10c00568 	cmpgeui	r3,r2,21
    d6ec:	18004a26 	beq	r3,zero,d818 <_malloc_r+0x5fc>
    d6f0:	10c01568 	cmpgeui	r3,r2,85
    d6f4:	18007b1e 	bne	r3,zero,d8e4 <_malloc_r+0x6c8>
    d6f8:	8804d33a 	srli	r2,r17,12
    d6fc:	11c01bc4 	addi	r7,r2,111
    d700:	380890fa 	slli	r4,r7,3
    d704:	12001b84 	addi	r8,r2,110
    d708:	003efd06 	br	d300 <_malloc_r+0xe4>
    d70c:	63000044 	addi	r12,r12,1
    d710:	608000cc 	andi	r2,r12,3
    d714:	42000204 	addi	r8,r8,8
    d718:	103f3e1e 	bne	r2,zero,d414 <_malloc_r+0x1f8>
    d71c:	00004506 	br	d834 <_malloc_r+0x618>
    d720:	81000217 	ldw	r4,8(r16)
    d724:	89800054 	ori	r6,r17,1
    d728:	81800115 	stw	r6,4(r16)
    d72c:	20800315 	stw	r2,12(r4)
    d730:	11000215 	stw	r4,8(r2)
    d734:	8463883a 	add	r17,r16,r17
    d738:	9c400515 	stw	r17,20(r19)
    d73c:	9c400415 	stw	r17,16(r19)
    d740:	28800054 	ori	r2,r5,1
    d744:	88800115 	stw	r2,4(r17)
    d748:	8a400315 	stw	r9,12(r17)
    d74c:	8a400215 	stw	r9,8(r17)
    d750:	80c7883a 	add	r3,r16,r3
    d754:	19400015 	stw	r5,0(r3)
    d758:	9009883a 	mov	r4,r18
    d75c:	000e3bc0 	call	e3bc <__malloc_unlock>
    d760:	80800204 	addi	r2,r16,8
    d764:	003f4306 	br	d474 <_malloc_r+0x258>
    d768:	880ed0fa 	srli	r7,r17,3
    d76c:	88800204 	addi	r2,r17,8
    d770:	003ebf06 	br	d270 <_malloc_r+0x54>
    d774:	8085883a 	add	r2,r16,r2
    d778:	10c00117 	ldw	r3,4(r2)
    d77c:	9009883a 	mov	r4,r18
    d780:	18c00054 	ori	r3,r3,1
    d784:	10c00115 	stw	r3,4(r2)
    d788:	000e3bc0 	call	e3bc <__malloc_unlock>
    d78c:	80800204 	addi	r2,r16,8
    d790:	003f3806 	br	d474 <_malloc_r+0x258>
    d794:	89000054 	ori	r4,r17,1
    d798:	81000115 	stw	r4,4(r16)
    d79c:	8463883a 	add	r17,r16,r17
    d7a0:	9c400515 	stw	r17,20(r19)
    d7a4:	9c400415 	stw	r17,16(r19)
    d7a8:	19000054 	ori	r4,r3,1
    d7ac:	89000115 	stw	r4,4(r17)
    d7b0:	8085883a 	add	r2,r16,r2
    d7b4:	8a400315 	stw	r9,12(r17)
    d7b8:	8a400215 	stw	r9,8(r17)
    d7bc:	10c00015 	stw	r3,0(r2)
    d7c0:	9009883a 	mov	r4,r18
    d7c4:	000e3bc0 	call	e3bc <__malloc_unlock>
    d7c8:	80800204 	addi	r2,r16,8
    d7cc:	003f2906 	br	d474 <_malloc_r+0x258>
    d7d0:	1006d1ba 	srli	r3,r2,6
    d7d4:	19400e44 	addi	r5,r3,57
    d7d8:	280a90fa 	slli	r5,r5,3
    d7dc:	19000e04 	addi	r4,r3,56
    d7e0:	003fb006 	br	d6a4 <_malloc_r+0x488>
    d7e4:	84c04626 	beq	r16,r19,d900 <_malloc_r+0x6e4>
    d7e8:	9c000217 	ldw	r16,8(r19)
    d7ec:	85400117 	ldw	r21,4(r16)
    d7f0:	00bfff04 	movi	r2,-4
    d7f4:	a8aa703a 	and	r21,r21,r2
    d7f8:	ac45c83a 	sub	r2,r21,r17
    d7fc:	ac400236 	bltu	r21,r17,d808 <_malloc_r+0x5ec>
    d800:	10c00408 	cmpgei	r3,r2,16
    d804:	183f931e 	bne	r3,zero,d654 <_malloc_r+0x438>
    d808:	9009883a 	mov	r4,r18
    d80c:	000e3bc0 	call	e3bc <__malloc_unlock>
    d810:	0005883a 	mov	r2,zero
    d814:	003f1706 	br	d474 <_malloc_r+0x258>
    d818:	11c01704 	addi	r7,r2,92
    d81c:	380890fa 	slli	r4,r7,3
    d820:	120016c4 	addi	r8,r2,91
    d824:	003eb606 	br	d300 <_malloc_r+0xe4>
    d828:	58800217 	ldw	r2,8(r11)
    d82c:	39ffffc4 	addi	r7,r7,-1
    d830:	12c0701e 	bne	r2,r11,d9f4 <_malloc_r+0x7d8>
    d834:	388000cc 	andi	r2,r7,3
    d838:	5afffe04 	addi	r11,r11,-8
    d83c:	103ffa1e 	bne	r2,zero,d828 <_malloc_r+0x60c>
    d840:	98c00117 	ldw	r3,4(r19)
    d844:	0104303a 	nor	r2,zero,r4
    d848:	10c4703a 	and	r2,r2,r3
    d84c:	98800115 	stw	r2,4(r19)
    d850:	2109883a 	add	r4,r4,r4
    d854:	113f2336 	bltu	r2,r4,d4e4 <_malloc_r+0x2c8>
    d858:	203f2226 	beq	r4,zero,d4e4 <_malloc_r+0x2c8>
    d85c:	2086703a 	and	r3,r4,r2
    d860:	1800041e 	bne	r3,zero,d874 <_malloc_r+0x658>
    d864:	2109883a 	add	r4,r4,r4
    d868:	2086703a 	and	r3,r4,r2
    d86c:	63000104 	addi	r12,r12,4
    d870:	183ffc26 	beq	r3,zero,d864 <_malloc_r+0x648>
    d874:	600f883a 	mov	r7,r12
    d878:	003ee206 	br	d404 <_malloc_r+0x1e8>
    d87c:	ad400404 	addi	r21,r21,16
    d880:	003f2b06 	br	d530 <_malloc_r+0x314>
    d884:	2009d0ba 	srai	r4,r4,2
    d888:	00800044 	movi	r2,1
    d88c:	99800117 	ldw	r6,4(r19)
    d890:	1104983a 	sll	r2,r2,r4
    d894:	1184b03a 	or	r2,r2,r6
    d898:	98800115 	stw	r2,4(r19)
    d89c:	003f8d06 	br	d6d4 <_malloc_r+0x4b8>
    d8a0:	bd69883a 	add	r20,r23,r21
    d8a4:	0529c83a 	sub	r20,zero,r20
    d8a8:	a503ffcc 	andi	r20,r20,4095
    d8ac:	a00b883a 	mov	r5,r20
    d8b0:	9009883a 	mov	r4,r18
    d8b4:	000daec0 	call	daec <_sbrk_r>
    d8b8:	10ffffe0 	cmpeqi	r3,r2,-1
    d8bc:	183f3f26 	beq	r3,zero,d5bc <_malloc_r+0x3a0>
    d8c0:	0029883a 	mov	r20,zero
    d8c4:	003f3f06 	br	d5c4 <_malloc_r+0x3a8>
    d8c8:	19001568 	cmpgeui	r4,r3,85
    d8cc:	2000201e 	bne	r4,zero,d950 <_malloc_r+0x734>
    d8d0:	1006d33a 	srli	r3,r2,12
    d8d4:	19401bc4 	addi	r5,r3,111
    d8d8:	280a90fa 	slli	r5,r5,3
    d8dc:	19001b84 	addi	r4,r3,110
    d8e0:	003f7006 	br	d6a4 <_malloc_r+0x488>
    d8e4:	10c05568 	cmpgeui	r3,r2,341
    d8e8:	1800201e 	bne	r3,zero,d96c <_malloc_r+0x750>
    d8ec:	8804d3fa 	srli	r2,r17,15
    d8f0:	11c01e04 	addi	r7,r2,120
    d8f4:	380890fa 	slli	r4,r7,3
    d8f8:	12001dc4 	addi	r8,r2,119
    d8fc:	003e8006 	br	d300 <_malloc_r+0xe4>
    d900:	00800074 	movhi	r2,1
    d904:	10d7d517 	ldw	r3,24404(r2)
    d908:	a8c7883a 	add	r3,r21,r3
    d90c:	10d7d515 	stw	r3,24404(r2)
    d910:	003f1406 	br	d564 <_malloc_r+0x348>
    d914:	e083ffcc 	andi	r2,fp,4095
    d918:	103f121e 	bne	r2,zero,d564 <_malloc_r+0x348>
    d91c:	9c000217 	ldw	r16,8(r19)
    d920:	b56b883a 	add	r21,r22,r21
    d924:	ad400054 	ori	r21,r21,1
    d928:	85400115 	stw	r21,4(r16)
    d92c:	003f3e06 	br	d628 <_malloc_r+0x40c>
    d930:	00800074 	movhi	r2,1
    d934:	15c8e515 	stw	r23,9108(r2)
    d938:	003f1206 	br	d584 <_malloc_r+0x368>
    d93c:	b821883a 	mov	r16,r23
    d940:	003f3906 	br	d628 <_malloc_r+0x40c>
    d944:	00800044 	movi	r2,1
    d948:	b8800115 	stw	r2,4(r23)
    d94c:	003fae06 	br	d808 <_malloc_r+0x5ec>
    d950:	19005568 	cmpgeui	r4,r3,341
    d954:	2000191e 	bne	r4,zero,d9bc <_malloc_r+0x7a0>
    d958:	1006d3fa 	srli	r3,r2,15
    d95c:	19401e04 	addi	r5,r3,120
    d960:	280a90fa 	slli	r5,r5,3
    d964:	19001dc4 	addi	r4,r3,119
    d968:	003f4e06 	br	d6a4 <_malloc_r+0x488>
    d96c:	10815568 	cmpgeui	r2,r2,1365
    d970:	1000191e 	bne	r2,zero,d9d8 <_malloc_r+0x7bc>
    d974:	8804d4ba 	srli	r2,r17,18
    d978:	11c01f44 	addi	r7,r2,125
    d97c:	380890fa 	slli	r4,r7,3
    d980:	12001f04 	addi	r8,r2,124
    d984:	003e5e06 	br	d300 <_malloc_r+0xe4>
    d988:	e73ffe04 	addi	fp,fp,-8
    d98c:	af2b883a 	add	r21,r21,fp
    d990:	adebc83a 	sub	r21,r21,r23
    d994:	0029883a 	mov	r20,zero
    d998:	003f0a06 	br	d5c4 <_malloc_r+0x3a8>
    d99c:	81400204 	addi	r5,r16,8
    d9a0:	9009883a 	mov	r4,r18
    d9a4:	000cb980 	call	cb98 <_free_r>
    d9a8:	9c000217 	ldw	r16,8(r19)
    d9ac:	00800074 	movhi	r2,1
    d9b0:	1517d517 	ldw	r20,24404(r2)
    d9b4:	85400117 	ldw	r21,4(r16)
    d9b8:	003f1b06 	br	d628 <_malloc_r+0x40c>
    d9bc:	18c15568 	cmpgeui	r3,r3,1365
    d9c0:	1800091e 	bne	r3,zero,d9e8 <_malloc_r+0x7cc>
    d9c4:	1006d4ba 	srli	r3,r2,18
    d9c8:	19401f44 	addi	r5,r3,125
    d9cc:	280a90fa 	slli	r5,r5,3
    d9d0:	19001f04 	addi	r4,r3,124
    d9d4:	003f3306 	br	d6a4 <_malloc_r+0x488>
    d9d8:	0100fe04 	movi	r4,1016
    d9dc:	01c01fc4 	movi	r7,127
    d9e0:	02001f84 	movi	r8,126
    d9e4:	003e4606 	br	d300 <_malloc_r+0xe4>
    d9e8:	0140fe04 	movi	r5,1016
    d9ec:	01001f84 	movi	r4,126
    d9f0:	003f2c06 	br	d6a4 <_malloc_r+0x488>
    d9f4:	98800117 	ldw	r2,4(r19)
    d9f8:	003f9506 	br	d850 <_malloc_r+0x634>

0000d9fc <memset>:
    d9fc:	20c000cc 	andi	r3,r4,3
    da00:	2005883a 	mov	r2,r4
    da04:	18003626 	beq	r3,zero,dae0 <memset+0xe4>
    da08:	31ffffc4 	addi	r7,r6,-1
    da0c:	30003326 	beq	r6,zero,dadc <memset+0xe0>
    da10:	2811883a 	mov	r8,r5
    da14:	2007883a 	mov	r3,r4
    da18:	00000306 	br	da28 <memset+0x2c>
    da1c:	39ffffc4 	addi	r7,r7,-1
    da20:	39bfffe0 	cmpeqi	r6,r7,-1
    da24:	30002d1e 	bne	r6,zero,dadc <memset+0xe0>
    da28:	18c00044 	addi	r3,r3,1
    da2c:	198000cc 	andi	r6,r3,3
    da30:	1a3fffc5 	stb	r8,-1(r3)
    da34:	303ff91e 	bne	r6,zero,da1c <memset+0x20>
    da38:	39000130 	cmpltui	r4,r7,4
    da3c:	2000221e 	bne	r4,zero,dac8 <memset+0xcc>
    da40:	29003fcc 	andi	r4,r5,255
    da44:	200c923a 	slli	r6,r4,8
    da48:	3a000430 	cmpltui	r8,r7,16
    da4c:	3108b03a 	or	r4,r6,r4
    da50:	200c943a 	slli	r6,r4,16
    da54:	310cb03a 	or	r6,r6,r4
    da58:	40000e1e 	bne	r8,zero,da94 <memset+0x98>
    da5c:	393ffc04 	addi	r4,r7,-16
    da60:	2008d13a 	srli	r4,r4,4
    da64:	21000044 	addi	r4,r4,1
    da68:	2008913a 	slli	r4,r4,4
    da6c:	1909883a 	add	r4,r3,r4
    da70:	19800015 	stw	r6,0(r3)
    da74:	19800115 	stw	r6,4(r3)
    da78:	19800215 	stw	r6,8(r3)
    da7c:	19800315 	stw	r6,12(r3)
    da80:	18c00404 	addi	r3,r3,16
    da84:	20fffa1e 	bne	r4,r3,da70 <memset+0x74>
    da88:	3900030c 	andi	r4,r7,12
    da8c:	39c003cc 	andi	r7,r7,15
    da90:	20000d26 	beq	r4,zero,dac8 <memset+0xcc>
    da94:	1811883a 	mov	r8,r3
    da98:	42000104 	addi	r8,r8,4
    da9c:	3a09c83a 	sub	r4,r7,r8
    daa0:	1909883a 	add	r4,r3,r4
    daa4:	21000128 	cmpgeui	r4,r4,4
    daa8:	41bfff15 	stw	r6,-4(r8)
    daac:	203ffa1e 	bne	r4,zero,da98 <memset+0x9c>
    dab0:	393fff04 	addi	r4,r7,-4
    dab4:	2008d0ba 	srli	r4,r4,2
    dab8:	39c000cc 	andi	r7,r7,3
    dabc:	21000044 	addi	r4,r4,1
    dac0:	200890ba 	slli	r4,r4,2
    dac4:	1907883a 	add	r3,r3,r4
    dac8:	38000426 	beq	r7,zero,dadc <memset+0xe0>
    dacc:	19cf883a 	add	r7,r3,r7
    dad0:	18c00044 	addi	r3,r3,1
    dad4:	197fffc5 	stb	r5,-1(r3)
    dad8:	38fffd1e 	bne	r7,r3,dad0 <memset+0xd4>
    dadc:	f800283a 	ret
    dae0:	2007883a 	mov	r3,r4
    dae4:	300f883a 	mov	r7,r6
    dae8:	003fd306 	br	da38 <memset+0x3c>

0000daec <_sbrk_r>:
    daec:	defffe04 	addi	sp,sp,-8
    daf0:	dc000015 	stw	r16,0(sp)
    daf4:	00800074 	movhi	r2,1
    daf8:	2021883a 	mov	r16,r4
    dafc:	2809883a 	mov	r4,r5
    db00:	dfc00115 	stw	ra,4(sp)
    db04:	10179115 	stw	zero,24132(r2)
    db08:	000e5240 	call	e524 <sbrk>
    db0c:	10ffffd8 	cmpnei	r3,r2,-1
    db10:	18000426 	beq	r3,zero,db24 <_sbrk_r+0x38>
    db14:	dfc00117 	ldw	ra,4(sp)
    db18:	dc000017 	ldw	r16,0(sp)
    db1c:	dec00204 	addi	sp,sp,8
    db20:	f800283a 	ret
    db24:	00c00074 	movhi	r3,1
    db28:	18d79117 	ldw	r3,24132(r3)
    db2c:	183ff926 	beq	r3,zero,db14 <_sbrk_r+0x28>
    db30:	80c00015 	stw	r3,0(r16)
    db34:	dfc00117 	ldw	ra,4(sp)
    db38:	dc000017 	ldw	r16,0(sp)
    db3c:	dec00204 	addi	sp,sp,8
    db40:	f800283a 	ret

0000db44 <__sread>:
    db44:	defffe04 	addi	sp,sp,-8
    db48:	dc000015 	stw	r16,0(sp)
    db4c:	2821883a 	mov	r16,r5
    db50:	2940038f 	ldh	r5,14(r5)
    db54:	dfc00115 	stw	ra,4(sp)
    db58:	000dffc0 	call	dffc <_read_r>
    db5c:	10000716 	blt	r2,zero,db7c <__sread+0x38>
    db60:	80c01417 	ldw	r3,80(r16)
    db64:	1887883a 	add	r3,r3,r2
    db68:	80c01415 	stw	r3,80(r16)
    db6c:	dfc00117 	ldw	ra,4(sp)
    db70:	dc000017 	ldw	r16,0(sp)
    db74:	dec00204 	addi	sp,sp,8
    db78:	f800283a 	ret
    db7c:	80c0030b 	ldhu	r3,12(r16)
    db80:	18fbffcc 	andi	r3,r3,61439
    db84:	80c0030d 	sth	r3,12(r16)
    db88:	dfc00117 	ldw	ra,4(sp)
    db8c:	dc000017 	ldw	r16,0(sp)
    db90:	dec00204 	addi	sp,sp,8
    db94:	f800283a 	ret

0000db98 <__seofread>:
    db98:	0005883a 	mov	r2,zero
    db9c:	f800283a 	ret

0000dba0 <__swrite>:
    dba0:	2880030b 	ldhu	r2,12(r5)
    dba4:	defffb04 	addi	sp,sp,-20
    dba8:	dcc00315 	stw	r19,12(sp)
    dbac:	dc800215 	stw	r18,8(sp)
    dbb0:	dc400115 	stw	r17,4(sp)
    dbb4:	dc000015 	stw	r16,0(sp)
    dbb8:	dfc00415 	stw	ra,16(sp)
    dbbc:	10c0400c 	andi	r3,r2,256
    dbc0:	2821883a 	mov	r16,r5
    dbc4:	2023883a 	mov	r17,r4
    dbc8:	2940038f 	ldh	r5,14(r5)
    dbcc:	3025883a 	mov	r18,r6
    dbd0:	3827883a 	mov	r19,r7
    dbd4:	18000c1e 	bne	r3,zero,dc08 <__swrite+0x68>
    dbd8:	10bbffcc 	andi	r2,r2,61439
    dbdc:	980f883a 	mov	r7,r19
    dbe0:	900d883a 	mov	r6,r18
    dbe4:	8809883a 	mov	r4,r17
    dbe8:	8080030d 	sth	r2,12(r16)
    dbec:	dfc00417 	ldw	ra,16(sp)
    dbf0:	dcc00317 	ldw	r19,12(sp)
    dbf4:	dc800217 	ldw	r18,8(sp)
    dbf8:	dc400117 	ldw	r17,4(sp)
    dbfc:	dc000017 	ldw	r16,0(sp)
    dc00:	dec00504 	addi	sp,sp,20
    dc04:	000dc841 	jmpi	dc84 <_write_r>
    dc08:	01c00084 	movi	r7,2
    dc0c:	000d883a 	mov	r6,zero
    dc10:	000df980 	call	df98 <_lseek_r>
    dc14:	8080030b 	ldhu	r2,12(r16)
    dc18:	8140038f 	ldh	r5,14(r16)
    dc1c:	003fee06 	br	dbd8 <__swrite+0x38>

0000dc20 <__sseek>:
    dc20:	defffe04 	addi	sp,sp,-8
    dc24:	dc000015 	stw	r16,0(sp)
    dc28:	2821883a 	mov	r16,r5
    dc2c:	2940038f 	ldh	r5,14(r5)
    dc30:	dfc00115 	stw	ra,4(sp)
    dc34:	000df980 	call	df98 <_lseek_r>
    dc38:	10ffffd8 	cmpnei	r3,r2,-1
    dc3c:	18000826 	beq	r3,zero,dc60 <__sseek+0x40>
    dc40:	80c0030b 	ldhu	r3,12(r16)
    dc44:	80801415 	stw	r2,80(r16)
    dc48:	18c40014 	ori	r3,r3,4096
    dc4c:	80c0030d 	sth	r3,12(r16)
    dc50:	dfc00117 	ldw	ra,4(sp)
    dc54:	dc000017 	ldw	r16,0(sp)
    dc58:	dec00204 	addi	sp,sp,8
    dc5c:	f800283a 	ret
    dc60:	80c0030b 	ldhu	r3,12(r16)
    dc64:	18fbffcc 	andi	r3,r3,61439
    dc68:	80c0030d 	sth	r3,12(r16)
    dc6c:	dfc00117 	ldw	ra,4(sp)
    dc70:	dc000017 	ldw	r16,0(sp)
    dc74:	dec00204 	addi	sp,sp,8
    dc78:	f800283a 	ret

0000dc7c <__sclose>:
    dc7c:	2940038f 	ldh	r5,14(r5)
    dc80:	000dce81 	jmpi	dce8 <_close_r>

0000dc84 <_write_r>:
    dc84:	2807883a 	mov	r3,r5
    dc88:	defffe04 	addi	sp,sp,-8
    dc8c:	dc000015 	stw	r16,0(sp)
    dc90:	300b883a 	mov	r5,r6
    dc94:	00800074 	movhi	r2,1
    dc98:	380d883a 	mov	r6,r7
    dc9c:	2021883a 	mov	r16,r4
    dca0:	1809883a 	mov	r4,r3
    dca4:	dfc00115 	stw	ra,4(sp)
    dca8:	10179115 	stw	zero,24132(r2)
    dcac:	000e6180 	call	e618 <write>
    dcb0:	10ffffd8 	cmpnei	r3,r2,-1
    dcb4:	18000426 	beq	r3,zero,dcc8 <_write_r+0x44>
    dcb8:	dfc00117 	ldw	ra,4(sp)
    dcbc:	dc000017 	ldw	r16,0(sp)
    dcc0:	dec00204 	addi	sp,sp,8
    dcc4:	f800283a 	ret
    dcc8:	00c00074 	movhi	r3,1
    dccc:	18d79117 	ldw	r3,24132(r3)
    dcd0:	183ff926 	beq	r3,zero,dcb8 <_write_r+0x34>
    dcd4:	80c00015 	stw	r3,0(r16)
    dcd8:	dfc00117 	ldw	ra,4(sp)
    dcdc:	dc000017 	ldw	r16,0(sp)
    dce0:	dec00204 	addi	sp,sp,8
    dce4:	f800283a 	ret

0000dce8 <_close_r>:
    dce8:	defffe04 	addi	sp,sp,-8
    dcec:	dc000015 	stw	r16,0(sp)
    dcf0:	00800074 	movhi	r2,1
    dcf4:	2021883a 	mov	r16,r4
    dcf8:	2809883a 	mov	r4,r5
    dcfc:	dfc00115 	stw	ra,4(sp)
    dd00:	10179115 	stw	zero,24132(r2)
    dd04:	000adb00 	call	adb0 <close>
    dd08:	10ffffd8 	cmpnei	r3,r2,-1
    dd0c:	18000426 	beq	r3,zero,dd20 <_close_r+0x38>
    dd10:	dfc00117 	ldw	ra,4(sp)
    dd14:	dc000017 	ldw	r16,0(sp)
    dd18:	dec00204 	addi	sp,sp,8
    dd1c:	f800283a 	ret
    dd20:	00c00074 	movhi	r3,1
    dd24:	18d79117 	ldw	r3,24132(r3)
    dd28:	183ff926 	beq	r3,zero,dd10 <_close_r+0x28>
    dd2c:	80c00015 	stw	r3,0(r16)
    dd30:	dfc00117 	ldw	ra,4(sp)
    dd34:	dc000017 	ldw	r16,0(sp)
    dd38:	dec00204 	addi	sp,sp,8
    dd3c:	f800283a 	ret

0000dd40 <_fclose_r.part.0>:
    dd40:	defffc04 	addi	sp,sp,-16
    dd44:	dc800215 	stw	r18,8(sp)
    dd48:	dc400115 	stw	r17,4(sp)
    dd4c:	dc000015 	stw	r16,0(sp)
    dd50:	dfc00315 	stw	ra,12(sp)
    dd54:	2821883a 	mov	r16,r5
    dd58:	2023883a 	mov	r17,r4
    dd5c:	000c3c40 	call	c3c4 <__sflush_r>
    dd60:	80c00b17 	ldw	r3,44(r16)
    dd64:	1025883a 	mov	r18,r2
    dd68:	18000426 	beq	r3,zero,dd7c <_fclose_r.part.0+0x3c>
    dd6c:	81400717 	ldw	r5,28(r16)
    dd70:	8809883a 	mov	r4,r17
    dd74:	183ee83a 	callr	r3
    dd78:	10001916 	blt	r2,zero,dde0 <_fclose_r.part.0+0xa0>
    dd7c:	8080030b 	ldhu	r2,12(r16)
    dd80:	1080200c 	andi	r2,r2,128
    dd84:	10001a1e 	bne	r2,zero,ddf0 <_fclose_r.part.0+0xb0>
    dd88:	81400c17 	ldw	r5,48(r16)
    dd8c:	28000526 	beq	r5,zero,dda4 <_fclose_r.part.0+0x64>
    dd90:	80801004 	addi	r2,r16,64
    dd94:	28800226 	beq	r5,r2,dda0 <_fclose_r.part.0+0x60>
    dd98:	8809883a 	mov	r4,r17
    dd9c:	000cb980 	call	cb98 <_free_r>
    dda0:	80000c15 	stw	zero,48(r16)
    dda4:	81401117 	ldw	r5,68(r16)
    dda8:	28000326 	beq	r5,zero,ddb8 <_fclose_r.part.0+0x78>
    ddac:	8809883a 	mov	r4,r17
    ddb0:	000cb980 	call	cb98 <_free_r>
    ddb4:	80001115 	stw	zero,68(r16)
    ddb8:	000ca440 	call	ca44 <__sfp_lock_acquire>
    ddbc:	8000030d 	sth	zero,12(r16)
    ddc0:	000ca480 	call	ca48 <__sfp_lock_release>
    ddc4:	9005883a 	mov	r2,r18
    ddc8:	dfc00317 	ldw	ra,12(sp)
    ddcc:	dc800217 	ldw	r18,8(sp)
    ddd0:	dc400117 	ldw	r17,4(sp)
    ddd4:	dc000017 	ldw	r16,0(sp)
    ddd8:	dec00404 	addi	sp,sp,16
    dddc:	f800283a 	ret
    dde0:	8080030b 	ldhu	r2,12(r16)
    dde4:	04bfffc4 	movi	r18,-1
    dde8:	1080200c 	andi	r2,r2,128
    ddec:	103fe626 	beq	r2,zero,dd88 <_fclose_r.part.0+0x48>
    ddf0:	81400417 	ldw	r5,16(r16)
    ddf4:	8809883a 	mov	r4,r17
    ddf8:	000cb980 	call	cb98 <_free_r>
    ddfc:	003fe206 	br	dd88 <_fclose_r.part.0+0x48>

0000de00 <_fclose_r>:
    de00:	28001926 	beq	r5,zero,de68 <_fclose_r+0x68>
    de04:	defffd04 	addi	sp,sp,-12
    de08:	dc000115 	stw	r16,4(sp)
    de0c:	dfc00215 	stw	ra,8(sp)
    de10:	2021883a 	mov	r16,r4
    de14:	20000226 	beq	r4,zero,de20 <_fclose_r+0x20>
    de18:	20800e17 	ldw	r2,56(r4)
    de1c:	10000c26 	beq	r2,zero,de50 <_fclose_r+0x50>
    de20:	2880030f 	ldh	r2,12(r5)
    de24:	1000051e 	bne	r2,zero,de3c <_fclose_r+0x3c>
    de28:	0005883a 	mov	r2,zero
    de2c:	dfc00217 	ldw	ra,8(sp)
    de30:	dc000117 	ldw	r16,4(sp)
    de34:	dec00304 	addi	sp,sp,12
    de38:	f800283a 	ret
    de3c:	8009883a 	mov	r4,r16
    de40:	dfc00217 	ldw	ra,8(sp)
    de44:	dc000117 	ldw	r16,4(sp)
    de48:	dec00304 	addi	sp,sp,12
    de4c:	000dd401 	jmpi	dd40 <_fclose_r.part.0>
    de50:	d9400015 	stw	r5,0(sp)
    de54:	000ca340 	call	ca34 <__sinit>
    de58:	d9400017 	ldw	r5,0(sp)
    de5c:	2880030f 	ldh	r2,12(r5)
    de60:	103ff126 	beq	r2,zero,de28 <_fclose_r+0x28>
    de64:	003ff506 	br	de3c <_fclose_r+0x3c>
    de68:	0005883a 	mov	r2,zero
    de6c:	f800283a 	ret

0000de70 <fclose>:
    de70:	20000826 	beq	r4,zero,de94 <fclose+0x24>
    de74:	00800074 	movhi	r2,1
    de78:	200b883a 	mov	r5,r4
    de7c:	1108db17 	ldw	r4,9068(r2)
    de80:	20000226 	beq	r4,zero,de8c <fclose+0x1c>
    de84:	20800e17 	ldw	r2,56(r4)
    de88:	10000526 	beq	r2,zero,dea0 <fclose+0x30>
    de8c:	2880030f 	ldh	r2,12(r5)
    de90:	1000021e 	bne	r2,zero,de9c <fclose+0x2c>
    de94:	0005883a 	mov	r2,zero
    de98:	f800283a 	ret
    de9c:	000dd401 	jmpi	dd40 <_fclose_r.part.0>
    dea0:	defffd04 	addi	sp,sp,-12
    dea4:	d9400115 	stw	r5,4(sp)
    dea8:	d9000015 	stw	r4,0(sp)
    deac:	dfc00215 	stw	ra,8(sp)
    deb0:	000ca340 	call	ca34 <__sinit>
    deb4:	d9400117 	ldw	r5,4(sp)
    deb8:	d9000017 	ldw	r4,0(sp)
    debc:	2880030f 	ldh	r2,12(r5)
    dec0:	10000326 	beq	r2,zero,ded0 <fclose+0x60>
    dec4:	dfc00217 	ldw	ra,8(sp)
    dec8:	dec00304 	addi	sp,sp,12
    decc:	000dd401 	jmpi	dd40 <_fclose_r.part.0>
    ded0:	0005883a 	mov	r2,zero
    ded4:	dfc00217 	ldw	ra,8(sp)
    ded8:	dec00304 	addi	sp,sp,12
    dedc:	f800283a 	ret

0000dee0 <_fstat_r>:
    dee0:	2807883a 	mov	r3,r5
    dee4:	defffe04 	addi	sp,sp,-8
    dee8:	dc000015 	stw	r16,0(sp)
    deec:	00800074 	movhi	r2,1
    def0:	300b883a 	mov	r5,r6
    def4:	2021883a 	mov	r16,r4
    def8:	1809883a 	mov	r4,r3
    defc:	dfc00115 	stw	ra,4(sp)
    df00:	10179115 	stw	zero,24132(r2)
    df04:	000e0d40 	call	e0d4 <fstat>
    df08:	10ffffd8 	cmpnei	r3,r2,-1
    df0c:	18000426 	beq	r3,zero,df20 <_fstat_r+0x40>
    df10:	dfc00117 	ldw	ra,4(sp)
    df14:	dc000017 	ldw	r16,0(sp)
    df18:	dec00204 	addi	sp,sp,8
    df1c:	f800283a 	ret
    df20:	00c00074 	movhi	r3,1
    df24:	18d79117 	ldw	r3,24132(r3)
    df28:	183ff926 	beq	r3,zero,df10 <_fstat_r+0x30>
    df2c:	80c00015 	stw	r3,0(r16)
    df30:	dfc00117 	ldw	ra,4(sp)
    df34:	dc000017 	ldw	r16,0(sp)
    df38:	dec00204 	addi	sp,sp,8
    df3c:	f800283a 	ret

0000df40 <_isatty_r>:
    df40:	defffe04 	addi	sp,sp,-8
    df44:	dc000015 	stw	r16,0(sp)
    df48:	00800074 	movhi	r2,1
    df4c:	2021883a 	mov	r16,r4
    df50:	2809883a 	mov	r4,r5
    df54:	dfc00115 	stw	ra,4(sp)
    df58:	10179115 	stw	zero,24132(r2)
    df5c:	000e1cc0 	call	e1cc <isatty>
    df60:	10ffffd8 	cmpnei	r3,r2,-1
    df64:	18000426 	beq	r3,zero,df78 <_isatty_r+0x38>
    df68:	dfc00117 	ldw	ra,4(sp)
    df6c:	dc000017 	ldw	r16,0(sp)
    df70:	dec00204 	addi	sp,sp,8
    df74:	f800283a 	ret
    df78:	00c00074 	movhi	r3,1
    df7c:	18d79117 	ldw	r3,24132(r3)
    df80:	183ff926 	beq	r3,zero,df68 <_isatty_r+0x28>
    df84:	80c00015 	stw	r3,0(r16)
    df88:	dfc00117 	ldw	ra,4(sp)
    df8c:	dc000017 	ldw	r16,0(sp)
    df90:	dec00204 	addi	sp,sp,8
    df94:	f800283a 	ret

0000df98 <_lseek_r>:
    df98:	2807883a 	mov	r3,r5
    df9c:	defffe04 	addi	sp,sp,-8
    dfa0:	dc000015 	stw	r16,0(sp)
    dfa4:	300b883a 	mov	r5,r6
    dfa8:	00800074 	movhi	r2,1
    dfac:	380d883a 	mov	r6,r7
    dfb0:	2021883a 	mov	r16,r4
    dfb4:	1809883a 	mov	r4,r3
    dfb8:	dfc00115 	stw	ra,4(sp)
    dfbc:	10179115 	stw	zero,24132(r2)
    dfc0:	000e2b80 	call	e2b8 <lseek>
    dfc4:	10ffffd8 	cmpnei	r3,r2,-1
    dfc8:	18000426 	beq	r3,zero,dfdc <_lseek_r+0x44>
    dfcc:	dfc00117 	ldw	ra,4(sp)
    dfd0:	dc000017 	ldw	r16,0(sp)
    dfd4:	dec00204 	addi	sp,sp,8
    dfd8:	f800283a 	ret
    dfdc:	00c00074 	movhi	r3,1
    dfe0:	18d79117 	ldw	r3,24132(r3)
    dfe4:	183ff926 	beq	r3,zero,dfcc <_lseek_r+0x34>
    dfe8:	80c00015 	stw	r3,0(r16)
    dfec:	dfc00117 	ldw	ra,4(sp)
    dff0:	dc000017 	ldw	r16,0(sp)
    dff4:	dec00204 	addi	sp,sp,8
    dff8:	f800283a 	ret

0000dffc <_read_r>:
    dffc:	2807883a 	mov	r3,r5
    e000:	defffe04 	addi	sp,sp,-8
    e004:	dc000015 	stw	r16,0(sp)
    e008:	300b883a 	mov	r5,r6
    e00c:	00800074 	movhi	r2,1
    e010:	380d883a 	mov	r6,r7
    e014:	2021883a 	mov	r16,r4
    e018:	1809883a 	mov	r4,r3
    e01c:	dfc00115 	stw	ra,4(sp)
    e020:	10179115 	stw	zero,24132(r2)
    e024:	000e41c0 	call	e41c <read>
    e028:	10ffffd8 	cmpnei	r3,r2,-1
    e02c:	18000426 	beq	r3,zero,e040 <_read_r+0x44>
    e030:	dfc00117 	ldw	ra,4(sp)
    e034:	dc000017 	ldw	r16,0(sp)
    e038:	dec00204 	addi	sp,sp,8
    e03c:	f800283a 	ret
    e040:	00c00074 	movhi	r3,1
    e044:	18d79117 	ldw	r3,24132(r3)
    e048:	183ff926 	beq	r3,zero,e030 <_read_r+0x34>
    e04c:	80c00015 	stw	r3,0(r16)
    e050:	dfc00117 	ldw	ra,4(sp)
    e054:	dc000017 	ldw	r16,0(sp)
    e058:	dec00204 	addi	sp,sp,8
    e05c:	f800283a 	ret

0000e060 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    e060:	defffd04 	addi	sp,sp,-12
    e064:	df000215 	stw	fp,8(sp)
    e068:	df000204 	addi	fp,sp,8
    e06c:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    e070:	0001883a 	nop
    e074:	e0bffe17 	ldw	r2,-8(fp)
    e078:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    e07c:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    e080:	10000226 	beq	r2,zero,e08c <_exit+0x2c>
    ALT_SIM_FAIL();
    e084:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    e088:	00000106 	br	e090 <_exit+0x30>
    ALT_SIM_PASS();
    e08c:	002af0b0 	cmpltui	zero,zero,43970
}
    e090:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    e094:	003fff06 	br	e094 <_exit+0x34>

0000e098 <alt_get_errno>:
{
    e098:	defffe04 	addi	sp,sp,-8
    e09c:	dfc00115 	stw	ra,4(sp)
    e0a0:	df000015 	stw	fp,0(sp)
    e0a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e0a8:	d0a00e17 	ldw	r2,-32712(gp)
    e0ac:	10000326 	beq	r2,zero,e0bc <alt_get_errno+0x24>
    e0b0:	d0a00e17 	ldw	r2,-32712(gp)
    e0b4:	103ee83a 	callr	r2
    e0b8:	00000106 	br	e0c0 <alt_get_errno+0x28>
    e0bc:	d0aebe04 	addi	r2,gp,-17672
}
    e0c0:	e037883a 	mov	sp,fp
    e0c4:	dfc00117 	ldw	ra,4(sp)
    e0c8:	df000017 	ldw	fp,0(sp)
    e0cc:	dec00204 	addi	sp,sp,8
    e0d0:	f800283a 	ret

0000e0d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e0d4:	defffb04 	addi	sp,sp,-20
    e0d8:	dfc00415 	stw	ra,16(sp)
    e0dc:	df000315 	stw	fp,12(sp)
    e0e0:	df000304 	addi	fp,sp,12
    e0e4:	e13ffe15 	stw	r4,-8(fp)
    e0e8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e0ec:	e0bffe17 	ldw	r2,-8(fp)
    e0f0:	10000916 	blt	r2,zero,e118 <fstat+0x44>
    e0f4:	e0fffe17 	ldw	r3,-8(fp)
    e0f8:	1805883a 	mov	r2,r3
    e0fc:	1085883a 	add	r2,r2,r2
    e100:	10c5883a 	add	r2,r2,r3
    e104:	100490ba 	slli	r2,r2,2
    e108:	00c00074 	movhi	r3,1
    e10c:	18c77104 	addi	r3,r3,7620
    e110:	10c5883a 	add	r2,r2,r3
    e114:	00000106 	br	e11c <fstat+0x48>
    e118:	0005883a 	mov	r2,zero
    e11c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    e120:	e0bfff17 	ldw	r2,-4(fp)
    e124:	10001026 	beq	r2,zero,e168 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e128:	e0bfff17 	ldw	r2,-4(fp)
    e12c:	10800017 	ldw	r2,0(r2)
    e130:	10800817 	ldw	r2,32(r2)
    e134:	10000726 	beq	r2,zero,e154 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
    e138:	e0bfff17 	ldw	r2,-4(fp)
    e13c:	10800017 	ldw	r2,0(r2)
    e140:	10800817 	ldw	r2,32(r2)
    e144:	e17ffd17 	ldw	r5,-12(fp)
    e148:	e13fff17 	ldw	r4,-4(fp)
    e14c:	103ee83a 	callr	r2
    e150:	00000a06 	br	e17c <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e154:	e0bffd17 	ldw	r2,-12(fp)
    e158:	00c80004 	movi	r3,8192
    e15c:	10c00115 	stw	r3,4(r2)
      return 0;
    e160:	0005883a 	mov	r2,zero
    e164:	00000506 	br	e17c <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e168:	000e0980 	call	e098 <alt_get_errno>
    e16c:	1007883a 	mov	r3,r2
    e170:	00801444 	movi	r2,81
    e174:	18800015 	stw	r2,0(r3)
    return -1;
    e178:	00bfffc4 	movi	r2,-1
  }
}
    e17c:	e037883a 	mov	sp,fp
    e180:	dfc00117 	ldw	ra,4(sp)
    e184:	df000017 	ldw	fp,0(sp)
    e188:	dec00204 	addi	sp,sp,8
    e18c:	f800283a 	ret

0000e190 <alt_get_errno>:
{
    e190:	defffe04 	addi	sp,sp,-8
    e194:	dfc00115 	stw	ra,4(sp)
    e198:	df000015 	stw	fp,0(sp)
    e19c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e1a0:	d0a00e17 	ldw	r2,-32712(gp)
    e1a4:	10000326 	beq	r2,zero,e1b4 <alt_get_errno+0x24>
    e1a8:	d0a00e17 	ldw	r2,-32712(gp)
    e1ac:	103ee83a 	callr	r2
    e1b0:	00000106 	br	e1b8 <alt_get_errno+0x28>
    e1b4:	d0aebe04 	addi	r2,gp,-17672
}
    e1b8:	e037883a 	mov	sp,fp
    e1bc:	dfc00117 	ldw	ra,4(sp)
    e1c0:	df000017 	ldw	fp,0(sp)
    e1c4:	dec00204 	addi	sp,sp,8
    e1c8:	f800283a 	ret

0000e1cc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e1cc:	deffea04 	addi	sp,sp,-88
    e1d0:	dfc01515 	stw	ra,84(sp)
    e1d4:	df001415 	stw	fp,80(sp)
    e1d8:	df001404 	addi	fp,sp,80
    e1dc:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e1e0:	e0bfec17 	ldw	r2,-80(fp)
    e1e4:	10000916 	blt	r2,zero,e20c <isatty+0x40>
    e1e8:	e0ffec17 	ldw	r3,-80(fp)
    e1ec:	1805883a 	mov	r2,r3
    e1f0:	1085883a 	add	r2,r2,r2
    e1f4:	10c5883a 	add	r2,r2,r3
    e1f8:	100490ba 	slli	r2,r2,2
    e1fc:	00c00074 	movhi	r3,1
    e200:	18c77104 	addi	r3,r3,7620
    e204:	10c5883a 	add	r2,r2,r3
    e208:	00000106 	br	e210 <isatty+0x44>
    e20c:	0005883a 	mov	r2,zero
    e210:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    e214:	e0bfff17 	ldw	r2,-4(fp)
    e218:	10000e26 	beq	r2,zero,e254 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e21c:	e0bfff17 	ldw	r2,-4(fp)
    e220:	10800017 	ldw	r2,0(r2)
    e224:	10800817 	ldw	r2,32(r2)
    e228:	1000021e 	bne	r2,zero,e234 <isatty+0x68>
    {
      return 1;
    e22c:	00800044 	movi	r2,1
    e230:	00000d06 	br	e268 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e234:	e0bfed04 	addi	r2,fp,-76
    e238:	100b883a 	mov	r5,r2
    e23c:	e13fec17 	ldw	r4,-80(fp)
    e240:	000e0d40 	call	e0d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e244:	e0bfee17 	ldw	r2,-72(fp)
    e248:	10880020 	cmpeqi	r2,r2,8192
    e24c:	10803fcc 	andi	r2,r2,255
    e250:	00000506 	br	e268 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e254:	000e1900 	call	e190 <alt_get_errno>
    e258:	1007883a 	mov	r3,r2
    e25c:	00801444 	movi	r2,81
    e260:	18800015 	stw	r2,0(r3)
    return 0;
    e264:	0005883a 	mov	r2,zero
  }
}
    e268:	e037883a 	mov	sp,fp
    e26c:	dfc00117 	ldw	ra,4(sp)
    e270:	df000017 	ldw	fp,0(sp)
    e274:	dec00204 	addi	sp,sp,8
    e278:	f800283a 	ret

0000e27c <alt_get_errno>:
{
    e27c:	defffe04 	addi	sp,sp,-8
    e280:	dfc00115 	stw	ra,4(sp)
    e284:	df000015 	stw	fp,0(sp)
    e288:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e28c:	d0a00e17 	ldw	r2,-32712(gp)
    e290:	10000326 	beq	r2,zero,e2a0 <alt_get_errno+0x24>
    e294:	d0a00e17 	ldw	r2,-32712(gp)
    e298:	103ee83a 	callr	r2
    e29c:	00000106 	br	e2a4 <alt_get_errno+0x28>
    e2a0:	d0aebe04 	addi	r2,gp,-17672
}
    e2a4:	e037883a 	mov	sp,fp
    e2a8:	dfc00117 	ldw	ra,4(sp)
    e2ac:	df000017 	ldw	fp,0(sp)
    e2b0:	dec00204 	addi	sp,sp,8
    e2b4:	f800283a 	ret

0000e2b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e2b8:	defff904 	addi	sp,sp,-28
    e2bc:	dfc00615 	stw	ra,24(sp)
    e2c0:	df000515 	stw	fp,20(sp)
    e2c4:	df000504 	addi	fp,sp,20
    e2c8:	e13ffd15 	stw	r4,-12(fp)
    e2cc:	e17ffc15 	stw	r5,-16(fp)
    e2d0:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e2d4:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e2d8:	e0bffd17 	ldw	r2,-12(fp)
    e2dc:	10000916 	blt	r2,zero,e304 <lseek+0x4c>
    e2e0:	e0fffd17 	ldw	r3,-12(fp)
    e2e4:	1805883a 	mov	r2,r3
    e2e8:	1085883a 	add	r2,r2,r2
    e2ec:	10c5883a 	add	r2,r2,r3
    e2f0:	100490ba 	slli	r2,r2,2
    e2f4:	00c00074 	movhi	r3,1
    e2f8:	18c77104 	addi	r3,r3,7620
    e2fc:	10c5883a 	add	r2,r2,r3
    e300:	00000106 	br	e308 <lseek+0x50>
    e304:	0005883a 	mov	r2,zero
    e308:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
    e30c:	e0bffe17 	ldw	r2,-8(fp)
    e310:	10001026 	beq	r2,zero,e354 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e314:	e0bffe17 	ldw	r2,-8(fp)
    e318:	10800017 	ldw	r2,0(r2)
    e31c:	10800717 	ldw	r2,28(r2)
    e320:	10000926 	beq	r2,zero,e348 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e324:	e0bffe17 	ldw	r2,-8(fp)
    e328:	10800017 	ldw	r2,0(r2)
    e32c:	10800717 	ldw	r2,28(r2)
    e330:	e1bffb17 	ldw	r6,-20(fp)
    e334:	e17ffc17 	ldw	r5,-16(fp)
    e338:	e13ffe17 	ldw	r4,-8(fp)
    e33c:	103ee83a 	callr	r2
    e340:	e0bfff15 	stw	r2,-4(fp)
    e344:	00000506 	br	e35c <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e348:	00bfde84 	movi	r2,-134
    e34c:	e0bfff15 	stw	r2,-4(fp)
    e350:	00000206 	br	e35c <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
    e354:	00bfebc4 	movi	r2,-81
    e358:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
    e35c:	e0bfff17 	ldw	r2,-4(fp)
    e360:	1000070e 	bge	r2,zero,e380 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
    e364:	000e27c0 	call	e27c <alt_get_errno>
    e368:	1007883a 	mov	r3,r2
    e36c:	e0bfff17 	ldw	r2,-4(fp)
    e370:	0085c83a 	sub	r2,zero,r2
    e374:	18800015 	stw	r2,0(r3)
    rc = -1;
    e378:	00bfffc4 	movi	r2,-1
    e37c:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
    e380:	e0bfff17 	ldw	r2,-4(fp)
}
    e384:	e037883a 	mov	sp,fp
    e388:	dfc00117 	ldw	ra,4(sp)
    e38c:	df000017 	ldw	fp,0(sp)
    e390:	dec00204 	addi	sp,sp,8
    e394:	f800283a 	ret

0000e398 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    e398:	defffe04 	addi	sp,sp,-8
    e39c:	df000115 	stw	fp,4(sp)
    e3a0:	df000104 	addi	fp,sp,4
    e3a4:	e13fff15 	stw	r4,-4(fp)
}
    e3a8:	0001883a 	nop
    e3ac:	e037883a 	mov	sp,fp
    e3b0:	df000017 	ldw	fp,0(sp)
    e3b4:	dec00104 	addi	sp,sp,4
    e3b8:	f800283a 	ret

0000e3bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e3bc:	defffe04 	addi	sp,sp,-8
    e3c0:	df000115 	stw	fp,4(sp)
    e3c4:	df000104 	addi	fp,sp,4
    e3c8:	e13fff15 	stw	r4,-4(fp)
}
    e3cc:	0001883a 	nop
    e3d0:	e037883a 	mov	sp,fp
    e3d4:	df000017 	ldw	fp,0(sp)
    e3d8:	dec00104 	addi	sp,sp,4
    e3dc:	f800283a 	ret

0000e3e0 <alt_get_errno>:
{
    e3e0:	defffe04 	addi	sp,sp,-8
    e3e4:	dfc00115 	stw	ra,4(sp)
    e3e8:	df000015 	stw	fp,0(sp)
    e3ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e3f0:	d0a00e17 	ldw	r2,-32712(gp)
    e3f4:	10000326 	beq	r2,zero,e404 <alt_get_errno+0x24>
    e3f8:	d0a00e17 	ldw	r2,-32712(gp)
    e3fc:	103ee83a 	callr	r2
    e400:	00000106 	br	e408 <alt_get_errno+0x28>
    e404:	d0aebe04 	addi	r2,gp,-17672
}
    e408:	e037883a 	mov	sp,fp
    e40c:	dfc00117 	ldw	ra,4(sp)
    e410:	df000017 	ldw	fp,0(sp)
    e414:	dec00204 	addi	sp,sp,8
    e418:	f800283a 	ret

0000e41c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e41c:	defff904 	addi	sp,sp,-28
    e420:	dfc00615 	stw	ra,24(sp)
    e424:	df000515 	stw	fp,20(sp)
    e428:	df000504 	addi	fp,sp,20
    e42c:	e13ffd15 	stw	r4,-12(fp)
    e430:	e17ffc15 	stw	r5,-16(fp)
    e434:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e438:	e0bffd17 	ldw	r2,-12(fp)
    e43c:	10000916 	blt	r2,zero,e464 <read+0x48>
    e440:	e0fffd17 	ldw	r3,-12(fp)
    e444:	1805883a 	mov	r2,r3
    e448:	1085883a 	add	r2,r2,r2
    e44c:	10c5883a 	add	r2,r2,r3
    e450:	100490ba 	slli	r2,r2,2
    e454:	00c00074 	movhi	r3,1
    e458:	18c77104 	addi	r3,r3,7620
    e45c:	10c5883a 	add	r2,r2,r3
    e460:	00000106 	br	e468 <read+0x4c>
    e464:	0005883a 	mov	r2,zero
    e468:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    e46c:	e0bfff17 	ldw	r2,-4(fp)
    e470:	10002226 	beq	r2,zero,e4fc <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e474:	e0bfff17 	ldw	r2,-4(fp)
    e478:	10800217 	ldw	r2,8(r2)
    e47c:	108000cc 	andi	r2,r2,3
    e480:	10800060 	cmpeqi	r2,r2,1
    e484:	1000181e 	bne	r2,zero,e4e8 <read+0xcc>
        (fd->dev->read))
    e488:	e0bfff17 	ldw	r2,-4(fp)
    e48c:	10800017 	ldw	r2,0(r2)
    e490:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e494:	10001426 	beq	r2,zero,e4e8 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e498:	e0bfff17 	ldw	r2,-4(fp)
    e49c:	10800017 	ldw	r2,0(r2)
    e4a0:	10800517 	ldw	r2,20(r2)
    e4a4:	e0fffb17 	ldw	r3,-20(fp)
    e4a8:	180d883a 	mov	r6,r3
    e4ac:	e17ffc17 	ldw	r5,-16(fp)
    e4b0:	e13fff17 	ldw	r4,-4(fp)
    e4b4:	103ee83a 	callr	r2
    e4b8:	e0bffe15 	stw	r2,-8(fp)
    e4bc:	e0bffe17 	ldw	r2,-8(fp)
    e4c0:	1000070e 	bge	r2,zero,e4e0 <read+0xc4>
        {
          ALT_ERRNO = -rval;
    e4c4:	000e3e00 	call	e3e0 <alt_get_errno>
    e4c8:	1007883a 	mov	r3,r2
    e4cc:	e0bffe17 	ldw	r2,-8(fp)
    e4d0:	0085c83a 	sub	r2,zero,r2
    e4d4:	18800015 	stw	r2,0(r3)
          return -1;
    e4d8:	00bfffc4 	movi	r2,-1
    e4dc:	00000c06 	br	e510 <read+0xf4>
        }
        return rval;
    e4e0:	e0bffe17 	ldw	r2,-8(fp)
    e4e4:	00000a06 	br	e510 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e4e8:	000e3e00 	call	e3e0 <alt_get_errno>
    e4ec:	1007883a 	mov	r3,r2
    e4f0:	00800344 	movi	r2,13
    e4f4:	18800015 	stw	r2,0(r3)
    e4f8:	00000406 	br	e50c <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e4fc:	000e3e00 	call	e3e0 <alt_get_errno>
    e500:	1007883a 	mov	r3,r2
    e504:	00801444 	movi	r2,81
    e508:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e50c:	00bfffc4 	movi	r2,-1
}
    e510:	e037883a 	mov	sp,fp
    e514:	dfc00117 	ldw	ra,4(sp)
    e518:	df000017 	ldw	fp,0(sp)
    e51c:	dec00204 	addi	sp,sp,8
    e520:	f800283a 	ret

0000e524 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    e524:	defff904 	addi	sp,sp,-28
    e528:	df000615 	stw	fp,24(sp)
    e52c:	df000604 	addi	fp,sp,24
    e530:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
    e534:	0005303a 	rdctl	r2,status
    e538:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e53c:	e0fffd17 	ldw	r3,-12(fp)
    e540:	00bfff84 	movi	r2,-2
    e544:	1884703a 	and	r2,r3,r2
    e548:	1001703a 	wrctl	status,r2
  return context;
    e54c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    e550:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e554:	d0a01417 	ldw	r2,-32688(gp)
    e558:	10c000c4 	addi	r3,r2,3
    e55c:	00bfff04 	movi	r2,-4
    e560:	1884703a 	and	r2,r3,r2
    e564:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e568:	d0e01417 	ldw	r3,-32688(gp)
    e56c:	e0bffa17 	ldw	r2,-24(fp)
    e570:	1887883a 	add	r3,r3,r2
    e574:	00808034 	movhi	r2,512
    e578:	10800004 	addi	r2,r2,0
    e57c:	10c0072e 	bgeu	r2,r3,e59c <sbrk+0x78>
    e580:	e0bfff17 	ldw	r2,-4(fp)
    e584:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    e588:	e0bffc17 	ldw	r2,-16(fp)
    e58c:	1001703a 	wrctl	status,r2
}
    e590:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e594:	00bfffc4 	movi	r2,-1
    e598:	00000c06 	br	e5cc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    e59c:	d0a01417 	ldw	r2,-32688(gp)
    e5a0:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
    e5a4:	d0e01417 	ldw	r3,-32688(gp)
    e5a8:	e0bffa17 	ldw	r2,-24(fp)
    e5ac:	1885883a 	add	r2,r3,r2
    e5b0:	d0a01415 	stw	r2,-32688(gp)
    e5b4:	e0bfff17 	ldw	r2,-4(fp)
    e5b8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    e5bc:	e0bffb17 	ldw	r2,-20(fp)
    e5c0:	1001703a 	wrctl	status,r2
}
    e5c4:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e5c8:	e0bffe17 	ldw	r2,-8(fp)
} 
    e5cc:	e037883a 	mov	sp,fp
    e5d0:	df000017 	ldw	fp,0(sp)
    e5d4:	dec00104 	addi	sp,sp,4
    e5d8:	f800283a 	ret

0000e5dc <alt_get_errno>:
{
    e5dc:	defffe04 	addi	sp,sp,-8
    e5e0:	dfc00115 	stw	ra,4(sp)
    e5e4:	df000015 	stw	fp,0(sp)
    e5e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e5ec:	d0a00e17 	ldw	r2,-32712(gp)
    e5f0:	10000326 	beq	r2,zero,e600 <alt_get_errno+0x24>
    e5f4:	d0a00e17 	ldw	r2,-32712(gp)
    e5f8:	103ee83a 	callr	r2
    e5fc:	00000106 	br	e604 <alt_get_errno+0x28>
    e600:	d0aebe04 	addi	r2,gp,-17672
}
    e604:	e037883a 	mov	sp,fp
    e608:	dfc00117 	ldw	ra,4(sp)
    e60c:	df000017 	ldw	fp,0(sp)
    e610:	dec00204 	addi	sp,sp,8
    e614:	f800283a 	ret

0000e618 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e618:	defff904 	addi	sp,sp,-28
    e61c:	dfc00615 	stw	ra,24(sp)
    e620:	df000515 	stw	fp,20(sp)
    e624:	df000504 	addi	fp,sp,20
    e628:	e13ffd15 	stw	r4,-12(fp)
    e62c:	e17ffc15 	stw	r5,-16(fp)
    e630:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e634:	e0bffd17 	ldw	r2,-12(fp)
    e638:	10000916 	blt	r2,zero,e660 <write+0x48>
    e63c:	e0fffd17 	ldw	r3,-12(fp)
    e640:	1805883a 	mov	r2,r3
    e644:	1085883a 	add	r2,r2,r2
    e648:	10c5883a 	add	r2,r2,r3
    e64c:	100490ba 	slli	r2,r2,2
    e650:	00c00074 	movhi	r3,1
    e654:	18c77104 	addi	r3,r3,7620
    e658:	10c5883a 	add	r2,r2,r3
    e65c:	00000106 	br	e664 <write+0x4c>
    e660:	0005883a 	mov	r2,zero
    e664:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    e668:	e0bfff17 	ldw	r2,-4(fp)
    e66c:	10002126 	beq	r2,zero,e6f4 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e670:	e0bfff17 	ldw	r2,-4(fp)
    e674:	10800217 	ldw	r2,8(r2)
    e678:	108000cc 	andi	r2,r2,3
    e67c:	10001826 	beq	r2,zero,e6e0 <write+0xc8>
    e680:	e0bfff17 	ldw	r2,-4(fp)
    e684:	10800017 	ldw	r2,0(r2)
    e688:	10800617 	ldw	r2,24(r2)
    e68c:	10001426 	beq	r2,zero,e6e0 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e690:	e0bfff17 	ldw	r2,-4(fp)
    e694:	10800017 	ldw	r2,0(r2)
    e698:	10800617 	ldw	r2,24(r2)
    e69c:	e0fffb17 	ldw	r3,-20(fp)
    e6a0:	180d883a 	mov	r6,r3
    e6a4:	e17ffc17 	ldw	r5,-16(fp)
    e6a8:	e13fff17 	ldw	r4,-4(fp)
    e6ac:	103ee83a 	callr	r2
    e6b0:	e0bffe15 	stw	r2,-8(fp)
    e6b4:	e0bffe17 	ldw	r2,-8(fp)
    e6b8:	1000070e 	bge	r2,zero,e6d8 <write+0xc0>
      {
        ALT_ERRNO = -rval;
    e6bc:	000e5dc0 	call	e5dc <alt_get_errno>
    e6c0:	1007883a 	mov	r3,r2
    e6c4:	e0bffe17 	ldw	r2,-8(fp)
    e6c8:	0085c83a 	sub	r2,zero,r2
    e6cc:	18800015 	stw	r2,0(r3)
        return -1;
    e6d0:	00bfffc4 	movi	r2,-1
    e6d4:	00000c06 	br	e708 <write+0xf0>
      }
      return rval;
    e6d8:	e0bffe17 	ldw	r2,-8(fp)
    e6dc:	00000a06 	br	e708 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e6e0:	000e5dc0 	call	e5dc <alt_get_errno>
    e6e4:	1007883a 	mov	r3,r2
    e6e8:	00800344 	movi	r2,13
    e6ec:	18800015 	stw	r2,0(r3)
    e6f0:	00000406 	br	e704 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e6f4:	000e5dc0 	call	e5dc <alt_get_errno>
    e6f8:	1007883a 	mov	r3,r2
    e6fc:	00801444 	movi	r2,81
    e700:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e704:	00bfffc4 	movi	r2,-1
}
    e708:	e037883a 	mov	sp,fp
    e70c:	dfc00117 	ldw	ra,4(sp)
    e710:	df000017 	ldw	fp,0(sp)
    e714:	dec00204 	addi	sp,sp,8
    e718:	f800283a 	ret
