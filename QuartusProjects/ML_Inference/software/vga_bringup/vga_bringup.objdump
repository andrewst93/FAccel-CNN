
vga_bringup.elf:     file format elf32-littlenios2
vga_bringup.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000210

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x04000000 align 2**12
         filesz 0x00000210 memsz 0x00000210 flags r-x
    LOAD off    0x00002210 vaddr 0x04000210 paddr 0x04000210 align 2**12
         filesz 0x000094ec memsz 0x000094ec flags r-x
    LOAD off    0x0000b6fc vaddr 0x040096fc paddr 0x0400b568 align 2**12
         filesz 0x00001e6c memsz 0x00001e6c flags rw-
    LOAD off    0x0000e3d4 vaddr 0x0400d3d4 paddr 0x0400d3d4 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00004020  04000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000738c  04000210  04000210  00002210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002160  0400759c  0400759c  0000959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e6c  040096fc  0400b568  0000b6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  0400d3d4  0400d3d4  0000e3d4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  00004230  00004230  0000d568  2**0
                  CONTENTS
  7 .sdram        00000000  0400d53c  0400d53c  0000d568  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000d568  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b18  00000000  00000000  0000d590  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00018d73  00000000  00000000  0000e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006896  00000000  00000000  00026e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007346  00000000  00000000  0002d6b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000019f4  00000000  00000000  000349f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002b08  00000000  00000000  000363ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00006e86  00000000  00000000  00038ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0003fd7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000988  00000000  00000000  0003fdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00043032  2**0
                  CONTENTS, READONLY
 19 .cpu          00000006  00000000  00000000  00043035  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0004303b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0004303c  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0004303d  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00043046  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0004304f  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  00043058  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003a  00000000  00000000  00043060  2**0
                  CONTENTS, READONLY
 27 .jdi          00004aa0  00000000  00000000  0004309a  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0005afbe  00000000  00000000  00047b3a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
04000210 l    d  .text	00000000 .text
0400759c l    d  .rodata	00000000 .rodata
040096fc l    d  .rwdata	00000000 .rwdata
0400d3d4 l    d  .bss	00000000 .bss
00004230 l    d  .onchip_ram	00000000 .onchip_ram
0400d53c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../vga_bringup_bsp//obj/HAL/src/crt0.o
04000248 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 vga_bringup.c
0400759c l     O .rodata	00002000 image64by64
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
04002a10 l     F .text	00000008 __fp_unlock
04002a24 l     F .text	0000019c __sinit.part.1
04002bc0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04009f04 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
04004d80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04004e94 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04004ec0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04004fb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400509c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04005188 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04005364 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0400b558 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04005608 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04005744 l     F .text	00000034 alt_dev_reg
0400a4d0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04005a1c l     F .text	0000020c altera_avalon_jtag_uart_irq
04005c28 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04006504 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04006964 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04006ac4 l     F .text	0000003c alt_get_errno
04006b00 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0400d410 g     O .bss	00000004 alt_instruction_exception_handler
04004c20 g     F .text	00000054 _isatty_r
040052a0 g     F .text	0000007c alt_main
040027d4 g     F .text	000000c0 _puts_r
0400d43c g     O .bss	00000100 alt_irq
04004948 g     F .text	00000060 _lseek_r
04000e98 g     F .text	00000064 crlf
0400b568 g       *ABS*	00000000 __flash_rwdata_start
0400d53c g       *ABS*	00000000 __alt_heap_start
04004330 g     F .text	0000005c __sseek
04002d70 g     F .text	00000010 __sinit
0400d3d8 g     O .bss	00000004 ch_ypos
04002bc8 g     F .text	00000078 __sfmoreglue
04005340 g     F .text	00000024 __malloc_unlock
04003a70 g     F .text	0000015c memmove
04002d58 g     F .text	00000018 _cleanup
04000b40 g     F .text	000000ac print_char
04006eec g     F .text	00000024 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
04000000 g       *ABS*	00000000 __flash_exceptions_start
04004bc4 g     F .text	0000005c _fstat_r
0400d3f4 g     O .bss	00000004 errno
040042ac g     F .text	00000008 __seofread
0400d3fc g     O .bss	00000004 alt_argv
04013530 g       *ABS*	00000000 _gp
040055d8 g     F .text	00000030 usleep
0400a350 g     O .rwdata	00000180 alt_fd_list
040096fc g     O .rwdata	00000400 font
04006f10 g     F .text	00000090 alt_find_dev
04003928 g     F .text	00000148 memcpy
04002a18 g     F .text	0000000c _cleanup_r
04006a48 g     F .text	0000007c alt_io_redirect
0400759c g       *ABS*	00000000 __DTOR_END__
04002894 g     F .text	00000014 puts
0400716c g     F .text	0000009c alt_exception_cause_generated_bad_addr
04005e20 g     F .text	0000021c altera_avalon_jtag_uart_read
04001fa0 g     F .text	00000014 malloc
04001ebc g     F .text	00000064 .hidden __udivsi3
04004ff0 g     F .text	000000ac isatty
0400d3f0 g     O .bss	00000004 __malloc_top_pad
040031f4 g     F .text	000004c8 __sfvwrite_r
04002924 g     F .text	00000054 _sbrk_r
04004b64 g     F .text	00000060 _read_r
0400b550 g     O .rwdata	00000004 alt_max_fd
0400459c g     F .text	000000f0 _fclose_r
04000c80 g     F .text	00000218 print_dec
04004918 g     F .text	00000030 fflush
0400d3ec g     O .bss	00000004 __malloc_max_sbrked_mem
0400d3dc g     O .bss	00000004 frame1_base
04001800 g     F .text	000005c4 .hidden __umoddi3
040051c4 g     F .text	000000dc lseek
0400b538 g     O .rwdata	00000004 _global_impure_ptr
04003cf4 g     F .text	00000564 _realloc_r
0400d53c g       *ABS*	00000000 __bss_end
04006874 g     F .text	000000f0 alt_iic_isr_register
04006de4 g     F .text	00000108 alt_tick
04001204 g     F .text	000005fc .hidden __udivdi3
0400d3d4 g     O .bss	00000004 ch_xpos
04002d90 g     F .text	00000018 __fp_lock_all
04006828 g     F .text	0000004c alt_ic_irq_enabled
04006d48 g     F .text	0000009c alt_alarm_stop
0400d404 g     O .bss	00000004 alt_irq_active
000040fc g     F .exceptions	000000d4 alt_irq_handler
0400a328 g     O .rwdata	00000028 alt_dev_null
040064e4 g     F .text	00000020 alt_dcache_flush_all
0400b568 g       *ABS*	00000000 __ram_rwdata_end
04000474 g     F .text	0000003c cursor_on
0400b548 g     O .rwdata	00000008 alt_dev_list
04005644 g     F .text	00000100 write
040096fc g       *ABS*	00000000 __ram_rodata_end
04004efc g     F .text	000000b8 fstat
040007ac g     F .text	0000007c clear
040004e8 g     F .text	000002c4 plot_line
04001f20 g     F .text	00000058 .hidden __umodsi3
0400d53c g       *ABS*	00000000 end
0400595c g     F .text	000000c0 altera_avalon_jtag_uart_init
000041d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0400759c g       *ABS*	00000000 __CTOR_LIST__
00008000 g       *ABS*	00000000 __alt_stack_pointer
0400603c g     F .text	00000224 altera_avalon_jtag_uart_write
04002d80 g     F .text	00000004 __sfp_lock_acquire
04003844 g     F .text	000000e4 memchr
04002ee4 g     F .text	00000310 _free_r
040073e8 g     F .text	00000180 __call_exitprocs
0400d3e0 g     O .bss	00000004 cursor_flag
0400b530 g     O .rwdata	00000004 __malloc_sbrk_base
04000210 g     F .text	0000003c _start
0400d408 g     O .bss	00000004 _alt_tick_rate
040028c0 g     F .text	00000064 rand
0400d40c g     O .bss	00000004 _alt_nticks
040053a0 g     F .text	00000104 read
040057b0 g     F .text	00000048 alt_sys_init
040072d0 g     F .text	00000118 __register_exitproc
04005cc8 g     F .text	00000068 altera_avalon_jtag_uart_close
04001f78 g     F .text	00000028 .hidden __mulsi3
040096fc g       *ABS*	00000000 __ram_rwdata_start
0400759c g       *ABS*	00000000 __ram_rodata_start
0400d414 g     O .bss	00000028 __malloc_current_mallinfo
0400024c g     F .text	0000006c put_pixel
040057f8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040070a8 g     F .text	000000c4 alt_get_fd
0400638c g     F .text	00000158 alt_busy_sleep
04004548 g     F .text	00000054 _close_r
04007254 g     F .text	0000007c memcmp
04000318 g     F .text	000000bc plot_cursor
040058b8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00004230 g       *ABS*	00000000 __alt_stack_base
04005908 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040043f4 g     F .text	00000154 __swsetup_r
04002c40 g     F .text	00000118 __sfp
04009afc g     O .rwdata	00000408 __malloc_av_
04002d8c g     F .text	00000004 __sinit_lock_release
04004258 g     F .text	00000054 __sread
04006fa0 g     F .text	00000108 alt_find_file
04006540 g     F .text	000000a4 alt_dev_llist_insert
0400531c g     F .text	00000024 __malloc_lock
04005528 g     F .text	000000b0 sbrk
040048bc g     F .text	0000005c _fflush_r
0400d3d4 g       *ABS*	00000000 __bss_start
04003bcc g     F .text	00000128 memset
04001008 g     F .text	000001fc main
0400d400 g     O .bss	00000004 alt_envp
0400d3e8 g     O .bss	00000004 __malloc_max_total_mem
04005858 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
040028a8 g     F .text	00000018 srand
0400438c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0400468c g     F .text	00000014 fclose
04001fc8 g     F .text	0000080c _malloc_r
0400b554 g     O .rwdata	00000004 alt_errno
040036bc g     F .text	000000c4 _fwalk
04001dc4 g     F .text	00000084 .hidden __divsi3
04002dc0 g     F .text	00000124 _malloc_trim_r
0400759c g       *ABS*	00000000 __CTOR_END__
0400759c g       *ABS*	00000000 __flash_rodata_start
0400759c g       *ABS*	00000000 __DTOR_LIST__
04005778 g     F .text	00000038 alt_irq_init
040054a4 g     F .text	00000084 alt_release_fd
040095c6 g     O .rodata	00000100 .hidden __clz_tab
04007208 g     F .text	00000014 atexit
04004394 g     F .text	00000060 _write_r
040004b0 g     F .text	00000038 cursor_off
0400b53c g     O .rwdata	00000004 _impure_ptr
0400d3f8 g     O .bss	00000004 alt_argc
040046a0 g     F .text	0000021c __sflush_r
04006644 g     F .text	00000060 _do_dtors
04000828 g     F .text	00000108 plot_char
00004020 g       .exceptions	00000000 alt_irq_entry
04002da8 g     F .text	00000018 __fp_unlock_all
040003d4 g     F .text	000000a0 remove_cursor
0400b540 g     O .rwdata	00000008 alt_fs_list
04000a50 g     F .text	000000f0 scroll_up
040002b8 g     F .text	00000060 get_pixel
00004020 g       *ABS*	00000000 __ram_exceptions_start
04000930 g     F .text	0000009c set_char
040066c4 g     F .text	00000050 alt_ic_isr_register
0400b568 g       *ABS*	00000000 _edata
04000bec g     F .text	00000094 print_string
0400d53c g       *ABS*	00000000 _end
04000fc8 g     F .text	00000040 get_rand
00004230 g       *ABS*	00000000 __ram_exceptions_end
04005d30 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0400679c g     F .text	0000008c alt_ic_irq_disable
040042b4 g     F .text	0000007c __swrite
0400b534 g     O .rwdata	00000004 __malloc_trim_threshold
0400721c g     F .text	00000038 exit
04003780 g     F .text	000000c4 _fwalk_reent
04001e48 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
04002d84 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
04000efc g     F .text	000000cc bringup_vga
00004000 g       *ABS*	00000000 __alt_mem_onchip_ram
040009cc g     F .text	00000084 print_pos
04007568 g     F .text	00000034 _exit
04006260 g     F .text	0000012c alt_alarm_start
04004c74 g     F .text	0000010c .hidden __muldi3
040049a8 g     F .text	000001bc __smakebuf_r
04002978 g     F .text	00000098 strlen
04006bec g     F .text	0000015c open
040066a4 g     F .text	00000020 alt_icache_flush_all
0400b55c g     O .rwdata	00000004 alt_priority_mask
04006714 g     F .text	00000088 alt_ic_irq_enable
0400d3e4 g     O .bss	00000004 frame2_base
0400b560 g     O .rwdata	00000008 alt_alarm_list
040065e4 g     F .text	00000060 _do_ctors
04004dbc g     F .text	000000d8 close
04005104 g     F .text	00000084 alt_load
04001fb4 g     F .text	00000014 free
04002d88 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
    4004:	08408414 	ori	at,at,528
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	00041d00 	call	41d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defff904 	addi	sp,sp,-28
    4100:	dfc00615 	stw	ra,24(sp)
    4104:	df000515 	stw	fp,20(sp)
    4108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    410c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4110:	0005313a 	rdctl	r2,ipending
    4114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    4118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    411c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    4120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    4124:	00800044 	movi	r2,1
    4128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    412c:	e0fffb17 	ldw	r3,-20(fp)
    4130:	e0bffc17 	ldw	r2,-16(fp)
    4134:	1884703a 	and	r2,r3,r2
    4138:	10001426 	beq	r2,zero,418c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    413c:	00810074 	movhi	r2,1025
    4140:	10b50f04 	addi	r2,r2,-11204
    4144:	e0fffd17 	ldw	r3,-12(fp)
    4148:	180690fa 	slli	r3,r3,3
    414c:	10c5883a 	add	r2,r2,r3
    4150:	10c00017 	ldw	r3,0(r2)
    4154:	00810074 	movhi	r2,1025
    4158:	10b50f04 	addi	r2,r2,-11204
    415c:	e13ffd17 	ldw	r4,-12(fp)
    4160:	200890fa 	slli	r4,r4,3
    4164:	1105883a 	add	r2,r2,r4
    4168:	10800104 	addi	r2,r2,4
    416c:	10800017 	ldw	r2,0(r2)
    4170:	1009883a 	mov	r4,r2
    4174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    4178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    417c:	0005313a 	rdctl	r2,ipending
    4180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    4184:	e0bfff17 	ldw	r2,-4(fp)
    4188:	00000706 	br	41a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    418c:	e0bffc17 	ldw	r2,-16(fp)
    4190:	1085883a 	add	r2,r2,r2
    4194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    4198:	e0bffd17 	ldw	r2,-12(fp)
    419c:	10800044 	addi	r2,r2,1
    41a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    41a4:	003fe106 	br	412c <__alt_heap_limit+0xf800412c>

    active = alt_irq_pending ();
    41a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    41ac:	e0bffb17 	ldw	r2,-20(fp)
    41b0:	103fdb1e 	bne	r2,zero,4120 <__alt_heap_limit+0xf8004120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    41b4:	0001883a 	nop
}
    41b8:	0001883a 	nop
    41bc:	e037883a 	mov	sp,fp
    41c0:	dfc00117 	ldw	ra,4(sp)
    41c4:	df000017 	ldw	fp,0(sp)
    41c8:	dec00204 	addi	sp,sp,8
    41cc:	f800283a 	ret

000041d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    41d0:	defffb04 	addi	sp,sp,-20
    41d4:	dfc00415 	stw	ra,16(sp)
    41d8:	df000315 	stw	fp,12(sp)
    41dc:	df000304 	addi	fp,sp,12
    41e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    41e4:	00bfffc4 	movi	r2,-1
    41e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    41ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    41f0:	d0a7b817 	ldw	r2,-24864(gp)
    41f4:	10000726 	beq	r2,zero,4214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    41f8:	d0a7b817 	ldw	r2,-24864(gp)
    41fc:	e0fffd17 	ldw	r3,-12(fp)
    4200:	e1bffe17 	ldw	r6,-8(fp)
    4204:	e17fff17 	ldw	r5,-4(fp)
    4208:	1809883a 	mov	r4,r3
    420c:	103ee83a 	callr	r2
    4210:	00000206 	br	421c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    4218:	0005883a 	mov	r2,zero
}
    421c:	e037883a 	mov	sp,fp
    4220:	dfc00117 	ldw	ra,4(sp)
    4224:	df000017 	ldw	fp,0(sp)
    4228:	dec00204 	addi	sp,sp,8
    422c:	f800283a 	ret

Disassembly of section .text:

04000210 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000210:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
 4000214:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
 4000218:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 400021c:	d68d4c14 	ori	gp,gp,13616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000220:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000224:	10b4f514 	ori	r2,r2,54228

    movhi r3, %hi(__bss_end)
 4000228:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 400022c:	18f54f14 	ori	r3,r3,54588

    beq r2, r3, 1f
 4000230:	10c00326 	beq	r2,r3,4000240 <_start+0x30>

0:
    stw zero, (r2)
 4000234:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000238:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400023c:	10fffd36 	bltu	r2,r3,4000234 <__alt_heap_limit+0xfc000234>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000240:	40051040 	call	4005104 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000244:	40052a00 	call	40052a0 <alt_main>

04000248 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000248:	003fff06 	br	4000248 <__alt_heap_limit+0xfc000248>

0400024c <put_pixel>:
#define _BLACK 0x0

alt_u32 ch_xpos = 0, ch_ypos = 0;
alt_u32 cursor_flag;

void put_pixel(alt_u16* base, alt_u32 x, alt_u32 y, alt_u32 rgb) {
 400024c:	defffa04 	addi	sp,sp,-24
 4000250:	dfc00515 	stw	ra,20(sp)
 4000254:	df000415 	stw	fp,16(sp)
 4000258:	df000404 	addi	fp,sp,16
 400025c:	e13ffc15 	stw	r4,-16(fp)
 4000260:	e17ffd15 	stw	r5,-12(fp)
 4000264:	e1bffe15 	stw	r6,-8(fp)
 4000268:	e1ffff15 	stw	r7,-4(fp)
	IOWR_16DIRECT(base, (x + (y * XRES)) * 2, (rgb & 0xffff));
 400026c:	0140a004 	movi	r5,640
 4000270:	e13ffe17 	ldw	r4,-8(fp)
 4000274:	4001f780 	call	4001f78 <__mulsi3>
 4000278:	1007883a 	mov	r3,r2
 400027c:	e0bffd17 	ldw	r2,-12(fp)
 4000280:	1885883a 	add	r2,r3,r2
 4000284:	1085883a 	add	r2,r2,r2
 4000288:	1007883a 	mov	r3,r2
 400028c:	e0bffc17 	ldw	r2,-16(fp)
 4000290:	10c5883a 	add	r2,r2,r3
 4000294:	e0ffff17 	ldw	r3,-4(fp)
 4000298:	18ffffcc 	andi	r3,r3,65535
 400029c:	10c0002d 	sthio	r3,0(r2)
}
 40002a0:	0001883a 	nop
 40002a4:	e037883a 	mov	sp,fp
 40002a8:	dfc00117 	ldw	ra,4(sp)
 40002ac:	df000017 	ldw	fp,0(sp)
 40002b0:	dec00204 	addi	sp,sp,8
 40002b4:	f800283a 	ret

040002b8 <get_pixel>:

int get_pixel(alt_u16* base, int x, int y) {
 40002b8:	defffb04 	addi	sp,sp,-20
 40002bc:	dfc00415 	stw	ra,16(sp)
 40002c0:	df000315 	stw	fp,12(sp)
 40002c4:	df000304 	addi	fp,sp,12
 40002c8:	e13ffd15 	stw	r4,-12(fp)
 40002cc:	e17ffe15 	stw	r5,-8(fp)
 40002d0:	e1bfff15 	stw	r6,-4(fp)
	return IORD_16DIRECT(base, (x + (y * XRES)) * 2);
 40002d4:	0140a004 	movi	r5,640
 40002d8:	e13fff17 	ldw	r4,-4(fp)
 40002dc:	4001f780 	call	4001f78 <__mulsi3>
 40002e0:	1007883a 	mov	r3,r2
 40002e4:	e0bffe17 	ldw	r2,-8(fp)
 40002e8:	1885883a 	add	r2,r3,r2
 40002ec:	1085883a 	add	r2,r2,r2
 40002f0:	1007883a 	mov	r3,r2
 40002f4:	e0bffd17 	ldw	r2,-12(fp)
 40002f8:	10c5883a 	add	r2,r2,r3
 40002fc:	1080002b 	ldhuio	r2,0(r2)
 4000300:	10bfffcc 	andi	r2,r2,65535
}
 4000304:	e037883a 	mov	sp,fp
 4000308:	dfc00117 	ldw	ra,4(sp)
 400030c:	df000017 	ldw	fp,0(sp)
 4000310:	dec00204 	addi	sp,sp,8
 4000314:	f800283a 	ret

04000318 <plot_cursor>:

void plot_cursor(alt_u16* base) {
 4000318:	defffa04 	addi	sp,sp,-24
 400031c:	dfc00515 	stw	ra,20(sp)
 4000320:	df000415 	stw	fp,16(sp)
 4000324:	df000404 	addi	fp,sp,16
 4000328:	e13fff15 	stw	r4,-4(fp)
	int x, y, rgb;
	rgb = _BLACK;
 400032c:	e03ffe15 	stw	zero,-8(fp)
	if (cursor_flag == 1)
 4000330:	d0a7ac17 	ldw	r2,-24912(gp)
 4000334:	10800058 	cmpnei	r2,r2,1
 4000338:	1000021e 	bne	r2,zero,4000344 <plot_cursor+0x2c>
		rgb = _WHITE;
 400033c:	00bfffd4 	movui	r2,65535
 4000340:	e0bffe15 	stw	r2,-8(fp)
	for (y=0; y<8; y++)
 4000344:	e03ffd15 	stw	zero,-12(fp)
 4000348:	00001906 	br	40003b0 <plot_cursor+0x98>
		for (x=0; x<8; x++)
 400034c:	e03ffc15 	stw	zero,-16(fp)
 4000350:	00001106 	br	4000398 <plot_cursor+0x80>
			put_pixel(base, (ch_xpos * 8) + x, (ch_ypos * 8) + y, rgb);
 4000354:	d0a7a917 	ldw	r2,-24924(gp)
 4000358:	100690fa 	slli	r3,r2,3
 400035c:	e0bffc17 	ldw	r2,-16(fp)
 4000360:	1889883a 	add	r4,r3,r2
 4000364:	d0a7aa17 	ldw	r2,-24920(gp)
 4000368:	100690fa 	slli	r3,r2,3
 400036c:	e0bffd17 	ldw	r2,-12(fp)
 4000370:	1885883a 	add	r2,r3,r2
 4000374:	e0fffe17 	ldw	r3,-8(fp)
 4000378:	180f883a 	mov	r7,r3
 400037c:	100d883a 	mov	r6,r2
 4000380:	200b883a 	mov	r5,r4
 4000384:	e13fff17 	ldw	r4,-4(fp)
 4000388:	400024c0 	call	400024c <put_pixel>
	int x, y, rgb;
	rgb = _BLACK;
	if (cursor_flag == 1)
		rgb = _WHITE;
	for (y=0; y<8; y++)
		for (x=0; x<8; x++)
 400038c:	e0bffc17 	ldw	r2,-16(fp)
 4000390:	10800044 	addi	r2,r2,1
 4000394:	e0bffc15 	stw	r2,-16(fp)
 4000398:	e0bffc17 	ldw	r2,-16(fp)
 400039c:	10800210 	cmplti	r2,r2,8
 40003a0:	103fec1e 	bne	r2,zero,4000354 <__alt_heap_limit+0xfc000354>
void plot_cursor(alt_u16* base) {
	int x, y, rgb;
	rgb = _BLACK;
	if (cursor_flag == 1)
		rgb = _WHITE;
	for (y=0; y<8; y++)
 40003a4:	e0bffd17 	ldw	r2,-12(fp)
 40003a8:	10800044 	addi	r2,r2,1
 40003ac:	e0bffd15 	stw	r2,-12(fp)
 40003b0:	e0bffd17 	ldw	r2,-12(fp)
 40003b4:	10800210 	cmplti	r2,r2,8
 40003b8:	103fe41e 	bne	r2,zero,400034c <__alt_heap_limit+0xfc00034c>
		for (x=0; x<8; x++)
			put_pixel(base, (ch_xpos * 8) + x, (ch_ypos * 8) + y, rgb);

}
 40003bc:	0001883a 	nop
 40003c0:	e037883a 	mov	sp,fp
 40003c4:	dfc00117 	ldw	ra,4(sp)
 40003c8:	df000017 	ldw	fp,0(sp)
 40003cc:	dec00204 	addi	sp,sp,8
 40003d0:	f800283a 	ret

040003d4 <remove_cursor>:

void remove_cursor(alt_u16* base) {
 40003d4:	defffb04 	addi	sp,sp,-20
 40003d8:	dfc00415 	stw	ra,16(sp)
 40003dc:	df000315 	stw	fp,12(sp)
 40003e0:	df000304 	addi	fp,sp,12
 40003e4:	e13fff15 	stw	r4,-4(fp)
	int x, y;
	for (y=0; y<8; y++)
 40003e8:	e03ffe15 	stw	zero,-8(fp)
 40003ec:	00001806 	br	4000450 <remove_cursor+0x7c>
		for (x=0; x<8; x++)
 40003f0:	e03ffd15 	stw	zero,-12(fp)
 40003f4:	00001006 	br	4000438 <remove_cursor+0x64>
			put_pixel(base, (ch_xpos * 8) + x, (ch_ypos * 8) + y, _BLACK);
 40003f8:	d0a7a917 	ldw	r2,-24924(gp)
 40003fc:	100690fa 	slli	r3,r2,3
 4000400:	e0bffd17 	ldw	r2,-12(fp)
 4000404:	1889883a 	add	r4,r3,r2
 4000408:	d0a7aa17 	ldw	r2,-24920(gp)
 400040c:	100690fa 	slli	r3,r2,3
 4000410:	e0bffe17 	ldw	r2,-8(fp)
 4000414:	1885883a 	add	r2,r3,r2
 4000418:	000f883a 	mov	r7,zero
 400041c:	100d883a 	mov	r6,r2
 4000420:	200b883a 	mov	r5,r4
 4000424:	e13fff17 	ldw	r4,-4(fp)
 4000428:	400024c0 	call	400024c <put_pixel>
}

void remove_cursor(alt_u16* base) {
	int x, y;
	for (y=0; y<8; y++)
		for (x=0; x<8; x++)
 400042c:	e0bffd17 	ldw	r2,-12(fp)
 4000430:	10800044 	addi	r2,r2,1
 4000434:	e0bffd15 	stw	r2,-12(fp)
 4000438:	e0bffd17 	ldw	r2,-12(fp)
 400043c:	10800210 	cmplti	r2,r2,8
 4000440:	103fed1e 	bne	r2,zero,40003f8 <__alt_heap_limit+0xfc0003f8>

}

void remove_cursor(alt_u16* base) {
	int x, y;
	for (y=0; y<8; y++)
 4000444:	e0bffe17 	ldw	r2,-8(fp)
 4000448:	10800044 	addi	r2,r2,1
 400044c:	e0bffe15 	stw	r2,-8(fp)
 4000450:	e0bffe17 	ldw	r2,-8(fp)
 4000454:	10800210 	cmplti	r2,r2,8
 4000458:	103fe51e 	bne	r2,zero,40003f0 <__alt_heap_limit+0xfc0003f0>
		for (x=0; x<8; x++)
			put_pixel(base, (ch_xpos * 8) + x, (ch_ypos * 8) + y, _BLACK);

}
 400045c:	0001883a 	nop
 4000460:	e037883a 	mov	sp,fp
 4000464:	dfc00117 	ldw	ra,4(sp)
 4000468:	df000017 	ldw	fp,0(sp)
 400046c:	dec00204 	addi	sp,sp,8
 4000470:	f800283a 	ret

04000474 <cursor_on>:

void cursor_on(alt_u16* base) {
 4000474:	defffd04 	addi	sp,sp,-12
 4000478:	dfc00215 	stw	ra,8(sp)
 400047c:	df000115 	stw	fp,4(sp)
 4000480:	df000104 	addi	fp,sp,4
 4000484:	e13fff15 	stw	r4,-4(fp)
	cursor_flag = 1;
 4000488:	00800044 	movi	r2,1
 400048c:	d0a7ac15 	stw	r2,-24912(gp)
	plot_cursor(base);
 4000490:	e13fff17 	ldw	r4,-4(fp)
 4000494:	40003180 	call	4000318 <plot_cursor>
}
 4000498:	0001883a 	nop
 400049c:	e037883a 	mov	sp,fp
 40004a0:	dfc00117 	ldw	ra,4(sp)
 40004a4:	df000017 	ldw	fp,0(sp)
 40004a8:	dec00204 	addi	sp,sp,8
 40004ac:	f800283a 	ret

040004b0 <cursor_off>:

void cursor_off(alt_u16* base) {
 40004b0:	defffd04 	addi	sp,sp,-12
 40004b4:	dfc00215 	stw	ra,8(sp)
 40004b8:	df000115 	stw	fp,4(sp)
 40004bc:	df000104 	addi	fp,sp,4
 40004c0:	e13fff15 	stw	r4,-4(fp)
	cursor_flag = 0;
 40004c4:	d027ac15 	stw	zero,-24912(gp)
	plot_cursor(base);
 40004c8:	e13fff17 	ldw	r4,-4(fp)
 40004cc:	40003180 	call	4000318 <plot_cursor>
}
 40004d0:	0001883a 	nop
 40004d4:	e037883a 	mov	sp,fp
 40004d8:	dfc00117 	ldw	ra,4(sp)
 40004dc:	df000017 	ldw	fp,0(sp)
 40004e0:	dec00204 	addi	sp,sp,8
 40004e4:	f800283a 	ret

040004e8 <plot_line>:

void plot_line(alt_u16* base, int x, int y, int x2, int y2, int rgb) {
 40004e8:	defff404 	addi	sp,sp,-48
 40004ec:	dfc00b15 	stw	ra,44(sp)
 40004f0:	df000a15 	stw	fp,40(sp)
 40004f4:	df000a04 	addi	fp,sp,40
 40004f8:	e13ffc15 	stw	r4,-16(fp)
 40004fc:	e17ffd15 	stw	r5,-12(fp)
 4000500:	e1bffe15 	stw	r6,-8(fp)
 4000504:	e1ffff15 	stw	r7,-4(fp)
	int yLonger=0;
 4000508:	e03ff615 	stw	zero,-40(fp)
	int shortLen=y2-y;
 400050c:	e0c00217 	ldw	r3,8(fp)
 4000510:	e0bffe17 	ldw	r2,-8(fp)
 4000514:	1885c83a 	sub	r2,r3,r2
 4000518:	e0bff715 	stw	r2,-36(fp)
	int longLen=x2-x;
 400051c:	e0ffff17 	ldw	r3,-4(fp)
 4000520:	e0bffd17 	ldw	r2,-12(fp)
 4000524:	1885c83a 	sub	r2,r3,r2
 4000528:	e0bff815 	stw	r2,-32(fp)
	int j, swap;
	int decInc;

	if (abs(shortLen) > abs(longLen)) {
 400052c:	e0bff717 	ldw	r2,-36(fp)
 4000530:	1000010e 	bge	r2,zero,4000538 <plot_line+0x50>
 4000534:	0085c83a 	sub	r2,zero,r2
 4000538:	1007883a 	mov	r3,r2
 400053c:	e0bff817 	ldw	r2,-32(fp)
 4000540:	1000010e 	bge	r2,zero,4000548 <plot_line+0x60>
 4000544:	0085c83a 	sub	r2,zero,r2
 4000548:	10c0080e 	bge	r2,r3,400056c <plot_line+0x84>
		swap = shortLen;
 400054c:	e0bff717 	ldw	r2,-36(fp)
 4000550:	e0bffb15 	stw	r2,-20(fp)
		shortLen = longLen;
 4000554:	e0bff817 	ldw	r2,-32(fp)
 4000558:	e0bff715 	stw	r2,-36(fp)
		longLen = swap;
 400055c:	e0bffb17 	ldw	r2,-20(fp)
 4000560:	e0bff815 	stw	r2,-32(fp)
		yLonger = 1;
 4000564:	00800044 	movi	r2,1
 4000568:	e0bff615 	stw	r2,-40(fp)
	}
	if (longLen == 0)
 400056c:	e0bff817 	ldw	r2,-32(fp)
 4000570:	1000021e 	bne	r2,zero,400057c <plot_line+0x94>
		decInc = 0;
 4000574:	e03ffa15 	stw	zero,-24(fp)
 4000578:	00000606 	br	4000594 <plot_line+0xac>
	else
		decInc = (shortLen << 16) / longLen;
 400057c:	e0bff717 	ldw	r2,-36(fp)
 4000580:	1004943a 	slli	r2,r2,16
 4000584:	e17ff817 	ldw	r5,-32(fp)
 4000588:	1009883a 	mov	r4,r2
 400058c:	4001dc40 	call	4001dc4 <__divsi3>
 4000590:	e0bffa15 	stw	r2,-24(fp)

	if (yLonger) {
 4000594:	e0bff617 	ldw	r2,-40(fp)
 4000598:	10004026 	beq	r2,zero,400069c <plot_line+0x1b4>
		if (longLen>0) {
 400059c:	e0bff817 	ldw	r2,-32(fp)
 40005a0:	00801f0e 	bge	zero,r2,4000620 <plot_line+0x138>
			longLen += y;
 40005a4:	e0fff817 	ldw	r3,-32(fp)
 40005a8:	e0bffe17 	ldw	r2,-8(fp)
 40005ac:	1885883a 	add	r2,r3,r2
 40005b0:	e0bff815 	stw	r2,-32(fp)
			for (j=0x8000+(x<<16);y<=longLen;++y) {
 40005b4:	e0bffd17 	ldw	r2,-12(fp)
 40005b8:	1006943a 	slli	r3,r2,16
 40005bc:	00a00014 	movui	r2,32768
 40005c0:	1885883a 	add	r2,r3,r2
 40005c4:	e0bff915 	stw	r2,-28(fp)
 40005c8:	00001106 	br	4000610 <plot_line+0x128>
				put_pixel(base ,j >> 16, y, rgb);
 40005cc:	e0bff917 	ldw	r2,-28(fp)
 40005d0:	1005d43a 	srai	r2,r2,16
 40005d4:	1009883a 	mov	r4,r2
 40005d8:	e0bffe17 	ldw	r2,-8(fp)
 40005dc:	e0c00317 	ldw	r3,12(fp)
 40005e0:	180f883a 	mov	r7,r3
 40005e4:	100d883a 	mov	r6,r2
 40005e8:	200b883a 	mov	r5,r4
 40005ec:	e13ffc17 	ldw	r4,-16(fp)
 40005f0:	400024c0 	call	400024c <put_pixel>
				j += decInc;
 40005f4:	e0fff917 	ldw	r3,-28(fp)
 40005f8:	e0bffa17 	ldw	r2,-24(fp)
 40005fc:	1885883a 	add	r2,r3,r2
 4000600:	e0bff915 	stw	r2,-28(fp)
		decInc = (shortLen << 16) / longLen;

	if (yLonger) {
		if (longLen>0) {
			longLen += y;
			for (j=0x8000+(x<<16);y<=longLen;++y) {
 4000604:	e0bffe17 	ldw	r2,-8(fp)
 4000608:	10800044 	addi	r2,r2,1
 400060c:	e0bffe15 	stw	r2,-8(fp)
 4000610:	e0bffe17 	ldw	r2,-8(fp)
 4000614:	e0fff817 	ldw	r3,-32(fp)
 4000618:	18bfec0e 	bge	r3,r2,40005cc <__alt_heap_limit+0xfc0005cc>
				put_pixel(base ,j >> 16, y, rgb);
				j += decInc;
			}
			return;
 400061c:	00005e06 	br	4000798 <plot_line+0x2b0>
		}
		longLen += y;
 4000620:	e0fff817 	ldw	r3,-32(fp)
 4000624:	e0bffe17 	ldw	r2,-8(fp)
 4000628:	1885883a 	add	r2,r3,r2
 400062c:	e0bff815 	stw	r2,-32(fp)
		for (j=0x8000+(x<<16);y>=longLen;--y) {
 4000630:	e0bffd17 	ldw	r2,-12(fp)
 4000634:	1006943a 	slli	r3,r2,16
 4000638:	00a00014 	movui	r2,32768
 400063c:	1885883a 	add	r2,r3,r2
 4000640:	e0bff915 	stw	r2,-28(fp)
 4000644:	00001106 	br	400068c <plot_line+0x1a4>
			put_pixel(base, j >> 16, y, rgb);
 4000648:	e0bff917 	ldw	r2,-28(fp)
 400064c:	1005d43a 	srai	r2,r2,16
 4000650:	1009883a 	mov	r4,r2
 4000654:	e0bffe17 	ldw	r2,-8(fp)
 4000658:	e0c00317 	ldw	r3,12(fp)
 400065c:	180f883a 	mov	r7,r3
 4000660:	100d883a 	mov	r6,r2
 4000664:	200b883a 	mov	r5,r4
 4000668:	e13ffc17 	ldw	r4,-16(fp)
 400066c:	400024c0 	call	400024c <put_pixel>
			j -= decInc;
 4000670:	e0fff917 	ldw	r3,-28(fp)
 4000674:	e0bffa17 	ldw	r2,-24(fp)
 4000678:	1885c83a 	sub	r2,r3,r2
 400067c:	e0bff915 	stw	r2,-28(fp)
				j += decInc;
			}
			return;
		}
		longLen += y;
		for (j=0x8000+(x<<16);y>=longLen;--y) {
 4000680:	e0bffe17 	ldw	r2,-8(fp)
 4000684:	10bfffc4 	addi	r2,r2,-1
 4000688:	e0bffe15 	stw	r2,-8(fp)
 400068c:	e0fffe17 	ldw	r3,-8(fp)
 4000690:	e0bff817 	ldw	r2,-32(fp)
 4000694:	18bfec0e 	bge	r3,r2,4000648 <__alt_heap_limit+0xfc000648>
			put_pixel(base, j >> 16, y, rgb);
			j -= decInc;
		}
		return;
 4000698:	00003f06 	br	4000798 <plot_line+0x2b0>
	}

	if (longLen > 0) {
 400069c:	e0bff817 	ldw	r2,-32(fp)
 40006a0:	00801f0e 	bge	zero,r2,4000720 <plot_line+0x238>
		longLen += x;
 40006a4:	e0fff817 	ldw	r3,-32(fp)
 40006a8:	e0bffd17 	ldw	r2,-12(fp)
 40006ac:	1885883a 	add	r2,r3,r2
 40006b0:	e0bff815 	stw	r2,-32(fp)
		for (j=0x8000+(y<<16);x<=longLen;++x) {
 40006b4:	e0bffe17 	ldw	r2,-8(fp)
 40006b8:	1006943a 	slli	r3,r2,16
 40006bc:	00a00014 	movui	r2,32768
 40006c0:	1885883a 	add	r2,r3,r2
 40006c4:	e0bff915 	stw	r2,-28(fp)
 40006c8:	00001106 	br	4000710 <plot_line+0x228>
			put_pixel(base, x, j >> 16, rgb);
 40006cc:	e0fffd17 	ldw	r3,-12(fp)
 40006d0:	e0bff917 	ldw	r2,-28(fp)
 40006d4:	1005d43a 	srai	r2,r2,16
 40006d8:	1009883a 	mov	r4,r2
 40006dc:	e0800317 	ldw	r2,12(fp)
 40006e0:	100f883a 	mov	r7,r2
 40006e4:	200d883a 	mov	r6,r4
 40006e8:	180b883a 	mov	r5,r3
 40006ec:	e13ffc17 	ldw	r4,-16(fp)
 40006f0:	400024c0 	call	400024c <put_pixel>
			j += decInc;
 40006f4:	e0fff917 	ldw	r3,-28(fp)
 40006f8:	e0bffa17 	ldw	r2,-24(fp)
 40006fc:	1885883a 	add	r2,r3,r2
 4000700:	e0bff915 	stw	r2,-28(fp)
		return;
	}

	if (longLen > 0) {
		longLen += x;
		for (j=0x8000+(y<<16);x<=longLen;++x) {
 4000704:	e0bffd17 	ldw	r2,-12(fp)
 4000708:	10800044 	addi	r2,r2,1
 400070c:	e0bffd15 	stw	r2,-12(fp)
 4000710:	e0bffd17 	ldw	r2,-12(fp)
 4000714:	e0fff817 	ldw	r3,-32(fp)
 4000718:	18bfec0e 	bge	r3,r2,40006cc <__alt_heap_limit+0xfc0006cc>
			put_pixel(base, x, j >> 16, rgb);
			j += decInc;
		}
		return;
 400071c:	00001e06 	br	4000798 <plot_line+0x2b0>
	}
	longLen += x;
 4000720:	e0fff817 	ldw	r3,-32(fp)
 4000724:	e0bffd17 	ldw	r2,-12(fp)
 4000728:	1885883a 	add	r2,r3,r2
 400072c:	e0bff815 	stw	r2,-32(fp)
	for (j=0x8000+(y<<16);x>=longLen;--x) {
 4000730:	e0bffe17 	ldw	r2,-8(fp)
 4000734:	1006943a 	slli	r3,r2,16
 4000738:	00a00014 	movui	r2,32768
 400073c:	1885883a 	add	r2,r3,r2
 4000740:	e0bff915 	stw	r2,-28(fp)
 4000744:	00001106 	br	400078c <plot_line+0x2a4>
		put_pixel(base, x, j >> 16, rgb);
 4000748:	e0fffd17 	ldw	r3,-12(fp)
 400074c:	e0bff917 	ldw	r2,-28(fp)
 4000750:	1005d43a 	srai	r2,r2,16
 4000754:	1009883a 	mov	r4,r2
 4000758:	e0800317 	ldw	r2,12(fp)
 400075c:	100f883a 	mov	r7,r2
 4000760:	200d883a 	mov	r6,r4
 4000764:	180b883a 	mov	r5,r3
 4000768:	e13ffc17 	ldw	r4,-16(fp)
 400076c:	400024c0 	call	400024c <put_pixel>
		j -= decInc;
 4000770:	e0fff917 	ldw	r3,-28(fp)
 4000774:	e0bffa17 	ldw	r2,-24(fp)
 4000778:	1885c83a 	sub	r2,r3,r2
 400077c:	e0bff915 	stw	r2,-28(fp)
			j += decInc;
		}
		return;
	}
	longLen += x;
	for (j=0x8000+(y<<16);x>=longLen;--x) {
 4000780:	e0bffd17 	ldw	r2,-12(fp)
 4000784:	10bfffc4 	addi	r2,r2,-1
 4000788:	e0bffd15 	stw	r2,-12(fp)
 400078c:	e0fffd17 	ldw	r3,-12(fp)
 4000790:	e0bff817 	ldw	r2,-32(fp)
 4000794:	18bfec0e 	bge	r3,r2,4000748 <__alt_heap_limit+0xfc000748>
		put_pixel(base, x, j >> 16, rgb);
		j -= decInc;
	}
}
 4000798:	e037883a 	mov	sp,fp
 400079c:	dfc00117 	ldw	ra,4(sp)
 40007a0:	df000017 	ldw	fp,0(sp)
 40007a4:	dec00204 	addi	sp,sp,8
 40007a8:	f800283a 	ret

040007ac <clear>:

void clear(alt_u16* base) {
 40007ac:	defffc04 	addi	sp,sp,-16
 40007b0:	dfc00315 	stw	ra,12(sp)
 40007b4:	df000215 	stw	fp,8(sp)
 40007b8:	df000204 	addi	fp,sp,8
 40007bc:	e13fff15 	stw	r4,-4(fp)
	long i;
	for (i=0; i<(XRES*YRES); i++) {
 40007c0:	e03ffe15 	stw	zero,-8(fp)
 40007c4:	00000a06 	br	40007f0 <clear+0x44>
		IOWR_16DIRECT(base, i*2, 0);
 40007c8:	e0bffe17 	ldw	r2,-8(fp)
 40007cc:	1085883a 	add	r2,r2,r2
 40007d0:	1007883a 	mov	r3,r2
 40007d4:	e0bfff17 	ldw	r2,-4(fp)
 40007d8:	10c5883a 	add	r2,r2,r3
 40007dc:	0007883a 	mov	r3,zero
 40007e0:	10c0002d 	sthio	r3,0(r2)
	}
}

void clear(alt_u16* base) {
	long i;
	for (i=0; i<(XRES*YRES); i++) {
 40007e4:	e0bffe17 	ldw	r2,-8(fp)
 40007e8:	10800044 	addi	r2,r2,1
 40007ec:	e0bffe15 	stw	r2,-8(fp)
 40007f0:	e0fffe17 	ldw	r3,-8(fp)
 40007f4:	00800174 	movhi	r2,5
 40007f8:	10abffc4 	addi	r2,r2,-20481
 40007fc:	10fff20e 	bge	r2,r3,40007c8 <__alt_heap_limit+0xfc0007c8>
		IOWR_16DIRECT(base, i*2, 0);
	}
	ch_xpos = 0;
 4000800:	d027a915 	stw	zero,-24924(gp)
	ch_ypos = 0;
 4000804:	d027aa15 	stw	zero,-24920(gp)
	plot_cursor(base);
 4000808:	e13fff17 	ldw	r4,-4(fp)
 400080c:	40003180 	call	4000318 <plot_cursor>
}
 4000810:	0001883a 	nop
 4000814:	e037883a 	mov	sp,fp
 4000818:	dfc00117 	ldw	ra,4(sp)
 400081c:	df000017 	ldw	fp,0(sp)
 4000820:	dec00204 	addi	sp,sp,8
 4000824:	f800283a 	ret

04000828 <plot_char>:

void plot_char(alt_u16* base, int ch, int x, int y, int rgb) {
 4000828:	defff604 	addi	sp,sp,-40
 400082c:	dfc00915 	stw	ra,36(sp)
 4000830:	df000815 	stw	fp,32(sp)
 4000834:	df000804 	addi	fp,sp,32
 4000838:	e13ffc15 	stw	r4,-16(fp)
 400083c:	e17ffd15 	stw	r5,-12(fp)
 4000840:	e1bffe15 	stw	r6,-8(fp)
 4000844:	e1ffff15 	stw	r7,-4(fp)
	  IOWR(CHAR_BLIT_BASE, 0, 1);
	  while ((IORD(CHAR_BLIT_BASE, 0) & 0x2) != 0);
#else
	int xx, yy, rr, m;

	for (yy=0; yy<8; yy++) {
 4000848:	e03ff915 	stw	zero,-28(fp)
 400084c:	00002f06 	br	400090c <plot_char+0xe4>
		m = 1;
 4000850:	00800044 	movi	r2,1
 4000854:	e0bffb15 	stw	r2,-20(fp)
		for (xx=0; xx<8; xx++) {
 4000858:	e03ff815 	stw	zero,-32(fp)
 400085c:	00002506 	br	40008f4 <plot_char+0xcc>
			rr = 0x0;
 4000860:	e03ffa15 	stw	zero,-24(fp)
			if ((font[ch][yy] & m) > 0)
 4000864:	00810074 	movhi	r2,1025
 4000868:	10a5bf04 	addi	r2,r2,-26884
 400086c:	e0fffd17 	ldw	r3,-12(fp)
 4000870:	180690fa 	slli	r3,r3,3
 4000874:	10c7883a 	add	r3,r2,r3
 4000878:	e0bff917 	ldw	r2,-28(fp)
 400087c:	1885883a 	add	r2,r3,r2
 4000880:	10800003 	ldbu	r2,0(r2)
 4000884:	10c03fcc 	andi	r3,r2,255
 4000888:	18c0201c 	xori	r3,r3,128
 400088c:	18ffe004 	addi	r3,r3,-128
 4000890:	e0bffb17 	ldw	r2,-20(fp)
 4000894:	1884703a 	and	r2,r3,r2
 4000898:	0080020e 	bge	zero,r2,40008a4 <plot_char+0x7c>
				rr = rgb;
 400089c:	e0800217 	ldw	r2,8(fp)
 40008a0:	e0bffa15 	stw	r2,-24(fp)
			m = m << 1;
 40008a4:	e0bffb17 	ldw	r2,-20(fp)
 40008a8:	1085883a 	add	r2,r2,r2
 40008ac:	e0bffb15 	stw	r2,-20(fp)
			put_pixel(base, xx + x, yy + y, rr);
 40008b0:	e0fff817 	ldw	r3,-32(fp)
 40008b4:	e0bffe17 	ldw	r2,-8(fp)
 40008b8:	1885883a 	add	r2,r3,r2
 40008bc:	1009883a 	mov	r4,r2
 40008c0:	e0fff917 	ldw	r3,-28(fp)
 40008c4:	e0bfff17 	ldw	r2,-4(fp)
 40008c8:	1885883a 	add	r2,r3,r2
 40008cc:	1007883a 	mov	r3,r2
 40008d0:	e0bffa17 	ldw	r2,-24(fp)
 40008d4:	100f883a 	mov	r7,r2
 40008d8:	180d883a 	mov	r6,r3
 40008dc:	200b883a 	mov	r5,r4
 40008e0:	e13ffc17 	ldw	r4,-16(fp)
 40008e4:	400024c0 	call	400024c <put_pixel>
#else
	int xx, yy, rr, m;

	for (yy=0; yy<8; yy++) {
		m = 1;
		for (xx=0; xx<8; xx++) {
 40008e8:	e0bff817 	ldw	r2,-32(fp)
 40008ec:	10800044 	addi	r2,r2,1
 40008f0:	e0bff815 	stw	r2,-32(fp)
 40008f4:	e0bff817 	ldw	r2,-32(fp)
 40008f8:	10800210 	cmplti	r2,r2,8
 40008fc:	103fd81e 	bne	r2,zero,4000860 <__alt_heap_limit+0xfc000860>
	  IOWR(CHAR_BLIT_BASE, 0, 1);
	  while ((IORD(CHAR_BLIT_BASE, 0) & 0x2) != 0);
#else
	int xx, yy, rr, m;

	for (yy=0; yy<8; yy++) {
 4000900:	e0bff917 	ldw	r2,-28(fp)
 4000904:	10800044 	addi	r2,r2,1
 4000908:	e0bff915 	stw	r2,-28(fp)
 400090c:	e0bff917 	ldw	r2,-28(fp)
 4000910:	10800210 	cmplti	r2,r2,8
 4000914:	103fce1e 	bne	r2,zero,4000850 <__alt_heap_limit+0xfc000850>
			m = m << 1;
			put_pixel(base, xx + x, yy + y, rr);
		}
	}
#endif
}
 4000918:	0001883a 	nop
 400091c:	e037883a 	mov	sp,fp
 4000920:	dfc00117 	ldw	ra,4(sp)
 4000924:	df000017 	ldw	fp,0(sp)
 4000928:	dec00204 	addi	sp,sp,8
 400092c:	f800283a 	ret

04000930 <set_char>:

void set_char(alt_u16* base, int ch, int x, int y, int rgb) {	// 80x60
 4000930:	defff704 	addi	sp,sp,-36
 4000934:	dfc00815 	stw	ra,32(sp)
 4000938:	df000715 	stw	fp,28(sp)
 400093c:	df000704 	addi	fp,sp,28
 4000940:	e13ffc15 	stw	r4,-16(fp)
 4000944:	e17ffd15 	stw	r5,-12(fp)
 4000948:	e1bffe15 	stw	r6,-8(fp)
 400094c:	e1ffff15 	stw	r7,-4(fp)
	int xx, yy;
	xx = x;
 4000950:	e0bffe17 	ldw	r2,-8(fp)
 4000954:	e0bffa15 	stw	r2,-24(fp)
	yy = y;
 4000958:	e0bfff17 	ldw	r2,-4(fp)
 400095c:	e0bffb15 	stw	r2,-20(fp)
	if (x > ((XRES / 8) - 1))
 4000960:	e0bffe17 	ldw	r2,-8(fp)
 4000964:	10801410 	cmplti	r2,r2,80
 4000968:	1000021e 	bne	r2,zero,4000974 <set_char+0x44>
		xx = (XRES / 8) - 1;
 400096c:	008013c4 	movi	r2,79
 4000970:	e0bffa15 	stw	r2,-24(fp)
	if (y > ((YRES / 8) - 1))
 4000974:	e0bfff17 	ldw	r2,-4(fp)
 4000978:	10800f10 	cmplti	r2,r2,60
 400097c:	1000021e 	bne	r2,zero,4000988 <set_char+0x58>
		yy = (YRES / 8) - 1;
 4000980:	00800ec4 	movi	r2,59
 4000984:	e0bffb15 	stw	r2,-20(fp)
	plot_char(base, ch, xx*8, yy*8, rgb);
 4000988:	e0bffa17 	ldw	r2,-24(fp)
 400098c:	100690fa 	slli	r3,r2,3
 4000990:	e0bffb17 	ldw	r2,-20(fp)
 4000994:	100890fa 	slli	r4,r2,3
 4000998:	e0800217 	ldw	r2,8(fp)
 400099c:	d8800015 	stw	r2,0(sp)
 40009a0:	200f883a 	mov	r7,r4
 40009a4:	180d883a 	mov	r6,r3
 40009a8:	e17ffd17 	ldw	r5,-12(fp)
 40009ac:	e13ffc17 	ldw	r4,-16(fp)
 40009b0:	40008280 	call	4000828 <plot_char>
}
 40009b4:	0001883a 	nop
 40009b8:	e037883a 	mov	sp,fp
 40009bc:	dfc00117 	ldw	ra,4(sp)
 40009c0:	df000017 	ldw	fp,0(sp)
 40009c4:	dec00204 	addi	sp,sp,8
 40009c8:	f800283a 	ret

040009cc <print_pos>:

void print_pos(alt_u16* base, int x, int y) {
 40009cc:	defff904 	addi	sp,sp,-28
 40009d0:	dfc00615 	stw	ra,24(sp)
 40009d4:	df000515 	stw	fp,20(sp)
 40009d8:	df000504 	addi	fp,sp,20
 40009dc:	e13ffd15 	stw	r4,-12(fp)
 40009e0:	e17ffe15 	stw	r5,-8(fp)
 40009e4:	e1bfff15 	stw	r6,-4(fp)
	int xx, yy;
	xx = x;
 40009e8:	e0bffe17 	ldw	r2,-8(fp)
 40009ec:	e0bffb15 	stw	r2,-20(fp)
	yy = y;
 40009f0:	e0bfff17 	ldw	r2,-4(fp)
 40009f4:	e0bffc15 	stw	r2,-16(fp)
	if (x > ((XRES / 8) - 1))
 40009f8:	e0bffe17 	ldw	r2,-8(fp)
 40009fc:	10801410 	cmplti	r2,r2,80
 4000a00:	1000021e 	bne	r2,zero,4000a0c <print_pos+0x40>
		xx = (XRES / 8) - 1;
 4000a04:	008013c4 	movi	r2,79
 4000a08:	e0bffb15 	stw	r2,-20(fp)
	if (y > ((YRES / 8) - 1))
 4000a0c:	e0bfff17 	ldw	r2,-4(fp)
 4000a10:	10800f10 	cmplti	r2,r2,60
 4000a14:	1000021e 	bne	r2,zero,4000a20 <print_pos+0x54>
		yy = (YRES / 8) - 1;
 4000a18:	00800ec4 	movi	r2,59
 4000a1c:	e0bffc15 	stw	r2,-16(fp)
	ch_xpos = xx;
 4000a20:	e0bffb17 	ldw	r2,-20(fp)
 4000a24:	d0a7a915 	stw	r2,-24924(gp)
	ch_ypos = yy;
 4000a28:	e0bffc17 	ldw	r2,-16(fp)
 4000a2c:	d0a7aa15 	stw	r2,-24920(gp)
	plot_cursor(base);
 4000a30:	e13ffd17 	ldw	r4,-12(fp)
 4000a34:	40003180 	call	4000318 <plot_cursor>
}
 4000a38:	0001883a 	nop
 4000a3c:	e037883a 	mov	sp,fp
 4000a40:	dfc00117 	ldw	ra,4(sp)
 4000a44:	df000017 	ldw	fp,0(sp)
 4000a48:	dec00204 	addi	sp,sp,8
 4000a4c:	f800283a 	ret

04000a50 <scroll_up>:

void scroll_up(alt_u16* base) {
 4000a50:	defffb04 	addi	sp,sp,-20
 4000a54:	dfc00415 	stw	ra,16(sp)
 4000a58:	df000315 	stw	fp,12(sp)
 4000a5c:	df000304 	addi	fp,sp,12
 4000a60:	e13fff15 	stw	r4,-4(fp)
				p = get_pixel(base, x, y);
				put_pixel(base, x, y-8, p);
			}
		}
	#else
	  while ((IORD_32DIRECT(DMA_BASE, 0) & 0x2) != 0x0); // wait busy
 4000a64:	0001883a 	nop
 4000a68:	00a41014 	movui	r2,36928
 4000a6c:	10800037 	ldwio	r2,0(r2)
 4000a70:	1080008c 	andi	r2,r2,2
 4000a74:	103ffc1e 	bne	r2,zero,4000a68 <__alt_heap_limit+0xfc000a68>
	  //IOWR(DMA_BASE, 1, 1); // reset
	  IOWR_32DIRECT(DMA_BASE, 2, (alt_u32)base + ((XRES * 8) * 2));
 4000a78:	e0bfff17 	ldw	r2,-4(fp)
 4000a7c:	108a0004 	addi	r2,r2,10240
 4000a80:	1007883a 	mov	r3,r2
 4000a84:	00a41094 	movui	r2,36930
 4000a88:	10c00035 	stwio	r3,0(r2)
	  IOWR_32DIRECT(DMA_BASE, 3, (alt_u32)base);
 4000a8c:	e0ffff17 	ldw	r3,-4(fp)
 4000a90:	00a410d4 	movui	r2,36931
 4000a94:	10c00035 	stwio	r3,0(r2)
	  IOWR_32DIRECT(DMA_BASE, 4, (YRES - 8) * XRES);
 4000a98:	00800174 	movhi	r2,5
 4000a9c:	10a70004 	addi	r2,r2,-25600
 4000aa0:	00e41114 	movui	r3,36932
 4000aa4:	18800035 	stwio	r2,0(r3)
	  IOWR_32DIRECT(DMA_BASE, 0, 1); // go
 4000aa8:	00c00044 	movi	r3,1
 4000aac:	00a41014 	movui	r2,36928
 4000ab0:	10c00035 	stwio	r3,0(r2)
	  while ((IORD_32DIRECT(DMA_BASE, 0) & 0x2) != 0x0); // wait busy
 4000ab4:	0001883a 	nop
 4000ab8:	00a41014 	movui	r2,36928
 4000abc:	10800037 	ldwio	r2,0(r2)
 4000ac0:	1080008c 	andi	r2,r2,2
 4000ac4:	103ffc1e 	bne	r2,zero,4000ab8 <__alt_heap_limit+0xfc000ab8>
	#endif
	for (y=YRES-8; y<YRES; y++)
 4000ac8:	00807604 	movi	r2,472
 4000acc:	e0bffe15 	stw	r2,-8(fp)
 4000ad0:	00001206 	br	4000b1c <scroll_up+0xcc>
		for (x=0; x<XRES; x++)
 4000ad4:	e03ffd15 	stw	zero,-12(fp)
 4000ad8:	00000a06 	br	4000b04 <scroll_up+0xb4>
			//IOWR_16DIRECT(base, (x + (XRES * y)) * 2, _BLACK);
			put_pixel(base, x, y, _BLACK);
 4000adc:	e0bffd17 	ldw	r2,-12(fp)
 4000ae0:	e0fffe17 	ldw	r3,-8(fp)
 4000ae4:	000f883a 	mov	r7,zero
 4000ae8:	180d883a 	mov	r6,r3
 4000aec:	100b883a 	mov	r5,r2
 4000af0:	e13fff17 	ldw	r4,-4(fp)
 4000af4:	400024c0 	call	400024c <put_pixel>
	  IOWR_32DIRECT(DMA_BASE, 4, (YRES - 8) * XRES);
	  IOWR_32DIRECT(DMA_BASE, 0, 1); // go
	  while ((IORD_32DIRECT(DMA_BASE, 0) & 0x2) != 0x0); // wait busy
	#endif
	for (y=YRES-8; y<YRES; y++)
		for (x=0; x<XRES; x++)
 4000af8:	e0bffd17 	ldw	r2,-12(fp)
 4000afc:	10800044 	addi	r2,r2,1
 4000b00:	e0bffd15 	stw	r2,-12(fp)
 4000b04:	e0bffd17 	ldw	r2,-12(fp)
 4000b08:	1080a010 	cmplti	r2,r2,640
 4000b0c:	103ff31e 	bne	r2,zero,4000adc <__alt_heap_limit+0xfc000adc>
	  IOWR_32DIRECT(DMA_BASE, 3, (alt_u32)base);
	  IOWR_32DIRECT(DMA_BASE, 4, (YRES - 8) * XRES);
	  IOWR_32DIRECT(DMA_BASE, 0, 1); // go
	  while ((IORD_32DIRECT(DMA_BASE, 0) & 0x2) != 0x0); // wait busy
	#endif
	for (y=YRES-8; y<YRES; y++)
 4000b10:	e0bffe17 	ldw	r2,-8(fp)
 4000b14:	10800044 	addi	r2,r2,1
 4000b18:	e0bffe15 	stw	r2,-8(fp)
 4000b1c:	e0bffe17 	ldw	r2,-8(fp)
 4000b20:	10807810 	cmplti	r2,r2,480
 4000b24:	103feb1e 	bne	r2,zero,4000ad4 <__alt_heap_limit+0xfc000ad4>
		for (x=0; x<XRES; x++)
			//IOWR_16DIRECT(base, (x + (XRES * y)) * 2, _BLACK);
			put_pixel(base, x, y, _BLACK);
}
 4000b28:	0001883a 	nop
 4000b2c:	e037883a 	mov	sp,fp
 4000b30:	dfc00117 	ldw	ra,4(sp)
 4000b34:	df000017 	ldw	fp,0(sp)
 4000b38:	dec00204 	addi	sp,sp,8
 4000b3c:	f800283a 	ret

04000b40 <print_char>:

void print_char(alt_u16* base, int ch, int rgb) {
 4000b40:	defffa04 	addi	sp,sp,-24
 4000b44:	dfc00515 	stw	ra,20(sp)
 4000b48:	df000415 	stw	fp,16(sp)
 4000b4c:	df000404 	addi	fp,sp,16
 4000b50:	e13ffd15 	stw	r4,-12(fp)
 4000b54:	e17ffe15 	stw	r5,-8(fp)
 4000b58:	e1bfff15 	stw	r6,-4(fp)
	set_char(base, ch, ch_xpos, ch_ypos, rgb);
 4000b5c:	d0a7a917 	ldw	r2,-24924(gp)
 4000b60:	1007883a 	mov	r3,r2
 4000b64:	d0a7aa17 	ldw	r2,-24920(gp)
 4000b68:	1009883a 	mov	r4,r2
 4000b6c:	e0bfff17 	ldw	r2,-4(fp)
 4000b70:	d8800015 	stw	r2,0(sp)
 4000b74:	200f883a 	mov	r7,r4
 4000b78:	180d883a 	mov	r6,r3
 4000b7c:	e17ffe17 	ldw	r5,-8(fp)
 4000b80:	e13ffd17 	ldw	r4,-12(fp)
 4000b84:	40009300 	call	4000930 <set_char>
	if (ch_xpos >= (XRES / 8) - 1) {
 4000b88:	d0a7a917 	ldw	r2,-24924(gp)
 4000b8c:	108013f0 	cmpltui	r2,r2,79
 4000b90:	10000b1e 	bne	r2,zero,4000bc0 <print_char+0x80>
		ch_xpos = 0;
 4000b94:	d027a915 	stw	zero,-24924(gp)
		if (ch_ypos >= ((YRES / 8) - 1)) {
 4000b98:	d0a7aa17 	ldw	r2,-24920(gp)
 4000b9c:	10800ef0 	cmpltui	r2,r2,59
 4000ba0:	1000031e 	bne	r2,zero,4000bb0 <print_char+0x70>
			scroll_up(base);
 4000ba4:	e13ffd17 	ldw	r4,-12(fp)
 4000ba8:	4000a500 	call	4000a50 <scroll_up>
 4000bac:	00000706 	br	4000bcc <print_char+0x8c>
		}
		else
			ch_ypos++;
 4000bb0:	d0a7aa17 	ldw	r2,-24920(gp)
 4000bb4:	10800044 	addi	r2,r2,1
 4000bb8:	d0a7aa15 	stw	r2,-24920(gp)
 4000bbc:	00000306 	br	4000bcc <print_char+0x8c>
	}
	else
		ch_xpos++;
 4000bc0:	d0a7a917 	ldw	r2,-24924(gp)
 4000bc4:	10800044 	addi	r2,r2,1
 4000bc8:	d0a7a915 	stw	r2,-24924(gp)
	plot_cursor(base);
 4000bcc:	e13ffd17 	ldw	r4,-12(fp)
 4000bd0:	40003180 	call	4000318 <plot_cursor>
}
 4000bd4:	0001883a 	nop
 4000bd8:	e037883a 	mov	sp,fp
 4000bdc:	dfc00117 	ldw	ra,4(sp)
 4000be0:	df000017 	ldw	fp,0(sp)
 4000be4:	dec00204 	addi	sp,sp,8
 4000be8:	f800283a 	ret

04000bec <print_string>:

void print_string(alt_u16* base, char *ch, int rgb) {
 4000bec:	defffa04 	addi	sp,sp,-24
 4000bf0:	dfc00515 	stw	ra,20(sp)
 4000bf4:	df000415 	stw	fp,16(sp)
 4000bf8:	df000404 	addi	fp,sp,16
 4000bfc:	e13ffd15 	stw	r4,-12(fp)
 4000c00:	e17ffe15 	stw	r5,-8(fp)
 4000c04:	e1bfff15 	stw	r6,-4(fp)
	int i;

	i = 0;
 4000c08:	e03ffc15 	stw	zero,-16(fp)
	while (*(ch+i) != 0) {
 4000c0c:	00000e06 	br	4000c48 <print_string+0x5c>
		print_char(base, *(ch + i), rgb);
 4000c10:	e0bffc17 	ldw	r2,-16(fp)
 4000c14:	e0fffe17 	ldw	r3,-8(fp)
 4000c18:	1885883a 	add	r2,r3,r2
 4000c1c:	10800003 	ldbu	r2,0(r2)
 4000c20:	10803fcc 	andi	r2,r2,255
 4000c24:	1080201c 	xori	r2,r2,128
 4000c28:	10bfe004 	addi	r2,r2,-128
 4000c2c:	e1bfff17 	ldw	r6,-4(fp)
 4000c30:	100b883a 	mov	r5,r2
 4000c34:	e13ffd17 	ldw	r4,-12(fp)
 4000c38:	4000b400 	call	4000b40 <print_char>
		i++;
 4000c3c:	e0bffc17 	ldw	r2,-16(fp)
 4000c40:	10800044 	addi	r2,r2,1
 4000c44:	e0bffc15 	stw	r2,-16(fp)

void print_string(alt_u16* base, char *ch, int rgb) {
	int i;

	i = 0;
	while (*(ch+i) != 0) {
 4000c48:	e0bffc17 	ldw	r2,-16(fp)
 4000c4c:	e0fffe17 	ldw	r3,-8(fp)
 4000c50:	1885883a 	add	r2,r3,r2
 4000c54:	10800003 	ldbu	r2,0(r2)
 4000c58:	10803fcc 	andi	r2,r2,255
 4000c5c:	1080201c 	xori	r2,r2,128
 4000c60:	10bfe004 	addi	r2,r2,-128
 4000c64:	103fea1e 	bne	r2,zero,4000c10 <__alt_heap_limit+0xfc000c10>
		print_char(base, *(ch + i), rgb);
		i++;
	}
}
 4000c68:	0001883a 	nop
 4000c6c:	e037883a 	mov	sp,fp
 4000c70:	dfc00117 	ldw	ra,4(sp)
 4000c74:	df000017 	ldw	fp,0(sp)
 4000c78:	dec00204 	addi	sp,sp,8
 4000c7c:	f800283a 	ret

04000c80 <print_dec>:

void print_dec(alt_u16* base, alt_64 x, int rgb) {
 4000c80:	defff004 	addi	sp,sp,-64
 4000c84:	dfc00f15 	stw	ra,60(sp)
 4000c88:	df000e15 	stw	fp,56(sp)
 4000c8c:	dc000d15 	stw	r16,52(sp)
 4000c90:	df000e04 	addi	fp,sp,56
 4000c94:	e13ffb15 	stw	r4,-20(fp)
 4000c98:	e17ffc15 	stw	r5,-16(fp)
 4000c9c:	e1bffd15 	stw	r6,-12(fp)
 4000ca0:	e1fffe15 	stw	r7,-8(fp)
	alt_u64 t;
	int i, j;
	char r[20];

	i = 0;
 4000ca4:	e03ff415 	stw	zero,-48(fp)
	j = 0;
 4000ca8:	e03ff515 	stw	zero,-44(fp)
	if (x == 0)
 4000cac:	e0bffc17 	ldw	r2,-16(fp)
 4000cb0:	e0fffd17 	ldw	r3,-12(fp)
 4000cb4:	10c4b03a 	or	r2,r2,r3
 4000cb8:	1000051e 	bne	r2,zero,4000cd0 <print_dec+0x50>
		print_char(base, '0', rgb);
 4000cbc:	e1bffe17 	ldw	r6,-8(fp)
 4000cc0:	01400c04 	movi	r5,48
 4000cc4:	e13ffb17 	ldw	r4,-20(fp)
 4000cc8:	4000b400 	call	4000b40 <print_char>
			if (r[i-1] == ',')
				i=i-1;
			for (j=i-1; j>=0; j--)
				print_char(base, (char)r[j], rgb);
		}
}
 4000ccc:	00006b06 	br	4000e7c <print_dec+0x1fc>
	i = 0;
	j = 0;
	if (x == 0)
		print_char(base, '0', rgb);
	else
		if (x < 0) {
 4000cd0:	e0bffd17 	ldw	r2,-12(fp)
 4000cd4:	1000120e 	bge	r2,zero,4000d20 <print_dec+0xa0>
			print_char(base, '-', rgb);
 4000cd8:	e1bffe17 	ldw	r6,-8(fp)
 4000cdc:	01400b44 	movi	r5,45
 4000ce0:	e13ffb17 	ldw	r4,-20(fp)
 4000ce4:	4000b400 	call	4000b40 <print_char>
			t = -x;
 4000ce8:	000d883a 	mov	r6,zero
 4000cec:	000f883a 	mov	r7,zero
 4000cf0:	e13ffc17 	ldw	r4,-16(fp)
 4000cf4:	e17ffd17 	ldw	r5,-12(fp)
 4000cf8:	3105c83a 	sub	r2,r6,r4
 4000cfc:	3091803a 	cmpltu	r8,r6,r2
 4000d00:	3947c83a 	sub	r3,r7,r5
 4000d04:	1a09c83a 	sub	r4,r3,r8
 4000d08:	2007883a 	mov	r3,r4
 4000d0c:	1009883a 	mov	r4,r2
 4000d10:	180b883a 	mov	r5,r3
 4000d14:	e13ff215 	stw	r4,-56(fp)
 4000d18:	e17ff315 	stw	r5,-52(fp)
			if (r[i-1] == ',')
				i=i-1;
			for (j=i-1; j>=0; j--)
				print_char(base, (char)r[j], rgb);
		}
}
 4000d1c:	00005706 	br	4000e7c <print_dec+0x1fc>
		if (x < 0) {
			print_char(base, '-', rgb);
			t = -x;
		}
		else {
			t = x;
 4000d20:	e0bffc17 	ldw	r2,-16(fp)
 4000d24:	e0bff215 	stw	r2,-56(fp)
 4000d28:	e0bffd17 	ldw	r2,-12(fp)
 4000d2c:	e0bff315 	stw	r2,-52(fp)
			while (t > 0) {
 4000d30:	00002d06 	br	4000de8 <print_dec+0x168>
				j++;
 4000d34:	e0bff517 	ldw	r2,-44(fp)
 4000d38:	10800044 	addi	r2,r2,1
 4000d3c:	e0bff515 	stw	r2,-44(fp)
				r[i++] = 0x30 + (t % 10);
 4000d40:	e43ff417 	ldw	r16,-48(fp)
 4000d44:	80800044 	addi	r2,r16,1
 4000d48:	e0bff415 	stw	r2,-48(fp)
 4000d4c:	e0bff217 	ldw	r2,-56(fp)
 4000d50:	e0fff317 	ldw	r3,-52(fp)
 4000d54:	01800284 	movi	r6,10
 4000d58:	000f883a 	mov	r7,zero
 4000d5c:	1009883a 	mov	r4,r2
 4000d60:	180b883a 	mov	r5,r3
 4000d64:	40018000 	call	4001800 <__umoddi3>
 4000d68:	1009883a 	mov	r4,r2
 4000d6c:	180b883a 	mov	r5,r3
 4000d70:	2005883a 	mov	r2,r4
 4000d74:	2807883a 	mov	r3,r5
 4000d78:	10800c04 	addi	r2,r2,48
 4000d7c:	1007883a 	mov	r3,r2
 4000d80:	e0bff604 	addi	r2,fp,-40
 4000d84:	1405883a 	add	r2,r2,r16
 4000d88:	10c00005 	stb	r3,0(r2)
				t = t / 10;
 4000d8c:	e0bff217 	ldw	r2,-56(fp)
 4000d90:	e0fff317 	ldw	r3,-52(fp)
 4000d94:	01800284 	movi	r6,10
 4000d98:	000f883a 	mov	r7,zero
 4000d9c:	1009883a 	mov	r4,r2
 4000da0:	180b883a 	mov	r5,r3
 4000da4:	40012040 	call	4001204 <__udivdi3>
 4000da8:	1009883a 	mov	r4,r2
 4000dac:	180b883a 	mov	r5,r3
 4000db0:	e13ff215 	stw	r4,-56(fp)
 4000db4:	e17ff315 	stw	r5,-52(fp)
				if ((j % 3) == 0)
 4000db8:	e0bff517 	ldw	r2,-44(fp)
 4000dbc:	014000c4 	movi	r5,3
 4000dc0:	1009883a 	mov	r4,r2
 4000dc4:	4001e480 	call	4001e48 <__modsi3>
 4000dc8:	1000071e 	bne	r2,zero,4000de8 <print_dec+0x168>
					r[i++] = ',';
 4000dcc:	e0bff417 	ldw	r2,-48(fp)
 4000dd0:	10c00044 	addi	r3,r2,1
 4000dd4:	e0fff415 	stw	r3,-48(fp)
 4000dd8:	e0fff604 	addi	r3,fp,-40
 4000ddc:	1885883a 	add	r2,r3,r2
 4000de0:	00c00b04 	movi	r3,44
 4000de4:	10c00005 	stb	r3,0(r2)
			print_char(base, '-', rgb);
			t = -x;
		}
		else {
			t = x;
			while (t > 0) {
 4000de8:	e0bff217 	ldw	r2,-56(fp)
 4000dec:	e0fff317 	ldw	r3,-52(fp)
 4000df0:	10c4b03a 	or	r2,r2,r3
 4000df4:	103fcf1e 	bne	r2,zero,4000d34 <__alt_heap_limit+0xfc000d34>
				r[i++] = 0x30 + (t % 10);
				t = t / 10;
				if ((j % 3) == 0)
					r[i++] = ',';
			}
			if (r[i-1] == ',')
 4000df8:	e0bff417 	ldw	r2,-48(fp)
 4000dfc:	10bfffc4 	addi	r2,r2,-1
 4000e00:	e0fff604 	addi	r3,fp,-40
 4000e04:	1885883a 	add	r2,r3,r2
 4000e08:	10800003 	ldbu	r2,0(r2)
 4000e0c:	10803fcc 	andi	r2,r2,255
 4000e10:	1080201c 	xori	r2,r2,128
 4000e14:	10bfe004 	addi	r2,r2,-128
 4000e18:	10800b18 	cmpnei	r2,r2,44
 4000e1c:	1000031e 	bne	r2,zero,4000e2c <print_dec+0x1ac>
				i=i-1;
 4000e20:	e0bff417 	ldw	r2,-48(fp)
 4000e24:	10bfffc4 	addi	r2,r2,-1
 4000e28:	e0bff415 	stw	r2,-48(fp)
			for (j=i-1; j>=0; j--)
 4000e2c:	e0bff417 	ldw	r2,-48(fp)
 4000e30:	10bfffc4 	addi	r2,r2,-1
 4000e34:	e0bff515 	stw	r2,-44(fp)
 4000e38:	00000e06 	br	4000e74 <print_dec+0x1f4>
				print_char(base, (char)r[j], rgb);
 4000e3c:	e0fff604 	addi	r3,fp,-40
 4000e40:	e0bff517 	ldw	r2,-44(fp)
 4000e44:	1885883a 	add	r2,r3,r2
 4000e48:	10800003 	ldbu	r2,0(r2)
 4000e4c:	10803fcc 	andi	r2,r2,255
 4000e50:	1080201c 	xori	r2,r2,128
 4000e54:	10bfe004 	addi	r2,r2,-128
 4000e58:	e1bffe17 	ldw	r6,-8(fp)
 4000e5c:	100b883a 	mov	r5,r2
 4000e60:	e13ffb17 	ldw	r4,-20(fp)
 4000e64:	4000b400 	call	4000b40 <print_char>
				if ((j % 3) == 0)
					r[i++] = ',';
			}
			if (r[i-1] == ',')
				i=i-1;
			for (j=i-1; j>=0; j--)
 4000e68:	e0bff517 	ldw	r2,-44(fp)
 4000e6c:	10bfffc4 	addi	r2,r2,-1
 4000e70:	e0bff515 	stw	r2,-44(fp)
 4000e74:	e0bff517 	ldw	r2,-44(fp)
 4000e78:	103ff00e 	bge	r2,zero,4000e3c <__alt_heap_limit+0xfc000e3c>
				print_char(base, (char)r[j], rgb);
		}
}
 4000e7c:	0001883a 	nop
 4000e80:	e6ffff04 	addi	sp,fp,-4
 4000e84:	dfc00217 	ldw	ra,8(sp)
 4000e88:	df000117 	ldw	fp,4(sp)
 4000e8c:	dc000017 	ldw	r16,0(sp)
 4000e90:	dec00304 	addi	sp,sp,12
 4000e94:	f800283a 	ret

04000e98 <crlf>:

void crlf(alt_u16* base) {
 4000e98:	defffd04 	addi	sp,sp,-12
 4000e9c:	dfc00215 	stw	ra,8(sp)
 4000ea0:	df000115 	stw	fp,4(sp)
 4000ea4:	df000104 	addi	fp,sp,4
 4000ea8:	e13fff15 	stw	r4,-4(fp)
	remove_cursor(base);
 4000eac:	e13fff17 	ldw	r4,-4(fp)
 4000eb0:	40003d40 	call	40003d4 <remove_cursor>
	ch_xpos = 0;
 4000eb4:	d027a915 	stw	zero,-24924(gp)
	if (ch_ypos >= ((YRES / 8) - 1)) {
 4000eb8:	d0a7aa17 	ldw	r2,-24920(gp)
 4000ebc:	10800ef0 	cmpltui	r2,r2,59
 4000ec0:	1000031e 	bne	r2,zero,4000ed0 <crlf+0x38>
		scroll_up(base);
 4000ec4:	e13fff17 	ldw	r4,-4(fp)
 4000ec8:	4000a500 	call	4000a50 <scroll_up>
 4000ecc:	00000306 	br	4000edc <crlf+0x44>
	}
	else
		ch_ypos++;
 4000ed0:	d0a7aa17 	ldw	r2,-24920(gp)
 4000ed4:	10800044 	addi	r2,r2,1
 4000ed8:	d0a7aa15 	stw	r2,-24920(gp)
	plot_cursor(base);
 4000edc:	e13fff17 	ldw	r4,-4(fp)
 4000ee0:	40003180 	call	4000318 <plot_cursor>
}
 4000ee4:	0001883a 	nop
 4000ee8:	e037883a 	mov	sp,fp
 4000eec:	dfc00117 	ldw	ra,4(sp)
 4000ef0:	df000017 	ldw	fp,0(sp)
 4000ef4:	dec00204 	addi	sp,sp,8
 4000ef8:	f800283a 	ret

04000efc <bringup_vga>:

void bringup_vga(alt_u16* base) {
 4000efc:	defffe04 	addi	sp,sp,-8
 4000f00:	df000115 	stw	fp,4(sp)
 4000f04:	df000104 	addi	fp,sp,4
 4000f08:	e13fff15 	stw	r4,-4(fp)
	  IOWR_32DIRECT(DMA_BASE, 0, 0);
 4000f0c:	0007883a 	mov	r3,zero
 4000f10:	00a41014 	movui	r2,36928
 4000f14:	10c00035 	stwio	r3,0(r2)
	  while ((IORD_32DIRECT(DMA_BASE, 0) & 0x2) != 0);
 4000f18:	0001883a 	nop
 4000f1c:	00a41014 	movui	r2,36928
 4000f20:	10800037 	ldwio	r2,0(r2)
 4000f24:	1080008c 	andi	r2,r2,2
 4000f28:	103ffc1e 	bne	r2,zero,4000f1c <__alt_heap_limit+0xfc000f1c>
	  IOWR_32DIRECT(DMA_BASE, 1, 1);
 4000f2c:	00c00044 	movi	r3,1
 4000f30:	00a41054 	movui	r2,36929
 4000f34:	10c00035 	stwio	r3,0(r2)

	  IOWR_32DIRECT(FRAME_READER_BASE, 0, 0);
 4000f38:	0007883a 	mov	r3,zero
 4000f3c:	00a43014 	movui	r2,37056
 4000f40:	10c00035 	stwio	r3,0(r2)
	  while ((IORD_32DIRECT(FRAME_READER_BASE, 0) & 0x2) != 0);
 4000f44:	0001883a 	nop
 4000f48:	00a43014 	movui	r2,37056
 4000f4c:	10800037 	ldwio	r2,0(r2)
 4000f50:	1080008c 	andi	r2,r2,2
 4000f54:	103ffc1e 	bne	r2,zero,4000f48 <__alt_heap_limit+0xfc000f48>
	  IOWR_32DIRECT(FRAME_READER_BASE, 1, 1);
 4000f58:	00c00044 	movi	r3,1
 4000f5c:	00a43054 	movui	r2,37057
 4000f60:	10c00035 	stwio	r3,0(r2)
	  IOWR_32DIRECT(FRAME_READER_BASE, 2, (alt_u32)base);
 4000f64:	e0ffff17 	ldw	r3,-4(fp)
 4000f68:	00a43094 	movui	r2,37058
 4000f6c:	10c00035 	stwio	r3,0(r2)

	  IOWR_32DIRECT(VGA_OUT_BASE, 0, 0);
 4000f70:	0007883a 	mov	r3,zero
 4000f74:	00a42014 	movui	r2,36992
 4000f78:	10c00035 	stwio	r3,0(r2)
	  while ((IORD_32DIRECT(VGA_OUT_BASE, 0) & 0x6) != 0);
 4000f7c:	0001883a 	nop
 4000f80:	00a42014 	movui	r2,36992
 4000f84:	10800037 	ldwio	r2,0(r2)
 4000f88:	1080018c 	andi	r2,r2,6
 4000f8c:	103ffc1e 	bne	r2,zero,4000f80 <__alt_heap_limit+0xfc000f80>
	  IOWR_32DIRECT(VGA_OUT_BASE, 1, 1);
 4000f90:	00c00044 	movi	r3,1
 4000f94:	00a42054 	movui	r2,36993
 4000f98:	10c00035 	stwio	r3,0(r2)

	  IOWR_32DIRECT(FRAME_READER_BASE, 0, 1);
 4000f9c:	00c00044 	movi	r3,1
 4000fa0:	00a43014 	movui	r2,37056
 4000fa4:	10c00035 	stwio	r3,0(r2)
	  IOWR_32DIRECT(VGA_OUT_BASE, 0, 1);
 4000fa8:	00c00044 	movi	r3,1
 4000fac:	00a42014 	movui	r2,36992
 4000fb0:	10c00035 	stwio	r3,0(r2)
}
 4000fb4:	0001883a 	nop
 4000fb8:	e037883a 	mov	sp,fp
 4000fbc:	df000017 	ldw	fp,0(sp)
 4000fc0:	dec00104 	addi	sp,sp,4
 4000fc4:	f800283a 	ret

04000fc8 <get_rand>:
alt_u16 *frame1_base, *frame2_base;

#include "vga_helper.h"


int get_rand(int x) {
 4000fc8:	defffd04 	addi	sp,sp,-12
 4000fcc:	dfc00215 	stw	ra,8(sp)
 4000fd0:	df000115 	stw	fp,4(sp)
 4000fd4:	df000104 	addi	fp,sp,4
 4000fd8:	e13fff15 	stw	r4,-4(fp)
	return (x * (rand() & 0xffff)) >> 16;
 4000fdc:	40028c00 	call	40028c0 <rand>
 4000fe0:	10bfffcc 	andi	r2,r2,65535
 4000fe4:	e17fff17 	ldw	r5,-4(fp)
 4000fe8:	1009883a 	mov	r4,r2
 4000fec:	4001f780 	call	4001f78 <__mulsi3>
 4000ff0:	1005d43a 	srai	r2,r2,16
}
 4000ff4:	e037883a 	mov	sp,fp
 4000ff8:	dfc00117 	ldw	ra,4(sp)
 4000ffc:	df000017 	ldw	fp,0(sp)
 4001000:	dec00204 	addi	sp,sp,8
 4001004:	f800283a 	ret

04001008 <main>:

int main()
{
 4001008:	defff304 	addi	sp,sp,-52
 400100c:	dfc00c15 	stw	ra,48(sp)
 4001010:	df000b15 	stw	fp,44(sp)
 4001014:	dd400a15 	stw	r21,40(sp)
 4001018:	dd000915 	stw	r20,36(sp)
 400101c:	dcc00815 	stw	r19,32(sp)
 4001020:	dc800715 	stw	r18,28(sp)
 4001024:	dc400615 	stw	r17,24(sp)
 4001028:	dc000515 	stw	r16,20(sp)
 400102c:	df000b04 	addi	fp,sp,44
  int x, y;
  alt_u16* frame_base;
  printf("Hello from Nios II!\n");
 4001030:	01010074 	movhi	r4,1025
 4001034:	21256704 	addi	r4,r4,-27236
 4001038:	40028940 	call	4002894 <puts>

  frame1_base = (alt_u16 *)malloc((XRES * YRES * 2) + 0x4);
 400103c:	01000274 	movhi	r4,9
 4001040:	21180104 	addi	r4,r4,24580
 4001044:	4001fa00 	call	4001fa0 <malloc>
 4001048:	d0a7ab15 	stw	r2,-24916(gp)

  frame_base = frame1_base;
 400104c:	d0a7ab17 	ldw	r2,-24916(gp)
 4001050:	e0bff915 	stw	r2,-28(fp)
  if (((alt_u32)frame_base & 0x1) == 0x1)
 4001054:	e0bff917 	ldw	r2,-28(fp)
 4001058:	1080004c 	andi	r2,r2,1
 400105c:	10000326 	beq	r2,zero,400106c <main+0x64>
    frame_base++;
 4001060:	e0bff917 	ldw	r2,-28(fp)
 4001064:	10800084 	addi	r2,r2,2
 4001068:	e0bff915 	stw	r2,-28(fp)

  bringup_vga(frame_base);
 400106c:	e13ff917 	ldw	r4,-28(fp)
 4001070:	4000efc0 	call	4000efc <bringup_vga>
  cursor_on(frame_base);
 4001074:	e13ff917 	ldw	r4,-28(fp)
 4001078:	40004740 	call	4000474 <cursor_on>
  clear(frame_base);
 400107c:	e13ff917 	ldw	r4,-28(fp)
 4001080:	40007ac0 	call	40007ac <clear>
  print_string(frame_base, "VGA Bring-up Code", _WHITE);
 4001084:	01bfffd4 	movui	r6,65535
 4001088:	01410074 	movhi	r5,1025
 400108c:	29656c04 	addi	r5,r5,-27216
 4001090:	e13ff917 	ldw	r4,-28(fp)
 4001094:	4000bec0 	call	4000bec <print_string>
  crlf(frame_base);
 4001098:	e13ff917 	ldw	r4,-28(fp)
 400109c:	4000e980 	call	4000e98 <crlf>

  x = 0;
 40010a0:	e03ff715 	stw	zero,-36(fp)
  for (x=0; x<100; x++) {
 40010a4:	e03ff715 	stw	zero,-36(fp)
 40010a8:	00002a06 	br	4001154 <main+0x14c>
 	  usleep(100);
 40010ac:	01001904 	movi	r4,100
 40010b0:	40055d80 	call	40055d8 <usleep>
 	  print_dec(frame_base, x, rand() & 0xffff);
 40010b4:	e0bff717 	ldw	r2,-36(fp)
 40010b8:	1021883a 	mov	r16,r2
 40010bc:	1005d7fa 	srai	r2,r2,31
 40010c0:	1023883a 	mov	r17,r2
 40010c4:	40028c00 	call	40028c0 <rand>
 40010c8:	10bfffcc 	andi	r2,r2,65535
 40010cc:	100f883a 	mov	r7,r2
 40010d0:	800b883a 	mov	r5,r16
 40010d4:	880d883a 	mov	r6,r17
 40010d8:	e13ff917 	ldw	r4,-28(fp)
 40010dc:	4000c800 	call	4000c80 <print_dec>
 	  print_string(frame_base, " ", _RED);
 40010e0:	01be0014 	movui	r6,63488
 40010e4:	01410074 	movhi	r5,1025
 40010e8:	29657104 	addi	r5,r5,-27196
 40010ec:	e13ff917 	ldw	r4,-28(fp)
 40010f0:	4000bec0 	call	4000bec <print_string>
 	  plot_line(frame_base, get_rand(XRES), get_rand(YRES), get_rand(XRES), get_rand(YRES), rand() & 0xffff);
 40010f4:	0100a004 	movi	r4,640
 40010f8:	4000fc80 	call	4000fc8 <get_rand>
 40010fc:	1027883a 	mov	r19,r2
 4001100:	01007804 	movi	r4,480
 4001104:	4000fc80 	call	4000fc8 <get_rand>
 4001108:	1029883a 	mov	r20,r2
 400110c:	0100a004 	movi	r4,640
 4001110:	4000fc80 	call	4000fc8 <get_rand>
 4001114:	102b883a 	mov	r21,r2
 4001118:	01007804 	movi	r4,480
 400111c:	4000fc80 	call	4000fc8 <get_rand>
 4001120:	1025883a 	mov	r18,r2
 4001124:	40028c00 	call	40028c0 <rand>
 4001128:	10bfffcc 	andi	r2,r2,65535
 400112c:	d8800115 	stw	r2,4(sp)
 4001130:	dc800015 	stw	r18,0(sp)
 4001134:	a80f883a 	mov	r7,r21
 4001138:	a00d883a 	mov	r6,r20
 400113c:	980b883a 	mov	r5,r19
 4001140:	e13ff917 	ldw	r4,-28(fp)
 4001144:	40004e80 	call	40004e8 <plot_line>
  clear(frame_base);
  print_string(frame_base, "VGA Bring-up Code", _WHITE);
  crlf(frame_base);

  x = 0;
  for (x=0; x<100; x++) {
 4001148:	e0bff717 	ldw	r2,-36(fp)
 400114c:	10800044 	addi	r2,r2,1
 4001150:	e0bff715 	stw	r2,-36(fp)
 4001154:	e0bff717 	ldw	r2,-36(fp)
 4001158:	10801910 	cmplti	r2,r2,100
 400115c:	103fd31e 	bne	r2,zero,40010ac <__alt_heap_limit+0xfc0010ac>
 	  print_dec(frame_base, x, rand() & 0xffff);
 	  print_string(frame_base, " ", _RED);
 	  plot_line(frame_base, get_rand(XRES), get_rand(YRES), get_rand(XRES), get_rand(YRES), rand() & 0xffff);
   }

  for (y=0; y<63; y++)
 4001160:	e03ff815 	stw	zero,-32(fp)
 4001164:	00002006 	br	40011e8 <main+0x1e0>
	  for (x=0; x<63; x++)
 4001168:	e03ff715 	stw	zero,-36(fp)
 400116c:	00001806 	br	40011d0 <main+0x1c8>
		  put_pixel(frame_base, 100+x, 100+y, image64by64[x+(y*64)]);
 4001170:	e0bff717 	ldw	r2,-36(fp)
 4001174:	10801904 	addi	r2,r2,100
 4001178:	1009883a 	mov	r4,r2
 400117c:	e0bff817 	ldw	r2,-32(fp)
 4001180:	10801904 	addi	r2,r2,100
 4001184:	100b883a 	mov	r5,r2
 4001188:	e0bff817 	ldw	r2,-32(fp)
 400118c:	100691ba 	slli	r3,r2,6
 4001190:	e0bff717 	ldw	r2,-36(fp)
 4001194:	1887883a 	add	r3,r3,r2
 4001198:	00810034 	movhi	r2,1024
 400119c:	109d6704 	addi	r2,r2,30108
 40011a0:	18c7883a 	add	r3,r3,r3
 40011a4:	10c5883a 	add	r2,r2,r3
 40011a8:	1080000b 	ldhu	r2,0(r2)
 40011ac:	10bfffcc 	andi	r2,r2,65535
 40011b0:	100f883a 	mov	r7,r2
 40011b4:	280d883a 	mov	r6,r5
 40011b8:	200b883a 	mov	r5,r4
 40011bc:	e13ff917 	ldw	r4,-28(fp)
 40011c0:	400024c0 	call	400024c <put_pixel>
 	  print_string(frame_base, " ", _RED);
 	  plot_line(frame_base, get_rand(XRES), get_rand(YRES), get_rand(XRES), get_rand(YRES), rand() & 0xffff);
   }

  for (y=0; y<63; y++)
	  for (x=0; x<63; x++)
 40011c4:	e0bff717 	ldw	r2,-36(fp)
 40011c8:	10800044 	addi	r2,r2,1
 40011cc:	e0bff715 	stw	r2,-36(fp)
 40011d0:	e0bff717 	ldw	r2,-36(fp)
 40011d4:	10800fd0 	cmplti	r2,r2,63
 40011d8:	103fe51e 	bne	r2,zero,4001170 <__alt_heap_limit+0xfc001170>
 	  print_dec(frame_base, x, rand() & 0xffff);
 	  print_string(frame_base, " ", _RED);
 	  plot_line(frame_base, get_rand(XRES), get_rand(YRES), get_rand(XRES), get_rand(YRES), rand() & 0xffff);
   }

  for (y=0; y<63; y++)
 40011dc:	e0bff817 	ldw	r2,-32(fp)
 40011e0:	10800044 	addi	r2,r2,1
 40011e4:	e0bff815 	stw	r2,-32(fp)
 40011e8:	e0bff817 	ldw	r2,-32(fp)
 40011ec:	10800fd0 	cmplti	r2,r2,63
 40011f0:	103fdd1e 	bne	r2,zero,4001168 <__alt_heap_limit+0xfc001168>
	  for (x=0; x<63; x++)
		  put_pixel(frame_base, 100+x, 100+y, image64by64[x+(y*64)]);

  free(frame1_base);
 40011f4:	d0a7ab17 	ldw	r2,-24916(gp)
 40011f8:	1009883a 	mov	r4,r2
 40011fc:	4001fb40 	call	4001fb4 <free>

  while (1) ;
 4001200:	003fff06 	br	4001200 <__alt_heap_limit+0xfc001200>

04001204 <__udivdi3>:
 4001204:	defff404 	addi	sp,sp,-48
 4001208:	dcc00515 	stw	r19,20(sp)
 400120c:	dc000215 	stw	r16,8(sp)
 4001210:	dfc00b15 	stw	ra,44(sp)
 4001214:	df000a15 	stw	fp,40(sp)
 4001218:	ddc00915 	stw	r23,36(sp)
 400121c:	dd800815 	stw	r22,32(sp)
 4001220:	dd400715 	stw	r21,28(sp)
 4001224:	dd000615 	stw	r20,24(sp)
 4001228:	dc800415 	stw	r18,16(sp)
 400122c:	dc400315 	stw	r17,12(sp)
 4001230:	2027883a 	mov	r19,r4
 4001234:	2821883a 	mov	r16,r5
 4001238:	3800461e 	bne	r7,zero,4001354 <__udivdi3+0x150>
 400123c:	3023883a 	mov	r17,r6
 4001240:	2025883a 	mov	r18,r4
 4001244:	2980572e 	bgeu	r5,r6,40013a4 <__udivdi3+0x1a0>
 4001248:	00bfffd4 	movui	r2,65535
 400124c:	282d883a 	mov	r22,r5
 4001250:	1180b236 	bltu	r2,r6,400151c <__udivdi3+0x318>
 4001254:	00803fc4 	movi	r2,255
 4001258:	1185803a 	cmpltu	r2,r2,r6
 400125c:	100490fa 	slli	r2,r2,3
 4001260:	3086d83a 	srl	r3,r6,r2
 4001264:	01010074 	movhi	r4,1025
 4001268:	21257184 	addi	r4,r4,-27194
 400126c:	20c7883a 	add	r3,r4,r3
 4001270:	18c00003 	ldbu	r3,0(r3)
 4001274:	1885883a 	add	r2,r3,r2
 4001278:	00c00804 	movi	r3,32
 400127c:	1887c83a 	sub	r3,r3,r2
 4001280:	18000526 	beq	r3,zero,4001298 <__udivdi3+0x94>
 4001284:	80e0983a 	sll	r16,r16,r3
 4001288:	9884d83a 	srl	r2,r19,r2
 400128c:	30e2983a 	sll	r17,r6,r3
 4001290:	98e4983a 	sll	r18,r19,r3
 4001294:	142cb03a 	or	r22,r2,r16
 4001298:	882ad43a 	srli	r21,r17,16
 400129c:	b009883a 	mov	r4,r22
 40012a0:	8d3fffcc 	andi	r20,r17,65535
 40012a4:	a80b883a 	mov	r5,r21
 40012a8:	4001f200 	call	4001f20 <__umodsi3>
 40012ac:	b009883a 	mov	r4,r22
 40012b0:	a80b883a 	mov	r5,r21
 40012b4:	1027883a 	mov	r19,r2
 40012b8:	4001ebc0 	call	4001ebc <__udivsi3>
 40012bc:	100b883a 	mov	r5,r2
 40012c0:	a009883a 	mov	r4,r20
 40012c4:	102d883a 	mov	r22,r2
 40012c8:	4001f780 	call	4001f78 <__mulsi3>
 40012cc:	9826943a 	slli	r19,r19,16
 40012d0:	9006d43a 	srli	r3,r18,16
 40012d4:	1cc6b03a 	or	r3,r3,r19
 40012d8:	1880052e 	bgeu	r3,r2,40012f0 <__udivdi3+0xec>
 40012dc:	1c47883a 	add	r3,r3,r17
 40012e0:	b13fffc4 	addi	r4,r22,-1
 40012e4:	1c400136 	bltu	r3,r17,40012ec <__udivdi3+0xe8>
 40012e8:	18814236 	bltu	r3,r2,40017f4 <__udivdi3+0x5f0>
 40012ec:	202d883a 	mov	r22,r4
 40012f0:	18a1c83a 	sub	r16,r3,r2
 40012f4:	8009883a 	mov	r4,r16
 40012f8:	a80b883a 	mov	r5,r21
 40012fc:	4001f200 	call	4001f20 <__umodsi3>
 4001300:	1027883a 	mov	r19,r2
 4001304:	8009883a 	mov	r4,r16
 4001308:	a80b883a 	mov	r5,r21
 400130c:	9826943a 	slli	r19,r19,16
 4001310:	4001ebc0 	call	4001ebc <__udivsi3>
 4001314:	100b883a 	mov	r5,r2
 4001318:	a009883a 	mov	r4,r20
 400131c:	94bfffcc 	andi	r18,r18,65535
 4001320:	1021883a 	mov	r16,r2
 4001324:	94e4b03a 	or	r18,r18,r19
 4001328:	4001f780 	call	4001f78 <__mulsi3>
 400132c:	9080052e 	bgeu	r18,r2,4001344 <__udivdi3+0x140>
 4001330:	8ca5883a 	add	r18,r17,r18
 4001334:	80ffffc4 	addi	r3,r16,-1
 4001338:	94410c36 	bltu	r18,r17,400176c <__udivdi3+0x568>
 400133c:	90810b2e 	bgeu	r18,r2,400176c <__udivdi3+0x568>
 4001340:	843fff84 	addi	r16,r16,-2
 4001344:	b004943a 	slli	r2,r22,16
 4001348:	0007883a 	mov	r3,zero
 400134c:	1404b03a 	or	r2,r2,r16
 4001350:	00005e06 	br	40014cc <__udivdi3+0x2c8>
 4001354:	29c05b36 	bltu	r5,r7,40014c4 <__udivdi3+0x2c0>
 4001358:	00bfffd4 	movui	r2,65535
 400135c:	11c0672e 	bgeu	r2,r7,40014fc <__udivdi3+0x2f8>
 4001360:	00804034 	movhi	r2,256
 4001364:	10bfffc4 	addi	r2,r2,-1
 4001368:	11c10a36 	bltu	r2,r7,4001794 <__udivdi3+0x590>
 400136c:	00800404 	movi	r2,16
 4001370:	3886d83a 	srl	r3,r7,r2
 4001374:	01010074 	movhi	r4,1025
 4001378:	21257184 	addi	r4,r4,-27194
 400137c:	20c7883a 	add	r3,r4,r3
 4001380:	18c00003 	ldbu	r3,0(r3)
 4001384:	05c00804 	movi	r23,32
 4001388:	1885883a 	add	r2,r3,r2
 400138c:	b8afc83a 	sub	r23,r23,r2
 4001390:	b800671e 	bne	r23,zero,4001530 <__udivdi3+0x32c>
 4001394:	3c010536 	bltu	r7,r16,40017ac <__udivdi3+0x5a8>
 4001398:	9985403a 	cmpgeu	r2,r19,r6
 400139c:	0007883a 	mov	r3,zero
 40013a0:	00004a06 	br	40014cc <__udivdi3+0x2c8>
 40013a4:	3000041e 	bne	r6,zero,40013b8 <__udivdi3+0x1b4>
 40013a8:	000b883a 	mov	r5,zero
 40013ac:	01000044 	movi	r4,1
 40013b0:	4001ebc0 	call	4001ebc <__udivsi3>
 40013b4:	1023883a 	mov	r17,r2
 40013b8:	00bfffd4 	movui	r2,65535
 40013bc:	1440532e 	bgeu	r2,r17,400150c <__udivdi3+0x308>
 40013c0:	00804034 	movhi	r2,256
 40013c4:	10bfffc4 	addi	r2,r2,-1
 40013c8:	1440f436 	bltu	r2,r17,400179c <__udivdi3+0x598>
 40013cc:	00800404 	movi	r2,16
 40013d0:	8886d83a 	srl	r3,r17,r2
 40013d4:	01010074 	movhi	r4,1025
 40013d8:	21257184 	addi	r4,r4,-27194
 40013dc:	20c7883a 	add	r3,r4,r3
 40013e0:	18c00003 	ldbu	r3,0(r3)
 40013e4:	1885883a 	add	r2,r3,r2
 40013e8:	00c00804 	movi	r3,32
 40013ec:	1887c83a 	sub	r3,r3,r2
 40013f0:	1800a51e 	bne	r3,zero,4001688 <__udivdi3+0x484>
 40013f4:	882ad43a 	srli	r21,r17,16
 40013f8:	8461c83a 	sub	r16,r16,r17
 40013fc:	8d3fffcc 	andi	r20,r17,65535
 4001400:	00c00044 	movi	r3,1
 4001404:	a80b883a 	mov	r5,r21
 4001408:	8009883a 	mov	r4,r16
 400140c:	d8c00115 	stw	r3,4(sp)
 4001410:	4001f200 	call	4001f20 <__umodsi3>
 4001414:	a80b883a 	mov	r5,r21
 4001418:	8009883a 	mov	r4,r16
 400141c:	1027883a 	mov	r19,r2
 4001420:	4001ebc0 	call	4001ebc <__udivsi3>
 4001424:	a00b883a 	mov	r5,r20
 4001428:	1009883a 	mov	r4,r2
 400142c:	102d883a 	mov	r22,r2
 4001430:	4001f780 	call	4001f78 <__mulsi3>
 4001434:	9826943a 	slli	r19,r19,16
 4001438:	900ed43a 	srli	r7,r18,16
 400143c:	d8c00117 	ldw	r3,4(sp)
 4001440:	3cceb03a 	or	r7,r7,r19
 4001444:	3880052e 	bgeu	r7,r2,400145c <__udivdi3+0x258>
 4001448:	3c4f883a 	add	r7,r7,r17
 400144c:	b13fffc4 	addi	r4,r22,-1
 4001450:	3c400136 	bltu	r7,r17,4001458 <__udivdi3+0x254>
 4001454:	3880e436 	bltu	r7,r2,40017e8 <__udivdi3+0x5e4>
 4001458:	202d883a 	mov	r22,r4
 400145c:	38a1c83a 	sub	r16,r7,r2
 4001460:	8009883a 	mov	r4,r16
 4001464:	a80b883a 	mov	r5,r21
 4001468:	d8c00115 	stw	r3,4(sp)
 400146c:	4001f200 	call	4001f20 <__umodsi3>
 4001470:	1027883a 	mov	r19,r2
 4001474:	8009883a 	mov	r4,r16
 4001478:	a80b883a 	mov	r5,r21
 400147c:	9826943a 	slli	r19,r19,16
 4001480:	4001ebc0 	call	4001ebc <__udivsi3>
 4001484:	a00b883a 	mov	r5,r20
 4001488:	1009883a 	mov	r4,r2
 400148c:	94bfffcc 	andi	r18,r18,65535
 4001490:	1021883a 	mov	r16,r2
 4001494:	94e4b03a 	or	r18,r18,r19
 4001498:	4001f780 	call	4001f78 <__mulsi3>
 400149c:	d8c00117 	ldw	r3,4(sp)
 40014a0:	9080052e 	bgeu	r18,r2,40014b8 <__udivdi3+0x2b4>
 40014a4:	8ca5883a 	add	r18,r17,r18
 40014a8:	813fffc4 	addi	r4,r16,-1
 40014ac:	9440ad36 	bltu	r18,r17,4001764 <__udivdi3+0x560>
 40014b0:	9080ac2e 	bgeu	r18,r2,4001764 <__udivdi3+0x560>
 40014b4:	843fff84 	addi	r16,r16,-2
 40014b8:	b004943a 	slli	r2,r22,16
 40014bc:	1404b03a 	or	r2,r2,r16
 40014c0:	00000206 	br	40014cc <__udivdi3+0x2c8>
 40014c4:	0007883a 	mov	r3,zero
 40014c8:	0005883a 	mov	r2,zero
 40014cc:	dfc00b17 	ldw	ra,44(sp)
 40014d0:	df000a17 	ldw	fp,40(sp)
 40014d4:	ddc00917 	ldw	r23,36(sp)
 40014d8:	dd800817 	ldw	r22,32(sp)
 40014dc:	dd400717 	ldw	r21,28(sp)
 40014e0:	dd000617 	ldw	r20,24(sp)
 40014e4:	dcc00517 	ldw	r19,20(sp)
 40014e8:	dc800417 	ldw	r18,16(sp)
 40014ec:	dc400317 	ldw	r17,12(sp)
 40014f0:	dc000217 	ldw	r16,8(sp)
 40014f4:	dec00c04 	addi	sp,sp,48
 40014f8:	f800283a 	ret
 40014fc:	00803fc4 	movi	r2,255
 4001500:	11c5803a 	cmpltu	r2,r2,r7
 4001504:	100490fa 	slli	r2,r2,3
 4001508:	003f9906 	br	4001370 <__alt_heap_limit+0xfc001370>
 400150c:	00803fc4 	movi	r2,255
 4001510:	1445803a 	cmpltu	r2,r2,r17
 4001514:	100490fa 	slli	r2,r2,3
 4001518:	003fad06 	br	40013d0 <__alt_heap_limit+0xfc0013d0>
 400151c:	00804034 	movhi	r2,256
 4001520:	10bfffc4 	addi	r2,r2,-1
 4001524:	11809f36 	bltu	r2,r6,40017a4 <__udivdi3+0x5a0>
 4001528:	00800404 	movi	r2,16
 400152c:	003f4c06 	br	4001260 <__alt_heap_limit+0xfc001260>
 4001530:	3dce983a 	sll	r7,r7,r23
 4001534:	30b8d83a 	srl	fp,r6,r2
 4001538:	80a2d83a 	srl	r17,r16,r2
 400153c:	35cc983a 	sll	r6,r6,r23
 4001540:	3f38b03a 	or	fp,r7,fp
 4001544:	e024d43a 	srli	r18,fp,16
 4001548:	9884d83a 	srl	r2,r19,r2
 400154c:	85e0983a 	sll	r16,r16,r23
 4001550:	8809883a 	mov	r4,r17
 4001554:	900b883a 	mov	r5,r18
 4001558:	d9800015 	stw	r6,0(sp)
 400155c:	1420b03a 	or	r16,r2,r16
 4001560:	4001f200 	call	4001f20 <__umodsi3>
 4001564:	900b883a 	mov	r5,r18
 4001568:	8809883a 	mov	r4,r17
 400156c:	1029883a 	mov	r20,r2
 4001570:	e5bfffcc 	andi	r22,fp,65535
 4001574:	4001ebc0 	call	4001ebc <__udivsi3>
 4001578:	100b883a 	mov	r5,r2
 400157c:	b009883a 	mov	r4,r22
 4001580:	102b883a 	mov	r21,r2
 4001584:	4001f780 	call	4001f78 <__mulsi3>
 4001588:	a028943a 	slli	r20,r20,16
 400158c:	8006d43a 	srli	r3,r16,16
 4001590:	1d06b03a 	or	r3,r3,r20
 4001594:	1880042e 	bgeu	r3,r2,40015a8 <__udivdi3+0x3a4>
 4001598:	1f07883a 	add	r3,r3,fp
 400159c:	a93fffc4 	addi	r4,r21,-1
 40015a0:	1f00892e 	bgeu	r3,fp,40017c8 <__udivdi3+0x5c4>
 40015a4:	202b883a 	mov	r21,r4
 40015a8:	18a3c83a 	sub	r17,r3,r2
 40015ac:	8809883a 	mov	r4,r17
 40015b0:	900b883a 	mov	r5,r18
 40015b4:	4001f200 	call	4001f20 <__umodsi3>
 40015b8:	1029883a 	mov	r20,r2
 40015bc:	8809883a 	mov	r4,r17
 40015c0:	900b883a 	mov	r5,r18
 40015c4:	a028943a 	slli	r20,r20,16
 40015c8:	4001ebc0 	call	4001ebc <__udivsi3>
 40015cc:	100b883a 	mov	r5,r2
 40015d0:	b009883a 	mov	r4,r22
 40015d4:	843fffcc 	andi	r16,r16,65535
 40015d8:	1023883a 	mov	r17,r2
 40015dc:	8520b03a 	or	r16,r16,r20
 40015e0:	4001f780 	call	4001f78 <__mulsi3>
 40015e4:	8080042e 	bgeu	r16,r2,40015f8 <__udivdi3+0x3f4>
 40015e8:	8721883a 	add	r16,r16,fp
 40015ec:	88ffffc4 	addi	r3,r17,-1
 40015f0:	8700712e 	bgeu	r16,fp,40017b8 <__udivdi3+0x5b4>
 40015f4:	1823883a 	mov	r17,r3
 40015f8:	a80e943a 	slli	r7,r21,16
 40015fc:	d8c00017 	ldw	r3,0(sp)
 4001600:	80a1c83a 	sub	r16,r16,r2
 4001604:	3c64b03a 	or	r18,r7,r17
 4001608:	1d3fffcc 	andi	r20,r3,65535
 400160c:	9022d43a 	srli	r17,r18,16
 4001610:	95bfffcc 	andi	r22,r18,65535
 4001614:	a00b883a 	mov	r5,r20
 4001618:	b009883a 	mov	r4,r22
 400161c:	182ad43a 	srli	r21,r3,16
 4001620:	4001f780 	call	4001f78 <__mulsi3>
 4001624:	a00b883a 	mov	r5,r20
 4001628:	8809883a 	mov	r4,r17
 400162c:	1039883a 	mov	fp,r2
 4001630:	4001f780 	call	4001f78 <__mulsi3>
 4001634:	8809883a 	mov	r4,r17
 4001638:	a80b883a 	mov	r5,r21
 400163c:	1029883a 	mov	r20,r2
 4001640:	4001f780 	call	4001f78 <__mulsi3>
 4001644:	a80b883a 	mov	r5,r21
 4001648:	b009883a 	mov	r4,r22
 400164c:	1023883a 	mov	r17,r2
 4001650:	4001f780 	call	4001f78 <__mulsi3>
 4001654:	e006d43a 	srli	r3,fp,16
 4001658:	1505883a 	add	r2,r2,r20
 400165c:	1887883a 	add	r3,r3,r2
 4001660:	1d00022e 	bgeu	r3,r20,400166c <__udivdi3+0x468>
 4001664:	00800074 	movhi	r2,1
 4001668:	88a3883a 	add	r17,r17,r2
 400166c:	1804d43a 	srli	r2,r3,16
 4001670:	1463883a 	add	r17,r2,r17
 4001674:	84404436 	bltu	r16,r17,4001788 <__udivdi3+0x584>
 4001678:	84403e26 	beq	r16,r17,4001774 <__udivdi3+0x570>
 400167c:	9005883a 	mov	r2,r18
 4001680:	0007883a 	mov	r3,zero
 4001684:	003f9106 	br	40014cc <__alt_heap_limit+0xfc0014cc>
 4001688:	88e2983a 	sll	r17,r17,r3
 400168c:	80aed83a 	srl	r23,r16,r2
 4001690:	80e0983a 	sll	r16,r16,r3
 4001694:	882ad43a 	srli	r21,r17,16
 4001698:	9884d83a 	srl	r2,r19,r2
 400169c:	b809883a 	mov	r4,r23
 40016a0:	a80b883a 	mov	r5,r21
 40016a4:	98e4983a 	sll	r18,r19,r3
 40016a8:	142cb03a 	or	r22,r2,r16
 40016ac:	4001f200 	call	4001f20 <__umodsi3>
 40016b0:	b809883a 	mov	r4,r23
 40016b4:	a80b883a 	mov	r5,r21
 40016b8:	1027883a 	mov	r19,r2
 40016bc:	8d3fffcc 	andi	r20,r17,65535
 40016c0:	4001ebc0 	call	4001ebc <__udivsi3>
 40016c4:	a009883a 	mov	r4,r20
 40016c8:	100b883a 	mov	r5,r2
 40016cc:	102f883a 	mov	r23,r2
 40016d0:	4001f780 	call	4001f78 <__mulsi3>
 40016d4:	9826943a 	slli	r19,r19,16
 40016d8:	b008d43a 	srli	r4,r22,16
 40016dc:	24c8b03a 	or	r4,r4,r19
 40016e0:	2080062e 	bgeu	r4,r2,40016fc <__udivdi3+0x4f8>
 40016e4:	2449883a 	add	r4,r4,r17
 40016e8:	b8ffffc4 	addi	r3,r23,-1
 40016ec:	24403c36 	bltu	r4,r17,40017e0 <__udivdi3+0x5dc>
 40016f0:	20803b2e 	bgeu	r4,r2,40017e0 <__udivdi3+0x5dc>
 40016f4:	bdffff84 	addi	r23,r23,-2
 40016f8:	2449883a 	add	r4,r4,r17
 40016fc:	20a1c83a 	sub	r16,r4,r2
 4001700:	a80b883a 	mov	r5,r21
 4001704:	8009883a 	mov	r4,r16
 4001708:	4001f200 	call	4001f20 <__umodsi3>
 400170c:	a80b883a 	mov	r5,r21
 4001710:	8009883a 	mov	r4,r16
 4001714:	1027883a 	mov	r19,r2
 4001718:	4001ebc0 	call	4001ebc <__udivsi3>
 400171c:	a009883a 	mov	r4,r20
 4001720:	100b883a 	mov	r5,r2
 4001724:	9826943a 	slli	r19,r19,16
 4001728:	1039883a 	mov	fp,r2
 400172c:	4001f780 	call	4001f78 <__mulsi3>
 4001730:	b13fffcc 	andi	r4,r22,65535
 4001734:	24c8b03a 	or	r4,r4,r19
 4001738:	2080062e 	bgeu	r4,r2,4001754 <__udivdi3+0x550>
 400173c:	2449883a 	add	r4,r4,r17
 4001740:	e0ffffc4 	addi	r3,fp,-1
 4001744:	24402436 	bltu	r4,r17,40017d8 <__udivdi3+0x5d4>
 4001748:	2080232e 	bgeu	r4,r2,40017d8 <__udivdi3+0x5d4>
 400174c:	e73fff84 	addi	fp,fp,-2
 4001750:	2449883a 	add	r4,r4,r17
 4001754:	b82e943a 	slli	r23,r23,16
 4001758:	20a1c83a 	sub	r16,r4,r2
 400175c:	bf06b03a 	or	r3,r23,fp
 4001760:	003f2806 	br	4001404 <__alt_heap_limit+0xfc001404>
 4001764:	2021883a 	mov	r16,r4
 4001768:	003f5306 	br	40014b8 <__alt_heap_limit+0xfc0014b8>
 400176c:	1821883a 	mov	r16,r3
 4001770:	003ef406 	br	4001344 <__alt_heap_limit+0xfc001344>
 4001774:	1806943a 	slli	r3,r3,16
 4001778:	9de6983a 	sll	r19,r19,r23
 400177c:	e73fffcc 	andi	fp,fp,65535
 4001780:	1f07883a 	add	r3,r3,fp
 4001784:	98ffbd2e 	bgeu	r19,r3,400167c <__alt_heap_limit+0xfc00167c>
 4001788:	90bfffc4 	addi	r2,r18,-1
 400178c:	0007883a 	mov	r3,zero
 4001790:	003f4e06 	br	40014cc <__alt_heap_limit+0xfc0014cc>
 4001794:	00800604 	movi	r2,24
 4001798:	003ef506 	br	4001370 <__alt_heap_limit+0xfc001370>
 400179c:	00800604 	movi	r2,24
 40017a0:	003f0b06 	br	40013d0 <__alt_heap_limit+0xfc0013d0>
 40017a4:	00800604 	movi	r2,24
 40017a8:	003ead06 	br	4001260 <__alt_heap_limit+0xfc001260>
 40017ac:	0007883a 	mov	r3,zero
 40017b0:	00800044 	movi	r2,1
 40017b4:	003f4506 	br	40014cc <__alt_heap_limit+0xfc0014cc>
 40017b8:	80bf8e2e 	bgeu	r16,r2,40015f4 <__alt_heap_limit+0xfc0015f4>
 40017bc:	8c7fff84 	addi	r17,r17,-2
 40017c0:	8721883a 	add	r16,r16,fp
 40017c4:	003f8c06 	br	40015f8 <__alt_heap_limit+0xfc0015f8>
 40017c8:	18bf762e 	bgeu	r3,r2,40015a4 <__alt_heap_limit+0xfc0015a4>
 40017cc:	ad7fff84 	addi	r21,r21,-2
 40017d0:	1f07883a 	add	r3,r3,fp
 40017d4:	003f7406 	br	40015a8 <__alt_heap_limit+0xfc0015a8>
 40017d8:	1839883a 	mov	fp,r3
 40017dc:	003fdd06 	br	4001754 <__alt_heap_limit+0xfc001754>
 40017e0:	182f883a 	mov	r23,r3
 40017e4:	003fc506 	br	40016fc <__alt_heap_limit+0xfc0016fc>
 40017e8:	b5bfff84 	addi	r22,r22,-2
 40017ec:	3c4f883a 	add	r7,r7,r17
 40017f0:	003f1a06 	br	400145c <__alt_heap_limit+0xfc00145c>
 40017f4:	b5bfff84 	addi	r22,r22,-2
 40017f8:	1c47883a 	add	r3,r3,r17
 40017fc:	003ebc06 	br	40012f0 <__alt_heap_limit+0xfc0012f0>

04001800 <__umoddi3>:
 4001800:	defff304 	addi	sp,sp,-52
 4001804:	df000b15 	stw	fp,44(sp)
 4001808:	dc400415 	stw	r17,16(sp)
 400180c:	dc000315 	stw	r16,12(sp)
 4001810:	dfc00c15 	stw	ra,48(sp)
 4001814:	ddc00a15 	stw	r23,40(sp)
 4001818:	dd800915 	stw	r22,36(sp)
 400181c:	dd400815 	stw	r21,32(sp)
 4001820:	dd000715 	stw	r20,28(sp)
 4001824:	dcc00615 	stw	r19,24(sp)
 4001828:	dc800515 	stw	r18,20(sp)
 400182c:	2021883a 	mov	r16,r4
 4001830:	2823883a 	mov	r17,r5
 4001834:	2839883a 	mov	fp,r5
 4001838:	3800401e 	bne	r7,zero,400193c <__umoddi3+0x13c>
 400183c:	3027883a 	mov	r19,r6
 4001840:	2029883a 	mov	r20,r4
 4001844:	2980552e 	bgeu	r5,r6,400199c <__umoddi3+0x19c>
 4001848:	00bfffd4 	movui	r2,65535
 400184c:	1180a236 	bltu	r2,r6,4001ad8 <__umoddi3+0x2d8>
 4001850:	01003fc4 	movi	r4,255
 4001854:	2189803a 	cmpltu	r4,r4,r6
 4001858:	200890fa 	slli	r4,r4,3
 400185c:	3104d83a 	srl	r2,r6,r4
 4001860:	00c10074 	movhi	r3,1025
 4001864:	18e57184 	addi	r3,r3,-27194
 4001868:	1885883a 	add	r2,r3,r2
 400186c:	10c00003 	ldbu	r3,0(r2)
 4001870:	00800804 	movi	r2,32
 4001874:	1909883a 	add	r4,r3,r4
 4001878:	1125c83a 	sub	r18,r2,r4
 400187c:	90000526 	beq	r18,zero,4001894 <__umoddi3+0x94>
 4001880:	8ca2983a 	sll	r17,r17,r18
 4001884:	8108d83a 	srl	r4,r16,r4
 4001888:	34a6983a 	sll	r19,r6,r18
 400188c:	84a8983a 	sll	r20,r16,r18
 4001890:	2478b03a 	or	fp,r4,r17
 4001894:	982cd43a 	srli	r22,r19,16
 4001898:	e009883a 	mov	r4,fp
 400189c:	9dffffcc 	andi	r23,r19,65535
 40018a0:	b00b883a 	mov	r5,r22
 40018a4:	4001f200 	call	4001f20 <__umodsi3>
 40018a8:	b00b883a 	mov	r5,r22
 40018ac:	e009883a 	mov	r4,fp
 40018b0:	102b883a 	mov	r21,r2
 40018b4:	4001ebc0 	call	4001ebc <__udivsi3>
 40018b8:	100b883a 	mov	r5,r2
 40018bc:	b809883a 	mov	r4,r23
 40018c0:	4001f780 	call	4001f78 <__mulsi3>
 40018c4:	a82a943a 	slli	r21,r21,16
 40018c8:	a006d43a 	srli	r3,r20,16
 40018cc:	1d46b03a 	or	r3,r3,r21
 40018d0:	1880032e 	bgeu	r3,r2,40018e0 <__umoddi3+0xe0>
 40018d4:	1cc7883a 	add	r3,r3,r19
 40018d8:	1cc00136 	bltu	r3,r19,40018e0 <__umoddi3+0xe0>
 40018dc:	18813136 	bltu	r3,r2,4001da4 <__umoddi3+0x5a4>
 40018e0:	18a1c83a 	sub	r16,r3,r2
 40018e4:	b00b883a 	mov	r5,r22
 40018e8:	8009883a 	mov	r4,r16
 40018ec:	4001f200 	call	4001f20 <__umodsi3>
 40018f0:	b00b883a 	mov	r5,r22
 40018f4:	8009883a 	mov	r4,r16
 40018f8:	1023883a 	mov	r17,r2
 40018fc:	4001ebc0 	call	4001ebc <__udivsi3>
 4001900:	100b883a 	mov	r5,r2
 4001904:	b809883a 	mov	r4,r23
 4001908:	8822943a 	slli	r17,r17,16
 400190c:	4001f780 	call	4001f78 <__mulsi3>
 4001910:	a0ffffcc 	andi	r3,r20,65535
 4001914:	1c46b03a 	or	r3,r3,r17
 4001918:	1880042e 	bgeu	r3,r2,400192c <__umoddi3+0x12c>
 400191c:	1cc7883a 	add	r3,r3,r19
 4001920:	1cc00236 	bltu	r3,r19,400192c <__umoddi3+0x12c>
 4001924:	1880012e 	bgeu	r3,r2,400192c <__umoddi3+0x12c>
 4001928:	1cc7883a 	add	r3,r3,r19
 400192c:	1885c83a 	sub	r2,r3,r2
 4001930:	1484d83a 	srl	r2,r2,r18
 4001934:	0007883a 	mov	r3,zero
 4001938:	00005306 	br	4001a88 <__umoddi3+0x288>
 400193c:	29c05036 	bltu	r5,r7,4001a80 <__umoddi3+0x280>
 4001940:	00bfffd4 	movui	r2,65535
 4001944:	11c05c2e 	bgeu	r2,r7,4001ab8 <__umoddi3+0x2b8>
 4001948:	00804034 	movhi	r2,256
 400194c:	10bfffc4 	addi	r2,r2,-1
 4001950:	11c10636 	bltu	r2,r7,4001d6c <__umoddi3+0x56c>
 4001954:	01000404 	movi	r4,16
 4001958:	3904d83a 	srl	r2,r7,r4
 400195c:	00c10074 	movhi	r3,1025
 4001960:	18e57184 	addi	r3,r3,-27194
 4001964:	1885883a 	add	r2,r3,r2
 4001968:	14c00003 	ldbu	r19,0(r2)
 400196c:	00c00804 	movi	r3,32
 4001970:	9927883a 	add	r19,r19,r4
 4001974:	1ce9c83a 	sub	r20,r3,r19
 4001978:	a0005c1e 	bne	r20,zero,4001aec <__umoddi3+0x2ec>
 400197c:	3c400136 	bltu	r7,r17,4001984 <__umoddi3+0x184>
 4001980:	81810a36 	bltu	r16,r6,4001dac <__umoddi3+0x5ac>
 4001984:	8185c83a 	sub	r2,r16,r6
 4001988:	89e3c83a 	sub	r17,r17,r7
 400198c:	8089803a 	cmpltu	r4,r16,r2
 4001990:	8939c83a 	sub	fp,r17,r4
 4001994:	e007883a 	mov	r3,fp
 4001998:	00003b06 	br	4001a88 <__umoddi3+0x288>
 400199c:	3000041e 	bne	r6,zero,40019b0 <__umoddi3+0x1b0>
 40019a0:	000b883a 	mov	r5,zero
 40019a4:	01000044 	movi	r4,1
 40019a8:	4001ebc0 	call	4001ebc <__udivsi3>
 40019ac:	1027883a 	mov	r19,r2
 40019b0:	00bfffd4 	movui	r2,65535
 40019b4:	14c0442e 	bgeu	r2,r19,4001ac8 <__umoddi3+0x2c8>
 40019b8:	00804034 	movhi	r2,256
 40019bc:	10bfffc4 	addi	r2,r2,-1
 40019c0:	14c0ec36 	bltu	r2,r19,4001d74 <__umoddi3+0x574>
 40019c4:	00800404 	movi	r2,16
 40019c8:	9886d83a 	srl	r3,r19,r2
 40019cc:	01010074 	movhi	r4,1025
 40019d0:	21257184 	addi	r4,r4,-27194
 40019d4:	20c7883a 	add	r3,r4,r3
 40019d8:	18c00003 	ldbu	r3,0(r3)
 40019dc:	1887883a 	add	r3,r3,r2
 40019e0:	00800804 	movi	r2,32
 40019e4:	10e5c83a 	sub	r18,r2,r3
 40019e8:	9000ab1e 	bne	r18,zero,4001c98 <__umoddi3+0x498>
 40019ec:	982cd43a 	srli	r22,r19,16
 40019f0:	8ce3c83a 	sub	r17,r17,r19
 40019f4:	9dffffcc 	andi	r23,r19,65535
 40019f8:	b00b883a 	mov	r5,r22
 40019fc:	8809883a 	mov	r4,r17
 4001a00:	4001f200 	call	4001f20 <__umodsi3>
 4001a04:	b00b883a 	mov	r5,r22
 4001a08:	8809883a 	mov	r4,r17
 4001a0c:	102b883a 	mov	r21,r2
 4001a10:	4001ebc0 	call	4001ebc <__udivsi3>
 4001a14:	b80b883a 	mov	r5,r23
 4001a18:	1009883a 	mov	r4,r2
 4001a1c:	4001f780 	call	4001f78 <__mulsi3>
 4001a20:	a82a943a 	slli	r21,r21,16
 4001a24:	a006d43a 	srli	r3,r20,16
 4001a28:	1d46b03a 	or	r3,r3,r21
 4001a2c:	1880042e 	bgeu	r3,r2,4001a40 <__umoddi3+0x240>
 4001a30:	1cc7883a 	add	r3,r3,r19
 4001a34:	1cc00236 	bltu	r3,r19,4001a40 <__umoddi3+0x240>
 4001a38:	1880012e 	bgeu	r3,r2,4001a40 <__umoddi3+0x240>
 4001a3c:	1cc7883a 	add	r3,r3,r19
 4001a40:	18a1c83a 	sub	r16,r3,r2
 4001a44:	b00b883a 	mov	r5,r22
 4001a48:	8009883a 	mov	r4,r16
 4001a4c:	4001f200 	call	4001f20 <__umodsi3>
 4001a50:	1023883a 	mov	r17,r2
 4001a54:	b00b883a 	mov	r5,r22
 4001a58:	8009883a 	mov	r4,r16
 4001a5c:	4001ebc0 	call	4001ebc <__udivsi3>
 4001a60:	8822943a 	slli	r17,r17,16
 4001a64:	b80b883a 	mov	r5,r23
 4001a68:	1009883a 	mov	r4,r2
 4001a6c:	4001f780 	call	4001f78 <__mulsi3>
 4001a70:	a53fffcc 	andi	r20,r20,65535
 4001a74:	a446b03a 	or	r3,r20,r17
 4001a78:	18bfac2e 	bgeu	r3,r2,400192c <__alt_heap_limit+0xfc00192c>
 4001a7c:	003fa706 	br	400191c <__alt_heap_limit+0xfc00191c>
 4001a80:	2005883a 	mov	r2,r4
 4001a84:	2807883a 	mov	r3,r5
 4001a88:	dfc00c17 	ldw	ra,48(sp)
 4001a8c:	df000b17 	ldw	fp,44(sp)
 4001a90:	ddc00a17 	ldw	r23,40(sp)
 4001a94:	dd800917 	ldw	r22,36(sp)
 4001a98:	dd400817 	ldw	r21,32(sp)
 4001a9c:	dd000717 	ldw	r20,28(sp)
 4001aa0:	dcc00617 	ldw	r19,24(sp)
 4001aa4:	dc800517 	ldw	r18,20(sp)
 4001aa8:	dc400417 	ldw	r17,16(sp)
 4001aac:	dc000317 	ldw	r16,12(sp)
 4001ab0:	dec00d04 	addi	sp,sp,52
 4001ab4:	f800283a 	ret
 4001ab8:	04c03fc4 	movi	r19,255
 4001abc:	99c9803a 	cmpltu	r4,r19,r7
 4001ac0:	200890fa 	slli	r4,r4,3
 4001ac4:	003fa406 	br	4001958 <__alt_heap_limit+0xfc001958>
 4001ac8:	00803fc4 	movi	r2,255
 4001acc:	14c5803a 	cmpltu	r2,r2,r19
 4001ad0:	100490fa 	slli	r2,r2,3
 4001ad4:	003fbc06 	br	40019c8 <__alt_heap_limit+0xfc0019c8>
 4001ad8:	00804034 	movhi	r2,256
 4001adc:	10bfffc4 	addi	r2,r2,-1
 4001ae0:	1180a636 	bltu	r2,r6,4001d7c <__umoddi3+0x57c>
 4001ae4:	01000404 	movi	r4,16
 4001ae8:	003f5c06 	br	400185c <__alt_heap_limit+0xfc00185c>
 4001aec:	3d0e983a 	sll	r7,r7,r20
 4001af0:	34ead83a 	srl	r21,r6,r19
 4001af4:	8cc6d83a 	srl	r3,r17,r19
 4001af8:	8d10983a 	sll	r8,r17,r20
 4001afc:	3d6ab03a 	or	r21,r7,r21
 4001b00:	a82cd43a 	srli	r22,r21,16
 4001b04:	84e2d83a 	srl	r17,r16,r19
 4001b08:	1809883a 	mov	r4,r3
 4001b0c:	b00b883a 	mov	r5,r22
 4001b10:	8a22b03a 	or	r17,r17,r8
 4001b14:	3524983a 	sll	r18,r6,r20
 4001b18:	dc400015 	stw	r17,0(sp)
 4001b1c:	d8c00115 	stw	r3,4(sp)
 4001b20:	4001f200 	call	4001f20 <__umodsi3>
 4001b24:	d8c00117 	ldw	r3,4(sp)
 4001b28:	b00b883a 	mov	r5,r22
 4001b2c:	1039883a 	mov	fp,r2
 4001b30:	1809883a 	mov	r4,r3
 4001b34:	4001ebc0 	call	4001ebc <__udivsi3>
 4001b38:	adffffcc 	andi	r23,r21,65535
 4001b3c:	100b883a 	mov	r5,r2
 4001b40:	b809883a 	mov	r4,r23
 4001b44:	1023883a 	mov	r17,r2
 4001b48:	4001f780 	call	4001f78 <__mulsi3>
 4001b4c:	d9400017 	ldw	r5,0(sp)
 4001b50:	e008943a 	slli	r4,fp,16
 4001b54:	8520983a 	sll	r16,r16,r20
 4001b58:	2806d43a 	srli	r3,r5,16
 4001b5c:	1906b03a 	or	r3,r3,r4
 4001b60:	1880042e 	bgeu	r3,r2,4001b74 <__umoddi3+0x374>
 4001b64:	1d47883a 	add	r3,r3,r21
 4001b68:	893fffc4 	addi	r4,r17,-1
 4001b6c:	1d40892e 	bgeu	r3,r21,4001d94 <__umoddi3+0x594>
 4001b70:	2023883a 	mov	r17,r4
 4001b74:	18b9c83a 	sub	fp,r3,r2
 4001b78:	b00b883a 	mov	r5,r22
 4001b7c:	e009883a 	mov	r4,fp
 4001b80:	4001f200 	call	4001f20 <__umodsi3>
 4001b84:	b00b883a 	mov	r5,r22
 4001b88:	e009883a 	mov	r4,fp
 4001b8c:	d8800215 	stw	r2,8(sp)
 4001b90:	4001ebc0 	call	4001ebc <__udivsi3>
 4001b94:	100b883a 	mov	r5,r2
 4001b98:	b809883a 	mov	r4,r23
 4001b9c:	102d883a 	mov	r22,r2
 4001ba0:	4001f780 	call	4001f78 <__mulsi3>
 4001ba4:	d9800217 	ldw	r6,8(sp)
 4001ba8:	d8c00017 	ldw	r3,0(sp)
 4001bac:	300c943a 	slli	r6,r6,16
 4001bb0:	1a3fffcc 	andi	r8,r3,65535
 4001bb4:	4190b03a 	or	r8,r8,r6
 4001bb8:	4080042e 	bgeu	r8,r2,4001bcc <__umoddi3+0x3cc>
 4001bbc:	4551883a 	add	r8,r8,r21
 4001bc0:	b0ffffc4 	addi	r3,r22,-1
 4001bc4:	45406f2e 	bgeu	r8,r21,4001d84 <__umoddi3+0x584>
 4001bc8:	182d883a 	mov	r22,r3
 4001bcc:	880e943a 	slli	r7,r17,16
 4001bd0:	9006d43a 	srli	r3,r18,16
 4001bd4:	91bfffcc 	andi	r6,r18,65535
 4001bd8:	3dacb03a 	or	r22,r7,r22
 4001bdc:	b02ed43a 	srli	r23,r22,16
 4001be0:	b5bfffcc 	andi	r22,r22,65535
 4001be4:	300b883a 	mov	r5,r6
 4001be8:	b009883a 	mov	r4,r22
 4001bec:	40a3c83a 	sub	r17,r8,r2
 4001bf0:	d8c00115 	stw	r3,4(sp)
 4001bf4:	d9800215 	stw	r6,8(sp)
 4001bf8:	4001f780 	call	4001f78 <__mulsi3>
 4001bfc:	d9800217 	ldw	r6,8(sp)
 4001c00:	b809883a 	mov	r4,r23
 4001c04:	1039883a 	mov	fp,r2
 4001c08:	300b883a 	mov	r5,r6
 4001c0c:	4001f780 	call	4001f78 <__mulsi3>
 4001c10:	d8c00117 	ldw	r3,4(sp)
 4001c14:	b809883a 	mov	r4,r23
 4001c18:	d8800215 	stw	r2,8(sp)
 4001c1c:	180b883a 	mov	r5,r3
 4001c20:	4001f780 	call	4001f78 <__mulsi3>
 4001c24:	d8c00117 	ldw	r3,4(sp)
 4001c28:	b009883a 	mov	r4,r22
 4001c2c:	102f883a 	mov	r23,r2
 4001c30:	180b883a 	mov	r5,r3
 4001c34:	4001f780 	call	4001f78 <__mulsi3>
 4001c38:	d9800217 	ldw	r6,8(sp)
 4001c3c:	e006d43a 	srli	r3,fp,16
 4001c40:	1185883a 	add	r2,r2,r6
 4001c44:	1885883a 	add	r2,r3,r2
 4001c48:	1180022e 	bgeu	r2,r6,4001c54 <__umoddi3+0x454>
 4001c4c:	00c00074 	movhi	r3,1
 4001c50:	b8ef883a 	add	r23,r23,r3
 4001c54:	1006d43a 	srli	r3,r2,16
 4001c58:	1004943a 	slli	r2,r2,16
 4001c5c:	e73fffcc 	andi	fp,fp,65535
 4001c60:	1dc7883a 	add	r3,r3,r23
 4001c64:	1739883a 	add	fp,r2,fp
 4001c68:	88c03a36 	bltu	r17,r3,4001d54 <__umoddi3+0x554>
 4001c6c:	88c05126 	beq	r17,r3,4001db4 <__umoddi3+0x5b4>
 4001c70:	88c9c83a 	sub	r4,r17,r3
 4001c74:	e00f883a 	mov	r7,fp
 4001c78:	81cfc83a 	sub	r7,r16,r7
 4001c7c:	81c7803a 	cmpltu	r3,r16,r7
 4001c80:	20c7c83a 	sub	r3,r4,r3
 4001c84:	1cc4983a 	sll	r2,r3,r19
 4001c88:	3d0ed83a 	srl	r7,r7,r20
 4001c8c:	1d06d83a 	srl	r3,r3,r20
 4001c90:	11c4b03a 	or	r2,r2,r7
 4001c94:	003f7c06 	br	4001a88 <__alt_heap_limit+0xfc001a88>
 4001c98:	9ca6983a 	sll	r19,r19,r18
 4001c9c:	88f8d83a 	srl	fp,r17,r3
 4001ca0:	80c4d83a 	srl	r2,r16,r3
 4001ca4:	982cd43a 	srli	r22,r19,16
 4001ca8:	8ca2983a 	sll	r17,r17,r18
 4001cac:	e009883a 	mov	r4,fp
 4001cb0:	b00b883a 	mov	r5,r22
 4001cb4:	146ab03a 	or	r21,r2,r17
 4001cb8:	4001f200 	call	4001f20 <__umodsi3>
 4001cbc:	b00b883a 	mov	r5,r22
 4001cc0:	e009883a 	mov	r4,fp
 4001cc4:	1029883a 	mov	r20,r2
 4001cc8:	9dffffcc 	andi	r23,r19,65535
 4001ccc:	4001ebc0 	call	4001ebc <__udivsi3>
 4001cd0:	b809883a 	mov	r4,r23
 4001cd4:	100b883a 	mov	r5,r2
 4001cd8:	4001f780 	call	4001f78 <__mulsi3>
 4001cdc:	a008943a 	slli	r4,r20,16
 4001ce0:	a806d43a 	srli	r3,r21,16
 4001ce4:	84a8983a 	sll	r20,r16,r18
 4001ce8:	1906b03a 	or	r3,r3,r4
 4001cec:	1880042e 	bgeu	r3,r2,4001d00 <__umoddi3+0x500>
 4001cf0:	1cc7883a 	add	r3,r3,r19
 4001cf4:	1cc00236 	bltu	r3,r19,4001d00 <__umoddi3+0x500>
 4001cf8:	1880012e 	bgeu	r3,r2,4001d00 <__umoddi3+0x500>
 4001cfc:	1cc7883a 	add	r3,r3,r19
 4001d00:	18a3c83a 	sub	r17,r3,r2
 4001d04:	b00b883a 	mov	r5,r22
 4001d08:	8809883a 	mov	r4,r17
 4001d0c:	4001f200 	call	4001f20 <__umodsi3>
 4001d10:	b00b883a 	mov	r5,r22
 4001d14:	8809883a 	mov	r4,r17
 4001d18:	1021883a 	mov	r16,r2
 4001d1c:	4001ebc0 	call	4001ebc <__udivsi3>
 4001d20:	100b883a 	mov	r5,r2
 4001d24:	b809883a 	mov	r4,r23
 4001d28:	8020943a 	slli	r16,r16,16
 4001d2c:	4001f780 	call	4001f78 <__mulsi3>
 4001d30:	a8ffffcc 	andi	r3,r21,65535
 4001d34:	1c06b03a 	or	r3,r3,r16
 4001d38:	1880042e 	bgeu	r3,r2,4001d4c <__umoddi3+0x54c>
 4001d3c:	1cc7883a 	add	r3,r3,r19
 4001d40:	1cc00236 	bltu	r3,r19,4001d4c <__umoddi3+0x54c>
 4001d44:	1880012e 	bgeu	r3,r2,4001d4c <__umoddi3+0x54c>
 4001d48:	1cc7883a 	add	r3,r3,r19
 4001d4c:	18a3c83a 	sub	r17,r3,r2
 4001d50:	003f2906 	br	40019f8 <__alt_heap_limit+0xfc0019f8>
 4001d54:	e48fc83a 	sub	r7,fp,r18
 4001d58:	1d49c83a 	sub	r4,r3,r21
 4001d5c:	e1f9803a 	cmpltu	fp,fp,r7
 4001d60:	2739c83a 	sub	fp,r4,fp
 4001d64:	8f09c83a 	sub	r4,r17,fp
 4001d68:	003fc306 	br	4001c78 <__alt_heap_limit+0xfc001c78>
 4001d6c:	01000604 	movi	r4,24
 4001d70:	003ef906 	br	4001958 <__alt_heap_limit+0xfc001958>
 4001d74:	00800604 	movi	r2,24
 4001d78:	003f1306 	br	40019c8 <__alt_heap_limit+0xfc0019c8>
 4001d7c:	01000604 	movi	r4,24
 4001d80:	003eb606 	br	400185c <__alt_heap_limit+0xfc00185c>
 4001d84:	40bf902e 	bgeu	r8,r2,4001bc8 <__alt_heap_limit+0xfc001bc8>
 4001d88:	b5bfff84 	addi	r22,r22,-2
 4001d8c:	4551883a 	add	r8,r8,r21
 4001d90:	003f8e06 	br	4001bcc <__alt_heap_limit+0xfc001bcc>
 4001d94:	18bf762e 	bgeu	r3,r2,4001b70 <__alt_heap_limit+0xfc001b70>
 4001d98:	8c7fff84 	addi	r17,r17,-2
 4001d9c:	1d47883a 	add	r3,r3,r21
 4001da0:	003f7406 	br	4001b74 <__alt_heap_limit+0xfc001b74>
 4001da4:	1cc7883a 	add	r3,r3,r19
 4001da8:	003ecd06 	br	40018e0 <__alt_heap_limit+0xfc0018e0>
 4001dac:	8005883a 	mov	r2,r16
 4001db0:	003ef806 	br	4001994 <__alt_heap_limit+0xfc001994>
 4001db4:	873fe736 	bltu	r16,fp,4001d54 <__alt_heap_limit+0xfc001d54>
 4001db8:	e00f883a 	mov	r7,fp
 4001dbc:	0009883a 	mov	r4,zero
 4001dc0:	003fad06 	br	4001c78 <__alt_heap_limit+0xfc001c78>

04001dc4 <__divsi3>:
 4001dc4:	20001b16 	blt	r4,zero,4001e34 <__divsi3+0x70>
 4001dc8:	000f883a 	mov	r7,zero
 4001dcc:	28001616 	blt	r5,zero,4001e28 <__divsi3+0x64>
 4001dd0:	200d883a 	mov	r6,r4
 4001dd4:	29001a2e 	bgeu	r5,r4,4001e40 <__divsi3+0x7c>
 4001dd8:	00800804 	movi	r2,32
 4001ddc:	00c00044 	movi	r3,1
 4001de0:	00000106 	br	4001de8 <__divsi3+0x24>
 4001de4:	10000d26 	beq	r2,zero,4001e1c <__divsi3+0x58>
 4001de8:	294b883a 	add	r5,r5,r5
 4001dec:	10bfffc4 	addi	r2,r2,-1
 4001df0:	18c7883a 	add	r3,r3,r3
 4001df4:	293ffb36 	bltu	r5,r4,4001de4 <__alt_heap_limit+0xfc001de4>
 4001df8:	0005883a 	mov	r2,zero
 4001dfc:	18000726 	beq	r3,zero,4001e1c <__divsi3+0x58>
 4001e00:	0005883a 	mov	r2,zero
 4001e04:	31400236 	bltu	r6,r5,4001e10 <__divsi3+0x4c>
 4001e08:	314dc83a 	sub	r6,r6,r5
 4001e0c:	10c4b03a 	or	r2,r2,r3
 4001e10:	1806d07a 	srli	r3,r3,1
 4001e14:	280ad07a 	srli	r5,r5,1
 4001e18:	183ffa1e 	bne	r3,zero,4001e04 <__alt_heap_limit+0xfc001e04>
 4001e1c:	38000126 	beq	r7,zero,4001e24 <__divsi3+0x60>
 4001e20:	0085c83a 	sub	r2,zero,r2
 4001e24:	f800283a 	ret
 4001e28:	014bc83a 	sub	r5,zero,r5
 4001e2c:	39c0005c 	xori	r7,r7,1
 4001e30:	003fe706 	br	4001dd0 <__alt_heap_limit+0xfc001dd0>
 4001e34:	0109c83a 	sub	r4,zero,r4
 4001e38:	01c00044 	movi	r7,1
 4001e3c:	003fe306 	br	4001dcc <__alt_heap_limit+0xfc001dcc>
 4001e40:	00c00044 	movi	r3,1
 4001e44:	003fee06 	br	4001e00 <__alt_heap_limit+0xfc001e00>

04001e48 <__modsi3>:
 4001e48:	20001716 	blt	r4,zero,4001ea8 <__modsi3+0x60>
 4001e4c:	000f883a 	mov	r7,zero
 4001e50:	2005883a 	mov	r2,r4
 4001e54:	28001216 	blt	r5,zero,4001ea0 <__modsi3+0x58>
 4001e58:	2900162e 	bgeu	r5,r4,4001eb4 <__modsi3+0x6c>
 4001e5c:	01800804 	movi	r6,32
 4001e60:	00c00044 	movi	r3,1
 4001e64:	00000106 	br	4001e6c <__modsi3+0x24>
 4001e68:	30000a26 	beq	r6,zero,4001e94 <__modsi3+0x4c>
 4001e6c:	294b883a 	add	r5,r5,r5
 4001e70:	31bfffc4 	addi	r6,r6,-1
 4001e74:	18c7883a 	add	r3,r3,r3
 4001e78:	293ffb36 	bltu	r5,r4,4001e68 <__alt_heap_limit+0xfc001e68>
 4001e7c:	18000526 	beq	r3,zero,4001e94 <__modsi3+0x4c>
 4001e80:	1806d07a 	srli	r3,r3,1
 4001e84:	11400136 	bltu	r2,r5,4001e8c <__modsi3+0x44>
 4001e88:	1145c83a 	sub	r2,r2,r5
 4001e8c:	280ad07a 	srli	r5,r5,1
 4001e90:	183ffb1e 	bne	r3,zero,4001e80 <__alt_heap_limit+0xfc001e80>
 4001e94:	38000126 	beq	r7,zero,4001e9c <__modsi3+0x54>
 4001e98:	0085c83a 	sub	r2,zero,r2
 4001e9c:	f800283a 	ret
 4001ea0:	014bc83a 	sub	r5,zero,r5
 4001ea4:	003fec06 	br	4001e58 <__alt_heap_limit+0xfc001e58>
 4001ea8:	0109c83a 	sub	r4,zero,r4
 4001eac:	01c00044 	movi	r7,1
 4001eb0:	003fe706 	br	4001e50 <__alt_heap_limit+0xfc001e50>
 4001eb4:	00c00044 	movi	r3,1
 4001eb8:	003ff106 	br	4001e80 <__alt_heap_limit+0xfc001e80>

04001ebc <__udivsi3>:
 4001ebc:	200d883a 	mov	r6,r4
 4001ec0:	2900152e 	bgeu	r5,r4,4001f18 <__udivsi3+0x5c>
 4001ec4:	28001416 	blt	r5,zero,4001f18 <__udivsi3+0x5c>
 4001ec8:	00800804 	movi	r2,32
 4001ecc:	00c00044 	movi	r3,1
 4001ed0:	00000206 	br	4001edc <__udivsi3+0x20>
 4001ed4:	10000e26 	beq	r2,zero,4001f10 <__udivsi3+0x54>
 4001ed8:	28000516 	blt	r5,zero,4001ef0 <__udivsi3+0x34>
 4001edc:	294b883a 	add	r5,r5,r5
 4001ee0:	10bfffc4 	addi	r2,r2,-1
 4001ee4:	18c7883a 	add	r3,r3,r3
 4001ee8:	293ffa36 	bltu	r5,r4,4001ed4 <__alt_heap_limit+0xfc001ed4>
 4001eec:	18000826 	beq	r3,zero,4001f10 <__udivsi3+0x54>
 4001ef0:	0005883a 	mov	r2,zero
 4001ef4:	31400236 	bltu	r6,r5,4001f00 <__udivsi3+0x44>
 4001ef8:	314dc83a 	sub	r6,r6,r5
 4001efc:	10c4b03a 	or	r2,r2,r3
 4001f00:	1806d07a 	srli	r3,r3,1
 4001f04:	280ad07a 	srli	r5,r5,1
 4001f08:	183ffa1e 	bne	r3,zero,4001ef4 <__alt_heap_limit+0xfc001ef4>
 4001f0c:	f800283a 	ret
 4001f10:	0005883a 	mov	r2,zero
 4001f14:	f800283a 	ret
 4001f18:	00c00044 	movi	r3,1
 4001f1c:	003ff406 	br	4001ef0 <__alt_heap_limit+0xfc001ef0>

04001f20 <__umodsi3>:
 4001f20:	2005883a 	mov	r2,r4
 4001f24:	2900122e 	bgeu	r5,r4,4001f70 <__umodsi3+0x50>
 4001f28:	28001116 	blt	r5,zero,4001f70 <__umodsi3+0x50>
 4001f2c:	01800804 	movi	r6,32
 4001f30:	00c00044 	movi	r3,1
 4001f34:	00000206 	br	4001f40 <__umodsi3+0x20>
 4001f38:	30000c26 	beq	r6,zero,4001f6c <__umodsi3+0x4c>
 4001f3c:	28000516 	blt	r5,zero,4001f54 <__umodsi3+0x34>
 4001f40:	294b883a 	add	r5,r5,r5
 4001f44:	31bfffc4 	addi	r6,r6,-1
 4001f48:	18c7883a 	add	r3,r3,r3
 4001f4c:	293ffa36 	bltu	r5,r4,4001f38 <__alt_heap_limit+0xfc001f38>
 4001f50:	18000626 	beq	r3,zero,4001f6c <__umodsi3+0x4c>
 4001f54:	1806d07a 	srli	r3,r3,1
 4001f58:	11400136 	bltu	r2,r5,4001f60 <__umodsi3+0x40>
 4001f5c:	1145c83a 	sub	r2,r2,r5
 4001f60:	280ad07a 	srli	r5,r5,1
 4001f64:	183ffb1e 	bne	r3,zero,4001f54 <__alt_heap_limit+0xfc001f54>
 4001f68:	f800283a 	ret
 4001f6c:	f800283a 	ret
 4001f70:	00c00044 	movi	r3,1
 4001f74:	003ff706 	br	4001f54 <__alt_heap_limit+0xfc001f54>

04001f78 <__mulsi3>:
 4001f78:	0005883a 	mov	r2,zero
 4001f7c:	20000726 	beq	r4,zero,4001f9c <__mulsi3+0x24>
 4001f80:	20c0004c 	andi	r3,r4,1
 4001f84:	2008d07a 	srli	r4,r4,1
 4001f88:	18000126 	beq	r3,zero,4001f90 <__mulsi3+0x18>
 4001f8c:	1145883a 	add	r2,r2,r5
 4001f90:	294b883a 	add	r5,r5,r5
 4001f94:	203ffa1e 	bne	r4,zero,4001f80 <__alt_heap_limit+0xfc001f80>
 4001f98:	f800283a 	ret
 4001f9c:	f800283a 	ret

04001fa0 <malloc>:
 4001fa0:	00810074 	movhi	r2,1025
 4001fa4:	10ad4f04 	addi	r2,r2,-19140
 4001fa8:	200b883a 	mov	r5,r4
 4001fac:	11000017 	ldw	r4,0(r2)
 4001fb0:	4001fc81 	jmpi	4001fc8 <_malloc_r>

04001fb4 <free>:
 4001fb4:	00810074 	movhi	r2,1025
 4001fb8:	10ad4f04 	addi	r2,r2,-19140
 4001fbc:	200b883a 	mov	r5,r4
 4001fc0:	11000017 	ldw	r4,0(r2)
 4001fc4:	4002ee41 	jmpi	4002ee4 <_free_r>

04001fc8 <_malloc_r>:
 4001fc8:	defff504 	addi	sp,sp,-44
 4001fcc:	dc800315 	stw	r18,12(sp)
 4001fd0:	dfc00a15 	stw	ra,40(sp)
 4001fd4:	df000915 	stw	fp,36(sp)
 4001fd8:	ddc00815 	stw	r23,32(sp)
 4001fdc:	dd800715 	stw	r22,28(sp)
 4001fe0:	dd400615 	stw	r21,24(sp)
 4001fe4:	dd000515 	stw	r20,20(sp)
 4001fe8:	dcc00415 	stw	r19,16(sp)
 4001fec:	dc400215 	stw	r17,8(sp)
 4001ff0:	dc000115 	stw	r16,4(sp)
 4001ff4:	288002c4 	addi	r2,r5,11
 4001ff8:	00c00584 	movi	r3,22
 4001ffc:	2025883a 	mov	r18,r4
 4002000:	18807f2e 	bgeu	r3,r2,4002200 <_malloc_r+0x238>
 4002004:	047ffe04 	movi	r17,-8
 4002008:	1462703a 	and	r17,r2,r17
 400200c:	8800a316 	blt	r17,zero,400229c <_malloc_r+0x2d4>
 4002010:	8940a236 	bltu	r17,r5,400229c <_malloc_r+0x2d4>
 4002014:	400531c0 	call	400531c <__malloc_lock>
 4002018:	00807dc4 	movi	r2,503
 400201c:	1441e92e 	bgeu	r2,r17,40027c4 <_malloc_r+0x7fc>
 4002020:	8804d27a 	srli	r2,r17,9
 4002024:	1000a126 	beq	r2,zero,40022ac <_malloc_r+0x2e4>
 4002028:	00c00104 	movi	r3,4
 400202c:	18811e36 	bltu	r3,r2,40024a8 <_malloc_r+0x4e0>
 4002030:	8804d1ba 	srli	r2,r17,6
 4002034:	12000e44 	addi	r8,r2,57
 4002038:	11c00e04 	addi	r7,r2,56
 400203c:	4209883a 	add	r4,r8,r8
 4002040:	04c10074 	movhi	r19,1025
 4002044:	2109883a 	add	r4,r4,r4
 4002048:	9ce6bf04 	addi	r19,r19,-25860
 400204c:	2109883a 	add	r4,r4,r4
 4002050:	9909883a 	add	r4,r19,r4
 4002054:	24000117 	ldw	r16,4(r4)
 4002058:	213ffe04 	addi	r4,r4,-8
 400205c:	24009726 	beq	r4,r16,40022bc <_malloc_r+0x2f4>
 4002060:	80800117 	ldw	r2,4(r16)
 4002064:	01bfff04 	movi	r6,-4
 4002068:	014003c4 	movi	r5,15
 400206c:	1184703a 	and	r2,r2,r6
 4002070:	1447c83a 	sub	r3,r2,r17
 4002074:	28c00716 	blt	r5,r3,4002094 <_malloc_r+0xcc>
 4002078:	1800920e 	bge	r3,zero,40022c4 <_malloc_r+0x2fc>
 400207c:	84000317 	ldw	r16,12(r16)
 4002080:	24008e26 	beq	r4,r16,40022bc <_malloc_r+0x2f4>
 4002084:	80800117 	ldw	r2,4(r16)
 4002088:	1184703a 	and	r2,r2,r6
 400208c:	1447c83a 	sub	r3,r2,r17
 4002090:	28fff90e 	bge	r5,r3,4002078 <__alt_heap_limit+0xfc002078>
 4002094:	3809883a 	mov	r4,r7
 4002098:	01810074 	movhi	r6,1025
 400209c:	9c000417 	ldw	r16,16(r19)
 40020a0:	31a6bf04 	addi	r6,r6,-25860
 40020a4:	32000204 	addi	r8,r6,8
 40020a8:	82013426 	beq	r16,r8,400257c <_malloc_r+0x5b4>
 40020ac:	80c00117 	ldw	r3,4(r16)
 40020b0:	00bfff04 	movi	r2,-4
 40020b4:	188e703a 	and	r7,r3,r2
 40020b8:	3c45c83a 	sub	r2,r7,r17
 40020bc:	00c003c4 	movi	r3,15
 40020c0:	18811f16 	blt	r3,r2,4002540 <_malloc_r+0x578>
 40020c4:	32000515 	stw	r8,20(r6)
 40020c8:	32000415 	stw	r8,16(r6)
 40020cc:	10007f0e 	bge	r2,zero,40022cc <_malloc_r+0x304>
 40020d0:	00807fc4 	movi	r2,511
 40020d4:	11c0fd36 	bltu	r2,r7,40024cc <_malloc_r+0x504>
 40020d8:	3806d0fa 	srli	r3,r7,3
 40020dc:	01c00044 	movi	r7,1
 40020e0:	30800117 	ldw	r2,4(r6)
 40020e4:	19400044 	addi	r5,r3,1
 40020e8:	294b883a 	add	r5,r5,r5
 40020ec:	1807d0ba 	srai	r3,r3,2
 40020f0:	294b883a 	add	r5,r5,r5
 40020f4:	294b883a 	add	r5,r5,r5
 40020f8:	298b883a 	add	r5,r5,r6
 40020fc:	38c6983a 	sll	r3,r7,r3
 4002100:	29c00017 	ldw	r7,0(r5)
 4002104:	2a7ffe04 	addi	r9,r5,-8
 4002108:	1886b03a 	or	r3,r3,r2
 400210c:	82400315 	stw	r9,12(r16)
 4002110:	81c00215 	stw	r7,8(r16)
 4002114:	30c00115 	stw	r3,4(r6)
 4002118:	2c000015 	stw	r16,0(r5)
 400211c:	3c000315 	stw	r16,12(r7)
 4002120:	2005d0ba 	srai	r2,r4,2
 4002124:	01400044 	movi	r5,1
 4002128:	288a983a 	sll	r5,r5,r2
 400212c:	19406f36 	bltu	r3,r5,40022ec <_malloc_r+0x324>
 4002130:	28c4703a 	and	r2,r5,r3
 4002134:	10000a1e 	bne	r2,zero,4002160 <_malloc_r+0x198>
 4002138:	00bfff04 	movi	r2,-4
 400213c:	294b883a 	add	r5,r5,r5
 4002140:	2088703a 	and	r4,r4,r2
 4002144:	28c4703a 	and	r2,r5,r3
 4002148:	21000104 	addi	r4,r4,4
 400214c:	1000041e 	bne	r2,zero,4002160 <_malloc_r+0x198>
 4002150:	294b883a 	add	r5,r5,r5
 4002154:	28c4703a 	and	r2,r5,r3
 4002158:	21000104 	addi	r4,r4,4
 400215c:	103ffc26 	beq	r2,zero,4002150 <__alt_heap_limit+0xfc002150>
 4002160:	02bfff04 	movi	r10,-4
 4002164:	024003c4 	movi	r9,15
 4002168:	21800044 	addi	r6,r4,1
 400216c:	318d883a 	add	r6,r6,r6
 4002170:	318d883a 	add	r6,r6,r6
 4002174:	318d883a 	add	r6,r6,r6
 4002178:	998d883a 	add	r6,r19,r6
 400217c:	333ffe04 	addi	r12,r6,-8
 4002180:	2017883a 	mov	r11,r4
 4002184:	31800104 	addi	r6,r6,4
 4002188:	34000017 	ldw	r16,0(r6)
 400218c:	31fffd04 	addi	r7,r6,-12
 4002190:	81c0041e 	bne	r16,r7,40021a4 <_malloc_r+0x1dc>
 4002194:	0000fb06 	br	4002584 <_malloc_r+0x5bc>
 4002198:	1801030e 	bge	r3,zero,40025a8 <_malloc_r+0x5e0>
 400219c:	84000317 	ldw	r16,12(r16)
 40021a0:	81c0f826 	beq	r16,r7,4002584 <_malloc_r+0x5bc>
 40021a4:	80800117 	ldw	r2,4(r16)
 40021a8:	1284703a 	and	r2,r2,r10
 40021ac:	1447c83a 	sub	r3,r2,r17
 40021b0:	48fff90e 	bge	r9,r3,4002198 <__alt_heap_limit+0xfc002198>
 40021b4:	80800317 	ldw	r2,12(r16)
 40021b8:	81000217 	ldw	r4,8(r16)
 40021bc:	89400054 	ori	r5,r17,1
 40021c0:	81400115 	stw	r5,4(r16)
 40021c4:	20800315 	stw	r2,12(r4)
 40021c8:	11000215 	stw	r4,8(r2)
 40021cc:	8463883a 	add	r17,r16,r17
 40021d0:	9c400515 	stw	r17,20(r19)
 40021d4:	9c400415 	stw	r17,16(r19)
 40021d8:	18800054 	ori	r2,r3,1
 40021dc:	88800115 	stw	r2,4(r17)
 40021e0:	8a000315 	stw	r8,12(r17)
 40021e4:	8a000215 	stw	r8,8(r17)
 40021e8:	88e3883a 	add	r17,r17,r3
 40021ec:	88c00015 	stw	r3,0(r17)
 40021f0:	9009883a 	mov	r4,r18
 40021f4:	40053400 	call	4005340 <__malloc_unlock>
 40021f8:	80800204 	addi	r2,r16,8
 40021fc:	00001b06 	br	400226c <_malloc_r+0x2a4>
 4002200:	04400404 	movi	r17,16
 4002204:	89402536 	bltu	r17,r5,400229c <_malloc_r+0x2d4>
 4002208:	400531c0 	call	400531c <__malloc_lock>
 400220c:	00800184 	movi	r2,6
 4002210:	01000084 	movi	r4,2
 4002214:	04c10074 	movhi	r19,1025
 4002218:	1085883a 	add	r2,r2,r2
 400221c:	9ce6bf04 	addi	r19,r19,-25860
 4002220:	1085883a 	add	r2,r2,r2
 4002224:	9885883a 	add	r2,r19,r2
 4002228:	14000117 	ldw	r16,4(r2)
 400222c:	10fffe04 	addi	r3,r2,-8
 4002230:	80c0d926 	beq	r16,r3,4002598 <_malloc_r+0x5d0>
 4002234:	80c00117 	ldw	r3,4(r16)
 4002238:	81000317 	ldw	r4,12(r16)
 400223c:	00bfff04 	movi	r2,-4
 4002240:	1884703a 	and	r2,r3,r2
 4002244:	81400217 	ldw	r5,8(r16)
 4002248:	8085883a 	add	r2,r16,r2
 400224c:	10c00117 	ldw	r3,4(r2)
 4002250:	29000315 	stw	r4,12(r5)
 4002254:	21400215 	stw	r5,8(r4)
 4002258:	18c00054 	ori	r3,r3,1
 400225c:	10c00115 	stw	r3,4(r2)
 4002260:	9009883a 	mov	r4,r18
 4002264:	40053400 	call	4005340 <__malloc_unlock>
 4002268:	80800204 	addi	r2,r16,8
 400226c:	dfc00a17 	ldw	ra,40(sp)
 4002270:	df000917 	ldw	fp,36(sp)
 4002274:	ddc00817 	ldw	r23,32(sp)
 4002278:	dd800717 	ldw	r22,28(sp)
 400227c:	dd400617 	ldw	r21,24(sp)
 4002280:	dd000517 	ldw	r20,20(sp)
 4002284:	dcc00417 	ldw	r19,16(sp)
 4002288:	dc800317 	ldw	r18,12(sp)
 400228c:	dc400217 	ldw	r17,8(sp)
 4002290:	dc000117 	ldw	r16,4(sp)
 4002294:	dec00b04 	addi	sp,sp,44
 4002298:	f800283a 	ret
 400229c:	00800304 	movi	r2,12
 40022a0:	90800015 	stw	r2,0(r18)
 40022a4:	0005883a 	mov	r2,zero
 40022a8:	003ff006 	br	400226c <__alt_heap_limit+0xfc00226c>
 40022ac:	01002004 	movi	r4,128
 40022b0:	02001004 	movi	r8,64
 40022b4:	01c00fc4 	movi	r7,63
 40022b8:	003f6106 	br	4002040 <__alt_heap_limit+0xfc002040>
 40022bc:	4009883a 	mov	r4,r8
 40022c0:	003f7506 	br	4002098 <__alt_heap_limit+0xfc002098>
 40022c4:	81000317 	ldw	r4,12(r16)
 40022c8:	003fde06 	br	4002244 <__alt_heap_limit+0xfc002244>
 40022cc:	81c5883a 	add	r2,r16,r7
 40022d0:	11400117 	ldw	r5,4(r2)
 40022d4:	9009883a 	mov	r4,r18
 40022d8:	29400054 	ori	r5,r5,1
 40022dc:	11400115 	stw	r5,4(r2)
 40022e0:	40053400 	call	4005340 <__malloc_unlock>
 40022e4:	80800204 	addi	r2,r16,8
 40022e8:	003fe006 	br	400226c <__alt_heap_limit+0xfc00226c>
 40022ec:	9c000217 	ldw	r16,8(r19)
 40022f0:	00bfff04 	movi	r2,-4
 40022f4:	85800117 	ldw	r22,4(r16)
 40022f8:	b0ac703a 	and	r22,r22,r2
 40022fc:	b4400336 	bltu	r22,r17,400230c <_malloc_r+0x344>
 4002300:	b445c83a 	sub	r2,r22,r17
 4002304:	00c003c4 	movi	r3,15
 4002308:	18805d16 	blt	r3,r2,4002480 <_malloc_r+0x4b8>
 400230c:	05c10074 	movhi	r23,1025
 4002310:	00810074 	movhi	r2,1025
 4002314:	10b4fc04 	addi	r2,r2,-11280
 4002318:	bded4c04 	addi	r23,r23,-19152
 400231c:	15400017 	ldw	r21,0(r2)
 4002320:	b8c00017 	ldw	r3,0(r23)
 4002324:	00bfffc4 	movi	r2,-1
 4002328:	858d883a 	add	r6,r16,r22
 400232c:	8d6b883a 	add	r21,r17,r21
 4002330:	1880ea26 	beq	r3,r2,40026dc <_malloc_r+0x714>
 4002334:	ad4403c4 	addi	r21,r21,4111
 4002338:	00bc0004 	movi	r2,-4096
 400233c:	a8aa703a 	and	r21,r21,r2
 4002340:	a80b883a 	mov	r5,r21
 4002344:	9009883a 	mov	r4,r18
 4002348:	d9800015 	stw	r6,0(sp)
 400234c:	40029240 	call	4002924 <_sbrk_r>
 4002350:	1029883a 	mov	r20,r2
 4002354:	00bfffc4 	movi	r2,-1
 4002358:	d9800017 	ldw	r6,0(sp)
 400235c:	a080e826 	beq	r20,r2,4002700 <_malloc_r+0x738>
 4002360:	a180a636 	bltu	r20,r6,40025fc <_malloc_r+0x634>
 4002364:	07010074 	movhi	fp,1025
 4002368:	e7350504 	addi	fp,fp,-11244
 400236c:	e0800017 	ldw	r2,0(fp)
 4002370:	a887883a 	add	r3,r21,r2
 4002374:	e0c00015 	stw	r3,0(fp)
 4002378:	3500e626 	beq	r6,r20,4002714 <_malloc_r+0x74c>
 400237c:	b9000017 	ldw	r4,0(r23)
 4002380:	00bfffc4 	movi	r2,-1
 4002384:	2080ee26 	beq	r4,r2,4002740 <_malloc_r+0x778>
 4002388:	a185c83a 	sub	r2,r20,r6
 400238c:	10c5883a 	add	r2,r2,r3
 4002390:	e0800015 	stw	r2,0(fp)
 4002394:	a0c001cc 	andi	r3,r20,7
 4002398:	1800bc26 	beq	r3,zero,400268c <_malloc_r+0x6c4>
 400239c:	a0e9c83a 	sub	r20,r20,r3
 40023a0:	00840204 	movi	r2,4104
 40023a4:	a5000204 	addi	r20,r20,8
 40023a8:	10c7c83a 	sub	r3,r2,r3
 40023ac:	a545883a 	add	r2,r20,r21
 40023b0:	1083ffcc 	andi	r2,r2,4095
 40023b4:	18abc83a 	sub	r21,r3,r2
 40023b8:	a80b883a 	mov	r5,r21
 40023bc:	9009883a 	mov	r4,r18
 40023c0:	40029240 	call	4002924 <_sbrk_r>
 40023c4:	00ffffc4 	movi	r3,-1
 40023c8:	10c0e126 	beq	r2,r3,4002750 <_malloc_r+0x788>
 40023cc:	1505c83a 	sub	r2,r2,r20
 40023d0:	1545883a 	add	r2,r2,r21
 40023d4:	10800054 	ori	r2,r2,1
 40023d8:	e0c00017 	ldw	r3,0(fp)
 40023dc:	9d000215 	stw	r20,8(r19)
 40023e0:	a0800115 	stw	r2,4(r20)
 40023e4:	a8c7883a 	add	r3,r21,r3
 40023e8:	e0c00015 	stw	r3,0(fp)
 40023ec:	84c00e26 	beq	r16,r19,4002428 <_malloc_r+0x460>
 40023f0:	018003c4 	movi	r6,15
 40023f4:	3580a72e 	bgeu	r6,r22,4002694 <_malloc_r+0x6cc>
 40023f8:	81400117 	ldw	r5,4(r16)
 40023fc:	013ffe04 	movi	r4,-8
 4002400:	b0bffd04 	addi	r2,r22,-12
 4002404:	1104703a 	and	r2,r2,r4
 4002408:	2900004c 	andi	r4,r5,1
 400240c:	2088b03a 	or	r4,r4,r2
 4002410:	81000115 	stw	r4,4(r16)
 4002414:	01400144 	movi	r5,5
 4002418:	8089883a 	add	r4,r16,r2
 400241c:	21400115 	stw	r5,4(r4)
 4002420:	21400215 	stw	r5,8(r4)
 4002424:	3080cd36 	bltu	r6,r2,400275c <_malloc_r+0x794>
 4002428:	00810074 	movhi	r2,1025
 400242c:	10b4fb04 	addi	r2,r2,-11284
 4002430:	11000017 	ldw	r4,0(r2)
 4002434:	20c0012e 	bgeu	r4,r3,400243c <_malloc_r+0x474>
 4002438:	10c00015 	stw	r3,0(r2)
 400243c:	00810074 	movhi	r2,1025
 4002440:	10b4fa04 	addi	r2,r2,-11288
 4002444:	11000017 	ldw	r4,0(r2)
 4002448:	9c000217 	ldw	r16,8(r19)
 400244c:	20c0012e 	bgeu	r4,r3,4002454 <_malloc_r+0x48c>
 4002450:	10c00015 	stw	r3,0(r2)
 4002454:	80c00117 	ldw	r3,4(r16)
 4002458:	00bfff04 	movi	r2,-4
 400245c:	1886703a 	and	r3,r3,r2
 4002460:	1c45c83a 	sub	r2,r3,r17
 4002464:	1c400236 	bltu	r3,r17,4002470 <_malloc_r+0x4a8>
 4002468:	00c003c4 	movi	r3,15
 400246c:	18800416 	blt	r3,r2,4002480 <_malloc_r+0x4b8>
 4002470:	9009883a 	mov	r4,r18
 4002474:	40053400 	call	4005340 <__malloc_unlock>
 4002478:	0005883a 	mov	r2,zero
 400247c:	003f7b06 	br	400226c <__alt_heap_limit+0xfc00226c>
 4002480:	88c00054 	ori	r3,r17,1
 4002484:	80c00115 	stw	r3,4(r16)
 4002488:	8463883a 	add	r17,r16,r17
 400248c:	10800054 	ori	r2,r2,1
 4002490:	9c400215 	stw	r17,8(r19)
 4002494:	88800115 	stw	r2,4(r17)
 4002498:	9009883a 	mov	r4,r18
 400249c:	40053400 	call	4005340 <__malloc_unlock>
 40024a0:	80800204 	addi	r2,r16,8
 40024a4:	003f7106 	br	400226c <__alt_heap_limit+0xfc00226c>
 40024a8:	00c00504 	movi	r3,20
 40024ac:	18804a2e 	bgeu	r3,r2,40025d8 <_malloc_r+0x610>
 40024b0:	00c01504 	movi	r3,84
 40024b4:	18806e36 	bltu	r3,r2,4002670 <_malloc_r+0x6a8>
 40024b8:	8804d33a 	srli	r2,r17,12
 40024bc:	12001bc4 	addi	r8,r2,111
 40024c0:	11c01b84 	addi	r7,r2,110
 40024c4:	4209883a 	add	r4,r8,r8
 40024c8:	003edd06 	br	4002040 <__alt_heap_limit+0xfc002040>
 40024cc:	3804d27a 	srli	r2,r7,9
 40024d0:	00c00104 	movi	r3,4
 40024d4:	1880442e 	bgeu	r3,r2,40025e8 <_malloc_r+0x620>
 40024d8:	00c00504 	movi	r3,20
 40024dc:	18808136 	bltu	r3,r2,40026e4 <_malloc_r+0x71c>
 40024e0:	11401704 	addi	r5,r2,92
 40024e4:	10c016c4 	addi	r3,r2,91
 40024e8:	294b883a 	add	r5,r5,r5
 40024ec:	294b883a 	add	r5,r5,r5
 40024f0:	294b883a 	add	r5,r5,r5
 40024f4:	994b883a 	add	r5,r19,r5
 40024f8:	28800017 	ldw	r2,0(r5)
 40024fc:	01810074 	movhi	r6,1025
 4002500:	297ffe04 	addi	r5,r5,-8
 4002504:	31a6bf04 	addi	r6,r6,-25860
 4002508:	28806526 	beq	r5,r2,40026a0 <_malloc_r+0x6d8>
 400250c:	01bfff04 	movi	r6,-4
 4002510:	10c00117 	ldw	r3,4(r2)
 4002514:	1986703a 	and	r3,r3,r6
 4002518:	38c0022e 	bgeu	r7,r3,4002524 <_malloc_r+0x55c>
 400251c:	10800217 	ldw	r2,8(r2)
 4002520:	28bffb1e 	bne	r5,r2,4002510 <__alt_heap_limit+0xfc002510>
 4002524:	11400317 	ldw	r5,12(r2)
 4002528:	98c00117 	ldw	r3,4(r19)
 400252c:	81400315 	stw	r5,12(r16)
 4002530:	80800215 	stw	r2,8(r16)
 4002534:	2c000215 	stw	r16,8(r5)
 4002538:	14000315 	stw	r16,12(r2)
 400253c:	003ef806 	br	4002120 <__alt_heap_limit+0xfc002120>
 4002540:	88c00054 	ori	r3,r17,1
 4002544:	80c00115 	stw	r3,4(r16)
 4002548:	8463883a 	add	r17,r16,r17
 400254c:	34400515 	stw	r17,20(r6)
 4002550:	34400415 	stw	r17,16(r6)
 4002554:	10c00054 	ori	r3,r2,1
 4002558:	8a000315 	stw	r8,12(r17)
 400255c:	8a000215 	stw	r8,8(r17)
 4002560:	88c00115 	stw	r3,4(r17)
 4002564:	88a3883a 	add	r17,r17,r2
 4002568:	88800015 	stw	r2,0(r17)
 400256c:	9009883a 	mov	r4,r18
 4002570:	40053400 	call	4005340 <__malloc_unlock>
 4002574:	80800204 	addi	r2,r16,8
 4002578:	003f3c06 	br	400226c <__alt_heap_limit+0xfc00226c>
 400257c:	30c00117 	ldw	r3,4(r6)
 4002580:	003ee706 	br	4002120 <__alt_heap_limit+0xfc002120>
 4002584:	5ac00044 	addi	r11,r11,1
 4002588:	588000cc 	andi	r2,r11,3
 400258c:	31800204 	addi	r6,r6,8
 4002590:	103efd1e 	bne	r2,zero,4002188 <__alt_heap_limit+0xfc002188>
 4002594:	00002406 	br	4002628 <_malloc_r+0x660>
 4002598:	14000317 	ldw	r16,12(r2)
 400259c:	143f251e 	bne	r2,r16,4002234 <__alt_heap_limit+0xfc002234>
 40025a0:	21000084 	addi	r4,r4,2
 40025a4:	003ebc06 	br	4002098 <__alt_heap_limit+0xfc002098>
 40025a8:	8085883a 	add	r2,r16,r2
 40025ac:	10c00117 	ldw	r3,4(r2)
 40025b0:	81000317 	ldw	r4,12(r16)
 40025b4:	81400217 	ldw	r5,8(r16)
 40025b8:	18c00054 	ori	r3,r3,1
 40025bc:	10c00115 	stw	r3,4(r2)
 40025c0:	29000315 	stw	r4,12(r5)
 40025c4:	21400215 	stw	r5,8(r4)
 40025c8:	9009883a 	mov	r4,r18
 40025cc:	40053400 	call	4005340 <__malloc_unlock>
 40025d0:	80800204 	addi	r2,r16,8
 40025d4:	003f2506 	br	400226c <__alt_heap_limit+0xfc00226c>
 40025d8:	12001704 	addi	r8,r2,92
 40025dc:	11c016c4 	addi	r7,r2,91
 40025e0:	4209883a 	add	r4,r8,r8
 40025e4:	003e9606 	br	4002040 <__alt_heap_limit+0xfc002040>
 40025e8:	3804d1ba 	srli	r2,r7,6
 40025ec:	11400e44 	addi	r5,r2,57
 40025f0:	10c00e04 	addi	r3,r2,56
 40025f4:	294b883a 	add	r5,r5,r5
 40025f8:	003fbc06 	br	40024ec <__alt_heap_limit+0xfc0024ec>
 40025fc:	84ff5926 	beq	r16,r19,4002364 <__alt_heap_limit+0xfc002364>
 4002600:	00810074 	movhi	r2,1025
 4002604:	10a6bf04 	addi	r2,r2,-25860
 4002608:	14000217 	ldw	r16,8(r2)
 400260c:	00bfff04 	movi	r2,-4
 4002610:	80c00117 	ldw	r3,4(r16)
 4002614:	1886703a 	and	r3,r3,r2
 4002618:	003f9106 	br	4002460 <__alt_heap_limit+0xfc002460>
 400261c:	60800217 	ldw	r2,8(r12)
 4002620:	213fffc4 	addi	r4,r4,-1
 4002624:	1300651e 	bne	r2,r12,40027bc <_malloc_r+0x7f4>
 4002628:	208000cc 	andi	r2,r4,3
 400262c:	633ffe04 	addi	r12,r12,-8
 4002630:	103ffa1e 	bne	r2,zero,400261c <__alt_heap_limit+0xfc00261c>
 4002634:	98800117 	ldw	r2,4(r19)
 4002638:	0146303a 	nor	r3,zero,r5
 400263c:	1884703a 	and	r2,r3,r2
 4002640:	98800115 	stw	r2,4(r19)
 4002644:	294b883a 	add	r5,r5,r5
 4002648:	117f2836 	bltu	r2,r5,40022ec <__alt_heap_limit+0xfc0022ec>
 400264c:	283f2726 	beq	r5,zero,40022ec <__alt_heap_limit+0xfc0022ec>
 4002650:	2886703a 	and	r3,r5,r2
 4002654:	5809883a 	mov	r4,r11
 4002658:	183ec31e 	bne	r3,zero,4002168 <__alt_heap_limit+0xfc002168>
 400265c:	294b883a 	add	r5,r5,r5
 4002660:	2886703a 	and	r3,r5,r2
 4002664:	21000104 	addi	r4,r4,4
 4002668:	183ffc26 	beq	r3,zero,400265c <__alt_heap_limit+0xfc00265c>
 400266c:	003ebe06 	br	4002168 <__alt_heap_limit+0xfc002168>
 4002670:	00c05504 	movi	r3,340
 4002674:	18801236 	bltu	r3,r2,40026c0 <_malloc_r+0x6f8>
 4002678:	8804d3fa 	srli	r2,r17,15
 400267c:	12001e04 	addi	r8,r2,120
 4002680:	11c01dc4 	addi	r7,r2,119
 4002684:	4209883a 	add	r4,r8,r8
 4002688:	003e6d06 	br	4002040 <__alt_heap_limit+0xfc002040>
 400268c:	00c40004 	movi	r3,4096
 4002690:	003f4606 	br	40023ac <__alt_heap_limit+0xfc0023ac>
 4002694:	00800044 	movi	r2,1
 4002698:	a0800115 	stw	r2,4(r20)
 400269c:	003f7406 	br	4002470 <__alt_heap_limit+0xfc002470>
 40026a0:	1805d0ba 	srai	r2,r3,2
 40026a4:	01c00044 	movi	r7,1
 40026a8:	30c00117 	ldw	r3,4(r6)
 40026ac:	388e983a 	sll	r7,r7,r2
 40026b0:	2805883a 	mov	r2,r5
 40026b4:	38c6b03a 	or	r3,r7,r3
 40026b8:	30c00115 	stw	r3,4(r6)
 40026bc:	003f9b06 	br	400252c <__alt_heap_limit+0xfc00252c>
 40026c0:	00c15504 	movi	r3,1364
 40026c4:	18801a36 	bltu	r3,r2,4002730 <_malloc_r+0x768>
 40026c8:	8804d4ba 	srli	r2,r17,18
 40026cc:	12001f44 	addi	r8,r2,125
 40026d0:	11c01f04 	addi	r7,r2,124
 40026d4:	4209883a 	add	r4,r8,r8
 40026d8:	003e5906 	br	4002040 <__alt_heap_limit+0xfc002040>
 40026dc:	ad400404 	addi	r21,r21,16
 40026e0:	003f1706 	br	4002340 <__alt_heap_limit+0xfc002340>
 40026e4:	00c01504 	movi	r3,84
 40026e8:	18802336 	bltu	r3,r2,4002778 <_malloc_r+0x7b0>
 40026ec:	3804d33a 	srli	r2,r7,12
 40026f0:	11401bc4 	addi	r5,r2,111
 40026f4:	10c01b84 	addi	r3,r2,110
 40026f8:	294b883a 	add	r5,r5,r5
 40026fc:	003f7b06 	br	40024ec <__alt_heap_limit+0xfc0024ec>
 4002700:	9c000217 	ldw	r16,8(r19)
 4002704:	00bfff04 	movi	r2,-4
 4002708:	80c00117 	ldw	r3,4(r16)
 400270c:	1886703a 	and	r3,r3,r2
 4002710:	003f5306 	br	4002460 <__alt_heap_limit+0xfc002460>
 4002714:	3083ffcc 	andi	r2,r6,4095
 4002718:	103f181e 	bne	r2,zero,400237c <__alt_heap_limit+0xfc00237c>
 400271c:	99000217 	ldw	r4,8(r19)
 4002720:	b545883a 	add	r2,r22,r21
 4002724:	10800054 	ori	r2,r2,1
 4002728:	20800115 	stw	r2,4(r4)
 400272c:	003f3e06 	br	4002428 <__alt_heap_limit+0xfc002428>
 4002730:	01003f84 	movi	r4,254
 4002734:	02001fc4 	movi	r8,127
 4002738:	01c01f84 	movi	r7,126
 400273c:	003e4006 	br	4002040 <__alt_heap_limit+0xfc002040>
 4002740:	00810074 	movhi	r2,1025
 4002744:	10ad4c04 	addi	r2,r2,-19152
 4002748:	15000015 	stw	r20,0(r2)
 400274c:	003f1106 	br	4002394 <__alt_heap_limit+0xfc002394>
 4002750:	00800044 	movi	r2,1
 4002754:	002b883a 	mov	r21,zero
 4002758:	003f1f06 	br	40023d8 <__alt_heap_limit+0xfc0023d8>
 400275c:	81400204 	addi	r5,r16,8
 4002760:	9009883a 	mov	r4,r18
 4002764:	4002ee40 	call	4002ee4 <_free_r>
 4002768:	00810074 	movhi	r2,1025
 400276c:	10b50504 	addi	r2,r2,-11244
 4002770:	10c00017 	ldw	r3,0(r2)
 4002774:	003f2c06 	br	4002428 <__alt_heap_limit+0xfc002428>
 4002778:	00c05504 	movi	r3,340
 400277c:	18800536 	bltu	r3,r2,4002794 <_malloc_r+0x7cc>
 4002780:	3804d3fa 	srli	r2,r7,15
 4002784:	11401e04 	addi	r5,r2,120
 4002788:	10c01dc4 	addi	r3,r2,119
 400278c:	294b883a 	add	r5,r5,r5
 4002790:	003f5606 	br	40024ec <__alt_heap_limit+0xfc0024ec>
 4002794:	00c15504 	movi	r3,1364
 4002798:	18800536 	bltu	r3,r2,40027b0 <_malloc_r+0x7e8>
 400279c:	3804d4ba 	srli	r2,r7,18
 40027a0:	11401f44 	addi	r5,r2,125
 40027a4:	10c01f04 	addi	r3,r2,124
 40027a8:	294b883a 	add	r5,r5,r5
 40027ac:	003f4f06 	br	40024ec <__alt_heap_limit+0xfc0024ec>
 40027b0:	01403f84 	movi	r5,254
 40027b4:	00c01f84 	movi	r3,126
 40027b8:	003f4c06 	br	40024ec <__alt_heap_limit+0xfc0024ec>
 40027bc:	98800117 	ldw	r2,4(r19)
 40027c0:	003fa006 	br	4002644 <__alt_heap_limit+0xfc002644>
 40027c4:	8808d0fa 	srli	r4,r17,3
 40027c8:	20800044 	addi	r2,r4,1
 40027cc:	1085883a 	add	r2,r2,r2
 40027d0:	003e9006 	br	4002214 <__alt_heap_limit+0xfc002214>

040027d4 <_puts_r>:
 40027d4:	defff604 	addi	sp,sp,-40
 40027d8:	dc000715 	stw	r16,28(sp)
 40027dc:	2021883a 	mov	r16,r4
 40027e0:	2809883a 	mov	r4,r5
 40027e4:	dc400815 	stw	r17,32(sp)
 40027e8:	dfc00915 	stw	ra,36(sp)
 40027ec:	2823883a 	mov	r17,r5
 40027f0:	40029780 	call	4002978 <strlen>
 40027f4:	10c00044 	addi	r3,r2,1
 40027f8:	d8800115 	stw	r2,4(sp)
 40027fc:	00810074 	movhi	r2,1025
 4002800:	10a5b204 	addi	r2,r2,-26936
 4002804:	d8800215 	stw	r2,8(sp)
 4002808:	00800044 	movi	r2,1
 400280c:	d8800315 	stw	r2,12(sp)
 4002810:	00800084 	movi	r2,2
 4002814:	dc400015 	stw	r17,0(sp)
 4002818:	d8c00615 	stw	r3,24(sp)
 400281c:	dec00415 	stw	sp,16(sp)
 4002820:	d8800515 	stw	r2,20(sp)
 4002824:	80000226 	beq	r16,zero,4002830 <_puts_r+0x5c>
 4002828:	80800e17 	ldw	r2,56(r16)
 400282c:	10001426 	beq	r2,zero,4002880 <_puts_r+0xac>
 4002830:	81400217 	ldw	r5,8(r16)
 4002834:	2880030b 	ldhu	r2,12(r5)
 4002838:	10c8000c 	andi	r3,r2,8192
 400283c:	1800061e 	bne	r3,zero,4002858 <_puts_r+0x84>
 4002840:	29001917 	ldw	r4,100(r5)
 4002844:	00f7ffc4 	movi	r3,-8193
 4002848:	10880014 	ori	r2,r2,8192
 400284c:	20c6703a 	and	r3,r4,r3
 4002850:	2880030d 	sth	r2,12(r5)
 4002854:	28c01915 	stw	r3,100(r5)
 4002858:	d9800404 	addi	r6,sp,16
 400285c:	8009883a 	mov	r4,r16
 4002860:	40031f40 	call	40031f4 <__sfvwrite_r>
 4002864:	1000091e 	bne	r2,zero,400288c <_puts_r+0xb8>
 4002868:	00800284 	movi	r2,10
 400286c:	dfc00917 	ldw	ra,36(sp)
 4002870:	dc400817 	ldw	r17,32(sp)
 4002874:	dc000717 	ldw	r16,28(sp)
 4002878:	dec00a04 	addi	sp,sp,40
 400287c:	f800283a 	ret
 4002880:	8009883a 	mov	r4,r16
 4002884:	4002d700 	call	4002d70 <__sinit>
 4002888:	003fe906 	br	4002830 <__alt_heap_limit+0xfc002830>
 400288c:	00bfffc4 	movi	r2,-1
 4002890:	003ff606 	br	400286c <__alt_heap_limit+0xfc00286c>

04002894 <puts>:
 4002894:	00810074 	movhi	r2,1025
 4002898:	10ad4f04 	addi	r2,r2,-19140
 400289c:	200b883a 	mov	r5,r4
 40028a0:	11000017 	ldw	r4,0(r2)
 40028a4:	40027d41 	jmpi	40027d4 <_puts_r>

040028a8 <srand>:
 40028a8:	00810074 	movhi	r2,1025
 40028ac:	10ad4f04 	addi	r2,r2,-19140
 40028b0:	10800017 	ldw	r2,0(r2)
 40028b4:	11002915 	stw	r4,164(r2)
 40028b8:	10002a15 	stw	zero,168(r2)
 40028bc:	f800283a 	ret

040028c0 <rand>:
 40028c0:	00810074 	movhi	r2,1025
 40028c4:	defffe04 	addi	sp,sp,-8
 40028c8:	10ad4f04 	addi	r2,r2,-19140
 40028cc:	dc000015 	stw	r16,0(sp)
 40028d0:	14000017 	ldw	r16,0(r2)
 40028d4:	dfc00115 	stw	ra,4(sp)
 40028d8:	01932574 	movhi	r6,19605
 40028dc:	81002917 	ldw	r4,164(r16)
 40028e0:	81402a17 	ldw	r5,168(r16)
 40028e4:	01d614b4 	movhi	r7,22610
 40028e8:	319fcb44 	addi	r6,r6,32557
 40028ec:	39fd0b44 	addi	r7,r7,-3027
 40028f0:	4004c740 	call	4004c74 <__muldi3>
 40028f4:	11000044 	addi	r4,r2,1
 40028f8:	2085803a 	cmpltu	r2,r4,r2
 40028fc:	10c7883a 	add	r3,r2,r3
 4002900:	00a00034 	movhi	r2,32768
 4002904:	10bfffc4 	addi	r2,r2,-1
 4002908:	1884703a 	and	r2,r3,r2
 400290c:	81002915 	stw	r4,164(r16)
 4002910:	80c02a15 	stw	r3,168(r16)
 4002914:	dfc00117 	ldw	ra,4(sp)
 4002918:	dc000017 	ldw	r16,0(sp)
 400291c:	dec00204 	addi	sp,sp,8
 4002920:	f800283a 	ret

04002924 <_sbrk_r>:
 4002924:	defffd04 	addi	sp,sp,-12
 4002928:	dc000015 	stw	r16,0(sp)
 400292c:	04010074 	movhi	r16,1025
 4002930:	dc400115 	stw	r17,4(sp)
 4002934:	8434fd04 	addi	r16,r16,-11276
 4002938:	2023883a 	mov	r17,r4
 400293c:	2809883a 	mov	r4,r5
 4002940:	dfc00215 	stw	ra,8(sp)
 4002944:	80000015 	stw	zero,0(r16)
 4002948:	40055280 	call	4005528 <sbrk>
 400294c:	00ffffc4 	movi	r3,-1
 4002950:	10c00526 	beq	r2,r3,4002968 <_sbrk_r+0x44>
 4002954:	dfc00217 	ldw	ra,8(sp)
 4002958:	dc400117 	ldw	r17,4(sp)
 400295c:	dc000017 	ldw	r16,0(sp)
 4002960:	dec00304 	addi	sp,sp,12
 4002964:	f800283a 	ret
 4002968:	80c00017 	ldw	r3,0(r16)
 400296c:	183ff926 	beq	r3,zero,4002954 <__alt_heap_limit+0xfc002954>
 4002970:	88c00015 	stw	r3,0(r17)
 4002974:	003ff706 	br	4002954 <__alt_heap_limit+0xfc002954>

04002978 <strlen>:
 4002978:	208000cc 	andi	r2,r4,3
 400297c:	10002026 	beq	r2,zero,4002a00 <strlen+0x88>
 4002980:	20800007 	ldb	r2,0(r4)
 4002984:	10002026 	beq	r2,zero,4002a08 <strlen+0x90>
 4002988:	2005883a 	mov	r2,r4
 400298c:	00000206 	br	4002998 <strlen+0x20>
 4002990:	10c00007 	ldb	r3,0(r2)
 4002994:	18001826 	beq	r3,zero,40029f8 <strlen+0x80>
 4002998:	10800044 	addi	r2,r2,1
 400299c:	10c000cc 	andi	r3,r2,3
 40029a0:	183ffb1e 	bne	r3,zero,4002990 <__alt_heap_limit+0xfc002990>
 40029a4:	10c00017 	ldw	r3,0(r2)
 40029a8:	01ffbff4 	movhi	r7,65279
 40029ac:	39ffbfc4 	addi	r7,r7,-257
 40029b0:	00ca303a 	nor	r5,zero,r3
 40029b4:	01a02074 	movhi	r6,32897
 40029b8:	19c7883a 	add	r3,r3,r7
 40029bc:	31a02004 	addi	r6,r6,-32640
 40029c0:	1946703a 	and	r3,r3,r5
 40029c4:	1986703a 	and	r3,r3,r6
 40029c8:	1800091e 	bne	r3,zero,40029f0 <strlen+0x78>
 40029cc:	10800104 	addi	r2,r2,4
 40029d0:	10c00017 	ldw	r3,0(r2)
 40029d4:	19cb883a 	add	r5,r3,r7
 40029d8:	00c6303a 	nor	r3,zero,r3
 40029dc:	28c6703a 	and	r3,r5,r3
 40029e0:	1986703a 	and	r3,r3,r6
 40029e4:	183ff926 	beq	r3,zero,40029cc <__alt_heap_limit+0xfc0029cc>
 40029e8:	00000106 	br	40029f0 <strlen+0x78>
 40029ec:	10800044 	addi	r2,r2,1
 40029f0:	10c00007 	ldb	r3,0(r2)
 40029f4:	183ffd1e 	bne	r3,zero,40029ec <__alt_heap_limit+0xfc0029ec>
 40029f8:	1105c83a 	sub	r2,r2,r4
 40029fc:	f800283a 	ret
 4002a00:	2005883a 	mov	r2,r4
 4002a04:	003fe706 	br	40029a4 <__alt_heap_limit+0xfc0029a4>
 4002a08:	0005883a 	mov	r2,zero
 4002a0c:	f800283a 	ret

04002a10 <__fp_unlock>:
 4002a10:	0005883a 	mov	r2,zero
 4002a14:	f800283a 	ret

04002a18 <_cleanup_r>:
 4002a18:	01410034 	movhi	r5,1024
 4002a1c:	29516704 	addi	r5,r5,17820
 4002a20:	40037801 	jmpi	4003780 <_fwalk_reent>

04002a24 <__sinit.part.1>:
 4002a24:	defff704 	addi	sp,sp,-36
 4002a28:	00c10034 	movhi	r3,1024
 4002a2c:	dfc00815 	stw	ra,32(sp)
 4002a30:	ddc00715 	stw	r23,28(sp)
 4002a34:	dd800615 	stw	r22,24(sp)
 4002a38:	dd400515 	stw	r21,20(sp)
 4002a3c:	dd000415 	stw	r20,16(sp)
 4002a40:	dcc00315 	stw	r19,12(sp)
 4002a44:	dc800215 	stw	r18,8(sp)
 4002a48:	dc400115 	stw	r17,4(sp)
 4002a4c:	dc000015 	stw	r16,0(sp)
 4002a50:	18ca8604 	addi	r3,r3,10776
 4002a54:	24000117 	ldw	r16,4(r4)
 4002a58:	20c00f15 	stw	r3,60(r4)
 4002a5c:	2080bb04 	addi	r2,r4,748
 4002a60:	00c000c4 	movi	r3,3
 4002a64:	20c0b915 	stw	r3,740(r4)
 4002a68:	2080ba15 	stw	r2,744(r4)
 4002a6c:	2000b815 	stw	zero,736(r4)
 4002a70:	05c00204 	movi	r23,8
 4002a74:	00800104 	movi	r2,4
 4002a78:	2025883a 	mov	r18,r4
 4002a7c:	b80d883a 	mov	r6,r23
 4002a80:	81001704 	addi	r4,r16,92
 4002a84:	000b883a 	mov	r5,zero
 4002a88:	80000015 	stw	zero,0(r16)
 4002a8c:	80000115 	stw	zero,4(r16)
 4002a90:	80000215 	stw	zero,8(r16)
 4002a94:	8080030d 	sth	r2,12(r16)
 4002a98:	80001915 	stw	zero,100(r16)
 4002a9c:	8000038d 	sth	zero,14(r16)
 4002aa0:	80000415 	stw	zero,16(r16)
 4002aa4:	80000515 	stw	zero,20(r16)
 4002aa8:	80000615 	stw	zero,24(r16)
 4002aac:	4003bcc0 	call	4003bcc <memset>
 4002ab0:	05810034 	movhi	r22,1024
 4002ab4:	94400217 	ldw	r17,8(r18)
 4002ab8:	05410034 	movhi	r21,1024
 4002abc:	05010034 	movhi	r20,1024
 4002ac0:	04c10034 	movhi	r19,1024
 4002ac4:	b5909604 	addi	r22,r22,16984
 4002ac8:	ad50ad04 	addi	r21,r21,17076
 4002acc:	a510cc04 	addi	r20,r20,17200
 4002ad0:	9cd0e304 	addi	r19,r19,17292
 4002ad4:	85800815 	stw	r22,32(r16)
 4002ad8:	85400915 	stw	r21,36(r16)
 4002adc:	85000a15 	stw	r20,40(r16)
 4002ae0:	84c00b15 	stw	r19,44(r16)
 4002ae4:	84000715 	stw	r16,28(r16)
 4002ae8:	00800284 	movi	r2,10
 4002aec:	8880030d 	sth	r2,12(r17)
 4002af0:	00800044 	movi	r2,1
 4002af4:	b80d883a 	mov	r6,r23
 4002af8:	89001704 	addi	r4,r17,92
 4002afc:	000b883a 	mov	r5,zero
 4002b00:	88000015 	stw	zero,0(r17)
 4002b04:	88000115 	stw	zero,4(r17)
 4002b08:	88000215 	stw	zero,8(r17)
 4002b0c:	88001915 	stw	zero,100(r17)
 4002b10:	8880038d 	sth	r2,14(r17)
 4002b14:	88000415 	stw	zero,16(r17)
 4002b18:	88000515 	stw	zero,20(r17)
 4002b1c:	88000615 	stw	zero,24(r17)
 4002b20:	4003bcc0 	call	4003bcc <memset>
 4002b24:	94000317 	ldw	r16,12(r18)
 4002b28:	00800484 	movi	r2,18
 4002b2c:	8c400715 	stw	r17,28(r17)
 4002b30:	8d800815 	stw	r22,32(r17)
 4002b34:	8d400915 	stw	r21,36(r17)
 4002b38:	8d000a15 	stw	r20,40(r17)
 4002b3c:	8cc00b15 	stw	r19,44(r17)
 4002b40:	8080030d 	sth	r2,12(r16)
 4002b44:	00800084 	movi	r2,2
 4002b48:	80000015 	stw	zero,0(r16)
 4002b4c:	80000115 	stw	zero,4(r16)
 4002b50:	80000215 	stw	zero,8(r16)
 4002b54:	80001915 	stw	zero,100(r16)
 4002b58:	8080038d 	sth	r2,14(r16)
 4002b5c:	80000415 	stw	zero,16(r16)
 4002b60:	80000515 	stw	zero,20(r16)
 4002b64:	80000615 	stw	zero,24(r16)
 4002b68:	b80d883a 	mov	r6,r23
 4002b6c:	000b883a 	mov	r5,zero
 4002b70:	81001704 	addi	r4,r16,92
 4002b74:	4003bcc0 	call	4003bcc <memset>
 4002b78:	00800044 	movi	r2,1
 4002b7c:	84000715 	stw	r16,28(r16)
 4002b80:	85800815 	stw	r22,32(r16)
 4002b84:	85400915 	stw	r21,36(r16)
 4002b88:	85000a15 	stw	r20,40(r16)
 4002b8c:	84c00b15 	stw	r19,44(r16)
 4002b90:	90800e15 	stw	r2,56(r18)
 4002b94:	dfc00817 	ldw	ra,32(sp)
 4002b98:	ddc00717 	ldw	r23,28(sp)
 4002b9c:	dd800617 	ldw	r22,24(sp)
 4002ba0:	dd400517 	ldw	r21,20(sp)
 4002ba4:	dd000417 	ldw	r20,16(sp)
 4002ba8:	dcc00317 	ldw	r19,12(sp)
 4002bac:	dc800217 	ldw	r18,8(sp)
 4002bb0:	dc400117 	ldw	r17,4(sp)
 4002bb4:	dc000017 	ldw	r16,0(sp)
 4002bb8:	dec00904 	addi	sp,sp,36
 4002bbc:	f800283a 	ret

04002bc0 <__fp_lock>:
 4002bc0:	0005883a 	mov	r2,zero
 4002bc4:	f800283a 	ret

04002bc8 <__sfmoreglue>:
 4002bc8:	defffc04 	addi	sp,sp,-16
 4002bcc:	dc800215 	stw	r18,8(sp)
 4002bd0:	2825883a 	mov	r18,r5
 4002bd4:	dc000015 	stw	r16,0(sp)
 4002bd8:	01401a04 	movi	r5,104
 4002bdc:	2021883a 	mov	r16,r4
 4002be0:	913fffc4 	addi	r4,r18,-1
 4002be4:	dfc00315 	stw	ra,12(sp)
 4002be8:	dc400115 	stw	r17,4(sp)
 4002bec:	4001f780 	call	4001f78 <__mulsi3>
 4002bf0:	8009883a 	mov	r4,r16
 4002bf4:	11401d04 	addi	r5,r2,116
 4002bf8:	1023883a 	mov	r17,r2
 4002bfc:	4001fc80 	call	4001fc8 <_malloc_r>
 4002c00:	1021883a 	mov	r16,r2
 4002c04:	10000726 	beq	r2,zero,4002c24 <__sfmoreglue+0x5c>
 4002c08:	11000304 	addi	r4,r2,12
 4002c0c:	10000015 	stw	zero,0(r2)
 4002c10:	14800115 	stw	r18,4(r2)
 4002c14:	11000215 	stw	r4,8(r2)
 4002c18:	89801a04 	addi	r6,r17,104
 4002c1c:	000b883a 	mov	r5,zero
 4002c20:	4003bcc0 	call	4003bcc <memset>
 4002c24:	8005883a 	mov	r2,r16
 4002c28:	dfc00317 	ldw	ra,12(sp)
 4002c2c:	dc800217 	ldw	r18,8(sp)
 4002c30:	dc400117 	ldw	r17,4(sp)
 4002c34:	dc000017 	ldw	r16,0(sp)
 4002c38:	dec00404 	addi	sp,sp,16
 4002c3c:	f800283a 	ret

04002c40 <__sfp>:
 4002c40:	defffb04 	addi	sp,sp,-20
 4002c44:	dc000015 	stw	r16,0(sp)
 4002c48:	04010074 	movhi	r16,1025
 4002c4c:	842d4e04 	addi	r16,r16,-19144
 4002c50:	dcc00315 	stw	r19,12(sp)
 4002c54:	2027883a 	mov	r19,r4
 4002c58:	81000017 	ldw	r4,0(r16)
 4002c5c:	dfc00415 	stw	ra,16(sp)
 4002c60:	dc800215 	stw	r18,8(sp)
 4002c64:	20800e17 	ldw	r2,56(r4)
 4002c68:	dc400115 	stw	r17,4(sp)
 4002c6c:	1000021e 	bne	r2,zero,4002c78 <__sfp+0x38>
 4002c70:	4002a240 	call	4002a24 <__sinit.part.1>
 4002c74:	81000017 	ldw	r4,0(r16)
 4002c78:	2480b804 	addi	r18,r4,736
 4002c7c:	047fffc4 	movi	r17,-1
 4002c80:	91000117 	ldw	r4,4(r18)
 4002c84:	94000217 	ldw	r16,8(r18)
 4002c88:	213fffc4 	addi	r4,r4,-1
 4002c8c:	20000a16 	blt	r4,zero,4002cb8 <__sfp+0x78>
 4002c90:	8080030f 	ldh	r2,12(r16)
 4002c94:	10000c26 	beq	r2,zero,4002cc8 <__sfp+0x88>
 4002c98:	80c01d04 	addi	r3,r16,116
 4002c9c:	00000206 	br	4002ca8 <__sfp+0x68>
 4002ca0:	18bfe60f 	ldh	r2,-104(r3)
 4002ca4:	10000826 	beq	r2,zero,4002cc8 <__sfp+0x88>
 4002ca8:	213fffc4 	addi	r4,r4,-1
 4002cac:	1c3ffd04 	addi	r16,r3,-12
 4002cb0:	18c01a04 	addi	r3,r3,104
 4002cb4:	247ffa1e 	bne	r4,r17,4002ca0 <__alt_heap_limit+0xfc002ca0>
 4002cb8:	90800017 	ldw	r2,0(r18)
 4002cbc:	10001d26 	beq	r2,zero,4002d34 <__sfp+0xf4>
 4002cc0:	1025883a 	mov	r18,r2
 4002cc4:	003fee06 	br	4002c80 <__alt_heap_limit+0xfc002c80>
 4002cc8:	00bfffc4 	movi	r2,-1
 4002ccc:	8080038d 	sth	r2,14(r16)
 4002cd0:	00800044 	movi	r2,1
 4002cd4:	8080030d 	sth	r2,12(r16)
 4002cd8:	80001915 	stw	zero,100(r16)
 4002cdc:	80000015 	stw	zero,0(r16)
 4002ce0:	80000215 	stw	zero,8(r16)
 4002ce4:	80000115 	stw	zero,4(r16)
 4002ce8:	80000415 	stw	zero,16(r16)
 4002cec:	80000515 	stw	zero,20(r16)
 4002cf0:	80000615 	stw	zero,24(r16)
 4002cf4:	01800204 	movi	r6,8
 4002cf8:	000b883a 	mov	r5,zero
 4002cfc:	81001704 	addi	r4,r16,92
 4002d00:	4003bcc0 	call	4003bcc <memset>
 4002d04:	8005883a 	mov	r2,r16
 4002d08:	80000c15 	stw	zero,48(r16)
 4002d0c:	80000d15 	stw	zero,52(r16)
 4002d10:	80001115 	stw	zero,68(r16)
 4002d14:	80001215 	stw	zero,72(r16)
 4002d18:	dfc00417 	ldw	ra,16(sp)
 4002d1c:	dcc00317 	ldw	r19,12(sp)
 4002d20:	dc800217 	ldw	r18,8(sp)
 4002d24:	dc400117 	ldw	r17,4(sp)
 4002d28:	dc000017 	ldw	r16,0(sp)
 4002d2c:	dec00504 	addi	sp,sp,20
 4002d30:	f800283a 	ret
 4002d34:	01400104 	movi	r5,4
 4002d38:	9809883a 	mov	r4,r19
 4002d3c:	4002bc80 	call	4002bc8 <__sfmoreglue>
 4002d40:	90800015 	stw	r2,0(r18)
 4002d44:	103fde1e 	bne	r2,zero,4002cc0 <__alt_heap_limit+0xfc002cc0>
 4002d48:	00800304 	movi	r2,12
 4002d4c:	98800015 	stw	r2,0(r19)
 4002d50:	0005883a 	mov	r2,zero
 4002d54:	003ff006 	br	4002d18 <__alt_heap_limit+0xfc002d18>

04002d58 <_cleanup>:
 4002d58:	00810074 	movhi	r2,1025
 4002d5c:	10ad4e04 	addi	r2,r2,-19144
 4002d60:	11000017 	ldw	r4,0(r2)
 4002d64:	01410034 	movhi	r5,1024
 4002d68:	29516704 	addi	r5,r5,17820
 4002d6c:	40037801 	jmpi	4003780 <_fwalk_reent>

04002d70 <__sinit>:
 4002d70:	20800e17 	ldw	r2,56(r4)
 4002d74:	10000126 	beq	r2,zero,4002d7c <__sinit+0xc>
 4002d78:	f800283a 	ret
 4002d7c:	4002a241 	jmpi	4002a24 <__sinit.part.1>

04002d80 <__sfp_lock_acquire>:
 4002d80:	f800283a 	ret

04002d84 <__sfp_lock_release>:
 4002d84:	f800283a 	ret

04002d88 <__sinit_lock_acquire>:
 4002d88:	f800283a 	ret

04002d8c <__sinit_lock_release>:
 4002d8c:	f800283a 	ret

04002d90 <__fp_lock_all>:
 4002d90:	00810074 	movhi	r2,1025
 4002d94:	10ad4f04 	addi	r2,r2,-19140
 4002d98:	11000017 	ldw	r4,0(r2)
 4002d9c:	01410034 	movhi	r5,1024
 4002da0:	294af004 	addi	r5,r5,11200
 4002da4:	40036bc1 	jmpi	40036bc <_fwalk>

04002da8 <__fp_unlock_all>:
 4002da8:	00810074 	movhi	r2,1025
 4002dac:	10ad4f04 	addi	r2,r2,-19140
 4002db0:	11000017 	ldw	r4,0(r2)
 4002db4:	01410034 	movhi	r5,1024
 4002db8:	294a8404 	addi	r5,r5,10768
 4002dbc:	40036bc1 	jmpi	40036bc <_fwalk>

04002dc0 <_malloc_trim_r>:
 4002dc0:	defffb04 	addi	sp,sp,-20
 4002dc4:	dcc00315 	stw	r19,12(sp)
 4002dc8:	04c10074 	movhi	r19,1025
 4002dcc:	dc800215 	stw	r18,8(sp)
 4002dd0:	dc400115 	stw	r17,4(sp)
 4002dd4:	dc000015 	stw	r16,0(sp)
 4002dd8:	dfc00415 	stw	ra,16(sp)
 4002ddc:	2821883a 	mov	r16,r5
 4002de0:	9ce6bf04 	addi	r19,r19,-25860
 4002de4:	2025883a 	mov	r18,r4
 4002de8:	400531c0 	call	400531c <__malloc_lock>
 4002dec:	98800217 	ldw	r2,8(r19)
 4002df0:	14400117 	ldw	r17,4(r2)
 4002df4:	00bfff04 	movi	r2,-4
 4002df8:	88a2703a 	and	r17,r17,r2
 4002dfc:	8c21c83a 	sub	r16,r17,r16
 4002e00:	8403fbc4 	addi	r16,r16,4079
 4002e04:	8020d33a 	srli	r16,r16,12
 4002e08:	0083ffc4 	movi	r2,4095
 4002e0c:	843fffc4 	addi	r16,r16,-1
 4002e10:	8020933a 	slli	r16,r16,12
 4002e14:	1400060e 	bge	r2,r16,4002e30 <_malloc_trim_r+0x70>
 4002e18:	000b883a 	mov	r5,zero
 4002e1c:	9009883a 	mov	r4,r18
 4002e20:	40029240 	call	4002924 <_sbrk_r>
 4002e24:	98c00217 	ldw	r3,8(r19)
 4002e28:	1c47883a 	add	r3,r3,r17
 4002e2c:	10c00a26 	beq	r2,r3,4002e58 <_malloc_trim_r+0x98>
 4002e30:	9009883a 	mov	r4,r18
 4002e34:	40053400 	call	4005340 <__malloc_unlock>
 4002e38:	0005883a 	mov	r2,zero
 4002e3c:	dfc00417 	ldw	ra,16(sp)
 4002e40:	dcc00317 	ldw	r19,12(sp)
 4002e44:	dc800217 	ldw	r18,8(sp)
 4002e48:	dc400117 	ldw	r17,4(sp)
 4002e4c:	dc000017 	ldw	r16,0(sp)
 4002e50:	dec00504 	addi	sp,sp,20
 4002e54:	f800283a 	ret
 4002e58:	040bc83a 	sub	r5,zero,r16
 4002e5c:	9009883a 	mov	r4,r18
 4002e60:	40029240 	call	4002924 <_sbrk_r>
 4002e64:	00ffffc4 	movi	r3,-1
 4002e68:	10c00d26 	beq	r2,r3,4002ea0 <_malloc_trim_r+0xe0>
 4002e6c:	00c10074 	movhi	r3,1025
 4002e70:	18f50504 	addi	r3,r3,-11244
 4002e74:	18800017 	ldw	r2,0(r3)
 4002e78:	99000217 	ldw	r4,8(r19)
 4002e7c:	8c23c83a 	sub	r17,r17,r16
 4002e80:	8c400054 	ori	r17,r17,1
 4002e84:	1421c83a 	sub	r16,r2,r16
 4002e88:	24400115 	stw	r17,4(r4)
 4002e8c:	9009883a 	mov	r4,r18
 4002e90:	1c000015 	stw	r16,0(r3)
 4002e94:	40053400 	call	4005340 <__malloc_unlock>
 4002e98:	00800044 	movi	r2,1
 4002e9c:	003fe706 	br	4002e3c <__alt_heap_limit+0xfc002e3c>
 4002ea0:	000b883a 	mov	r5,zero
 4002ea4:	9009883a 	mov	r4,r18
 4002ea8:	40029240 	call	4002924 <_sbrk_r>
 4002eac:	99000217 	ldw	r4,8(r19)
 4002eb0:	014003c4 	movi	r5,15
 4002eb4:	1107c83a 	sub	r3,r2,r4
 4002eb8:	28ffdd0e 	bge	r5,r3,4002e30 <__alt_heap_limit+0xfc002e30>
 4002ebc:	01410074 	movhi	r5,1025
 4002ec0:	296d4c04 	addi	r5,r5,-19152
 4002ec4:	29400017 	ldw	r5,0(r5)
 4002ec8:	18c00054 	ori	r3,r3,1
 4002ecc:	20c00115 	stw	r3,4(r4)
 4002ed0:	00c10074 	movhi	r3,1025
 4002ed4:	1145c83a 	sub	r2,r2,r5
 4002ed8:	18f50504 	addi	r3,r3,-11244
 4002edc:	18800015 	stw	r2,0(r3)
 4002ee0:	003fd306 	br	4002e30 <__alt_heap_limit+0xfc002e30>

04002ee4 <_free_r>:
 4002ee4:	28004126 	beq	r5,zero,4002fec <_free_r+0x108>
 4002ee8:	defffd04 	addi	sp,sp,-12
 4002eec:	dc400115 	stw	r17,4(sp)
 4002ef0:	dc000015 	stw	r16,0(sp)
 4002ef4:	2023883a 	mov	r17,r4
 4002ef8:	2821883a 	mov	r16,r5
 4002efc:	dfc00215 	stw	ra,8(sp)
 4002f00:	400531c0 	call	400531c <__malloc_lock>
 4002f04:	81ffff17 	ldw	r7,-4(r16)
 4002f08:	00bfff84 	movi	r2,-2
 4002f0c:	01010074 	movhi	r4,1025
 4002f10:	81bffe04 	addi	r6,r16,-8
 4002f14:	3884703a 	and	r2,r7,r2
 4002f18:	2126bf04 	addi	r4,r4,-25860
 4002f1c:	308b883a 	add	r5,r6,r2
 4002f20:	2a400117 	ldw	r9,4(r5)
 4002f24:	22000217 	ldw	r8,8(r4)
 4002f28:	00ffff04 	movi	r3,-4
 4002f2c:	48c6703a 	and	r3,r9,r3
 4002f30:	2a005726 	beq	r5,r8,4003090 <_free_r+0x1ac>
 4002f34:	28c00115 	stw	r3,4(r5)
 4002f38:	39c0004c 	andi	r7,r7,1
 4002f3c:	3800091e 	bne	r7,zero,4002f64 <_free_r+0x80>
 4002f40:	823ffe17 	ldw	r8,-8(r16)
 4002f44:	22400204 	addi	r9,r4,8
 4002f48:	320dc83a 	sub	r6,r6,r8
 4002f4c:	31c00217 	ldw	r7,8(r6)
 4002f50:	1205883a 	add	r2,r2,r8
 4002f54:	3a406526 	beq	r7,r9,40030ec <_free_r+0x208>
 4002f58:	32000317 	ldw	r8,12(r6)
 4002f5c:	3a000315 	stw	r8,12(r7)
 4002f60:	41c00215 	stw	r7,8(r8)
 4002f64:	28cf883a 	add	r7,r5,r3
 4002f68:	39c00117 	ldw	r7,4(r7)
 4002f6c:	39c0004c 	andi	r7,r7,1
 4002f70:	38003a26 	beq	r7,zero,400305c <_free_r+0x178>
 4002f74:	10c00054 	ori	r3,r2,1
 4002f78:	30c00115 	stw	r3,4(r6)
 4002f7c:	3087883a 	add	r3,r6,r2
 4002f80:	18800015 	stw	r2,0(r3)
 4002f84:	00c07fc4 	movi	r3,511
 4002f88:	18801936 	bltu	r3,r2,4002ff0 <_free_r+0x10c>
 4002f8c:	1004d0fa 	srli	r2,r2,3
 4002f90:	01c00044 	movi	r7,1
 4002f94:	21400117 	ldw	r5,4(r4)
 4002f98:	10c00044 	addi	r3,r2,1
 4002f9c:	18c7883a 	add	r3,r3,r3
 4002fa0:	1005d0ba 	srai	r2,r2,2
 4002fa4:	18c7883a 	add	r3,r3,r3
 4002fa8:	18c7883a 	add	r3,r3,r3
 4002fac:	1907883a 	add	r3,r3,r4
 4002fb0:	3884983a 	sll	r2,r7,r2
 4002fb4:	19c00017 	ldw	r7,0(r3)
 4002fb8:	1a3ffe04 	addi	r8,r3,-8
 4002fbc:	1144b03a 	or	r2,r2,r5
 4002fc0:	32000315 	stw	r8,12(r6)
 4002fc4:	31c00215 	stw	r7,8(r6)
 4002fc8:	20800115 	stw	r2,4(r4)
 4002fcc:	19800015 	stw	r6,0(r3)
 4002fd0:	39800315 	stw	r6,12(r7)
 4002fd4:	8809883a 	mov	r4,r17
 4002fd8:	dfc00217 	ldw	ra,8(sp)
 4002fdc:	dc400117 	ldw	r17,4(sp)
 4002fe0:	dc000017 	ldw	r16,0(sp)
 4002fe4:	dec00304 	addi	sp,sp,12
 4002fe8:	40053401 	jmpi	4005340 <__malloc_unlock>
 4002fec:	f800283a 	ret
 4002ff0:	100ad27a 	srli	r5,r2,9
 4002ff4:	00c00104 	movi	r3,4
 4002ff8:	19404a36 	bltu	r3,r5,4003124 <_free_r+0x240>
 4002ffc:	100ad1ba 	srli	r5,r2,6
 4003000:	28c00e44 	addi	r3,r5,57
 4003004:	18c7883a 	add	r3,r3,r3
 4003008:	29400e04 	addi	r5,r5,56
 400300c:	18c7883a 	add	r3,r3,r3
 4003010:	18c7883a 	add	r3,r3,r3
 4003014:	1909883a 	add	r4,r3,r4
 4003018:	20c00017 	ldw	r3,0(r4)
 400301c:	01c10074 	movhi	r7,1025
 4003020:	213ffe04 	addi	r4,r4,-8
 4003024:	39e6bf04 	addi	r7,r7,-25860
 4003028:	20c04426 	beq	r4,r3,400313c <_free_r+0x258>
 400302c:	01ffff04 	movi	r7,-4
 4003030:	19400117 	ldw	r5,4(r3)
 4003034:	29ca703a 	and	r5,r5,r7
 4003038:	1140022e 	bgeu	r2,r5,4003044 <_free_r+0x160>
 400303c:	18c00217 	ldw	r3,8(r3)
 4003040:	20fffb1e 	bne	r4,r3,4003030 <__alt_heap_limit+0xfc003030>
 4003044:	19000317 	ldw	r4,12(r3)
 4003048:	31000315 	stw	r4,12(r6)
 400304c:	30c00215 	stw	r3,8(r6)
 4003050:	21800215 	stw	r6,8(r4)
 4003054:	19800315 	stw	r6,12(r3)
 4003058:	003fde06 	br	4002fd4 <__alt_heap_limit+0xfc002fd4>
 400305c:	29c00217 	ldw	r7,8(r5)
 4003060:	10c5883a 	add	r2,r2,r3
 4003064:	00c10074 	movhi	r3,1025
 4003068:	18e6c104 	addi	r3,r3,-25852
 400306c:	38c03b26 	beq	r7,r3,400315c <_free_r+0x278>
 4003070:	2a000317 	ldw	r8,12(r5)
 4003074:	11400054 	ori	r5,r2,1
 4003078:	3087883a 	add	r3,r6,r2
 400307c:	3a000315 	stw	r8,12(r7)
 4003080:	41c00215 	stw	r7,8(r8)
 4003084:	31400115 	stw	r5,4(r6)
 4003088:	18800015 	stw	r2,0(r3)
 400308c:	003fbd06 	br	4002f84 <__alt_heap_limit+0xfc002f84>
 4003090:	39c0004c 	andi	r7,r7,1
 4003094:	10c5883a 	add	r2,r2,r3
 4003098:	3800071e 	bne	r7,zero,40030b8 <_free_r+0x1d4>
 400309c:	81fffe17 	ldw	r7,-8(r16)
 40030a0:	31cdc83a 	sub	r6,r6,r7
 40030a4:	30c00317 	ldw	r3,12(r6)
 40030a8:	31400217 	ldw	r5,8(r6)
 40030ac:	11c5883a 	add	r2,r2,r7
 40030b0:	28c00315 	stw	r3,12(r5)
 40030b4:	19400215 	stw	r5,8(r3)
 40030b8:	10c00054 	ori	r3,r2,1
 40030bc:	30c00115 	stw	r3,4(r6)
 40030c0:	00c10074 	movhi	r3,1025
 40030c4:	18ed4d04 	addi	r3,r3,-19148
 40030c8:	18c00017 	ldw	r3,0(r3)
 40030cc:	21800215 	stw	r6,8(r4)
 40030d0:	10ffc036 	bltu	r2,r3,4002fd4 <__alt_heap_limit+0xfc002fd4>
 40030d4:	00810074 	movhi	r2,1025
 40030d8:	10b4fc04 	addi	r2,r2,-11280
 40030dc:	11400017 	ldw	r5,0(r2)
 40030e0:	8809883a 	mov	r4,r17
 40030e4:	4002dc00 	call	4002dc0 <_malloc_trim_r>
 40030e8:	003fba06 	br	4002fd4 <__alt_heap_limit+0xfc002fd4>
 40030ec:	28c9883a 	add	r4,r5,r3
 40030f0:	21000117 	ldw	r4,4(r4)
 40030f4:	2100004c 	andi	r4,r4,1
 40030f8:	2000391e 	bne	r4,zero,40031e0 <_free_r+0x2fc>
 40030fc:	29c00217 	ldw	r7,8(r5)
 4003100:	29000317 	ldw	r4,12(r5)
 4003104:	1885883a 	add	r2,r3,r2
 4003108:	10c00054 	ori	r3,r2,1
 400310c:	39000315 	stw	r4,12(r7)
 4003110:	21c00215 	stw	r7,8(r4)
 4003114:	30c00115 	stw	r3,4(r6)
 4003118:	308d883a 	add	r6,r6,r2
 400311c:	30800015 	stw	r2,0(r6)
 4003120:	003fac06 	br	4002fd4 <__alt_heap_limit+0xfc002fd4>
 4003124:	00c00504 	movi	r3,20
 4003128:	19401536 	bltu	r3,r5,4003180 <_free_r+0x29c>
 400312c:	28c01704 	addi	r3,r5,92
 4003130:	18c7883a 	add	r3,r3,r3
 4003134:	294016c4 	addi	r5,r5,91
 4003138:	003fb406 	br	400300c <__alt_heap_limit+0xfc00300c>
 400313c:	280bd0ba 	srai	r5,r5,2
 4003140:	00c00044 	movi	r3,1
 4003144:	38800117 	ldw	r2,4(r7)
 4003148:	194a983a 	sll	r5,r3,r5
 400314c:	2007883a 	mov	r3,r4
 4003150:	2884b03a 	or	r2,r5,r2
 4003154:	38800115 	stw	r2,4(r7)
 4003158:	003fbb06 	br	4003048 <__alt_heap_limit+0xfc003048>
 400315c:	21800515 	stw	r6,20(r4)
 4003160:	21800415 	stw	r6,16(r4)
 4003164:	10c00054 	ori	r3,r2,1
 4003168:	31c00315 	stw	r7,12(r6)
 400316c:	31c00215 	stw	r7,8(r6)
 4003170:	30c00115 	stw	r3,4(r6)
 4003174:	308d883a 	add	r6,r6,r2
 4003178:	30800015 	stw	r2,0(r6)
 400317c:	003f9506 	br	4002fd4 <__alt_heap_limit+0xfc002fd4>
 4003180:	00c01504 	movi	r3,84
 4003184:	19400536 	bltu	r3,r5,400319c <_free_r+0x2b8>
 4003188:	100ad33a 	srli	r5,r2,12
 400318c:	28c01bc4 	addi	r3,r5,111
 4003190:	18c7883a 	add	r3,r3,r3
 4003194:	29401b84 	addi	r5,r5,110
 4003198:	003f9c06 	br	400300c <__alt_heap_limit+0xfc00300c>
 400319c:	00c05504 	movi	r3,340
 40031a0:	19400536 	bltu	r3,r5,40031b8 <_free_r+0x2d4>
 40031a4:	100ad3fa 	srli	r5,r2,15
 40031a8:	28c01e04 	addi	r3,r5,120
 40031ac:	18c7883a 	add	r3,r3,r3
 40031b0:	29401dc4 	addi	r5,r5,119
 40031b4:	003f9506 	br	400300c <__alt_heap_limit+0xfc00300c>
 40031b8:	00c15504 	movi	r3,1364
 40031bc:	19400536 	bltu	r3,r5,40031d4 <_free_r+0x2f0>
 40031c0:	100ad4ba 	srli	r5,r2,18
 40031c4:	28c01f44 	addi	r3,r5,125
 40031c8:	18c7883a 	add	r3,r3,r3
 40031cc:	29401f04 	addi	r5,r5,124
 40031d0:	003f8e06 	br	400300c <__alt_heap_limit+0xfc00300c>
 40031d4:	00c03f84 	movi	r3,254
 40031d8:	01401f84 	movi	r5,126
 40031dc:	003f8b06 	br	400300c <__alt_heap_limit+0xfc00300c>
 40031e0:	10c00054 	ori	r3,r2,1
 40031e4:	30c00115 	stw	r3,4(r6)
 40031e8:	308d883a 	add	r6,r6,r2
 40031ec:	30800015 	stw	r2,0(r6)
 40031f0:	003f7806 	br	4002fd4 <__alt_heap_limit+0xfc002fd4>

040031f4 <__sfvwrite_r>:
 40031f4:	30800217 	ldw	r2,8(r6)
 40031f8:	10006726 	beq	r2,zero,4003398 <__sfvwrite_r+0x1a4>
 40031fc:	28c0030b 	ldhu	r3,12(r5)
 4003200:	defff404 	addi	sp,sp,-48
 4003204:	dd400715 	stw	r21,28(sp)
 4003208:	dd000615 	stw	r20,24(sp)
 400320c:	dc000215 	stw	r16,8(sp)
 4003210:	dfc00b15 	stw	ra,44(sp)
 4003214:	df000a15 	stw	fp,40(sp)
 4003218:	ddc00915 	stw	r23,36(sp)
 400321c:	dd800815 	stw	r22,32(sp)
 4003220:	dcc00515 	stw	r19,20(sp)
 4003224:	dc800415 	stw	r18,16(sp)
 4003228:	dc400315 	stw	r17,12(sp)
 400322c:	1880020c 	andi	r2,r3,8
 4003230:	2821883a 	mov	r16,r5
 4003234:	202b883a 	mov	r21,r4
 4003238:	3029883a 	mov	r20,r6
 400323c:	10002726 	beq	r2,zero,40032dc <__sfvwrite_r+0xe8>
 4003240:	28800417 	ldw	r2,16(r5)
 4003244:	10002526 	beq	r2,zero,40032dc <__sfvwrite_r+0xe8>
 4003248:	1880008c 	andi	r2,r3,2
 400324c:	a4400017 	ldw	r17,0(r20)
 4003250:	10002a26 	beq	r2,zero,40032fc <__sfvwrite_r+0x108>
 4003254:	05a00034 	movhi	r22,32768
 4003258:	0027883a 	mov	r19,zero
 400325c:	0025883a 	mov	r18,zero
 4003260:	b5bf0004 	addi	r22,r22,-1024
 4003264:	980d883a 	mov	r6,r19
 4003268:	a809883a 	mov	r4,r21
 400326c:	90004626 	beq	r18,zero,4003388 <__sfvwrite_r+0x194>
 4003270:	900f883a 	mov	r7,r18
 4003274:	b480022e 	bgeu	r22,r18,4003280 <__sfvwrite_r+0x8c>
 4003278:	01e00034 	movhi	r7,32768
 400327c:	39ff0004 	addi	r7,r7,-1024
 4003280:	80800917 	ldw	r2,36(r16)
 4003284:	81400717 	ldw	r5,28(r16)
 4003288:	103ee83a 	callr	r2
 400328c:	00805a0e 	bge	zero,r2,40033f8 <__sfvwrite_r+0x204>
 4003290:	a0c00217 	ldw	r3,8(r20)
 4003294:	98a7883a 	add	r19,r19,r2
 4003298:	90a5c83a 	sub	r18,r18,r2
 400329c:	1885c83a 	sub	r2,r3,r2
 40032a0:	a0800215 	stw	r2,8(r20)
 40032a4:	103fef1e 	bne	r2,zero,4003264 <__alt_heap_limit+0xfc003264>
 40032a8:	0005883a 	mov	r2,zero
 40032ac:	dfc00b17 	ldw	ra,44(sp)
 40032b0:	df000a17 	ldw	fp,40(sp)
 40032b4:	ddc00917 	ldw	r23,36(sp)
 40032b8:	dd800817 	ldw	r22,32(sp)
 40032bc:	dd400717 	ldw	r21,28(sp)
 40032c0:	dd000617 	ldw	r20,24(sp)
 40032c4:	dcc00517 	ldw	r19,20(sp)
 40032c8:	dc800417 	ldw	r18,16(sp)
 40032cc:	dc400317 	ldw	r17,12(sp)
 40032d0:	dc000217 	ldw	r16,8(sp)
 40032d4:	dec00c04 	addi	sp,sp,48
 40032d8:	f800283a 	ret
 40032dc:	800b883a 	mov	r5,r16
 40032e0:	a809883a 	mov	r4,r21
 40032e4:	40043f40 	call	40043f4 <__swsetup_r>
 40032e8:	1000ee1e 	bne	r2,zero,40036a4 <__sfvwrite_r+0x4b0>
 40032ec:	80c0030b 	ldhu	r3,12(r16)
 40032f0:	a4400017 	ldw	r17,0(r20)
 40032f4:	1880008c 	andi	r2,r3,2
 40032f8:	103fd61e 	bne	r2,zero,4003254 <__alt_heap_limit+0xfc003254>
 40032fc:	1880004c 	andi	r2,r3,1
 4003300:	1000421e 	bne	r2,zero,400340c <__sfvwrite_r+0x218>
 4003304:	0039883a 	mov	fp,zero
 4003308:	0025883a 	mov	r18,zero
 400330c:	90001a26 	beq	r18,zero,4003378 <__sfvwrite_r+0x184>
 4003310:	1880800c 	andi	r2,r3,512
 4003314:	84c00217 	ldw	r19,8(r16)
 4003318:	10002126 	beq	r2,zero,40033a0 <__sfvwrite_r+0x1ac>
 400331c:	982f883a 	mov	r23,r19
 4003320:	94c09636 	bltu	r18,r19,400357c <__sfvwrite_r+0x388>
 4003324:	1881200c 	andi	r2,r3,1152
 4003328:	1000a11e 	bne	r2,zero,40035b0 <__sfvwrite_r+0x3bc>
 400332c:	81000017 	ldw	r4,0(r16)
 4003330:	b80d883a 	mov	r6,r23
 4003334:	e00b883a 	mov	r5,fp
 4003338:	4003a700 	call	4003a70 <memmove>
 400333c:	80c00217 	ldw	r3,8(r16)
 4003340:	81000017 	ldw	r4,0(r16)
 4003344:	9005883a 	mov	r2,r18
 4003348:	1ce7c83a 	sub	r19,r3,r19
 400334c:	25cf883a 	add	r7,r4,r23
 4003350:	84c00215 	stw	r19,8(r16)
 4003354:	81c00015 	stw	r7,0(r16)
 4003358:	a0c00217 	ldw	r3,8(r20)
 400335c:	e0b9883a 	add	fp,fp,r2
 4003360:	90a5c83a 	sub	r18,r18,r2
 4003364:	18a7c83a 	sub	r19,r3,r2
 4003368:	a4c00215 	stw	r19,8(r20)
 400336c:	983fce26 	beq	r19,zero,40032a8 <__alt_heap_limit+0xfc0032a8>
 4003370:	80c0030b 	ldhu	r3,12(r16)
 4003374:	903fe61e 	bne	r18,zero,4003310 <__alt_heap_limit+0xfc003310>
 4003378:	8f000017 	ldw	fp,0(r17)
 400337c:	8c800117 	ldw	r18,4(r17)
 4003380:	8c400204 	addi	r17,r17,8
 4003384:	003fe106 	br	400330c <__alt_heap_limit+0xfc00330c>
 4003388:	8cc00017 	ldw	r19,0(r17)
 400338c:	8c800117 	ldw	r18,4(r17)
 4003390:	8c400204 	addi	r17,r17,8
 4003394:	003fb306 	br	4003264 <__alt_heap_limit+0xfc003264>
 4003398:	0005883a 	mov	r2,zero
 400339c:	f800283a 	ret
 40033a0:	81000017 	ldw	r4,0(r16)
 40033a4:	80800417 	ldw	r2,16(r16)
 40033a8:	11005a36 	bltu	r2,r4,4003514 <__sfvwrite_r+0x320>
 40033ac:	85c00517 	ldw	r23,20(r16)
 40033b0:	95c05836 	bltu	r18,r23,4003514 <__sfvwrite_r+0x320>
 40033b4:	00a00034 	movhi	r2,32768
 40033b8:	10bfffc4 	addi	r2,r2,-1
 40033bc:	9009883a 	mov	r4,r18
 40033c0:	1480012e 	bgeu	r2,r18,40033c8 <__sfvwrite_r+0x1d4>
 40033c4:	1009883a 	mov	r4,r2
 40033c8:	b80b883a 	mov	r5,r23
 40033cc:	4001dc40 	call	4001dc4 <__divsi3>
 40033d0:	b80b883a 	mov	r5,r23
 40033d4:	1009883a 	mov	r4,r2
 40033d8:	4001f780 	call	4001f78 <__mulsi3>
 40033dc:	81400717 	ldw	r5,28(r16)
 40033e0:	80c00917 	ldw	r3,36(r16)
 40033e4:	100f883a 	mov	r7,r2
 40033e8:	e00d883a 	mov	r6,fp
 40033ec:	a809883a 	mov	r4,r21
 40033f0:	183ee83a 	callr	r3
 40033f4:	00bfd816 	blt	zero,r2,4003358 <__alt_heap_limit+0xfc003358>
 40033f8:	8080030b 	ldhu	r2,12(r16)
 40033fc:	10801014 	ori	r2,r2,64
 4003400:	8080030d 	sth	r2,12(r16)
 4003404:	00bfffc4 	movi	r2,-1
 4003408:	003fa806 	br	40032ac <__alt_heap_limit+0xfc0032ac>
 400340c:	0027883a 	mov	r19,zero
 4003410:	0011883a 	mov	r8,zero
 4003414:	0039883a 	mov	fp,zero
 4003418:	0025883a 	mov	r18,zero
 400341c:	90001f26 	beq	r18,zero,400349c <__sfvwrite_r+0x2a8>
 4003420:	40005a26 	beq	r8,zero,400358c <__sfvwrite_r+0x398>
 4003424:	982d883a 	mov	r22,r19
 4003428:	94c0012e 	bgeu	r18,r19,4003430 <__sfvwrite_r+0x23c>
 400342c:	902d883a 	mov	r22,r18
 4003430:	81000017 	ldw	r4,0(r16)
 4003434:	80800417 	ldw	r2,16(r16)
 4003438:	b02f883a 	mov	r23,r22
 400343c:	81c00517 	ldw	r7,20(r16)
 4003440:	1100032e 	bgeu	r2,r4,4003450 <__sfvwrite_r+0x25c>
 4003444:	80c00217 	ldw	r3,8(r16)
 4003448:	38c7883a 	add	r3,r7,r3
 400344c:	1d801816 	blt	r3,r22,40034b0 <__sfvwrite_r+0x2bc>
 4003450:	b1c03e16 	blt	r22,r7,400354c <__sfvwrite_r+0x358>
 4003454:	80800917 	ldw	r2,36(r16)
 4003458:	81400717 	ldw	r5,28(r16)
 400345c:	e00d883a 	mov	r6,fp
 4003460:	da000115 	stw	r8,4(sp)
 4003464:	a809883a 	mov	r4,r21
 4003468:	103ee83a 	callr	r2
 400346c:	102f883a 	mov	r23,r2
 4003470:	da000117 	ldw	r8,4(sp)
 4003474:	00bfe00e 	bge	zero,r2,40033f8 <__alt_heap_limit+0xfc0033f8>
 4003478:	9de7c83a 	sub	r19,r19,r23
 400347c:	98001f26 	beq	r19,zero,40034fc <__sfvwrite_r+0x308>
 4003480:	a0800217 	ldw	r2,8(r20)
 4003484:	e5f9883a 	add	fp,fp,r23
 4003488:	95e5c83a 	sub	r18,r18,r23
 400348c:	15efc83a 	sub	r23,r2,r23
 4003490:	a5c00215 	stw	r23,8(r20)
 4003494:	b83f8426 	beq	r23,zero,40032a8 <__alt_heap_limit+0xfc0032a8>
 4003498:	903fe11e 	bne	r18,zero,4003420 <__alt_heap_limit+0xfc003420>
 400349c:	8f000017 	ldw	fp,0(r17)
 40034a0:	8c800117 	ldw	r18,4(r17)
 40034a4:	0011883a 	mov	r8,zero
 40034a8:	8c400204 	addi	r17,r17,8
 40034ac:	003fdb06 	br	400341c <__alt_heap_limit+0xfc00341c>
 40034b0:	180d883a 	mov	r6,r3
 40034b4:	e00b883a 	mov	r5,fp
 40034b8:	da000115 	stw	r8,4(sp)
 40034bc:	d8c00015 	stw	r3,0(sp)
 40034c0:	4003a700 	call	4003a70 <memmove>
 40034c4:	d8c00017 	ldw	r3,0(sp)
 40034c8:	80800017 	ldw	r2,0(r16)
 40034cc:	800b883a 	mov	r5,r16
 40034d0:	a809883a 	mov	r4,r21
 40034d4:	10c5883a 	add	r2,r2,r3
 40034d8:	80800015 	stw	r2,0(r16)
 40034dc:	d8c00015 	stw	r3,0(sp)
 40034e0:	40048bc0 	call	40048bc <_fflush_r>
 40034e4:	d8c00017 	ldw	r3,0(sp)
 40034e8:	da000117 	ldw	r8,4(sp)
 40034ec:	103fc21e 	bne	r2,zero,40033f8 <__alt_heap_limit+0xfc0033f8>
 40034f0:	182f883a 	mov	r23,r3
 40034f4:	9de7c83a 	sub	r19,r19,r23
 40034f8:	983fe11e 	bne	r19,zero,4003480 <__alt_heap_limit+0xfc003480>
 40034fc:	800b883a 	mov	r5,r16
 4003500:	a809883a 	mov	r4,r21
 4003504:	40048bc0 	call	40048bc <_fflush_r>
 4003508:	103fbb1e 	bne	r2,zero,40033f8 <__alt_heap_limit+0xfc0033f8>
 400350c:	0011883a 	mov	r8,zero
 4003510:	003fdb06 	br	4003480 <__alt_heap_limit+0xfc003480>
 4003514:	94c0012e 	bgeu	r18,r19,400351c <__sfvwrite_r+0x328>
 4003518:	9027883a 	mov	r19,r18
 400351c:	980d883a 	mov	r6,r19
 4003520:	e00b883a 	mov	r5,fp
 4003524:	4003a700 	call	4003a70 <memmove>
 4003528:	80800217 	ldw	r2,8(r16)
 400352c:	80c00017 	ldw	r3,0(r16)
 4003530:	14c5c83a 	sub	r2,r2,r19
 4003534:	1cc7883a 	add	r3,r3,r19
 4003538:	80800215 	stw	r2,8(r16)
 400353c:	80c00015 	stw	r3,0(r16)
 4003540:	10004326 	beq	r2,zero,4003650 <__sfvwrite_r+0x45c>
 4003544:	9805883a 	mov	r2,r19
 4003548:	003f8306 	br	4003358 <__alt_heap_limit+0xfc003358>
 400354c:	b00d883a 	mov	r6,r22
 4003550:	e00b883a 	mov	r5,fp
 4003554:	da000115 	stw	r8,4(sp)
 4003558:	4003a700 	call	4003a70 <memmove>
 400355c:	80800217 	ldw	r2,8(r16)
 4003560:	80c00017 	ldw	r3,0(r16)
 4003564:	da000117 	ldw	r8,4(sp)
 4003568:	1585c83a 	sub	r2,r2,r22
 400356c:	1dad883a 	add	r22,r3,r22
 4003570:	80800215 	stw	r2,8(r16)
 4003574:	85800015 	stw	r22,0(r16)
 4003578:	003fbf06 	br	4003478 <__alt_heap_limit+0xfc003478>
 400357c:	81000017 	ldw	r4,0(r16)
 4003580:	9027883a 	mov	r19,r18
 4003584:	902f883a 	mov	r23,r18
 4003588:	003f6906 	br	4003330 <__alt_heap_limit+0xfc003330>
 400358c:	900d883a 	mov	r6,r18
 4003590:	01400284 	movi	r5,10
 4003594:	e009883a 	mov	r4,fp
 4003598:	40038440 	call	4003844 <memchr>
 400359c:	10003e26 	beq	r2,zero,4003698 <__sfvwrite_r+0x4a4>
 40035a0:	10800044 	addi	r2,r2,1
 40035a4:	1727c83a 	sub	r19,r2,fp
 40035a8:	02000044 	movi	r8,1
 40035ac:	003f9d06 	br	4003424 <__alt_heap_limit+0xfc003424>
 40035b0:	80800517 	ldw	r2,20(r16)
 40035b4:	81400417 	ldw	r5,16(r16)
 40035b8:	81c00017 	ldw	r7,0(r16)
 40035bc:	10a7883a 	add	r19,r2,r2
 40035c0:	9885883a 	add	r2,r19,r2
 40035c4:	1026d7fa 	srli	r19,r2,31
 40035c8:	396dc83a 	sub	r22,r7,r5
 40035cc:	b1000044 	addi	r4,r22,1
 40035d0:	9885883a 	add	r2,r19,r2
 40035d4:	1027d07a 	srai	r19,r2,1
 40035d8:	2485883a 	add	r2,r4,r18
 40035dc:	980d883a 	mov	r6,r19
 40035e0:	9880022e 	bgeu	r19,r2,40035ec <__sfvwrite_r+0x3f8>
 40035e4:	1027883a 	mov	r19,r2
 40035e8:	100d883a 	mov	r6,r2
 40035ec:	18c1000c 	andi	r3,r3,1024
 40035f0:	18001c26 	beq	r3,zero,4003664 <__sfvwrite_r+0x470>
 40035f4:	300b883a 	mov	r5,r6
 40035f8:	a809883a 	mov	r4,r21
 40035fc:	4001fc80 	call	4001fc8 <_malloc_r>
 4003600:	102f883a 	mov	r23,r2
 4003604:	10002926 	beq	r2,zero,40036ac <__sfvwrite_r+0x4b8>
 4003608:	81400417 	ldw	r5,16(r16)
 400360c:	b00d883a 	mov	r6,r22
 4003610:	1009883a 	mov	r4,r2
 4003614:	40039280 	call	4003928 <memcpy>
 4003618:	8080030b 	ldhu	r2,12(r16)
 400361c:	00fedfc4 	movi	r3,-1153
 4003620:	10c4703a 	and	r2,r2,r3
 4003624:	10802014 	ori	r2,r2,128
 4003628:	8080030d 	sth	r2,12(r16)
 400362c:	bd89883a 	add	r4,r23,r22
 4003630:	9d8fc83a 	sub	r7,r19,r22
 4003634:	85c00415 	stw	r23,16(r16)
 4003638:	84c00515 	stw	r19,20(r16)
 400363c:	81000015 	stw	r4,0(r16)
 4003640:	9027883a 	mov	r19,r18
 4003644:	81c00215 	stw	r7,8(r16)
 4003648:	902f883a 	mov	r23,r18
 400364c:	003f3806 	br	4003330 <__alt_heap_limit+0xfc003330>
 4003650:	800b883a 	mov	r5,r16
 4003654:	a809883a 	mov	r4,r21
 4003658:	40048bc0 	call	40048bc <_fflush_r>
 400365c:	103fb926 	beq	r2,zero,4003544 <__alt_heap_limit+0xfc003544>
 4003660:	003f6506 	br	40033f8 <__alt_heap_limit+0xfc0033f8>
 4003664:	a809883a 	mov	r4,r21
 4003668:	4003cf40 	call	4003cf4 <_realloc_r>
 400366c:	102f883a 	mov	r23,r2
 4003670:	103fee1e 	bne	r2,zero,400362c <__alt_heap_limit+0xfc00362c>
 4003674:	81400417 	ldw	r5,16(r16)
 4003678:	a809883a 	mov	r4,r21
 400367c:	4002ee40 	call	4002ee4 <_free_r>
 4003680:	8080030b 	ldhu	r2,12(r16)
 4003684:	00ffdfc4 	movi	r3,-129
 4003688:	1884703a 	and	r2,r3,r2
 400368c:	00c00304 	movi	r3,12
 4003690:	a8c00015 	stw	r3,0(r21)
 4003694:	003f5906 	br	40033fc <__alt_heap_limit+0xfc0033fc>
 4003698:	94c00044 	addi	r19,r18,1
 400369c:	02000044 	movi	r8,1
 40036a0:	003f6006 	br	4003424 <__alt_heap_limit+0xfc003424>
 40036a4:	00bfffc4 	movi	r2,-1
 40036a8:	003f0006 	br	40032ac <__alt_heap_limit+0xfc0032ac>
 40036ac:	00800304 	movi	r2,12
 40036b0:	a8800015 	stw	r2,0(r21)
 40036b4:	8080030b 	ldhu	r2,12(r16)
 40036b8:	003f5006 	br	40033fc <__alt_heap_limit+0xfc0033fc>

040036bc <_fwalk>:
 40036bc:	defff704 	addi	sp,sp,-36
 40036c0:	dd000415 	stw	r20,16(sp)
 40036c4:	dfc00815 	stw	ra,32(sp)
 40036c8:	ddc00715 	stw	r23,28(sp)
 40036cc:	dd800615 	stw	r22,24(sp)
 40036d0:	dd400515 	stw	r21,20(sp)
 40036d4:	dcc00315 	stw	r19,12(sp)
 40036d8:	dc800215 	stw	r18,8(sp)
 40036dc:	dc400115 	stw	r17,4(sp)
 40036e0:	dc000015 	stw	r16,0(sp)
 40036e4:	2500b804 	addi	r20,r4,736
 40036e8:	a0002326 	beq	r20,zero,4003778 <_fwalk+0xbc>
 40036ec:	282b883a 	mov	r21,r5
 40036f0:	002f883a 	mov	r23,zero
 40036f4:	05800044 	movi	r22,1
 40036f8:	04ffffc4 	movi	r19,-1
 40036fc:	a4400117 	ldw	r17,4(r20)
 4003700:	a4800217 	ldw	r18,8(r20)
 4003704:	8c7fffc4 	addi	r17,r17,-1
 4003708:	88000d16 	blt	r17,zero,4003740 <_fwalk+0x84>
 400370c:	94000304 	addi	r16,r18,12
 4003710:	94800384 	addi	r18,r18,14
 4003714:	8080000b 	ldhu	r2,0(r16)
 4003718:	8c7fffc4 	addi	r17,r17,-1
 400371c:	813ffd04 	addi	r4,r16,-12
 4003720:	b080042e 	bgeu	r22,r2,4003734 <_fwalk+0x78>
 4003724:	9080000f 	ldh	r2,0(r18)
 4003728:	14c00226 	beq	r2,r19,4003734 <_fwalk+0x78>
 400372c:	a83ee83a 	callr	r21
 4003730:	b8aeb03a 	or	r23,r23,r2
 4003734:	84001a04 	addi	r16,r16,104
 4003738:	94801a04 	addi	r18,r18,104
 400373c:	8cfff51e 	bne	r17,r19,4003714 <__alt_heap_limit+0xfc003714>
 4003740:	a5000017 	ldw	r20,0(r20)
 4003744:	a03fed1e 	bne	r20,zero,40036fc <__alt_heap_limit+0xfc0036fc>
 4003748:	b805883a 	mov	r2,r23
 400374c:	dfc00817 	ldw	ra,32(sp)
 4003750:	ddc00717 	ldw	r23,28(sp)
 4003754:	dd800617 	ldw	r22,24(sp)
 4003758:	dd400517 	ldw	r21,20(sp)
 400375c:	dd000417 	ldw	r20,16(sp)
 4003760:	dcc00317 	ldw	r19,12(sp)
 4003764:	dc800217 	ldw	r18,8(sp)
 4003768:	dc400117 	ldw	r17,4(sp)
 400376c:	dc000017 	ldw	r16,0(sp)
 4003770:	dec00904 	addi	sp,sp,36
 4003774:	f800283a 	ret
 4003778:	002f883a 	mov	r23,zero
 400377c:	003ff206 	br	4003748 <__alt_heap_limit+0xfc003748>

04003780 <_fwalk_reent>:
 4003780:	defff704 	addi	sp,sp,-36
 4003784:	dd000415 	stw	r20,16(sp)
 4003788:	dfc00815 	stw	ra,32(sp)
 400378c:	ddc00715 	stw	r23,28(sp)
 4003790:	dd800615 	stw	r22,24(sp)
 4003794:	dd400515 	stw	r21,20(sp)
 4003798:	dcc00315 	stw	r19,12(sp)
 400379c:	dc800215 	stw	r18,8(sp)
 40037a0:	dc400115 	stw	r17,4(sp)
 40037a4:	dc000015 	stw	r16,0(sp)
 40037a8:	2500b804 	addi	r20,r4,736
 40037ac:	a0002326 	beq	r20,zero,400383c <_fwalk_reent+0xbc>
 40037b0:	282b883a 	mov	r21,r5
 40037b4:	2027883a 	mov	r19,r4
 40037b8:	002f883a 	mov	r23,zero
 40037bc:	05800044 	movi	r22,1
 40037c0:	04bfffc4 	movi	r18,-1
 40037c4:	a4400117 	ldw	r17,4(r20)
 40037c8:	a4000217 	ldw	r16,8(r20)
 40037cc:	8c7fffc4 	addi	r17,r17,-1
 40037d0:	88000c16 	blt	r17,zero,4003804 <_fwalk_reent+0x84>
 40037d4:	84000304 	addi	r16,r16,12
 40037d8:	8080000b 	ldhu	r2,0(r16)
 40037dc:	8c7fffc4 	addi	r17,r17,-1
 40037e0:	817ffd04 	addi	r5,r16,-12
 40037e4:	b080052e 	bgeu	r22,r2,40037fc <_fwalk_reent+0x7c>
 40037e8:	8080008f 	ldh	r2,2(r16)
 40037ec:	9809883a 	mov	r4,r19
 40037f0:	14800226 	beq	r2,r18,40037fc <_fwalk_reent+0x7c>
 40037f4:	a83ee83a 	callr	r21
 40037f8:	b8aeb03a 	or	r23,r23,r2
 40037fc:	84001a04 	addi	r16,r16,104
 4003800:	8cbff51e 	bne	r17,r18,40037d8 <__alt_heap_limit+0xfc0037d8>
 4003804:	a5000017 	ldw	r20,0(r20)
 4003808:	a03fee1e 	bne	r20,zero,40037c4 <__alt_heap_limit+0xfc0037c4>
 400380c:	b805883a 	mov	r2,r23
 4003810:	dfc00817 	ldw	ra,32(sp)
 4003814:	ddc00717 	ldw	r23,28(sp)
 4003818:	dd800617 	ldw	r22,24(sp)
 400381c:	dd400517 	ldw	r21,20(sp)
 4003820:	dd000417 	ldw	r20,16(sp)
 4003824:	dcc00317 	ldw	r19,12(sp)
 4003828:	dc800217 	ldw	r18,8(sp)
 400382c:	dc400117 	ldw	r17,4(sp)
 4003830:	dc000017 	ldw	r16,0(sp)
 4003834:	dec00904 	addi	sp,sp,36
 4003838:	f800283a 	ret
 400383c:	002f883a 	mov	r23,zero
 4003840:	003ff206 	br	400380c <__alt_heap_limit+0xfc00380c>

04003844 <memchr>:
 4003844:	208000cc 	andi	r2,r4,3
 4003848:	280f883a 	mov	r7,r5
 400384c:	10003426 	beq	r2,zero,4003920 <memchr+0xdc>
 4003850:	30bfffc4 	addi	r2,r6,-1
 4003854:	30001a26 	beq	r6,zero,40038c0 <memchr+0x7c>
 4003858:	20c00003 	ldbu	r3,0(r4)
 400385c:	29803fcc 	andi	r6,r5,255
 4003860:	30c0051e 	bne	r6,r3,4003878 <memchr+0x34>
 4003864:	00001806 	br	40038c8 <memchr+0x84>
 4003868:	10001526 	beq	r2,zero,40038c0 <memchr+0x7c>
 400386c:	20c00003 	ldbu	r3,0(r4)
 4003870:	10bfffc4 	addi	r2,r2,-1
 4003874:	30c01426 	beq	r6,r3,40038c8 <memchr+0x84>
 4003878:	21000044 	addi	r4,r4,1
 400387c:	20c000cc 	andi	r3,r4,3
 4003880:	183ff91e 	bne	r3,zero,4003868 <__alt_heap_limit+0xfc003868>
 4003884:	020000c4 	movi	r8,3
 4003888:	40801136 	bltu	r8,r2,40038d0 <memchr+0x8c>
 400388c:	10000c26 	beq	r2,zero,40038c0 <memchr+0x7c>
 4003890:	20c00003 	ldbu	r3,0(r4)
 4003894:	29403fcc 	andi	r5,r5,255
 4003898:	28c00b26 	beq	r5,r3,40038c8 <memchr+0x84>
 400389c:	20c00044 	addi	r3,r4,1
 40038a0:	39803fcc 	andi	r6,r7,255
 40038a4:	2089883a 	add	r4,r4,r2
 40038a8:	00000306 	br	40038b8 <memchr+0x74>
 40038ac:	18c00044 	addi	r3,r3,1
 40038b0:	197fffc3 	ldbu	r5,-1(r3)
 40038b4:	31400526 	beq	r6,r5,40038cc <memchr+0x88>
 40038b8:	1805883a 	mov	r2,r3
 40038bc:	20fffb1e 	bne	r4,r3,40038ac <__alt_heap_limit+0xfc0038ac>
 40038c0:	0005883a 	mov	r2,zero
 40038c4:	f800283a 	ret
 40038c8:	2005883a 	mov	r2,r4
 40038cc:	f800283a 	ret
 40038d0:	28c03fcc 	andi	r3,r5,255
 40038d4:	1812923a 	slli	r9,r3,8
 40038d8:	02ffbff4 	movhi	r11,65279
 40038dc:	02a02074 	movhi	r10,32897
 40038e0:	48d2b03a 	or	r9,r9,r3
 40038e4:	4806943a 	slli	r3,r9,16
 40038e8:	5affbfc4 	addi	r11,r11,-257
 40038ec:	52a02004 	addi	r10,r10,-32640
 40038f0:	48d2b03a 	or	r9,r9,r3
 40038f4:	20c00017 	ldw	r3,0(r4)
 40038f8:	48c6f03a 	xor	r3,r9,r3
 40038fc:	1acd883a 	add	r6,r3,r11
 4003900:	00c6303a 	nor	r3,zero,r3
 4003904:	30c6703a 	and	r3,r6,r3
 4003908:	1a86703a 	and	r3,r3,r10
 400390c:	183fe01e 	bne	r3,zero,4003890 <__alt_heap_limit+0xfc003890>
 4003910:	10bfff04 	addi	r2,r2,-4
 4003914:	21000104 	addi	r4,r4,4
 4003918:	40bff636 	bltu	r8,r2,40038f4 <__alt_heap_limit+0xfc0038f4>
 400391c:	003fdb06 	br	400388c <__alt_heap_limit+0xfc00388c>
 4003920:	3005883a 	mov	r2,r6
 4003924:	003fd706 	br	4003884 <__alt_heap_limit+0xfc003884>

04003928 <memcpy>:
 4003928:	defffd04 	addi	sp,sp,-12
 400392c:	dfc00215 	stw	ra,8(sp)
 4003930:	dc400115 	stw	r17,4(sp)
 4003934:	dc000015 	stw	r16,0(sp)
 4003938:	00c003c4 	movi	r3,15
 400393c:	2005883a 	mov	r2,r4
 4003940:	1980452e 	bgeu	r3,r6,4003a58 <memcpy+0x130>
 4003944:	2906b03a 	or	r3,r5,r4
 4003948:	18c000cc 	andi	r3,r3,3
 400394c:	1800441e 	bne	r3,zero,4003a60 <memcpy+0x138>
 4003950:	347ffc04 	addi	r17,r6,-16
 4003954:	8822d13a 	srli	r17,r17,4
 4003958:	28c00104 	addi	r3,r5,4
 400395c:	23400104 	addi	r13,r4,4
 4003960:	8820913a 	slli	r16,r17,4
 4003964:	2b000204 	addi	r12,r5,8
 4003968:	22c00204 	addi	r11,r4,8
 400396c:	84000504 	addi	r16,r16,20
 4003970:	2a800304 	addi	r10,r5,12
 4003974:	22400304 	addi	r9,r4,12
 4003978:	2c21883a 	add	r16,r5,r16
 400397c:	2811883a 	mov	r8,r5
 4003980:	200f883a 	mov	r7,r4
 4003984:	41000017 	ldw	r4,0(r8)
 4003988:	1fc00017 	ldw	ra,0(r3)
 400398c:	63c00017 	ldw	r15,0(r12)
 4003990:	39000015 	stw	r4,0(r7)
 4003994:	53800017 	ldw	r14,0(r10)
 4003998:	6fc00015 	stw	ra,0(r13)
 400399c:	5bc00015 	stw	r15,0(r11)
 40039a0:	4b800015 	stw	r14,0(r9)
 40039a4:	18c00404 	addi	r3,r3,16
 40039a8:	39c00404 	addi	r7,r7,16
 40039ac:	42000404 	addi	r8,r8,16
 40039b0:	6b400404 	addi	r13,r13,16
 40039b4:	63000404 	addi	r12,r12,16
 40039b8:	5ac00404 	addi	r11,r11,16
 40039bc:	52800404 	addi	r10,r10,16
 40039c0:	4a400404 	addi	r9,r9,16
 40039c4:	1c3fef1e 	bne	r3,r16,4003984 <__alt_heap_limit+0xfc003984>
 40039c8:	89c00044 	addi	r7,r17,1
 40039cc:	380e913a 	slli	r7,r7,4
 40039d0:	310003cc 	andi	r4,r6,15
 40039d4:	02c000c4 	movi	r11,3
 40039d8:	11c7883a 	add	r3,r2,r7
 40039dc:	29cb883a 	add	r5,r5,r7
 40039e0:	5900212e 	bgeu	r11,r4,4003a68 <memcpy+0x140>
 40039e4:	1813883a 	mov	r9,r3
 40039e8:	2811883a 	mov	r8,r5
 40039ec:	200f883a 	mov	r7,r4
 40039f0:	42800017 	ldw	r10,0(r8)
 40039f4:	4a400104 	addi	r9,r9,4
 40039f8:	39ffff04 	addi	r7,r7,-4
 40039fc:	4abfff15 	stw	r10,-4(r9)
 4003a00:	42000104 	addi	r8,r8,4
 4003a04:	59fffa36 	bltu	r11,r7,40039f0 <__alt_heap_limit+0xfc0039f0>
 4003a08:	213fff04 	addi	r4,r4,-4
 4003a0c:	2008d0ba 	srli	r4,r4,2
 4003a10:	318000cc 	andi	r6,r6,3
 4003a14:	21000044 	addi	r4,r4,1
 4003a18:	2109883a 	add	r4,r4,r4
 4003a1c:	2109883a 	add	r4,r4,r4
 4003a20:	1907883a 	add	r3,r3,r4
 4003a24:	290b883a 	add	r5,r5,r4
 4003a28:	30000626 	beq	r6,zero,4003a44 <memcpy+0x11c>
 4003a2c:	198d883a 	add	r6,r3,r6
 4003a30:	29c00003 	ldbu	r7,0(r5)
 4003a34:	18c00044 	addi	r3,r3,1
 4003a38:	29400044 	addi	r5,r5,1
 4003a3c:	19ffffc5 	stb	r7,-1(r3)
 4003a40:	19bffb1e 	bne	r3,r6,4003a30 <__alt_heap_limit+0xfc003a30>
 4003a44:	dfc00217 	ldw	ra,8(sp)
 4003a48:	dc400117 	ldw	r17,4(sp)
 4003a4c:	dc000017 	ldw	r16,0(sp)
 4003a50:	dec00304 	addi	sp,sp,12
 4003a54:	f800283a 	ret
 4003a58:	2007883a 	mov	r3,r4
 4003a5c:	003ff206 	br	4003a28 <__alt_heap_limit+0xfc003a28>
 4003a60:	2007883a 	mov	r3,r4
 4003a64:	003ff106 	br	4003a2c <__alt_heap_limit+0xfc003a2c>
 4003a68:	200d883a 	mov	r6,r4
 4003a6c:	003fee06 	br	4003a28 <__alt_heap_limit+0xfc003a28>

04003a70 <memmove>:
 4003a70:	2005883a 	mov	r2,r4
 4003a74:	29000b2e 	bgeu	r5,r4,4003aa4 <memmove+0x34>
 4003a78:	298f883a 	add	r7,r5,r6
 4003a7c:	21c0092e 	bgeu	r4,r7,4003aa4 <memmove+0x34>
 4003a80:	2187883a 	add	r3,r4,r6
 4003a84:	198bc83a 	sub	r5,r3,r6
 4003a88:	30004826 	beq	r6,zero,4003bac <memmove+0x13c>
 4003a8c:	39ffffc4 	addi	r7,r7,-1
 4003a90:	39000003 	ldbu	r4,0(r7)
 4003a94:	18ffffc4 	addi	r3,r3,-1
 4003a98:	19000005 	stb	r4,0(r3)
 4003a9c:	28fffb1e 	bne	r5,r3,4003a8c <__alt_heap_limit+0xfc003a8c>
 4003aa0:	f800283a 	ret
 4003aa4:	00c003c4 	movi	r3,15
 4003aa8:	1980412e 	bgeu	r3,r6,4003bb0 <memmove+0x140>
 4003aac:	2886b03a 	or	r3,r5,r2
 4003ab0:	18c000cc 	andi	r3,r3,3
 4003ab4:	1800401e 	bne	r3,zero,4003bb8 <memmove+0x148>
 4003ab8:	33fffc04 	addi	r15,r6,-16
 4003abc:	781ed13a 	srli	r15,r15,4
 4003ac0:	28c00104 	addi	r3,r5,4
 4003ac4:	13400104 	addi	r13,r2,4
 4003ac8:	781c913a 	slli	r14,r15,4
 4003acc:	2b000204 	addi	r12,r5,8
 4003ad0:	12c00204 	addi	r11,r2,8
 4003ad4:	73800504 	addi	r14,r14,20
 4003ad8:	2a800304 	addi	r10,r5,12
 4003adc:	12400304 	addi	r9,r2,12
 4003ae0:	2b9d883a 	add	r14,r5,r14
 4003ae4:	2811883a 	mov	r8,r5
 4003ae8:	100f883a 	mov	r7,r2
 4003aec:	41000017 	ldw	r4,0(r8)
 4003af0:	39c00404 	addi	r7,r7,16
 4003af4:	18c00404 	addi	r3,r3,16
 4003af8:	393ffc15 	stw	r4,-16(r7)
 4003afc:	193ffc17 	ldw	r4,-16(r3)
 4003b00:	6b400404 	addi	r13,r13,16
 4003b04:	5ac00404 	addi	r11,r11,16
 4003b08:	693ffc15 	stw	r4,-16(r13)
 4003b0c:	61000017 	ldw	r4,0(r12)
 4003b10:	4a400404 	addi	r9,r9,16
 4003b14:	42000404 	addi	r8,r8,16
 4003b18:	593ffc15 	stw	r4,-16(r11)
 4003b1c:	51000017 	ldw	r4,0(r10)
 4003b20:	63000404 	addi	r12,r12,16
 4003b24:	52800404 	addi	r10,r10,16
 4003b28:	493ffc15 	stw	r4,-16(r9)
 4003b2c:	1bbfef1e 	bne	r3,r14,4003aec <__alt_heap_limit+0xfc003aec>
 4003b30:	79000044 	addi	r4,r15,1
 4003b34:	2008913a 	slli	r4,r4,4
 4003b38:	328003cc 	andi	r10,r6,15
 4003b3c:	02c000c4 	movi	r11,3
 4003b40:	1107883a 	add	r3,r2,r4
 4003b44:	290b883a 	add	r5,r5,r4
 4003b48:	5a801e2e 	bgeu	r11,r10,4003bc4 <memmove+0x154>
 4003b4c:	1813883a 	mov	r9,r3
 4003b50:	2811883a 	mov	r8,r5
 4003b54:	500f883a 	mov	r7,r10
 4003b58:	41000017 	ldw	r4,0(r8)
 4003b5c:	4a400104 	addi	r9,r9,4
 4003b60:	39ffff04 	addi	r7,r7,-4
 4003b64:	493fff15 	stw	r4,-4(r9)
 4003b68:	42000104 	addi	r8,r8,4
 4003b6c:	59fffa36 	bltu	r11,r7,4003b58 <__alt_heap_limit+0xfc003b58>
 4003b70:	513fff04 	addi	r4,r10,-4
 4003b74:	2008d0ba 	srli	r4,r4,2
 4003b78:	318000cc 	andi	r6,r6,3
 4003b7c:	21000044 	addi	r4,r4,1
 4003b80:	2109883a 	add	r4,r4,r4
 4003b84:	2109883a 	add	r4,r4,r4
 4003b88:	1907883a 	add	r3,r3,r4
 4003b8c:	290b883a 	add	r5,r5,r4
 4003b90:	30000b26 	beq	r6,zero,4003bc0 <memmove+0x150>
 4003b94:	198d883a 	add	r6,r3,r6
 4003b98:	29c00003 	ldbu	r7,0(r5)
 4003b9c:	18c00044 	addi	r3,r3,1
 4003ba0:	29400044 	addi	r5,r5,1
 4003ba4:	19ffffc5 	stb	r7,-1(r3)
 4003ba8:	19bffb1e 	bne	r3,r6,4003b98 <__alt_heap_limit+0xfc003b98>
 4003bac:	f800283a 	ret
 4003bb0:	1007883a 	mov	r3,r2
 4003bb4:	003ff606 	br	4003b90 <__alt_heap_limit+0xfc003b90>
 4003bb8:	1007883a 	mov	r3,r2
 4003bbc:	003ff506 	br	4003b94 <__alt_heap_limit+0xfc003b94>
 4003bc0:	f800283a 	ret
 4003bc4:	500d883a 	mov	r6,r10
 4003bc8:	003ff106 	br	4003b90 <__alt_heap_limit+0xfc003b90>

04003bcc <memset>:
 4003bcc:	20c000cc 	andi	r3,r4,3
 4003bd0:	2005883a 	mov	r2,r4
 4003bd4:	18004426 	beq	r3,zero,4003ce8 <memset+0x11c>
 4003bd8:	31ffffc4 	addi	r7,r6,-1
 4003bdc:	30004026 	beq	r6,zero,4003ce0 <memset+0x114>
 4003be0:	2813883a 	mov	r9,r5
 4003be4:	200d883a 	mov	r6,r4
 4003be8:	2007883a 	mov	r3,r4
 4003bec:	00000406 	br	4003c00 <memset+0x34>
 4003bf0:	3a3fffc4 	addi	r8,r7,-1
 4003bf4:	31800044 	addi	r6,r6,1
 4003bf8:	38003926 	beq	r7,zero,4003ce0 <memset+0x114>
 4003bfc:	400f883a 	mov	r7,r8
 4003c00:	18c00044 	addi	r3,r3,1
 4003c04:	32400005 	stb	r9,0(r6)
 4003c08:	1a0000cc 	andi	r8,r3,3
 4003c0c:	403ff81e 	bne	r8,zero,4003bf0 <__alt_heap_limit+0xfc003bf0>
 4003c10:	010000c4 	movi	r4,3
 4003c14:	21c02d2e 	bgeu	r4,r7,4003ccc <memset+0x100>
 4003c18:	29003fcc 	andi	r4,r5,255
 4003c1c:	200c923a 	slli	r6,r4,8
 4003c20:	3108b03a 	or	r4,r6,r4
 4003c24:	200c943a 	slli	r6,r4,16
 4003c28:	218cb03a 	or	r6,r4,r6
 4003c2c:	010003c4 	movi	r4,15
 4003c30:	21c0182e 	bgeu	r4,r7,4003c94 <memset+0xc8>
 4003c34:	3b3ffc04 	addi	r12,r7,-16
 4003c38:	6018d13a 	srli	r12,r12,4
 4003c3c:	1a000104 	addi	r8,r3,4
 4003c40:	1ac00204 	addi	r11,r3,8
 4003c44:	6008913a 	slli	r4,r12,4
 4003c48:	1a800304 	addi	r10,r3,12
 4003c4c:	1813883a 	mov	r9,r3
 4003c50:	21000504 	addi	r4,r4,20
 4003c54:	1909883a 	add	r4,r3,r4
 4003c58:	49800015 	stw	r6,0(r9)
 4003c5c:	41800015 	stw	r6,0(r8)
 4003c60:	59800015 	stw	r6,0(r11)
 4003c64:	51800015 	stw	r6,0(r10)
 4003c68:	42000404 	addi	r8,r8,16
 4003c6c:	4a400404 	addi	r9,r9,16
 4003c70:	5ac00404 	addi	r11,r11,16
 4003c74:	52800404 	addi	r10,r10,16
 4003c78:	413ff71e 	bne	r8,r4,4003c58 <__alt_heap_limit+0xfc003c58>
 4003c7c:	63000044 	addi	r12,r12,1
 4003c80:	6018913a 	slli	r12,r12,4
 4003c84:	39c003cc 	andi	r7,r7,15
 4003c88:	010000c4 	movi	r4,3
 4003c8c:	1b07883a 	add	r3,r3,r12
 4003c90:	21c00e2e 	bgeu	r4,r7,4003ccc <memset+0x100>
 4003c94:	1813883a 	mov	r9,r3
 4003c98:	3811883a 	mov	r8,r7
 4003c9c:	010000c4 	movi	r4,3
 4003ca0:	49800015 	stw	r6,0(r9)
 4003ca4:	423fff04 	addi	r8,r8,-4
 4003ca8:	4a400104 	addi	r9,r9,4
 4003cac:	223ffc36 	bltu	r4,r8,4003ca0 <__alt_heap_limit+0xfc003ca0>
 4003cb0:	393fff04 	addi	r4,r7,-4
 4003cb4:	2008d0ba 	srli	r4,r4,2
 4003cb8:	39c000cc 	andi	r7,r7,3
 4003cbc:	21000044 	addi	r4,r4,1
 4003cc0:	2109883a 	add	r4,r4,r4
 4003cc4:	2109883a 	add	r4,r4,r4
 4003cc8:	1907883a 	add	r3,r3,r4
 4003ccc:	38000526 	beq	r7,zero,4003ce4 <memset+0x118>
 4003cd0:	19cf883a 	add	r7,r3,r7
 4003cd4:	19400005 	stb	r5,0(r3)
 4003cd8:	18c00044 	addi	r3,r3,1
 4003cdc:	38fffd1e 	bne	r7,r3,4003cd4 <__alt_heap_limit+0xfc003cd4>
 4003ce0:	f800283a 	ret
 4003ce4:	f800283a 	ret
 4003ce8:	2007883a 	mov	r3,r4
 4003cec:	300f883a 	mov	r7,r6
 4003cf0:	003fc706 	br	4003c10 <__alt_heap_limit+0xfc003c10>

04003cf4 <_realloc_r>:
 4003cf4:	defff604 	addi	sp,sp,-40
 4003cf8:	dc800215 	stw	r18,8(sp)
 4003cfc:	dfc00915 	stw	ra,36(sp)
 4003d00:	df000815 	stw	fp,32(sp)
 4003d04:	ddc00715 	stw	r23,28(sp)
 4003d08:	dd800615 	stw	r22,24(sp)
 4003d0c:	dd400515 	stw	r21,20(sp)
 4003d10:	dd000415 	stw	r20,16(sp)
 4003d14:	dcc00315 	stw	r19,12(sp)
 4003d18:	dc400115 	stw	r17,4(sp)
 4003d1c:	dc000015 	stw	r16,0(sp)
 4003d20:	3025883a 	mov	r18,r6
 4003d24:	2800b726 	beq	r5,zero,4004004 <_realloc_r+0x310>
 4003d28:	282b883a 	mov	r21,r5
 4003d2c:	2029883a 	mov	r20,r4
 4003d30:	400531c0 	call	400531c <__malloc_lock>
 4003d34:	a8bfff17 	ldw	r2,-4(r21)
 4003d38:	043fff04 	movi	r16,-4
 4003d3c:	90c002c4 	addi	r3,r18,11
 4003d40:	01000584 	movi	r4,22
 4003d44:	acfffe04 	addi	r19,r21,-8
 4003d48:	1420703a 	and	r16,r2,r16
 4003d4c:	20c0332e 	bgeu	r4,r3,4003e1c <_realloc_r+0x128>
 4003d50:	047ffe04 	movi	r17,-8
 4003d54:	1c62703a 	and	r17,r3,r17
 4003d58:	8807883a 	mov	r3,r17
 4003d5c:	88005816 	blt	r17,zero,4003ec0 <_realloc_r+0x1cc>
 4003d60:	8c805736 	bltu	r17,r18,4003ec0 <_realloc_r+0x1cc>
 4003d64:	80c0300e 	bge	r16,r3,4003e28 <_realloc_r+0x134>
 4003d68:	07010074 	movhi	fp,1025
 4003d6c:	e726bf04 	addi	fp,fp,-25860
 4003d70:	e1c00217 	ldw	r7,8(fp)
 4003d74:	9c09883a 	add	r4,r19,r16
 4003d78:	22000117 	ldw	r8,4(r4)
 4003d7c:	21c06326 	beq	r4,r7,4003f0c <_realloc_r+0x218>
 4003d80:	017fff84 	movi	r5,-2
 4003d84:	414a703a 	and	r5,r8,r5
 4003d88:	214b883a 	add	r5,r4,r5
 4003d8c:	29800117 	ldw	r6,4(r5)
 4003d90:	3180004c 	andi	r6,r6,1
 4003d94:	30003f26 	beq	r6,zero,4003e94 <_realloc_r+0x1a0>
 4003d98:	1080004c 	andi	r2,r2,1
 4003d9c:	10008326 	beq	r2,zero,4003fac <_realloc_r+0x2b8>
 4003da0:	900b883a 	mov	r5,r18
 4003da4:	a009883a 	mov	r4,r20
 4003da8:	4001fc80 	call	4001fc8 <_malloc_r>
 4003dac:	1025883a 	mov	r18,r2
 4003db0:	10011e26 	beq	r2,zero,400422c <_realloc_r+0x538>
 4003db4:	a93fff17 	ldw	r4,-4(r21)
 4003db8:	10fffe04 	addi	r3,r2,-8
 4003dbc:	00bfff84 	movi	r2,-2
 4003dc0:	2084703a 	and	r2,r4,r2
 4003dc4:	9885883a 	add	r2,r19,r2
 4003dc8:	1880ee26 	beq	r3,r2,4004184 <_realloc_r+0x490>
 4003dcc:	81bfff04 	addi	r6,r16,-4
 4003dd0:	00800904 	movi	r2,36
 4003dd4:	1180b836 	bltu	r2,r6,40040b8 <_realloc_r+0x3c4>
 4003dd8:	00c004c4 	movi	r3,19
 4003ddc:	19809636 	bltu	r3,r6,4004038 <_realloc_r+0x344>
 4003de0:	9005883a 	mov	r2,r18
 4003de4:	a807883a 	mov	r3,r21
 4003de8:	19000017 	ldw	r4,0(r3)
 4003dec:	11000015 	stw	r4,0(r2)
 4003df0:	19000117 	ldw	r4,4(r3)
 4003df4:	11000115 	stw	r4,4(r2)
 4003df8:	18c00217 	ldw	r3,8(r3)
 4003dfc:	10c00215 	stw	r3,8(r2)
 4003e00:	a80b883a 	mov	r5,r21
 4003e04:	a009883a 	mov	r4,r20
 4003e08:	4002ee40 	call	4002ee4 <_free_r>
 4003e0c:	a009883a 	mov	r4,r20
 4003e10:	40053400 	call	4005340 <__malloc_unlock>
 4003e14:	9005883a 	mov	r2,r18
 4003e18:	00001206 	br	4003e64 <_realloc_r+0x170>
 4003e1c:	00c00404 	movi	r3,16
 4003e20:	1823883a 	mov	r17,r3
 4003e24:	003fce06 	br	4003d60 <__alt_heap_limit+0xfc003d60>
 4003e28:	a825883a 	mov	r18,r21
 4003e2c:	8445c83a 	sub	r2,r16,r17
 4003e30:	00c003c4 	movi	r3,15
 4003e34:	18802636 	bltu	r3,r2,4003ed0 <_realloc_r+0x1dc>
 4003e38:	99800117 	ldw	r6,4(r19)
 4003e3c:	9c07883a 	add	r3,r19,r16
 4003e40:	3180004c 	andi	r6,r6,1
 4003e44:	3420b03a 	or	r16,r6,r16
 4003e48:	9c000115 	stw	r16,4(r19)
 4003e4c:	18800117 	ldw	r2,4(r3)
 4003e50:	10800054 	ori	r2,r2,1
 4003e54:	18800115 	stw	r2,4(r3)
 4003e58:	a009883a 	mov	r4,r20
 4003e5c:	40053400 	call	4005340 <__malloc_unlock>
 4003e60:	9005883a 	mov	r2,r18
 4003e64:	dfc00917 	ldw	ra,36(sp)
 4003e68:	df000817 	ldw	fp,32(sp)
 4003e6c:	ddc00717 	ldw	r23,28(sp)
 4003e70:	dd800617 	ldw	r22,24(sp)
 4003e74:	dd400517 	ldw	r21,20(sp)
 4003e78:	dd000417 	ldw	r20,16(sp)
 4003e7c:	dcc00317 	ldw	r19,12(sp)
 4003e80:	dc800217 	ldw	r18,8(sp)
 4003e84:	dc400117 	ldw	r17,4(sp)
 4003e88:	dc000017 	ldw	r16,0(sp)
 4003e8c:	dec00a04 	addi	sp,sp,40
 4003e90:	f800283a 	ret
 4003e94:	017fff04 	movi	r5,-4
 4003e98:	414a703a 	and	r5,r8,r5
 4003e9c:	814d883a 	add	r6,r16,r5
 4003ea0:	30c01f16 	blt	r6,r3,4003f20 <_realloc_r+0x22c>
 4003ea4:	20800317 	ldw	r2,12(r4)
 4003ea8:	20c00217 	ldw	r3,8(r4)
 4003eac:	a825883a 	mov	r18,r21
 4003eb0:	3021883a 	mov	r16,r6
 4003eb4:	18800315 	stw	r2,12(r3)
 4003eb8:	10c00215 	stw	r3,8(r2)
 4003ebc:	003fdb06 	br	4003e2c <__alt_heap_limit+0xfc003e2c>
 4003ec0:	00800304 	movi	r2,12
 4003ec4:	a0800015 	stw	r2,0(r20)
 4003ec8:	0005883a 	mov	r2,zero
 4003ecc:	003fe506 	br	4003e64 <__alt_heap_limit+0xfc003e64>
 4003ed0:	98c00117 	ldw	r3,4(r19)
 4003ed4:	9c4b883a 	add	r5,r19,r17
 4003ed8:	11000054 	ori	r4,r2,1
 4003edc:	18c0004c 	andi	r3,r3,1
 4003ee0:	1c62b03a 	or	r17,r3,r17
 4003ee4:	9c400115 	stw	r17,4(r19)
 4003ee8:	29000115 	stw	r4,4(r5)
 4003eec:	2885883a 	add	r2,r5,r2
 4003ef0:	10c00117 	ldw	r3,4(r2)
 4003ef4:	29400204 	addi	r5,r5,8
 4003ef8:	a009883a 	mov	r4,r20
 4003efc:	18c00054 	ori	r3,r3,1
 4003f00:	10c00115 	stw	r3,4(r2)
 4003f04:	4002ee40 	call	4002ee4 <_free_r>
 4003f08:	003fd306 	br	4003e58 <__alt_heap_limit+0xfc003e58>
 4003f0c:	017fff04 	movi	r5,-4
 4003f10:	414a703a 	and	r5,r8,r5
 4003f14:	89800404 	addi	r6,r17,16
 4003f18:	8151883a 	add	r8,r16,r5
 4003f1c:	4180590e 	bge	r8,r6,4004084 <_realloc_r+0x390>
 4003f20:	1080004c 	andi	r2,r2,1
 4003f24:	103f9e1e 	bne	r2,zero,4003da0 <__alt_heap_limit+0xfc003da0>
 4003f28:	adbffe17 	ldw	r22,-8(r21)
 4003f2c:	00bfff04 	movi	r2,-4
 4003f30:	9dadc83a 	sub	r22,r19,r22
 4003f34:	b1800117 	ldw	r6,4(r22)
 4003f38:	3084703a 	and	r2,r6,r2
 4003f3c:	20002026 	beq	r4,zero,4003fc0 <_realloc_r+0x2cc>
 4003f40:	80af883a 	add	r23,r16,r2
 4003f44:	b96f883a 	add	r23,r23,r5
 4003f48:	21c05f26 	beq	r4,r7,40040c8 <_realloc_r+0x3d4>
 4003f4c:	b8c01c16 	blt	r23,r3,4003fc0 <_realloc_r+0x2cc>
 4003f50:	20800317 	ldw	r2,12(r4)
 4003f54:	20c00217 	ldw	r3,8(r4)
 4003f58:	81bfff04 	addi	r6,r16,-4
 4003f5c:	01000904 	movi	r4,36
 4003f60:	18800315 	stw	r2,12(r3)
 4003f64:	10c00215 	stw	r3,8(r2)
 4003f68:	b0c00217 	ldw	r3,8(r22)
 4003f6c:	b0800317 	ldw	r2,12(r22)
 4003f70:	b4800204 	addi	r18,r22,8
 4003f74:	18800315 	stw	r2,12(r3)
 4003f78:	10c00215 	stw	r3,8(r2)
 4003f7c:	21801b36 	bltu	r4,r6,4003fec <_realloc_r+0x2f8>
 4003f80:	008004c4 	movi	r2,19
 4003f84:	1180352e 	bgeu	r2,r6,400405c <_realloc_r+0x368>
 4003f88:	a8800017 	ldw	r2,0(r21)
 4003f8c:	b0800215 	stw	r2,8(r22)
 4003f90:	a8800117 	ldw	r2,4(r21)
 4003f94:	b0800315 	stw	r2,12(r22)
 4003f98:	008006c4 	movi	r2,27
 4003f9c:	11807f36 	bltu	r2,r6,400419c <_realloc_r+0x4a8>
 4003fa0:	b0800404 	addi	r2,r22,16
 4003fa4:	ad400204 	addi	r21,r21,8
 4003fa8:	00002d06 	br	4004060 <_realloc_r+0x36c>
 4003fac:	adbffe17 	ldw	r22,-8(r21)
 4003fb0:	00bfff04 	movi	r2,-4
 4003fb4:	9dadc83a 	sub	r22,r19,r22
 4003fb8:	b1000117 	ldw	r4,4(r22)
 4003fbc:	2084703a 	and	r2,r4,r2
 4003fc0:	b03f7726 	beq	r22,zero,4003da0 <__alt_heap_limit+0xfc003da0>
 4003fc4:	80af883a 	add	r23,r16,r2
 4003fc8:	b8ff7516 	blt	r23,r3,4003da0 <__alt_heap_limit+0xfc003da0>
 4003fcc:	b0800317 	ldw	r2,12(r22)
 4003fd0:	b0c00217 	ldw	r3,8(r22)
 4003fd4:	81bfff04 	addi	r6,r16,-4
 4003fd8:	01000904 	movi	r4,36
 4003fdc:	18800315 	stw	r2,12(r3)
 4003fe0:	10c00215 	stw	r3,8(r2)
 4003fe4:	b4800204 	addi	r18,r22,8
 4003fe8:	21bfe52e 	bgeu	r4,r6,4003f80 <__alt_heap_limit+0xfc003f80>
 4003fec:	a80b883a 	mov	r5,r21
 4003ff0:	9009883a 	mov	r4,r18
 4003ff4:	4003a700 	call	4003a70 <memmove>
 4003ff8:	b821883a 	mov	r16,r23
 4003ffc:	b027883a 	mov	r19,r22
 4004000:	003f8a06 	br	4003e2c <__alt_heap_limit+0xfc003e2c>
 4004004:	300b883a 	mov	r5,r6
 4004008:	dfc00917 	ldw	ra,36(sp)
 400400c:	df000817 	ldw	fp,32(sp)
 4004010:	ddc00717 	ldw	r23,28(sp)
 4004014:	dd800617 	ldw	r22,24(sp)
 4004018:	dd400517 	ldw	r21,20(sp)
 400401c:	dd000417 	ldw	r20,16(sp)
 4004020:	dcc00317 	ldw	r19,12(sp)
 4004024:	dc800217 	ldw	r18,8(sp)
 4004028:	dc400117 	ldw	r17,4(sp)
 400402c:	dc000017 	ldw	r16,0(sp)
 4004030:	dec00a04 	addi	sp,sp,40
 4004034:	4001fc81 	jmpi	4001fc8 <_malloc_r>
 4004038:	a8c00017 	ldw	r3,0(r21)
 400403c:	90c00015 	stw	r3,0(r18)
 4004040:	a8c00117 	ldw	r3,4(r21)
 4004044:	90c00115 	stw	r3,4(r18)
 4004048:	00c006c4 	movi	r3,27
 400404c:	19804536 	bltu	r3,r6,4004164 <_realloc_r+0x470>
 4004050:	90800204 	addi	r2,r18,8
 4004054:	a8c00204 	addi	r3,r21,8
 4004058:	003f6306 	br	4003de8 <__alt_heap_limit+0xfc003de8>
 400405c:	9005883a 	mov	r2,r18
 4004060:	a8c00017 	ldw	r3,0(r21)
 4004064:	b821883a 	mov	r16,r23
 4004068:	b027883a 	mov	r19,r22
 400406c:	10c00015 	stw	r3,0(r2)
 4004070:	a8c00117 	ldw	r3,4(r21)
 4004074:	10c00115 	stw	r3,4(r2)
 4004078:	a8c00217 	ldw	r3,8(r21)
 400407c:	10c00215 	stw	r3,8(r2)
 4004080:	003f6a06 	br	4003e2c <__alt_heap_limit+0xfc003e2c>
 4004084:	9c67883a 	add	r19,r19,r17
 4004088:	4445c83a 	sub	r2,r8,r17
 400408c:	e4c00215 	stw	r19,8(fp)
 4004090:	10800054 	ori	r2,r2,1
 4004094:	98800115 	stw	r2,4(r19)
 4004098:	a8bfff17 	ldw	r2,-4(r21)
 400409c:	a009883a 	mov	r4,r20
 40040a0:	1080004c 	andi	r2,r2,1
 40040a4:	1462b03a 	or	r17,r2,r17
 40040a8:	ac7fff15 	stw	r17,-4(r21)
 40040ac:	40053400 	call	4005340 <__malloc_unlock>
 40040b0:	a805883a 	mov	r2,r21
 40040b4:	003f6b06 	br	4003e64 <__alt_heap_limit+0xfc003e64>
 40040b8:	a80b883a 	mov	r5,r21
 40040bc:	9009883a 	mov	r4,r18
 40040c0:	4003a700 	call	4003a70 <memmove>
 40040c4:	003f4e06 	br	4003e00 <__alt_heap_limit+0xfc003e00>
 40040c8:	89000404 	addi	r4,r17,16
 40040cc:	b93fbc16 	blt	r23,r4,4003fc0 <__alt_heap_limit+0xfc003fc0>
 40040d0:	b0800317 	ldw	r2,12(r22)
 40040d4:	b0c00217 	ldw	r3,8(r22)
 40040d8:	81bfff04 	addi	r6,r16,-4
 40040dc:	01000904 	movi	r4,36
 40040e0:	18800315 	stw	r2,12(r3)
 40040e4:	10c00215 	stw	r3,8(r2)
 40040e8:	b4800204 	addi	r18,r22,8
 40040ec:	21804336 	bltu	r4,r6,40041fc <_realloc_r+0x508>
 40040f0:	008004c4 	movi	r2,19
 40040f4:	11803f2e 	bgeu	r2,r6,40041f4 <_realloc_r+0x500>
 40040f8:	a8800017 	ldw	r2,0(r21)
 40040fc:	b0800215 	stw	r2,8(r22)
 4004100:	a8800117 	ldw	r2,4(r21)
 4004104:	b0800315 	stw	r2,12(r22)
 4004108:	008006c4 	movi	r2,27
 400410c:	11803f36 	bltu	r2,r6,400420c <_realloc_r+0x518>
 4004110:	b0800404 	addi	r2,r22,16
 4004114:	ad400204 	addi	r21,r21,8
 4004118:	a8c00017 	ldw	r3,0(r21)
 400411c:	10c00015 	stw	r3,0(r2)
 4004120:	a8c00117 	ldw	r3,4(r21)
 4004124:	10c00115 	stw	r3,4(r2)
 4004128:	a8c00217 	ldw	r3,8(r21)
 400412c:	10c00215 	stw	r3,8(r2)
 4004130:	b447883a 	add	r3,r22,r17
 4004134:	bc45c83a 	sub	r2,r23,r17
 4004138:	e0c00215 	stw	r3,8(fp)
 400413c:	10800054 	ori	r2,r2,1
 4004140:	18800115 	stw	r2,4(r3)
 4004144:	b0800117 	ldw	r2,4(r22)
 4004148:	a009883a 	mov	r4,r20
 400414c:	1080004c 	andi	r2,r2,1
 4004150:	1462b03a 	or	r17,r2,r17
 4004154:	b4400115 	stw	r17,4(r22)
 4004158:	40053400 	call	4005340 <__malloc_unlock>
 400415c:	9005883a 	mov	r2,r18
 4004160:	003f4006 	br	4003e64 <__alt_heap_limit+0xfc003e64>
 4004164:	a8c00217 	ldw	r3,8(r21)
 4004168:	90c00215 	stw	r3,8(r18)
 400416c:	a8c00317 	ldw	r3,12(r21)
 4004170:	90c00315 	stw	r3,12(r18)
 4004174:	30801126 	beq	r6,r2,40041bc <_realloc_r+0x4c8>
 4004178:	90800404 	addi	r2,r18,16
 400417c:	a8c00404 	addi	r3,r21,16
 4004180:	003f1906 	br	4003de8 <__alt_heap_limit+0xfc003de8>
 4004184:	90ffff17 	ldw	r3,-4(r18)
 4004188:	00bfff04 	movi	r2,-4
 400418c:	a825883a 	mov	r18,r21
 4004190:	1884703a 	and	r2,r3,r2
 4004194:	80a1883a 	add	r16,r16,r2
 4004198:	003f2406 	br	4003e2c <__alt_heap_limit+0xfc003e2c>
 400419c:	a8800217 	ldw	r2,8(r21)
 40041a0:	b0800415 	stw	r2,16(r22)
 40041a4:	a8800317 	ldw	r2,12(r21)
 40041a8:	b0800515 	stw	r2,20(r22)
 40041ac:	31000a26 	beq	r6,r4,40041d8 <_realloc_r+0x4e4>
 40041b0:	b0800604 	addi	r2,r22,24
 40041b4:	ad400404 	addi	r21,r21,16
 40041b8:	003fa906 	br	4004060 <__alt_heap_limit+0xfc004060>
 40041bc:	a9000417 	ldw	r4,16(r21)
 40041c0:	90800604 	addi	r2,r18,24
 40041c4:	a8c00604 	addi	r3,r21,24
 40041c8:	91000415 	stw	r4,16(r18)
 40041cc:	a9000517 	ldw	r4,20(r21)
 40041d0:	91000515 	stw	r4,20(r18)
 40041d4:	003f0406 	br	4003de8 <__alt_heap_limit+0xfc003de8>
 40041d8:	a8c00417 	ldw	r3,16(r21)
 40041dc:	ad400604 	addi	r21,r21,24
 40041e0:	b0800804 	addi	r2,r22,32
 40041e4:	b0c00615 	stw	r3,24(r22)
 40041e8:	a8ffff17 	ldw	r3,-4(r21)
 40041ec:	b0c00715 	stw	r3,28(r22)
 40041f0:	003f9b06 	br	4004060 <__alt_heap_limit+0xfc004060>
 40041f4:	9005883a 	mov	r2,r18
 40041f8:	003fc706 	br	4004118 <__alt_heap_limit+0xfc004118>
 40041fc:	a80b883a 	mov	r5,r21
 4004200:	9009883a 	mov	r4,r18
 4004204:	4003a700 	call	4003a70 <memmove>
 4004208:	003fc906 	br	4004130 <__alt_heap_limit+0xfc004130>
 400420c:	a8800217 	ldw	r2,8(r21)
 4004210:	b0800415 	stw	r2,16(r22)
 4004214:	a8800317 	ldw	r2,12(r21)
 4004218:	b0800515 	stw	r2,20(r22)
 400421c:	31000726 	beq	r6,r4,400423c <_realloc_r+0x548>
 4004220:	b0800604 	addi	r2,r22,24
 4004224:	ad400404 	addi	r21,r21,16
 4004228:	003fbb06 	br	4004118 <__alt_heap_limit+0xfc004118>
 400422c:	a009883a 	mov	r4,r20
 4004230:	40053400 	call	4005340 <__malloc_unlock>
 4004234:	0005883a 	mov	r2,zero
 4004238:	003f0a06 	br	4003e64 <__alt_heap_limit+0xfc003e64>
 400423c:	a8c00417 	ldw	r3,16(r21)
 4004240:	ad400604 	addi	r21,r21,24
 4004244:	b0800804 	addi	r2,r22,32
 4004248:	b0c00615 	stw	r3,24(r22)
 400424c:	a8ffff17 	ldw	r3,-4(r21)
 4004250:	b0c00715 	stw	r3,28(r22)
 4004254:	003fb006 	br	4004118 <__alt_heap_limit+0xfc004118>

04004258 <__sread>:
 4004258:	defffe04 	addi	sp,sp,-8
 400425c:	dc000015 	stw	r16,0(sp)
 4004260:	2821883a 	mov	r16,r5
 4004264:	2940038f 	ldh	r5,14(r5)
 4004268:	dfc00115 	stw	ra,4(sp)
 400426c:	4004b640 	call	4004b64 <_read_r>
 4004270:	10000716 	blt	r2,zero,4004290 <__sread+0x38>
 4004274:	80c01417 	ldw	r3,80(r16)
 4004278:	1887883a 	add	r3,r3,r2
 400427c:	80c01415 	stw	r3,80(r16)
 4004280:	dfc00117 	ldw	ra,4(sp)
 4004284:	dc000017 	ldw	r16,0(sp)
 4004288:	dec00204 	addi	sp,sp,8
 400428c:	f800283a 	ret
 4004290:	80c0030b 	ldhu	r3,12(r16)
 4004294:	18fbffcc 	andi	r3,r3,61439
 4004298:	80c0030d 	sth	r3,12(r16)
 400429c:	dfc00117 	ldw	ra,4(sp)
 40042a0:	dc000017 	ldw	r16,0(sp)
 40042a4:	dec00204 	addi	sp,sp,8
 40042a8:	f800283a 	ret

040042ac <__seofread>:
 40042ac:	0005883a 	mov	r2,zero
 40042b0:	f800283a 	ret

040042b4 <__swrite>:
 40042b4:	2880030b 	ldhu	r2,12(r5)
 40042b8:	defffb04 	addi	sp,sp,-20
 40042bc:	dcc00315 	stw	r19,12(sp)
 40042c0:	dc800215 	stw	r18,8(sp)
 40042c4:	dc400115 	stw	r17,4(sp)
 40042c8:	dc000015 	stw	r16,0(sp)
 40042cc:	dfc00415 	stw	ra,16(sp)
 40042d0:	10c0400c 	andi	r3,r2,256
 40042d4:	2821883a 	mov	r16,r5
 40042d8:	2023883a 	mov	r17,r4
 40042dc:	3025883a 	mov	r18,r6
 40042e0:	3827883a 	mov	r19,r7
 40042e4:	18000526 	beq	r3,zero,40042fc <__swrite+0x48>
 40042e8:	2940038f 	ldh	r5,14(r5)
 40042ec:	01c00084 	movi	r7,2
 40042f0:	000d883a 	mov	r6,zero
 40042f4:	40049480 	call	4004948 <_lseek_r>
 40042f8:	8080030b 	ldhu	r2,12(r16)
 40042fc:	8140038f 	ldh	r5,14(r16)
 4004300:	10bbffcc 	andi	r2,r2,61439
 4004304:	980f883a 	mov	r7,r19
 4004308:	900d883a 	mov	r6,r18
 400430c:	8809883a 	mov	r4,r17
 4004310:	8080030d 	sth	r2,12(r16)
 4004314:	dfc00417 	ldw	ra,16(sp)
 4004318:	dcc00317 	ldw	r19,12(sp)
 400431c:	dc800217 	ldw	r18,8(sp)
 4004320:	dc400117 	ldw	r17,4(sp)
 4004324:	dc000017 	ldw	r16,0(sp)
 4004328:	dec00504 	addi	sp,sp,20
 400432c:	40043941 	jmpi	4004394 <_write_r>

04004330 <__sseek>:
 4004330:	defffe04 	addi	sp,sp,-8
 4004334:	dc000015 	stw	r16,0(sp)
 4004338:	2821883a 	mov	r16,r5
 400433c:	2940038f 	ldh	r5,14(r5)
 4004340:	dfc00115 	stw	ra,4(sp)
 4004344:	40049480 	call	4004948 <_lseek_r>
 4004348:	00ffffc4 	movi	r3,-1
 400434c:	10c00826 	beq	r2,r3,4004370 <__sseek+0x40>
 4004350:	80c0030b 	ldhu	r3,12(r16)
 4004354:	80801415 	stw	r2,80(r16)
 4004358:	18c40014 	ori	r3,r3,4096
 400435c:	80c0030d 	sth	r3,12(r16)
 4004360:	dfc00117 	ldw	ra,4(sp)
 4004364:	dc000017 	ldw	r16,0(sp)
 4004368:	dec00204 	addi	sp,sp,8
 400436c:	f800283a 	ret
 4004370:	80c0030b 	ldhu	r3,12(r16)
 4004374:	18fbffcc 	andi	r3,r3,61439
 4004378:	80c0030d 	sth	r3,12(r16)
 400437c:	dfc00117 	ldw	ra,4(sp)
 4004380:	dc000017 	ldw	r16,0(sp)
 4004384:	dec00204 	addi	sp,sp,8
 4004388:	f800283a 	ret

0400438c <__sclose>:
 400438c:	2940038f 	ldh	r5,14(r5)
 4004390:	40045481 	jmpi	4004548 <_close_r>

04004394 <_write_r>:
 4004394:	defffd04 	addi	sp,sp,-12
 4004398:	2805883a 	mov	r2,r5
 400439c:	dc000015 	stw	r16,0(sp)
 40043a0:	04010074 	movhi	r16,1025
 40043a4:	dc400115 	stw	r17,4(sp)
 40043a8:	300b883a 	mov	r5,r6
 40043ac:	8434fd04 	addi	r16,r16,-11276
 40043b0:	2023883a 	mov	r17,r4
 40043b4:	380d883a 	mov	r6,r7
 40043b8:	1009883a 	mov	r4,r2
 40043bc:	dfc00215 	stw	ra,8(sp)
 40043c0:	80000015 	stw	zero,0(r16)
 40043c4:	40056440 	call	4005644 <write>
 40043c8:	00ffffc4 	movi	r3,-1
 40043cc:	10c00526 	beq	r2,r3,40043e4 <_write_r+0x50>
 40043d0:	dfc00217 	ldw	ra,8(sp)
 40043d4:	dc400117 	ldw	r17,4(sp)
 40043d8:	dc000017 	ldw	r16,0(sp)
 40043dc:	dec00304 	addi	sp,sp,12
 40043e0:	f800283a 	ret
 40043e4:	80c00017 	ldw	r3,0(r16)
 40043e8:	183ff926 	beq	r3,zero,40043d0 <__alt_heap_limit+0xfc0043d0>
 40043ec:	88c00015 	stw	r3,0(r17)
 40043f0:	003ff706 	br	40043d0 <__alt_heap_limit+0xfc0043d0>

040043f4 <__swsetup_r>:
 40043f4:	00810074 	movhi	r2,1025
 40043f8:	defffd04 	addi	sp,sp,-12
 40043fc:	10ad4f04 	addi	r2,r2,-19140
 4004400:	dc400115 	stw	r17,4(sp)
 4004404:	2023883a 	mov	r17,r4
 4004408:	11000017 	ldw	r4,0(r2)
 400440c:	dc000015 	stw	r16,0(sp)
 4004410:	dfc00215 	stw	ra,8(sp)
 4004414:	2821883a 	mov	r16,r5
 4004418:	20000226 	beq	r4,zero,4004424 <__swsetup_r+0x30>
 400441c:	20800e17 	ldw	r2,56(r4)
 4004420:	10003126 	beq	r2,zero,40044e8 <__swsetup_r+0xf4>
 4004424:	8080030b 	ldhu	r2,12(r16)
 4004428:	10c0020c 	andi	r3,r2,8
 400442c:	1009883a 	mov	r4,r2
 4004430:	18000f26 	beq	r3,zero,4004470 <__swsetup_r+0x7c>
 4004434:	80c00417 	ldw	r3,16(r16)
 4004438:	18001526 	beq	r3,zero,4004490 <__swsetup_r+0x9c>
 400443c:	1100004c 	andi	r4,r2,1
 4004440:	20001c1e 	bne	r4,zero,40044b4 <__swsetup_r+0xc0>
 4004444:	1080008c 	andi	r2,r2,2
 4004448:	1000291e 	bne	r2,zero,40044f0 <__swsetup_r+0xfc>
 400444c:	80800517 	ldw	r2,20(r16)
 4004450:	80800215 	stw	r2,8(r16)
 4004454:	18001c26 	beq	r3,zero,40044c8 <__swsetup_r+0xd4>
 4004458:	0005883a 	mov	r2,zero
 400445c:	dfc00217 	ldw	ra,8(sp)
 4004460:	dc400117 	ldw	r17,4(sp)
 4004464:	dc000017 	ldw	r16,0(sp)
 4004468:	dec00304 	addi	sp,sp,12
 400446c:	f800283a 	ret
 4004470:	2080040c 	andi	r2,r4,16
 4004474:	10002e26 	beq	r2,zero,4004530 <__swsetup_r+0x13c>
 4004478:	2080010c 	andi	r2,r4,4
 400447c:	10001e1e 	bne	r2,zero,40044f8 <__swsetup_r+0x104>
 4004480:	80c00417 	ldw	r3,16(r16)
 4004484:	20800214 	ori	r2,r4,8
 4004488:	8080030d 	sth	r2,12(r16)
 400448c:	183feb1e 	bne	r3,zero,400443c <__alt_heap_limit+0xfc00443c>
 4004490:	1100a00c 	andi	r4,r2,640
 4004494:	01408004 	movi	r5,512
 4004498:	217fe826 	beq	r4,r5,400443c <__alt_heap_limit+0xfc00443c>
 400449c:	800b883a 	mov	r5,r16
 40044a0:	8809883a 	mov	r4,r17
 40044a4:	40049a80 	call	40049a8 <__smakebuf_r>
 40044a8:	8080030b 	ldhu	r2,12(r16)
 40044ac:	80c00417 	ldw	r3,16(r16)
 40044b0:	003fe206 	br	400443c <__alt_heap_limit+0xfc00443c>
 40044b4:	80800517 	ldw	r2,20(r16)
 40044b8:	80000215 	stw	zero,8(r16)
 40044bc:	0085c83a 	sub	r2,zero,r2
 40044c0:	80800615 	stw	r2,24(r16)
 40044c4:	183fe41e 	bne	r3,zero,4004458 <__alt_heap_limit+0xfc004458>
 40044c8:	80c0030b 	ldhu	r3,12(r16)
 40044cc:	0005883a 	mov	r2,zero
 40044d0:	1900200c 	andi	r4,r3,128
 40044d4:	203fe126 	beq	r4,zero,400445c <__alt_heap_limit+0xfc00445c>
 40044d8:	18c01014 	ori	r3,r3,64
 40044dc:	80c0030d 	sth	r3,12(r16)
 40044e0:	00bfffc4 	movi	r2,-1
 40044e4:	003fdd06 	br	400445c <__alt_heap_limit+0xfc00445c>
 40044e8:	4002d700 	call	4002d70 <__sinit>
 40044ec:	003fcd06 	br	4004424 <__alt_heap_limit+0xfc004424>
 40044f0:	0005883a 	mov	r2,zero
 40044f4:	003fd606 	br	4004450 <__alt_heap_limit+0xfc004450>
 40044f8:	81400c17 	ldw	r5,48(r16)
 40044fc:	28000626 	beq	r5,zero,4004518 <__swsetup_r+0x124>
 4004500:	80801004 	addi	r2,r16,64
 4004504:	28800326 	beq	r5,r2,4004514 <__swsetup_r+0x120>
 4004508:	8809883a 	mov	r4,r17
 400450c:	4002ee40 	call	4002ee4 <_free_r>
 4004510:	8100030b 	ldhu	r4,12(r16)
 4004514:	80000c15 	stw	zero,48(r16)
 4004518:	80c00417 	ldw	r3,16(r16)
 400451c:	00bff6c4 	movi	r2,-37
 4004520:	1108703a 	and	r4,r2,r4
 4004524:	80000115 	stw	zero,4(r16)
 4004528:	80c00015 	stw	r3,0(r16)
 400452c:	003fd506 	br	4004484 <__alt_heap_limit+0xfc004484>
 4004530:	00800244 	movi	r2,9
 4004534:	88800015 	stw	r2,0(r17)
 4004538:	20801014 	ori	r2,r4,64
 400453c:	8080030d 	sth	r2,12(r16)
 4004540:	00bfffc4 	movi	r2,-1
 4004544:	003fc506 	br	400445c <__alt_heap_limit+0xfc00445c>

04004548 <_close_r>:
 4004548:	defffd04 	addi	sp,sp,-12
 400454c:	dc000015 	stw	r16,0(sp)
 4004550:	04010074 	movhi	r16,1025
 4004554:	dc400115 	stw	r17,4(sp)
 4004558:	8434fd04 	addi	r16,r16,-11276
 400455c:	2023883a 	mov	r17,r4
 4004560:	2809883a 	mov	r4,r5
 4004564:	dfc00215 	stw	ra,8(sp)
 4004568:	80000015 	stw	zero,0(r16)
 400456c:	4004dbc0 	call	4004dbc <close>
 4004570:	00ffffc4 	movi	r3,-1
 4004574:	10c00526 	beq	r2,r3,400458c <_close_r+0x44>
 4004578:	dfc00217 	ldw	ra,8(sp)
 400457c:	dc400117 	ldw	r17,4(sp)
 4004580:	dc000017 	ldw	r16,0(sp)
 4004584:	dec00304 	addi	sp,sp,12
 4004588:	f800283a 	ret
 400458c:	80c00017 	ldw	r3,0(r16)
 4004590:	183ff926 	beq	r3,zero,4004578 <__alt_heap_limit+0xfc004578>
 4004594:	88c00015 	stw	r3,0(r17)
 4004598:	003ff706 	br	4004578 <__alt_heap_limit+0xfc004578>

0400459c <_fclose_r>:
 400459c:	28003926 	beq	r5,zero,4004684 <_fclose_r+0xe8>
 40045a0:	defffc04 	addi	sp,sp,-16
 40045a4:	dc400115 	stw	r17,4(sp)
 40045a8:	dc000015 	stw	r16,0(sp)
 40045ac:	dfc00315 	stw	ra,12(sp)
 40045b0:	dc800215 	stw	r18,8(sp)
 40045b4:	2023883a 	mov	r17,r4
 40045b8:	2821883a 	mov	r16,r5
 40045bc:	20000226 	beq	r4,zero,40045c8 <_fclose_r+0x2c>
 40045c0:	20800e17 	ldw	r2,56(r4)
 40045c4:	10002726 	beq	r2,zero,4004664 <_fclose_r+0xc8>
 40045c8:	8080030f 	ldh	r2,12(r16)
 40045cc:	1000071e 	bne	r2,zero,40045ec <_fclose_r+0x50>
 40045d0:	0005883a 	mov	r2,zero
 40045d4:	dfc00317 	ldw	ra,12(sp)
 40045d8:	dc800217 	ldw	r18,8(sp)
 40045dc:	dc400117 	ldw	r17,4(sp)
 40045e0:	dc000017 	ldw	r16,0(sp)
 40045e4:	dec00404 	addi	sp,sp,16
 40045e8:	f800283a 	ret
 40045ec:	800b883a 	mov	r5,r16
 40045f0:	8809883a 	mov	r4,r17
 40045f4:	40046a00 	call	40046a0 <__sflush_r>
 40045f8:	1025883a 	mov	r18,r2
 40045fc:	80800b17 	ldw	r2,44(r16)
 4004600:	10000426 	beq	r2,zero,4004614 <_fclose_r+0x78>
 4004604:	81400717 	ldw	r5,28(r16)
 4004608:	8809883a 	mov	r4,r17
 400460c:	103ee83a 	callr	r2
 4004610:	10001616 	blt	r2,zero,400466c <_fclose_r+0xd0>
 4004614:	8080030b 	ldhu	r2,12(r16)
 4004618:	1080200c 	andi	r2,r2,128
 400461c:	1000151e 	bne	r2,zero,4004674 <_fclose_r+0xd8>
 4004620:	81400c17 	ldw	r5,48(r16)
 4004624:	28000526 	beq	r5,zero,400463c <_fclose_r+0xa0>
 4004628:	80801004 	addi	r2,r16,64
 400462c:	28800226 	beq	r5,r2,4004638 <_fclose_r+0x9c>
 4004630:	8809883a 	mov	r4,r17
 4004634:	4002ee40 	call	4002ee4 <_free_r>
 4004638:	80000c15 	stw	zero,48(r16)
 400463c:	81401117 	ldw	r5,68(r16)
 4004640:	28000326 	beq	r5,zero,4004650 <_fclose_r+0xb4>
 4004644:	8809883a 	mov	r4,r17
 4004648:	4002ee40 	call	4002ee4 <_free_r>
 400464c:	80001115 	stw	zero,68(r16)
 4004650:	4002d800 	call	4002d80 <__sfp_lock_acquire>
 4004654:	8000030d 	sth	zero,12(r16)
 4004658:	4002d840 	call	4002d84 <__sfp_lock_release>
 400465c:	9005883a 	mov	r2,r18
 4004660:	003fdc06 	br	40045d4 <__alt_heap_limit+0xfc0045d4>
 4004664:	4002d700 	call	4002d70 <__sinit>
 4004668:	003fd706 	br	40045c8 <__alt_heap_limit+0xfc0045c8>
 400466c:	04bfffc4 	movi	r18,-1
 4004670:	003fe806 	br	4004614 <__alt_heap_limit+0xfc004614>
 4004674:	81400417 	ldw	r5,16(r16)
 4004678:	8809883a 	mov	r4,r17
 400467c:	4002ee40 	call	4002ee4 <_free_r>
 4004680:	003fe706 	br	4004620 <__alt_heap_limit+0xfc004620>
 4004684:	0005883a 	mov	r2,zero
 4004688:	f800283a 	ret

0400468c <fclose>:
 400468c:	00810074 	movhi	r2,1025
 4004690:	10ad4f04 	addi	r2,r2,-19140
 4004694:	200b883a 	mov	r5,r4
 4004698:	11000017 	ldw	r4,0(r2)
 400469c:	400459c1 	jmpi	400459c <_fclose_r>

040046a0 <__sflush_r>:
 40046a0:	2880030b 	ldhu	r2,12(r5)
 40046a4:	defffb04 	addi	sp,sp,-20
 40046a8:	dcc00315 	stw	r19,12(sp)
 40046ac:	dc400115 	stw	r17,4(sp)
 40046b0:	dfc00415 	stw	ra,16(sp)
 40046b4:	dc800215 	stw	r18,8(sp)
 40046b8:	dc000015 	stw	r16,0(sp)
 40046bc:	10c0020c 	andi	r3,r2,8
 40046c0:	2823883a 	mov	r17,r5
 40046c4:	2027883a 	mov	r19,r4
 40046c8:	1800311e 	bne	r3,zero,4004790 <__sflush_r+0xf0>
 40046cc:	28c00117 	ldw	r3,4(r5)
 40046d0:	10820014 	ori	r2,r2,2048
 40046d4:	2880030d 	sth	r2,12(r5)
 40046d8:	00c04b0e 	bge	zero,r3,4004808 <__sflush_r+0x168>
 40046dc:	8a000a17 	ldw	r8,40(r17)
 40046e0:	40002326 	beq	r8,zero,4004770 <__sflush_r+0xd0>
 40046e4:	9c000017 	ldw	r16,0(r19)
 40046e8:	10c4000c 	andi	r3,r2,4096
 40046ec:	98000015 	stw	zero,0(r19)
 40046f0:	18004826 	beq	r3,zero,4004814 <__sflush_r+0x174>
 40046f4:	89801417 	ldw	r6,80(r17)
 40046f8:	10c0010c 	andi	r3,r2,4
 40046fc:	18000626 	beq	r3,zero,4004718 <__sflush_r+0x78>
 4004700:	88c00117 	ldw	r3,4(r17)
 4004704:	88800c17 	ldw	r2,48(r17)
 4004708:	30cdc83a 	sub	r6,r6,r3
 400470c:	10000226 	beq	r2,zero,4004718 <__sflush_r+0x78>
 4004710:	88800f17 	ldw	r2,60(r17)
 4004714:	308dc83a 	sub	r6,r6,r2
 4004718:	89400717 	ldw	r5,28(r17)
 400471c:	000f883a 	mov	r7,zero
 4004720:	9809883a 	mov	r4,r19
 4004724:	403ee83a 	callr	r8
 4004728:	00ffffc4 	movi	r3,-1
 400472c:	10c04426 	beq	r2,r3,4004840 <__sflush_r+0x1a0>
 4004730:	88c0030b 	ldhu	r3,12(r17)
 4004734:	89000417 	ldw	r4,16(r17)
 4004738:	88000115 	stw	zero,4(r17)
 400473c:	197dffcc 	andi	r5,r3,63487
 4004740:	8940030d 	sth	r5,12(r17)
 4004744:	89000015 	stw	r4,0(r17)
 4004748:	18c4000c 	andi	r3,r3,4096
 400474c:	18002c1e 	bne	r3,zero,4004800 <__sflush_r+0x160>
 4004750:	89400c17 	ldw	r5,48(r17)
 4004754:	9c000015 	stw	r16,0(r19)
 4004758:	28000526 	beq	r5,zero,4004770 <__sflush_r+0xd0>
 400475c:	88801004 	addi	r2,r17,64
 4004760:	28800226 	beq	r5,r2,400476c <__sflush_r+0xcc>
 4004764:	9809883a 	mov	r4,r19
 4004768:	4002ee40 	call	4002ee4 <_free_r>
 400476c:	88000c15 	stw	zero,48(r17)
 4004770:	0005883a 	mov	r2,zero
 4004774:	dfc00417 	ldw	ra,16(sp)
 4004778:	dcc00317 	ldw	r19,12(sp)
 400477c:	dc800217 	ldw	r18,8(sp)
 4004780:	dc400117 	ldw	r17,4(sp)
 4004784:	dc000017 	ldw	r16,0(sp)
 4004788:	dec00504 	addi	sp,sp,20
 400478c:	f800283a 	ret
 4004790:	2c800417 	ldw	r18,16(r5)
 4004794:	903ff626 	beq	r18,zero,4004770 <__alt_heap_limit+0xfc004770>
 4004798:	2c000017 	ldw	r16,0(r5)
 400479c:	108000cc 	andi	r2,r2,3
 40047a0:	2c800015 	stw	r18,0(r5)
 40047a4:	84a1c83a 	sub	r16,r16,r18
 40047a8:	1000131e 	bne	r2,zero,40047f8 <__sflush_r+0x158>
 40047ac:	28800517 	ldw	r2,20(r5)
 40047b0:	88800215 	stw	r2,8(r17)
 40047b4:	04000316 	blt	zero,r16,40047c4 <__sflush_r+0x124>
 40047b8:	003fed06 	br	4004770 <__alt_heap_limit+0xfc004770>
 40047bc:	90a5883a 	add	r18,r18,r2
 40047c0:	043feb0e 	bge	zero,r16,4004770 <__alt_heap_limit+0xfc004770>
 40047c4:	88800917 	ldw	r2,36(r17)
 40047c8:	89400717 	ldw	r5,28(r17)
 40047cc:	800f883a 	mov	r7,r16
 40047d0:	900d883a 	mov	r6,r18
 40047d4:	9809883a 	mov	r4,r19
 40047d8:	103ee83a 	callr	r2
 40047dc:	80a1c83a 	sub	r16,r16,r2
 40047e0:	00bff616 	blt	zero,r2,40047bc <__alt_heap_limit+0xfc0047bc>
 40047e4:	88c0030b 	ldhu	r3,12(r17)
 40047e8:	00bfffc4 	movi	r2,-1
 40047ec:	18c01014 	ori	r3,r3,64
 40047f0:	88c0030d 	sth	r3,12(r17)
 40047f4:	003fdf06 	br	4004774 <__alt_heap_limit+0xfc004774>
 40047f8:	0005883a 	mov	r2,zero
 40047fc:	003fec06 	br	40047b0 <__alt_heap_limit+0xfc0047b0>
 4004800:	88801415 	stw	r2,80(r17)
 4004804:	003fd206 	br	4004750 <__alt_heap_limit+0xfc004750>
 4004808:	28c00f17 	ldw	r3,60(r5)
 400480c:	00ffb316 	blt	zero,r3,40046dc <__alt_heap_limit+0xfc0046dc>
 4004810:	003fd706 	br	4004770 <__alt_heap_limit+0xfc004770>
 4004814:	89400717 	ldw	r5,28(r17)
 4004818:	000d883a 	mov	r6,zero
 400481c:	01c00044 	movi	r7,1
 4004820:	9809883a 	mov	r4,r19
 4004824:	403ee83a 	callr	r8
 4004828:	100d883a 	mov	r6,r2
 400482c:	00bfffc4 	movi	r2,-1
 4004830:	30801426 	beq	r6,r2,4004884 <__sflush_r+0x1e4>
 4004834:	8880030b 	ldhu	r2,12(r17)
 4004838:	8a000a17 	ldw	r8,40(r17)
 400483c:	003fae06 	br	40046f8 <__alt_heap_limit+0xfc0046f8>
 4004840:	98c00017 	ldw	r3,0(r19)
 4004844:	183fba26 	beq	r3,zero,4004730 <__alt_heap_limit+0xfc004730>
 4004848:	01000744 	movi	r4,29
 400484c:	19000626 	beq	r3,r4,4004868 <__sflush_r+0x1c8>
 4004850:	01000584 	movi	r4,22
 4004854:	19000426 	beq	r3,r4,4004868 <__sflush_r+0x1c8>
 4004858:	88c0030b 	ldhu	r3,12(r17)
 400485c:	18c01014 	ori	r3,r3,64
 4004860:	88c0030d 	sth	r3,12(r17)
 4004864:	003fc306 	br	4004774 <__alt_heap_limit+0xfc004774>
 4004868:	8880030b 	ldhu	r2,12(r17)
 400486c:	88c00417 	ldw	r3,16(r17)
 4004870:	88000115 	stw	zero,4(r17)
 4004874:	10bdffcc 	andi	r2,r2,63487
 4004878:	8880030d 	sth	r2,12(r17)
 400487c:	88c00015 	stw	r3,0(r17)
 4004880:	003fb306 	br	4004750 <__alt_heap_limit+0xfc004750>
 4004884:	98800017 	ldw	r2,0(r19)
 4004888:	103fea26 	beq	r2,zero,4004834 <__alt_heap_limit+0xfc004834>
 400488c:	00c00744 	movi	r3,29
 4004890:	10c00226 	beq	r2,r3,400489c <__sflush_r+0x1fc>
 4004894:	00c00584 	movi	r3,22
 4004898:	10c0031e 	bne	r2,r3,40048a8 <__sflush_r+0x208>
 400489c:	9c000015 	stw	r16,0(r19)
 40048a0:	0005883a 	mov	r2,zero
 40048a4:	003fb306 	br	4004774 <__alt_heap_limit+0xfc004774>
 40048a8:	88c0030b 	ldhu	r3,12(r17)
 40048ac:	3005883a 	mov	r2,r6
 40048b0:	18c01014 	ori	r3,r3,64
 40048b4:	88c0030d 	sth	r3,12(r17)
 40048b8:	003fae06 	br	4004774 <__alt_heap_limit+0xfc004774>

040048bc <_fflush_r>:
 40048bc:	defffd04 	addi	sp,sp,-12
 40048c0:	dc000115 	stw	r16,4(sp)
 40048c4:	dfc00215 	stw	ra,8(sp)
 40048c8:	2021883a 	mov	r16,r4
 40048cc:	20000226 	beq	r4,zero,40048d8 <_fflush_r+0x1c>
 40048d0:	20800e17 	ldw	r2,56(r4)
 40048d4:	10000c26 	beq	r2,zero,4004908 <_fflush_r+0x4c>
 40048d8:	2880030f 	ldh	r2,12(r5)
 40048dc:	1000051e 	bne	r2,zero,40048f4 <_fflush_r+0x38>
 40048e0:	0005883a 	mov	r2,zero
 40048e4:	dfc00217 	ldw	ra,8(sp)
 40048e8:	dc000117 	ldw	r16,4(sp)
 40048ec:	dec00304 	addi	sp,sp,12
 40048f0:	f800283a 	ret
 40048f4:	8009883a 	mov	r4,r16
 40048f8:	dfc00217 	ldw	ra,8(sp)
 40048fc:	dc000117 	ldw	r16,4(sp)
 4004900:	dec00304 	addi	sp,sp,12
 4004904:	40046a01 	jmpi	40046a0 <__sflush_r>
 4004908:	d9400015 	stw	r5,0(sp)
 400490c:	4002d700 	call	4002d70 <__sinit>
 4004910:	d9400017 	ldw	r5,0(sp)
 4004914:	003ff006 	br	40048d8 <__alt_heap_limit+0xfc0048d8>

04004918 <fflush>:
 4004918:	20000526 	beq	r4,zero,4004930 <fflush+0x18>
 400491c:	00810074 	movhi	r2,1025
 4004920:	10ad4f04 	addi	r2,r2,-19140
 4004924:	200b883a 	mov	r5,r4
 4004928:	11000017 	ldw	r4,0(r2)
 400492c:	40048bc1 	jmpi	40048bc <_fflush_r>
 4004930:	00810074 	movhi	r2,1025
 4004934:	10ad4e04 	addi	r2,r2,-19144
 4004938:	11000017 	ldw	r4,0(r2)
 400493c:	01410034 	movhi	r5,1024
 4004940:	29522f04 	addi	r5,r5,18620
 4004944:	40037801 	jmpi	4003780 <_fwalk_reent>

04004948 <_lseek_r>:
 4004948:	defffd04 	addi	sp,sp,-12
 400494c:	2805883a 	mov	r2,r5
 4004950:	dc000015 	stw	r16,0(sp)
 4004954:	04010074 	movhi	r16,1025
 4004958:	dc400115 	stw	r17,4(sp)
 400495c:	300b883a 	mov	r5,r6
 4004960:	8434fd04 	addi	r16,r16,-11276
 4004964:	2023883a 	mov	r17,r4
 4004968:	380d883a 	mov	r6,r7
 400496c:	1009883a 	mov	r4,r2
 4004970:	dfc00215 	stw	ra,8(sp)
 4004974:	80000015 	stw	zero,0(r16)
 4004978:	40051c40 	call	40051c4 <lseek>
 400497c:	00ffffc4 	movi	r3,-1
 4004980:	10c00526 	beq	r2,r3,4004998 <_lseek_r+0x50>
 4004984:	dfc00217 	ldw	ra,8(sp)
 4004988:	dc400117 	ldw	r17,4(sp)
 400498c:	dc000017 	ldw	r16,0(sp)
 4004990:	dec00304 	addi	sp,sp,12
 4004994:	f800283a 	ret
 4004998:	80c00017 	ldw	r3,0(r16)
 400499c:	183ff926 	beq	r3,zero,4004984 <__alt_heap_limit+0xfc004984>
 40049a0:	88c00015 	stw	r3,0(r17)
 40049a4:	003ff706 	br	4004984 <__alt_heap_limit+0xfc004984>

040049a8 <__smakebuf_r>:
 40049a8:	2880030b 	ldhu	r2,12(r5)
 40049ac:	10c0008c 	andi	r3,r2,2
 40049b0:	1800411e 	bne	r3,zero,4004ab8 <__smakebuf_r+0x110>
 40049b4:	deffec04 	addi	sp,sp,-80
 40049b8:	dc000f15 	stw	r16,60(sp)
 40049bc:	2821883a 	mov	r16,r5
 40049c0:	2940038f 	ldh	r5,14(r5)
 40049c4:	dc401015 	stw	r17,64(sp)
 40049c8:	dfc01315 	stw	ra,76(sp)
 40049cc:	dcc01215 	stw	r19,72(sp)
 40049d0:	dc801115 	stw	r18,68(sp)
 40049d4:	2023883a 	mov	r17,r4
 40049d8:	28001c16 	blt	r5,zero,4004a4c <__smakebuf_r+0xa4>
 40049dc:	d80d883a 	mov	r6,sp
 40049e0:	4004bc40 	call	4004bc4 <_fstat_r>
 40049e4:	10001816 	blt	r2,zero,4004a48 <__smakebuf_r+0xa0>
 40049e8:	d8800117 	ldw	r2,4(sp)
 40049ec:	00e00014 	movui	r3,32768
 40049f0:	10bc000c 	andi	r2,r2,61440
 40049f4:	14c80020 	cmpeqi	r19,r2,8192
 40049f8:	10c03726 	beq	r2,r3,4004ad8 <__smakebuf_r+0x130>
 40049fc:	80c0030b 	ldhu	r3,12(r16)
 4004a00:	18c20014 	ori	r3,r3,2048
 4004a04:	80c0030d 	sth	r3,12(r16)
 4004a08:	00c80004 	movi	r3,8192
 4004a0c:	10c0521e 	bne	r2,r3,4004b58 <__smakebuf_r+0x1b0>
 4004a10:	8140038f 	ldh	r5,14(r16)
 4004a14:	8809883a 	mov	r4,r17
 4004a18:	4004c200 	call	4004c20 <_isatty_r>
 4004a1c:	10004c26 	beq	r2,zero,4004b50 <__smakebuf_r+0x1a8>
 4004a20:	8080030b 	ldhu	r2,12(r16)
 4004a24:	80c010c4 	addi	r3,r16,67
 4004a28:	80c00015 	stw	r3,0(r16)
 4004a2c:	10800054 	ori	r2,r2,1
 4004a30:	8080030d 	sth	r2,12(r16)
 4004a34:	00800044 	movi	r2,1
 4004a38:	80c00415 	stw	r3,16(r16)
 4004a3c:	80800515 	stw	r2,20(r16)
 4004a40:	04810004 	movi	r18,1024
 4004a44:	00000706 	br	4004a64 <__smakebuf_r+0xbc>
 4004a48:	8080030b 	ldhu	r2,12(r16)
 4004a4c:	10c0200c 	andi	r3,r2,128
 4004a50:	18001f1e 	bne	r3,zero,4004ad0 <__smakebuf_r+0x128>
 4004a54:	04810004 	movi	r18,1024
 4004a58:	10820014 	ori	r2,r2,2048
 4004a5c:	8080030d 	sth	r2,12(r16)
 4004a60:	0027883a 	mov	r19,zero
 4004a64:	900b883a 	mov	r5,r18
 4004a68:	8809883a 	mov	r4,r17
 4004a6c:	4001fc80 	call	4001fc8 <_malloc_r>
 4004a70:	10002c26 	beq	r2,zero,4004b24 <__smakebuf_r+0x17c>
 4004a74:	80c0030b 	ldhu	r3,12(r16)
 4004a78:	01010034 	movhi	r4,1024
 4004a7c:	210a8604 	addi	r4,r4,10776
 4004a80:	89000f15 	stw	r4,60(r17)
 4004a84:	18c02014 	ori	r3,r3,128
 4004a88:	80c0030d 	sth	r3,12(r16)
 4004a8c:	80800015 	stw	r2,0(r16)
 4004a90:	80800415 	stw	r2,16(r16)
 4004a94:	84800515 	stw	r18,20(r16)
 4004a98:	98001a1e 	bne	r19,zero,4004b04 <__smakebuf_r+0x15c>
 4004a9c:	dfc01317 	ldw	ra,76(sp)
 4004aa0:	dcc01217 	ldw	r19,72(sp)
 4004aa4:	dc801117 	ldw	r18,68(sp)
 4004aa8:	dc401017 	ldw	r17,64(sp)
 4004aac:	dc000f17 	ldw	r16,60(sp)
 4004ab0:	dec01404 	addi	sp,sp,80
 4004ab4:	f800283a 	ret
 4004ab8:	288010c4 	addi	r2,r5,67
 4004abc:	28800015 	stw	r2,0(r5)
 4004ac0:	28800415 	stw	r2,16(r5)
 4004ac4:	00800044 	movi	r2,1
 4004ac8:	28800515 	stw	r2,20(r5)
 4004acc:	f800283a 	ret
 4004ad0:	04801004 	movi	r18,64
 4004ad4:	003fe006 	br	4004a58 <__alt_heap_limit+0xfc004a58>
 4004ad8:	81000a17 	ldw	r4,40(r16)
 4004adc:	00c10034 	movhi	r3,1024
 4004ae0:	18d0cc04 	addi	r3,r3,17200
 4004ae4:	20ffc51e 	bne	r4,r3,40049fc <__alt_heap_limit+0xfc0049fc>
 4004ae8:	8080030b 	ldhu	r2,12(r16)
 4004aec:	04810004 	movi	r18,1024
 4004af0:	84801315 	stw	r18,76(r16)
 4004af4:	1484b03a 	or	r2,r2,r18
 4004af8:	8080030d 	sth	r2,12(r16)
 4004afc:	0027883a 	mov	r19,zero
 4004b00:	003fd806 	br	4004a64 <__alt_heap_limit+0xfc004a64>
 4004b04:	8140038f 	ldh	r5,14(r16)
 4004b08:	8809883a 	mov	r4,r17
 4004b0c:	4004c200 	call	4004c20 <_isatty_r>
 4004b10:	103fe226 	beq	r2,zero,4004a9c <__alt_heap_limit+0xfc004a9c>
 4004b14:	8080030b 	ldhu	r2,12(r16)
 4004b18:	10800054 	ori	r2,r2,1
 4004b1c:	8080030d 	sth	r2,12(r16)
 4004b20:	003fde06 	br	4004a9c <__alt_heap_limit+0xfc004a9c>
 4004b24:	8080030b 	ldhu	r2,12(r16)
 4004b28:	10c0800c 	andi	r3,r2,512
 4004b2c:	183fdb1e 	bne	r3,zero,4004a9c <__alt_heap_limit+0xfc004a9c>
 4004b30:	10800094 	ori	r2,r2,2
 4004b34:	80c010c4 	addi	r3,r16,67
 4004b38:	8080030d 	sth	r2,12(r16)
 4004b3c:	00800044 	movi	r2,1
 4004b40:	80c00015 	stw	r3,0(r16)
 4004b44:	80c00415 	stw	r3,16(r16)
 4004b48:	80800515 	stw	r2,20(r16)
 4004b4c:	003fd306 	br	4004a9c <__alt_heap_limit+0xfc004a9c>
 4004b50:	04810004 	movi	r18,1024
 4004b54:	003fc306 	br	4004a64 <__alt_heap_limit+0xfc004a64>
 4004b58:	0027883a 	mov	r19,zero
 4004b5c:	04810004 	movi	r18,1024
 4004b60:	003fc006 	br	4004a64 <__alt_heap_limit+0xfc004a64>

04004b64 <_read_r>:
 4004b64:	defffd04 	addi	sp,sp,-12
 4004b68:	2805883a 	mov	r2,r5
 4004b6c:	dc000015 	stw	r16,0(sp)
 4004b70:	04010074 	movhi	r16,1025
 4004b74:	dc400115 	stw	r17,4(sp)
 4004b78:	300b883a 	mov	r5,r6
 4004b7c:	8434fd04 	addi	r16,r16,-11276
 4004b80:	2023883a 	mov	r17,r4
 4004b84:	380d883a 	mov	r6,r7
 4004b88:	1009883a 	mov	r4,r2
 4004b8c:	dfc00215 	stw	ra,8(sp)
 4004b90:	80000015 	stw	zero,0(r16)
 4004b94:	40053a00 	call	40053a0 <read>
 4004b98:	00ffffc4 	movi	r3,-1
 4004b9c:	10c00526 	beq	r2,r3,4004bb4 <_read_r+0x50>
 4004ba0:	dfc00217 	ldw	ra,8(sp)
 4004ba4:	dc400117 	ldw	r17,4(sp)
 4004ba8:	dc000017 	ldw	r16,0(sp)
 4004bac:	dec00304 	addi	sp,sp,12
 4004bb0:	f800283a 	ret
 4004bb4:	80c00017 	ldw	r3,0(r16)
 4004bb8:	183ff926 	beq	r3,zero,4004ba0 <__alt_heap_limit+0xfc004ba0>
 4004bbc:	88c00015 	stw	r3,0(r17)
 4004bc0:	003ff706 	br	4004ba0 <__alt_heap_limit+0xfc004ba0>

04004bc4 <_fstat_r>:
 4004bc4:	defffd04 	addi	sp,sp,-12
 4004bc8:	2805883a 	mov	r2,r5
 4004bcc:	dc000015 	stw	r16,0(sp)
 4004bd0:	04010074 	movhi	r16,1025
 4004bd4:	dc400115 	stw	r17,4(sp)
 4004bd8:	8434fd04 	addi	r16,r16,-11276
 4004bdc:	2023883a 	mov	r17,r4
 4004be0:	300b883a 	mov	r5,r6
 4004be4:	1009883a 	mov	r4,r2
 4004be8:	dfc00215 	stw	ra,8(sp)
 4004bec:	80000015 	stw	zero,0(r16)
 4004bf0:	4004efc0 	call	4004efc <fstat>
 4004bf4:	00ffffc4 	movi	r3,-1
 4004bf8:	10c00526 	beq	r2,r3,4004c10 <_fstat_r+0x4c>
 4004bfc:	dfc00217 	ldw	ra,8(sp)
 4004c00:	dc400117 	ldw	r17,4(sp)
 4004c04:	dc000017 	ldw	r16,0(sp)
 4004c08:	dec00304 	addi	sp,sp,12
 4004c0c:	f800283a 	ret
 4004c10:	80c00017 	ldw	r3,0(r16)
 4004c14:	183ff926 	beq	r3,zero,4004bfc <__alt_heap_limit+0xfc004bfc>
 4004c18:	88c00015 	stw	r3,0(r17)
 4004c1c:	003ff706 	br	4004bfc <__alt_heap_limit+0xfc004bfc>

04004c20 <_isatty_r>:
 4004c20:	defffd04 	addi	sp,sp,-12
 4004c24:	dc000015 	stw	r16,0(sp)
 4004c28:	04010074 	movhi	r16,1025
 4004c2c:	dc400115 	stw	r17,4(sp)
 4004c30:	8434fd04 	addi	r16,r16,-11276
 4004c34:	2023883a 	mov	r17,r4
 4004c38:	2809883a 	mov	r4,r5
 4004c3c:	dfc00215 	stw	ra,8(sp)
 4004c40:	80000015 	stw	zero,0(r16)
 4004c44:	4004ff00 	call	4004ff0 <isatty>
 4004c48:	00ffffc4 	movi	r3,-1
 4004c4c:	10c00526 	beq	r2,r3,4004c64 <_isatty_r+0x44>
 4004c50:	dfc00217 	ldw	ra,8(sp)
 4004c54:	dc400117 	ldw	r17,4(sp)
 4004c58:	dc000017 	ldw	r16,0(sp)
 4004c5c:	dec00304 	addi	sp,sp,12
 4004c60:	f800283a 	ret
 4004c64:	80c00017 	ldw	r3,0(r16)
 4004c68:	183ff926 	beq	r3,zero,4004c50 <__alt_heap_limit+0xfc004c50>
 4004c6c:	88c00015 	stw	r3,0(r17)
 4004c70:	003ff706 	br	4004c50 <__alt_heap_limit+0xfc004c50>

04004c74 <__muldi3>:
 4004c74:	defff604 	addi	sp,sp,-40
 4004c78:	dd800615 	stw	r22,24(sp)
 4004c7c:	dd400515 	stw	r21,20(sp)
 4004c80:	dc400115 	stw	r17,4(sp)
 4004c84:	357fffcc 	andi	r21,r6,65535
 4004c88:	2022d43a 	srli	r17,r4,16
 4004c8c:	25bfffcc 	andi	r22,r4,65535
 4004c90:	dcc00315 	stw	r19,12(sp)
 4004c94:	dc800215 	stw	r18,8(sp)
 4004c98:	2027883a 	mov	r19,r4
 4004c9c:	2825883a 	mov	r18,r5
 4004ca0:	b009883a 	mov	r4,r22
 4004ca4:	a80b883a 	mov	r5,r21
 4004ca8:	dfc00915 	stw	ra,36(sp)
 4004cac:	df000815 	stw	fp,32(sp)
 4004cb0:	ddc00715 	stw	r23,28(sp)
 4004cb4:	3839883a 	mov	fp,r7
 4004cb8:	302ed43a 	srli	r23,r6,16
 4004cbc:	dd000415 	stw	r20,16(sp)
 4004cc0:	dc000015 	stw	r16,0(sp)
 4004cc4:	3029883a 	mov	r20,r6
 4004cc8:	4001f780 	call	4001f78 <__mulsi3>
 4004ccc:	a80b883a 	mov	r5,r21
 4004cd0:	8809883a 	mov	r4,r17
 4004cd4:	1021883a 	mov	r16,r2
 4004cd8:	4001f780 	call	4001f78 <__mulsi3>
 4004cdc:	8809883a 	mov	r4,r17
 4004ce0:	b80b883a 	mov	r5,r23
 4004ce4:	102b883a 	mov	r21,r2
 4004ce8:	4001f780 	call	4001f78 <__mulsi3>
 4004cec:	b80b883a 	mov	r5,r23
 4004cf0:	b009883a 	mov	r4,r22
 4004cf4:	1023883a 	mov	r17,r2
 4004cf8:	4001f780 	call	4001f78 <__mulsi3>
 4004cfc:	8006d43a 	srli	r3,r16,16
 4004d00:	1545883a 	add	r2,r2,r21
 4004d04:	1885883a 	add	r2,r3,r2
 4004d08:	1540022e 	bgeu	r2,r21,4004d14 <__muldi3+0xa0>
 4004d0c:	00c00074 	movhi	r3,1
 4004d10:	88e3883a 	add	r17,r17,r3
 4004d14:	1006d43a 	srli	r3,r2,16
 4004d18:	1004943a 	slli	r2,r2,16
 4004d1c:	e00b883a 	mov	r5,fp
 4004d20:	9809883a 	mov	r4,r19
 4004d24:	843fffcc 	andi	r16,r16,65535
 4004d28:	1c63883a 	add	r17,r3,r17
 4004d2c:	1421883a 	add	r16,r2,r16
 4004d30:	4001f780 	call	4001f78 <__mulsi3>
 4004d34:	900b883a 	mov	r5,r18
 4004d38:	a009883a 	mov	r4,r20
 4004d3c:	1027883a 	mov	r19,r2
 4004d40:	4001f780 	call	4001f78 <__mulsi3>
 4004d44:	9885883a 	add	r2,r19,r2
 4004d48:	1447883a 	add	r3,r2,r17
 4004d4c:	8005883a 	mov	r2,r16
 4004d50:	dfc00917 	ldw	ra,36(sp)
 4004d54:	df000817 	ldw	fp,32(sp)
 4004d58:	ddc00717 	ldw	r23,28(sp)
 4004d5c:	dd800617 	ldw	r22,24(sp)
 4004d60:	dd400517 	ldw	r21,20(sp)
 4004d64:	dd000417 	ldw	r20,16(sp)
 4004d68:	dcc00317 	ldw	r19,12(sp)
 4004d6c:	dc800217 	ldw	r18,8(sp)
 4004d70:	dc400117 	ldw	r17,4(sp)
 4004d74:	dc000017 	ldw	r16,0(sp)
 4004d78:	dec00a04 	addi	sp,sp,40
 4004d7c:	f800283a 	ret

04004d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4004d80:	defffe04 	addi	sp,sp,-8
 4004d84:	dfc00115 	stw	ra,4(sp)
 4004d88:	df000015 	stw	fp,0(sp)
 4004d8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4004d90:	d0a00917 	ldw	r2,-32732(gp)
 4004d94:	10000326 	beq	r2,zero,4004da4 <alt_get_errno+0x24>
 4004d98:	d0a00917 	ldw	r2,-32732(gp)
 4004d9c:	103ee83a 	callr	r2
 4004da0:	00000106 	br	4004da8 <alt_get_errno+0x28>
 4004da4:	d0a7b104 	addi	r2,gp,-24892
}
 4004da8:	e037883a 	mov	sp,fp
 4004dac:	dfc00117 	ldw	ra,4(sp)
 4004db0:	df000017 	ldw	fp,0(sp)
 4004db4:	dec00204 	addi	sp,sp,8
 4004db8:	f800283a 	ret

04004dbc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4004dbc:	defffb04 	addi	sp,sp,-20
 4004dc0:	dfc00415 	stw	ra,16(sp)
 4004dc4:	df000315 	stw	fp,12(sp)
 4004dc8:	df000304 	addi	fp,sp,12
 4004dcc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4004dd0:	e0bfff17 	ldw	r2,-4(fp)
 4004dd4:	10000816 	blt	r2,zero,4004df8 <close+0x3c>
 4004dd8:	01400304 	movi	r5,12
 4004ddc:	e13fff17 	ldw	r4,-4(fp)
 4004de0:	4001f780 	call	4001f78 <__mulsi3>
 4004de4:	1007883a 	mov	r3,r2
 4004de8:	00810074 	movhi	r2,1025
 4004dec:	10a8d404 	addi	r2,r2,-23728
 4004df0:	1885883a 	add	r2,r3,r2
 4004df4:	00000106 	br	4004dfc <close+0x40>
 4004df8:	0005883a 	mov	r2,zero
 4004dfc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4004e00:	e0bffd17 	ldw	r2,-12(fp)
 4004e04:	10001926 	beq	r2,zero,4004e6c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4004e08:	e0bffd17 	ldw	r2,-12(fp)
 4004e0c:	10800017 	ldw	r2,0(r2)
 4004e10:	10800417 	ldw	r2,16(r2)
 4004e14:	10000626 	beq	r2,zero,4004e30 <close+0x74>
 4004e18:	e0bffd17 	ldw	r2,-12(fp)
 4004e1c:	10800017 	ldw	r2,0(r2)
 4004e20:	10800417 	ldw	r2,16(r2)
 4004e24:	e13ffd17 	ldw	r4,-12(fp)
 4004e28:	103ee83a 	callr	r2
 4004e2c:	00000106 	br	4004e34 <close+0x78>
 4004e30:	0005883a 	mov	r2,zero
 4004e34:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4004e38:	e13fff17 	ldw	r4,-4(fp)
 4004e3c:	40054a40 	call	40054a4 <alt_release_fd>
    if (rval < 0)
 4004e40:	e0bffe17 	ldw	r2,-8(fp)
 4004e44:	1000070e 	bge	r2,zero,4004e64 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4004e48:	4004d800 	call	4004d80 <alt_get_errno>
 4004e4c:	1007883a 	mov	r3,r2
 4004e50:	e0bffe17 	ldw	r2,-8(fp)
 4004e54:	0085c83a 	sub	r2,zero,r2
 4004e58:	18800015 	stw	r2,0(r3)
      return -1;
 4004e5c:	00bfffc4 	movi	r2,-1
 4004e60:	00000706 	br	4004e80 <close+0xc4>
    }
    return 0;
 4004e64:	0005883a 	mov	r2,zero
 4004e68:	00000506 	br	4004e80 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4004e6c:	4004d800 	call	4004d80 <alt_get_errno>
 4004e70:	1007883a 	mov	r3,r2
 4004e74:	00801444 	movi	r2,81
 4004e78:	18800015 	stw	r2,0(r3)
    return -1;
 4004e7c:	00bfffc4 	movi	r2,-1
  }
}
 4004e80:	e037883a 	mov	sp,fp
 4004e84:	dfc00117 	ldw	ra,4(sp)
 4004e88:	df000017 	ldw	fp,0(sp)
 4004e8c:	dec00204 	addi	sp,sp,8
 4004e90:	f800283a 	ret

04004e94 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4004e94:	defffc04 	addi	sp,sp,-16
 4004e98:	df000315 	stw	fp,12(sp)
 4004e9c:	df000304 	addi	fp,sp,12
 4004ea0:	e13ffd15 	stw	r4,-12(fp)
 4004ea4:	e17ffe15 	stw	r5,-8(fp)
 4004ea8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4004eac:	e0bfff17 	ldw	r2,-4(fp)
}
 4004eb0:	e037883a 	mov	sp,fp
 4004eb4:	df000017 	ldw	fp,0(sp)
 4004eb8:	dec00104 	addi	sp,sp,4
 4004ebc:	f800283a 	ret

04004ec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4004ec0:	defffe04 	addi	sp,sp,-8
 4004ec4:	dfc00115 	stw	ra,4(sp)
 4004ec8:	df000015 	stw	fp,0(sp)
 4004ecc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4004ed0:	d0a00917 	ldw	r2,-32732(gp)
 4004ed4:	10000326 	beq	r2,zero,4004ee4 <alt_get_errno+0x24>
 4004ed8:	d0a00917 	ldw	r2,-32732(gp)
 4004edc:	103ee83a 	callr	r2
 4004ee0:	00000106 	br	4004ee8 <alt_get_errno+0x28>
 4004ee4:	d0a7b104 	addi	r2,gp,-24892
}
 4004ee8:	e037883a 	mov	sp,fp
 4004eec:	dfc00117 	ldw	ra,4(sp)
 4004ef0:	df000017 	ldw	fp,0(sp)
 4004ef4:	dec00204 	addi	sp,sp,8
 4004ef8:	f800283a 	ret

04004efc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4004efc:	defffb04 	addi	sp,sp,-20
 4004f00:	dfc00415 	stw	ra,16(sp)
 4004f04:	df000315 	stw	fp,12(sp)
 4004f08:	df000304 	addi	fp,sp,12
 4004f0c:	e13ffe15 	stw	r4,-8(fp)
 4004f10:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4004f14:	e0bffe17 	ldw	r2,-8(fp)
 4004f18:	10000816 	blt	r2,zero,4004f3c <fstat+0x40>
 4004f1c:	01400304 	movi	r5,12
 4004f20:	e13ffe17 	ldw	r4,-8(fp)
 4004f24:	4001f780 	call	4001f78 <__mulsi3>
 4004f28:	1007883a 	mov	r3,r2
 4004f2c:	00810074 	movhi	r2,1025
 4004f30:	10a8d404 	addi	r2,r2,-23728
 4004f34:	1885883a 	add	r2,r3,r2
 4004f38:	00000106 	br	4004f40 <fstat+0x44>
 4004f3c:	0005883a 	mov	r2,zero
 4004f40:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4004f44:	e0bffd17 	ldw	r2,-12(fp)
 4004f48:	10001026 	beq	r2,zero,4004f8c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4004f4c:	e0bffd17 	ldw	r2,-12(fp)
 4004f50:	10800017 	ldw	r2,0(r2)
 4004f54:	10800817 	ldw	r2,32(r2)
 4004f58:	10000726 	beq	r2,zero,4004f78 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 4004f5c:	e0bffd17 	ldw	r2,-12(fp)
 4004f60:	10800017 	ldw	r2,0(r2)
 4004f64:	10800817 	ldw	r2,32(r2)
 4004f68:	e17fff17 	ldw	r5,-4(fp)
 4004f6c:	e13ffd17 	ldw	r4,-12(fp)
 4004f70:	103ee83a 	callr	r2
 4004f74:	00000a06 	br	4004fa0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4004f78:	e0bfff17 	ldw	r2,-4(fp)
 4004f7c:	00c80004 	movi	r3,8192
 4004f80:	10c00115 	stw	r3,4(r2)
      return 0;
 4004f84:	0005883a 	mov	r2,zero
 4004f88:	00000506 	br	4004fa0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4004f8c:	4004ec00 	call	4004ec0 <alt_get_errno>
 4004f90:	1007883a 	mov	r3,r2
 4004f94:	00801444 	movi	r2,81
 4004f98:	18800015 	stw	r2,0(r3)
    return -1;
 4004f9c:	00bfffc4 	movi	r2,-1
  }
}
 4004fa0:	e037883a 	mov	sp,fp
 4004fa4:	dfc00117 	ldw	ra,4(sp)
 4004fa8:	df000017 	ldw	fp,0(sp)
 4004fac:	dec00204 	addi	sp,sp,8
 4004fb0:	f800283a 	ret

04004fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4004fb4:	defffe04 	addi	sp,sp,-8
 4004fb8:	dfc00115 	stw	ra,4(sp)
 4004fbc:	df000015 	stw	fp,0(sp)
 4004fc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4004fc4:	d0a00917 	ldw	r2,-32732(gp)
 4004fc8:	10000326 	beq	r2,zero,4004fd8 <alt_get_errno+0x24>
 4004fcc:	d0a00917 	ldw	r2,-32732(gp)
 4004fd0:	103ee83a 	callr	r2
 4004fd4:	00000106 	br	4004fdc <alt_get_errno+0x28>
 4004fd8:	d0a7b104 	addi	r2,gp,-24892
}
 4004fdc:	e037883a 	mov	sp,fp
 4004fe0:	dfc00117 	ldw	ra,4(sp)
 4004fe4:	df000017 	ldw	fp,0(sp)
 4004fe8:	dec00204 	addi	sp,sp,8
 4004fec:	f800283a 	ret

04004ff0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4004ff0:	deffed04 	addi	sp,sp,-76
 4004ff4:	dfc01215 	stw	ra,72(sp)
 4004ff8:	df001115 	stw	fp,68(sp)
 4004ffc:	df001104 	addi	fp,sp,68
 4005000:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4005004:	e0bfff17 	ldw	r2,-4(fp)
 4005008:	10000816 	blt	r2,zero,400502c <isatty+0x3c>
 400500c:	01400304 	movi	r5,12
 4005010:	e13fff17 	ldw	r4,-4(fp)
 4005014:	4001f780 	call	4001f78 <__mulsi3>
 4005018:	1007883a 	mov	r3,r2
 400501c:	00810074 	movhi	r2,1025
 4005020:	10a8d404 	addi	r2,r2,-23728
 4005024:	1885883a 	add	r2,r3,r2
 4005028:	00000106 	br	4005030 <isatty+0x40>
 400502c:	0005883a 	mov	r2,zero
 4005030:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4005034:	e0bfef17 	ldw	r2,-68(fp)
 4005038:	10000e26 	beq	r2,zero,4005074 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400503c:	e0bfef17 	ldw	r2,-68(fp)
 4005040:	10800017 	ldw	r2,0(r2)
 4005044:	10800817 	ldw	r2,32(r2)
 4005048:	1000021e 	bne	r2,zero,4005054 <isatty+0x64>
    {
      return 1;
 400504c:	00800044 	movi	r2,1
 4005050:	00000d06 	br	4005088 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4005054:	e0bff004 	addi	r2,fp,-64
 4005058:	100b883a 	mov	r5,r2
 400505c:	e13fff17 	ldw	r4,-4(fp)
 4005060:	4004efc0 	call	4004efc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4005064:	e0bff117 	ldw	r2,-60(fp)
 4005068:	10880020 	cmpeqi	r2,r2,8192
 400506c:	10803fcc 	andi	r2,r2,255
 4005070:	00000506 	br	4005088 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4005074:	4004fb40 	call	4004fb4 <alt_get_errno>
 4005078:	1007883a 	mov	r3,r2
 400507c:	00801444 	movi	r2,81
 4005080:	18800015 	stw	r2,0(r3)
    return 0;
 4005084:	0005883a 	mov	r2,zero
  }
}
 4005088:	e037883a 	mov	sp,fp
 400508c:	dfc00117 	ldw	ra,4(sp)
 4005090:	df000017 	ldw	fp,0(sp)
 4005094:	dec00204 	addi	sp,sp,8
 4005098:	f800283a 	ret

0400509c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400509c:	defffc04 	addi	sp,sp,-16
 40050a0:	df000315 	stw	fp,12(sp)
 40050a4:	df000304 	addi	fp,sp,12
 40050a8:	e13ffd15 	stw	r4,-12(fp)
 40050ac:	e17ffe15 	stw	r5,-8(fp)
 40050b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40050b4:	e0fffe17 	ldw	r3,-8(fp)
 40050b8:	e0bffd17 	ldw	r2,-12(fp)
 40050bc:	18800c26 	beq	r3,r2,40050f0 <alt_load_section+0x54>
  {
    while( to != end )
 40050c0:	00000806 	br	40050e4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 40050c4:	e0bffe17 	ldw	r2,-8(fp)
 40050c8:	10c00104 	addi	r3,r2,4
 40050cc:	e0fffe15 	stw	r3,-8(fp)
 40050d0:	e0fffd17 	ldw	r3,-12(fp)
 40050d4:	19000104 	addi	r4,r3,4
 40050d8:	e13ffd15 	stw	r4,-12(fp)
 40050dc:	18c00017 	ldw	r3,0(r3)
 40050e0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40050e4:	e0fffe17 	ldw	r3,-8(fp)
 40050e8:	e0bfff17 	ldw	r2,-4(fp)
 40050ec:	18bff51e 	bne	r3,r2,40050c4 <__alt_heap_limit+0xfc0050c4>
    {
      *to++ = *from++;
    }
  }
}
 40050f0:	0001883a 	nop
 40050f4:	e037883a 	mov	sp,fp
 40050f8:	df000017 	ldw	fp,0(sp)
 40050fc:	dec00104 	addi	sp,sp,4
 4005100:	f800283a 	ret

04005104 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4005104:	defffe04 	addi	sp,sp,-8
 4005108:	dfc00115 	stw	ra,4(sp)
 400510c:	df000015 	stw	fp,0(sp)
 4005110:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4005114:	01810074 	movhi	r6,1025
 4005118:	31ad5a04 	addi	r6,r6,-19096
 400511c:	01410074 	movhi	r5,1025
 4005120:	2965bf04 	addi	r5,r5,-26884
 4005124:	01010074 	movhi	r4,1025
 4005128:	212d5a04 	addi	r4,r4,-19096
 400512c:	400509c0 	call	400509c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4005130:	01800034 	movhi	r6,0
 4005134:	31908c04 	addi	r6,r6,16944
 4005138:	01400034 	movhi	r5,0
 400513c:	29500804 	addi	r5,r5,16416
 4005140:	01010034 	movhi	r4,1024
 4005144:	21000004 	addi	r4,r4,0
 4005148:	400509c0 	call	400509c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400514c:	01810074 	movhi	r6,1025
 4005150:	31a5bf04 	addi	r6,r6,-26884
 4005154:	01410034 	movhi	r5,1024
 4005158:	295d6704 	addi	r5,r5,30108
 400515c:	01010034 	movhi	r4,1024
 4005160:	211d6704 	addi	r4,r4,30108
 4005164:	400509c0 	call	400509c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4005168:	40064e40 	call	40064e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400516c:	40066a40 	call	40066a4 <alt_icache_flush_all>
}
 4005170:	0001883a 	nop
 4005174:	e037883a 	mov	sp,fp
 4005178:	dfc00117 	ldw	ra,4(sp)
 400517c:	df000017 	ldw	fp,0(sp)
 4005180:	dec00204 	addi	sp,sp,8
 4005184:	f800283a 	ret

04005188 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4005188:	defffe04 	addi	sp,sp,-8
 400518c:	dfc00115 	stw	ra,4(sp)
 4005190:	df000015 	stw	fp,0(sp)
 4005194:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4005198:	d0a00917 	ldw	r2,-32732(gp)
 400519c:	10000326 	beq	r2,zero,40051ac <alt_get_errno+0x24>
 40051a0:	d0a00917 	ldw	r2,-32732(gp)
 40051a4:	103ee83a 	callr	r2
 40051a8:	00000106 	br	40051b0 <alt_get_errno+0x28>
 40051ac:	d0a7b104 	addi	r2,gp,-24892
}
 40051b0:	e037883a 	mov	sp,fp
 40051b4:	dfc00117 	ldw	ra,4(sp)
 40051b8:	df000017 	ldw	fp,0(sp)
 40051bc:	dec00204 	addi	sp,sp,8
 40051c0:	f800283a 	ret

040051c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 40051c4:	defff904 	addi	sp,sp,-28
 40051c8:	dfc00615 	stw	ra,24(sp)
 40051cc:	df000515 	stw	fp,20(sp)
 40051d0:	df000504 	addi	fp,sp,20
 40051d4:	e13ffd15 	stw	r4,-12(fp)
 40051d8:	e17ffe15 	stw	r5,-8(fp)
 40051dc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 40051e0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40051e4:	e0bffd17 	ldw	r2,-12(fp)
 40051e8:	10000816 	blt	r2,zero,400520c <lseek+0x48>
 40051ec:	01400304 	movi	r5,12
 40051f0:	e13ffd17 	ldw	r4,-12(fp)
 40051f4:	4001f780 	call	4001f78 <__mulsi3>
 40051f8:	1007883a 	mov	r3,r2
 40051fc:	00810074 	movhi	r2,1025
 4005200:	10a8d404 	addi	r2,r2,-23728
 4005204:	1885883a 	add	r2,r3,r2
 4005208:	00000106 	br	4005210 <lseek+0x4c>
 400520c:	0005883a 	mov	r2,zero
 4005210:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4005214:	e0bffc17 	ldw	r2,-16(fp)
 4005218:	10001026 	beq	r2,zero,400525c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400521c:	e0bffc17 	ldw	r2,-16(fp)
 4005220:	10800017 	ldw	r2,0(r2)
 4005224:	10800717 	ldw	r2,28(r2)
 4005228:	10000926 	beq	r2,zero,4005250 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400522c:	e0bffc17 	ldw	r2,-16(fp)
 4005230:	10800017 	ldw	r2,0(r2)
 4005234:	10800717 	ldw	r2,28(r2)
 4005238:	e1bfff17 	ldw	r6,-4(fp)
 400523c:	e17ffe17 	ldw	r5,-8(fp)
 4005240:	e13ffc17 	ldw	r4,-16(fp)
 4005244:	103ee83a 	callr	r2
 4005248:	e0bffb15 	stw	r2,-20(fp)
 400524c:	00000506 	br	4005264 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4005250:	00bfde84 	movi	r2,-134
 4005254:	e0bffb15 	stw	r2,-20(fp)
 4005258:	00000206 	br	4005264 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 400525c:	00bfebc4 	movi	r2,-81
 4005260:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4005264:	e0bffb17 	ldw	r2,-20(fp)
 4005268:	1000070e 	bge	r2,zero,4005288 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 400526c:	40051880 	call	4005188 <alt_get_errno>
 4005270:	1007883a 	mov	r3,r2
 4005274:	e0bffb17 	ldw	r2,-20(fp)
 4005278:	0085c83a 	sub	r2,zero,r2
 400527c:	18800015 	stw	r2,0(r3)
    rc = -1;
 4005280:	00bfffc4 	movi	r2,-1
 4005284:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4005288:	e0bffb17 	ldw	r2,-20(fp)
}
 400528c:	e037883a 	mov	sp,fp
 4005290:	dfc00117 	ldw	ra,4(sp)
 4005294:	df000017 	ldw	fp,0(sp)
 4005298:	dec00204 	addi	sp,sp,8
 400529c:	f800283a 	ret

040052a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40052a0:	defffd04 	addi	sp,sp,-12
 40052a4:	dfc00215 	stw	ra,8(sp)
 40052a8:	df000115 	stw	fp,4(sp)
 40052ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40052b0:	0009883a 	mov	r4,zero
 40052b4:	40057780 	call	4005778 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40052b8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40052bc:	40057b00 	call	40057b0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40052c0:	01810074 	movhi	r6,1025
 40052c4:	31a5b704 	addi	r6,r6,-26916
 40052c8:	01410074 	movhi	r5,1025
 40052cc:	2965b704 	addi	r5,r5,-26916
 40052d0:	01010074 	movhi	r4,1025
 40052d4:	2125b704 	addi	r4,r4,-26916
 40052d8:	4006a480 	call	4006a48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40052dc:	40065e40 	call	40065e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40052e0:	01010034 	movhi	r4,1024
 40052e4:	21199104 	addi	r4,r4,26180
 40052e8:	40072080 	call	4007208 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40052ec:	d0a7b217 	ldw	r2,-24888(gp)
 40052f0:	d0e7b317 	ldw	r3,-24884(gp)
 40052f4:	d127b417 	ldw	r4,-24880(gp)
 40052f8:	200d883a 	mov	r6,r4
 40052fc:	180b883a 	mov	r5,r3
 4005300:	1009883a 	mov	r4,r2
 4005304:	40010080 	call	4001008 <main>
 4005308:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400530c:	01000044 	movi	r4,1
 4005310:	4004dbc0 	call	4004dbc <close>
  exit (result);
 4005314:	e13fff17 	ldw	r4,-4(fp)
 4005318:	400721c0 	call	400721c <exit>

0400531c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400531c:	defffe04 	addi	sp,sp,-8
 4005320:	df000115 	stw	fp,4(sp)
 4005324:	df000104 	addi	fp,sp,4
 4005328:	e13fff15 	stw	r4,-4(fp)
}
 400532c:	0001883a 	nop
 4005330:	e037883a 	mov	sp,fp
 4005334:	df000017 	ldw	fp,0(sp)
 4005338:	dec00104 	addi	sp,sp,4
 400533c:	f800283a 	ret

04005340 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4005340:	defffe04 	addi	sp,sp,-8
 4005344:	df000115 	stw	fp,4(sp)
 4005348:	df000104 	addi	fp,sp,4
 400534c:	e13fff15 	stw	r4,-4(fp)
}
 4005350:	0001883a 	nop
 4005354:	e037883a 	mov	sp,fp
 4005358:	df000017 	ldw	fp,0(sp)
 400535c:	dec00104 	addi	sp,sp,4
 4005360:	f800283a 	ret

04005364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4005364:	defffe04 	addi	sp,sp,-8
 4005368:	dfc00115 	stw	ra,4(sp)
 400536c:	df000015 	stw	fp,0(sp)
 4005370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4005374:	d0a00917 	ldw	r2,-32732(gp)
 4005378:	10000326 	beq	r2,zero,4005388 <alt_get_errno+0x24>
 400537c:	d0a00917 	ldw	r2,-32732(gp)
 4005380:	103ee83a 	callr	r2
 4005384:	00000106 	br	400538c <alt_get_errno+0x28>
 4005388:	d0a7b104 	addi	r2,gp,-24892
}
 400538c:	e037883a 	mov	sp,fp
 4005390:	dfc00117 	ldw	ra,4(sp)
 4005394:	df000017 	ldw	fp,0(sp)
 4005398:	dec00204 	addi	sp,sp,8
 400539c:	f800283a 	ret

040053a0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 40053a0:	defff904 	addi	sp,sp,-28
 40053a4:	dfc00615 	stw	ra,24(sp)
 40053a8:	df000515 	stw	fp,20(sp)
 40053ac:	df000504 	addi	fp,sp,20
 40053b0:	e13ffd15 	stw	r4,-12(fp)
 40053b4:	e17ffe15 	stw	r5,-8(fp)
 40053b8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40053bc:	e0bffd17 	ldw	r2,-12(fp)
 40053c0:	10000816 	blt	r2,zero,40053e4 <read+0x44>
 40053c4:	01400304 	movi	r5,12
 40053c8:	e13ffd17 	ldw	r4,-12(fp)
 40053cc:	4001f780 	call	4001f78 <__mulsi3>
 40053d0:	1007883a 	mov	r3,r2
 40053d4:	00810074 	movhi	r2,1025
 40053d8:	10a8d404 	addi	r2,r2,-23728
 40053dc:	1885883a 	add	r2,r3,r2
 40053e0:	00000106 	br	40053e8 <read+0x48>
 40053e4:	0005883a 	mov	r2,zero
 40053e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40053ec:	e0bffb17 	ldw	r2,-20(fp)
 40053f0:	10002226 	beq	r2,zero,400547c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40053f4:	e0bffb17 	ldw	r2,-20(fp)
 40053f8:	10800217 	ldw	r2,8(r2)
 40053fc:	108000cc 	andi	r2,r2,3
 4005400:	10800060 	cmpeqi	r2,r2,1
 4005404:	1000181e 	bne	r2,zero,4005468 <read+0xc8>
        (fd->dev->read))
 4005408:	e0bffb17 	ldw	r2,-20(fp)
 400540c:	10800017 	ldw	r2,0(r2)
 4005410:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4005414:	10001426 	beq	r2,zero,4005468 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4005418:	e0bffb17 	ldw	r2,-20(fp)
 400541c:	10800017 	ldw	r2,0(r2)
 4005420:	10800517 	ldw	r2,20(r2)
 4005424:	e0ffff17 	ldw	r3,-4(fp)
 4005428:	180d883a 	mov	r6,r3
 400542c:	e17ffe17 	ldw	r5,-8(fp)
 4005430:	e13ffb17 	ldw	r4,-20(fp)
 4005434:	103ee83a 	callr	r2
 4005438:	e0bffc15 	stw	r2,-16(fp)
 400543c:	e0bffc17 	ldw	r2,-16(fp)
 4005440:	1000070e 	bge	r2,zero,4005460 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 4005444:	40053640 	call	4005364 <alt_get_errno>
 4005448:	1007883a 	mov	r3,r2
 400544c:	e0bffc17 	ldw	r2,-16(fp)
 4005450:	0085c83a 	sub	r2,zero,r2
 4005454:	18800015 	stw	r2,0(r3)
          return -1;
 4005458:	00bfffc4 	movi	r2,-1
 400545c:	00000c06 	br	4005490 <read+0xf0>
        }
        return rval;
 4005460:	e0bffc17 	ldw	r2,-16(fp)
 4005464:	00000a06 	br	4005490 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4005468:	40053640 	call	4005364 <alt_get_errno>
 400546c:	1007883a 	mov	r3,r2
 4005470:	00800344 	movi	r2,13
 4005474:	18800015 	stw	r2,0(r3)
 4005478:	00000406 	br	400548c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400547c:	40053640 	call	4005364 <alt_get_errno>
 4005480:	1007883a 	mov	r3,r2
 4005484:	00801444 	movi	r2,81
 4005488:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400548c:	00bfffc4 	movi	r2,-1
}
 4005490:	e037883a 	mov	sp,fp
 4005494:	dfc00117 	ldw	ra,4(sp)
 4005498:	df000017 	ldw	fp,0(sp)
 400549c:	dec00204 	addi	sp,sp,8
 40054a0:	f800283a 	ret

040054a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40054a4:	defffc04 	addi	sp,sp,-16
 40054a8:	dfc00315 	stw	ra,12(sp)
 40054ac:	df000215 	stw	fp,8(sp)
 40054b0:	dc000115 	stw	r16,4(sp)
 40054b4:	df000204 	addi	fp,sp,8
 40054b8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 40054bc:	e0bffe17 	ldw	r2,-8(fp)
 40054c0:	108000d0 	cmplti	r2,r2,3
 40054c4:	1000111e 	bne	r2,zero,400550c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 40054c8:	04010074 	movhi	r16,1025
 40054cc:	8428d404 	addi	r16,r16,-23728
 40054d0:	e0bffe17 	ldw	r2,-8(fp)
 40054d4:	01400304 	movi	r5,12
 40054d8:	1009883a 	mov	r4,r2
 40054dc:	4001f780 	call	4001f78 <__mulsi3>
 40054e0:	8085883a 	add	r2,r16,r2
 40054e4:	10800204 	addi	r2,r2,8
 40054e8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40054ec:	04010074 	movhi	r16,1025
 40054f0:	8428d404 	addi	r16,r16,-23728
 40054f4:	e0bffe17 	ldw	r2,-8(fp)
 40054f8:	01400304 	movi	r5,12
 40054fc:	1009883a 	mov	r4,r2
 4005500:	4001f780 	call	4001f78 <__mulsi3>
 4005504:	8085883a 	add	r2,r16,r2
 4005508:	10000015 	stw	zero,0(r2)
  }
}
 400550c:	0001883a 	nop
 4005510:	e6ffff04 	addi	sp,fp,-4
 4005514:	dfc00217 	ldw	ra,8(sp)
 4005518:	df000117 	ldw	fp,4(sp)
 400551c:	dc000017 	ldw	r16,0(sp)
 4005520:	dec00304 	addi	sp,sp,12
 4005524:	f800283a 	ret

04005528 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4005528:	defff904 	addi	sp,sp,-28
 400552c:	df000615 	stw	fp,24(sp)
 4005530:	df000604 	addi	fp,sp,24
 4005534:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005538:	0005303a 	rdctl	r2,status
 400553c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005540:	e0fffe17 	ldw	r3,-8(fp)
 4005544:	00bfff84 	movi	r2,-2
 4005548:	1884703a 	and	r2,r3,r2
 400554c:	1001703a 	wrctl	status,r2
  
  return context;
 4005550:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4005554:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4005558:	d0a00a17 	ldw	r2,-32728(gp)
 400555c:	10c000c4 	addi	r3,r2,3
 4005560:	00bfff04 	movi	r2,-4
 4005564:	1884703a 	and	r2,r3,r2
 4005568:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400556c:	d0e00a17 	ldw	r3,-32728(gp)
 4005570:	e0bfff17 	ldw	r2,-4(fp)
 4005574:	1887883a 	add	r3,r3,r2
 4005578:	00820034 	movhi	r2,2048
 400557c:	10800004 	addi	r2,r2,0
 4005580:	10c0062e 	bgeu	r2,r3,400559c <sbrk+0x74>
 4005584:	e0bffb17 	ldw	r2,-20(fp)
 4005588:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400558c:	e0bffa17 	ldw	r2,-24(fp)
 4005590:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4005594:	00bfffc4 	movi	r2,-1
 4005598:	00000b06 	br	40055c8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400559c:	d0a00a17 	ldw	r2,-32728(gp)
 40055a0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 40055a4:	d0e00a17 	ldw	r3,-32728(gp)
 40055a8:	e0bfff17 	ldw	r2,-4(fp)
 40055ac:	1885883a 	add	r2,r3,r2
 40055b0:	d0a00a15 	stw	r2,-32728(gp)
 40055b4:	e0bffb17 	ldw	r2,-20(fp)
 40055b8:	e0bffc15 	stw	r2,-16(fp)
 40055bc:	e0bffc17 	ldw	r2,-16(fp)
 40055c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 40055c4:	e0bffd17 	ldw	r2,-12(fp)
} 
 40055c8:	e037883a 	mov	sp,fp
 40055cc:	df000017 	ldw	fp,0(sp)
 40055d0:	dec00104 	addi	sp,sp,4
 40055d4:	f800283a 	ret

040055d8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 40055d8:	defffd04 	addi	sp,sp,-12
 40055dc:	dfc00215 	stw	ra,8(sp)
 40055e0:	df000115 	stw	fp,4(sp)
 40055e4:	df000104 	addi	fp,sp,4
 40055e8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 40055ec:	e13fff17 	ldw	r4,-4(fp)
 40055f0:	400638c0 	call	400638c <alt_busy_sleep>
}
 40055f4:	e037883a 	mov	sp,fp
 40055f8:	dfc00117 	ldw	ra,4(sp)
 40055fc:	df000017 	ldw	fp,0(sp)
 4005600:	dec00204 	addi	sp,sp,8
 4005604:	f800283a 	ret

04005608 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4005608:	defffe04 	addi	sp,sp,-8
 400560c:	dfc00115 	stw	ra,4(sp)
 4005610:	df000015 	stw	fp,0(sp)
 4005614:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4005618:	d0a00917 	ldw	r2,-32732(gp)
 400561c:	10000326 	beq	r2,zero,400562c <alt_get_errno+0x24>
 4005620:	d0a00917 	ldw	r2,-32732(gp)
 4005624:	103ee83a 	callr	r2
 4005628:	00000106 	br	4005630 <alt_get_errno+0x28>
 400562c:	d0a7b104 	addi	r2,gp,-24892
}
 4005630:	e037883a 	mov	sp,fp
 4005634:	dfc00117 	ldw	ra,4(sp)
 4005638:	df000017 	ldw	fp,0(sp)
 400563c:	dec00204 	addi	sp,sp,8
 4005640:	f800283a 	ret

04005644 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4005644:	defff904 	addi	sp,sp,-28
 4005648:	dfc00615 	stw	ra,24(sp)
 400564c:	df000515 	stw	fp,20(sp)
 4005650:	df000504 	addi	fp,sp,20
 4005654:	e13ffd15 	stw	r4,-12(fp)
 4005658:	e17ffe15 	stw	r5,-8(fp)
 400565c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4005660:	e0bffd17 	ldw	r2,-12(fp)
 4005664:	10000816 	blt	r2,zero,4005688 <write+0x44>
 4005668:	01400304 	movi	r5,12
 400566c:	e13ffd17 	ldw	r4,-12(fp)
 4005670:	4001f780 	call	4001f78 <__mulsi3>
 4005674:	1007883a 	mov	r3,r2
 4005678:	00810074 	movhi	r2,1025
 400567c:	10a8d404 	addi	r2,r2,-23728
 4005680:	1885883a 	add	r2,r3,r2
 4005684:	00000106 	br	400568c <write+0x48>
 4005688:	0005883a 	mov	r2,zero
 400568c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4005690:	e0bffb17 	ldw	r2,-20(fp)
 4005694:	10002126 	beq	r2,zero,400571c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4005698:	e0bffb17 	ldw	r2,-20(fp)
 400569c:	10800217 	ldw	r2,8(r2)
 40056a0:	108000cc 	andi	r2,r2,3
 40056a4:	10001826 	beq	r2,zero,4005708 <write+0xc4>
 40056a8:	e0bffb17 	ldw	r2,-20(fp)
 40056ac:	10800017 	ldw	r2,0(r2)
 40056b0:	10800617 	ldw	r2,24(r2)
 40056b4:	10001426 	beq	r2,zero,4005708 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 40056b8:	e0bffb17 	ldw	r2,-20(fp)
 40056bc:	10800017 	ldw	r2,0(r2)
 40056c0:	10800617 	ldw	r2,24(r2)
 40056c4:	e0ffff17 	ldw	r3,-4(fp)
 40056c8:	180d883a 	mov	r6,r3
 40056cc:	e17ffe17 	ldw	r5,-8(fp)
 40056d0:	e13ffb17 	ldw	r4,-20(fp)
 40056d4:	103ee83a 	callr	r2
 40056d8:	e0bffc15 	stw	r2,-16(fp)
 40056dc:	e0bffc17 	ldw	r2,-16(fp)
 40056e0:	1000070e 	bge	r2,zero,4005700 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 40056e4:	40056080 	call	4005608 <alt_get_errno>
 40056e8:	1007883a 	mov	r3,r2
 40056ec:	e0bffc17 	ldw	r2,-16(fp)
 40056f0:	0085c83a 	sub	r2,zero,r2
 40056f4:	18800015 	stw	r2,0(r3)
        return -1;
 40056f8:	00bfffc4 	movi	r2,-1
 40056fc:	00000c06 	br	4005730 <write+0xec>
      }
      return rval;
 4005700:	e0bffc17 	ldw	r2,-16(fp)
 4005704:	00000a06 	br	4005730 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4005708:	40056080 	call	4005608 <alt_get_errno>
 400570c:	1007883a 	mov	r3,r2
 4005710:	00800344 	movi	r2,13
 4005714:	18800015 	stw	r2,0(r3)
 4005718:	00000406 	br	400572c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400571c:	40056080 	call	4005608 <alt_get_errno>
 4005720:	1007883a 	mov	r3,r2
 4005724:	00801444 	movi	r2,81
 4005728:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400572c:	00bfffc4 	movi	r2,-1
}
 4005730:	e037883a 	mov	sp,fp
 4005734:	dfc00117 	ldw	ra,4(sp)
 4005738:	df000017 	ldw	fp,0(sp)
 400573c:	dec00204 	addi	sp,sp,8
 4005740:	f800283a 	ret

04005744 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4005744:	defffd04 	addi	sp,sp,-12
 4005748:	dfc00215 	stw	ra,8(sp)
 400574c:	df000115 	stw	fp,4(sp)
 4005750:	df000104 	addi	fp,sp,4
 4005754:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4005758:	d1600604 	addi	r5,gp,-32744
 400575c:	e13fff17 	ldw	r4,-4(fp)
 4005760:	40065400 	call	4006540 <alt_dev_llist_insert>
}
 4005764:	e037883a 	mov	sp,fp
 4005768:	dfc00117 	ldw	ra,4(sp)
 400576c:	df000017 	ldw	fp,0(sp)
 4005770:	dec00204 	addi	sp,sp,8
 4005774:	f800283a 	ret

04005778 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4005778:	defffd04 	addi	sp,sp,-12
 400577c:	dfc00215 	stw	ra,8(sp)
 4005780:	df000115 	stw	fp,4(sp)
 4005784:	df000104 	addi	fp,sp,4
 4005788:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2E, nios2e);
 400578c:	4006eec0 	call	4006eec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4005790:	00800044 	movi	r2,1
 4005794:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4005798:	0001883a 	nop
 400579c:	e037883a 	mov	sp,fp
 40057a0:	dfc00117 	ldw	ra,4(sp)
 40057a4:	df000017 	ldw	fp,0(sp)
 40057a8:	dec00204 	addi	sp,sp,8
 40057ac:	f800283a 	ret

040057b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40057b0:	defffe04 	addi	sp,sp,-8
 40057b4:	dfc00115 	stw	ra,4(sp)
 40057b8:	df000015 	stw	fp,0(sp)
 40057bc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 40057c0:	000d883a 	mov	r6,zero
 40057c4:	000b883a 	mov	r5,zero
 40057c8:	01010074 	movhi	r4,1025
 40057cc:	21293e04 	addi	r4,r4,-23304
 40057d0:	400595c0 	call	400595c <altera_avalon_jtag_uart_init>
 40057d4:	01010074 	movhi	r4,1025
 40057d8:	21293404 	addi	r4,r4,-23344
 40057dc:	40057440 	call	4005744 <alt_dev_reg>
}
 40057e0:	0001883a 	nop
 40057e4:	e037883a 	mov	sp,fp
 40057e8:	dfc00117 	ldw	ra,4(sp)
 40057ec:	df000017 	ldw	fp,0(sp)
 40057f0:	dec00204 	addi	sp,sp,8
 40057f4:	f800283a 	ret

040057f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40057f8:	defffa04 	addi	sp,sp,-24
 40057fc:	dfc00515 	stw	ra,20(sp)
 4005800:	df000415 	stw	fp,16(sp)
 4005804:	df000404 	addi	fp,sp,16
 4005808:	e13ffd15 	stw	r4,-12(fp)
 400580c:	e17ffe15 	stw	r5,-8(fp)
 4005810:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4005814:	e0bffd17 	ldw	r2,-12(fp)
 4005818:	10800017 	ldw	r2,0(r2)
 400581c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4005820:	e0bffc17 	ldw	r2,-16(fp)
 4005824:	10c00a04 	addi	r3,r2,40
 4005828:	e0bffd17 	ldw	r2,-12(fp)
 400582c:	10800217 	ldw	r2,8(r2)
 4005830:	100f883a 	mov	r7,r2
 4005834:	e1bfff17 	ldw	r6,-4(fp)
 4005838:	e17ffe17 	ldw	r5,-8(fp)
 400583c:	1809883a 	mov	r4,r3
 4005840:	4005e200 	call	4005e20 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4005844:	e037883a 	mov	sp,fp
 4005848:	dfc00117 	ldw	ra,4(sp)
 400584c:	df000017 	ldw	fp,0(sp)
 4005850:	dec00204 	addi	sp,sp,8
 4005854:	f800283a 	ret

04005858 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4005858:	defffa04 	addi	sp,sp,-24
 400585c:	dfc00515 	stw	ra,20(sp)
 4005860:	df000415 	stw	fp,16(sp)
 4005864:	df000404 	addi	fp,sp,16
 4005868:	e13ffd15 	stw	r4,-12(fp)
 400586c:	e17ffe15 	stw	r5,-8(fp)
 4005870:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4005874:	e0bffd17 	ldw	r2,-12(fp)
 4005878:	10800017 	ldw	r2,0(r2)
 400587c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4005880:	e0bffc17 	ldw	r2,-16(fp)
 4005884:	10c00a04 	addi	r3,r2,40
 4005888:	e0bffd17 	ldw	r2,-12(fp)
 400588c:	10800217 	ldw	r2,8(r2)
 4005890:	100f883a 	mov	r7,r2
 4005894:	e1bfff17 	ldw	r6,-4(fp)
 4005898:	e17ffe17 	ldw	r5,-8(fp)
 400589c:	1809883a 	mov	r4,r3
 40058a0:	400603c0 	call	400603c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40058a4:	e037883a 	mov	sp,fp
 40058a8:	dfc00117 	ldw	ra,4(sp)
 40058ac:	df000017 	ldw	fp,0(sp)
 40058b0:	dec00204 	addi	sp,sp,8
 40058b4:	f800283a 	ret

040058b8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 40058b8:	defffc04 	addi	sp,sp,-16
 40058bc:	dfc00315 	stw	ra,12(sp)
 40058c0:	df000215 	stw	fp,8(sp)
 40058c4:	df000204 	addi	fp,sp,8
 40058c8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40058cc:	e0bfff17 	ldw	r2,-4(fp)
 40058d0:	10800017 	ldw	r2,0(r2)
 40058d4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40058d8:	e0bffe17 	ldw	r2,-8(fp)
 40058dc:	10c00a04 	addi	r3,r2,40
 40058e0:	e0bfff17 	ldw	r2,-4(fp)
 40058e4:	10800217 	ldw	r2,8(r2)
 40058e8:	100b883a 	mov	r5,r2
 40058ec:	1809883a 	mov	r4,r3
 40058f0:	4005cc80 	call	4005cc8 <altera_avalon_jtag_uart_close>
}
 40058f4:	e037883a 	mov	sp,fp
 40058f8:	dfc00117 	ldw	ra,4(sp)
 40058fc:	df000017 	ldw	fp,0(sp)
 4005900:	dec00204 	addi	sp,sp,8
 4005904:	f800283a 	ret

04005908 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4005908:	defffa04 	addi	sp,sp,-24
 400590c:	dfc00515 	stw	ra,20(sp)
 4005910:	df000415 	stw	fp,16(sp)
 4005914:	df000404 	addi	fp,sp,16
 4005918:	e13ffd15 	stw	r4,-12(fp)
 400591c:	e17ffe15 	stw	r5,-8(fp)
 4005920:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4005924:	e0bffd17 	ldw	r2,-12(fp)
 4005928:	10800017 	ldw	r2,0(r2)
 400592c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4005930:	e0bffc17 	ldw	r2,-16(fp)
 4005934:	10800a04 	addi	r2,r2,40
 4005938:	e1bfff17 	ldw	r6,-4(fp)
 400593c:	e17ffe17 	ldw	r5,-8(fp)
 4005940:	1009883a 	mov	r4,r2
 4005944:	4005d300 	call	4005d30 <altera_avalon_jtag_uart_ioctl>
}
 4005948:	e037883a 	mov	sp,fp
 400594c:	dfc00117 	ldw	ra,4(sp)
 4005950:	df000017 	ldw	fp,0(sp)
 4005954:	dec00204 	addi	sp,sp,8
 4005958:	f800283a 	ret

0400595c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400595c:	defffa04 	addi	sp,sp,-24
 4005960:	dfc00515 	stw	ra,20(sp)
 4005964:	df000415 	stw	fp,16(sp)
 4005968:	df000404 	addi	fp,sp,16
 400596c:	e13ffd15 	stw	r4,-12(fp)
 4005970:	e17ffe15 	stw	r5,-8(fp)
 4005974:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4005978:	e0bffd17 	ldw	r2,-12(fp)
 400597c:	00c00044 	movi	r3,1
 4005980:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4005984:	e0bffd17 	ldw	r2,-12(fp)
 4005988:	10800017 	ldw	r2,0(r2)
 400598c:	10800104 	addi	r2,r2,4
 4005990:	1007883a 	mov	r3,r2
 4005994:	e0bffd17 	ldw	r2,-12(fp)
 4005998:	10800817 	ldw	r2,32(r2)
 400599c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40059a0:	e0bffe17 	ldw	r2,-8(fp)
 40059a4:	e0ffff17 	ldw	r3,-4(fp)
 40059a8:	d8000015 	stw	zero,0(sp)
 40059ac:	e1fffd17 	ldw	r7,-12(fp)
 40059b0:	01810034 	movhi	r6,1024
 40059b4:	31968704 	addi	r6,r6,23068
 40059b8:	180b883a 	mov	r5,r3
 40059bc:	1009883a 	mov	r4,r2
 40059c0:	40066c40 	call	40066c4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40059c4:	e0bffd17 	ldw	r2,-12(fp)
 40059c8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40059cc:	e0bffd17 	ldw	r2,-12(fp)
 40059d0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40059d4:	d0e7b617 	ldw	r3,-24872(gp)
 40059d8:	e1fffd17 	ldw	r7,-12(fp)
 40059dc:	01810034 	movhi	r6,1024
 40059e0:	31970a04 	addi	r6,r6,23592
 40059e4:	180b883a 	mov	r5,r3
 40059e8:	1009883a 	mov	r4,r2
 40059ec:	40062600 	call	4006260 <alt_alarm_start>
 40059f0:	1000040e 	bge	r2,zero,4005a04 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40059f4:	e0fffd17 	ldw	r3,-12(fp)
 40059f8:	00a00034 	movhi	r2,32768
 40059fc:	10bfffc4 	addi	r2,r2,-1
 4005a00:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4005a04:	0001883a 	nop
 4005a08:	e037883a 	mov	sp,fp
 4005a0c:	dfc00117 	ldw	ra,4(sp)
 4005a10:	df000017 	ldw	fp,0(sp)
 4005a14:	dec00204 	addi	sp,sp,8
 4005a18:	f800283a 	ret

04005a1c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4005a1c:	defff804 	addi	sp,sp,-32
 4005a20:	df000715 	stw	fp,28(sp)
 4005a24:	df000704 	addi	fp,sp,28
 4005a28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4005a2c:	e0bfff17 	ldw	r2,-4(fp)
 4005a30:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4005a34:	e0bffb17 	ldw	r2,-20(fp)
 4005a38:	10800017 	ldw	r2,0(r2)
 4005a3c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4005a40:	e0bffc17 	ldw	r2,-16(fp)
 4005a44:	10800104 	addi	r2,r2,4
 4005a48:	10800037 	ldwio	r2,0(r2)
 4005a4c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4005a50:	e0bffd17 	ldw	r2,-12(fp)
 4005a54:	1080c00c 	andi	r2,r2,768
 4005a58:	10006d26 	beq	r2,zero,4005c10 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4005a5c:	e0bffd17 	ldw	r2,-12(fp)
 4005a60:	1080400c 	andi	r2,r2,256
 4005a64:	10003526 	beq	r2,zero,4005b3c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4005a68:	00800074 	movhi	r2,1
 4005a6c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4005a70:	e0bffb17 	ldw	r2,-20(fp)
 4005a74:	10800a17 	ldw	r2,40(r2)
 4005a78:	10800044 	addi	r2,r2,1
 4005a7c:	1081ffcc 	andi	r2,r2,2047
 4005a80:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4005a84:	e0bffb17 	ldw	r2,-20(fp)
 4005a88:	10c00b17 	ldw	r3,44(r2)
 4005a8c:	e0bffe17 	ldw	r2,-8(fp)
 4005a90:	18801526 	beq	r3,r2,4005ae8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4005a94:	e0bffc17 	ldw	r2,-16(fp)
 4005a98:	10800037 	ldwio	r2,0(r2)
 4005a9c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4005aa0:	e0bff917 	ldw	r2,-28(fp)
 4005aa4:	10a0000c 	andi	r2,r2,32768
 4005aa8:	10001126 	beq	r2,zero,4005af0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4005aac:	e0bffb17 	ldw	r2,-20(fp)
 4005ab0:	10800a17 	ldw	r2,40(r2)
 4005ab4:	e0fff917 	ldw	r3,-28(fp)
 4005ab8:	1809883a 	mov	r4,r3
 4005abc:	e0fffb17 	ldw	r3,-20(fp)
 4005ac0:	1885883a 	add	r2,r3,r2
 4005ac4:	10800e04 	addi	r2,r2,56
 4005ac8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4005acc:	e0bffb17 	ldw	r2,-20(fp)
 4005ad0:	10800a17 	ldw	r2,40(r2)
 4005ad4:	10800044 	addi	r2,r2,1
 4005ad8:	10c1ffcc 	andi	r3,r2,2047
 4005adc:	e0bffb17 	ldw	r2,-20(fp)
 4005ae0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4005ae4:	003fe206 	br	4005a70 <__alt_heap_limit+0xfc005a70>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4005ae8:	0001883a 	nop
 4005aec:	00000106 	br	4005af4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4005af0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4005af4:	e0bff917 	ldw	r2,-28(fp)
 4005af8:	10bfffec 	andhi	r2,r2,65535
 4005afc:	10000f26 	beq	r2,zero,4005b3c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4005b00:	e0bffb17 	ldw	r2,-20(fp)
 4005b04:	10c00817 	ldw	r3,32(r2)
 4005b08:	00bfff84 	movi	r2,-2
 4005b0c:	1886703a 	and	r3,r3,r2
 4005b10:	e0bffb17 	ldw	r2,-20(fp)
 4005b14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4005b18:	e0bffc17 	ldw	r2,-16(fp)
 4005b1c:	10800104 	addi	r2,r2,4
 4005b20:	1007883a 	mov	r3,r2
 4005b24:	e0bffb17 	ldw	r2,-20(fp)
 4005b28:	10800817 	ldw	r2,32(r2)
 4005b2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4005b30:	e0bffc17 	ldw	r2,-16(fp)
 4005b34:	10800104 	addi	r2,r2,4
 4005b38:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4005b3c:	e0bffd17 	ldw	r2,-12(fp)
 4005b40:	1080800c 	andi	r2,r2,512
 4005b44:	103fbe26 	beq	r2,zero,4005a40 <__alt_heap_limit+0xfc005a40>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4005b48:	e0bffd17 	ldw	r2,-12(fp)
 4005b4c:	1004d43a 	srli	r2,r2,16
 4005b50:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4005b54:	00001406 	br	4005ba8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4005b58:	e0bffc17 	ldw	r2,-16(fp)
 4005b5c:	e0fffb17 	ldw	r3,-20(fp)
 4005b60:	18c00d17 	ldw	r3,52(r3)
 4005b64:	e13ffb17 	ldw	r4,-20(fp)
 4005b68:	20c7883a 	add	r3,r4,r3
 4005b6c:	18c20e04 	addi	r3,r3,2104
 4005b70:	18c00003 	ldbu	r3,0(r3)
 4005b74:	18c03fcc 	andi	r3,r3,255
 4005b78:	18c0201c 	xori	r3,r3,128
 4005b7c:	18ffe004 	addi	r3,r3,-128
 4005b80:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4005b84:	e0bffb17 	ldw	r2,-20(fp)
 4005b88:	10800d17 	ldw	r2,52(r2)
 4005b8c:	10800044 	addi	r2,r2,1
 4005b90:	10c1ffcc 	andi	r3,r2,2047
 4005b94:	e0bffb17 	ldw	r2,-20(fp)
 4005b98:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4005b9c:	e0bffa17 	ldw	r2,-24(fp)
 4005ba0:	10bfffc4 	addi	r2,r2,-1
 4005ba4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4005ba8:	e0bffa17 	ldw	r2,-24(fp)
 4005bac:	10000526 	beq	r2,zero,4005bc4 <altera_avalon_jtag_uart_irq+0x1a8>
 4005bb0:	e0bffb17 	ldw	r2,-20(fp)
 4005bb4:	10c00d17 	ldw	r3,52(r2)
 4005bb8:	e0bffb17 	ldw	r2,-20(fp)
 4005bbc:	10800c17 	ldw	r2,48(r2)
 4005bc0:	18bfe51e 	bne	r3,r2,4005b58 <__alt_heap_limit+0xfc005b58>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4005bc4:	e0bffa17 	ldw	r2,-24(fp)
 4005bc8:	103f9d26 	beq	r2,zero,4005a40 <__alt_heap_limit+0xfc005a40>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4005bcc:	e0bffb17 	ldw	r2,-20(fp)
 4005bd0:	10c00817 	ldw	r3,32(r2)
 4005bd4:	00bfff44 	movi	r2,-3
 4005bd8:	1886703a 	and	r3,r3,r2
 4005bdc:	e0bffb17 	ldw	r2,-20(fp)
 4005be0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4005be4:	e0bffb17 	ldw	r2,-20(fp)
 4005be8:	10800017 	ldw	r2,0(r2)
 4005bec:	10800104 	addi	r2,r2,4
 4005bf0:	1007883a 	mov	r3,r2
 4005bf4:	e0bffb17 	ldw	r2,-20(fp)
 4005bf8:	10800817 	ldw	r2,32(r2)
 4005bfc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4005c00:	e0bffc17 	ldw	r2,-16(fp)
 4005c04:	10800104 	addi	r2,r2,4
 4005c08:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4005c0c:	003f8c06 	br	4005a40 <__alt_heap_limit+0xfc005a40>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4005c10:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4005c14:	0001883a 	nop
 4005c18:	e037883a 	mov	sp,fp
 4005c1c:	df000017 	ldw	fp,0(sp)
 4005c20:	dec00104 	addi	sp,sp,4
 4005c24:	f800283a 	ret

04005c28 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4005c28:	defff804 	addi	sp,sp,-32
 4005c2c:	df000715 	stw	fp,28(sp)
 4005c30:	df000704 	addi	fp,sp,28
 4005c34:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4005c38:	e0bffb17 	ldw	r2,-20(fp)
 4005c3c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4005c40:	e0bff917 	ldw	r2,-28(fp)
 4005c44:	10800017 	ldw	r2,0(r2)
 4005c48:	10800104 	addi	r2,r2,4
 4005c4c:	10800037 	ldwio	r2,0(r2)
 4005c50:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4005c54:	e0bffa17 	ldw	r2,-24(fp)
 4005c58:	1081000c 	andi	r2,r2,1024
 4005c5c:	10000b26 	beq	r2,zero,4005c8c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4005c60:	e0bff917 	ldw	r2,-28(fp)
 4005c64:	10800017 	ldw	r2,0(r2)
 4005c68:	10800104 	addi	r2,r2,4
 4005c6c:	1007883a 	mov	r3,r2
 4005c70:	e0bff917 	ldw	r2,-28(fp)
 4005c74:	10800817 	ldw	r2,32(r2)
 4005c78:	10810014 	ori	r2,r2,1024
 4005c7c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4005c80:	e0bff917 	ldw	r2,-28(fp)
 4005c84:	10000915 	stw	zero,36(r2)
 4005c88:	00000a06 	br	4005cb4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4005c8c:	e0bff917 	ldw	r2,-28(fp)
 4005c90:	10c00917 	ldw	r3,36(r2)
 4005c94:	00a00034 	movhi	r2,32768
 4005c98:	10bfff04 	addi	r2,r2,-4
 4005c9c:	10c00536 	bltu	r2,r3,4005cb4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4005ca0:	e0bff917 	ldw	r2,-28(fp)
 4005ca4:	10800917 	ldw	r2,36(r2)
 4005ca8:	10c00044 	addi	r3,r2,1
 4005cac:	e0bff917 	ldw	r2,-28(fp)
 4005cb0:	10c00915 	stw	r3,36(r2)
 4005cb4:	d0a7b617 	ldw	r2,-24872(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4005cb8:	e037883a 	mov	sp,fp
 4005cbc:	df000017 	ldw	fp,0(sp)
 4005cc0:	dec00104 	addi	sp,sp,4
 4005cc4:	f800283a 	ret

04005cc8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4005cc8:	defffd04 	addi	sp,sp,-12
 4005ccc:	df000215 	stw	fp,8(sp)
 4005cd0:	df000204 	addi	fp,sp,8
 4005cd4:	e13ffe15 	stw	r4,-8(fp)
 4005cd8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4005cdc:	00000506 	br	4005cf4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4005ce0:	e0bfff17 	ldw	r2,-4(fp)
 4005ce4:	1090000c 	andi	r2,r2,16384
 4005ce8:	10000226 	beq	r2,zero,4005cf4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4005cec:	00bffd44 	movi	r2,-11
 4005cf0:	00000b06 	br	4005d20 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4005cf4:	e0bffe17 	ldw	r2,-8(fp)
 4005cf8:	10c00d17 	ldw	r3,52(r2)
 4005cfc:	e0bffe17 	ldw	r2,-8(fp)
 4005d00:	10800c17 	ldw	r2,48(r2)
 4005d04:	18800526 	beq	r3,r2,4005d1c <altera_avalon_jtag_uart_close+0x54>
 4005d08:	e0bffe17 	ldw	r2,-8(fp)
 4005d0c:	10c00917 	ldw	r3,36(r2)
 4005d10:	e0bffe17 	ldw	r2,-8(fp)
 4005d14:	10800117 	ldw	r2,4(r2)
 4005d18:	18bff136 	bltu	r3,r2,4005ce0 <__alt_heap_limit+0xfc005ce0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4005d1c:	0005883a 	mov	r2,zero
}
 4005d20:	e037883a 	mov	sp,fp
 4005d24:	df000017 	ldw	fp,0(sp)
 4005d28:	dec00104 	addi	sp,sp,4
 4005d2c:	f800283a 	ret

04005d30 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4005d30:	defffa04 	addi	sp,sp,-24
 4005d34:	df000515 	stw	fp,20(sp)
 4005d38:	df000504 	addi	fp,sp,20
 4005d3c:	e13ffd15 	stw	r4,-12(fp)
 4005d40:	e17ffe15 	stw	r5,-8(fp)
 4005d44:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4005d48:	00bff9c4 	movi	r2,-25
 4005d4c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4005d50:	e0bffe17 	ldw	r2,-8(fp)
 4005d54:	10da8060 	cmpeqi	r3,r2,27137
 4005d58:	1800031e 	bne	r3,zero,4005d68 <altera_avalon_jtag_uart_ioctl+0x38>
 4005d5c:	109a80a0 	cmpeqi	r2,r2,27138
 4005d60:	1000181e 	bne	r2,zero,4005dc4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4005d64:	00002906 	br	4005e0c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4005d68:	e0bffd17 	ldw	r2,-12(fp)
 4005d6c:	10c00117 	ldw	r3,4(r2)
 4005d70:	00a00034 	movhi	r2,32768
 4005d74:	10bfffc4 	addi	r2,r2,-1
 4005d78:	18802126 	beq	r3,r2,4005e00 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4005d7c:	e0bfff17 	ldw	r2,-4(fp)
 4005d80:	10800017 	ldw	r2,0(r2)
 4005d84:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4005d88:	e0bffc17 	ldw	r2,-16(fp)
 4005d8c:	10800090 	cmplti	r2,r2,2
 4005d90:	1000061e 	bne	r2,zero,4005dac <altera_avalon_jtag_uart_ioctl+0x7c>
 4005d94:	e0fffc17 	ldw	r3,-16(fp)
 4005d98:	00a00034 	movhi	r2,32768
 4005d9c:	10bfffc4 	addi	r2,r2,-1
 4005da0:	18800226 	beq	r3,r2,4005dac <altera_avalon_jtag_uart_ioctl+0x7c>
 4005da4:	e0bffc17 	ldw	r2,-16(fp)
 4005da8:	00000206 	br	4005db4 <altera_avalon_jtag_uart_ioctl+0x84>
 4005dac:	00a00034 	movhi	r2,32768
 4005db0:	10bfff84 	addi	r2,r2,-2
 4005db4:	e0fffd17 	ldw	r3,-12(fp)
 4005db8:	18800115 	stw	r2,4(r3)
      rc = 0;
 4005dbc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4005dc0:	00000f06 	br	4005e00 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4005dc4:	e0bffd17 	ldw	r2,-12(fp)
 4005dc8:	10c00117 	ldw	r3,4(r2)
 4005dcc:	00a00034 	movhi	r2,32768
 4005dd0:	10bfffc4 	addi	r2,r2,-1
 4005dd4:	18800c26 	beq	r3,r2,4005e08 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4005dd8:	e0bffd17 	ldw	r2,-12(fp)
 4005ddc:	10c00917 	ldw	r3,36(r2)
 4005de0:	e0bffd17 	ldw	r2,-12(fp)
 4005de4:	10800117 	ldw	r2,4(r2)
 4005de8:	1885803a 	cmpltu	r2,r3,r2
 4005dec:	10c03fcc 	andi	r3,r2,255
 4005df0:	e0bfff17 	ldw	r2,-4(fp)
 4005df4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4005df8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4005dfc:	00000206 	br	4005e08 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4005e00:	0001883a 	nop
 4005e04:	00000106 	br	4005e0c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4005e08:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4005e0c:	e0bffb17 	ldw	r2,-20(fp)
}
 4005e10:	e037883a 	mov	sp,fp
 4005e14:	df000017 	ldw	fp,0(sp)
 4005e18:	dec00104 	addi	sp,sp,4
 4005e1c:	f800283a 	ret

04005e20 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4005e20:	defff304 	addi	sp,sp,-52
 4005e24:	dfc00c15 	stw	ra,48(sp)
 4005e28:	df000b15 	stw	fp,44(sp)
 4005e2c:	df000b04 	addi	fp,sp,44
 4005e30:	e13ffc15 	stw	r4,-16(fp)
 4005e34:	e17ffd15 	stw	r5,-12(fp)
 4005e38:	e1bffe15 	stw	r6,-8(fp)
 4005e3c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4005e40:	e0bffd17 	ldw	r2,-12(fp)
 4005e44:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4005e48:	00004706 	br	4005f68 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4005e4c:	e0bffc17 	ldw	r2,-16(fp)
 4005e50:	10800a17 	ldw	r2,40(r2)
 4005e54:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4005e58:	e0bffc17 	ldw	r2,-16(fp)
 4005e5c:	10800b17 	ldw	r2,44(r2)
 4005e60:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4005e64:	e0fff717 	ldw	r3,-36(fp)
 4005e68:	e0bff817 	ldw	r2,-32(fp)
 4005e6c:	18800536 	bltu	r3,r2,4005e84 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4005e70:	e0fff717 	ldw	r3,-36(fp)
 4005e74:	e0bff817 	ldw	r2,-32(fp)
 4005e78:	1885c83a 	sub	r2,r3,r2
 4005e7c:	e0bff615 	stw	r2,-40(fp)
 4005e80:	00000406 	br	4005e94 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4005e84:	00c20004 	movi	r3,2048
 4005e88:	e0bff817 	ldw	r2,-32(fp)
 4005e8c:	1885c83a 	sub	r2,r3,r2
 4005e90:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4005e94:	e0bff617 	ldw	r2,-40(fp)
 4005e98:	10001e26 	beq	r2,zero,4005f14 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4005e9c:	e0fffe17 	ldw	r3,-8(fp)
 4005ea0:	e0bff617 	ldw	r2,-40(fp)
 4005ea4:	1880022e 	bgeu	r3,r2,4005eb0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4005ea8:	e0bffe17 	ldw	r2,-8(fp)
 4005eac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4005eb0:	e0bffc17 	ldw	r2,-16(fp)
 4005eb4:	10c00e04 	addi	r3,r2,56
 4005eb8:	e0bff817 	ldw	r2,-32(fp)
 4005ebc:	1885883a 	add	r2,r3,r2
 4005ec0:	e1bff617 	ldw	r6,-40(fp)
 4005ec4:	100b883a 	mov	r5,r2
 4005ec8:	e13ff517 	ldw	r4,-44(fp)
 4005ecc:	40039280 	call	4003928 <memcpy>
      ptr   += n;
 4005ed0:	e0fff517 	ldw	r3,-44(fp)
 4005ed4:	e0bff617 	ldw	r2,-40(fp)
 4005ed8:	1885883a 	add	r2,r3,r2
 4005edc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4005ee0:	e0fffe17 	ldw	r3,-8(fp)
 4005ee4:	e0bff617 	ldw	r2,-40(fp)
 4005ee8:	1885c83a 	sub	r2,r3,r2
 4005eec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4005ef0:	e0fff817 	ldw	r3,-32(fp)
 4005ef4:	e0bff617 	ldw	r2,-40(fp)
 4005ef8:	1885883a 	add	r2,r3,r2
 4005efc:	10c1ffcc 	andi	r3,r2,2047
 4005f00:	e0bffc17 	ldw	r2,-16(fp)
 4005f04:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4005f08:	e0bffe17 	ldw	r2,-8(fp)
 4005f0c:	00bfcf16 	blt	zero,r2,4005e4c <__alt_heap_limit+0xfc005e4c>
 4005f10:	00000106 	br	4005f18 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4005f14:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4005f18:	e0fff517 	ldw	r3,-44(fp)
 4005f1c:	e0bffd17 	ldw	r2,-12(fp)
 4005f20:	1880141e 	bne	r3,r2,4005f74 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4005f24:	e0bfff17 	ldw	r2,-4(fp)
 4005f28:	1090000c 	andi	r2,r2,16384
 4005f2c:	1000131e 	bne	r2,zero,4005f7c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4005f30:	0001883a 	nop
 4005f34:	e0bffc17 	ldw	r2,-16(fp)
 4005f38:	10c00a17 	ldw	r3,40(r2)
 4005f3c:	e0bff717 	ldw	r2,-36(fp)
 4005f40:	1880051e 	bne	r3,r2,4005f58 <altera_avalon_jtag_uart_read+0x138>
 4005f44:	e0bffc17 	ldw	r2,-16(fp)
 4005f48:	10c00917 	ldw	r3,36(r2)
 4005f4c:	e0bffc17 	ldw	r2,-16(fp)
 4005f50:	10800117 	ldw	r2,4(r2)
 4005f54:	18bff736 	bltu	r3,r2,4005f34 <__alt_heap_limit+0xfc005f34>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4005f58:	e0bffc17 	ldw	r2,-16(fp)
 4005f5c:	10c00a17 	ldw	r3,40(r2)
 4005f60:	e0bff717 	ldw	r2,-36(fp)
 4005f64:	18800726 	beq	r3,r2,4005f84 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4005f68:	e0bffe17 	ldw	r2,-8(fp)
 4005f6c:	00bfb716 	blt	zero,r2,4005e4c <__alt_heap_limit+0xfc005e4c>
 4005f70:	00000506 	br	4005f88 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4005f74:	0001883a 	nop
 4005f78:	00000306 	br	4005f88 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4005f7c:	0001883a 	nop
 4005f80:	00000106 	br	4005f88 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4005f84:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4005f88:	e0fff517 	ldw	r3,-44(fp)
 4005f8c:	e0bffd17 	ldw	r2,-12(fp)
 4005f90:	18801826 	beq	r3,r2,4005ff4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005f94:	0005303a 	rdctl	r2,status
 4005f98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005f9c:	e0fffb17 	ldw	r3,-20(fp)
 4005fa0:	00bfff84 	movi	r2,-2
 4005fa4:	1884703a 	and	r2,r3,r2
 4005fa8:	1001703a 	wrctl	status,r2
  
  return context;
 4005fac:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4005fb0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4005fb4:	e0bffc17 	ldw	r2,-16(fp)
 4005fb8:	10800817 	ldw	r2,32(r2)
 4005fbc:	10c00054 	ori	r3,r2,1
 4005fc0:	e0bffc17 	ldw	r2,-16(fp)
 4005fc4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4005fc8:	e0bffc17 	ldw	r2,-16(fp)
 4005fcc:	10800017 	ldw	r2,0(r2)
 4005fd0:	10800104 	addi	r2,r2,4
 4005fd4:	1007883a 	mov	r3,r2
 4005fd8:	e0bffc17 	ldw	r2,-16(fp)
 4005fdc:	10800817 	ldw	r2,32(r2)
 4005fe0:	18800035 	stwio	r2,0(r3)
 4005fe4:	e0bffa17 	ldw	r2,-24(fp)
 4005fe8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005fec:	e0bff917 	ldw	r2,-28(fp)
 4005ff0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4005ff4:	e0fff517 	ldw	r3,-44(fp)
 4005ff8:	e0bffd17 	ldw	r2,-12(fp)
 4005ffc:	18800426 	beq	r3,r2,4006010 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4006000:	e0fff517 	ldw	r3,-44(fp)
 4006004:	e0bffd17 	ldw	r2,-12(fp)
 4006008:	1885c83a 	sub	r2,r3,r2
 400600c:	00000606 	br	4006028 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4006010:	e0bfff17 	ldw	r2,-4(fp)
 4006014:	1090000c 	andi	r2,r2,16384
 4006018:	10000226 	beq	r2,zero,4006024 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 400601c:	00bffd44 	movi	r2,-11
 4006020:	00000106 	br	4006028 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4006024:	00bffec4 	movi	r2,-5
}
 4006028:	e037883a 	mov	sp,fp
 400602c:	dfc00117 	ldw	ra,4(sp)
 4006030:	df000017 	ldw	fp,0(sp)
 4006034:	dec00204 	addi	sp,sp,8
 4006038:	f800283a 	ret

0400603c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400603c:	defff304 	addi	sp,sp,-52
 4006040:	dfc00c15 	stw	ra,48(sp)
 4006044:	df000b15 	stw	fp,44(sp)
 4006048:	df000b04 	addi	fp,sp,44
 400604c:	e13ffc15 	stw	r4,-16(fp)
 4006050:	e17ffd15 	stw	r5,-12(fp)
 4006054:	e1bffe15 	stw	r6,-8(fp)
 4006058:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400605c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4006060:	e0bffd17 	ldw	r2,-12(fp)
 4006064:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4006068:	00003706 	br	4006148 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400606c:	e0bffc17 	ldw	r2,-16(fp)
 4006070:	10800c17 	ldw	r2,48(r2)
 4006074:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4006078:	e0bffc17 	ldw	r2,-16(fp)
 400607c:	10800d17 	ldw	r2,52(r2)
 4006080:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4006084:	e0fff917 	ldw	r3,-28(fp)
 4006088:	e0bff517 	ldw	r2,-44(fp)
 400608c:	1880062e 	bgeu	r3,r2,40060a8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4006090:	e0fff517 	ldw	r3,-44(fp)
 4006094:	e0bff917 	ldw	r2,-28(fp)
 4006098:	1885c83a 	sub	r2,r3,r2
 400609c:	10bfffc4 	addi	r2,r2,-1
 40060a0:	e0bff615 	stw	r2,-40(fp)
 40060a4:	00000b06 	br	40060d4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 40060a8:	e0bff517 	ldw	r2,-44(fp)
 40060ac:	10000526 	beq	r2,zero,40060c4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40060b0:	00c20004 	movi	r3,2048
 40060b4:	e0bff917 	ldw	r2,-28(fp)
 40060b8:	1885c83a 	sub	r2,r3,r2
 40060bc:	e0bff615 	stw	r2,-40(fp)
 40060c0:	00000406 	br	40060d4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 40060c4:	00c1ffc4 	movi	r3,2047
 40060c8:	e0bff917 	ldw	r2,-28(fp)
 40060cc:	1885c83a 	sub	r2,r3,r2
 40060d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40060d4:	e0bff617 	ldw	r2,-40(fp)
 40060d8:	10001e26 	beq	r2,zero,4006154 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 40060dc:	e0fffe17 	ldw	r3,-8(fp)
 40060e0:	e0bff617 	ldw	r2,-40(fp)
 40060e4:	1880022e 	bgeu	r3,r2,40060f0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 40060e8:	e0bffe17 	ldw	r2,-8(fp)
 40060ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40060f0:	e0bffc17 	ldw	r2,-16(fp)
 40060f4:	10c20e04 	addi	r3,r2,2104
 40060f8:	e0bff917 	ldw	r2,-28(fp)
 40060fc:	1885883a 	add	r2,r3,r2
 4006100:	e1bff617 	ldw	r6,-40(fp)
 4006104:	e17ffd17 	ldw	r5,-12(fp)
 4006108:	1009883a 	mov	r4,r2
 400610c:	40039280 	call	4003928 <memcpy>
      ptr   += n;
 4006110:	e0fffd17 	ldw	r3,-12(fp)
 4006114:	e0bff617 	ldw	r2,-40(fp)
 4006118:	1885883a 	add	r2,r3,r2
 400611c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4006120:	e0fffe17 	ldw	r3,-8(fp)
 4006124:	e0bff617 	ldw	r2,-40(fp)
 4006128:	1885c83a 	sub	r2,r3,r2
 400612c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4006130:	e0fff917 	ldw	r3,-28(fp)
 4006134:	e0bff617 	ldw	r2,-40(fp)
 4006138:	1885883a 	add	r2,r3,r2
 400613c:	10c1ffcc 	andi	r3,r2,2047
 4006140:	e0bffc17 	ldw	r2,-16(fp)
 4006144:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4006148:	e0bffe17 	ldw	r2,-8(fp)
 400614c:	00bfc716 	blt	zero,r2,400606c <__alt_heap_limit+0xfc00606c>
 4006150:	00000106 	br	4006158 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4006154:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006158:	0005303a 	rdctl	r2,status
 400615c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006160:	e0fffb17 	ldw	r3,-20(fp)
 4006164:	00bfff84 	movi	r2,-2
 4006168:	1884703a 	and	r2,r3,r2
 400616c:	1001703a 	wrctl	status,r2
  
  return context;
 4006170:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4006174:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4006178:	e0bffc17 	ldw	r2,-16(fp)
 400617c:	10800817 	ldw	r2,32(r2)
 4006180:	10c00094 	ori	r3,r2,2
 4006184:	e0bffc17 	ldw	r2,-16(fp)
 4006188:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400618c:	e0bffc17 	ldw	r2,-16(fp)
 4006190:	10800017 	ldw	r2,0(r2)
 4006194:	10800104 	addi	r2,r2,4
 4006198:	1007883a 	mov	r3,r2
 400619c:	e0bffc17 	ldw	r2,-16(fp)
 40061a0:	10800817 	ldw	r2,32(r2)
 40061a4:	18800035 	stwio	r2,0(r3)
 40061a8:	e0bffa17 	ldw	r2,-24(fp)
 40061ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40061b0:	e0bff817 	ldw	r2,-32(fp)
 40061b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40061b8:	e0bffe17 	ldw	r2,-8(fp)
 40061bc:	0080100e 	bge	zero,r2,4006200 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 40061c0:	e0bfff17 	ldw	r2,-4(fp)
 40061c4:	1090000c 	andi	r2,r2,16384
 40061c8:	1000101e 	bne	r2,zero,400620c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40061cc:	0001883a 	nop
 40061d0:	e0bffc17 	ldw	r2,-16(fp)
 40061d4:	10c00d17 	ldw	r3,52(r2)
 40061d8:	e0bff517 	ldw	r2,-44(fp)
 40061dc:	1880051e 	bne	r3,r2,40061f4 <altera_avalon_jtag_uart_write+0x1b8>
 40061e0:	e0bffc17 	ldw	r2,-16(fp)
 40061e4:	10c00917 	ldw	r3,36(r2)
 40061e8:	e0bffc17 	ldw	r2,-16(fp)
 40061ec:	10800117 	ldw	r2,4(r2)
 40061f0:	18bff736 	bltu	r3,r2,40061d0 <__alt_heap_limit+0xfc0061d0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 40061f4:	e0bffc17 	ldw	r2,-16(fp)
 40061f8:	10800917 	ldw	r2,36(r2)
 40061fc:	1000051e 	bne	r2,zero,4006214 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4006200:	e0bffe17 	ldw	r2,-8(fp)
 4006204:	00bfd016 	blt	zero,r2,4006148 <__alt_heap_limit+0xfc006148>
 4006208:	00000306 	br	4006218 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400620c:	0001883a 	nop
 4006210:	00000106 	br	4006218 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4006214:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4006218:	e0fffd17 	ldw	r3,-12(fp)
 400621c:	e0bff717 	ldw	r2,-36(fp)
 4006220:	18800426 	beq	r3,r2,4006234 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4006224:	e0fffd17 	ldw	r3,-12(fp)
 4006228:	e0bff717 	ldw	r2,-36(fp)
 400622c:	1885c83a 	sub	r2,r3,r2
 4006230:	00000606 	br	400624c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4006234:	e0bfff17 	ldw	r2,-4(fp)
 4006238:	1090000c 	andi	r2,r2,16384
 400623c:	10000226 	beq	r2,zero,4006248 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4006240:	00bffd44 	movi	r2,-11
 4006244:	00000106 	br	400624c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4006248:	00bffec4 	movi	r2,-5
}
 400624c:	e037883a 	mov	sp,fp
 4006250:	dfc00117 	ldw	ra,4(sp)
 4006254:	df000017 	ldw	fp,0(sp)
 4006258:	dec00204 	addi	sp,sp,8
 400625c:	f800283a 	ret

04006260 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4006260:	defff504 	addi	sp,sp,-44
 4006264:	df000a15 	stw	fp,40(sp)
 4006268:	df000a04 	addi	fp,sp,40
 400626c:	e13ffc15 	stw	r4,-16(fp)
 4006270:	e17ffd15 	stw	r5,-12(fp)
 4006274:	e1bffe15 	stw	r6,-8(fp)
 4006278:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400627c:	e03ff615 	stw	zero,-40(fp)
 4006280:	d0a7b617 	ldw	r2,-24872(gp)
  
  if (alt_ticks_per_second ())
 4006284:	10003c26 	beq	r2,zero,4006378 <alt_alarm_start+0x118>
  {
    if (alarm)
 4006288:	e0bffc17 	ldw	r2,-16(fp)
 400628c:	10003826 	beq	r2,zero,4006370 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4006290:	e0bffc17 	ldw	r2,-16(fp)
 4006294:	e0fffe17 	ldw	r3,-8(fp)
 4006298:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400629c:	e0bffc17 	ldw	r2,-16(fp)
 40062a0:	e0ffff17 	ldw	r3,-4(fp)
 40062a4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40062a8:	0005303a 	rdctl	r2,status
 40062ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40062b0:	e0fff917 	ldw	r3,-28(fp)
 40062b4:	00bfff84 	movi	r2,-2
 40062b8:	1884703a 	and	r2,r3,r2
 40062bc:	1001703a 	wrctl	status,r2
  
  return context;
 40062c0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 40062c4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40062c8:	d0a7b717 	ldw	r2,-24868(gp)
      
      current_nticks = alt_nticks();
 40062cc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 40062d0:	e0fffd17 	ldw	r3,-12(fp)
 40062d4:	e0bff617 	ldw	r2,-40(fp)
 40062d8:	1885883a 	add	r2,r3,r2
 40062dc:	10c00044 	addi	r3,r2,1
 40062e0:	e0bffc17 	ldw	r2,-16(fp)
 40062e4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 40062e8:	e0bffc17 	ldw	r2,-16(fp)
 40062ec:	10c00217 	ldw	r3,8(r2)
 40062f0:	e0bff617 	ldw	r2,-40(fp)
 40062f4:	1880042e 	bgeu	r3,r2,4006308 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 40062f8:	e0bffc17 	ldw	r2,-16(fp)
 40062fc:	00c00044 	movi	r3,1
 4006300:	10c00405 	stb	r3,16(r2)
 4006304:	00000206 	br	4006310 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4006308:	e0bffc17 	ldw	r2,-16(fp)
 400630c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4006310:	e0bffc17 	ldw	r2,-16(fp)
 4006314:	d0e00c04 	addi	r3,gp,-32720
 4006318:	e0fffa15 	stw	r3,-24(fp)
 400631c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4006320:	e0bffb17 	ldw	r2,-20(fp)
 4006324:	e0fffa17 	ldw	r3,-24(fp)
 4006328:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400632c:	e0bffa17 	ldw	r2,-24(fp)
 4006330:	10c00017 	ldw	r3,0(r2)
 4006334:	e0bffb17 	ldw	r2,-20(fp)
 4006338:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400633c:	e0bffa17 	ldw	r2,-24(fp)
 4006340:	10800017 	ldw	r2,0(r2)
 4006344:	e0fffb17 	ldw	r3,-20(fp)
 4006348:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400634c:	e0bffa17 	ldw	r2,-24(fp)
 4006350:	e0fffb17 	ldw	r3,-20(fp)
 4006354:	10c00015 	stw	r3,0(r2)
 4006358:	e0bff817 	ldw	r2,-32(fp)
 400635c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006360:	e0bff717 	ldw	r2,-36(fp)
 4006364:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4006368:	0005883a 	mov	r2,zero
 400636c:	00000306 	br	400637c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4006370:	00bffa84 	movi	r2,-22
 4006374:	00000106 	br	400637c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4006378:	00bfde84 	movi	r2,-134
  }
}
 400637c:	e037883a 	mov	sp,fp
 4006380:	df000017 	ldw	fp,0(sp)
 4006384:	dec00104 	addi	sp,sp,4
 4006388:	f800283a 	ret

0400638c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400638c:	defffa04 	addi	sp,sp,-24
 4006390:	dfc00515 	stw	ra,20(sp)
 4006394:	df000415 	stw	fp,16(sp)
 4006398:	df000404 	addi	fp,sp,16
 400639c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 40063a0:	00800244 	movi	r2,9
 40063a4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 40063a8:	014003f4 	movhi	r5,15
 40063ac:	29509004 	addi	r5,r5,16960
 40063b0:	e13ffd17 	ldw	r4,-12(fp)
 40063b4:	4001f780 	call	4001f78 <__mulsi3>
 40063b8:	100b883a 	mov	r5,r2
 40063bc:	01017db4 	movhi	r4,1526
 40063c0:	21384004 	addi	r4,r4,-7936
 40063c4:	4001ebc0 	call	4001ebc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 40063c8:	100b883a 	mov	r5,r2
 40063cc:	01200034 	movhi	r4,32768
 40063d0:	213fffc4 	addi	r4,r4,-1
 40063d4:	4001ebc0 	call	4001ebc <__udivsi3>
 40063d8:	100b883a 	mov	r5,r2
 40063dc:	e13fff17 	ldw	r4,-4(fp)
 40063e0:	4001ebc0 	call	4001ebc <__udivsi3>
 40063e4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 40063e8:	e0bffe17 	ldw	r2,-8(fp)
 40063ec:	10002a26 	beq	r2,zero,4006498 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 40063f0:	e03ffc15 	stw	zero,-16(fp)
 40063f4:	00001706 	br	4006454 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40063f8:	00a00034 	movhi	r2,32768
 40063fc:	10bfffc4 	addi	r2,r2,-1
 4006400:	10bfffc4 	addi	r2,r2,-1
 4006404:	103ffe1e 	bne	r2,zero,4006400 <__alt_heap_limit+0xfc006400>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4006408:	014003f4 	movhi	r5,15
 400640c:	29509004 	addi	r5,r5,16960
 4006410:	e13ffd17 	ldw	r4,-12(fp)
 4006414:	4001f780 	call	4001f78 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4006418:	100b883a 	mov	r5,r2
 400641c:	01017db4 	movhi	r4,1526
 4006420:	21384004 	addi	r4,r4,-7936
 4006424:	4001ebc0 	call	4001ebc <__udivsi3>
 4006428:	100b883a 	mov	r5,r2
 400642c:	01200034 	movhi	r4,32768
 4006430:	213fffc4 	addi	r4,r4,-1
 4006434:	4001ebc0 	call	4001ebc <__udivsi3>
 4006438:	1007883a 	mov	r3,r2
 400643c:	e0bfff17 	ldw	r2,-4(fp)
 4006440:	10c5c83a 	sub	r2,r2,r3
 4006444:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4006448:	e0bffc17 	ldw	r2,-16(fp)
 400644c:	10800044 	addi	r2,r2,1
 4006450:	e0bffc15 	stw	r2,-16(fp)
 4006454:	e0fffc17 	ldw	r3,-16(fp)
 4006458:	e0bffe17 	ldw	r2,-8(fp)
 400645c:	18bfe616 	blt	r3,r2,40063f8 <__alt_heap_limit+0xfc0063f8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4006460:	014003f4 	movhi	r5,15
 4006464:	29509004 	addi	r5,r5,16960
 4006468:	e13ffd17 	ldw	r4,-12(fp)
 400646c:	4001f780 	call	4001f78 <__mulsi3>
 4006470:	100b883a 	mov	r5,r2
 4006474:	01017db4 	movhi	r4,1526
 4006478:	21384004 	addi	r4,r4,-7936
 400647c:	4001ebc0 	call	4001ebc <__udivsi3>
 4006480:	e17fff17 	ldw	r5,-4(fp)
 4006484:	1009883a 	mov	r4,r2
 4006488:	4001f780 	call	4001f78 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400648c:	10bfffc4 	addi	r2,r2,-1
 4006490:	103ffe1e 	bne	r2,zero,400648c <__alt_heap_limit+0xfc00648c>
 4006494:	00000d06 	br	40064cc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4006498:	014003f4 	movhi	r5,15
 400649c:	29509004 	addi	r5,r5,16960
 40064a0:	e13ffd17 	ldw	r4,-12(fp)
 40064a4:	4001f780 	call	4001f78 <__mulsi3>
 40064a8:	100b883a 	mov	r5,r2
 40064ac:	01017db4 	movhi	r4,1526
 40064b0:	21384004 	addi	r4,r4,-7936
 40064b4:	4001ebc0 	call	4001ebc <__udivsi3>
 40064b8:	e17fff17 	ldw	r5,-4(fp)
 40064bc:	1009883a 	mov	r4,r2
 40064c0:	4001f780 	call	4001f78 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40064c4:	10bfffc4 	addi	r2,r2,-1
 40064c8:	00bffe16 	blt	zero,r2,40064c4 <__alt_heap_limit+0xfc0064c4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 40064cc:	0005883a 	mov	r2,zero
}
 40064d0:	e037883a 	mov	sp,fp
 40064d4:	dfc00117 	ldw	ra,4(sp)
 40064d8:	df000017 	ldw	fp,0(sp)
 40064dc:	dec00204 	addi	sp,sp,8
 40064e0:	f800283a 	ret

040064e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40064e4:	deffff04 	addi	sp,sp,-4
 40064e8:	df000015 	stw	fp,0(sp)
 40064ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40064f0:	0001883a 	nop
 40064f4:	e037883a 	mov	sp,fp
 40064f8:	df000017 	ldw	fp,0(sp)
 40064fc:	dec00104 	addi	sp,sp,4
 4006500:	f800283a 	ret

04006504 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4006504:	defffe04 	addi	sp,sp,-8
 4006508:	dfc00115 	stw	ra,4(sp)
 400650c:	df000015 	stw	fp,0(sp)
 4006510:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4006514:	d0a00917 	ldw	r2,-32732(gp)
 4006518:	10000326 	beq	r2,zero,4006528 <alt_get_errno+0x24>
 400651c:	d0a00917 	ldw	r2,-32732(gp)
 4006520:	103ee83a 	callr	r2
 4006524:	00000106 	br	400652c <alt_get_errno+0x28>
 4006528:	d0a7b104 	addi	r2,gp,-24892
}
 400652c:	e037883a 	mov	sp,fp
 4006530:	dfc00117 	ldw	ra,4(sp)
 4006534:	df000017 	ldw	fp,0(sp)
 4006538:	dec00204 	addi	sp,sp,8
 400653c:	f800283a 	ret

04006540 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4006540:	defffa04 	addi	sp,sp,-24
 4006544:	dfc00515 	stw	ra,20(sp)
 4006548:	df000415 	stw	fp,16(sp)
 400654c:	df000404 	addi	fp,sp,16
 4006550:	e13ffe15 	stw	r4,-8(fp)
 4006554:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4006558:	e0bffe17 	ldw	r2,-8(fp)
 400655c:	10000326 	beq	r2,zero,400656c <alt_dev_llist_insert+0x2c>
 4006560:	e0bffe17 	ldw	r2,-8(fp)
 4006564:	10800217 	ldw	r2,8(r2)
 4006568:	1000061e 	bne	r2,zero,4006584 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400656c:	40065040 	call	4006504 <alt_get_errno>
 4006570:	1007883a 	mov	r3,r2
 4006574:	00800584 	movi	r2,22
 4006578:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400657c:	00bffa84 	movi	r2,-22
 4006580:	00001306 	br	40065d0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4006584:	e0bffe17 	ldw	r2,-8(fp)
 4006588:	e0ffff17 	ldw	r3,-4(fp)
 400658c:	e0fffc15 	stw	r3,-16(fp)
 4006590:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4006594:	e0bffd17 	ldw	r2,-12(fp)
 4006598:	e0fffc17 	ldw	r3,-16(fp)
 400659c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40065a0:	e0bffc17 	ldw	r2,-16(fp)
 40065a4:	10c00017 	ldw	r3,0(r2)
 40065a8:	e0bffd17 	ldw	r2,-12(fp)
 40065ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40065b0:	e0bffc17 	ldw	r2,-16(fp)
 40065b4:	10800017 	ldw	r2,0(r2)
 40065b8:	e0fffd17 	ldw	r3,-12(fp)
 40065bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40065c0:	e0bffc17 	ldw	r2,-16(fp)
 40065c4:	e0fffd17 	ldw	r3,-12(fp)
 40065c8:	10c00015 	stw	r3,0(r2)

  return 0;  
 40065cc:	0005883a 	mov	r2,zero
}
 40065d0:	e037883a 	mov	sp,fp
 40065d4:	dfc00117 	ldw	ra,4(sp)
 40065d8:	df000017 	ldw	fp,0(sp)
 40065dc:	dec00204 	addi	sp,sp,8
 40065e0:	f800283a 	ret

040065e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 40065e4:	defffd04 	addi	sp,sp,-12
 40065e8:	dfc00215 	stw	ra,8(sp)
 40065ec:	df000115 	stw	fp,4(sp)
 40065f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40065f4:	00810034 	movhi	r2,1024
 40065f8:	109d6604 	addi	r2,r2,30104
 40065fc:	e0bfff15 	stw	r2,-4(fp)
 4006600:	00000606 	br	400661c <_do_ctors+0x38>
        (*ctor) (); 
 4006604:	e0bfff17 	ldw	r2,-4(fp)
 4006608:	10800017 	ldw	r2,0(r2)
 400660c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4006610:	e0bfff17 	ldw	r2,-4(fp)
 4006614:	10bfff04 	addi	r2,r2,-4
 4006618:	e0bfff15 	stw	r2,-4(fp)
 400661c:	e0ffff17 	ldw	r3,-4(fp)
 4006620:	00810034 	movhi	r2,1024
 4006624:	109d6704 	addi	r2,r2,30108
 4006628:	18bff62e 	bgeu	r3,r2,4006604 <__alt_heap_limit+0xfc006604>
        (*ctor) (); 
}
 400662c:	0001883a 	nop
 4006630:	e037883a 	mov	sp,fp
 4006634:	dfc00117 	ldw	ra,4(sp)
 4006638:	df000017 	ldw	fp,0(sp)
 400663c:	dec00204 	addi	sp,sp,8
 4006640:	f800283a 	ret

04006644 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4006644:	defffd04 	addi	sp,sp,-12
 4006648:	dfc00215 	stw	ra,8(sp)
 400664c:	df000115 	stw	fp,4(sp)
 4006650:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4006654:	00810034 	movhi	r2,1024
 4006658:	109d6604 	addi	r2,r2,30104
 400665c:	e0bfff15 	stw	r2,-4(fp)
 4006660:	00000606 	br	400667c <_do_dtors+0x38>
        (*dtor) (); 
 4006664:	e0bfff17 	ldw	r2,-4(fp)
 4006668:	10800017 	ldw	r2,0(r2)
 400666c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4006670:	e0bfff17 	ldw	r2,-4(fp)
 4006674:	10bfff04 	addi	r2,r2,-4
 4006678:	e0bfff15 	stw	r2,-4(fp)
 400667c:	e0ffff17 	ldw	r3,-4(fp)
 4006680:	00810034 	movhi	r2,1024
 4006684:	109d6704 	addi	r2,r2,30108
 4006688:	18bff62e 	bgeu	r3,r2,4006664 <__alt_heap_limit+0xfc006664>
        (*dtor) (); 
}
 400668c:	0001883a 	nop
 4006690:	e037883a 	mov	sp,fp
 4006694:	dfc00117 	ldw	ra,4(sp)
 4006698:	df000017 	ldw	fp,0(sp)
 400669c:	dec00204 	addi	sp,sp,8
 40066a0:	f800283a 	ret

040066a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40066a4:	deffff04 	addi	sp,sp,-4
 40066a8:	df000015 	stw	fp,0(sp)
 40066ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 40066b0:	0001883a 	nop
 40066b4:	e037883a 	mov	sp,fp
 40066b8:	df000017 	ldw	fp,0(sp)
 40066bc:	dec00104 	addi	sp,sp,4
 40066c0:	f800283a 	ret

040066c4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40066c4:	defff904 	addi	sp,sp,-28
 40066c8:	dfc00615 	stw	ra,24(sp)
 40066cc:	df000515 	stw	fp,20(sp)
 40066d0:	df000504 	addi	fp,sp,20
 40066d4:	e13ffc15 	stw	r4,-16(fp)
 40066d8:	e17ffd15 	stw	r5,-12(fp)
 40066dc:	e1bffe15 	stw	r6,-8(fp)
 40066e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 40066e4:	e0800217 	ldw	r2,8(fp)
 40066e8:	d8800015 	stw	r2,0(sp)
 40066ec:	e1ffff17 	ldw	r7,-4(fp)
 40066f0:	e1bffe17 	ldw	r6,-8(fp)
 40066f4:	e17ffd17 	ldw	r5,-12(fp)
 40066f8:	e13ffc17 	ldw	r4,-16(fp)
 40066fc:	40068740 	call	4006874 <alt_iic_isr_register>
}  
 4006700:	e037883a 	mov	sp,fp
 4006704:	dfc00117 	ldw	ra,4(sp)
 4006708:	df000017 	ldw	fp,0(sp)
 400670c:	dec00204 	addi	sp,sp,8
 4006710:	f800283a 	ret

04006714 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4006714:	defff904 	addi	sp,sp,-28
 4006718:	df000615 	stw	fp,24(sp)
 400671c:	df000604 	addi	fp,sp,24
 4006720:	e13ffe15 	stw	r4,-8(fp)
 4006724:	e17fff15 	stw	r5,-4(fp)
 4006728:	e0bfff17 	ldw	r2,-4(fp)
 400672c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006730:	0005303a 	rdctl	r2,status
 4006734:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006738:	e0fffb17 	ldw	r3,-20(fp)
 400673c:	00bfff84 	movi	r2,-2
 4006740:	1884703a 	and	r2,r3,r2
 4006744:	1001703a 	wrctl	status,r2
  
  return context;
 4006748:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400674c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4006750:	00c00044 	movi	r3,1
 4006754:	e0bffa17 	ldw	r2,-24(fp)
 4006758:	1884983a 	sll	r2,r3,r2
 400675c:	1007883a 	mov	r3,r2
 4006760:	d0a7b517 	ldw	r2,-24876(gp)
 4006764:	1884b03a 	or	r2,r3,r2
 4006768:	d0a7b515 	stw	r2,-24876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400676c:	d0a7b517 	ldw	r2,-24876(gp)
 4006770:	100170fa 	wrctl	ienable,r2
 4006774:	e0bffc17 	ldw	r2,-16(fp)
 4006778:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400677c:	e0bffd17 	ldw	r2,-12(fp)
 4006780:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4006784:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4006788:	0001883a 	nop
}
 400678c:	e037883a 	mov	sp,fp
 4006790:	df000017 	ldw	fp,0(sp)
 4006794:	dec00104 	addi	sp,sp,4
 4006798:	f800283a 	ret

0400679c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400679c:	defff904 	addi	sp,sp,-28
 40067a0:	df000615 	stw	fp,24(sp)
 40067a4:	df000604 	addi	fp,sp,24
 40067a8:	e13ffe15 	stw	r4,-8(fp)
 40067ac:	e17fff15 	stw	r5,-4(fp)
 40067b0:	e0bfff17 	ldw	r2,-4(fp)
 40067b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40067b8:	0005303a 	rdctl	r2,status
 40067bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40067c0:	e0fffb17 	ldw	r3,-20(fp)
 40067c4:	00bfff84 	movi	r2,-2
 40067c8:	1884703a 	and	r2,r3,r2
 40067cc:	1001703a 	wrctl	status,r2
  
  return context;
 40067d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40067d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 40067d8:	00c00044 	movi	r3,1
 40067dc:	e0bffa17 	ldw	r2,-24(fp)
 40067e0:	1884983a 	sll	r2,r3,r2
 40067e4:	0084303a 	nor	r2,zero,r2
 40067e8:	1007883a 	mov	r3,r2
 40067ec:	d0a7b517 	ldw	r2,-24876(gp)
 40067f0:	1884703a 	and	r2,r3,r2
 40067f4:	d0a7b515 	stw	r2,-24876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40067f8:	d0a7b517 	ldw	r2,-24876(gp)
 40067fc:	100170fa 	wrctl	ienable,r2
 4006800:	e0bffc17 	ldw	r2,-16(fp)
 4006804:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006808:	e0bffd17 	ldw	r2,-12(fp)
 400680c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4006810:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4006814:	0001883a 	nop
}
 4006818:	e037883a 	mov	sp,fp
 400681c:	df000017 	ldw	fp,0(sp)
 4006820:	dec00104 	addi	sp,sp,4
 4006824:	f800283a 	ret

04006828 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4006828:	defffc04 	addi	sp,sp,-16
 400682c:	df000315 	stw	fp,12(sp)
 4006830:	df000304 	addi	fp,sp,12
 4006834:	e13ffe15 	stw	r4,-8(fp)
 4006838:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400683c:	000530fa 	rdctl	r2,ienable
 4006840:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4006844:	00c00044 	movi	r3,1
 4006848:	e0bfff17 	ldw	r2,-4(fp)
 400684c:	1884983a 	sll	r2,r3,r2
 4006850:	1007883a 	mov	r3,r2
 4006854:	e0bffd17 	ldw	r2,-12(fp)
 4006858:	1884703a 	and	r2,r3,r2
 400685c:	1004c03a 	cmpne	r2,r2,zero
 4006860:	10803fcc 	andi	r2,r2,255
}
 4006864:	e037883a 	mov	sp,fp
 4006868:	df000017 	ldw	fp,0(sp)
 400686c:	dec00104 	addi	sp,sp,4
 4006870:	f800283a 	ret

04006874 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4006874:	defff504 	addi	sp,sp,-44
 4006878:	dfc00a15 	stw	ra,40(sp)
 400687c:	df000915 	stw	fp,36(sp)
 4006880:	df000904 	addi	fp,sp,36
 4006884:	e13ffc15 	stw	r4,-16(fp)
 4006888:	e17ffd15 	stw	r5,-12(fp)
 400688c:	e1bffe15 	stw	r6,-8(fp)
 4006890:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4006894:	00bffa84 	movi	r2,-22
 4006898:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400689c:	e0bffd17 	ldw	r2,-12(fp)
 40068a0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40068a4:	e0bff817 	ldw	r2,-32(fp)
 40068a8:	10800808 	cmpgei	r2,r2,32
 40068ac:	1000271e 	bne	r2,zero,400694c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40068b0:	0005303a 	rdctl	r2,status
 40068b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40068b8:	e0fffb17 	ldw	r3,-20(fp)
 40068bc:	00bfff84 	movi	r2,-2
 40068c0:	1884703a 	and	r2,r3,r2
 40068c4:	1001703a 	wrctl	status,r2
  
  return context;
 40068c8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40068cc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 40068d0:	00810074 	movhi	r2,1025
 40068d4:	10b50f04 	addi	r2,r2,-11204
 40068d8:	e0fff817 	ldw	r3,-32(fp)
 40068dc:	180690fa 	slli	r3,r3,3
 40068e0:	10c5883a 	add	r2,r2,r3
 40068e4:	e0fffe17 	ldw	r3,-8(fp)
 40068e8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 40068ec:	00810074 	movhi	r2,1025
 40068f0:	10b50f04 	addi	r2,r2,-11204
 40068f4:	e0fff817 	ldw	r3,-32(fp)
 40068f8:	180690fa 	slli	r3,r3,3
 40068fc:	10c5883a 	add	r2,r2,r3
 4006900:	10800104 	addi	r2,r2,4
 4006904:	e0ffff17 	ldw	r3,-4(fp)
 4006908:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400690c:	e0bffe17 	ldw	r2,-8(fp)
 4006910:	10000526 	beq	r2,zero,4006928 <alt_iic_isr_register+0xb4>
 4006914:	e0bff817 	ldw	r2,-32(fp)
 4006918:	100b883a 	mov	r5,r2
 400691c:	e13ffc17 	ldw	r4,-16(fp)
 4006920:	40067140 	call	4006714 <alt_ic_irq_enable>
 4006924:	00000406 	br	4006938 <alt_iic_isr_register+0xc4>
 4006928:	e0bff817 	ldw	r2,-32(fp)
 400692c:	100b883a 	mov	r5,r2
 4006930:	e13ffc17 	ldw	r4,-16(fp)
 4006934:	400679c0 	call	400679c <alt_ic_irq_disable>
 4006938:	e0bff715 	stw	r2,-36(fp)
 400693c:	e0bffa17 	ldw	r2,-24(fp)
 4006940:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006944:	e0bff917 	ldw	r2,-28(fp)
 4006948:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400694c:	e0bff717 	ldw	r2,-36(fp)
}
 4006950:	e037883a 	mov	sp,fp
 4006954:	dfc00117 	ldw	ra,4(sp)
 4006958:	df000017 	ldw	fp,0(sp)
 400695c:	dec00204 	addi	sp,sp,8
 4006960:	f800283a 	ret

04006964 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4006964:	defff804 	addi	sp,sp,-32
 4006968:	dfc00715 	stw	ra,28(sp)
 400696c:	df000615 	stw	fp,24(sp)
 4006970:	dc000515 	stw	r16,20(sp)
 4006974:	df000604 	addi	fp,sp,24
 4006978:	e13ffb15 	stw	r4,-20(fp)
 400697c:	e17ffc15 	stw	r5,-16(fp)
 4006980:	e1bffd15 	stw	r6,-12(fp)
 4006984:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4006988:	e1bffe17 	ldw	r6,-8(fp)
 400698c:	e17ffd17 	ldw	r5,-12(fp)
 4006990:	e13ffc17 	ldw	r4,-16(fp)
 4006994:	4006bec0 	call	4006bec <open>
 4006998:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 400699c:	e0bffa17 	ldw	r2,-24(fp)
 40069a0:	10002216 	blt	r2,zero,4006a2c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 40069a4:	04010074 	movhi	r16,1025
 40069a8:	8428d404 	addi	r16,r16,-23728
 40069ac:	e0bffa17 	ldw	r2,-24(fp)
 40069b0:	01400304 	movi	r5,12
 40069b4:	1009883a 	mov	r4,r2
 40069b8:	4001f780 	call	4001f78 <__mulsi3>
 40069bc:	8085883a 	add	r2,r16,r2
 40069c0:	10c00017 	ldw	r3,0(r2)
 40069c4:	e0bffb17 	ldw	r2,-20(fp)
 40069c8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40069cc:	04010074 	movhi	r16,1025
 40069d0:	8428d404 	addi	r16,r16,-23728
 40069d4:	e0bffa17 	ldw	r2,-24(fp)
 40069d8:	01400304 	movi	r5,12
 40069dc:	1009883a 	mov	r4,r2
 40069e0:	4001f780 	call	4001f78 <__mulsi3>
 40069e4:	8085883a 	add	r2,r16,r2
 40069e8:	10800104 	addi	r2,r2,4
 40069ec:	10c00017 	ldw	r3,0(r2)
 40069f0:	e0bffb17 	ldw	r2,-20(fp)
 40069f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40069f8:	04010074 	movhi	r16,1025
 40069fc:	8428d404 	addi	r16,r16,-23728
 4006a00:	e0bffa17 	ldw	r2,-24(fp)
 4006a04:	01400304 	movi	r5,12
 4006a08:	1009883a 	mov	r4,r2
 4006a0c:	4001f780 	call	4001f78 <__mulsi3>
 4006a10:	8085883a 	add	r2,r16,r2
 4006a14:	10800204 	addi	r2,r2,8
 4006a18:	10c00017 	ldw	r3,0(r2)
 4006a1c:	e0bffb17 	ldw	r2,-20(fp)
 4006a20:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4006a24:	e13ffa17 	ldw	r4,-24(fp)
 4006a28:	40054a40 	call	40054a4 <alt_release_fd>
  }
} 
 4006a2c:	0001883a 	nop
 4006a30:	e6ffff04 	addi	sp,fp,-4
 4006a34:	dfc00217 	ldw	ra,8(sp)
 4006a38:	df000117 	ldw	fp,4(sp)
 4006a3c:	dc000017 	ldw	r16,0(sp)
 4006a40:	dec00304 	addi	sp,sp,12
 4006a44:	f800283a 	ret

04006a48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4006a48:	defffb04 	addi	sp,sp,-20
 4006a4c:	dfc00415 	stw	ra,16(sp)
 4006a50:	df000315 	stw	fp,12(sp)
 4006a54:	df000304 	addi	fp,sp,12
 4006a58:	e13ffd15 	stw	r4,-12(fp)
 4006a5c:	e17ffe15 	stw	r5,-8(fp)
 4006a60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4006a64:	01c07fc4 	movi	r7,511
 4006a68:	01800044 	movi	r6,1
 4006a6c:	e17ffd17 	ldw	r5,-12(fp)
 4006a70:	01010074 	movhi	r4,1025
 4006a74:	2128d704 	addi	r4,r4,-23716
 4006a78:	40069640 	call	4006964 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4006a7c:	01c07fc4 	movi	r7,511
 4006a80:	000d883a 	mov	r6,zero
 4006a84:	e17ffe17 	ldw	r5,-8(fp)
 4006a88:	01010074 	movhi	r4,1025
 4006a8c:	2128d404 	addi	r4,r4,-23728
 4006a90:	40069640 	call	4006964 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4006a94:	01c07fc4 	movi	r7,511
 4006a98:	01800044 	movi	r6,1
 4006a9c:	e17fff17 	ldw	r5,-4(fp)
 4006aa0:	01010074 	movhi	r4,1025
 4006aa4:	2128da04 	addi	r4,r4,-23704
 4006aa8:	40069640 	call	4006964 <alt_open_fd>
}  
 4006aac:	0001883a 	nop
 4006ab0:	e037883a 	mov	sp,fp
 4006ab4:	dfc00117 	ldw	ra,4(sp)
 4006ab8:	df000017 	ldw	fp,0(sp)
 4006abc:	dec00204 	addi	sp,sp,8
 4006ac0:	f800283a 	ret

04006ac4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4006ac4:	defffe04 	addi	sp,sp,-8
 4006ac8:	dfc00115 	stw	ra,4(sp)
 4006acc:	df000015 	stw	fp,0(sp)
 4006ad0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4006ad4:	d0a00917 	ldw	r2,-32732(gp)
 4006ad8:	10000326 	beq	r2,zero,4006ae8 <alt_get_errno+0x24>
 4006adc:	d0a00917 	ldw	r2,-32732(gp)
 4006ae0:	103ee83a 	callr	r2
 4006ae4:	00000106 	br	4006aec <alt_get_errno+0x28>
 4006ae8:	d0a7b104 	addi	r2,gp,-24892
}
 4006aec:	e037883a 	mov	sp,fp
 4006af0:	dfc00117 	ldw	ra,4(sp)
 4006af4:	df000017 	ldw	fp,0(sp)
 4006af8:	dec00204 	addi	sp,sp,8
 4006afc:	f800283a 	ret

04006b00 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4006b00:	defffb04 	addi	sp,sp,-20
 4006b04:	dfc00415 	stw	ra,16(sp)
 4006b08:	df000315 	stw	fp,12(sp)
 4006b0c:	dc000215 	stw	r16,8(sp)
 4006b10:	df000304 	addi	fp,sp,12
 4006b14:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4006b18:	e0bffe17 	ldw	r2,-8(fp)
 4006b1c:	10800217 	ldw	r2,8(r2)
 4006b20:	10d00034 	orhi	r3,r2,16384
 4006b24:	e0bffe17 	ldw	r2,-8(fp)
 4006b28:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4006b2c:	e03ffd15 	stw	zero,-12(fp)
 4006b30:	00002306 	br	4006bc0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4006b34:	04010074 	movhi	r16,1025
 4006b38:	8428d404 	addi	r16,r16,-23728
 4006b3c:	e0bffd17 	ldw	r2,-12(fp)
 4006b40:	01400304 	movi	r5,12
 4006b44:	1009883a 	mov	r4,r2
 4006b48:	4001f780 	call	4001f78 <__mulsi3>
 4006b4c:	8085883a 	add	r2,r16,r2
 4006b50:	10c00017 	ldw	r3,0(r2)
 4006b54:	e0bffe17 	ldw	r2,-8(fp)
 4006b58:	10800017 	ldw	r2,0(r2)
 4006b5c:	1880151e 	bne	r3,r2,4006bb4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4006b60:	04010074 	movhi	r16,1025
 4006b64:	8428d404 	addi	r16,r16,-23728
 4006b68:	e0bffd17 	ldw	r2,-12(fp)
 4006b6c:	01400304 	movi	r5,12
 4006b70:	1009883a 	mov	r4,r2
 4006b74:	4001f780 	call	4001f78 <__mulsi3>
 4006b78:	8085883a 	add	r2,r16,r2
 4006b7c:	10800204 	addi	r2,r2,8
 4006b80:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4006b84:	10000b0e 	bge	r2,zero,4006bb4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4006b88:	01400304 	movi	r5,12
 4006b8c:	e13ffd17 	ldw	r4,-12(fp)
 4006b90:	4001f780 	call	4001f78 <__mulsi3>
 4006b94:	1007883a 	mov	r3,r2
 4006b98:	00810074 	movhi	r2,1025
 4006b9c:	10a8d404 	addi	r2,r2,-23728
 4006ba0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4006ba4:	e0bffe17 	ldw	r2,-8(fp)
 4006ba8:	18800226 	beq	r3,r2,4006bb4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4006bac:	00bffcc4 	movi	r2,-13
 4006bb0:	00000806 	br	4006bd4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4006bb4:	e0bffd17 	ldw	r2,-12(fp)
 4006bb8:	10800044 	addi	r2,r2,1
 4006bbc:	e0bffd15 	stw	r2,-12(fp)
 4006bc0:	d0a00817 	ldw	r2,-32736(gp)
 4006bc4:	1007883a 	mov	r3,r2
 4006bc8:	e0bffd17 	ldw	r2,-12(fp)
 4006bcc:	18bfd92e 	bgeu	r3,r2,4006b34 <__alt_heap_limit+0xfc006b34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4006bd0:	0005883a 	mov	r2,zero
}
 4006bd4:	e6ffff04 	addi	sp,fp,-4
 4006bd8:	dfc00217 	ldw	ra,8(sp)
 4006bdc:	df000117 	ldw	fp,4(sp)
 4006be0:	dc000017 	ldw	r16,0(sp)
 4006be4:	dec00304 	addi	sp,sp,12
 4006be8:	f800283a 	ret

04006bec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4006bec:	defff604 	addi	sp,sp,-40
 4006bf0:	dfc00915 	stw	ra,36(sp)
 4006bf4:	df000815 	stw	fp,32(sp)
 4006bf8:	df000804 	addi	fp,sp,32
 4006bfc:	e13ffd15 	stw	r4,-12(fp)
 4006c00:	e17ffe15 	stw	r5,-8(fp)
 4006c04:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4006c08:	00bfffc4 	movi	r2,-1
 4006c0c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4006c10:	00bffb44 	movi	r2,-19
 4006c14:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4006c18:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4006c1c:	d1600604 	addi	r5,gp,-32744
 4006c20:	e13ffd17 	ldw	r4,-12(fp)
 4006c24:	4006f100 	call	4006f10 <alt_find_dev>
 4006c28:	e0bff815 	stw	r2,-32(fp)
 4006c2c:	e0bff817 	ldw	r2,-32(fp)
 4006c30:	1000051e 	bne	r2,zero,4006c48 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4006c34:	e13ffd17 	ldw	r4,-12(fp)
 4006c38:	4006fa00 	call	4006fa0 <alt_find_file>
 4006c3c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4006c40:	00800044 	movi	r2,1
 4006c44:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4006c48:	e0bff817 	ldw	r2,-32(fp)
 4006c4c:	10002b26 	beq	r2,zero,4006cfc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4006c50:	e13ff817 	ldw	r4,-32(fp)
 4006c54:	40070a80 	call	40070a8 <alt_get_fd>
 4006c58:	e0bff915 	stw	r2,-28(fp)
 4006c5c:	e0bff917 	ldw	r2,-28(fp)
 4006c60:	1000030e 	bge	r2,zero,4006c70 <open+0x84>
    {
      status = index;
 4006c64:	e0bff917 	ldw	r2,-28(fp)
 4006c68:	e0bffa15 	stw	r2,-24(fp)
 4006c6c:	00002506 	br	4006d04 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4006c70:	01400304 	movi	r5,12
 4006c74:	e13ff917 	ldw	r4,-28(fp)
 4006c78:	4001f780 	call	4001f78 <__mulsi3>
 4006c7c:	1007883a 	mov	r3,r2
 4006c80:	00810074 	movhi	r2,1025
 4006c84:	10a8d404 	addi	r2,r2,-23728
 4006c88:	1885883a 	add	r2,r3,r2
 4006c8c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4006c90:	e0fffe17 	ldw	r3,-8(fp)
 4006c94:	00900034 	movhi	r2,16384
 4006c98:	10bfffc4 	addi	r2,r2,-1
 4006c9c:	1886703a 	and	r3,r3,r2
 4006ca0:	e0bffc17 	ldw	r2,-16(fp)
 4006ca4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4006ca8:	e0bffb17 	ldw	r2,-20(fp)
 4006cac:	1000051e 	bne	r2,zero,4006cc4 <open+0xd8>
 4006cb0:	e13ffc17 	ldw	r4,-16(fp)
 4006cb4:	4006b000 	call	4006b00 <alt_file_locked>
 4006cb8:	e0bffa15 	stw	r2,-24(fp)
 4006cbc:	e0bffa17 	ldw	r2,-24(fp)
 4006cc0:	10001016 	blt	r2,zero,4006d04 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4006cc4:	e0bff817 	ldw	r2,-32(fp)
 4006cc8:	10800317 	ldw	r2,12(r2)
 4006ccc:	10000826 	beq	r2,zero,4006cf0 <open+0x104>
 4006cd0:	e0bff817 	ldw	r2,-32(fp)
 4006cd4:	10800317 	ldw	r2,12(r2)
 4006cd8:	e1ffff17 	ldw	r7,-4(fp)
 4006cdc:	e1bffe17 	ldw	r6,-8(fp)
 4006ce0:	e17ffd17 	ldw	r5,-12(fp)
 4006ce4:	e13ffc17 	ldw	r4,-16(fp)
 4006ce8:	103ee83a 	callr	r2
 4006cec:	00000106 	br	4006cf4 <open+0x108>
 4006cf0:	0005883a 	mov	r2,zero
 4006cf4:	e0bffa15 	stw	r2,-24(fp)
 4006cf8:	00000206 	br	4006d04 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4006cfc:	00bffb44 	movi	r2,-19
 4006d00:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4006d04:	e0bffa17 	ldw	r2,-24(fp)
 4006d08:	1000090e 	bge	r2,zero,4006d30 <open+0x144>
  {
    alt_release_fd (index);  
 4006d0c:	e13ff917 	ldw	r4,-28(fp)
 4006d10:	40054a40 	call	40054a4 <alt_release_fd>
    ALT_ERRNO = -status;
 4006d14:	4006ac40 	call	4006ac4 <alt_get_errno>
 4006d18:	1007883a 	mov	r3,r2
 4006d1c:	e0bffa17 	ldw	r2,-24(fp)
 4006d20:	0085c83a 	sub	r2,zero,r2
 4006d24:	18800015 	stw	r2,0(r3)
    return -1;
 4006d28:	00bfffc4 	movi	r2,-1
 4006d2c:	00000106 	br	4006d34 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4006d30:	e0bff917 	ldw	r2,-28(fp)
}
 4006d34:	e037883a 	mov	sp,fp
 4006d38:	dfc00117 	ldw	ra,4(sp)
 4006d3c:	df000017 	ldw	fp,0(sp)
 4006d40:	dec00204 	addi	sp,sp,8
 4006d44:	f800283a 	ret

04006d48 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4006d48:	defffa04 	addi	sp,sp,-24
 4006d4c:	df000515 	stw	fp,20(sp)
 4006d50:	df000504 	addi	fp,sp,20
 4006d54:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006d58:	0005303a 	rdctl	r2,status
 4006d5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006d60:	e0fffc17 	ldw	r3,-16(fp)
 4006d64:	00bfff84 	movi	r2,-2
 4006d68:	1884703a 	and	r2,r3,r2
 4006d6c:	1001703a 	wrctl	status,r2
  
  return context;
 4006d70:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4006d74:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4006d78:	e0bfff17 	ldw	r2,-4(fp)
 4006d7c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4006d80:	e0bffd17 	ldw	r2,-12(fp)
 4006d84:	10800017 	ldw	r2,0(r2)
 4006d88:	e0fffd17 	ldw	r3,-12(fp)
 4006d8c:	18c00117 	ldw	r3,4(r3)
 4006d90:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4006d94:	e0bffd17 	ldw	r2,-12(fp)
 4006d98:	10800117 	ldw	r2,4(r2)
 4006d9c:	e0fffd17 	ldw	r3,-12(fp)
 4006da0:	18c00017 	ldw	r3,0(r3)
 4006da4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4006da8:	e0bffd17 	ldw	r2,-12(fp)
 4006dac:	e0fffd17 	ldw	r3,-12(fp)
 4006db0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4006db4:	e0bffd17 	ldw	r2,-12(fp)
 4006db8:	e0fffd17 	ldw	r3,-12(fp)
 4006dbc:	10c00015 	stw	r3,0(r2)
 4006dc0:	e0bffb17 	ldw	r2,-20(fp)
 4006dc4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006dc8:	e0bffe17 	ldw	r2,-8(fp)
 4006dcc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4006dd0:	0001883a 	nop
 4006dd4:	e037883a 	mov	sp,fp
 4006dd8:	df000017 	ldw	fp,0(sp)
 4006ddc:	dec00104 	addi	sp,sp,4
 4006de0:	f800283a 	ret

04006de4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4006de4:	defffb04 	addi	sp,sp,-20
 4006de8:	dfc00415 	stw	ra,16(sp)
 4006dec:	df000315 	stw	fp,12(sp)
 4006df0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4006df4:	d0a00c17 	ldw	r2,-32720(gp)
 4006df8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4006dfc:	d0a7b717 	ldw	r2,-24868(gp)
 4006e00:	10800044 	addi	r2,r2,1
 4006e04:	d0a7b715 	stw	r2,-24868(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4006e08:	00002e06 	br	4006ec4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4006e0c:	e0bffd17 	ldw	r2,-12(fp)
 4006e10:	10800017 	ldw	r2,0(r2)
 4006e14:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4006e18:	e0bffd17 	ldw	r2,-12(fp)
 4006e1c:	10800403 	ldbu	r2,16(r2)
 4006e20:	10803fcc 	andi	r2,r2,255
 4006e24:	10000426 	beq	r2,zero,4006e38 <alt_tick+0x54>
 4006e28:	d0a7b717 	ldw	r2,-24868(gp)
 4006e2c:	1000021e 	bne	r2,zero,4006e38 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4006e30:	e0bffd17 	ldw	r2,-12(fp)
 4006e34:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4006e38:	e0bffd17 	ldw	r2,-12(fp)
 4006e3c:	10800217 	ldw	r2,8(r2)
 4006e40:	d0e7b717 	ldw	r3,-24868(gp)
 4006e44:	18801d36 	bltu	r3,r2,4006ebc <alt_tick+0xd8>
 4006e48:	e0bffd17 	ldw	r2,-12(fp)
 4006e4c:	10800403 	ldbu	r2,16(r2)
 4006e50:	10803fcc 	andi	r2,r2,255
 4006e54:	1000191e 	bne	r2,zero,4006ebc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4006e58:	e0bffd17 	ldw	r2,-12(fp)
 4006e5c:	10800317 	ldw	r2,12(r2)
 4006e60:	e0fffd17 	ldw	r3,-12(fp)
 4006e64:	18c00517 	ldw	r3,20(r3)
 4006e68:	1809883a 	mov	r4,r3
 4006e6c:	103ee83a 	callr	r2
 4006e70:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4006e74:	e0bfff17 	ldw	r2,-4(fp)
 4006e78:	1000031e 	bne	r2,zero,4006e88 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4006e7c:	e13ffd17 	ldw	r4,-12(fp)
 4006e80:	4006d480 	call	4006d48 <alt_alarm_stop>
 4006e84:	00000d06 	br	4006ebc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4006e88:	e0bffd17 	ldw	r2,-12(fp)
 4006e8c:	10c00217 	ldw	r3,8(r2)
 4006e90:	e0bfff17 	ldw	r2,-4(fp)
 4006e94:	1887883a 	add	r3,r3,r2
 4006e98:	e0bffd17 	ldw	r2,-12(fp)
 4006e9c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4006ea0:	e0bffd17 	ldw	r2,-12(fp)
 4006ea4:	10c00217 	ldw	r3,8(r2)
 4006ea8:	d0a7b717 	ldw	r2,-24868(gp)
 4006eac:	1880032e 	bgeu	r3,r2,4006ebc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4006eb0:	e0bffd17 	ldw	r2,-12(fp)
 4006eb4:	00c00044 	movi	r3,1
 4006eb8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4006ebc:	e0bffe17 	ldw	r2,-8(fp)
 4006ec0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4006ec4:	e0fffd17 	ldw	r3,-12(fp)
 4006ec8:	d0a00c04 	addi	r2,gp,-32720
 4006ecc:	18bfcf1e 	bne	r3,r2,4006e0c <__alt_heap_limit+0xfc006e0c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4006ed0:	0001883a 	nop
}
 4006ed4:	0001883a 	nop
 4006ed8:	e037883a 	mov	sp,fp
 4006edc:	dfc00117 	ldw	ra,4(sp)
 4006ee0:	df000017 	ldw	fp,0(sp)
 4006ee4:	dec00204 	addi	sp,sp,8
 4006ee8:	f800283a 	ret

04006eec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4006eec:	deffff04 	addi	sp,sp,-4
 4006ef0:	df000015 	stw	fp,0(sp)
 4006ef4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4006ef8:	000170fa 	wrctl	ienable,zero
}
 4006efc:	0001883a 	nop
 4006f00:	e037883a 	mov	sp,fp
 4006f04:	df000017 	ldw	fp,0(sp)
 4006f08:	dec00104 	addi	sp,sp,4
 4006f0c:	f800283a 	ret

04006f10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4006f10:	defffa04 	addi	sp,sp,-24
 4006f14:	dfc00515 	stw	ra,20(sp)
 4006f18:	df000415 	stw	fp,16(sp)
 4006f1c:	df000404 	addi	fp,sp,16
 4006f20:	e13ffe15 	stw	r4,-8(fp)
 4006f24:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4006f28:	e0bfff17 	ldw	r2,-4(fp)
 4006f2c:	10800017 	ldw	r2,0(r2)
 4006f30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4006f34:	e13ffe17 	ldw	r4,-8(fp)
 4006f38:	40029780 	call	4002978 <strlen>
 4006f3c:	10800044 	addi	r2,r2,1
 4006f40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4006f44:	00000d06 	br	4006f7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4006f48:	e0bffc17 	ldw	r2,-16(fp)
 4006f4c:	10800217 	ldw	r2,8(r2)
 4006f50:	e0fffd17 	ldw	r3,-12(fp)
 4006f54:	180d883a 	mov	r6,r3
 4006f58:	e17ffe17 	ldw	r5,-8(fp)
 4006f5c:	1009883a 	mov	r4,r2
 4006f60:	40072540 	call	4007254 <memcmp>
 4006f64:	1000021e 	bne	r2,zero,4006f70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4006f68:	e0bffc17 	ldw	r2,-16(fp)
 4006f6c:	00000706 	br	4006f8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4006f70:	e0bffc17 	ldw	r2,-16(fp)
 4006f74:	10800017 	ldw	r2,0(r2)
 4006f78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4006f7c:	e0fffc17 	ldw	r3,-16(fp)
 4006f80:	e0bfff17 	ldw	r2,-4(fp)
 4006f84:	18bff01e 	bne	r3,r2,4006f48 <__alt_heap_limit+0xfc006f48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4006f88:	0005883a 	mov	r2,zero
}
 4006f8c:	e037883a 	mov	sp,fp
 4006f90:	dfc00117 	ldw	ra,4(sp)
 4006f94:	df000017 	ldw	fp,0(sp)
 4006f98:	dec00204 	addi	sp,sp,8
 4006f9c:	f800283a 	ret

04006fa0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4006fa0:	defffb04 	addi	sp,sp,-20
 4006fa4:	dfc00415 	stw	ra,16(sp)
 4006fa8:	df000315 	stw	fp,12(sp)
 4006fac:	df000304 	addi	fp,sp,12
 4006fb0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4006fb4:	d0a00417 	ldw	r2,-32752(gp)
 4006fb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4006fbc:	00003106 	br	4007084 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4006fc0:	e0bffd17 	ldw	r2,-12(fp)
 4006fc4:	10800217 	ldw	r2,8(r2)
 4006fc8:	1009883a 	mov	r4,r2
 4006fcc:	40029780 	call	4002978 <strlen>
 4006fd0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4006fd4:	e0bffd17 	ldw	r2,-12(fp)
 4006fd8:	10c00217 	ldw	r3,8(r2)
 4006fdc:	e0bffe17 	ldw	r2,-8(fp)
 4006fe0:	10bfffc4 	addi	r2,r2,-1
 4006fe4:	1885883a 	add	r2,r3,r2
 4006fe8:	10800003 	ldbu	r2,0(r2)
 4006fec:	10803fcc 	andi	r2,r2,255
 4006ff0:	1080201c 	xori	r2,r2,128
 4006ff4:	10bfe004 	addi	r2,r2,-128
 4006ff8:	10800bd8 	cmpnei	r2,r2,47
 4006ffc:	1000031e 	bne	r2,zero,400700c <alt_find_file+0x6c>
    {
      len -= 1;
 4007000:	e0bffe17 	ldw	r2,-8(fp)
 4007004:	10bfffc4 	addi	r2,r2,-1
 4007008:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400700c:	e0bffe17 	ldw	r2,-8(fp)
 4007010:	e0ffff17 	ldw	r3,-4(fp)
 4007014:	1885883a 	add	r2,r3,r2
 4007018:	10800003 	ldbu	r2,0(r2)
 400701c:	10803fcc 	andi	r2,r2,255
 4007020:	1080201c 	xori	r2,r2,128
 4007024:	10bfe004 	addi	r2,r2,-128
 4007028:	10800be0 	cmpeqi	r2,r2,47
 400702c:	1000081e 	bne	r2,zero,4007050 <alt_find_file+0xb0>
 4007030:	e0bffe17 	ldw	r2,-8(fp)
 4007034:	e0ffff17 	ldw	r3,-4(fp)
 4007038:	1885883a 	add	r2,r3,r2
 400703c:	10800003 	ldbu	r2,0(r2)
 4007040:	10803fcc 	andi	r2,r2,255
 4007044:	1080201c 	xori	r2,r2,128
 4007048:	10bfe004 	addi	r2,r2,-128
 400704c:	10000a1e 	bne	r2,zero,4007078 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4007050:	e0bffd17 	ldw	r2,-12(fp)
 4007054:	10800217 	ldw	r2,8(r2)
 4007058:	e0fffe17 	ldw	r3,-8(fp)
 400705c:	180d883a 	mov	r6,r3
 4007060:	e17fff17 	ldw	r5,-4(fp)
 4007064:	1009883a 	mov	r4,r2
 4007068:	40072540 	call	4007254 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400706c:	1000021e 	bne	r2,zero,4007078 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4007070:	e0bffd17 	ldw	r2,-12(fp)
 4007074:	00000706 	br	4007094 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4007078:	e0bffd17 	ldw	r2,-12(fp)
 400707c:	10800017 	ldw	r2,0(r2)
 4007080:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4007084:	e0fffd17 	ldw	r3,-12(fp)
 4007088:	d0a00404 	addi	r2,gp,-32752
 400708c:	18bfcc1e 	bne	r3,r2,4006fc0 <__alt_heap_limit+0xfc006fc0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4007090:	0005883a 	mov	r2,zero
}
 4007094:	e037883a 	mov	sp,fp
 4007098:	dfc00117 	ldw	ra,4(sp)
 400709c:	df000017 	ldw	fp,0(sp)
 40070a0:	dec00204 	addi	sp,sp,8
 40070a4:	f800283a 	ret

040070a8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40070a8:	defffa04 	addi	sp,sp,-24
 40070ac:	dfc00515 	stw	ra,20(sp)
 40070b0:	df000415 	stw	fp,16(sp)
 40070b4:	dc000315 	stw	r16,12(sp)
 40070b8:	df000404 	addi	fp,sp,16
 40070bc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 40070c0:	00bffa04 	movi	r2,-24
 40070c4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40070c8:	e03ffc15 	stw	zero,-16(fp)
 40070cc:	00001d06 	br	4007144 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 40070d0:	04010074 	movhi	r16,1025
 40070d4:	8428d404 	addi	r16,r16,-23728
 40070d8:	e0bffc17 	ldw	r2,-16(fp)
 40070dc:	01400304 	movi	r5,12
 40070e0:	1009883a 	mov	r4,r2
 40070e4:	4001f780 	call	4001f78 <__mulsi3>
 40070e8:	8085883a 	add	r2,r16,r2
 40070ec:	10800017 	ldw	r2,0(r2)
 40070f0:	1000111e 	bne	r2,zero,4007138 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 40070f4:	04010074 	movhi	r16,1025
 40070f8:	8428d404 	addi	r16,r16,-23728
 40070fc:	e0bffc17 	ldw	r2,-16(fp)
 4007100:	01400304 	movi	r5,12
 4007104:	1009883a 	mov	r4,r2
 4007108:	4001f780 	call	4001f78 <__mulsi3>
 400710c:	8085883a 	add	r2,r16,r2
 4007110:	e0fffe17 	ldw	r3,-8(fp)
 4007114:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4007118:	d0e00817 	ldw	r3,-32736(gp)
 400711c:	e0bffc17 	ldw	r2,-16(fp)
 4007120:	1880020e 	bge	r3,r2,400712c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4007124:	e0bffc17 	ldw	r2,-16(fp)
 4007128:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 400712c:	e0bffc17 	ldw	r2,-16(fp)
 4007130:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4007134:	00000606 	br	4007150 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4007138:	e0bffc17 	ldw	r2,-16(fp)
 400713c:	10800044 	addi	r2,r2,1
 4007140:	e0bffc15 	stw	r2,-16(fp)
 4007144:	e0bffc17 	ldw	r2,-16(fp)
 4007148:	10800810 	cmplti	r2,r2,32
 400714c:	103fe01e 	bne	r2,zero,40070d0 <__alt_heap_limit+0xfc0070d0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4007150:	e0bffd17 	ldw	r2,-12(fp)
}
 4007154:	e6ffff04 	addi	sp,fp,-4
 4007158:	dfc00217 	ldw	ra,8(sp)
 400715c:	df000117 	ldw	fp,4(sp)
 4007160:	dc000017 	ldw	r16,0(sp)
 4007164:	dec00304 	addi	sp,sp,12
 4007168:	f800283a 	ret

0400716c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 400716c:	defffe04 	addi	sp,sp,-8
 4007170:	df000115 	stw	fp,4(sp)
 4007174:	df000104 	addi	fp,sp,4
 4007178:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 400717c:	e0bfff17 	ldw	r2,-4(fp)
 4007180:	10bffe84 	addi	r2,r2,-6
 4007184:	10c00428 	cmpgeui	r3,r2,16
 4007188:	18001a1e 	bne	r3,zero,40071f4 <alt_exception_cause_generated_bad_addr+0x88>
 400718c:	100690ba 	slli	r3,r2,2
 4007190:	00810034 	movhi	r2,1024
 4007194:	109c6904 	addi	r2,r2,29092
 4007198:	1885883a 	add	r2,r3,r2
 400719c:	10800017 	ldw	r2,0(r2)
 40071a0:	1000683a 	jmp	r2
 40071a4:	040071e4 	muli	r16,zero,455
 40071a8:	040071e4 	muli	r16,zero,455
 40071ac:	040071f4 	movhi	r16,455
 40071b0:	040071f4 	movhi	r16,455
 40071b4:	040071f4 	movhi	r16,455
 40071b8:	040071e4 	muli	r16,zero,455
 40071bc:	040071ec 	andhi	r16,zero,455
 40071c0:	040071f4 	movhi	r16,455
 40071c4:	040071e4 	muli	r16,zero,455
 40071c8:	040071e4 	muli	r16,zero,455
 40071cc:	040071f4 	movhi	r16,455
 40071d0:	040071e4 	muli	r16,zero,455
 40071d4:	040071ec 	andhi	r16,zero,455
 40071d8:	040071f4 	movhi	r16,455
 40071dc:	040071f4 	movhi	r16,455
 40071e0:	040071e4 	muli	r16,zero,455
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 40071e4:	00800044 	movi	r2,1
 40071e8:	00000306 	br	40071f8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 40071ec:	0005883a 	mov	r2,zero
 40071f0:	00000106 	br	40071f8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 40071f4:	0005883a 	mov	r2,zero
  }
}
 40071f8:	e037883a 	mov	sp,fp
 40071fc:	df000017 	ldw	fp,0(sp)
 4007200:	dec00104 	addi	sp,sp,4
 4007204:	f800283a 	ret

04007208 <atexit>:
 4007208:	200b883a 	mov	r5,r4
 400720c:	000f883a 	mov	r7,zero
 4007210:	000d883a 	mov	r6,zero
 4007214:	0009883a 	mov	r4,zero
 4007218:	40072d01 	jmpi	40072d0 <__register_exitproc>

0400721c <exit>:
 400721c:	defffe04 	addi	sp,sp,-8
 4007220:	000b883a 	mov	r5,zero
 4007224:	dc000015 	stw	r16,0(sp)
 4007228:	dfc00115 	stw	ra,4(sp)
 400722c:	2021883a 	mov	r16,r4
 4007230:	40073e80 	call	40073e8 <__call_exitprocs>
 4007234:	00810074 	movhi	r2,1025
 4007238:	10ad4e04 	addi	r2,r2,-19144
 400723c:	11000017 	ldw	r4,0(r2)
 4007240:	20800f17 	ldw	r2,60(r4)
 4007244:	10000126 	beq	r2,zero,400724c <exit+0x30>
 4007248:	103ee83a 	callr	r2
 400724c:	8009883a 	mov	r4,r16
 4007250:	40075680 	call	4007568 <_exit>

04007254 <memcmp>:
 4007254:	01c000c4 	movi	r7,3
 4007258:	3980192e 	bgeu	r7,r6,40072c0 <memcmp+0x6c>
 400725c:	2144b03a 	or	r2,r4,r5
 4007260:	11c4703a 	and	r2,r2,r7
 4007264:	10000f26 	beq	r2,zero,40072a4 <memcmp+0x50>
 4007268:	20800003 	ldbu	r2,0(r4)
 400726c:	28c00003 	ldbu	r3,0(r5)
 4007270:	10c0151e 	bne	r2,r3,40072c8 <memcmp+0x74>
 4007274:	31bfff84 	addi	r6,r6,-2
 4007278:	01ffffc4 	movi	r7,-1
 400727c:	00000406 	br	4007290 <memcmp+0x3c>
 4007280:	20800003 	ldbu	r2,0(r4)
 4007284:	28c00003 	ldbu	r3,0(r5)
 4007288:	31bfffc4 	addi	r6,r6,-1
 400728c:	10c00e1e 	bne	r2,r3,40072c8 <memcmp+0x74>
 4007290:	21000044 	addi	r4,r4,1
 4007294:	29400044 	addi	r5,r5,1
 4007298:	31fff91e 	bne	r6,r7,4007280 <__alt_heap_limit+0xfc007280>
 400729c:	0005883a 	mov	r2,zero
 40072a0:	f800283a 	ret
 40072a4:	20c00017 	ldw	r3,0(r4)
 40072a8:	28800017 	ldw	r2,0(r5)
 40072ac:	18bfee1e 	bne	r3,r2,4007268 <__alt_heap_limit+0xfc007268>
 40072b0:	31bfff04 	addi	r6,r6,-4
 40072b4:	21000104 	addi	r4,r4,4
 40072b8:	29400104 	addi	r5,r5,4
 40072bc:	39bff936 	bltu	r7,r6,40072a4 <__alt_heap_limit+0xfc0072a4>
 40072c0:	303fe91e 	bne	r6,zero,4007268 <__alt_heap_limit+0xfc007268>
 40072c4:	003ff506 	br	400729c <__alt_heap_limit+0xfc00729c>
 40072c8:	10c5c83a 	sub	r2,r2,r3
 40072cc:	f800283a 	ret

040072d0 <__register_exitproc>:
 40072d0:	defffa04 	addi	sp,sp,-24
 40072d4:	dc000315 	stw	r16,12(sp)
 40072d8:	04010074 	movhi	r16,1025
 40072dc:	842d4e04 	addi	r16,r16,-19144
 40072e0:	80c00017 	ldw	r3,0(r16)
 40072e4:	dc400415 	stw	r17,16(sp)
 40072e8:	dfc00515 	stw	ra,20(sp)
 40072ec:	18805217 	ldw	r2,328(r3)
 40072f0:	2023883a 	mov	r17,r4
 40072f4:	10003726 	beq	r2,zero,40073d4 <__register_exitproc+0x104>
 40072f8:	10c00117 	ldw	r3,4(r2)
 40072fc:	010007c4 	movi	r4,31
 4007300:	20c00e16 	blt	r4,r3,400733c <__register_exitproc+0x6c>
 4007304:	1a000044 	addi	r8,r3,1
 4007308:	8800221e 	bne	r17,zero,4007394 <__register_exitproc+0xc4>
 400730c:	18c00084 	addi	r3,r3,2
 4007310:	18c7883a 	add	r3,r3,r3
 4007314:	18c7883a 	add	r3,r3,r3
 4007318:	12000115 	stw	r8,4(r2)
 400731c:	10c7883a 	add	r3,r2,r3
 4007320:	19400015 	stw	r5,0(r3)
 4007324:	0005883a 	mov	r2,zero
 4007328:	dfc00517 	ldw	ra,20(sp)
 400732c:	dc400417 	ldw	r17,16(sp)
 4007330:	dc000317 	ldw	r16,12(sp)
 4007334:	dec00604 	addi	sp,sp,24
 4007338:	f800283a 	ret
 400733c:	00810034 	movhi	r2,1024
 4007340:	1087e804 	addi	r2,r2,8096
 4007344:	10002626 	beq	r2,zero,40073e0 <__register_exitproc+0x110>
 4007348:	01006404 	movi	r4,400
 400734c:	d9400015 	stw	r5,0(sp)
 4007350:	d9800115 	stw	r6,4(sp)
 4007354:	d9c00215 	stw	r7,8(sp)
 4007358:	4001fa00 	call	4001fa0 <malloc>
 400735c:	d9400017 	ldw	r5,0(sp)
 4007360:	d9800117 	ldw	r6,4(sp)
 4007364:	d9c00217 	ldw	r7,8(sp)
 4007368:	10001d26 	beq	r2,zero,40073e0 <__register_exitproc+0x110>
 400736c:	81000017 	ldw	r4,0(r16)
 4007370:	10000115 	stw	zero,4(r2)
 4007374:	02000044 	movi	r8,1
 4007378:	22405217 	ldw	r9,328(r4)
 400737c:	0007883a 	mov	r3,zero
 4007380:	12400015 	stw	r9,0(r2)
 4007384:	20805215 	stw	r2,328(r4)
 4007388:	10006215 	stw	zero,392(r2)
 400738c:	10006315 	stw	zero,396(r2)
 4007390:	883fde26 	beq	r17,zero,400730c <__alt_heap_limit+0xfc00730c>
 4007394:	18c9883a 	add	r4,r3,r3
 4007398:	2109883a 	add	r4,r4,r4
 400739c:	1109883a 	add	r4,r2,r4
 40073a0:	21802215 	stw	r6,136(r4)
 40073a4:	01800044 	movi	r6,1
 40073a8:	12406217 	ldw	r9,392(r2)
 40073ac:	30cc983a 	sll	r6,r6,r3
 40073b0:	4992b03a 	or	r9,r9,r6
 40073b4:	12406215 	stw	r9,392(r2)
 40073b8:	21c04215 	stw	r7,264(r4)
 40073bc:	01000084 	movi	r4,2
 40073c0:	893fd21e 	bne	r17,r4,400730c <__alt_heap_limit+0xfc00730c>
 40073c4:	11006317 	ldw	r4,396(r2)
 40073c8:	218cb03a 	or	r6,r4,r6
 40073cc:	11806315 	stw	r6,396(r2)
 40073d0:	003fce06 	br	400730c <__alt_heap_limit+0xfc00730c>
 40073d4:	18805304 	addi	r2,r3,332
 40073d8:	18805215 	stw	r2,328(r3)
 40073dc:	003fc606 	br	40072f8 <__alt_heap_limit+0xfc0072f8>
 40073e0:	00bfffc4 	movi	r2,-1
 40073e4:	003fd006 	br	4007328 <__alt_heap_limit+0xfc007328>

040073e8 <__call_exitprocs>:
 40073e8:	defff504 	addi	sp,sp,-44
 40073ec:	df000915 	stw	fp,36(sp)
 40073f0:	dd400615 	stw	r21,24(sp)
 40073f4:	dc800315 	stw	r18,12(sp)
 40073f8:	dfc00a15 	stw	ra,40(sp)
 40073fc:	ddc00815 	stw	r23,32(sp)
 4007400:	dd800715 	stw	r22,28(sp)
 4007404:	dd000515 	stw	r20,20(sp)
 4007408:	dcc00415 	stw	r19,16(sp)
 400740c:	dc400215 	stw	r17,8(sp)
 4007410:	dc000115 	stw	r16,4(sp)
 4007414:	d9000015 	stw	r4,0(sp)
 4007418:	2839883a 	mov	fp,r5
 400741c:	04800044 	movi	r18,1
 4007420:	057fffc4 	movi	r21,-1
 4007424:	00810074 	movhi	r2,1025
 4007428:	10ad4e04 	addi	r2,r2,-19144
 400742c:	12000017 	ldw	r8,0(r2)
 4007430:	45005217 	ldw	r20,328(r8)
 4007434:	44c05204 	addi	r19,r8,328
 4007438:	a0001c26 	beq	r20,zero,40074ac <__call_exitprocs+0xc4>
 400743c:	a0800117 	ldw	r2,4(r20)
 4007440:	15ffffc4 	addi	r23,r2,-1
 4007444:	b8000d16 	blt	r23,zero,400747c <__call_exitprocs+0x94>
 4007448:	14000044 	addi	r16,r2,1
 400744c:	8421883a 	add	r16,r16,r16
 4007450:	8421883a 	add	r16,r16,r16
 4007454:	84402004 	addi	r17,r16,128
 4007458:	a463883a 	add	r17,r20,r17
 400745c:	a421883a 	add	r16,r20,r16
 4007460:	e0001e26 	beq	fp,zero,40074dc <__call_exitprocs+0xf4>
 4007464:	80804017 	ldw	r2,256(r16)
 4007468:	e0801c26 	beq	fp,r2,40074dc <__call_exitprocs+0xf4>
 400746c:	bdffffc4 	addi	r23,r23,-1
 4007470:	843fff04 	addi	r16,r16,-4
 4007474:	8c7fff04 	addi	r17,r17,-4
 4007478:	bd7ff91e 	bne	r23,r21,4007460 <__alt_heap_limit+0xfc007460>
 400747c:	00810034 	movhi	r2,1024
 4007480:	1087ed04 	addi	r2,r2,8116
 4007484:	10000926 	beq	r2,zero,40074ac <__call_exitprocs+0xc4>
 4007488:	a0800117 	ldw	r2,4(r20)
 400748c:	1000301e 	bne	r2,zero,4007550 <__call_exitprocs+0x168>
 4007490:	a0800017 	ldw	r2,0(r20)
 4007494:	10003226 	beq	r2,zero,4007560 <__call_exitprocs+0x178>
 4007498:	a009883a 	mov	r4,r20
 400749c:	98800015 	stw	r2,0(r19)
 40074a0:	4001fb40 	call	4001fb4 <free>
 40074a4:	9d000017 	ldw	r20,0(r19)
 40074a8:	a03fe41e 	bne	r20,zero,400743c <__alt_heap_limit+0xfc00743c>
 40074ac:	dfc00a17 	ldw	ra,40(sp)
 40074b0:	df000917 	ldw	fp,36(sp)
 40074b4:	ddc00817 	ldw	r23,32(sp)
 40074b8:	dd800717 	ldw	r22,28(sp)
 40074bc:	dd400617 	ldw	r21,24(sp)
 40074c0:	dd000517 	ldw	r20,20(sp)
 40074c4:	dcc00417 	ldw	r19,16(sp)
 40074c8:	dc800317 	ldw	r18,12(sp)
 40074cc:	dc400217 	ldw	r17,8(sp)
 40074d0:	dc000117 	ldw	r16,4(sp)
 40074d4:	dec00b04 	addi	sp,sp,44
 40074d8:	f800283a 	ret
 40074dc:	a0800117 	ldw	r2,4(r20)
 40074e0:	80c00017 	ldw	r3,0(r16)
 40074e4:	10bfffc4 	addi	r2,r2,-1
 40074e8:	15c01426 	beq	r2,r23,400753c <__call_exitprocs+0x154>
 40074ec:	80000015 	stw	zero,0(r16)
 40074f0:	183fde26 	beq	r3,zero,400746c <__alt_heap_limit+0xfc00746c>
 40074f4:	95c8983a 	sll	r4,r18,r23
 40074f8:	a0806217 	ldw	r2,392(r20)
 40074fc:	a5800117 	ldw	r22,4(r20)
 4007500:	2084703a 	and	r2,r4,r2
 4007504:	10000b26 	beq	r2,zero,4007534 <__call_exitprocs+0x14c>
 4007508:	a0806317 	ldw	r2,396(r20)
 400750c:	2088703a 	and	r4,r4,r2
 4007510:	20000c1e 	bne	r4,zero,4007544 <__call_exitprocs+0x15c>
 4007514:	89400017 	ldw	r5,0(r17)
 4007518:	d9000017 	ldw	r4,0(sp)
 400751c:	183ee83a 	callr	r3
 4007520:	a0800117 	ldw	r2,4(r20)
 4007524:	15bfbf1e 	bne	r2,r22,4007424 <__alt_heap_limit+0xfc007424>
 4007528:	98800017 	ldw	r2,0(r19)
 400752c:	153fcf26 	beq	r2,r20,400746c <__alt_heap_limit+0xfc00746c>
 4007530:	003fbc06 	br	4007424 <__alt_heap_limit+0xfc007424>
 4007534:	183ee83a 	callr	r3
 4007538:	003ff906 	br	4007520 <__alt_heap_limit+0xfc007520>
 400753c:	a5c00115 	stw	r23,4(r20)
 4007540:	003feb06 	br	40074f0 <__alt_heap_limit+0xfc0074f0>
 4007544:	89000017 	ldw	r4,0(r17)
 4007548:	183ee83a 	callr	r3
 400754c:	003ff406 	br	4007520 <__alt_heap_limit+0xfc007520>
 4007550:	a0800017 	ldw	r2,0(r20)
 4007554:	a027883a 	mov	r19,r20
 4007558:	1029883a 	mov	r20,r2
 400755c:	003fb606 	br	4007438 <__alt_heap_limit+0xfc007438>
 4007560:	0005883a 	mov	r2,zero
 4007564:	003ffb06 	br	4007554 <__alt_heap_limit+0xfc007554>

04007568 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4007568:	defffd04 	addi	sp,sp,-12
 400756c:	df000215 	stw	fp,8(sp)
 4007570:	df000204 	addi	fp,sp,8
 4007574:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4007578:	0001883a 	nop
 400757c:	e0bfff17 	ldw	r2,-4(fp)
 4007580:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4007584:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4007588:	10000226 	beq	r2,zero,4007594 <_exit+0x2c>
    ALT_SIM_FAIL();
 400758c:	002af070 	cmpltui	zero,zero,43969
 4007590:	00000106 	br	4007598 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4007594:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4007598:	003fff06 	br	4007598 <__alt_heap_limit+0xfc007598>
