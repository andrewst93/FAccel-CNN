module ram # (
            parameter           WIDTHA = 10,
            parameter           WIDTHD = 16
)
(
    input   logic               clock,
    input   logic               clock_sreset,
    
    input   logic [WIDTHA-1:0]  address,
    input   logic [WIDTHD-1:0]  writedata,
    output  logic [WIDTHD-1:0]  readdata,
    input   logic               read,
    input   logic               write,
    output  logic               waitrequest,
    output  logic               readdatavalid
);
            integer             i;

            logic [WIDTHD-1:0]  ram[0:2**WIDTHA-1];

    assign waitrequest = 1'b0;
    assign readdatavalid = read;

    always_comb begin
        readdata = ram[address];
    end

    always_ff @ (posedge clock) begin
        if (clock_sreset) begin
            for (i=0; i<(2**WIDTHA); i++) begin
                ram[i] <= {WIDTHD{1'b0}};
            end
        end
        else begin
            if (write) begin
                ram[address] <= writedata;
            end
        end
    end
    
endmodule
