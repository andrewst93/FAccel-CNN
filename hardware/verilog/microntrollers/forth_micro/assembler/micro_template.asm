   /***************************************************************************/
   /* define physical constants                                               */
   /***************************************************************************/
   passes = 20;      /* number passes of all source code  */


   IRQ_ADDRESS = 0x20; /* 0x20 ->0x23 for IRQ code, or vector to main IRQ service */
   CODE_START = 0x24;  /* Code starts executing here */
   VARS_START = 0x0;  /* position in RAM for variables */

   #include "micro18_isa.asm"
   #include "micro18_macro.asm"
   
   /***************************************************************************/
   /* actual peripheral base addresses */
   CODE_BASE = 0x0;
   PORT0_BASE = 0x200;
   TIMER0_BASE = 0x210;
   /***************************************************************************/

   /***************************************************************************/
   /* other constants */

   /***************************************************************************/
   /* Global Variables                                                        */
   /***************************************************************************/
   vptr = VARS_START;   /* start variables in RAM */

   /***************************************************************************/
   /* Entry point for Interrupts                                              */
   /***************************************************************************/
   mem = IRQ_ADDRESS; /* starting point in memory for code */
   ptr = mem;
   out mem, 0; /* set mem and ptr to correct relative positions */
   swp; psh; jump __ISR_SERVICE;
   flush_opcodes;
   
   /***************************************************************************/
   /* Entry point for CPU reset                                               */
   /***************************************************************************/

   /***************************************************************************/
   mem = CODE_START; /* starting point in memory for code */
   ptr = mem;
   out mem, 0; /* set mem and ptr to correct relative positions */
    /***************************************************************************/

   /***************************************************************************/
   /* Main Code                                                               */
   /***************************************************************************/

   /***************************************************************************/
   /* Main Code                                                               */
   /***************************************************************************/

   /***************************************************************************/
   lbl Main_Code;

   lbl Loop;
      jump Loop;

   /***************************************************************************/
   flush_opcodes;
   lbl Main_Spin;   /* should never get here */
      jump Main_Spin;
   flush_opcodes;
   /***************************************************************************/

   /***************************************************************************/
   /*                                                                         */
   /* Subroutines                                                             */
   /*                                                                         */
   /***************************************************************************/


   /***************************************************************************/
   /* End of Code                                                             */
   /***************************************************************************/

   /***************************************************************************/
   /* Strings -                                                               */
   /***************************************************************************/

   /***************************************************************************/
   /* THE END OF SOURCE                                                       */
   /***************************************************************************/

    /***************************************************************************/

    /* dump the code at the end of passes */
    #if (pass == 19) { flush_opcodes; dump 0x0, mem; }
    /***************************************************************************/
