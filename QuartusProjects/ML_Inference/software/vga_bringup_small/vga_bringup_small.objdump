
vga_bringup_small.elf:     file format elf32-littlenios2
vga_bringup_small.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00001c80 memsz 0x00001c80 flags r-x
    LOAD off    0x00002ca0 vaddr 0x00005ca0 paddr 0x000060a4 align 2**12
         filesz 0x00000404 memsz 0x00000404 flags rw-
    LOAD off    0x000034a8 vaddr 0x000064a8 paddr 0x000064a8 align 2**12
         filesz 0x00000000 memsz 0x00000028 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  000030a4  2**0
                  CONTENTS
  2 .text         00001b48  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  00005b68  00005b68  00002b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000404  00005ca0  000060a4  00002ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000028  000064a8  000064a8  000034a8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  000064d0  000064d0  000030a4  2**0
                  CONTENTS
  7 .sdram        00000000  04000000  04000000  000030a4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000290  00000000  00000000  000030c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00003162  00000000  00000000  00003358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001040  00000000  00000000  000064ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001269  00000000  00000000  000074fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000614  00000000  00000000  00008764  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000e63  00000000  00000000  00008d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000037d2  00000000  00000000  00009bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0000d3b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000003e0  00000000  00000000  0000d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000ea42  2**0
                  CONTENTS, READONLY
 19 .cpu          00000006  00000000  00000000  0000ea45  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000ea4b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000ea4c  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0000ea4d  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0000ea56  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0000ea5f  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  0000ea68  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003a  00000000  00000000  0000ea70  2**0
                  CONTENTS, READONLY
 27 .jdi          00004aa0  00000000  00000000  0000eaaa  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0005afbe  00000000  00000000  0001354a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
00005b68 l    d  .rodata	00000000 .rodata
00005ca0 l    d  .rwdata	00000000 .rwdata
000064a8 l    d  .bss	00000000 .bss
000064d0 l    d  .onchip_ram	00000000 .onchip_ram
04000000 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../vga_bringup_small_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 vga_bringup_small.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 rand.c
000064bc l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000059f4 g     F .text	0000002c alt_main
000047e4 g     F .text	0000004c crlf
000060a4 g       *ABS*	00000000 __flash_rwdata_start
000064a8 g     O .bss	00000004 ch_ypos
0000459c g     F .text	00000070 print_char
00005a20 g     F .text	00000038 alt_putstr
000060a0 g     O .rwdata	00000004 jtag_uart
00005b44 g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000064c8 g     O .bss	00000004 alt_argv
0000e0a0 g       *ABS*	00000000 _gp
00005a58 g     F .text	00000004 usleep
00005ca0 g     O .rwdata	00000400 font
000056b0 g     F .text	00000064 .hidden __udivsi3
00004660 g     F .text	00000184 print_dec
000064b0 g     O .bss	00000004 frame1_base
00004ff4 g     F .text	000005c4 .hidden __umoddi3
000064d0 g       *ABS*	00000000 __bss_end
000049f8 g     F .text	000005fc .hidden __udivdi3
000064ac g     O .bss	00000004 ch_xpos
00005b3c g     F .text	00000004 alt_dcache_flush_all
000060a4 g       *ABS*	00000000 __ram_rwdata_end
00004218 g     F .text	0000000c cursor_on
00005ca0 g       *ABS*	00000000 __ram_rodata_end
000043cc g     F .text	00000028 clear
0000422c g     F .text	000001a0 plot_line
00005714 g     F .text	00000058 .hidden __umodsi3
000064d0 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00005a80 g     F .text	00000034 altera_avalon_jtag_uart_write
000064b4 g     O .bss	00000004 cursor_flag
00004020 g     F .text	0000003c _start
000057a8 g     F .text	00000060 rand
00005a7c g     F .text	00000004 alt_sys_init
0000576c g     F .text	00000028 .hidden __mulsi3
00005ca0 g       *ABS*	00000000 __ram_rwdata_start
00005b68 g       *ABS*	00000000 __ram_rodata_start
0000405c g     F .text	00000054 put_pixel
00005ab4 g     F .text	00000088 alt_busy_sleep
000040fc g     F .text	00000098 plot_cursor
000064d0 g       *ABS*	00000000 __alt_stack_base
000064a8 g       *ABS*	00000000 __bss_start
000048dc g     F .text	0000011c main
000064c4 g     O .bss	00000004 alt_envp
00005794 g     F .text	00000014 srand
000055b8 g     F .text	00000084 .hidden __divsi3
00005b68 g       *ABS*	00000000 __flash_rodata_start
00005a5c g     F .text	00000020 alt_irq_init
00005ba0 g     O .rodata	00000100 .hidden __clz_tab
00004224 g     F .text	00000008 cursor_off
000064cc g     O .bss	00000004 alt_argc
000043f4 g     F .text	000000d4 plot_char
00004194 g     F .text	00000084 remove_cursor
00004518 g     F .text	00000084 scroll_up
000040b0 g     F .text	0000004c get_pixel
00004020 g       *ABS*	00000000 __ram_exceptions_start
000044c8 g     F .text	0000002c set_char
000060a4 g       *ABS*	00000000 _edata
0000460c g     F .text	00000054 print_string
000064d0 g       *ABS*	00000000 _end
000048a8 g     F .text	00000034 get_rand
00004020 g       *ABS*	00000000 __ram_exceptions_end
0000563c g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
04000000 g       *ABS*	00000000 __alt_mem_sdram
00004830 g     F .text	00000078 bringup_vga
00004000 g       *ABS*	00000000 __alt_mem_onchip_ram
000044f4 g     F .text	00000024 print_pos
0000400c g       .entry	00000000 _exit
00005808 g     F .text	0000010c .hidden __muldi3
00005b4c g     F .text	0000001c strlen
00005b40 g     F .text	00000004 alt_icache_flush_all
000064b8 g     O .bss	00000004 frame2_base
00005914 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b82814 	ori	gp,gp,57504
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10992a14 	ori	r2,r2,25768

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d93414 	ori	r3,r3,25808

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <__alt_mem_sdram+0xfc004044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	00059140 	call	5914 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00059f40 	call	59f4 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <__alt_mem_sdram+0xfc004058>

0000405c <put_pixel>:
#define _BLACK 0x0

alt_u32 ch_xpos = 0, ch_ypos = 0;
alt_u32 cursor_flag;

void put_pixel(alt_u16* base, alt_u32 x, alt_u32 y, alt_u32 rgb) {
    405c:	defffc04 	addi	sp,sp,-16
    4060:	dc800215 	stw	r18,8(sp)
    4064:	dc000015 	stw	r16,0(sp)
    4068:	2025883a 	mov	r18,r4
    406c:	2821883a 	mov	r16,r5
	IOWR_16DIRECT(base, (x + (y * XRES)) * 2, (rgb & 0xffff));
    4070:	3009883a 	mov	r4,r6
    4074:	0140a004 	movi	r5,640
#define _BLACK 0x0

alt_u32 ch_xpos = 0, ch_ypos = 0;
alt_u32 cursor_flag;

void put_pixel(alt_u16* base, alt_u32 x, alt_u32 y, alt_u32 rgb) {
    4078:	dc400115 	stw	r17,4(sp)
    407c:	dfc00315 	stw	ra,12(sp)
    4080:	3823883a 	mov	r17,r7
	IOWR_16DIRECT(base, (x + (y * XRES)) * 2, (rgb & 0xffff));
    4084:	000576c0 	call	576c <__mulsi3>
    4088:	1405883a 	add	r2,r2,r16
    408c:	1085883a 	add	r2,r2,r2
    4090:	9085883a 	add	r2,r18,r2
    4094:	1440002d 	sthio	r17,0(r2)
}
    4098:	dfc00317 	ldw	ra,12(sp)
    409c:	dc800217 	ldw	r18,8(sp)
    40a0:	dc400117 	ldw	r17,4(sp)
    40a4:	dc000017 	ldw	r16,0(sp)
    40a8:	dec00404 	addi	sp,sp,16
    40ac:	f800283a 	ret

000040b0 <get_pixel>:

int get_pixel(alt_u16* base, int x, int y) {
    40b0:	defffd04 	addi	sp,sp,-12
    40b4:	dc400115 	stw	r17,4(sp)
    40b8:	dc000015 	stw	r16,0(sp)
    40bc:	2023883a 	mov	r17,r4
    40c0:	2821883a 	mov	r16,r5
	return IORD_16DIRECT(base, (x + (y * XRES)) * 2);
    40c4:	3009883a 	mov	r4,r6
    40c8:	0140a004 	movi	r5,640

void put_pixel(alt_u16* base, alt_u32 x, alt_u32 y, alt_u32 rgb) {
	IOWR_16DIRECT(base, (x + (y * XRES)) * 2, (rgb & 0xffff));
}

int get_pixel(alt_u16* base, int x, int y) {
    40cc:	dfc00215 	stw	ra,8(sp)
	return IORD_16DIRECT(base, (x + (y * XRES)) * 2);
    40d0:	000576c0 	call	576c <__mulsi3>
    40d4:	1405883a 	add	r2,r2,r16
    40d8:	1085883a 	add	r2,r2,r2
    40dc:	8885883a 	add	r2,r17,r2
    40e0:	1080002b 	ldhuio	r2,0(r2)
}
    40e4:	10bfffcc 	andi	r2,r2,65535
    40e8:	dfc00217 	ldw	ra,8(sp)
    40ec:	dc400117 	ldw	r17,4(sp)
    40f0:	dc000017 	ldw	r16,0(sp)
    40f4:	dec00304 	addi	sp,sp,12
    40f8:	f800283a 	ret

000040fc <plot_cursor>:

void plot_cursor(alt_u16* base) {
	int x, y, rgb;
	rgb = _BLACK;
	if (cursor_flag == 1)
    40fc:	d0e10517 	ldw	r3,-31724(gp)

int get_pixel(alt_u16* base, int x, int y) {
	return IORD_16DIRECT(base, (x + (y * XRES)) * 2);
}

void plot_cursor(alt_u16* base) {
    4100:	defffa04 	addi	sp,sp,-24
    4104:	dcc00315 	stw	r19,12(sp)
    4108:	dfc00515 	stw	ra,20(sp)
    410c:	dd000415 	stw	r20,16(sp)
    4110:	dc800215 	stw	r18,8(sp)
    4114:	dc400115 	stw	r17,4(sp)
    4118:	dc000015 	stw	r16,0(sp)
	int x, y, rgb;
	rgb = _BLACK;
	if (cursor_flag == 1)
    411c:	00800044 	movi	r2,1

int get_pixel(alt_u16* base, int x, int y) {
	return IORD_16DIRECT(base, (x + (y * XRES)) * 2);
}

void plot_cursor(alt_u16* base) {
    4120:	2027883a 	mov	r19,r4
	int x, y, rgb;
	rgb = _BLACK;
	if (cursor_flag == 1)
    4124:	1880021e 	bne	r3,r2,4130 <plot_cursor+0x34>
		rgb = _WHITE;
    4128:	04bfffd4 	movui	r18,65535
    412c:	00000106 	br	4134 <plot_cursor+0x38>
	return IORD_16DIRECT(base, (x + (y * XRES)) * 2);
}

void plot_cursor(alt_u16* base) {
	int x, y, rgb;
	rgb = _BLACK;
    4130:	0025883a 	mov	r18,zero
	if (cursor_flag == 1)
		rgb = _WHITE;
	for (y=0; y<8; y++)
    4134:	0023883a 	mov	r17,zero
		for (x=0; x<8; x++)
    4138:	05000204 	movi	r20,8

void plot_cursor(alt_u16* base) {
	int x, y, rgb;
	rgb = _BLACK;
	if (cursor_flag == 1)
		rgb = _WHITE;
    413c:	0021883a 	mov	r16,zero
	for (y=0; y<8; y++)
		for (x=0; x<8; x++)
			put_pixel(base, (ch_xpos * 8) + x, (ch_ypos * 8) + y, rgb);
    4140:	d1a10217 	ldw	r6,-31736(gp)
    4144:	d1610317 	ldw	r5,-31732(gp)
    4148:	900f883a 	mov	r7,r18
    414c:	300c90fa 	slli	r6,r6,3
    4150:	280a90fa 	slli	r5,r5,3
    4154:	9809883a 	mov	r4,r19
    4158:	344d883a 	add	r6,r6,r17
    415c:	2c0b883a 	add	r5,r5,r16
	int x, y, rgb;
	rgb = _BLACK;
	if (cursor_flag == 1)
		rgb = _WHITE;
	for (y=0; y<8; y++)
		for (x=0; x<8; x++)
    4160:	84000044 	addi	r16,r16,1
			put_pixel(base, (ch_xpos * 8) + x, (ch_ypos * 8) + y, rgb);
    4164:	000405c0 	call	405c <put_pixel>
	int x, y, rgb;
	rgb = _BLACK;
	if (cursor_flag == 1)
		rgb = _WHITE;
	for (y=0; y<8; y++)
		for (x=0; x<8; x++)
    4168:	853ff51e 	bne	r16,r20,4140 <__alt_mem_sdram+0xfc004140>
void plot_cursor(alt_u16* base) {
	int x, y, rgb;
	rgb = _BLACK;
	if (cursor_flag == 1)
		rgb = _WHITE;
	for (y=0; y<8; y++)
    416c:	8c400044 	addi	r17,r17,1
    4170:	8c3ff21e 	bne	r17,r16,413c <__alt_mem_sdram+0xfc00413c>
		for (x=0; x<8; x++)
			put_pixel(base, (ch_xpos * 8) + x, (ch_ypos * 8) + y, rgb);

}
    4174:	dfc00517 	ldw	ra,20(sp)
    4178:	dd000417 	ldw	r20,16(sp)
    417c:	dcc00317 	ldw	r19,12(sp)
    4180:	dc800217 	ldw	r18,8(sp)
    4184:	dc400117 	ldw	r17,4(sp)
    4188:	dc000017 	ldw	r16,0(sp)
    418c:	dec00604 	addi	sp,sp,24
    4190:	f800283a 	ret

00004194 <remove_cursor>:

void remove_cursor(alt_u16* base) {
    4194:	defffb04 	addi	sp,sp,-20
    4198:	dcc00315 	stw	r19,12(sp)
    419c:	dc800215 	stw	r18,8(sp)
    41a0:	dc400115 	stw	r17,4(sp)
    41a4:	dfc00415 	stw	ra,16(sp)
    41a8:	dc000015 	stw	r16,0(sp)
    41ac:	2025883a 	mov	r18,r4
	int x, y, rgb;
	for (y=0; y<8; y++)
    41b0:	0023883a 	mov	r17,zero
		for (x=0; x<8; x++)
    41b4:	04c00204 	movi	r19,8
		for (x=0; x<8; x++)
			put_pixel(base, (ch_xpos * 8) + x, (ch_ypos * 8) + y, rgb);

}

void remove_cursor(alt_u16* base) {
    41b8:	0021883a 	mov	r16,zero

alt_u32 ch_xpos = 0, ch_ypos = 0;
alt_u32 cursor_flag;

void put_pixel(alt_u16* base, alt_u32 x, alt_u32 y, alt_u32 rgb) {
	IOWR_16DIRECT(base, (x + (y * XRES)) * 2, (rgb & 0xffff));
    41bc:	d1210217 	ldw	r4,-31736(gp)
    41c0:	0140a004 	movi	r5,640
    41c4:	200890fa 	slli	r4,r4,3
    41c8:	2449883a 	add	r4,r4,r17
    41cc:	000576c0 	call	576c <__mulsi3>
    41d0:	d0e10317 	ldw	r3,-31732(gp)
    41d4:	180690fa 	slli	r3,r3,3
    41d8:	10c5883a 	add	r2,r2,r3
    41dc:	1405883a 	add	r2,r2,r16
    41e0:	1085883a 	add	r2,r2,r2
    41e4:	9085883a 	add	r2,r18,r2
    41e8:	1000002d 	sthio	zero,0(r2)
}

void remove_cursor(alt_u16* base) {
	int x, y, rgb;
	for (y=0; y<8; y++)
		for (x=0; x<8; x++)
    41ec:	84000044 	addi	r16,r16,1
    41f0:	84fff21e 	bne	r16,r19,41bc <__alt_mem_sdram+0xfc0041bc>

}

void remove_cursor(alt_u16* base) {
	int x, y, rgb;
	for (y=0; y<8; y++)
    41f4:	8c400044 	addi	r17,r17,1
    41f8:	8c3fef1e 	bne	r17,r16,41b8 <__alt_mem_sdram+0xfc0041b8>
		for (x=0; x<8; x++)
			put_pixel(base, (ch_xpos * 8) + x, (ch_ypos * 8) + y, _BLACK);

}
    41fc:	dfc00417 	ldw	ra,16(sp)
    4200:	dcc00317 	ldw	r19,12(sp)
    4204:	dc800217 	ldw	r18,8(sp)
    4208:	dc400117 	ldw	r17,4(sp)
    420c:	dc000017 	ldw	r16,0(sp)
    4210:	dec00504 	addi	sp,sp,20
    4214:	f800283a 	ret

00004218 <cursor_on>:

void cursor_on(alt_u16* base) {
	cursor_flag = 1;
    4218:	00800044 	movi	r2,1
    421c:	d0a10515 	stw	r2,-31724(gp)
	plot_cursor(base);
    4220:	00040fc1 	jmpi	40fc <plot_cursor>

00004224 <cursor_off>:
}

void cursor_off(alt_u16* base) {
	cursor_flag = 0;
    4224:	d0210515 	stw	zero,-31724(gp)
	plot_cursor(base);
    4228:	00040fc1 	jmpi	40fc <plot_cursor>

0000422c <plot_line>:
}

void plot_line(alt_u16* base, int x, int y, int x2, int y2, int rgb) {
    422c:	defff804 	addi	sp,sp,-32
    4230:	dcc00315 	stw	r19,12(sp)
    4234:	2027883a 	mov	r19,r4
	int yLonger=0;
	int shortLen=y2-y;
    4238:	d9000817 	ldw	r4,32(sp)
void cursor_off(alt_u16* base) {
	cursor_flag = 0;
	plot_cursor(base);
}

void plot_line(alt_u16* base, int x, int y, int x2, int y2, int rgb) {
    423c:	dd000415 	stw	r20,16(sp)
    4240:	dc800215 	stw	r18,8(sp)
    4244:	dc400115 	stw	r17,4(sp)
    4248:	dc000015 	stw	r16,0(sp)
    424c:	dfc00715 	stw	ra,28(sp)
    4250:	dd800615 	stw	r22,24(sp)
    4254:	dd400515 	stw	r21,20(sp)
	int yLonger=0;
	int shortLen=y2-y;
    4258:	2189c83a 	sub	r4,r4,r6
void cursor_off(alt_u16* base) {
	cursor_flag = 0;
	plot_cursor(base);
}

void plot_line(alt_u16* base, int x, int y, int x2, int y2, int rgb) {
    425c:	2823883a 	mov	r17,r5
    4260:	3025883a 	mov	r18,r6
    4264:	dd000917 	ldw	r20,36(sp)
	int yLonger=0;
	int shortLen=y2-y;
	int longLen=x2-x;
    4268:	3961c83a 	sub	r16,r7,r5
	int j, swap;
	int decInc;

	if (abs(shortLen) > abs(longLen)) {
    426c:	2000020e 	bge	r4,zero,4278 <plot_line+0x4c>
    4270:	0105c83a 	sub	r2,zero,r4
    4274:	00000106 	br	427c <plot_line+0x50>
    4278:	2005883a 	mov	r2,r4
    427c:	8007883a 	mov	r3,r16
    4280:	8000010e 	bge	r16,zero,4288 <plot_line+0x5c>
    4284:	0407c83a 	sub	r3,zero,r16
    4288:	18801716 	blt	r3,r2,42e8 <plot_line+0xbc>
		swap = shortLen;
		shortLen = longLen;
		longLen = swap;
		yLonger = 1;
	}
	if (longLen == 0)
    428c:	80003226 	beq	r16,zero,4358 <plot_line+0x12c>
	cursor_flag = 0;
	plot_cursor(base);
}

void plot_line(alt_u16* base, int x, int y, int x2, int y2, int rgb) {
	int yLonger=0;
    4290:	002d883a 	mov	r22,zero
		yLonger = 1;
	}
	if (longLen == 0)
		decInc = 0;
	else
		decInc = (shortLen << 16) / longLen;
    4294:	2008943a 	slli	r4,r4,16
    4298:	800b883a 	mov	r5,r16
    429c:	00055b80 	call	55b8 <__divsi3>
    42a0:	102b883a 	mov	r21,r2
    42a4:	00a00014 	movui	r2,32768

	if (yLonger) {
    42a8:	b0001e26 	beq	r22,zero,4324 <plot_line+0xf8>
		if (longLen>0) {
    42ac:	04000c0e 	bge	zero,r16,42e0 <plot_line+0xb4>
			longLen += y;
			for (j=0x8000+(x<<16);y<=longLen;++y) {
    42b0:	8822943a 	slli	r17,r17,16
	else
		decInc = (shortLen << 16) / longLen;

	if (yLonger) {
		if (longLen>0) {
			longLen += y;
    42b4:	9421883a 	add	r16,r18,r16
			for (j=0x8000+(x<<16);y<=longLen;++y) {
    42b8:	88a3883a 	add	r17,r17,r2
    42bc:	84803916 	blt	r16,r18,43a4 <plot_line+0x178>
				put_pixel(base ,j >> 16, y, rgb);
    42c0:	880bd43a 	srai	r5,r17,16
    42c4:	900d883a 	mov	r6,r18
    42c8:	a00f883a 	mov	r7,r20
    42cc:	9809883a 	mov	r4,r19
    42d0:	000405c0 	call	405c <put_pixel>
				j += decInc;
    42d4:	8d63883a 	add	r17,r17,r21
		decInc = (shortLen << 16) / longLen;

	if (yLonger) {
		if (longLen>0) {
			longLen += y;
			for (j=0x8000+(x<<16);y<=longLen;++y) {
    42d8:	94800044 	addi	r18,r18,1
    42dc:	003ff706 	br	42bc <__alt_mem_sdram+0xfc0042bc>
    42e0:	8009883a 	mov	r4,r16
    42e4:	00000206 	br	42f0 <plot_line+0xc4>
		swap = shortLen;
		shortLen = longLen;
		longLen = swap;
		yLonger = 1;
	}
	if (longLen == 0)
    42e8:	2000291e 	bne	r4,zero,4390 <plot_line+0x164>
		decInc = 0;
    42ec:	002b883a 	mov	r21,zero
				j += decInc;
			}
			return;
		}
		longLen += y;
		for (j=0x8000+(x<<16);y>=longLen;--y) {
    42f0:	8822943a 	slli	r17,r17,16
    42f4:	00a00014 	movui	r2,32768
				put_pixel(base ,j >> 16, y, rgb);
				j += decInc;
			}
			return;
		}
		longLen += y;
    42f8:	9121883a 	add	r16,r18,r4
		for (j=0x8000+(x<<16);y>=longLen;--y) {
    42fc:	88a3883a 	add	r17,r17,r2
    4300:	94002816 	blt	r18,r16,43a4 <plot_line+0x178>
			put_pixel(base, j >> 16, y, rgb);
    4304:	880bd43a 	srai	r5,r17,16
    4308:	900d883a 	mov	r6,r18
    430c:	a00f883a 	mov	r7,r20
    4310:	9809883a 	mov	r4,r19
    4314:	000405c0 	call	405c <put_pixel>
			j -= decInc;
    4318:	8d63c83a 	sub	r17,r17,r21
				j += decInc;
			}
			return;
		}
		longLen += y;
		for (j=0x8000+(x<<16);y>=longLen;--y) {
    431c:	94bfffc4 	addi	r18,r18,-1
    4320:	003ff706 	br	4300 <__alt_mem_sdram+0xfc004300>
			j -= decInc;
		}
		return;
	}

	if (longLen > 0) {
    4324:	04000d0e 	bge	zero,r16,435c <plot_line+0x130>
		longLen += x;
		for (j=0x8000+(y<<16);x<=longLen;++x) {
    4328:	9024943a 	slli	r18,r18,16
		}
		return;
	}

	if (longLen > 0) {
		longLen += x;
    432c:	8c21883a 	add	r16,r17,r16
		for (j=0x8000+(y<<16);x<=longLen;++x) {
    4330:	90a5883a 	add	r18,r18,r2
    4334:	84401b16 	blt	r16,r17,43a4 <plot_line+0x178>
			put_pixel(base, x, j >> 16, rgb);
    4338:	900dd43a 	srai	r6,r18,16
    433c:	880b883a 	mov	r5,r17
    4340:	a00f883a 	mov	r7,r20
    4344:	9809883a 	mov	r4,r19
    4348:	000405c0 	call	405c <put_pixel>
			j += decInc;
    434c:	9565883a 	add	r18,r18,r21
		return;
	}

	if (longLen > 0) {
		longLen += x;
		for (j=0x8000+(y<<16);x<=longLen;++x) {
    4350:	8c400044 	addi	r17,r17,1
    4354:	003ff706 	br	4334 <__alt_mem_sdram+0xfc004334>
		shortLen = longLen;
		longLen = swap;
		yLonger = 1;
	}
	if (longLen == 0)
		decInc = 0;
    4358:	002b883a 	mov	r21,zero
			j += decInc;
		}
		return;
	}
	longLen += x;
	for (j=0x8000+(y<<16);x>=longLen;--x) {
    435c:	9024943a 	slli	r18,r18,16
    4360:	00a00014 	movui	r2,32768
			put_pixel(base, x, j >> 16, rgb);
			j += decInc;
		}
		return;
	}
	longLen += x;
    4364:	8c21883a 	add	r16,r17,r16
	for (j=0x8000+(y<<16);x>=longLen;--x) {
    4368:	90a5883a 	add	r18,r18,r2
    436c:	8c000d16 	blt	r17,r16,43a4 <plot_line+0x178>
		put_pixel(base, x, j >> 16, rgb);
    4370:	900dd43a 	srai	r6,r18,16
    4374:	880b883a 	mov	r5,r17
    4378:	a00f883a 	mov	r7,r20
    437c:	9809883a 	mov	r4,r19
    4380:	000405c0 	call	405c <put_pixel>
		j -= decInc;
    4384:	9565c83a 	sub	r18,r18,r21
			j += decInc;
		}
		return;
	}
	longLen += x;
	for (j=0x8000+(y<<16);x>=longLen;--x) {
    4388:	8c7fffc4 	addi	r17,r17,-1
    438c:	003ff706 	br	436c <__alt_mem_sdram+0xfc00436c>
		swap = shortLen;
		shortLen = longLen;
		longLen = swap;
		yLonger = 1;
	}
	if (longLen == 0)
    4390:	2005883a 	mov	r2,r4

	if (abs(shortLen) > abs(longLen)) {
		swap = shortLen;
		shortLen = longLen;
		longLen = swap;
		yLonger = 1;
    4394:	05800044 	movi	r22,1
	int j, swap;
	int decInc;

	if (abs(shortLen) > abs(longLen)) {
		swap = shortLen;
		shortLen = longLen;
    4398:	8009883a 	mov	r4,r16
		longLen = swap;
		yLonger = 1;
	}
	if (longLen == 0)
    439c:	1021883a 	mov	r16,r2
    43a0:	003fbc06 	br	4294 <__alt_mem_sdram+0xfc004294>
	longLen += x;
	for (j=0x8000+(y<<16);x>=longLen;--x) {
		put_pixel(base, x, j >> 16, rgb);
		j -= decInc;
	}
}
    43a4:	dfc00717 	ldw	ra,28(sp)
    43a8:	dd800617 	ldw	r22,24(sp)
    43ac:	dd400517 	ldw	r21,20(sp)
    43b0:	dd000417 	ldw	r20,16(sp)
    43b4:	dcc00317 	ldw	r19,12(sp)
    43b8:	dc800217 	ldw	r18,8(sp)
    43bc:	dc400117 	ldw	r17,4(sp)
    43c0:	dc000017 	ldw	r16,0(sp)
    43c4:	dec00804 	addi	sp,sp,32
    43c8:	f800283a 	ret

000043cc <clear>:

void clear(alt_u16* base) {
    43cc:	00c00274 	movhi	r3,9
    43d0:	18d80004 	addi	r3,r3,24576
    43d4:	2005883a 	mov	r2,r4
    43d8:	20c7883a 	add	r3,r4,r3
	long i;
	for (i=0; i<(XRES*YRES); i++) {
		IOWR_16DIRECT(base, i*2, 0);
    43dc:	1000002d 	sthio	zero,0(r2)
    43e0:	10800084 	addi	r2,r2,2
	}
}

void clear(alt_u16* base) {
	long i;
	for (i=0; i<(XRES*YRES); i++) {
    43e4:	10fffd1e 	bne	r2,r3,43dc <__alt_mem_sdram+0xfc0043dc>
		IOWR_16DIRECT(base, i*2, 0);
	}
	ch_xpos = 0;
    43e8:	d0210315 	stw	zero,-31732(gp)
	ch_ypos = 0;
    43ec:	d0210215 	stw	zero,-31736(gp)
	plot_cursor(base);
    43f0:	00040fc1 	jmpi	40fc <plot_cursor>

000043f4 <plot_char>:
}

void plot_char(alt_u16* base, int ch, int x, int y, int rgb) {
    43f4:	280a90fa 	slli	r5,r5,3
    43f8:	defff504 	addi	sp,sp,-44
    43fc:	dd800715 	stw	r22,28(sp)
    4400:	05800034 	movhi	r22,0
    4404:	df000915 	stw	fp,36(sp)
    4408:	ddc00815 	stw	r23,32(sp)
    440c:	dd400615 	stw	r21,24(sp)
    4410:	dd000515 	stw	r20,20(sp)
    4414:	dc000115 	stw	r16,4(sp)
    4418:	dfc00a15 	stw	ra,40(sp)
    441c:	dcc00415 	stw	r19,16(sp)
    4420:	dc800315 	stw	r18,12(sp)
    4424:	dc400215 	stw	r17,8(sp)
    4428:	2039883a 	mov	fp,r4
    442c:	302b883a 	mov	r21,r6
    4430:	3821883a 	mov	r16,r7
    4434:	3dc00204 	addi	r23,r7,8
    4438:	29e9c83a 	sub	r20,r5,r7
    443c:	30c00204 	addi	r3,r6,8
    4440:	b5972804 	addi	r22,r22,23712
    4444:	8527883a 	add	r19,r16,r20
    4448:	a825883a 	mov	r18,r21
    444c:	9da7883a 	add	r19,r19,r22
    4450:	04400044 	movi	r17,1

	for (yy=0; yy<8; yy++) {
		m = 1;
		for (xx=0; xx<8; xx++) {
			rr = 0x0;
			if ((font[ch][yy] & m) > 0)
    4454:	98800007 	ldb	r2,0(r19)
    4458:	1444703a 	and	r2,r2,r17
    445c:	0080020e 	bge	zero,r2,4468 <plot_char+0x74>
				rr = rgb;
    4460:	d9c00b17 	ldw	r7,44(sp)
    4464:	00000106 	br	446c <plot_char+0x78>
	int xx, yy, rr, m;

	for (yy=0; yy<8; yy++) {
		m = 1;
		for (xx=0; xx<8; xx++) {
			rr = 0x0;
    4468:	000f883a 	mov	r7,zero
			if ((font[ch][yy] & m) > 0)
				rr = rgb;
			m = m << 1;
			put_pixel(base, xx + x, yy + y, rr);
    446c:	900b883a 	mov	r5,r18
    4470:	800d883a 	mov	r6,r16
    4474:	e009883a 	mov	r4,fp
    4478:	d8c00015 	stw	r3,0(sp)
    447c:	000405c0 	call	405c <put_pixel>
void plot_char(alt_u16* base, int ch, int x, int y, int rgb) {
	int xx, yy, rr, m;

	for (yy=0; yy<8; yy++) {
		m = 1;
		for (xx=0; xx<8; xx++) {
    4480:	d8c00017 	ldw	r3,0(sp)
    4484:	94800044 	addi	r18,r18,1
			rr = 0x0;
			if ((font[ch][yy] & m) > 0)
				rr = rgb;
			m = m << 1;
    4488:	8c63883a 	add	r17,r17,r17
void plot_char(alt_u16* base, int ch, int x, int y, int rgb) {
	int xx, yy, rr, m;

	for (yy=0; yy<8; yy++) {
		m = 1;
		for (xx=0; xx<8; xx++) {
    448c:	1cbff11e 	bne	r3,r18,4454 <__alt_mem_sdram+0xfc004454>
    4490:	84000044 	addi	r16,r16,1
}

void plot_char(alt_u16* base, int ch, int x, int y, int rgb) {
	int xx, yy, rr, m;

	for (yy=0; yy<8; yy++) {
    4494:	bc3feb1e 	bne	r23,r16,4444 <__alt_mem_sdram+0xfc004444>
				rr = rgb;
			m = m << 1;
			put_pixel(base, xx + x, yy + y, rr);
		}
	}
}
    4498:	dfc00a17 	ldw	ra,40(sp)
    449c:	df000917 	ldw	fp,36(sp)
    44a0:	ddc00817 	ldw	r23,32(sp)
    44a4:	dd800717 	ldw	r22,28(sp)
    44a8:	dd400617 	ldw	r21,24(sp)
    44ac:	dd000517 	ldw	r20,20(sp)
    44b0:	dcc00417 	ldw	r19,16(sp)
    44b4:	dc800317 	ldw	r18,12(sp)
    44b8:	dc400217 	ldw	r17,8(sp)
    44bc:	dc000117 	ldw	r16,4(sp)
    44c0:	dec00b04 	addi	sp,sp,44
    44c4:	f800283a 	ret

000044c8 <set_char>:
	yy = y;
	if (x > ((XRES / 8) - 1))
		xx = (XRES / 8) - 1;
	if (y > ((YRES / 8) - 1))
		yy = (YRES / 8) - 1;
	plot_char(base, ch, xx*8, yy*8, rgb);
    44c8:	00800ec4 	movi	r2,59
			put_pixel(base, xx + x, yy + y, rr);
		}
	}
}

void set_char(alt_u16* base, int ch, int x, int y, int rgb) {	// 80x60
    44cc:	d8c00017 	ldw	r3,0(sp)
	yy = y;
	if (x > ((XRES / 8) - 1))
		xx = (XRES / 8) - 1;
	if (y > ((YRES / 8) - 1))
		yy = (YRES / 8) - 1;
	plot_char(base, ch, xx*8, yy*8, rgb);
    44d0:	11c0010e 	bge	r2,r7,44d8 <set_char+0x10>
    44d4:	100f883a 	mov	r7,r2
    44d8:	008013c4 	movi	r2,79
    44dc:	380e90fa 	slli	r7,r7,3
    44e0:	1180010e 	bge	r2,r6,44e8 <set_char+0x20>
    44e4:	100d883a 	mov	r6,r2
    44e8:	300c90fa 	slli	r6,r6,3
    44ec:	d8c00015 	stw	r3,0(sp)
    44f0:	00043f41 	jmpi	43f4 <plot_char>

000044f4 <print_pos>:
	yy = y;
	if (x > ((XRES / 8) - 1))
		xx = (XRES / 8) - 1;
	if (y > ((YRES / 8) - 1))
		yy = (YRES / 8) - 1;
	ch_xpos = xx;
    44f4:	008013c4 	movi	r2,79
    44f8:	1140010e 	bge	r2,r5,4500 <print_pos+0xc>
    44fc:	100b883a 	mov	r5,r2
    4500:	d1610315 	stw	r5,-31732(gp)
	ch_ypos = yy;
    4504:	00800ec4 	movi	r2,59
    4508:	1180010e 	bge	r2,r6,4510 <print_pos+0x1c>
    450c:	100d883a 	mov	r6,r2
    4510:	d1a10215 	stw	r6,-31736(gp)
	plot_cursor(base);
    4514:	00040fc1 	jmpi	40fc <plot_cursor>

00004518 <scroll_up>:
				p = get_pixel(base, x, y);
				put_pixel(base, x, y-8, p);
			}
		}
	#else
	  while ((IORD(DMA_BASE, 0) & 0x2) != 0x0); // wait busy
    4518:	01641014 	movui	r5,36928
    451c:	00a41014 	movui	r2,36928
    4520:	28c00037 	ldwio	r3,0(r5)
    4524:	18c0008c 	andi	r3,r3,2
    4528:	183ffc1e 	bne	r3,zero,451c <__alt_mem_sdram+0xfc00451c>
	  //IOWR(DMA_BASE, 1, 1); // reset
	  IOWR(DMA_BASE, 2, (alt_u32)base + ((XRES * 8) * 2));
    452c:	20ca0004 	addi	r3,r4,10240
    4530:	01641214 	movui	r5,36936
    4534:	28c00035 	stwio	r3,0(r5)
	  IOWR(DMA_BASE, 3, (alt_u32)base);
    4538:	00e41314 	movui	r3,36940
    453c:	19000035 	stwio	r4,0(r3)
	  IOWR(DMA_BASE, 4, (YRES - 8) * XRES);
    4540:	01400174 	movhi	r5,5
    4544:	00e41414 	movui	r3,36944
    4548:	29670004 	addi	r5,r5,-25600
    454c:	19400035 	stwio	r5,0(r3)
	  IOWR(DMA_BASE, 0, 1); // go
    4550:	00c00044 	movi	r3,1
    4554:	10c00035 	stwio	r3,0(r2)
	  while ((IORD(DMA_BASE, 0) & 0x2) != 0x0); // wait busy
    4558:	10c00037 	ldwio	r3,0(r2)
    455c:	18c0008c 	andi	r3,r3,2
    4560:	183ffd1e 	bne	r3,zero,4558 <__alt_mem_sdram+0xfc004558>
    4564:	00c00274 	movhi	r3,9
	#endif
	for (y=YRES-8; y<YRES; y++)
    4568:	01c00274 	movhi	r7,9
    456c:	18ce0004 	addi	r3,r3,14336
		for (x=0; x<XRES; x++)
    4570:	01814004 	movi	r6,1280
	  IOWR(DMA_BASE, 3, (alt_u32)base);
	  IOWR(DMA_BASE, 4, (YRES - 8) * XRES);
	  IOWR(DMA_BASE, 0, 1); // go
	  while ((IORD(DMA_BASE, 0) & 0x2) != 0x0); // wait busy
	#endif
	for (y=YRES-8; y<YRES; y++)
    4574:	39d80004 	addi	r7,r7,24576
	ch_xpos = xx;
	ch_ypos = yy;
	plot_cursor(base);
}

void scroll_up(alt_u16* base) {
    4578:	0005883a 	mov	r2,zero
	  IOWR(DMA_BASE, 0, 1); // go
	  while ((IORD(DMA_BASE, 0) & 0x2) != 0x0); // wait busy
	#endif
	for (y=YRES-8; y<YRES; y++)
		for (x=0; x<XRES; x++)
			IOWR_16DIRECT(base, (x + (XRES * y)) * 2, _BLACK);
    457c:	188b883a 	add	r5,r3,r2
    4580:	214b883a 	add	r5,r4,r5
    4584:	2800002d 	sthio	zero,0(r5)
    4588:	10800084 	addi	r2,r2,2
	  IOWR(DMA_BASE, 4, (YRES - 8) * XRES);
	  IOWR(DMA_BASE, 0, 1); // go
	  while ((IORD(DMA_BASE, 0) & 0x2) != 0x0); // wait busy
	#endif
	for (y=YRES-8; y<YRES; y++)
		for (x=0; x<XRES; x++)
    458c:	11bffb1e 	bne	r2,r6,457c <__alt_mem_sdram+0xfc00457c>
    4590:	18c14004 	addi	r3,r3,1280
	  IOWR(DMA_BASE, 3, (alt_u32)base);
	  IOWR(DMA_BASE, 4, (YRES - 8) * XRES);
	  IOWR(DMA_BASE, 0, 1); // go
	  while ((IORD(DMA_BASE, 0) & 0x2) != 0x0); // wait busy
	#endif
	for (y=YRES-8; y<YRES; y++)
    4594:	19fff81e 	bne	r3,r7,4578 <__alt_mem_sdram+0xfc004578>
    4598:	f800283a 	ret

0000459c <print_char>:
		for (x=0; x<XRES; x++)
			IOWR_16DIRECT(base, (x + (XRES * y)) * 2, _BLACK);
}

void print_char(alt_u16* base, int ch, int rgb) {
    459c:	defffd04 	addi	sp,sp,-12
	set_char(base, ch, ch_xpos, ch_ypos, rgb);
    45a0:	d9800015 	stw	r6,0(sp)
    45a4:	d1e10217 	ldw	r7,-31736(gp)
    45a8:	d1a10317 	ldw	r6,-31732(gp)
	for (y=YRES-8; y<YRES; y++)
		for (x=0; x<XRES; x++)
			IOWR_16DIRECT(base, (x + (XRES * y)) * 2, _BLACK);
}

void print_char(alt_u16* base, int ch, int rgb) {
    45ac:	dc000115 	stw	r16,4(sp)
    45b0:	dfc00215 	stw	ra,8(sp)
    45b4:	2021883a 	mov	r16,r4
	set_char(base, ch, ch_xpos, ch_ypos, rgb);
    45b8:	00044c80 	call	44c8 <set_char>
	if (ch_xpos >= (XRES / 8) - 1) {
    45bc:	d0a10317 	ldw	r2,-31732(gp)
    45c0:	00c01384 	movi	r3,78
    45c4:	18800a2e 	bgeu	r3,r2,45f0 <print_char+0x54>
		ch_xpos = 0;
		if (ch_ypos >= ((YRES / 8) - 1)) {
    45c8:	d0a10217 	ldw	r2,-31736(gp)
}

void print_char(alt_u16* base, int ch, int rgb) {
	set_char(base, ch, ch_xpos, ch_ypos, rgb);
	if (ch_xpos >= (XRES / 8) - 1) {
		ch_xpos = 0;
    45cc:	d0210315 	stw	zero,-31732(gp)
		if (ch_ypos >= ((YRES / 8) - 1)) {
    45d0:	00c00e84 	movi	r3,58
    45d4:	1880032e 	bgeu	r3,r2,45e4 <print_char+0x48>
			scroll_up(base);
    45d8:	8009883a 	mov	r4,r16
    45dc:	00045180 	call	4518 <scroll_up>
    45e0:	00000506 	br	45f8 <print_char+0x5c>
		}
		else
			ch_ypos++;
    45e4:	10800044 	addi	r2,r2,1
    45e8:	d0a10215 	stw	r2,-31736(gp)
    45ec:	00000206 	br	45f8 <print_char+0x5c>
	}
	else
		ch_xpos++;
    45f0:	10800044 	addi	r2,r2,1
    45f4:	d0a10315 	stw	r2,-31732(gp)
	plot_cursor(base);
    45f8:	8009883a 	mov	r4,r16
}
    45fc:	dfc00217 	ldw	ra,8(sp)
    4600:	dc000117 	ldw	r16,4(sp)
    4604:	dec00304 	addi	sp,sp,12
		else
			ch_ypos++;
	}
	else
		ch_xpos++;
	plot_cursor(base);
    4608:	00040fc1 	jmpi	40fc <plot_cursor>

0000460c <print_string>:
}

void print_string(alt_u16* base, char *ch, int rgb) {
    460c:	defffc04 	addi	sp,sp,-16
    4610:	dc800215 	stw	r18,8(sp)
    4614:	dc400115 	stw	r17,4(sp)
    4618:	dc000015 	stw	r16,0(sp)
    461c:	dfc00315 	stw	ra,12(sp)
    4620:	2023883a 	mov	r17,r4
    4624:	3025883a 	mov	r18,r6
    4628:	2821883a 	mov	r16,r5
    462c:	84000044 	addi	r16,r16,1
	int i;

	i = 0;
	while (*(ch+i) != 0) {
    4630:	817fffc7 	ldb	r5,-1(r16)
    4634:	28000426 	beq	r5,zero,4648 <print_string+0x3c>
		print_char(base, *(ch + i), rgb);
    4638:	900d883a 	mov	r6,r18
    463c:	8809883a 	mov	r4,r17
    4640:	000459c0 	call	459c <print_char>
    4644:	003ff906 	br	462c <__alt_mem_sdram+0xfc00462c>
		i++;
	}
}
    4648:	dfc00317 	ldw	ra,12(sp)
    464c:	dc800217 	ldw	r18,8(sp)
    4650:	dc400117 	ldw	r17,4(sp)
    4654:	dc000017 	ldw	r16,0(sp)
    4658:	dec00404 	addi	sp,sp,16
    465c:	f800283a 	ret

00004660 <print_dec>:

void print_dec(alt_u16* base, alt_64 x, int rgb) {
    4660:	defff004 	addi	sp,sp,-64
    4664:	dc400715 	stw	r17,28(sp)
    4668:	3023883a 	mov	r17,r6
    466c:	dfc00f15 	stw	ra,60(sp)
    4670:	df000e15 	stw	fp,56(sp)
    4674:	ddc00d15 	stw	r23,52(sp)
    4678:	dd800c15 	stw	r22,48(sp)
    467c:	dd400b15 	stw	r21,44(sp)
    4680:	dd000a15 	stw	r20,40(sp)
    4684:	dcc00915 	stw	r19,36(sp)
    4688:	dc800815 	stw	r18,32(sp)
    468c:	dc000615 	stw	r16,24(sp)
	int i, j;
	char r[20];

	i = 0;
	j = 0;
	if (x == 0)
    4690:	2c44b03a 	or	r2,r5,r17
		print_char(base, *(ch + i), rgb);
		i++;
	}
}

void print_dec(alt_u16* base, alt_64 x, int rgb) {
    4694:	380d883a 	mov	r6,r7
	int i, j;
	char r[20];

	i = 0;
	j = 0;
	if (x == 0)
    4698:	1000021e 	bne	r2,zero,46a4 <print_dec+0x44>
		print_char(base, '0', rgb);
    469c:	01400c04 	movi	r5,48
    46a0:	00000206 	br	46ac <print_dec+0x4c>
	else
		if (x < 0) {
    46a4:	88000d0e 	bge	r17,zero,46dc <print_dec+0x7c>
			print_char(base, '-', rgb);
    46a8:	01400b44 	movi	r5,45
			if (r[i-1] == ',')
				i=i-1;
			for (j=i-1; j>=0; j--)
				print_char(base, (char)r[j], rgb);
		}
}
    46ac:	dfc00f17 	ldw	ra,60(sp)
    46b0:	df000e17 	ldw	fp,56(sp)
    46b4:	ddc00d17 	ldw	r23,52(sp)
    46b8:	dd800c17 	ldw	r22,48(sp)
    46bc:	dd400b17 	ldw	r21,44(sp)
    46c0:	dd000a17 	ldw	r20,40(sp)
    46c4:	dcc00917 	ldw	r19,36(sp)
    46c8:	dc800817 	ldw	r18,32(sp)
    46cc:	dc400717 	ldw	r17,28(sp)
    46d0:	dc000617 	ldw	r16,24(sp)
    46d4:	dec01004 	addi	sp,sp,64
	j = 0;
	if (x == 0)
		print_char(base, '0', rgb);
	else
		if (x < 0) {
			print_char(base, '-', rgb);
    46d8:	000459c1 	jmpi	459c <print_char>
    46dc:	202b883a 	mov	r21,r4
    46e0:	3827883a 	mov	r19,r7
			t = -x;
		}
		else {
			t = x;
    46e4:	2825883a 	mov	r18,r5
	alt_u64 t;
	int i, j;
	char r[20];

	i = 0;
	j = 0;
    46e8:	002f883a 	mov	r23,zero
void print_dec(alt_u16* base, alt_64 x, int rgb) {
	alt_u64 t;
	int i, j;
	char r[20];

	i = 0;
    46ec:	002d883a 	mov	r22,zero
			while (t > 0) {
				j++;
				r[i++] = 0x30 + (t % 10);
				t = t / 10;
				if ((j % 3) == 0)
					r[i++] = ',';
    46f0:	02000b04 	movi	r8,44
		}
		else {
			t = x;
			while (t > 0) {
				j++;
				r[i++] = 0x30 + (t % 10);
    46f4:	9009883a 	mov	r4,r18
    46f8:	880b883a 	mov	r5,r17
    46fc:	01800284 	movi	r6,10
    4700:	000f883a 	mov	r7,zero
    4704:	da000515 	stw	r8,20(sp)
    4708:	0004ff40 	call	4ff4 <__umoddi3>
    470c:	dda9883a 	add	r20,sp,r22
    4710:	10800c04 	addi	r2,r2,48
				t = t / 10;
    4714:	9009883a 	mov	r4,r18
    4718:	880b883a 	mov	r5,r17
		}
		else {
			t = x;
			while (t > 0) {
				j++;
				r[i++] = 0x30 + (t % 10);
    471c:	a0800005 	stb	r2,0(r20)
				t = t / 10;
    4720:	01800284 	movi	r6,10
    4724:	000f883a 	mov	r7,zero
    4728:	00049f80 	call	49f8 <__udivdi3>
			t = -x;
		}
		else {
			t = x;
			while (t > 0) {
				j++;
    472c:	bdc00044 	addi	r23,r23,1
				r[i++] = 0x30 + (t % 10);
				t = t / 10;
				if ((j % 3) == 0)
    4730:	014000c4 	movi	r5,3
    4734:	b809883a 	mov	r4,r23
		else {
			t = x;
			while (t > 0) {
				j++;
				r[i++] = 0x30 + (t % 10);
				t = t / 10;
    4738:	1039883a 	mov	fp,r2
    473c:	1829883a 	mov	r20,r3
    4740:	1025883a 	mov	r18,r2
    4744:	1823883a 	mov	r17,r3
				if ((j % 3) == 0)
    4748:	000563c0 	call	563c <__modsi3>
		}
		else {
			t = x;
			while (t > 0) {
				j++;
				r[i++] = 0x30 + (t % 10);
    474c:	b4000044 	addi	r16,r22,1
				t = t / 10;
				if ((j % 3) == 0)
    4750:	da000517 	ldw	r8,20(sp)
    4754:	1000031e 	bne	r2,zero,4764 <print_dec+0x104>
					r[i++] = ',';
    4758:	dc21883a 	add	r16,sp,r16
    475c:	82000005 	stb	r8,0(r16)
    4760:	b4000084 	addi	r16,r22,2
			print_char(base, '-', rgb);
			t = -x;
		}
		else {
			t = x;
			while (t > 0) {
    4764:	e528b03a 	or	r20,fp,r20
    4768:	a0000226 	beq	r20,zero,4774 <print_dec+0x114>
    476c:	802d883a 	mov	r22,r16
    4770:	003fe006 	br	46f4 <__alt_mem_sdram+0xfc0046f4>
				r[i++] = 0x30 + (t % 10);
				t = t / 10;
				if ((j % 3) == 0)
					r[i++] = ',';
			}
			if (r[i-1] == ',')
    4774:	80bfffc4 	addi	r2,r16,-1
    4778:	d887883a 	add	r3,sp,r2
    477c:	19000007 	ldb	r4,0(r3)
    4780:	00c00b04 	movi	r3,44
    4784:	20c0011e 	bne	r4,r3,478c <print_dec+0x12c>
				i=i-1;
    4788:	1021883a 	mov	r16,r2
			for (j=i-1; j>=0; j--)
    478c:	843fffc4 	addi	r16,r16,-1
    4790:	047fffc4 	movi	r17,-1
    4794:	84400726 	beq	r16,r17,47b4 <print_dec+0x154>
				print_char(base, (char)r[j], rgb);
    4798:	dc05883a 	add	r2,sp,r16
    479c:	11400007 	ldb	r5,0(r2)
    47a0:	980d883a 	mov	r6,r19
    47a4:	a809883a 	mov	r4,r21
    47a8:	000459c0 	call	459c <print_char>
				if ((j % 3) == 0)
					r[i++] = ',';
			}
			if (r[i-1] == ',')
				i=i-1;
			for (j=i-1; j>=0; j--)
    47ac:	843fffc4 	addi	r16,r16,-1
    47b0:	003ff806 	br	4794 <__alt_mem_sdram+0xfc004794>
				print_char(base, (char)r[j], rgb);
		}
}
    47b4:	dfc00f17 	ldw	ra,60(sp)
    47b8:	df000e17 	ldw	fp,56(sp)
    47bc:	ddc00d17 	ldw	r23,52(sp)
    47c0:	dd800c17 	ldw	r22,48(sp)
    47c4:	dd400b17 	ldw	r21,44(sp)
    47c8:	dd000a17 	ldw	r20,40(sp)
    47cc:	dcc00917 	ldw	r19,36(sp)
    47d0:	dc800817 	ldw	r18,32(sp)
    47d4:	dc400717 	ldw	r17,28(sp)
    47d8:	dc000617 	ldw	r16,24(sp)
    47dc:	dec01004 	addi	sp,sp,64
    47e0:	f800283a 	ret

000047e4 <crlf>:

void crlf(alt_u16* base) {
    47e4:	defffe04 	addi	sp,sp,-8
    47e8:	dc000015 	stw	r16,0(sp)
    47ec:	dfc00115 	stw	ra,4(sp)
    47f0:	2021883a 	mov	r16,r4
	remove_cursor(base);
    47f4:	00041940 	call	4194 <remove_cursor>
	ch_xpos = 0;
	if (ch_ypos >= ((YRES / 8) - 1)) {
    47f8:	d0a10217 	ldw	r2,-31736(gp)
		}
}

void crlf(alt_u16* base) {
	remove_cursor(base);
	ch_xpos = 0;
    47fc:	d0210315 	stw	zero,-31732(gp)
	if (ch_ypos >= ((YRES / 8) - 1)) {
    4800:	00c00e84 	movi	r3,58
    4804:	1880032e 	bgeu	r3,r2,4814 <crlf+0x30>
		scroll_up(base);
    4808:	8009883a 	mov	r4,r16
    480c:	00045180 	call	4518 <scroll_up>
    4810:	00000206 	br	481c <crlf+0x38>
	}
	else
		ch_ypos++;
    4814:	10800044 	addi	r2,r2,1
    4818:	d0a10215 	stw	r2,-31736(gp)
	plot_cursor(base);
    481c:	8009883a 	mov	r4,r16
}
    4820:	dfc00117 	ldw	ra,4(sp)
    4824:	dc000017 	ldw	r16,0(sp)
    4828:	dec00204 	addi	sp,sp,8
	if (ch_ypos >= ((YRES / 8) - 1)) {
		scroll_up(base);
	}
	else
		ch_ypos++;
	plot_cursor(base);
    482c:	00040fc1 	jmpi	40fc <plot_cursor>

00004830 <bringup_vga>:
}

void bringup_vga(alt_u16* base) {
	  IOWR(DMA_BASE, 0, 0);
    4830:	00a41014 	movui	r2,36928
    4834:	10000035 	stwio	zero,0(r2)
	  while ((IORD(DMA_BASE, 0) & 0x2) != 0);
    4838:	10c00037 	ldwio	r3,0(r2)
    483c:	18c0008c 	andi	r3,r3,2
    4840:	183ffd1e 	bne	r3,zero,4838 <__alt_mem_sdram+0xfc004838>
	  IOWR(DMA_BASE, 1, 1);
    4844:	00800044 	movi	r2,1
    4848:	00e41114 	movui	r3,36932
    484c:	18800035 	stwio	r2,0(r3)

	  IOWR(FRAME_READER_BASE, 0, 0);
    4850:	00e43014 	movui	r3,37056
    4854:	18000035 	stwio	zero,0(r3)
	  while ((IORD(FRAME_READER_BASE, 0) & 0x2) != 0);
    4858:	19400037 	ldwio	r5,0(r3)
    485c:	2940008c 	andi	r5,r5,2
    4860:	283ffd1e 	bne	r5,zero,4858 <__alt_mem_sdram+0xfc004858>
	  IOWR(FRAME_READER_BASE, 1, 1);
    4864:	00e43114 	movui	r3,37060
    4868:	18800035 	stwio	r2,0(r3)
	  IOWR(FRAME_READER_BASE, 2, (alt_u32)base);
    486c:	00a43214 	movui	r2,37064
    4870:	11000035 	stwio	r4,0(r2)

	  IOWR(VGA_OUT_BASE, 0, 0);
    4874:	00a42014 	movui	r2,36992
    4878:	10000035 	stwio	zero,0(r2)
	  while ((IORD(VGA_OUT_BASE, 0) & 0x6) != 0);
    487c:	10c00037 	ldwio	r3,0(r2)
    4880:	18c0018c 	andi	r3,r3,6
    4884:	183ffd1e 	bne	r3,zero,487c <__alt_mem_sdram+0xfc00487c>
	  IOWR(VGA_OUT_BASE, 1, 1);
    4888:	00800044 	movi	r2,1
    488c:	00e42114 	movui	r3,36996
    4890:	18800035 	stwio	r2,0(r3)

	  IOWR(FRAME_READER_BASE, 0, 1);
    4894:	00e43014 	movui	r3,37056
    4898:	18800035 	stwio	r2,0(r3)
	  IOWR(VGA_OUT_BASE, 0, 1);
    489c:	00e42014 	movui	r3,36992
    48a0:	18800035 	stwio	r2,0(r3)
    48a4:	f800283a 	ret

000048a8 <get_rand>:
alt_u16 *frame1_base, *frame2_base;

#include "vga_helper.h"


int get_rand(int x) {
    48a8:	defffe04 	addi	sp,sp,-8
    48ac:	dfc00115 	stw	ra,4(sp)
    48b0:	dc000015 	stw	r16,0(sp)
    48b4:	2021883a 	mov	r16,r4
	return (x * (rand() & 0xffff)) >> 16;
    48b8:	00057a80 	call	57a8 <rand>
    48bc:	800b883a 	mov	r5,r16
    48c0:	113fffcc 	andi	r4,r2,65535
    48c4:	000576c0 	call	576c <__mulsi3>
}
    48c8:	1005d43a 	srai	r2,r2,16
    48cc:	dfc00117 	ldw	ra,4(sp)
    48d0:	dc000017 	ldw	r16,0(sp)
    48d4:	dec00204 	addi	sp,sp,8
    48d8:	f800283a 	ret

000048dc <main>:

int main()
{
    48dc:	defff704 	addi	sp,sp,-36
  int x;
  alt_u16* frame_base;
  alt_putstr("Hello from Nios II!\n");
    48e0:	01000034 	movhi	r4,0
int get_rand(int x) {
	return (x * (rand() & 0xffff)) >> 16;
}

int main()
{
    48e4:	dc000215 	stw	r16,8(sp)
  int x;
  alt_u16* frame_base;
  alt_putstr("Hello from Nios II!\n");
    48e8:	2116da04 	addi	r4,r4,23400

  frame1_base = (alt_u16 *)SDRAM_BASE; //(alt_u16 *)malloc((XRES * YRES * 2) + 0x100);
  frame1_base += 0x80;
    48ec:	04010034 	movhi	r16,1024
    48f0:	84004004 	addi	r16,r16,256
int get_rand(int x) {
	return (x * (rand() & 0xffff)) >> 16;
}

int main()
{
    48f4:	dfc00815 	stw	ra,32(sp)
    48f8:	dc400315 	stw	r17,12(sp)
    48fc:	dd400715 	stw	r21,28(sp)
    4900:	dd000615 	stw	r20,24(sp)
    4904:	dcc00515 	stw	r19,20(sp)
    4908:	dc800415 	stw	r18,16(sp)
  int x;
  alt_u16* frame_base;
  alt_putstr("Hello from Nios II!\n");
    490c:	0005a200 	call	5a20 <alt_putstr>
  frame1_base = (alt_u16 *)SDRAM_BASE; //(alt_u16 *)malloc((XRES * YRES * 2) + 0x100);
  frame1_base += 0x80;

  frame_base = frame1_base;

  bringup_vga(frame_base);
    4910:	8009883a 	mov	r4,r16
  int x;
  alt_u16* frame_base;
  alt_putstr("Hello from Nios II!\n");

  frame1_base = (alt_u16 *)SDRAM_BASE; //(alt_u16 *)malloc((XRES * YRES * 2) + 0x100);
  frame1_base += 0x80;
    4914:	d4210415 	stw	r16,-31728(gp)

  frame_base = frame1_base;

  bringup_vga(frame_base);
    4918:	00048300 	call	4830 <bringup_vga>
  cursor_on(frame_base);
    491c:	8009883a 	mov	r4,r16
    4920:	00042180 	call	4218 <cursor_on>
  clear(frame_base);
    4924:	8009883a 	mov	r4,r16
    4928:	00043cc0 	call	43cc <clear>
  print_string(frame_base, "VGA Bringup Code (small)", _WHITE);
    492c:	01400034 	movhi	r5,0
    4930:	8009883a 	mov	r4,r16
    4934:	01bfffd4 	movui	r6,65535
    4938:	2956e004 	addi	r5,r5,23424
    493c:	000460c0 	call	460c <print_string>
  crlf(frame_base);
    4940:	8009883a 	mov	r4,r16
    4944:	00047e40 	call	47e4 <crlf>
    4948:	0021883a 	mov	r16,zero
    494c:	0023883a 	mov	r17,zero

  x = 0;
  while (1) {
	  usleep(100);
    4950:	01001904 	movi	r4,100
    4954:	0005a580 	call	5a58 <usleep>
	  print_dec(frame_base, x++, rand() & 0xffff);
    4958:	00057a80 	call	57a8 <rand>
    495c:	01010034 	movhi	r4,1024
    4960:	11ffffcc 	andi	r7,r2,65535
    4964:	800b883a 	mov	r5,r16
    4968:	880d883a 	mov	r6,r17
    496c:	21004004 	addi	r4,r4,256
    4970:	00046600 	call	4660 <print_dec>
	  print_string(frame_base, " ", _RED);
    4974:	01400034 	movhi	r5,0
    4978:	01010034 	movhi	r4,1024
    497c:	01be0014 	movui	r6,63488
    4980:	2956e704 	addi	r5,r5,23452
    4984:	21004004 	addi	r4,r4,256
    4988:	000460c0 	call	460c <print_string>
	  plot_line(frame_base, get_rand(XRES), get_rand(YRES), get_rand(XRES), get_rand(YRES), rand() & 0xffff);
    498c:	0100a004 	movi	r4,640
    4990:	00048a80 	call	48a8 <get_rand>
    4994:	01007804 	movi	r4,480
    4998:	1025883a 	mov	r18,r2
    499c:	00048a80 	call	48a8 <get_rand>
    49a0:	0100a004 	movi	r4,640
    49a4:	1027883a 	mov	r19,r2
    49a8:	00048a80 	call	48a8 <get_rand>
    49ac:	01007804 	movi	r4,480
    49b0:	1029883a 	mov	r20,r2
    49b4:	00048a80 	call	48a8 <get_rand>
    49b8:	102b883a 	mov	r21,r2
    49bc:	00057a80 	call	57a8 <rand>
    49c0:	10bfffcc 	andi	r2,r2,65535
    49c4:	01010034 	movhi	r4,1024
    49c8:	d8800115 	stw	r2,4(sp)
    49cc:	dd400015 	stw	r21,0(sp)
    49d0:	a00f883a 	mov	r7,r20
    49d4:	980d883a 	mov	r6,r19
    49d8:	900b883a 	mov	r5,r18
    49dc:	21004004 	addi	r4,r4,256
    49e0:	000422c0 	call	422c <plot_line>
    49e4:	80800044 	addi	r2,r16,1
    49e8:	1407803a 	cmpltu	r3,r2,r16
    49ec:	1c63883a 	add	r17,r3,r17
    49f0:	1021883a 	mov	r16,r2
    49f4:	003fd606 	br	4950 <__alt_mem_sdram+0xfc004950>

000049f8 <__udivdi3>:
    49f8:	defff404 	addi	sp,sp,-48
    49fc:	dcc00515 	stw	r19,20(sp)
    4a00:	dc000215 	stw	r16,8(sp)
    4a04:	dfc00b15 	stw	ra,44(sp)
    4a08:	df000a15 	stw	fp,40(sp)
    4a0c:	ddc00915 	stw	r23,36(sp)
    4a10:	dd800815 	stw	r22,32(sp)
    4a14:	dd400715 	stw	r21,28(sp)
    4a18:	dd000615 	stw	r20,24(sp)
    4a1c:	dc800415 	stw	r18,16(sp)
    4a20:	dc400315 	stw	r17,12(sp)
    4a24:	2027883a 	mov	r19,r4
    4a28:	2821883a 	mov	r16,r5
    4a2c:	3800461e 	bne	r7,zero,4b48 <__udivdi3+0x150>
    4a30:	3023883a 	mov	r17,r6
    4a34:	2025883a 	mov	r18,r4
    4a38:	2980572e 	bgeu	r5,r6,4b98 <__udivdi3+0x1a0>
    4a3c:	00bfffd4 	movui	r2,65535
    4a40:	282d883a 	mov	r22,r5
    4a44:	1180b236 	bltu	r2,r6,4d10 <__udivdi3+0x318>
    4a48:	00803fc4 	movi	r2,255
    4a4c:	1185803a 	cmpltu	r2,r2,r6
    4a50:	100490fa 	slli	r2,r2,3
    4a54:	3086d83a 	srl	r3,r6,r2
    4a58:	01000034 	movhi	r4,0
    4a5c:	2116e804 	addi	r4,r4,23456
    4a60:	20c7883a 	add	r3,r4,r3
    4a64:	18c00003 	ldbu	r3,0(r3)
    4a68:	1885883a 	add	r2,r3,r2
    4a6c:	00c00804 	movi	r3,32
    4a70:	1887c83a 	sub	r3,r3,r2
    4a74:	18000526 	beq	r3,zero,4a8c <__udivdi3+0x94>
    4a78:	80e0983a 	sll	r16,r16,r3
    4a7c:	9884d83a 	srl	r2,r19,r2
    4a80:	30e2983a 	sll	r17,r6,r3
    4a84:	98e4983a 	sll	r18,r19,r3
    4a88:	142cb03a 	or	r22,r2,r16
    4a8c:	882ad43a 	srli	r21,r17,16
    4a90:	b009883a 	mov	r4,r22
    4a94:	8d3fffcc 	andi	r20,r17,65535
    4a98:	a80b883a 	mov	r5,r21
    4a9c:	00057140 	call	5714 <__umodsi3>
    4aa0:	b009883a 	mov	r4,r22
    4aa4:	a80b883a 	mov	r5,r21
    4aa8:	1027883a 	mov	r19,r2
    4aac:	00056b00 	call	56b0 <__udivsi3>
    4ab0:	100b883a 	mov	r5,r2
    4ab4:	a009883a 	mov	r4,r20
    4ab8:	102d883a 	mov	r22,r2
    4abc:	000576c0 	call	576c <__mulsi3>
    4ac0:	9826943a 	slli	r19,r19,16
    4ac4:	9006d43a 	srli	r3,r18,16
    4ac8:	1cc6b03a 	or	r3,r3,r19
    4acc:	1880052e 	bgeu	r3,r2,4ae4 <__udivdi3+0xec>
    4ad0:	1c47883a 	add	r3,r3,r17
    4ad4:	b13fffc4 	addi	r4,r22,-1
    4ad8:	1c400136 	bltu	r3,r17,4ae0 <__udivdi3+0xe8>
    4adc:	18814236 	bltu	r3,r2,4fe8 <__udivdi3+0x5f0>
    4ae0:	202d883a 	mov	r22,r4
    4ae4:	18a1c83a 	sub	r16,r3,r2
    4ae8:	8009883a 	mov	r4,r16
    4aec:	a80b883a 	mov	r5,r21
    4af0:	00057140 	call	5714 <__umodsi3>
    4af4:	1027883a 	mov	r19,r2
    4af8:	8009883a 	mov	r4,r16
    4afc:	a80b883a 	mov	r5,r21
    4b00:	9826943a 	slli	r19,r19,16
    4b04:	00056b00 	call	56b0 <__udivsi3>
    4b08:	100b883a 	mov	r5,r2
    4b0c:	a009883a 	mov	r4,r20
    4b10:	94bfffcc 	andi	r18,r18,65535
    4b14:	1021883a 	mov	r16,r2
    4b18:	94e4b03a 	or	r18,r18,r19
    4b1c:	000576c0 	call	576c <__mulsi3>
    4b20:	9080052e 	bgeu	r18,r2,4b38 <__udivdi3+0x140>
    4b24:	8ca5883a 	add	r18,r17,r18
    4b28:	80ffffc4 	addi	r3,r16,-1
    4b2c:	94410c36 	bltu	r18,r17,4f60 <__udivdi3+0x568>
    4b30:	90810b2e 	bgeu	r18,r2,4f60 <__udivdi3+0x568>
    4b34:	843fff84 	addi	r16,r16,-2
    4b38:	b004943a 	slli	r2,r22,16
    4b3c:	0007883a 	mov	r3,zero
    4b40:	1404b03a 	or	r2,r2,r16
    4b44:	00005e06 	br	4cc0 <__udivdi3+0x2c8>
    4b48:	29c05b36 	bltu	r5,r7,4cb8 <__udivdi3+0x2c0>
    4b4c:	00bfffd4 	movui	r2,65535
    4b50:	11c0672e 	bgeu	r2,r7,4cf0 <__udivdi3+0x2f8>
    4b54:	00804034 	movhi	r2,256
    4b58:	10bfffc4 	addi	r2,r2,-1
    4b5c:	11c10a36 	bltu	r2,r7,4f88 <__udivdi3+0x590>
    4b60:	00800404 	movi	r2,16
    4b64:	3886d83a 	srl	r3,r7,r2
    4b68:	01000034 	movhi	r4,0
    4b6c:	2116e804 	addi	r4,r4,23456
    4b70:	20c7883a 	add	r3,r4,r3
    4b74:	18c00003 	ldbu	r3,0(r3)
    4b78:	05c00804 	movi	r23,32
    4b7c:	1885883a 	add	r2,r3,r2
    4b80:	b8afc83a 	sub	r23,r23,r2
    4b84:	b800671e 	bne	r23,zero,4d24 <__udivdi3+0x32c>
    4b88:	3c010536 	bltu	r7,r16,4fa0 <__udivdi3+0x5a8>
    4b8c:	9985403a 	cmpgeu	r2,r19,r6
    4b90:	0007883a 	mov	r3,zero
    4b94:	00004a06 	br	4cc0 <__udivdi3+0x2c8>
    4b98:	3000041e 	bne	r6,zero,4bac <__udivdi3+0x1b4>
    4b9c:	000b883a 	mov	r5,zero
    4ba0:	01000044 	movi	r4,1
    4ba4:	00056b00 	call	56b0 <__udivsi3>
    4ba8:	1023883a 	mov	r17,r2
    4bac:	00bfffd4 	movui	r2,65535
    4bb0:	1440532e 	bgeu	r2,r17,4d00 <__udivdi3+0x308>
    4bb4:	00804034 	movhi	r2,256
    4bb8:	10bfffc4 	addi	r2,r2,-1
    4bbc:	1440f436 	bltu	r2,r17,4f90 <__udivdi3+0x598>
    4bc0:	00800404 	movi	r2,16
    4bc4:	8886d83a 	srl	r3,r17,r2
    4bc8:	01000034 	movhi	r4,0
    4bcc:	2116e804 	addi	r4,r4,23456
    4bd0:	20c7883a 	add	r3,r4,r3
    4bd4:	18c00003 	ldbu	r3,0(r3)
    4bd8:	1885883a 	add	r2,r3,r2
    4bdc:	00c00804 	movi	r3,32
    4be0:	1887c83a 	sub	r3,r3,r2
    4be4:	1800a51e 	bne	r3,zero,4e7c <__udivdi3+0x484>
    4be8:	882ad43a 	srli	r21,r17,16
    4bec:	8461c83a 	sub	r16,r16,r17
    4bf0:	8d3fffcc 	andi	r20,r17,65535
    4bf4:	00c00044 	movi	r3,1
    4bf8:	a80b883a 	mov	r5,r21
    4bfc:	8009883a 	mov	r4,r16
    4c00:	d8c00115 	stw	r3,4(sp)
    4c04:	00057140 	call	5714 <__umodsi3>
    4c08:	a80b883a 	mov	r5,r21
    4c0c:	8009883a 	mov	r4,r16
    4c10:	1027883a 	mov	r19,r2
    4c14:	00056b00 	call	56b0 <__udivsi3>
    4c18:	a00b883a 	mov	r5,r20
    4c1c:	1009883a 	mov	r4,r2
    4c20:	102d883a 	mov	r22,r2
    4c24:	000576c0 	call	576c <__mulsi3>
    4c28:	9826943a 	slli	r19,r19,16
    4c2c:	900ed43a 	srli	r7,r18,16
    4c30:	d8c00117 	ldw	r3,4(sp)
    4c34:	3cceb03a 	or	r7,r7,r19
    4c38:	3880052e 	bgeu	r7,r2,4c50 <__udivdi3+0x258>
    4c3c:	3c4f883a 	add	r7,r7,r17
    4c40:	b13fffc4 	addi	r4,r22,-1
    4c44:	3c400136 	bltu	r7,r17,4c4c <__udivdi3+0x254>
    4c48:	3880e436 	bltu	r7,r2,4fdc <__udivdi3+0x5e4>
    4c4c:	202d883a 	mov	r22,r4
    4c50:	38a1c83a 	sub	r16,r7,r2
    4c54:	8009883a 	mov	r4,r16
    4c58:	a80b883a 	mov	r5,r21
    4c5c:	d8c00115 	stw	r3,4(sp)
    4c60:	00057140 	call	5714 <__umodsi3>
    4c64:	1027883a 	mov	r19,r2
    4c68:	8009883a 	mov	r4,r16
    4c6c:	a80b883a 	mov	r5,r21
    4c70:	9826943a 	slli	r19,r19,16
    4c74:	00056b00 	call	56b0 <__udivsi3>
    4c78:	a00b883a 	mov	r5,r20
    4c7c:	1009883a 	mov	r4,r2
    4c80:	94bfffcc 	andi	r18,r18,65535
    4c84:	1021883a 	mov	r16,r2
    4c88:	94e4b03a 	or	r18,r18,r19
    4c8c:	000576c0 	call	576c <__mulsi3>
    4c90:	d8c00117 	ldw	r3,4(sp)
    4c94:	9080052e 	bgeu	r18,r2,4cac <__udivdi3+0x2b4>
    4c98:	8ca5883a 	add	r18,r17,r18
    4c9c:	813fffc4 	addi	r4,r16,-1
    4ca0:	9440ad36 	bltu	r18,r17,4f58 <__udivdi3+0x560>
    4ca4:	9080ac2e 	bgeu	r18,r2,4f58 <__udivdi3+0x560>
    4ca8:	843fff84 	addi	r16,r16,-2
    4cac:	b004943a 	slli	r2,r22,16
    4cb0:	1404b03a 	or	r2,r2,r16
    4cb4:	00000206 	br	4cc0 <__udivdi3+0x2c8>
    4cb8:	0007883a 	mov	r3,zero
    4cbc:	0005883a 	mov	r2,zero
    4cc0:	dfc00b17 	ldw	ra,44(sp)
    4cc4:	df000a17 	ldw	fp,40(sp)
    4cc8:	ddc00917 	ldw	r23,36(sp)
    4ccc:	dd800817 	ldw	r22,32(sp)
    4cd0:	dd400717 	ldw	r21,28(sp)
    4cd4:	dd000617 	ldw	r20,24(sp)
    4cd8:	dcc00517 	ldw	r19,20(sp)
    4cdc:	dc800417 	ldw	r18,16(sp)
    4ce0:	dc400317 	ldw	r17,12(sp)
    4ce4:	dc000217 	ldw	r16,8(sp)
    4ce8:	dec00c04 	addi	sp,sp,48
    4cec:	f800283a 	ret
    4cf0:	00803fc4 	movi	r2,255
    4cf4:	11c5803a 	cmpltu	r2,r2,r7
    4cf8:	100490fa 	slli	r2,r2,3
    4cfc:	003f9906 	br	4b64 <__alt_mem_sdram+0xfc004b64>
    4d00:	00803fc4 	movi	r2,255
    4d04:	1445803a 	cmpltu	r2,r2,r17
    4d08:	100490fa 	slli	r2,r2,3
    4d0c:	003fad06 	br	4bc4 <__alt_mem_sdram+0xfc004bc4>
    4d10:	00804034 	movhi	r2,256
    4d14:	10bfffc4 	addi	r2,r2,-1
    4d18:	11809f36 	bltu	r2,r6,4f98 <__udivdi3+0x5a0>
    4d1c:	00800404 	movi	r2,16
    4d20:	003f4c06 	br	4a54 <__alt_mem_sdram+0xfc004a54>
    4d24:	3dce983a 	sll	r7,r7,r23
    4d28:	30b8d83a 	srl	fp,r6,r2
    4d2c:	80a2d83a 	srl	r17,r16,r2
    4d30:	35cc983a 	sll	r6,r6,r23
    4d34:	3f38b03a 	or	fp,r7,fp
    4d38:	e024d43a 	srli	r18,fp,16
    4d3c:	9884d83a 	srl	r2,r19,r2
    4d40:	85e0983a 	sll	r16,r16,r23
    4d44:	8809883a 	mov	r4,r17
    4d48:	900b883a 	mov	r5,r18
    4d4c:	d9800015 	stw	r6,0(sp)
    4d50:	1420b03a 	or	r16,r2,r16
    4d54:	00057140 	call	5714 <__umodsi3>
    4d58:	900b883a 	mov	r5,r18
    4d5c:	8809883a 	mov	r4,r17
    4d60:	1029883a 	mov	r20,r2
    4d64:	e5bfffcc 	andi	r22,fp,65535
    4d68:	00056b00 	call	56b0 <__udivsi3>
    4d6c:	100b883a 	mov	r5,r2
    4d70:	b009883a 	mov	r4,r22
    4d74:	102b883a 	mov	r21,r2
    4d78:	000576c0 	call	576c <__mulsi3>
    4d7c:	a028943a 	slli	r20,r20,16
    4d80:	8006d43a 	srli	r3,r16,16
    4d84:	1d06b03a 	or	r3,r3,r20
    4d88:	1880042e 	bgeu	r3,r2,4d9c <__udivdi3+0x3a4>
    4d8c:	1f07883a 	add	r3,r3,fp
    4d90:	a93fffc4 	addi	r4,r21,-1
    4d94:	1f00892e 	bgeu	r3,fp,4fbc <__udivdi3+0x5c4>
    4d98:	202b883a 	mov	r21,r4
    4d9c:	18a3c83a 	sub	r17,r3,r2
    4da0:	8809883a 	mov	r4,r17
    4da4:	900b883a 	mov	r5,r18
    4da8:	00057140 	call	5714 <__umodsi3>
    4dac:	1029883a 	mov	r20,r2
    4db0:	8809883a 	mov	r4,r17
    4db4:	900b883a 	mov	r5,r18
    4db8:	a028943a 	slli	r20,r20,16
    4dbc:	00056b00 	call	56b0 <__udivsi3>
    4dc0:	100b883a 	mov	r5,r2
    4dc4:	b009883a 	mov	r4,r22
    4dc8:	843fffcc 	andi	r16,r16,65535
    4dcc:	1023883a 	mov	r17,r2
    4dd0:	8520b03a 	or	r16,r16,r20
    4dd4:	000576c0 	call	576c <__mulsi3>
    4dd8:	8080042e 	bgeu	r16,r2,4dec <__udivdi3+0x3f4>
    4ddc:	8721883a 	add	r16,r16,fp
    4de0:	88ffffc4 	addi	r3,r17,-1
    4de4:	8700712e 	bgeu	r16,fp,4fac <__udivdi3+0x5b4>
    4de8:	1823883a 	mov	r17,r3
    4dec:	a80e943a 	slli	r7,r21,16
    4df0:	d8c00017 	ldw	r3,0(sp)
    4df4:	80a1c83a 	sub	r16,r16,r2
    4df8:	3c64b03a 	or	r18,r7,r17
    4dfc:	1d3fffcc 	andi	r20,r3,65535
    4e00:	9022d43a 	srli	r17,r18,16
    4e04:	95bfffcc 	andi	r22,r18,65535
    4e08:	a00b883a 	mov	r5,r20
    4e0c:	b009883a 	mov	r4,r22
    4e10:	182ad43a 	srli	r21,r3,16
    4e14:	000576c0 	call	576c <__mulsi3>
    4e18:	a00b883a 	mov	r5,r20
    4e1c:	8809883a 	mov	r4,r17
    4e20:	1039883a 	mov	fp,r2
    4e24:	000576c0 	call	576c <__mulsi3>
    4e28:	8809883a 	mov	r4,r17
    4e2c:	a80b883a 	mov	r5,r21
    4e30:	1029883a 	mov	r20,r2
    4e34:	000576c0 	call	576c <__mulsi3>
    4e38:	a80b883a 	mov	r5,r21
    4e3c:	b009883a 	mov	r4,r22
    4e40:	1023883a 	mov	r17,r2
    4e44:	000576c0 	call	576c <__mulsi3>
    4e48:	e006d43a 	srli	r3,fp,16
    4e4c:	1505883a 	add	r2,r2,r20
    4e50:	1887883a 	add	r3,r3,r2
    4e54:	1d00022e 	bgeu	r3,r20,4e60 <__udivdi3+0x468>
    4e58:	00800074 	movhi	r2,1
    4e5c:	88a3883a 	add	r17,r17,r2
    4e60:	1804d43a 	srli	r2,r3,16
    4e64:	1463883a 	add	r17,r2,r17
    4e68:	84404436 	bltu	r16,r17,4f7c <__udivdi3+0x584>
    4e6c:	84403e26 	beq	r16,r17,4f68 <__udivdi3+0x570>
    4e70:	9005883a 	mov	r2,r18
    4e74:	0007883a 	mov	r3,zero
    4e78:	003f9106 	br	4cc0 <__alt_mem_sdram+0xfc004cc0>
    4e7c:	88e2983a 	sll	r17,r17,r3
    4e80:	80aed83a 	srl	r23,r16,r2
    4e84:	80e0983a 	sll	r16,r16,r3
    4e88:	882ad43a 	srli	r21,r17,16
    4e8c:	9884d83a 	srl	r2,r19,r2
    4e90:	b809883a 	mov	r4,r23
    4e94:	a80b883a 	mov	r5,r21
    4e98:	98e4983a 	sll	r18,r19,r3
    4e9c:	142cb03a 	or	r22,r2,r16
    4ea0:	00057140 	call	5714 <__umodsi3>
    4ea4:	b809883a 	mov	r4,r23
    4ea8:	a80b883a 	mov	r5,r21
    4eac:	1027883a 	mov	r19,r2
    4eb0:	8d3fffcc 	andi	r20,r17,65535
    4eb4:	00056b00 	call	56b0 <__udivsi3>
    4eb8:	a009883a 	mov	r4,r20
    4ebc:	100b883a 	mov	r5,r2
    4ec0:	102f883a 	mov	r23,r2
    4ec4:	000576c0 	call	576c <__mulsi3>
    4ec8:	9826943a 	slli	r19,r19,16
    4ecc:	b008d43a 	srli	r4,r22,16
    4ed0:	24c8b03a 	or	r4,r4,r19
    4ed4:	2080062e 	bgeu	r4,r2,4ef0 <__udivdi3+0x4f8>
    4ed8:	2449883a 	add	r4,r4,r17
    4edc:	b8ffffc4 	addi	r3,r23,-1
    4ee0:	24403c36 	bltu	r4,r17,4fd4 <__udivdi3+0x5dc>
    4ee4:	20803b2e 	bgeu	r4,r2,4fd4 <__udivdi3+0x5dc>
    4ee8:	bdffff84 	addi	r23,r23,-2
    4eec:	2449883a 	add	r4,r4,r17
    4ef0:	20a1c83a 	sub	r16,r4,r2
    4ef4:	a80b883a 	mov	r5,r21
    4ef8:	8009883a 	mov	r4,r16
    4efc:	00057140 	call	5714 <__umodsi3>
    4f00:	a80b883a 	mov	r5,r21
    4f04:	8009883a 	mov	r4,r16
    4f08:	1027883a 	mov	r19,r2
    4f0c:	00056b00 	call	56b0 <__udivsi3>
    4f10:	a009883a 	mov	r4,r20
    4f14:	100b883a 	mov	r5,r2
    4f18:	9826943a 	slli	r19,r19,16
    4f1c:	1039883a 	mov	fp,r2
    4f20:	000576c0 	call	576c <__mulsi3>
    4f24:	b13fffcc 	andi	r4,r22,65535
    4f28:	24c8b03a 	or	r4,r4,r19
    4f2c:	2080062e 	bgeu	r4,r2,4f48 <__udivdi3+0x550>
    4f30:	2449883a 	add	r4,r4,r17
    4f34:	e0ffffc4 	addi	r3,fp,-1
    4f38:	24402436 	bltu	r4,r17,4fcc <__udivdi3+0x5d4>
    4f3c:	2080232e 	bgeu	r4,r2,4fcc <__udivdi3+0x5d4>
    4f40:	e73fff84 	addi	fp,fp,-2
    4f44:	2449883a 	add	r4,r4,r17
    4f48:	b82e943a 	slli	r23,r23,16
    4f4c:	20a1c83a 	sub	r16,r4,r2
    4f50:	bf06b03a 	or	r3,r23,fp
    4f54:	003f2806 	br	4bf8 <__alt_mem_sdram+0xfc004bf8>
    4f58:	2021883a 	mov	r16,r4
    4f5c:	003f5306 	br	4cac <__alt_mem_sdram+0xfc004cac>
    4f60:	1821883a 	mov	r16,r3
    4f64:	003ef406 	br	4b38 <__alt_mem_sdram+0xfc004b38>
    4f68:	1806943a 	slli	r3,r3,16
    4f6c:	9de6983a 	sll	r19,r19,r23
    4f70:	e73fffcc 	andi	fp,fp,65535
    4f74:	1f07883a 	add	r3,r3,fp
    4f78:	98ffbd2e 	bgeu	r19,r3,4e70 <__alt_mem_sdram+0xfc004e70>
    4f7c:	90bfffc4 	addi	r2,r18,-1
    4f80:	0007883a 	mov	r3,zero
    4f84:	003f4e06 	br	4cc0 <__alt_mem_sdram+0xfc004cc0>
    4f88:	00800604 	movi	r2,24
    4f8c:	003ef506 	br	4b64 <__alt_mem_sdram+0xfc004b64>
    4f90:	00800604 	movi	r2,24
    4f94:	003f0b06 	br	4bc4 <__alt_mem_sdram+0xfc004bc4>
    4f98:	00800604 	movi	r2,24
    4f9c:	003ead06 	br	4a54 <__alt_mem_sdram+0xfc004a54>
    4fa0:	0007883a 	mov	r3,zero
    4fa4:	00800044 	movi	r2,1
    4fa8:	003f4506 	br	4cc0 <__alt_mem_sdram+0xfc004cc0>
    4fac:	80bf8e2e 	bgeu	r16,r2,4de8 <__alt_mem_sdram+0xfc004de8>
    4fb0:	8c7fff84 	addi	r17,r17,-2
    4fb4:	8721883a 	add	r16,r16,fp
    4fb8:	003f8c06 	br	4dec <__alt_mem_sdram+0xfc004dec>
    4fbc:	18bf762e 	bgeu	r3,r2,4d98 <__alt_mem_sdram+0xfc004d98>
    4fc0:	ad7fff84 	addi	r21,r21,-2
    4fc4:	1f07883a 	add	r3,r3,fp
    4fc8:	003f7406 	br	4d9c <__alt_mem_sdram+0xfc004d9c>
    4fcc:	1839883a 	mov	fp,r3
    4fd0:	003fdd06 	br	4f48 <__alt_mem_sdram+0xfc004f48>
    4fd4:	182f883a 	mov	r23,r3
    4fd8:	003fc506 	br	4ef0 <__alt_mem_sdram+0xfc004ef0>
    4fdc:	b5bfff84 	addi	r22,r22,-2
    4fe0:	3c4f883a 	add	r7,r7,r17
    4fe4:	003f1a06 	br	4c50 <__alt_mem_sdram+0xfc004c50>
    4fe8:	b5bfff84 	addi	r22,r22,-2
    4fec:	1c47883a 	add	r3,r3,r17
    4ff0:	003ebc06 	br	4ae4 <__alt_mem_sdram+0xfc004ae4>

00004ff4 <__umoddi3>:
    4ff4:	defff304 	addi	sp,sp,-52
    4ff8:	df000b15 	stw	fp,44(sp)
    4ffc:	dc400415 	stw	r17,16(sp)
    5000:	dc000315 	stw	r16,12(sp)
    5004:	dfc00c15 	stw	ra,48(sp)
    5008:	ddc00a15 	stw	r23,40(sp)
    500c:	dd800915 	stw	r22,36(sp)
    5010:	dd400815 	stw	r21,32(sp)
    5014:	dd000715 	stw	r20,28(sp)
    5018:	dcc00615 	stw	r19,24(sp)
    501c:	dc800515 	stw	r18,20(sp)
    5020:	2021883a 	mov	r16,r4
    5024:	2823883a 	mov	r17,r5
    5028:	2839883a 	mov	fp,r5
    502c:	3800401e 	bne	r7,zero,5130 <__umoddi3+0x13c>
    5030:	3027883a 	mov	r19,r6
    5034:	2029883a 	mov	r20,r4
    5038:	2980552e 	bgeu	r5,r6,5190 <__umoddi3+0x19c>
    503c:	00bfffd4 	movui	r2,65535
    5040:	1180a236 	bltu	r2,r6,52cc <__umoddi3+0x2d8>
    5044:	01003fc4 	movi	r4,255
    5048:	2189803a 	cmpltu	r4,r4,r6
    504c:	200890fa 	slli	r4,r4,3
    5050:	3104d83a 	srl	r2,r6,r4
    5054:	00c00034 	movhi	r3,0
    5058:	18d6e804 	addi	r3,r3,23456
    505c:	1885883a 	add	r2,r3,r2
    5060:	10c00003 	ldbu	r3,0(r2)
    5064:	00800804 	movi	r2,32
    5068:	1909883a 	add	r4,r3,r4
    506c:	1125c83a 	sub	r18,r2,r4
    5070:	90000526 	beq	r18,zero,5088 <__umoddi3+0x94>
    5074:	8ca2983a 	sll	r17,r17,r18
    5078:	8108d83a 	srl	r4,r16,r4
    507c:	34a6983a 	sll	r19,r6,r18
    5080:	84a8983a 	sll	r20,r16,r18
    5084:	2478b03a 	or	fp,r4,r17
    5088:	982cd43a 	srli	r22,r19,16
    508c:	e009883a 	mov	r4,fp
    5090:	9dffffcc 	andi	r23,r19,65535
    5094:	b00b883a 	mov	r5,r22
    5098:	00057140 	call	5714 <__umodsi3>
    509c:	b00b883a 	mov	r5,r22
    50a0:	e009883a 	mov	r4,fp
    50a4:	102b883a 	mov	r21,r2
    50a8:	00056b00 	call	56b0 <__udivsi3>
    50ac:	100b883a 	mov	r5,r2
    50b0:	b809883a 	mov	r4,r23
    50b4:	000576c0 	call	576c <__mulsi3>
    50b8:	a82a943a 	slli	r21,r21,16
    50bc:	a006d43a 	srli	r3,r20,16
    50c0:	1d46b03a 	or	r3,r3,r21
    50c4:	1880032e 	bgeu	r3,r2,50d4 <__umoddi3+0xe0>
    50c8:	1cc7883a 	add	r3,r3,r19
    50cc:	1cc00136 	bltu	r3,r19,50d4 <__umoddi3+0xe0>
    50d0:	18813136 	bltu	r3,r2,5598 <__umoddi3+0x5a4>
    50d4:	18a1c83a 	sub	r16,r3,r2
    50d8:	b00b883a 	mov	r5,r22
    50dc:	8009883a 	mov	r4,r16
    50e0:	00057140 	call	5714 <__umodsi3>
    50e4:	b00b883a 	mov	r5,r22
    50e8:	8009883a 	mov	r4,r16
    50ec:	1023883a 	mov	r17,r2
    50f0:	00056b00 	call	56b0 <__udivsi3>
    50f4:	100b883a 	mov	r5,r2
    50f8:	b809883a 	mov	r4,r23
    50fc:	8822943a 	slli	r17,r17,16
    5100:	000576c0 	call	576c <__mulsi3>
    5104:	a0ffffcc 	andi	r3,r20,65535
    5108:	1c46b03a 	or	r3,r3,r17
    510c:	1880042e 	bgeu	r3,r2,5120 <__umoddi3+0x12c>
    5110:	1cc7883a 	add	r3,r3,r19
    5114:	1cc00236 	bltu	r3,r19,5120 <__umoddi3+0x12c>
    5118:	1880012e 	bgeu	r3,r2,5120 <__umoddi3+0x12c>
    511c:	1cc7883a 	add	r3,r3,r19
    5120:	1885c83a 	sub	r2,r3,r2
    5124:	1484d83a 	srl	r2,r2,r18
    5128:	0007883a 	mov	r3,zero
    512c:	00005306 	br	527c <__umoddi3+0x288>
    5130:	29c05036 	bltu	r5,r7,5274 <__umoddi3+0x280>
    5134:	00bfffd4 	movui	r2,65535
    5138:	11c05c2e 	bgeu	r2,r7,52ac <__umoddi3+0x2b8>
    513c:	00804034 	movhi	r2,256
    5140:	10bfffc4 	addi	r2,r2,-1
    5144:	11c10636 	bltu	r2,r7,5560 <__umoddi3+0x56c>
    5148:	01000404 	movi	r4,16
    514c:	3904d83a 	srl	r2,r7,r4
    5150:	00c00034 	movhi	r3,0
    5154:	18d6e804 	addi	r3,r3,23456
    5158:	1885883a 	add	r2,r3,r2
    515c:	14c00003 	ldbu	r19,0(r2)
    5160:	00c00804 	movi	r3,32
    5164:	9927883a 	add	r19,r19,r4
    5168:	1ce9c83a 	sub	r20,r3,r19
    516c:	a0005c1e 	bne	r20,zero,52e0 <__umoddi3+0x2ec>
    5170:	3c400136 	bltu	r7,r17,5178 <__umoddi3+0x184>
    5174:	81810a36 	bltu	r16,r6,55a0 <__umoddi3+0x5ac>
    5178:	8185c83a 	sub	r2,r16,r6
    517c:	89e3c83a 	sub	r17,r17,r7
    5180:	8089803a 	cmpltu	r4,r16,r2
    5184:	8939c83a 	sub	fp,r17,r4
    5188:	e007883a 	mov	r3,fp
    518c:	00003b06 	br	527c <__umoddi3+0x288>
    5190:	3000041e 	bne	r6,zero,51a4 <__umoddi3+0x1b0>
    5194:	000b883a 	mov	r5,zero
    5198:	01000044 	movi	r4,1
    519c:	00056b00 	call	56b0 <__udivsi3>
    51a0:	1027883a 	mov	r19,r2
    51a4:	00bfffd4 	movui	r2,65535
    51a8:	14c0442e 	bgeu	r2,r19,52bc <__umoddi3+0x2c8>
    51ac:	00804034 	movhi	r2,256
    51b0:	10bfffc4 	addi	r2,r2,-1
    51b4:	14c0ec36 	bltu	r2,r19,5568 <__umoddi3+0x574>
    51b8:	00800404 	movi	r2,16
    51bc:	9886d83a 	srl	r3,r19,r2
    51c0:	01000034 	movhi	r4,0
    51c4:	2116e804 	addi	r4,r4,23456
    51c8:	20c7883a 	add	r3,r4,r3
    51cc:	18c00003 	ldbu	r3,0(r3)
    51d0:	1887883a 	add	r3,r3,r2
    51d4:	00800804 	movi	r2,32
    51d8:	10e5c83a 	sub	r18,r2,r3
    51dc:	9000ab1e 	bne	r18,zero,548c <__umoddi3+0x498>
    51e0:	982cd43a 	srli	r22,r19,16
    51e4:	8ce3c83a 	sub	r17,r17,r19
    51e8:	9dffffcc 	andi	r23,r19,65535
    51ec:	b00b883a 	mov	r5,r22
    51f0:	8809883a 	mov	r4,r17
    51f4:	00057140 	call	5714 <__umodsi3>
    51f8:	b00b883a 	mov	r5,r22
    51fc:	8809883a 	mov	r4,r17
    5200:	102b883a 	mov	r21,r2
    5204:	00056b00 	call	56b0 <__udivsi3>
    5208:	b80b883a 	mov	r5,r23
    520c:	1009883a 	mov	r4,r2
    5210:	000576c0 	call	576c <__mulsi3>
    5214:	a82a943a 	slli	r21,r21,16
    5218:	a006d43a 	srli	r3,r20,16
    521c:	1d46b03a 	or	r3,r3,r21
    5220:	1880042e 	bgeu	r3,r2,5234 <__umoddi3+0x240>
    5224:	1cc7883a 	add	r3,r3,r19
    5228:	1cc00236 	bltu	r3,r19,5234 <__umoddi3+0x240>
    522c:	1880012e 	bgeu	r3,r2,5234 <__umoddi3+0x240>
    5230:	1cc7883a 	add	r3,r3,r19
    5234:	18a1c83a 	sub	r16,r3,r2
    5238:	b00b883a 	mov	r5,r22
    523c:	8009883a 	mov	r4,r16
    5240:	00057140 	call	5714 <__umodsi3>
    5244:	1023883a 	mov	r17,r2
    5248:	b00b883a 	mov	r5,r22
    524c:	8009883a 	mov	r4,r16
    5250:	00056b00 	call	56b0 <__udivsi3>
    5254:	8822943a 	slli	r17,r17,16
    5258:	b80b883a 	mov	r5,r23
    525c:	1009883a 	mov	r4,r2
    5260:	000576c0 	call	576c <__mulsi3>
    5264:	a53fffcc 	andi	r20,r20,65535
    5268:	a446b03a 	or	r3,r20,r17
    526c:	18bfac2e 	bgeu	r3,r2,5120 <__alt_mem_sdram+0xfc005120>
    5270:	003fa706 	br	5110 <__alt_mem_sdram+0xfc005110>
    5274:	2005883a 	mov	r2,r4
    5278:	2807883a 	mov	r3,r5
    527c:	dfc00c17 	ldw	ra,48(sp)
    5280:	df000b17 	ldw	fp,44(sp)
    5284:	ddc00a17 	ldw	r23,40(sp)
    5288:	dd800917 	ldw	r22,36(sp)
    528c:	dd400817 	ldw	r21,32(sp)
    5290:	dd000717 	ldw	r20,28(sp)
    5294:	dcc00617 	ldw	r19,24(sp)
    5298:	dc800517 	ldw	r18,20(sp)
    529c:	dc400417 	ldw	r17,16(sp)
    52a0:	dc000317 	ldw	r16,12(sp)
    52a4:	dec00d04 	addi	sp,sp,52
    52a8:	f800283a 	ret
    52ac:	04c03fc4 	movi	r19,255
    52b0:	99c9803a 	cmpltu	r4,r19,r7
    52b4:	200890fa 	slli	r4,r4,3
    52b8:	003fa406 	br	514c <__alt_mem_sdram+0xfc00514c>
    52bc:	00803fc4 	movi	r2,255
    52c0:	14c5803a 	cmpltu	r2,r2,r19
    52c4:	100490fa 	slli	r2,r2,3
    52c8:	003fbc06 	br	51bc <__alt_mem_sdram+0xfc0051bc>
    52cc:	00804034 	movhi	r2,256
    52d0:	10bfffc4 	addi	r2,r2,-1
    52d4:	1180a636 	bltu	r2,r6,5570 <__umoddi3+0x57c>
    52d8:	01000404 	movi	r4,16
    52dc:	003f5c06 	br	5050 <__alt_mem_sdram+0xfc005050>
    52e0:	3d0e983a 	sll	r7,r7,r20
    52e4:	34ead83a 	srl	r21,r6,r19
    52e8:	8cc6d83a 	srl	r3,r17,r19
    52ec:	8d10983a 	sll	r8,r17,r20
    52f0:	3d6ab03a 	or	r21,r7,r21
    52f4:	a82cd43a 	srli	r22,r21,16
    52f8:	84e2d83a 	srl	r17,r16,r19
    52fc:	1809883a 	mov	r4,r3
    5300:	b00b883a 	mov	r5,r22
    5304:	8a22b03a 	or	r17,r17,r8
    5308:	3524983a 	sll	r18,r6,r20
    530c:	dc400015 	stw	r17,0(sp)
    5310:	d8c00115 	stw	r3,4(sp)
    5314:	00057140 	call	5714 <__umodsi3>
    5318:	d8c00117 	ldw	r3,4(sp)
    531c:	b00b883a 	mov	r5,r22
    5320:	1039883a 	mov	fp,r2
    5324:	1809883a 	mov	r4,r3
    5328:	00056b00 	call	56b0 <__udivsi3>
    532c:	adffffcc 	andi	r23,r21,65535
    5330:	100b883a 	mov	r5,r2
    5334:	b809883a 	mov	r4,r23
    5338:	1023883a 	mov	r17,r2
    533c:	000576c0 	call	576c <__mulsi3>
    5340:	d9400017 	ldw	r5,0(sp)
    5344:	e008943a 	slli	r4,fp,16
    5348:	8520983a 	sll	r16,r16,r20
    534c:	2806d43a 	srli	r3,r5,16
    5350:	1906b03a 	or	r3,r3,r4
    5354:	1880042e 	bgeu	r3,r2,5368 <__umoddi3+0x374>
    5358:	1d47883a 	add	r3,r3,r21
    535c:	893fffc4 	addi	r4,r17,-1
    5360:	1d40892e 	bgeu	r3,r21,5588 <__umoddi3+0x594>
    5364:	2023883a 	mov	r17,r4
    5368:	18b9c83a 	sub	fp,r3,r2
    536c:	b00b883a 	mov	r5,r22
    5370:	e009883a 	mov	r4,fp
    5374:	00057140 	call	5714 <__umodsi3>
    5378:	b00b883a 	mov	r5,r22
    537c:	e009883a 	mov	r4,fp
    5380:	d8800215 	stw	r2,8(sp)
    5384:	00056b00 	call	56b0 <__udivsi3>
    5388:	100b883a 	mov	r5,r2
    538c:	b809883a 	mov	r4,r23
    5390:	102d883a 	mov	r22,r2
    5394:	000576c0 	call	576c <__mulsi3>
    5398:	d9800217 	ldw	r6,8(sp)
    539c:	d8c00017 	ldw	r3,0(sp)
    53a0:	300c943a 	slli	r6,r6,16
    53a4:	1a3fffcc 	andi	r8,r3,65535
    53a8:	4190b03a 	or	r8,r8,r6
    53ac:	4080042e 	bgeu	r8,r2,53c0 <__umoddi3+0x3cc>
    53b0:	4551883a 	add	r8,r8,r21
    53b4:	b0ffffc4 	addi	r3,r22,-1
    53b8:	45406f2e 	bgeu	r8,r21,5578 <__umoddi3+0x584>
    53bc:	182d883a 	mov	r22,r3
    53c0:	880e943a 	slli	r7,r17,16
    53c4:	9006d43a 	srli	r3,r18,16
    53c8:	91bfffcc 	andi	r6,r18,65535
    53cc:	3dacb03a 	or	r22,r7,r22
    53d0:	b02ed43a 	srli	r23,r22,16
    53d4:	b5bfffcc 	andi	r22,r22,65535
    53d8:	300b883a 	mov	r5,r6
    53dc:	b009883a 	mov	r4,r22
    53e0:	40a3c83a 	sub	r17,r8,r2
    53e4:	d8c00115 	stw	r3,4(sp)
    53e8:	d9800215 	stw	r6,8(sp)
    53ec:	000576c0 	call	576c <__mulsi3>
    53f0:	d9800217 	ldw	r6,8(sp)
    53f4:	b809883a 	mov	r4,r23
    53f8:	1039883a 	mov	fp,r2
    53fc:	300b883a 	mov	r5,r6
    5400:	000576c0 	call	576c <__mulsi3>
    5404:	d8c00117 	ldw	r3,4(sp)
    5408:	b809883a 	mov	r4,r23
    540c:	d8800215 	stw	r2,8(sp)
    5410:	180b883a 	mov	r5,r3
    5414:	000576c0 	call	576c <__mulsi3>
    5418:	d8c00117 	ldw	r3,4(sp)
    541c:	b009883a 	mov	r4,r22
    5420:	102f883a 	mov	r23,r2
    5424:	180b883a 	mov	r5,r3
    5428:	000576c0 	call	576c <__mulsi3>
    542c:	d9800217 	ldw	r6,8(sp)
    5430:	e006d43a 	srli	r3,fp,16
    5434:	1185883a 	add	r2,r2,r6
    5438:	1885883a 	add	r2,r3,r2
    543c:	1180022e 	bgeu	r2,r6,5448 <__umoddi3+0x454>
    5440:	00c00074 	movhi	r3,1
    5444:	b8ef883a 	add	r23,r23,r3
    5448:	1006d43a 	srli	r3,r2,16
    544c:	1004943a 	slli	r2,r2,16
    5450:	e73fffcc 	andi	fp,fp,65535
    5454:	1dc7883a 	add	r3,r3,r23
    5458:	1739883a 	add	fp,r2,fp
    545c:	88c03a36 	bltu	r17,r3,5548 <__umoddi3+0x554>
    5460:	88c05126 	beq	r17,r3,55a8 <__umoddi3+0x5b4>
    5464:	88c9c83a 	sub	r4,r17,r3
    5468:	e00f883a 	mov	r7,fp
    546c:	81cfc83a 	sub	r7,r16,r7
    5470:	81c7803a 	cmpltu	r3,r16,r7
    5474:	20c7c83a 	sub	r3,r4,r3
    5478:	1cc4983a 	sll	r2,r3,r19
    547c:	3d0ed83a 	srl	r7,r7,r20
    5480:	1d06d83a 	srl	r3,r3,r20
    5484:	11c4b03a 	or	r2,r2,r7
    5488:	003f7c06 	br	527c <__alt_mem_sdram+0xfc00527c>
    548c:	9ca6983a 	sll	r19,r19,r18
    5490:	88f8d83a 	srl	fp,r17,r3
    5494:	80c4d83a 	srl	r2,r16,r3
    5498:	982cd43a 	srli	r22,r19,16
    549c:	8ca2983a 	sll	r17,r17,r18
    54a0:	e009883a 	mov	r4,fp
    54a4:	b00b883a 	mov	r5,r22
    54a8:	146ab03a 	or	r21,r2,r17
    54ac:	00057140 	call	5714 <__umodsi3>
    54b0:	b00b883a 	mov	r5,r22
    54b4:	e009883a 	mov	r4,fp
    54b8:	1029883a 	mov	r20,r2
    54bc:	9dffffcc 	andi	r23,r19,65535
    54c0:	00056b00 	call	56b0 <__udivsi3>
    54c4:	b809883a 	mov	r4,r23
    54c8:	100b883a 	mov	r5,r2
    54cc:	000576c0 	call	576c <__mulsi3>
    54d0:	a008943a 	slli	r4,r20,16
    54d4:	a806d43a 	srli	r3,r21,16
    54d8:	84a8983a 	sll	r20,r16,r18
    54dc:	1906b03a 	or	r3,r3,r4
    54e0:	1880042e 	bgeu	r3,r2,54f4 <__umoddi3+0x500>
    54e4:	1cc7883a 	add	r3,r3,r19
    54e8:	1cc00236 	bltu	r3,r19,54f4 <__umoddi3+0x500>
    54ec:	1880012e 	bgeu	r3,r2,54f4 <__umoddi3+0x500>
    54f0:	1cc7883a 	add	r3,r3,r19
    54f4:	18a3c83a 	sub	r17,r3,r2
    54f8:	b00b883a 	mov	r5,r22
    54fc:	8809883a 	mov	r4,r17
    5500:	00057140 	call	5714 <__umodsi3>
    5504:	b00b883a 	mov	r5,r22
    5508:	8809883a 	mov	r4,r17
    550c:	1021883a 	mov	r16,r2
    5510:	00056b00 	call	56b0 <__udivsi3>
    5514:	100b883a 	mov	r5,r2
    5518:	b809883a 	mov	r4,r23
    551c:	8020943a 	slli	r16,r16,16
    5520:	000576c0 	call	576c <__mulsi3>
    5524:	a8ffffcc 	andi	r3,r21,65535
    5528:	1c06b03a 	or	r3,r3,r16
    552c:	1880042e 	bgeu	r3,r2,5540 <__umoddi3+0x54c>
    5530:	1cc7883a 	add	r3,r3,r19
    5534:	1cc00236 	bltu	r3,r19,5540 <__umoddi3+0x54c>
    5538:	1880012e 	bgeu	r3,r2,5540 <__umoddi3+0x54c>
    553c:	1cc7883a 	add	r3,r3,r19
    5540:	18a3c83a 	sub	r17,r3,r2
    5544:	003f2906 	br	51ec <__alt_mem_sdram+0xfc0051ec>
    5548:	e48fc83a 	sub	r7,fp,r18
    554c:	1d49c83a 	sub	r4,r3,r21
    5550:	e1f9803a 	cmpltu	fp,fp,r7
    5554:	2739c83a 	sub	fp,r4,fp
    5558:	8f09c83a 	sub	r4,r17,fp
    555c:	003fc306 	br	546c <__alt_mem_sdram+0xfc00546c>
    5560:	01000604 	movi	r4,24
    5564:	003ef906 	br	514c <__alt_mem_sdram+0xfc00514c>
    5568:	00800604 	movi	r2,24
    556c:	003f1306 	br	51bc <__alt_mem_sdram+0xfc0051bc>
    5570:	01000604 	movi	r4,24
    5574:	003eb606 	br	5050 <__alt_mem_sdram+0xfc005050>
    5578:	40bf902e 	bgeu	r8,r2,53bc <__alt_mem_sdram+0xfc0053bc>
    557c:	b5bfff84 	addi	r22,r22,-2
    5580:	4551883a 	add	r8,r8,r21
    5584:	003f8e06 	br	53c0 <__alt_mem_sdram+0xfc0053c0>
    5588:	18bf762e 	bgeu	r3,r2,5364 <__alt_mem_sdram+0xfc005364>
    558c:	8c7fff84 	addi	r17,r17,-2
    5590:	1d47883a 	add	r3,r3,r21
    5594:	003f7406 	br	5368 <__alt_mem_sdram+0xfc005368>
    5598:	1cc7883a 	add	r3,r3,r19
    559c:	003ecd06 	br	50d4 <__alt_mem_sdram+0xfc0050d4>
    55a0:	8005883a 	mov	r2,r16
    55a4:	003ef806 	br	5188 <__alt_mem_sdram+0xfc005188>
    55a8:	873fe736 	bltu	r16,fp,5548 <__alt_mem_sdram+0xfc005548>
    55ac:	e00f883a 	mov	r7,fp
    55b0:	0009883a 	mov	r4,zero
    55b4:	003fad06 	br	546c <__alt_mem_sdram+0xfc00546c>

000055b8 <__divsi3>:
    55b8:	20001b16 	blt	r4,zero,5628 <__divsi3+0x70>
    55bc:	000f883a 	mov	r7,zero
    55c0:	28001616 	blt	r5,zero,561c <__divsi3+0x64>
    55c4:	200d883a 	mov	r6,r4
    55c8:	29001a2e 	bgeu	r5,r4,5634 <__divsi3+0x7c>
    55cc:	00800804 	movi	r2,32
    55d0:	00c00044 	movi	r3,1
    55d4:	00000106 	br	55dc <__divsi3+0x24>
    55d8:	10000d26 	beq	r2,zero,5610 <__divsi3+0x58>
    55dc:	294b883a 	add	r5,r5,r5
    55e0:	10bfffc4 	addi	r2,r2,-1
    55e4:	18c7883a 	add	r3,r3,r3
    55e8:	293ffb36 	bltu	r5,r4,55d8 <__alt_mem_sdram+0xfc0055d8>
    55ec:	0005883a 	mov	r2,zero
    55f0:	18000726 	beq	r3,zero,5610 <__divsi3+0x58>
    55f4:	0005883a 	mov	r2,zero
    55f8:	31400236 	bltu	r6,r5,5604 <__divsi3+0x4c>
    55fc:	314dc83a 	sub	r6,r6,r5
    5600:	10c4b03a 	or	r2,r2,r3
    5604:	1806d07a 	srli	r3,r3,1
    5608:	280ad07a 	srli	r5,r5,1
    560c:	183ffa1e 	bne	r3,zero,55f8 <__alt_mem_sdram+0xfc0055f8>
    5610:	38000126 	beq	r7,zero,5618 <__divsi3+0x60>
    5614:	0085c83a 	sub	r2,zero,r2
    5618:	f800283a 	ret
    561c:	014bc83a 	sub	r5,zero,r5
    5620:	39c0005c 	xori	r7,r7,1
    5624:	003fe706 	br	55c4 <__alt_mem_sdram+0xfc0055c4>
    5628:	0109c83a 	sub	r4,zero,r4
    562c:	01c00044 	movi	r7,1
    5630:	003fe306 	br	55c0 <__alt_mem_sdram+0xfc0055c0>
    5634:	00c00044 	movi	r3,1
    5638:	003fee06 	br	55f4 <__alt_mem_sdram+0xfc0055f4>

0000563c <__modsi3>:
    563c:	20001716 	blt	r4,zero,569c <__modsi3+0x60>
    5640:	000f883a 	mov	r7,zero
    5644:	2005883a 	mov	r2,r4
    5648:	28001216 	blt	r5,zero,5694 <__modsi3+0x58>
    564c:	2900162e 	bgeu	r5,r4,56a8 <__modsi3+0x6c>
    5650:	01800804 	movi	r6,32
    5654:	00c00044 	movi	r3,1
    5658:	00000106 	br	5660 <__modsi3+0x24>
    565c:	30000a26 	beq	r6,zero,5688 <__modsi3+0x4c>
    5660:	294b883a 	add	r5,r5,r5
    5664:	31bfffc4 	addi	r6,r6,-1
    5668:	18c7883a 	add	r3,r3,r3
    566c:	293ffb36 	bltu	r5,r4,565c <__alt_mem_sdram+0xfc00565c>
    5670:	18000526 	beq	r3,zero,5688 <__modsi3+0x4c>
    5674:	1806d07a 	srli	r3,r3,1
    5678:	11400136 	bltu	r2,r5,5680 <__modsi3+0x44>
    567c:	1145c83a 	sub	r2,r2,r5
    5680:	280ad07a 	srli	r5,r5,1
    5684:	183ffb1e 	bne	r3,zero,5674 <__alt_mem_sdram+0xfc005674>
    5688:	38000126 	beq	r7,zero,5690 <__modsi3+0x54>
    568c:	0085c83a 	sub	r2,zero,r2
    5690:	f800283a 	ret
    5694:	014bc83a 	sub	r5,zero,r5
    5698:	003fec06 	br	564c <__alt_mem_sdram+0xfc00564c>
    569c:	0109c83a 	sub	r4,zero,r4
    56a0:	01c00044 	movi	r7,1
    56a4:	003fe706 	br	5644 <__alt_mem_sdram+0xfc005644>
    56a8:	00c00044 	movi	r3,1
    56ac:	003ff106 	br	5674 <__alt_mem_sdram+0xfc005674>

000056b0 <__udivsi3>:
    56b0:	200d883a 	mov	r6,r4
    56b4:	2900152e 	bgeu	r5,r4,570c <__udivsi3+0x5c>
    56b8:	28001416 	blt	r5,zero,570c <__udivsi3+0x5c>
    56bc:	00800804 	movi	r2,32
    56c0:	00c00044 	movi	r3,1
    56c4:	00000206 	br	56d0 <__udivsi3+0x20>
    56c8:	10000e26 	beq	r2,zero,5704 <__udivsi3+0x54>
    56cc:	28000516 	blt	r5,zero,56e4 <__udivsi3+0x34>
    56d0:	294b883a 	add	r5,r5,r5
    56d4:	10bfffc4 	addi	r2,r2,-1
    56d8:	18c7883a 	add	r3,r3,r3
    56dc:	293ffa36 	bltu	r5,r4,56c8 <__alt_mem_sdram+0xfc0056c8>
    56e0:	18000826 	beq	r3,zero,5704 <__udivsi3+0x54>
    56e4:	0005883a 	mov	r2,zero
    56e8:	31400236 	bltu	r6,r5,56f4 <__udivsi3+0x44>
    56ec:	314dc83a 	sub	r6,r6,r5
    56f0:	10c4b03a 	or	r2,r2,r3
    56f4:	1806d07a 	srli	r3,r3,1
    56f8:	280ad07a 	srli	r5,r5,1
    56fc:	183ffa1e 	bne	r3,zero,56e8 <__alt_mem_sdram+0xfc0056e8>
    5700:	f800283a 	ret
    5704:	0005883a 	mov	r2,zero
    5708:	f800283a 	ret
    570c:	00c00044 	movi	r3,1
    5710:	003ff406 	br	56e4 <__alt_mem_sdram+0xfc0056e4>

00005714 <__umodsi3>:
    5714:	2005883a 	mov	r2,r4
    5718:	2900122e 	bgeu	r5,r4,5764 <__umodsi3+0x50>
    571c:	28001116 	blt	r5,zero,5764 <__umodsi3+0x50>
    5720:	01800804 	movi	r6,32
    5724:	00c00044 	movi	r3,1
    5728:	00000206 	br	5734 <__umodsi3+0x20>
    572c:	30000c26 	beq	r6,zero,5760 <__umodsi3+0x4c>
    5730:	28000516 	blt	r5,zero,5748 <__umodsi3+0x34>
    5734:	294b883a 	add	r5,r5,r5
    5738:	31bfffc4 	addi	r6,r6,-1
    573c:	18c7883a 	add	r3,r3,r3
    5740:	293ffa36 	bltu	r5,r4,572c <__alt_mem_sdram+0xfc00572c>
    5744:	18000626 	beq	r3,zero,5760 <__umodsi3+0x4c>
    5748:	1806d07a 	srli	r3,r3,1
    574c:	11400136 	bltu	r2,r5,5754 <__umodsi3+0x40>
    5750:	1145c83a 	sub	r2,r2,r5
    5754:	280ad07a 	srli	r5,r5,1
    5758:	183ffb1e 	bne	r3,zero,5748 <__alt_mem_sdram+0xfc005748>
    575c:	f800283a 	ret
    5760:	f800283a 	ret
    5764:	00c00044 	movi	r3,1
    5768:	003ff706 	br	5748 <__alt_mem_sdram+0xfc005748>

0000576c <__mulsi3>:
    576c:	0005883a 	mov	r2,zero
    5770:	20000726 	beq	r4,zero,5790 <__mulsi3+0x24>
    5774:	20c0004c 	andi	r3,r4,1
    5778:	2008d07a 	srli	r4,r4,1
    577c:	18000126 	beq	r3,zero,5784 <__mulsi3+0x18>
    5780:	1145883a 	add	r2,r2,r5
    5784:	294b883a 	add	r5,r5,r5
    5788:	203ffa1e 	bne	r4,zero,5774 <__alt_mem_sdram+0xfc005774>
    578c:	f800283a 	ret
    5790:	f800283a 	ret

00005794 <srand>:
    5794:	00800034 	movhi	r2,0
    5798:	10992f04 	addi	r2,r2,25788
    579c:	11000015 	stw	r4,0(r2)
    57a0:	10000115 	stw	zero,4(r2)
    57a4:	f800283a 	ret

000057a8 <rand>:
    57a8:	defffe04 	addi	sp,sp,-8
    57ac:	dc000015 	stw	r16,0(sp)
    57b0:	04000034 	movhi	r16,0
    57b4:	84192f04 	addi	r16,r16,25788
    57b8:	81000017 	ldw	r4,0(r16)
    57bc:	81400117 	ldw	r5,4(r16)
    57c0:	01932574 	movhi	r6,19605
    57c4:	01d614b4 	movhi	r7,22610
    57c8:	319fcb44 	addi	r6,r6,32557
    57cc:	39fd0b44 	addi	r7,r7,-3027
    57d0:	dfc00115 	stw	ra,4(sp)
    57d4:	00058080 	call	5808 <__muldi3>
    57d8:	11000044 	addi	r4,r2,1
    57dc:	2085803a 	cmpltu	r2,r4,r2
    57e0:	10c7883a 	add	r3,r2,r3
    57e4:	00a00034 	movhi	r2,32768
    57e8:	10bfffc4 	addi	r2,r2,-1
    57ec:	1884703a 	and	r2,r3,r2
    57f0:	81000015 	stw	r4,0(r16)
    57f4:	80c00115 	stw	r3,4(r16)
    57f8:	dfc00117 	ldw	ra,4(sp)
    57fc:	dc000017 	ldw	r16,0(sp)
    5800:	dec00204 	addi	sp,sp,8
    5804:	f800283a 	ret

00005808 <__muldi3>:
    5808:	defff604 	addi	sp,sp,-40
    580c:	dd800615 	stw	r22,24(sp)
    5810:	dd400515 	stw	r21,20(sp)
    5814:	dc400115 	stw	r17,4(sp)
    5818:	357fffcc 	andi	r21,r6,65535
    581c:	2022d43a 	srli	r17,r4,16
    5820:	25bfffcc 	andi	r22,r4,65535
    5824:	dcc00315 	stw	r19,12(sp)
    5828:	dc800215 	stw	r18,8(sp)
    582c:	2027883a 	mov	r19,r4
    5830:	2825883a 	mov	r18,r5
    5834:	b009883a 	mov	r4,r22
    5838:	a80b883a 	mov	r5,r21
    583c:	dfc00915 	stw	ra,36(sp)
    5840:	df000815 	stw	fp,32(sp)
    5844:	ddc00715 	stw	r23,28(sp)
    5848:	3839883a 	mov	fp,r7
    584c:	302ed43a 	srli	r23,r6,16
    5850:	dd000415 	stw	r20,16(sp)
    5854:	dc000015 	stw	r16,0(sp)
    5858:	3029883a 	mov	r20,r6
    585c:	000576c0 	call	576c <__mulsi3>
    5860:	a80b883a 	mov	r5,r21
    5864:	8809883a 	mov	r4,r17
    5868:	1021883a 	mov	r16,r2
    586c:	000576c0 	call	576c <__mulsi3>
    5870:	8809883a 	mov	r4,r17
    5874:	b80b883a 	mov	r5,r23
    5878:	102b883a 	mov	r21,r2
    587c:	000576c0 	call	576c <__mulsi3>
    5880:	b80b883a 	mov	r5,r23
    5884:	b009883a 	mov	r4,r22
    5888:	1023883a 	mov	r17,r2
    588c:	000576c0 	call	576c <__mulsi3>
    5890:	8006d43a 	srli	r3,r16,16
    5894:	1545883a 	add	r2,r2,r21
    5898:	1885883a 	add	r2,r3,r2
    589c:	1540022e 	bgeu	r2,r21,58a8 <__muldi3+0xa0>
    58a0:	00c00074 	movhi	r3,1
    58a4:	88e3883a 	add	r17,r17,r3
    58a8:	1006d43a 	srli	r3,r2,16
    58ac:	1004943a 	slli	r2,r2,16
    58b0:	e00b883a 	mov	r5,fp
    58b4:	9809883a 	mov	r4,r19
    58b8:	843fffcc 	andi	r16,r16,65535
    58bc:	1c63883a 	add	r17,r3,r17
    58c0:	1421883a 	add	r16,r2,r16
    58c4:	000576c0 	call	576c <__mulsi3>
    58c8:	900b883a 	mov	r5,r18
    58cc:	a009883a 	mov	r4,r20
    58d0:	1027883a 	mov	r19,r2
    58d4:	000576c0 	call	576c <__mulsi3>
    58d8:	9885883a 	add	r2,r19,r2
    58dc:	1447883a 	add	r3,r2,r17
    58e0:	8005883a 	mov	r2,r16
    58e4:	dfc00917 	ldw	ra,36(sp)
    58e8:	df000817 	ldw	fp,32(sp)
    58ec:	ddc00717 	ldw	r23,28(sp)
    58f0:	dd800617 	ldw	r22,24(sp)
    58f4:	dd400517 	ldw	r21,20(sp)
    58f8:	dd000417 	ldw	r20,16(sp)
    58fc:	dcc00317 	ldw	r19,12(sp)
    5900:	dc800217 	ldw	r18,8(sp)
    5904:	dc400117 	ldw	r17,4(sp)
    5908:	dc000017 	ldw	r16,0(sp)
    590c:	dec00a04 	addi	sp,sp,40
    5910:	f800283a 	ret

00005914 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5914:	deffff04 	addi	sp,sp,-4
    5918:	01000034 	movhi	r4,0
    591c:	01400034 	movhi	r5,0
    5920:	dfc00015 	stw	ra,0(sp)
    5924:	21172804 	addi	r4,r4,23712
    5928:	29582904 	addi	r5,r5,24740

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    592c:	2140061e 	bne	r4,r5,5948 <alt_load+0x34>
    5930:	01000034 	movhi	r4,0
    5934:	01400034 	movhi	r5,0
    5938:	21100804 	addi	r4,r4,16416
    593c:	29500804 	addi	r5,r5,16416
    5940:	2140121e 	bne	r4,r5,598c <alt_load+0x78>
    5944:	00000b06 	br	5974 <alt_load+0x60>
    5948:	00c00034 	movhi	r3,0
    594c:	18d82904 	addi	r3,r3,24740
    5950:	1907c83a 	sub	r3,r3,r4
    5954:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5958:	10fff526 	beq	r2,r3,5930 <__alt_mem_sdram+0xfc005930>
    {
      *to++ = *from++;
    595c:	114f883a 	add	r7,r2,r5
    5960:	39c00017 	ldw	r7,0(r7)
    5964:	110d883a 	add	r6,r2,r4
    5968:	10800104 	addi	r2,r2,4
    596c:	31c00015 	stw	r7,0(r6)
    5970:	003ff906 	br	5958 <__alt_mem_sdram+0xfc005958>
    5974:	01000034 	movhi	r4,0
    5978:	01400034 	movhi	r5,0
    597c:	2116da04 	addi	r4,r4,23400
    5980:	2956da04 	addi	r5,r5,23400

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5984:	2140101e 	bne	r4,r5,59c8 <alt_load+0xb4>
    5988:	00000b06 	br	59b8 <alt_load+0xa4>
    598c:	00c00034 	movhi	r3,0
    5990:	18d00804 	addi	r3,r3,16416
    5994:	1907c83a 	sub	r3,r3,r4
    5998:	0005883a 	mov	r2,zero
  {
    while( to != end )
    599c:	10fff526 	beq	r2,r3,5974 <__alt_mem_sdram+0xfc005974>
    {
      *to++ = *from++;
    59a0:	114f883a 	add	r7,r2,r5
    59a4:	39c00017 	ldw	r7,0(r7)
    59a8:	110d883a 	add	r6,r2,r4
    59ac:	10800104 	addi	r2,r2,4
    59b0:	31c00015 	stw	r7,0(r6)
    59b4:	003ff906 	br	599c <__alt_mem_sdram+0xfc00599c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    59b8:	0005b3c0 	call	5b3c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    59bc:	dfc00017 	ldw	ra,0(sp)
    59c0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    59c4:	0005b401 	jmpi	5b40 <alt_icache_flush_all>
    59c8:	00c00034 	movhi	r3,0
    59cc:	18d72804 	addi	r3,r3,23712
    59d0:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    59d4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    59d8:	18bff726 	beq	r3,r2,59b8 <__alt_mem_sdram+0xfc0059b8>
    {
      *to++ = *from++;
    59dc:	114f883a 	add	r7,r2,r5
    59e0:	39c00017 	ldw	r7,0(r7)
    59e4:	110d883a 	add	r6,r2,r4
    59e8:	10800104 	addi	r2,r2,4
    59ec:	31c00015 	stw	r7,0(r6)
    59f0:	003ff906 	br	59d8 <__alt_mem_sdram+0xfc0059d8>

000059f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    59f4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    59f8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    59fc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5a00:	0005a5c0 	call	5a5c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5a04:	0005a7c0 	call	5a7c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5a08:	d1a10917 	ldw	r6,-31708(gp)
    5a0c:	d1610a17 	ldw	r5,-31704(gp)
    5a10:	d1210b17 	ldw	r4,-31700(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    5a14:	dfc00017 	ldw	ra,0(sp)
    5a18:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5a1c:	00048dc1 	jmpi	48dc <main>

00005a20 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    5a20:	defffe04 	addi	sp,sp,-8
    5a24:	dc000015 	stw	r16,0(sp)
    5a28:	dfc00115 	stw	ra,4(sp)
    5a2c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    5a30:	0005b4c0 	call	5b4c <strlen>
    5a34:	01000034 	movhi	r4,0
    5a38:	000f883a 	mov	r7,zero
    5a3c:	100d883a 	mov	r6,r2
    5a40:	800b883a 	mov	r5,r16
    5a44:	21182804 	addi	r4,r4,24736
#else
    return fputs(str, stdout);
#endif
#endif
}
    5a48:	dfc00117 	ldw	ra,4(sp)
    5a4c:	dc000017 	ldw	r16,0(sp)
    5a50:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    5a54:	0005a801 	jmpi	5a80 <altera_avalon_jtag_uart_write>

00005a58 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    5a58:	0005ab41 	jmpi	5ab4 <alt_busy_sleep>

00005a5c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    5a5c:	deffff04 	addi	sp,sp,-4
    5a60:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2E, nios2e);
    5a64:	0005b440 	call	5b44 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5a68:	00800044 	movi	r2,1
    5a6c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    5a70:	dfc00017 	ldw	ra,0(sp)
    5a74:	dec00104 	addi	sp,sp,4
    5a78:	f800283a 	ret

00005a7c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    5a7c:	f800283a 	ret

00005a80 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    5a80:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    5a84:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    5a88:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5a8c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    5a90:	2980072e 	bgeu	r5,r6,5ab0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5a94:	38c00037 	ldwio	r3,0(r7)
    5a98:	18ffffec 	andhi	r3,r3,65535
    5a9c:	183ffc26 	beq	r3,zero,5a90 <__alt_mem_sdram+0xfc005a90>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    5aa0:	28c00007 	ldb	r3,0(r5)
    5aa4:	20c00035 	stwio	r3,0(r4)
    5aa8:	29400044 	addi	r5,r5,1
    5aac:	003ff806 	br	5a90 <__alt_mem_sdram+0xfc005a90>

  return count;
}
    5ab0:	f800283a 	ret

00005ab4 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    5ab4:	0142e8f4 	movhi	r5,2979
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    5ab8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    5abc:	297a2e84 	addi	r5,r5,-5958
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    5ac0:	dc000015 	stw	r16,0(sp)
    5ac4:	dfc00115 	stw	ra,4(sp)
    5ac8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    5acc:	00056b00 	call	56b0 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    5ad0:	10001026 	beq	r2,zero,5b14 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    5ad4:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    5ad8:	013d1774 	movhi	r4,62557
    5adc:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    5ae0:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    5ae4:	2105d184 	addi	r4,r4,5958
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    5ae8:	297fffc4 	addi	r5,r5,-1
    5aec:	283ffe1e 	bne	r5,zero,5ae8 <__alt_mem_sdram+0xfc005ae8>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    5af0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    5af4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    5af8:	18bffb16 	blt	r3,r2,5ae8 <__alt_mem_sdram+0xfc005ae8>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    5afc:	014002c4 	movi	r5,11
    5b00:	8009883a 	mov	r4,r16
    5b04:	000576c0 	call	576c <__mulsi3>
    5b08:	10bfffc4 	addi	r2,r2,-1
    5b0c:	103ffe1e 	bne	r2,zero,5b08 <__alt_mem_sdram+0xfc005b08>
    5b10:	00000506 	br	5b28 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    5b14:	014002c4 	movi	r5,11
    5b18:	8009883a 	mov	r4,r16
    5b1c:	000576c0 	call	576c <__mulsi3>
    5b20:	10bfffc4 	addi	r2,r2,-1
    5b24:	00bffe16 	blt	zero,r2,5b20 <__alt_mem_sdram+0xfc005b20>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    5b28:	0005883a 	mov	r2,zero
    5b2c:	dfc00117 	ldw	ra,4(sp)
    5b30:	dc000017 	ldw	r16,0(sp)
    5b34:	dec00204 	addi	sp,sp,8
    5b38:	f800283a 	ret

00005b3c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    5b3c:	f800283a 	ret

00005b40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5b40:	f800283a 	ret

00005b44 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    5b44:	000170fa 	wrctl	ienable,zero
    5b48:	f800283a 	ret

00005b4c <strlen>:
    5b4c:	2005883a 	mov	r2,r4
    5b50:	10c00007 	ldb	r3,0(r2)
    5b54:	18000226 	beq	r3,zero,5b60 <strlen+0x14>
    5b58:	10800044 	addi	r2,r2,1
    5b5c:	003ffc06 	br	5b50 <__alt_mem_sdram+0xfc005b50>
    5b60:	1105c83a 	sub	r2,r2,r4
    5b64:	f800283a 	ret
