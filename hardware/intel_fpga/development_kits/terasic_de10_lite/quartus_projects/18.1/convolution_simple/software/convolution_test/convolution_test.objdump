
convolution_test.elf:     file format elf32-littlenios2
convolution_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000063b0 memsz 0x000063b0 flags r-x
    LOAD off    0x000073d0 vaddr 0x000063d0 paddr 0x000063d4 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000073d8 vaddr 0x000063d8 paddr 0x000063d8 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000073d4  2**0
                  CONTENTS
  2 .text         000061f4  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001bc  00006214  00006214  00007214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000063d0  000063d4  000073d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000063d8  000063d8  000073d8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  000063e4  000063e4  000073d4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000073d4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000428  00000000  00000000  000073f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006422  00000000  00000000  00007820  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000021cc  00000000  00000000  0000dc42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000027d5  00000000  00000000  0000fe0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000009e8  00000000  00000000  000125e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000011d6  00000000  00000000  00012fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c3a9  00000000  00000000  000141a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0002054c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001098  00000000  00000000  00020590  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00022b12  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  00022b15  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00022b19  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00022b1a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00022b1b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00022b24  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00022b2d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000017  00000000  00000000  00022b36  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000074  00000000  00000000  00022b4d  2**0
                  CONTENTS, READONLY
 26 .jdi          00006a05  00000000  00000000  00022bc1  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00034556  00000000  00000000  000295c6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00006214 l    d  .rodata	00000000 .rodata
000063d0 l    d  .rwdata	00000000 .rwdata
000063d8 l    d  .bss	00000000 .bss
000063e4 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../convolution_test_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 convolution_test.c
00000000 l    df *ABS*	00000000 printf.c
00000394 l     F .text	00000010 _out_buffer
000003a4 l     F .text	00000004 _out_null
000003a8 l     F .text	00000114 _out_rev
000004bc l     F .text	0000019c _ntoa_format
00000658 l     F .text	00000174 _ntoa_long
000007cc l     F .text	000001a0 _ntoa_long_long
0000096c l     F .text	00000018 _out_char
00000984 l     F .text	00000020 _out_fct
000009a4 l     F .text	00000534 _ftoa
00000ed8 l     F .text	00000608 _etoa
00006280 l     O .rodata	00000050 pow10.1806
000014e0 l     F .text	000008fc _vsnprintf
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
000060ac g     F .text	0000002c alt_main
00000074 g     F .text	00000008 f2bf
0000005c g     F .text	00000010 _putchar
000063d4 g       *ABS*	00000000 __flash_rwdata_start
000049a4 g     F .text	00000088 .hidden __eqdf2
00001e90 g     F .text	00000030 vprintf_
00000158 g     F .text	000000a4 show_featuremap
00004a2c g     F .text	000000dc .hidden __gtdf2
000063d0 g     O .rwdata	00000004 jtag_uart
0000620c g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000063dc g     O .bss	00000004 alt_argv
0000e3d0 g       *ABS*	00000000 _gp
00006120 g     F .text	00000004 usleep
00005de4 g     F .text	000000dc .hidden __floatsidf
00004b08 g     F .text	000000f4 .hidden __ltdf2
00002c5c g     F .text	00000064 .hidden __udivsi3
00001e1c g     F .text	0000003c sprintf_
00001f30 g     F .text	00000074 .hidden __fixunsdfsi
00003728 g     F .text	000008ac .hidden __adddf3
000025a0 g     F .text	000005c4 .hidden __umoddi3
000063e4 g       *ABS*	00000000 __bss_end
00001fa4 g     F .text	000005fc .hidden __udivdi3
00005ec0 g     F .text	000000a8 .hidden __floatunsidf
00001ec0 g     F .text	00000030 vsnprintf_
00006204 g     F .text	00000004 alt_dcache_flush_all
00005d64 g     F .text	00000080 .hidden __fixdfsi
000063d4 g       *ABS*	00000000 __ram_rwdata_end
00001ef0 g     F .text	00000040 fctprintf
000063d0 g       *ABS*	00000000 __ram_rodata_end
00004b08 g     F .text	000000f4 .hidden __ledf2
00002cc0 g     F .text	00000058 .hidden __umodsi3
000063e4 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00005f68 g     F .text	00000064 .hidden __clzsi2
00006148 g     F .text	00000034 altera_avalon_jtag_uart_write
000000a4 g     F .text	00000028 bf_add
00000020 g     F .text	0000003c _start
00006144 g     F .text	00000004 alt_sys_init
00002d18 g     F .text	00000028 .hidden __mulsi3
000063d0 g       *ABS*	00000000 __ram_rwdata_start
00006214 g       *ABS*	00000000 __ram_rodata_start
0000007c g     F .text	00000028 bf_mult
000000cc g     F .text	00000048 put_pixel
0000617c g     F .text	00000088 alt_busy_sleep
000063e4 g       *ABS*	00000000 __alt_stack_base
00003fd4 g     F .text	000009d0 .hidden __divdf3
00004bfc g     F .text	0000086c .hidden __muldf3
000001fc g     F .text	00000034 convolution
000063d8 g       *ABS*	00000000 __bss_start
00000230 g     F .text	00000164 main
000063d8 g     O .bss	00000004 alt_envp
00002b64 g     F .text	00000084 .hidden __divsi3
00003208 g     F .text	00000430 .hidden __mulsf3
00006214 g       *ABS*	00000000 __flash_rodata_start
000049a4 g     F .text	00000088 .hidden __nedf2
00006124 g     F .text	00000020 alt_irq_init
000062d0 g     O .rodata	00000100 .hidden __clz_tab
00001e58 g     F .text	00000038 snprintf_
000063e0 g     O .bss	00000004 alt_argc
00000114 g     F .text	00000044 get_pixel
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001ddc g     F .text	00000040 printf_
000063d4 g       *ABS*	00000000 _edata
000063e4 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
0000006c g     F .text	00000008 bf2f
00003638 g     F .text	000000f0 .hidden __floatunsisf
00002be8 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_ram
0000000c g       .entry	00000000 _exit
00004a2c g     F .text	000000dc .hidden __gedf2
000060d8 g     F .text	00000048 alt_putchar
00006208 g     F .text	00000004 alt_icache_flush_all
00005468 g     F .text	000008fc .hidden __subdf3
00002d40 g     F .text	000004c8 .hidden __addsf3
00005fcc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6b8f414 	ori	gp,gp,58320
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	1098f614 	ori	r2,r2,25560

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18d8f914 	ori	r3,r3,25572

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff1c74>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	0005fcc0 	call	5fcc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	00060ac0 	call	60ac <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <_gp+0xffff1c88>

0000005c <_putchar>:
typedef alt_u16 bfloat16;

void _putchar(char character)
{
  // send char to console etc.
	alt_putchar(character);
      5c:	21003fcc 	andi	r4,r4,255
      60:	2100201c 	xori	r4,r4,128
      64:	213fe004 	addi	r4,r4,-128
      68:	00060d81 	jmpi	60d8 <alt_putchar>

0000006c <bf2f>:

float bf2f(bfloat16 x) { // bfloat_to_float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     return f.f;
}
      6c:	2004943a 	slli	r2,r4,16
      70:	f800283a 	ret

00000074 <f2bf>:

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
}
      74:	2004d43a 	srli	r2,r4,16
      78:	f800283a 	ret

0000007c <bf_mult>:
	alt_putchar(character);
}

float bf2f(bfloat16 x) { // bfloat_to_float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
      7c:	2804943a 	slli	r2,r5,16
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      80:	200a943a 	slli	r5,r4,16
}

bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
      84:	deffff04 	addi	sp,sp,-4
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      88:	1009883a 	mov	r4,r2
}

bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
      8c:	dfc00015 	stw	ra,0(sp)
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      90:	00032080 	call	3208 <__mulsf3>
}

bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}
      94:	1004d43a 	srli	r2,r2,16
      98:	dfc00017 	ldw	ra,0(sp)
      9c:	dec00104 	addi	sp,sp,4
      a0:	f800283a 	ret

000000a4 <bf_add>:
	alt_putchar(character);
}

float bf2f(bfloat16 x) { // bfloat_to_float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
      a4:	2804943a 	slli	r2,r5,16
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      a8:	200a943a 	slli	r5,r4,16

bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}

bfloat16 bf_add(bfloat16 a, bfloat16 b) {
      ac:	deffff04 	addi	sp,sp,-4
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      b0:	1009883a 	mov	r4,r2

bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}

bfloat16 bf_add(bfloat16 a, bfloat16 b) {
      b4:	dfc00015 	stw	ra,0(sp)
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      b8:	0002d400 	call	2d40 <__addsf3>
     return f2bf(bf2f(a) * bf2f(b));
}

bfloat16 bf_add(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) + bf2f(b));
}
      bc:	1004d43a 	srli	r2,r2,16
      c0:	dfc00017 	ldw	ra,0(sp)
      c4:	dec00104 	addi	sp,sp,4
      c8:	f800283a 	ret

000000cc <put_pixel>:

void put_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y, alt_u32 data) {
      cc:	defffd04 	addi	sp,sp,-12
      d0:	dc400115 	stw	r17,4(sp)
      d4:	2023883a 	mov	r17,r4
	IOWR_16DIRECT(base, (x + (y * xres)) * 2, (data & 0xffff));
      d8:	3809883a 	mov	r4,r7

bfloat16 bf_add(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) + bf2f(b));
}

void put_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y, alt_u32 data) {
      dc:	dc000015 	stw	r16,0(sp)
      e0:	dfc00215 	stw	ra,8(sp)
      e4:	3021883a 	mov	r16,r6
	IOWR_16DIRECT(base, (x + (y * xres)) * 2, (data & 0xffff));
      e8:	0002d180 	call	2d18 <__mulsi3>
      ec:	1405883a 	add	r2,r2,r16
      f0:	d8c00317 	ldw	r3,12(sp)
      f4:	1085883a 	add	r2,r2,r2
      f8:	8885883a 	add	r2,r17,r2
      fc:	10c0002d 	sthio	r3,0(r2)
}
     100:	dfc00217 	ldw	ra,8(sp)
     104:	dc400117 	ldw	r17,4(sp)
     108:	dc000017 	ldw	r16,0(sp)
     10c:	dec00304 	addi	sp,sp,12
     110:	f800283a 	ret

00000114 <get_pixel>:

alt_u16 get_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y) {
     114:	defffd04 	addi	sp,sp,-12
     118:	dc400115 	stw	r17,4(sp)
     11c:	2023883a 	mov	r17,r4
	return IORD_16DIRECT(base, (x + (y * xres)) * 2);
     120:	3809883a 	mov	r4,r7

void put_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y, alt_u32 data) {
	IOWR_16DIRECT(base, (x + (y * xres)) * 2, (data & 0xffff));
}

alt_u16 get_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y) {
     124:	dc000015 	stw	r16,0(sp)
     128:	dfc00215 	stw	ra,8(sp)
     12c:	3021883a 	mov	r16,r6
	return IORD_16DIRECT(base, (x + (y * xres)) * 2);
     130:	0002d180 	call	2d18 <__mulsi3>
     134:	1405883a 	add	r2,r2,r16
     138:	1085883a 	add	r2,r2,r2
     13c:	8885883a 	add	r2,r17,r2
}
     140:	1080002b 	ldhuio	r2,0(r2)
     144:	dfc00217 	ldw	ra,8(sp)
     148:	dc400117 	ldw	r17,4(sp)
     14c:	dc000017 	ldw	r16,0(sp)
     150:	dec00304 	addi	sp,sp,12
     154:	f800283a 	ret

00000158 <show_featuremap>:

void show_featuremap(alt_u16* base, alt_u32 xres, alt_u32 yres) {
     158:	defff904 	addi	sp,sp,-28
     15c:	dd400515 	stw	r21,20(sp)
     160:	dd000415 	stw	r20,16(sp)
     164:	dcc00315 	stw	r19,12(sp)
     168:	dc800215 	stw	r18,8(sp)
     16c:	dc400115 	stw	r17,4(sp)
     170:	dfc00615 	stw	ra,24(sp)
     174:	dc000015 	stw	r16,0(sp)
     178:	202b883a 	mov	r21,r4
     17c:	2827883a 	mov	r19,r5
     180:	3029883a 	mov	r20,r6
	alt_u32 x, y;
	for (y=0; y<yres; y++) {
     184:	0025883a 	mov	r18,zero
     188:	0023883a 	mov	r17,zero
     18c:	8d001226 	beq	r17,r20,1d8 <show_featuremap+0x80>
     190:	0021883a 	mov	r16,zero
		for (x=0; x<xres; x++) {
     194:	84c00a26 	beq	r16,r19,1c0 <show_featuremap+0x68>
void put_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y, alt_u32 data) {
	IOWR_16DIRECT(base, (x + (y * xres)) * 2, (data & 0xffff));
}

alt_u16 get_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y) {
	return IORD_16DIRECT(base, (x + (y * xres)) * 2);
     198:	8485883a 	add	r2,r16,r18
     19c:	1085883a 	add	r2,r2,r2
     1a0:	a885883a 	add	r2,r21,r2
     1a4:	1140002b 	ldhuio	r5,0(r2)

void show_featuremap(alt_u16* base, alt_u32 xres, alt_u32 yres) {
	alt_u32 x, y;
	for (y=0; y<yres; y++) {
		for (x=0; x<xres; x++) {
			printf_("%x ", get_pixel(base, xres, x, y));
     1a8:	01000034 	movhi	r4,0
     1ac:	297fffcc 	andi	r5,r5,65535
     1b0:	21188504 	addi	r4,r4,25108
     1b4:	0001ddc0 	call	1ddc <printf_>
}

void show_featuremap(alt_u16* base, alt_u32 xres, alt_u32 yres) {
	alt_u32 x, y;
	for (y=0; y<yres; y++) {
		for (x=0; x<xres; x++) {
     1b8:	84000044 	addi	r16,r16,1
     1bc:	003ff506 	br	194 <_gp+0xffff1dc4>
			printf_("%x ", get_pixel(base, xres, x, y));
		}
		printf_("\n");
     1c0:	01000034 	movhi	r4,0
     1c4:	21189804 	addi	r4,r4,25184
     1c8:	0001ddc0 	call	1ddc <printf_>
	return IORD_16DIRECT(base, (x + (y * xres)) * 2);
}

void show_featuremap(alt_u16* base, alt_u32 xres, alt_u32 yres) {
	alt_u32 x, y;
	for (y=0; y<yres; y++) {
     1cc:	8c400044 	addi	r17,r17,1
     1d0:	94e5883a 	add	r18,r18,r19
     1d4:	003fed06 	br	18c <_gp+0xffff1dbc>
		for (x=0; x<xres; x++) {
			printf_("%x ", get_pixel(base, xres, x, y));
		}
		printf_("\n");
	}
}
     1d8:	dfc00617 	ldw	ra,24(sp)
     1dc:	dd400517 	ldw	r21,20(sp)
     1e0:	dd000417 	ldw	r20,16(sp)
     1e4:	dcc00317 	ldw	r19,12(sp)
     1e8:	dc800217 	ldw	r18,8(sp)
     1ec:	dc400117 	ldw	r17,4(sp)
     1f0:	dc000017 	ldw	r16,0(sp)
     1f4:	dec00704 	addi	sp,sp,28
     1f8:	f800283a 	ret

000001fc <convolution>:

void convolution(alt_u32* base, alt_u32 xres, alt_u32 pad, bfloat16* kptr, bfloat16* src, bfloat16* dst) {
	while((IORD(base, 0) & 0x2) != 0);
     1fc:	20800037 	ldwio	r2,0(r4)
     200:	1080008c 	andi	r2,r2,2
     204:	103ffd1e 	bne	r2,zero,1fc <_gp+0xffff1e2c>
	IOWR(base, 1, (alt_u32)xres);
     208:	21400135 	stwio	r5,4(r4)
	IOWR(base, 2, (alt_u32)pad);
     20c:	21800235 	stwio	r6,8(r4)
	IOWR(base, 3, (alt_u32)kptr);
     210:	21c00335 	stwio	r7,12(r4)
	IOWR(base, 4, (alt_u32)src);
     214:	d8800017 	ldw	r2,0(sp)
     218:	20800435 	stwio	r2,16(r4)
	IOWR(base, 5, (alt_u32)dst);
     21c:	d8800117 	ldw	r2,4(sp)
     220:	20800535 	stwio	r2,20(r4)
	IOWR(base, 0, 1);
     224:	00800044 	movi	r2,1
     228:	20800035 	stwio	r2,0(r4)
     22c:	f800283a 	ret

00000230 <main>:
int main()
{
	alt_u32 x, y, k;
	bfloat16 kernel[KX][KY], src[XRES][YRES], dst[XRES][YRES];

	printf_("Convolution Test\n");
     230:	01000034 	movhi	r4,0
	IOWR(base, 5, (alt_u32)dst);
	IOWR(base, 0, 1);
}

int main()
{
     234:	deffb204 	addi	sp,sp,-312
	alt_u32 x, y, k;
	bfloat16 kernel[KX][KY], src[XRES][YRES], dst[XRES][YRES];

	printf_("Convolution Test\n");
     238:	21188604 	addi	r4,r4,25112
	IOWR(base, 5, (alt_u32)dst);
	IOWR(base, 0, 1);
}

int main()
{
     23c:	dd004915 	stw	r20,292(sp)
     240:	dfc04d15 	stw	ra,308(sp)
     244:	ddc04c15 	stw	r23,304(sp)
     248:	dd804b15 	stw	r22,300(sp)
     24c:	dd404a15 	stw	r21,296(sp)
     250:	dcc04815 	stw	r19,288(sp)
     254:	dc804715 	stw	r18,284(sp)
     258:	dc404615 	stw	r17,280(sp)
     25c:	dc004515 	stw	r16,276(sp)
	alt_u32 x, y, k;
	bfloat16 kernel[KX][KY], src[XRES][YRES], dst[XRES][YRES];

	printf_("Convolution Test\n");
     260:	0001ddc0 	call	1ddc <printf_>
     264:	0007883a 	mov	r3,zero
bfloat16 bf_add(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) + bf2f(b));
}

void put_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y, alt_u32 data) {
	IOWR_16DIRECT(base, (x + (y * xres)) * 2, (data & 0xffff));
     268:	dd004004 	addi	r20,sp,256
     26c:	014fe004 	movi	r5,16256
	bfloat16 kernel[KX][KY], src[XRES][YRES], dst[XRES][YRES];

	printf_("Convolution Test\n");

    for (y=0; y<KY; y++)
    	for (x=0; x<KX; x++)
     270:	01800184 	movi	r6,6
	alt_u32 x, y, k;
	bfloat16 kernel[KX][KY], src[XRES][YRES], dst[XRES][YRES];

	printf_("Convolution Test\n");

    for (y=0; y<KY; y++)
     274:	01c00484 	movi	r7,18
	IOWR(base, 5, (alt_u32)dst);
	IOWR(base, 0, 1);
}

int main()
{
     278:	0005883a 	mov	r2,zero
bfloat16 bf_add(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) + bf2f(b));
}

void put_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y, alt_u32 data) {
	IOWR_16DIRECT(base, (x + (y * xres)) * 2, (data & 0xffff));
     27c:	1889883a 	add	r4,r3,r2
     280:	a109883a 	add	r4,r20,r4
     284:	2140002d 	sthio	r5,0(r4)
     288:	10800084 	addi	r2,r2,2
	bfloat16 kernel[KX][KY], src[XRES][YRES], dst[XRES][YRES];

	printf_("Convolution Test\n");

    for (y=0; y<KY; y++)
    	for (x=0; x<KX; x++)
     28c:	11bffb1e 	bne	r2,r6,27c <_gp+0xffff1eac>
     290:	18c00184 	addi	r3,r3,6
	alt_u32 x, y, k;
	bfloat16 kernel[KX][KY], src[XRES][YRES], dst[XRES][YRES];

	printf_("Convolution Test\n");

    for (y=0; y<KY; y++)
     294:	19fff81e 	bne	r3,r7,278 <_gp+0xffff1ea8>
     298:	0025883a 	mov	r18,zero
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
    	for (x=0; x<XRES; x++) {
    		src[x][y] = f2bf((float)x);
     29c:	dcc02004 	addi	r19,sp,128
    for (y=0; y<KY; y++)
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
    	for (x=0; x<XRES; x++) {
     2a0:	05400204 	movi	r21,8

    for (y=0; y<KY; y++)
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
     2a4:	05800404 	movi	r22,16
int main()
{
	alt_u32 x, y, k;
	bfloat16 kernel[KX][KY], src[XRES][YRES], dst[XRES][YRES];

	printf_("Convolution Test\n");
     2a8:	0021883a 	mov	r16,zero
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     2ac:	8009883a 	mov	r4,r16
     2b0:	8022913a 	slli	r17,r16,4
     2b4:	00036380 	call	3638 <__floatunsisf>
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
    	for (x=0; x<XRES; x++) {
    		src[x][y] = f2bf((float)x);
     2b8:	1004d43a 	srli	r2,r2,16
     2bc:	8ca3883a 	add	r17,r17,r18
     2c0:	9c6f883a 	add	r23,r19,r17
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     2c4:	81001904 	addi	r4,r16,100
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
    	for (x=0; x<XRES; x++) {
    		src[x][y] = f2bf((float)x);
     2c8:	b880000d 	sth	r2,0(r23)
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     2cc:	00036380 	call	3638 <__floatunsisf>
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
    	for (x=0; x<XRES; x++) {
    		src[x][y] = f2bf((float)x);
    		dst[x][y] = f2bf((float)(x+100));
     2d0:	1004d43a 	srli	r2,r2,16
     2d4:	dc63883a 	add	r17,sp,r17
    for (y=0; y<KY; y++)
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
    	for (x=0; x<XRES; x++) {
     2d8:	84000044 	addi	r16,r16,1
    		src[x][y] = f2bf((float)x);
    		dst[x][y] = f2bf((float)(x+100));
     2dc:	8880000d 	sth	r2,0(r17)
    for (y=0; y<KY; y++)
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
    	for (x=0; x<XRES; x++) {
     2e0:	857ff21e 	bne	r16,r21,2ac <_gp+0xffff1edc>
     2e4:	94800084 	addi	r18,r18,2

    for (y=0; y<KY; y++)
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
     2e8:	95bfef1e 	bne	r18,r22,2a8 <_gp+0xffff1ed8>
    	for (x=0; x<XRES; x++) {
    		src[x][y] = f2bf((float)x);
    		dst[x][y] = f2bf((float)(x+100));
    	}
	IOWR(CONVOLUTION_BASE, 1, 2);
     2ec:	00a40114 	movui	r2,36868
     2f0:	00c00084 	movi	r3,2
     2f4:	10c00035 	stwio	r3,0(r2)
	IOWR(CONVOLUTION_BASE, 2, 1);
     2f8:	00c00044 	movi	r3,1
     2fc:	00a40214 	movui	r2,36872
     300:	10c00035 	stwio	r3,0(r2)
	IOWR(CONVOLUTION_BASE, 3, (alt_u32)kernel);
     304:	00a40314 	movui	r2,36876
     308:	15000035 	stwio	r20,0(r2)
	IOWR(CONVOLUTION_BASE, 4, (alt_u32)src);
     30c:	00a40414 	movui	r2,36880
     310:	14c00035 	stwio	r19,0(r2)
	IOWR(CONVOLUTION_BASE, 5, (alt_u32)dst);
     314:	00a40514 	movui	r2,36884
     318:	16c00035 	stwio	sp,0(r2)
	IOWR(CONVOLUTION_BASE, 0, 1);
     31c:	00a40014 	movui	r2,36864
     320:	10c00035 	stwio	r3,0(r2)

	while ((IORD(CONVOLUTION_BASE, 0) & 0x2) != 0);
     324:	10c00037 	ldwio	r3,0(r2)
     328:	18c0008c 	andi	r3,r3,2
     32c:	183ffd1e 	bne	r3,zero,324 <_gp+0xffff1f54>

	printf_("Complete\n");
     330:	01000034 	movhi	r4,0
     334:	21188b04 	addi	r4,r4,25132
     338:	0001ddc0 	call	1ddc <printf_>
    printf_("========================================\n");
     33c:	01000034 	movhi	r4,0
     340:	21188e04 	addi	r4,r4,25144
     344:	0001ddc0 	call	1ddc <printf_>
	show_featuremap((alt_u16*)dst, XRES, YRES);
     348:	01800204 	movi	r6,8
     34c:	300b883a 	mov	r5,r6
     350:	d809883a 	mov	r4,sp
     354:	00001580 	call	158 <show_featuremap>

	k = 0;
     358:	0021883a 	mov	r16,zero
    while (1) {
        usleep(200000);
        k++;
        if (k>=50) {
     35c:	04400c44 	movi	r17,49
    printf_("========================================\n");
	show_featuremap((alt_u16*)dst, XRES, YRES);

	k = 0;
    while (1) {
        usleep(200000);
     360:	010000f4 	movhi	r4,3
     364:	21035004 	addi	r4,r4,3392
        k++;
     368:	84000044 	addi	r16,r16,1
    printf_("========================================\n");
	show_featuremap((alt_u16*)dst, XRES, YRES);

	k = 0;
    while (1) {
        usleep(200000);
     36c:	00061200 	call	6120 <usleep>
        k++;
        if (k>=50) {
     370:	8c00042e 	bgeu	r17,r16,384 <main+0x154>
        	printf_("\n");
     374:	01000034 	movhi	r4,0
     378:	21189804 	addi	r4,r4,25184
     37c:	0001ddc0 	call	1ddc <printf_>
        	k = 0;
     380:	0021883a 	mov	r16,zero
        }
		printf_("x");
     384:	01000034 	movhi	r4,0
     388:	21189904 	addi	r4,r4,25188
     38c:	0001ddc0 	call	1ddc <printf_>

    }
     390:	003ff306 	br	360 <_gp+0xffff1f90>

00000394 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
     394:	31c0022e 	bgeu	r6,r7,3a0 <_out_buffer+0xc>
    ((char*)buffer)[idx] = character;
     398:	298d883a 	add	r6,r5,r6
     39c:	31000005 	stb	r4,0(r6)
     3a0:	f800283a 	ret

000003a4 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
     3a4:	f800283a 	ret

000003a8 <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
     3a8:	defff604 	addi	sp,sp,-40
     3ac:	dc800215 	stw	r18,8(sp)
     3b0:	dc800d17 	ldw	r18,52(sp)
     3b4:	dd800615 	stw	r22,24(sp)
     3b8:	dd400515 	stw	r21,20(sp)
     3bc:	dd000415 	stw	r20,16(sp)
     3c0:	dcc00315 	stw	r19,12(sp)
     3c4:	dc400115 	stw	r17,4(sp)
     3c8:	dc000015 	stw	r16,0(sp)
     3cc:	dfc00915 	stw	ra,36(sp)
     3d0:	df000815 	stw	fp,32(sp)
     3d4:	ddc00715 	stw	r23,28(sp)
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
     3d8:	908000cc 	andi	r2,r18,3
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
     3dc:	2027883a 	mov	r19,r4
     3e0:	2829883a 	mov	r20,r5
     3e4:	3023883a 	mov	r17,r6
     3e8:	382b883a 	mov	r21,r7
     3ec:	dc000b17 	ldw	r16,44(sp)
     3f0:	dd800c17 	ldw	r22,48(sp)
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
     3f4:	1000021e 	bne	r2,zero,400 <_out_rev+0x58>
     3f8:	81afc83a 	sub	r23,r16,r6
     3fc:	00000406 	br	410 <_out_rev+0x68>
     400:	ddc00a17 	ldw	r23,40(sp)
     404:	bc2f883a 	add	r23,r23,r16
     408:	81a1883a 	add	r16,r16,r6
     40c:	00000906 	br	434 <_out_rev+0x8c>
    for (size_t i = len; i < width; i++) {
     410:	35c5883a 	add	r2,r6,r23
     414:	15bffa2e 	bgeu	r2,r22,400 <_gp+0xffff2030>
      out(' ', buffer, idx++, maxlen);
     418:	a80f883a 	mov	r7,r21
     41c:	a00b883a 	mov	r5,r20
     420:	01000804 	movi	r4,32
     424:	37000044 	addi	fp,r6,1
     428:	983ee83a 	callr	r19
     42c:	e00d883a 	mov	r6,fp
     430:	003ff706 	br	410 <_gp+0xffff2040>
     434:	bdffffc4 	addi	r23,r23,-1
    }
  }

  // reverse string
  while (len) {
     438:	34000726 	beq	r6,r16,458 <_out_rev+0xb0>
    out(buf[--len], buffer, idx++, maxlen);
     43c:	b9000007 	ldb	r4,0(r23)
     440:	a80f883a 	mov	r7,r21
     444:	a00b883a 	mov	r5,r20
     448:	37000044 	addi	fp,r6,1
     44c:	983ee83a 	callr	r19
     450:	e00d883a 	mov	r6,fp
     454:	003ff706 	br	434 <_gp+0xffff2064>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
     458:	9480008c 	andi	r18,r18,2
     45c:	90000a26 	beq	r18,zero,488 <_out_rev+0xe0>
    while (idx - start_idx < width) {
     460:	8445c83a 	sub	r2,r16,r17
     464:	1580082e 	bgeu	r2,r22,488 <_out_rev+0xe0>
      out(' ', buffer, idx++, maxlen);
     468:	800d883a 	mov	r6,r16
     46c:	84800044 	addi	r18,r16,1
     470:	a80f883a 	mov	r7,r21
     474:	a00b883a 	mov	r5,r20
     478:	01000804 	movi	r4,32
     47c:	983ee83a 	callr	r19
     480:	9021883a 	mov	r16,r18
     484:	003ff606 	br	460 <_gp+0xffff2090>
    }
  }

  return idx;
}
     488:	8005883a 	mov	r2,r16
     48c:	dfc00917 	ldw	ra,36(sp)
     490:	df000817 	ldw	fp,32(sp)
     494:	ddc00717 	ldw	r23,28(sp)
     498:	dd800617 	ldw	r22,24(sp)
     49c:	dd400517 	ldw	r21,20(sp)
     4a0:	dd000417 	ldw	r20,16(sp)
     4a4:	dcc00317 	ldw	r19,12(sp)
     4a8:	dc800217 	ldw	r18,8(sp)
     4ac:	dc400117 	ldw	r17,4(sp)
     4b0:	dc000017 	ldw	r16,0(sp)
     4b4:	dec00a04 	addi	sp,sp,40
     4b8:	f800283a 	ret

000004bc <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
     4bc:	deffff04 	addi	sp,sp,-4
     4c0:	da000717 	ldw	r8,28(sp)
     4c4:	dfc00015 	stw	ra,0(sp)
     4c8:	d8c00117 	ldw	r3,4(sp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
     4cc:	4300008c 	andi	r12,r8,2
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
     4d0:	d8800217 	ldw	r2,8(sp)
     4d4:	da800317 	ldw	r10,12(sp)
     4d8:	dac00417 	ldw	r11,16(sp)
     4dc:	db800517 	ldw	r14,20(sp)
     4e0:	da400617 	ldw	r9,24(sp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
     4e4:	60001a1e 	bne	r12,zero,550 <_ntoa_format+0x94>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     4e8:	48000726 	beq	r9,zero,508 <_ntoa_format+0x4c>
     4ec:	4300004c 	andi	r12,r8,1
     4f0:	60000526 	beq	r12,zero,508 <_ntoa_format+0x4c>
     4f4:	53003fcc 	andi	r12,r10,255
     4f8:	6000021e 	bne	r12,zero,504 <_ntoa_format+0x48>
     4fc:	4300030c 	andi	r12,r8,12
     500:	60000126 	beq	r12,zero,508 <_ntoa_format+0x4c>
      width--;
     504:	4a7fffc4 	addi	r9,r9,-1
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     508:	030007c4 	movi	r12,31
      buf[len++] = '0';
     50c:	03400c04 	movi	r13,48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     510:	13800436 	bltu	r2,r14,524 <_ntoa_format+0x68>
      buf[len++] = '0';
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     514:	4340004c 	andi	r13,r8,1
     518:	030007c4 	movi	r12,31
      buf[len++] = '0';
     51c:	03c00c04 	movi	r15,48
     520:	00000a06 	br	54c <_ntoa_format+0x90>
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     524:	60bffb36 	bltu	r12,r2,514 <_gp+0xffff2144>
      buf[len++] = '0';
     528:	189f883a 	add	r15,r3,r2
     52c:	7b400005 	stb	r13,0(r15)
     530:	10800044 	addi	r2,r2,1
     534:	003ff606 	br	510 <_gp+0xffff2140>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     538:	1240052e 	bgeu	r2,r9,550 <_ntoa_format+0x94>
     53c:	60800436 	bltu	r12,r2,550 <_ntoa_format+0x94>
      buf[len++] = '0';
     540:	18bf883a 	add	ra,r3,r2
     544:	fbc00005 	stb	r15,0(ra)
     548:	10800044 	addi	r2,r2,1
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     54c:	683ffa1e 	bne	r13,zero,538 <_gp+0xffff2168>
      buf[len++] = '0';
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
     550:	4300040c 	andi	r12,r8,16
     554:	60002726 	beq	r12,zero,5f4 <_ntoa_format+0x138>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
     558:	4301000c 	andi	r12,r8,1024
     55c:	03400404 	movi	r13,16
     560:	6000091e 	bne	r12,zero,588 <_ntoa_format+0xcc>
     564:	10000826 	beq	r2,zero,588 <_ntoa_format+0xcc>
     568:	13800126 	beq	r2,r14,570 <_ntoa_format+0xb4>
     56c:	1240061e 	bne	r2,r9,588 <_ntoa_format+0xcc>
      len--;
     570:	133fffc4 	addi	r12,r2,-1
      if (len && (base == 16U)) {
     574:	60000326 	beq	r12,zero,584 <_ntoa_format+0xc8>
     578:	5b400f1e 	bne	r11,r13,5b8 <_ntoa_format+0xfc>
        len--;
     57c:	10bfff84 	addi	r2,r2,-2
     580:	00000206 	br	58c <_ntoa_format+0xd0>
     584:	0005883a 	mov	r2,zero
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     588:	5b400c1e 	bne	r11,r13,5bc <_ntoa_format+0x100>
     58c:	42c0080c 	andi	r11,r8,32
     590:	030007c4 	movi	r12,31
     594:	5800041e 	bne	r11,zero,5a8 <_ntoa_format+0xec>
     598:	60802836 	bltu	r12,r2,63c <_ntoa_format+0x180>
      buf[len++] = 'x';
     59c:	1897883a 	add	r11,r3,r2
     5a0:	03001e04 	movi	r12,120
     5a4:	00000b06 	br	5d4 <_ntoa_format+0x118>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     5a8:	60802436 	bltu	r12,r2,63c <_ntoa_format+0x180>
      buf[len++] = 'X';
     5ac:	1897883a 	add	r11,r3,r2
     5b0:	03001604 	movi	r12,88
     5b4:	00000706 	br	5d4 <_ntoa_format+0x118>
     5b8:	6005883a 	mov	r2,r12
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     5bc:	03000084 	movi	r12,2
     5c0:	5b00061e 	bne	r11,r12,5dc <_ntoa_format+0x120>
     5c4:	02c007c4 	movi	r11,31
     5c8:	58801c36 	bltu	r11,r2,63c <_ntoa_format+0x180>
      buf[len++] = 'b';
     5cc:	1897883a 	add	r11,r3,r2
     5d0:	03001884 	movi	r12,98
     5d4:	5b000005 	stb	r12,0(r11)
     5d8:	10800044 	addi	r2,r2,1
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
     5dc:	02c007c4 	movi	r11,31
     5e0:	58801636 	bltu	r11,r2,63c <_ntoa_format+0x180>
      buf[len++] = '0';
     5e4:	1897883a 	add	r11,r3,r2
     5e8:	03000c04 	movi	r12,48
     5ec:	5b000005 	stb	r12,0(r11)
     5f0:	10800044 	addi	r2,r2,1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
     5f4:	02c007c4 	movi	r11,31
     5f8:	58801036 	bltu	r11,r2,63c <_ntoa_format+0x180>
    if (negative) {
     5fc:	52803fcc 	andi	r10,r10,255
     600:	50000326 	beq	r10,zero,610 <_ntoa_format+0x154>
      buf[len++] = '-';
     604:	1895883a 	add	r10,r3,r2
     608:	02c00b44 	movi	r11,45
     60c:	00000906 	br	634 <_ntoa_format+0x178>
    }
    else if (flags & FLAGS_PLUS) {
     610:	4280010c 	andi	r10,r8,4
     614:	50000326 	beq	r10,zero,624 <_ntoa_format+0x168>
      buf[len++] = '+';  // ignore the space if the '+' exists
     618:	1895883a 	add	r10,r3,r2
     61c:	02c00ac4 	movi	r11,43
     620:	00000406 	br	634 <_ntoa_format+0x178>
    }
    else if (flags & FLAGS_SPACE) {
     624:	4280020c 	andi	r10,r8,8
     628:	50000426 	beq	r10,zero,63c <_ntoa_format+0x180>
      buf[len++] = ' ';
     62c:	1895883a 	add	r10,r3,r2
     630:	02c00804 	movi	r11,32
     634:	52c00005 	stb	r11,0(r10)
     638:	10800044 	addi	r2,r2,1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
     63c:	da000415 	stw	r8,16(sp)
     640:	da400315 	stw	r9,12(sp)
     644:	d8800215 	stw	r2,8(sp)
     648:	d8c00115 	stw	r3,4(sp)
}
     64c:	dfc00017 	ldw	ra,0(sp)
     650:	dec00104 	addi	sp,sp,4
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
     654:	00003a81 	jmpi	3a8 <_out_rev>

00000658 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     658:	deffe404 	addi	sp,sp,-112
     65c:	d8c01d17 	ldw	r3,116(sp)
     660:	dc001215 	stw	r16,72(sp)
     664:	dc001c17 	ldw	r16,112(sp)
     668:	dd801815 	stw	r22,96(sp)
     66c:	dd401715 	stw	r21,92(sp)
     670:	dd001615 	stw	r20,88(sp)
     674:	dcc01515 	stw	r19,84(sp)
     678:	dc801415 	stw	r18,80(sp)
     67c:	dfc01b15 	stw	ra,108(sp)
     680:	df001a15 	stw	fp,104(sp)
     684:	ddc01915 	stw	r23,100(sp)
     688:	dc401315 	stw	r17,76(sp)
     68c:	d8c00f15 	stw	r3,60(sp)
     690:	2029883a 	mov	r20,r4
     694:	282b883a 	mov	r21,r5
     698:	302d883a 	mov	r22,r6
     69c:	dcc01e17 	ldw	r19,120(sp)
     6a0:	dc802117 	ldw	r18,132(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
     6a4:	8000021e 	bne	r16,zero,6b0 <_ntoa_long+0x58>
    flags &= ~FLAGS_HASH;
     6a8:	00bffbc4 	movi	r2,-17
     6ac:	90a4703a 	and	r18,r18,r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
     6b0:	9081000c 	andi	r2,r18,1024
     6b4:	10000126 	beq	r2,zero,6bc <_ntoa_long+0x64>
     6b8:	80002726 	beq	r16,zero,758 <_ntoa_long+0x100>
     6bc:	9080080c 	andi	r2,r18,32
     6c0:	10000226 	beq	r2,zero,6cc <_ntoa_long+0x74>
     6c4:	04401044 	movi	r17,65
     6c8:	00000106 	br	6d0 <_ntoa_long+0x78>
     6cc:	04401844 	movi	r17,97
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     6d0:	000d883a 	mov	r6,zero
     6d4:	07000244 	movi	fp,9
     6d8:	8c7ffd84 	addi	r17,r17,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     6dc:	05c00804 	movi	r23,32
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
     6e0:	8009883a 	mov	r4,r16
     6e4:	980b883a 	mov	r5,r19
     6e8:	d9801015 	stw	r6,64(sp)
     6ec:	d9c01115 	stw	r7,68(sp)
     6f0:	0002cc00 	call	2cc0 <__umodsi3>
     6f4:	d9801017 	ldw	r6,64(sp)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     6f8:	11003fcc 	andi	r4,r2,255
     6fc:	2100201c 	xori	r4,r4,128
     700:	213fe004 	addi	r4,r4,-128
     704:	32000044 	addi	r8,r6,1
     708:	d9c01117 	ldw	r7,68(sp)
     70c:	e1000216 	blt	fp,r4,718 <_ntoa_long+0xc0>
     710:	10800c04 	addi	r2,r2,48
     714:	00000106 	br	71c <_ntoa_long+0xc4>
     718:	8885883a 	add	r2,r17,r2
     71c:	d8c00704 	addi	r3,sp,28
     720:	198d883a 	add	r6,r3,r6
     724:	30800005 	stb	r2,0(r6)
      value /= base;
     728:	8009883a 	mov	r4,r16
     72c:	980b883a 	mov	r5,r19
     730:	d9c01115 	stw	r7,68(sp)
     734:	da001015 	stw	r8,64(sp)
     738:	0002c5c0 	call	2c5c <__udivsi3>
     73c:	1021883a 	mov	r16,r2
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     740:	d9c01117 	ldw	r7,68(sp)
     744:	da001017 	ldw	r8,64(sp)
     748:	10000426 	beq	r2,zero,75c <_ntoa_long+0x104>
     74c:	400d883a 	mov	r6,r8
     750:	45ffe31e 	bne	r8,r23,6e0 <_gp+0xffff2310>
     754:	00000106 	br	75c <_ntoa_long+0x104>

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
     758:	0011883a 	mov	r8,zero
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
     75c:	d8802017 	ldw	r2,128(sp)
     760:	d8c00f17 	ldw	r3,60(sp)
     764:	dc800615 	stw	r18,24(sp)
     768:	d8800515 	stw	r2,20(sp)
     76c:	d8801f17 	ldw	r2,124(sp)
     770:	1c803fcc 	andi	r18,r3,255
     774:	dcc00315 	stw	r19,12(sp)
     778:	d8800415 	stw	r2,16(sp)
     77c:	d8800704 	addi	r2,sp,28
     780:	dc800215 	stw	r18,8(sp)
     784:	da000115 	stw	r8,4(sp)
     788:	d8800015 	stw	r2,0(sp)
     78c:	b00d883a 	mov	r6,r22
     790:	a80b883a 	mov	r5,r21
     794:	a009883a 	mov	r4,r20
     798:	00004bc0 	call	4bc <_ntoa_format>
}
     79c:	dfc01b17 	ldw	ra,108(sp)
     7a0:	df001a17 	ldw	fp,104(sp)
     7a4:	ddc01917 	ldw	r23,100(sp)
     7a8:	dd801817 	ldw	r22,96(sp)
     7ac:	dd401717 	ldw	r21,92(sp)
     7b0:	dd001617 	ldw	r20,88(sp)
     7b4:	dcc01517 	ldw	r19,84(sp)
     7b8:	dc801417 	ldw	r18,80(sp)
     7bc:	dc401317 	ldw	r17,76(sp)
     7c0:	dc001217 	ldw	r16,72(sp)
     7c4:	dec01c04 	addi	sp,sp,112
     7c8:	f800283a 	ret

000007cc <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     7cc:	deffe204 	addi	sp,sp,-120
     7d0:	d8802017 	ldw	r2,128(sp)
     7d4:	da801e17 	ldw	r10,120(sp)
     7d8:	dac01f17 	ldw	r11,124(sp)
     7dc:	dd801a15 	stw	r22,104(sp)
     7e0:	dd401915 	stw	r21,100(sp)
     7e4:	dd001815 	stw	r20,96(sp)
     7e8:	dcc01715 	stw	r19,92(sp)
     7ec:	dc801615 	stw	r18,88(sp)
     7f0:	dc401515 	stw	r17,84(sp)
     7f4:	d8801015 	stw	r2,64(sp)
     7f8:	dfc01d15 	stw	ra,116(sp)
     7fc:	df001c15 	stw	fp,112(sp)
     800:	ddc01b15 	stw	r23,108(sp)
     804:	dc001415 	stw	r16,80(sp)
     808:	d9000f15 	stw	r4,60(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
     80c:	52c4b03a 	or	r2,r10,r11


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     810:	2829883a 	mov	r20,r5
     814:	302b883a 	mov	r21,r6
     818:	382d883a 	mov	r22,r7
     81c:	dc402117 	ldw	r17,132(sp)
     820:	dc802217 	ldw	r18,136(sp)
     824:	dcc02517 	ldw	r19,148(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
     828:	1000021e 	bne	r2,zero,834 <_ntoa_long_long+0x68>
    flags &= ~FLAGS_HASH;
     82c:	00fffbc4 	movi	r3,-17
     830:	98e6703a 	and	r19,r19,r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
     834:	98c1000c 	andi	r3,r19,1024
     838:	18000126 	beq	r3,zero,840 <_ntoa_long_long+0x74>
     83c:	10002d26 	beq	r2,zero,8f4 <_ntoa_long_long+0x128>
     840:	9880080c 	andi	r2,r19,32
     844:	10000226 	beq	r2,zero,850 <_ntoa_long_long+0x84>
     848:	04001044 	movi	r16,65
     84c:	00000106 	br	854 <_ntoa_long_long+0x88>
     850:	04001844 	movi	r16,97
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     854:	0013883a 	mov	r9,zero
     858:	07000244 	movi	fp,9
     85c:	843ffd84 	addi	r16,r16,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     860:	05c00804 	movi	r23,32
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
     864:	5009883a 	mov	r4,r10
     868:	580b883a 	mov	r5,r11
     86c:	880d883a 	mov	r6,r17
     870:	900f883a 	mov	r7,r18
     874:	da401115 	stw	r9,68(sp)
     878:	da801215 	stw	r10,72(sp)
     87c:	dac01315 	stw	r11,76(sp)
     880:	00025a00 	call	25a0 <__umoddi3>
     884:	da401117 	ldw	r9,68(sp)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     888:	10c03fcc 	andi	r3,r2,255
     88c:	18c0201c 	xori	r3,r3,128
     890:	18ffe004 	addi	r3,r3,-128
     894:	4b000044 	addi	r12,r9,1
     898:	da801217 	ldw	r10,72(sp)
     89c:	dac01317 	ldw	r11,76(sp)
     8a0:	e0c00216 	blt	fp,r3,8ac <_ntoa_long_long+0xe0>
     8a4:	10800c04 	addi	r2,r2,48
     8a8:	00000106 	br	8b0 <_ntoa_long_long+0xe4>
     8ac:	8085883a 	add	r2,r16,r2
     8b0:	d8c00704 	addi	r3,sp,28
     8b4:	1a53883a 	add	r9,r3,r9
     8b8:	48800005 	stb	r2,0(r9)
      value /= base;
     8bc:	5009883a 	mov	r4,r10
     8c0:	580b883a 	mov	r5,r11
     8c4:	880d883a 	mov	r6,r17
     8c8:	900f883a 	mov	r7,r18
     8cc:	db001115 	stw	r12,68(sp)
     8d0:	0001fa40 	call	1fa4 <__udivdi3>
     8d4:	1015883a 	mov	r10,r2
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     8d8:	10c4b03a 	or	r2,r2,r3
  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
     8dc:	1817883a 	mov	r11,r3
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     8e0:	db001117 	ldw	r12,68(sp)
     8e4:	10000426 	beq	r2,zero,8f8 <_ntoa_long_long+0x12c>
     8e8:	6013883a 	mov	r9,r12
     8ec:	65ffdd1e 	bne	r12,r23,864 <_gp+0xffff2494>
     8f0:	00000106 	br	8f8 <_ntoa_long_long+0x12c>
// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
     8f4:	0019883a 	mov	r12,zero
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
     8f8:	d8802417 	ldw	r2,144(sp)
     8fc:	d9000f17 	ldw	r4,60(sp)
     900:	dc400315 	stw	r17,12(sp)
     904:	d8800515 	stw	r2,20(sp)
     908:	d8802317 	ldw	r2,140(sp)
     90c:	d8c00704 	addi	r3,sp,28
     910:	dcc00615 	stw	r19,24(sp)
     914:	d8800415 	stw	r2,16(sp)
     918:	d8801017 	ldw	r2,64(sp)
     91c:	db000115 	stw	r12,4(sp)
     920:	d8c00015 	stw	r3,0(sp)
     924:	14403fcc 	andi	r17,r2,255
     928:	dc400215 	stw	r17,8(sp)
     92c:	b00f883a 	mov	r7,r22
     930:	a80d883a 	mov	r6,r21
     934:	a00b883a 	mov	r5,r20
     938:	00004bc0 	call	4bc <_ntoa_format>
}
     93c:	dfc01d17 	ldw	ra,116(sp)
     940:	df001c17 	ldw	fp,112(sp)
     944:	ddc01b17 	ldw	r23,108(sp)
     948:	dd801a17 	ldw	r22,104(sp)
     94c:	dd401917 	ldw	r21,100(sp)
     950:	dd001817 	ldw	r20,96(sp)
     954:	dcc01717 	ldw	r19,92(sp)
     958:	dc801617 	ldw	r18,88(sp)
     95c:	dc401517 	ldw	r17,84(sp)
     960:	dc001417 	ldw	r16,80(sp)
     964:	dec01e04 	addi	sp,sp,120
     968:	f800283a 	ret

0000096c <_out_char>:

// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
     96c:	21003fcc 	andi	r4,r4,255
     970:	2100201c 	xori	r4,r4,128
     974:	213fe004 	addi	r4,r4,-128
     978:	20000126 	beq	r4,zero,980 <_out_char+0x14>
    _putchar(character);
     97c:	000005c1 	jmpi	5c <_putchar>
     980:	f800283a 	ret

00000984 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)idx; (void)maxlen;
  if (character) {
     984:	21003fcc 	andi	r4,r4,255
     988:	2100201c 	xori	r4,r4,128
     98c:	213fe004 	addi	r4,r4,-128
     990:	20000326 	beq	r4,zero,9a0 <_out_fct+0x1c>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
     994:	28800017 	ldw	r2,0(r5)
     998:	29400117 	ldw	r5,4(r5)
     99c:	1000683a 	jmp	r2
     9a0:	f800283a 	ret

000009a4 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
     9a4:	deffe104 	addi	sp,sp,-124
     9a8:	dc401615 	stw	r17,88(sp)
     9ac:	dc001515 	stw	r16,84(sp)
     9b0:	dc401f17 	ldw	r17,124(sp)
     9b4:	dc002017 	ldw	r16,128(sp)
     9b8:	df001d15 	stw	fp,116(sp)
     9bc:	d9000d15 	stw	r4,52(sp)
     9c0:	d9400e15 	stw	r5,56(sp)
     9c4:	d9800f15 	stw	r6,60(sp)
     9c8:	3839883a 	mov	fp,r7

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
     9cc:	880d883a 	mov	r6,r17
     9d0:	800f883a 	mov	r7,r16
     9d4:	8809883a 	mov	r4,r17
     9d8:	800b883a 	mov	r5,r16
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
     9dc:	dd801b15 	stw	r22,108(sp)
     9e0:	dd001915 	stw	r20,100(sp)
     9e4:	dc801715 	stw	r18,92(sp)
     9e8:	dfc01e15 	stw	ra,120(sp)
     9ec:	ddc01c15 	stw	r23,112(sp)
     9f0:	dd401a15 	stw	r21,104(sp)
     9f4:	dcc01815 	stw	r19,96(sp)
     9f8:	dc802117 	ldw	r18,132(sp)
     9fc:	dd802217 	ldw	r22,136(sp)
     a00:	dd002317 	ldw	r20,140(sp)

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
     a04:	00049a40 	call	49a4 <__eqdf2>
     a08:	10000726 	beq	r2,zero,a28 <_ftoa+0x84>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
     a0c:	008000c4 	movi	r2,3
     a10:	d8800115 	stw	r2,4(sp)
     a14:	00800034 	movhi	r2,0
     a18:	dd000315 	stw	r20,12(sp)
     a1c:	dd800215 	stw	r22,8(sp)
     a20:	10989d04 	addi	r2,r2,25204
     a24:	00002106 	br	aac <_ftoa+0x108>
  if (value < -DBL_MAX)
     a28:	01bfffc4 	movi	r6,-1
     a2c:	01fffc34 	movhi	r7,65520
     a30:	398f883a 	add	r7,r7,r6
     a34:	8809883a 	mov	r4,r17
     a38:	800b883a 	mov	r5,r16
     a3c:	0004b080 	call	4b08 <__ledf2>
     a40:	1000070e 	bge	r2,zero,a60 <_ftoa+0xbc>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
     a44:	00800104 	movi	r2,4
     a48:	d8800115 	stw	r2,4(sp)
     a4c:	00800034 	movhi	r2,0
     a50:	dd000315 	stw	r20,12(sp)
     a54:	dd800215 	stw	r22,8(sp)
     a58:	10989e04 	addi	r2,r2,25208
     a5c:	00001306 	br	aac <_ftoa+0x108>
  if (value > DBL_MAX)
     a60:	01bfffc4 	movi	r6,-1
     a64:	01dffc34 	movhi	r7,32752
     a68:	398f883a 	add	r7,r7,r6
     a6c:	8809883a 	mov	r4,r17
     a70:	800b883a 	mov	r5,r16
     a74:	0004a2c0 	call	4a2c <__gedf2>
     a78:	00800e0e 	bge	zero,r2,ab4 <_ftoa+0x110>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
     a7c:	a080010c 	andi	r2,r20,4
     a80:	10000426 	beq	r2,zero,a94 <_ftoa+0xf0>
     a84:	00800034 	movhi	r2,0
     a88:	10989a04 	addi	r2,r2,25192
     a8c:	00c00104 	movi	r3,4
     a90:	00000306 	br	aa0 <_ftoa+0xfc>
     a94:	00800034 	movhi	r2,0
     a98:	10989c04 	addi	r2,r2,25200
     a9c:	00c000c4 	movi	r3,3
     aa0:	dd000315 	stw	r20,12(sp)
     aa4:	dd800215 	stw	r22,8(sp)
     aa8:	d8c00115 	stw	r3,4(sp)
     aac:	d8800015 	stw	r2,0(sp)
     ab0:	0000f806 	br	e94 <_ftoa+0x4f0>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
     ab4:	01d073b4 	movhi	r7,16846
     ab8:	000d883a 	mov	r6,zero
     abc:	39f35944 	addi	r7,r7,-12955
     ac0:	8809883a 	mov	r4,r17
     ac4:	800b883a 	mov	r5,r16
     ac8:	0004a2c0 	call	4a2c <__gedf2>
     acc:	00800716 	blt	zero,r2,aec <_ftoa+0x148>
     ad0:	01f073b4 	movhi	r7,49614
     ad4:	000d883a 	mov	r6,zero
     ad8:	39f35944 	addi	r7,r7,-12955
     adc:	8809883a 	mov	r4,r17
     ae0:	800b883a 	mov	r5,r16
     ae4:	0004b080 	call	4b08 <__ledf2>
     ae8:	10000b0e 	bge	r2,zero,b18 <_ftoa+0x174>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
     aec:	d9800f17 	ldw	r6,60(sp)
     af0:	d9400e17 	ldw	r5,56(sp)
     af4:	d9000d17 	ldw	r4,52(sp)
     af8:	dd000415 	stw	r20,16(sp)
     afc:	dd800315 	stw	r22,12(sp)
     b00:	dc800215 	stw	r18,8(sp)
     b04:	dc400015 	stw	r17,0(sp)
     b08:	dc000115 	stw	r16,4(sp)
     b0c:	e00f883a 	mov	r7,fp
     b10:	0000ed80 	call	ed8 <_etoa>
     b14:	0000e406 	br	ea8 <_ftoa+0x504>
#endif
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
     b18:	000d883a 	mov	r6,zero
     b1c:	000f883a 	mov	r7,zero
     b20:	8809883a 	mov	r4,r17
     b24:	800b883a 	mov	r5,r16
     b28:	0004b080 	call	4b08 <__ledf2>
     b2c:	10000a0e 	bge	r2,zero,b58 <_ftoa+0x1b4>
    negative = true;
    value = 0 - value;
     b30:	880d883a 	mov	r6,r17
     b34:	800f883a 	mov	r7,r16
     b38:	0009883a 	mov	r4,zero
     b3c:	000b883a 	mov	r5,zero
     b40:	00054680 	call	5468 <__subdf3>
     b44:	1023883a 	mov	r17,r2
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
    negative = true;
     b48:	00800044 	movi	r2,1
    value = 0 - value;
     b4c:	1821883a 	mov	r16,r3
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
    negative = true;
     b50:	d8801005 	stb	r2,64(sp)
     b54:	00000106 	br	b5c <_ftoa+0x1b8>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
     b58:	d8001005 	stb	zero,64(sp)
    negative = true;
    value = 0 - value;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
     b5c:	a081000c 	andi	r2,r20,1024
     b60:	1000011e 	bne	r2,zero,b68 <_ftoa+0x1c4>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
     b64:	04800184 	movi	r18,6
     b68:	002b883a 	mov	r21,zero
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     b6c:	00800244 	movi	r2,9
    buf[len++] = '0';
     b70:	00c00c04 	movi	r3,48
  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     b74:	01000804 	movi	r4,32
     b78:	1480062e 	bgeu	r2,r18,b94 <_ftoa+0x1f0>
    buf[len++] = '0';
     b7c:	d9800504 	addi	r6,sp,20
     b80:	354b883a 	add	r5,r6,r21
     b84:	28c00005 	stb	r3,0(r5)
     b88:	ad400044 	addi	r21,r21,1
    prec--;
     b8c:	94bfffc4 	addi	r18,r18,-1
  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     b90:	a93ff91e 	bne	r21,r4,b78 <_gp+0xffff27a8>
    buf[len++] = '0';
    prec--;
  }

  int whole = (int)value;
     b94:	800b883a 	mov	r5,r16
     b98:	8809883a 	mov	r4,r17
     b9c:	0005d640 	call	5d64 <__fixdfsi>
     ba0:	1027883a 	mov	r19,r2
  double tmp = (value - whole) * pow10[prec];
     ba4:	900490fa 	slli	r2,r18,3
     ba8:	00c00034 	movhi	r3,0
     bac:	18d8a004 	addi	r3,r3,25216
     bb0:	1885883a 	add	r2,r3,r2
     bb4:	10c00017 	ldw	r3,0(r2)
     bb8:	10800117 	ldw	r2,4(r2)
     bbc:	9809883a 	mov	r4,r19
     bc0:	d8c01115 	stw	r3,68(sp)
     bc4:	d8801215 	stw	r2,72(sp)
     bc8:	0005de40 	call	5de4 <__floatsidf>
     bcc:	100d883a 	mov	r6,r2
     bd0:	180f883a 	mov	r7,r3
     bd4:	8809883a 	mov	r4,r17
     bd8:	800b883a 	mov	r5,r16
     bdc:	00054680 	call	5468 <__subdf3>
     be0:	d9801117 	ldw	r6,68(sp)
     be4:	d9c01217 	ldw	r7,72(sp)
     be8:	1009883a 	mov	r4,r2
     bec:	180b883a 	mov	r5,r3
     bf0:	0004bfc0 	call	4bfc <__muldf3>
  unsigned long frac = (unsigned long)tmp;
     bf4:	180b883a 	mov	r5,r3
     bf8:	1009883a 	mov	r4,r2
     bfc:	d8c01415 	stw	r3,80(sp)
     c00:	d8801315 	stw	r2,76(sp)
     c04:	0001f300 	call	1f30 <__fixunsdfsi>
  diff = tmp - frac;
     c08:	1009883a 	mov	r4,r2
    prec--;
  }

  int whole = (int)value;
  double tmp = (value - whole) * pow10[prec];
  unsigned long frac = (unsigned long)tmp;
     c0c:	102f883a 	mov	r23,r2
  diff = tmp - frac;
     c10:	0005ec00 	call	5ec0 <__floatunsidf>
     c14:	da401417 	ldw	r9,80(sp)
     c18:	da801317 	ldw	r10,76(sp)
     c1c:	100d883a 	mov	r6,r2
     c20:	480b883a 	mov	r5,r9
     c24:	5009883a 	mov	r4,r10
     c28:	180f883a 	mov	r7,r3
     c2c:	00054680 	call	5468 <__subdf3>

  if (diff > 0.5) {
     c30:	180b883a 	mov	r5,r3
     c34:	000d883a 	mov	r6,zero
     c38:	01cff834 	movhi	r7,16352
     c3c:	1009883a 	mov	r4,r2
     c40:	d8c01315 	stw	r3,76(sp)
     c44:	d8801415 	stw	r2,80(sp)
     c48:	0004a2c0 	call	4a2c <__gedf2>
     c4c:	d8c01317 	ldw	r3,76(sp)
     c50:	da401417 	ldw	r9,80(sp)
     c54:	00800c0e 	bge	zero,r2,c88 <_ftoa+0x2e4>
    ++frac;
     c58:	bdc00044 	addi	r23,r23,1
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
     c5c:	b809883a 	mov	r4,r23
     c60:	0005ec00 	call	5ec0 <__floatunsidf>
     c64:	d9001117 	ldw	r4,68(sp)
     c68:	d9401217 	ldw	r5,72(sp)
     c6c:	100d883a 	mov	r6,r2
     c70:	180f883a 	mov	r7,r3
     c74:	0004b080 	call	4b08 <__ledf2>
     c78:	00800d16 	blt	zero,r2,cb0 <_ftoa+0x30c>
      frac = 0;
      ++whole;
     c7c:	9cc00044 	addi	r19,r19,1

  if (diff > 0.5) {
    ++frac;
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
      frac = 0;
     c80:	002f883a 	mov	r23,zero
     c84:	00000a06 	br	cb0 <_ftoa+0x30c>
      ++whole;
    }
  }
  else if (diff < 0.5) {
     c88:	000d883a 	mov	r6,zero
     c8c:	01cff834 	movhi	r7,16352
     c90:	4809883a 	mov	r4,r9
     c94:	180b883a 	mov	r5,r3
     c98:	0004b080 	call	4b08 <__ledf2>
     c9c:	10000416 	blt	r2,zero,cb0 <_ftoa+0x30c>
  }
  else if ((frac == 0U) || (frac & 1U)) {
     ca0:	b8000226 	beq	r23,zero,cac <_ftoa+0x308>
     ca4:	b880004c 	andi	r2,r23,1
     ca8:	10000126 	beq	r2,zero,cb0 <_ftoa+0x30c>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
     cac:	bdc00044 	addi	r23,r23,1
  }

  if (prec == 0U) {
     cb0:	9000191e 	bne	r18,zero,d18 <_ftoa+0x374>
    diff = value - (double)whole;
     cb4:	9809883a 	mov	r4,r19
     cb8:	0005de40 	call	5de4 <__floatsidf>
     cbc:	8809883a 	mov	r4,r17
     cc0:	800b883a 	mov	r5,r16
     cc4:	100d883a 	mov	r6,r2
     cc8:	180f883a 	mov	r7,r3
     ccc:	00054680 	call	5468 <__subdf3>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
     cd0:	000d883a 	mov	r6,zero
     cd4:	01cff834 	movhi	r7,16352
     cd8:	1009883a 	mov	r4,r2
     cdc:	180b883a 	mov	r5,r3
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
  }

  if (prec == 0U) {
    diff = value - (double)whole;
     ce0:	1023883a 	mov	r17,r2
     ce4:	1821883a 	mov	r16,r3
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
     ce8:	0004b080 	call	4b08 <__ledf2>
     cec:	1000060e 	bge	r2,zero,d08 <_ftoa+0x364>
     cf0:	000d883a 	mov	r6,zero
     cf4:	01cff834 	movhi	r7,16352
     cf8:	8809883a 	mov	r4,r17
     cfc:	800b883a 	mov	r5,r16
     d00:	0004a2c0 	call	4a2c <__gedf2>
     d04:	0080240e 	bge	zero,r2,d98 <_ftoa+0x3f4>
     d08:	9880004c 	andi	r2,r19,1
     d0c:	10002226 	beq	r2,zero,d98 <_ftoa+0x3f4>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
     d10:	9cc00044 	addi	r19,r19,1
     d14:	00002006 	br	d98 <_ftoa+0x3f4>
  else if ((frac == 0U) || (frac & 1U)) {
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
  }

  if (prec == 0U) {
     d18:	a805883a 	mov	r2,r21
    }
  }
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
     d1c:	04400804 	movi	r17,32
     d20:	14402f26 	beq	r2,r17,de0 <_ftoa+0x43c>
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
     d24:	d9000504 	addi	r4,sp,20
     d28:	20a1883a 	add	r16,r4,r2
     d2c:	01400284 	movi	r5,10
     d30:	b809883a 	mov	r4,r23
     d34:	15400044 	addi	r21,r2,1
     d38:	0002cc00 	call	2cc0 <__umodsi3>
     d3c:	10800c04 	addi	r2,r2,48
      if (!(frac /= 10U)) {
     d40:	b809883a 	mov	r4,r23
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
     d44:	80800005 	stb	r2,0(r16)
      if (!(frac /= 10U)) {
     d48:	01400284 	movi	r5,10
     d4c:	0002c5c0 	call	2c5c <__udivsi3>
     d50:	102f883a 	mov	r23,r2
  }
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
     d54:	94bfffc4 	addi	r18,r18,-1
      buf[len++] = (char)(48U + (frac % 10U));
     d58:	a805883a 	mov	r2,r21
      if (!(frac /= 10U)) {
     d5c:	b83ff01e 	bne	r23,zero,d20 <_gp+0xffff2950>
     d60:	9565883a 	add	r18,r18,r21
        break;
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
     d64:	01400804 	movi	r5,32
      buf[len++] = '0';
     d68:	01800c04 	movi	r6,48
      if (!(frac /= 10U)) {
        break;
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
     d6c:	11401c26 	beq	r2,r5,de0 <_ftoa+0x43c>
     d70:	d9000504 	addi	r4,sp,20
     d74:	2087883a 	add	r3,r4,r2
     d78:	11000044 	addi	r4,r2,1
     d7c:	14800326 	beq	r2,r18,d8c <_ftoa+0x3e8>
      buf[len++] = '0';
     d80:	19800005 	stb	r6,0(r3)
     d84:	2005883a 	mov	r2,r4
     d88:	003ff806 	br	d6c <_gp+0xffff299c>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
      // add decimal
      buf[len++] = '.';
     d8c:	00800b84 	movi	r2,46
     d90:	202b883a 	mov	r21,r4
     d94:	18800005 	stb	r2,0(r3)
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
     d98:	a805883a 	mov	r2,r21
      buf[len++] = '.';
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
     d9c:	04800804 	movi	r18,32
     da0:	14800f26 	beq	r2,r18,de0 <_ftoa+0x43c>
    buf[len++] = (char)(48 + (whole % 10));
     da4:	d9400504 	addi	r5,sp,20
     da8:	28a3883a 	add	r17,r5,r2
     dac:	9809883a 	mov	r4,r19
     db0:	01400284 	movi	r5,10
     db4:	14000044 	addi	r16,r2,1
     db8:	0002be80 	call	2be8 <__modsi3>
     dbc:	10800c04 	addi	r2,r2,48
    if (!(whole /= 10)) {
     dc0:	9809883a 	mov	r4,r19
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    buf[len++] = (char)(48 + (whole % 10));
     dc4:	88800005 	stb	r2,0(r17)
    if (!(whole /= 10)) {
     dc8:	01400284 	movi	r5,10
     dcc:	0002b640 	call	2b64 <__divsi3>
     dd0:	1027883a 	mov	r19,r2
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    buf[len++] = (char)(48 + (whole % 10));
     dd4:	8005883a 	mov	r2,r16
    if (!(whole /= 10)) {
     dd8:	983ff11e 	bne	r19,zero,da0 <_gp+0xffff29d0>
     ddc:	00000106 	br	de4 <_ftoa+0x440>
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
     de0:	04000804 	movi	r16,32
      break;
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
     de4:	a0c000cc 	andi	r3,r20,3
     de8:	00800044 	movi	r2,1
     dec:	18800f1e 	bne	r3,r2,e2c <_ftoa+0x488>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     df0:	b0000e26 	beq	r22,zero,e2c <_ftoa+0x488>
     df4:	d8801003 	ldbu	r2,64(sp)
     df8:	1000021e 	bne	r2,zero,e04 <_ftoa+0x460>
     dfc:	a080030c 	andi	r2,r20,12
     e00:	10000126 	beq	r2,zero,e08 <_ftoa+0x464>
      width--;
     e04:	b5bfffc4 	addi	r22,r22,-1
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     e08:	00800804 	movi	r2,32
      buf[len++] = '0';
     e0c:	00c00c04 	movi	r3,48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     e10:	8580062e 	bgeu	r16,r22,e2c <_ftoa+0x488>
     e14:	80801a26 	beq	r16,r2,e80 <_ftoa+0x4dc>
      buf[len++] = '0';
     e18:	d9800504 	addi	r6,sp,20
     e1c:	3409883a 	add	r4,r6,r16
     e20:	20c00005 	stb	r3,0(r4)
     e24:	84000044 	addi	r16,r16,1
     e28:	003ff906 	br	e10 <_gp+0xffff2a40>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
     e2c:	008007c4 	movi	r2,31
     e30:	14001336 	bltu	r2,r16,e80 <_ftoa+0x4dc>
    if (negative) {
     e34:	d8801003 	ldbu	r2,64(sp)
     e38:	10000426 	beq	r2,zero,e4c <_ftoa+0x4a8>
      buf[len++] = '-';
     e3c:	d8c00504 	addi	r3,sp,20
     e40:	1c05883a 	add	r2,r3,r16
     e44:	00c00b44 	movi	r3,45
     e48:	00000b06 	br	e78 <_ftoa+0x4d4>
    }
    else if (flags & FLAGS_PLUS) {
     e4c:	a080010c 	andi	r2,r20,4
     e50:	10000426 	beq	r2,zero,e64 <_ftoa+0x4c0>
      buf[len++] = '+';  // ignore the space if the '+' exists
     e54:	d9000504 	addi	r4,sp,20
     e58:	2405883a 	add	r2,r4,r16
     e5c:	00c00ac4 	movi	r3,43
     e60:	00000506 	br	e78 <_ftoa+0x4d4>
    }
    else if (flags & FLAGS_SPACE) {
     e64:	a080020c 	andi	r2,r20,8
     e68:	10000526 	beq	r2,zero,e80 <_ftoa+0x4dc>
      buf[len++] = ' ';
     e6c:	d9400504 	addi	r5,sp,20
     e70:	2c05883a 	add	r2,r5,r16
     e74:	00c00804 	movi	r3,32
     e78:	10c00005 	stb	r3,0(r2)
     e7c:	84000044 	addi	r16,r16,1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
     e80:	d9800504 	addi	r6,sp,20
     e84:	dd000315 	stw	r20,12(sp)
     e88:	dd800215 	stw	r22,8(sp)
     e8c:	dc000115 	stw	r16,4(sp)
     e90:	d9800015 	stw	r6,0(sp)
     e94:	d9800f17 	ldw	r6,60(sp)
     e98:	d9400e17 	ldw	r5,56(sp)
     e9c:	d9000d17 	ldw	r4,52(sp)
     ea0:	e00f883a 	mov	r7,fp
     ea4:	00003a80 	call	3a8 <_out_rev>
}
     ea8:	dfc01e17 	ldw	ra,120(sp)
     eac:	df001d17 	ldw	fp,116(sp)
     eb0:	ddc01c17 	ldw	r23,112(sp)
     eb4:	dd801b17 	ldw	r22,108(sp)
     eb8:	dd401a17 	ldw	r21,104(sp)
     ebc:	dd001917 	ldw	r20,100(sp)
     ec0:	dcc01817 	ldw	r19,96(sp)
     ec4:	dc801717 	ldw	r18,92(sp)
     ec8:	dc401617 	ldw	r17,88(sp)
     ecc:	dc001517 	ldw	r16,84(sp)
     ed0:	dec01f04 	addi	sp,sp,124
     ed4:	f800283a 	ret

00000ed8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
     ed8:	deffe504 	addi	sp,sp,-108
     edc:	dd401615 	stw	r21,88(sp)
     ee0:	dc401215 	stw	r17,72(sp)
     ee4:	dd401c17 	ldw	r21,112(sp)
     ee8:	dc401b17 	ldw	r17,108(sp)
     eec:	d8801e17 	ldw	r2,120(sp)
     ef0:	d9000615 	stw	r4,24(sp)
     ef4:	d9400715 	stw	r5,28(sp)
     ef8:	d9800b15 	stw	r6,44(sp)
     efc:	d9c00815 	stw	r7,32(sp)
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
     f00:	880d883a 	mov	r6,r17
     f04:	a80f883a 	mov	r7,r21
     f08:	8809883a 	mov	r4,r17
     f0c:	a80b883a 	mov	r5,r21


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
     f10:	dd801715 	stw	r22,92(sp)
     f14:	dd001515 	stw	r20,84(sp)
     f18:	dfc01a15 	stw	ra,104(sp)
     f1c:	df001915 	stw	fp,100(sp)
     f20:	ddc01815 	stw	r23,96(sp)
     f24:	dcc01415 	stw	r19,80(sp)
     f28:	dc801315 	stw	r18,76(sp)
     f2c:	dc001115 	stw	r16,68(sp)
     f30:	dd001d17 	ldw	r20,116(sp)
     f34:	d8800a15 	stw	r2,40(sp)
     f38:	dd801f17 	ldw	r22,124(sp)
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
     f3c:	00049a40 	call	49a4 <__eqdf2>
     f40:	10000e1e 	bne	r2,zero,f7c <_etoa+0xa4>
     f44:	01bfffc4 	movi	r6,-1
     f48:	01dffc34 	movhi	r7,32752
     f4c:	398f883a 	add	r7,r7,r6
     f50:	8809883a 	mov	r4,r17
     f54:	a80b883a 	mov	r5,r21
     f58:	0004a2c0 	call	4a2c <__gedf2>
     f5c:	00800716 	blt	zero,r2,f7c <_etoa+0xa4>
     f60:	01bfffc4 	movi	r6,-1
     f64:	01fffc34 	movhi	r7,65520
     f68:	398f883a 	add	r7,r7,r6
     f6c:	8809883a 	mov	r4,r17
     f70:	a80b883a 	mov	r5,r21
     f74:	0004b080 	call	4b08 <__ledf2>
     f78:	1000160e 	bge	r2,zero,fd4 <_etoa+0xfc>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     f7c:	d8c00a17 	ldw	r3,40(sp)
     f80:	d9c00817 	ldw	r7,32(sp)
     f84:	d9800b17 	ldw	r6,44(sp)
     f88:	d9400717 	ldw	r5,28(sp)
     f8c:	d9000617 	ldw	r4,24(sp)
     f90:	dd801f15 	stw	r22,124(sp)
     f94:	d8c01e15 	stw	r3,120(sp)
     f98:	dd001d15 	stw	r20,116(sp)
     f9c:	dc401b15 	stw	r17,108(sp)
     fa0:	dd401c15 	stw	r21,112(sp)
    if (flags & FLAGS_LEFT) {
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
     fa4:	dfc01a17 	ldw	ra,104(sp)
     fa8:	df001917 	ldw	fp,100(sp)
     fac:	ddc01817 	ldw	r23,96(sp)
     fb0:	dd801717 	ldw	r22,92(sp)
     fb4:	dd401617 	ldw	r21,88(sp)
     fb8:	dd001517 	ldw	r20,84(sp)
     fbc:	dcc01417 	ldw	r19,80(sp)
     fc0:	dc801317 	ldw	r18,76(sp)
     fc4:	dc401217 	ldw	r17,72(sp)
     fc8:	dc001117 	ldw	r16,68(sp)
     fcc:	dec01b04 	addi	sp,sp,108
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     fd0:	00009a41 	jmpi	9a4 <_ftoa>
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
     fd4:	000d883a 	mov	r6,zero
     fd8:	000f883a 	mov	r7,zero
     fdc:	8809883a 	mov	r4,r17
     fe0:	a80b883a 	mov	r5,r21
     fe4:	0004b080 	call	4b08 <__ledf2>
    value = -value;
     fe8:	dc400c15 	stw	r17,48(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
     fec:	1000020e 	bge	r2,zero,ff8 <_etoa+0x120>
    value = -value;
     ff0:	aca0003c 	xorhi	r18,r21,32768
     ff4:	00000106 	br	ffc <_etoa+0x124>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
     ff8:	a825883a 	mov	r18,r21
    value = -value;
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
     ffc:	b101000c 	andi	r4,r22,1024
    1000:	d9000915 	stw	r4,36(sp)
    1004:	2000011e 	bne	r4,zero,100c <_etoa+0x134>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    1008:	05000184 	movi	r20,6

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    100c:	9008d53a 	srli	r4,r18,20
    1010:	2101ffcc 	andi	r4,r4,2047
    1014:	213f0044 	addi	r4,r4,-1023
    1018:	0005de40 	call	5de4 <__floatsidf>
    101c:	019427f4 	movhi	r6,20639
    1020:	01cff4f4 	movhi	r7,16339
    1024:	319e7ec4 	addi	r6,r6,31227
    1028:	39d104c4 	addi	r7,r7,17427
    102c:	1009883a 	mov	r4,r2
    1030:	180b883a 	mov	r5,r3
    1034:	0004bfc0 	call	4bfc <__muldf3>
    1038:	01a2d874 	movhi	r6,35681
    103c:	01cff1f4 	movhi	r7,16327
    1040:	31b22cc4 	addi	r6,r6,-14157
    1044:	39e28a04 	addi	r7,r7,-30168
    1048:	1009883a 	mov	r4,r2
    104c:	180b883a 	mov	r5,r3
    1050:	00037280 	call	3728 <__adddf3>
    double   F;
  } conv;

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    1054:	01400434 	movhi	r5,16
    1058:	297fffc4 	addi	r5,r5,-1
    105c:	914a703a 	and	r5,r18,r5
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    1060:	000d883a 	mov	r6,zero
    1064:	01cffe34 	movhi	r7,16376
    1068:	8809883a 	mov	r4,r17
    106c:	294ffc34 	orhi	r5,r5,16368
    1070:	1027883a 	mov	r19,r2
    1074:	1821883a 	mov	r16,r3
    1078:	00054680 	call	5468 <__subdf3>
    107c:	0198dbf4 	movhi	r6,25455
    1080:	01cff4f4 	movhi	r7,16339
    1084:	3190d844 	addi	r6,r6,17249
    1088:	39e1e9c4 	addi	r7,r7,-30809
    108c:	1009883a 	mov	r4,r2
    1090:	180b883a 	mov	r5,r3
    1094:	0004bfc0 	call	4bfc <__muldf3>
    1098:	100d883a 	mov	r6,r2
    109c:	180f883a 	mov	r7,r3
    10a0:	9809883a 	mov	r4,r19
    10a4:	800b883a 	mov	r5,r16
    10a8:	00037280 	call	3728 <__adddf3>
    10ac:	180b883a 	mov	r5,r3
    10b0:	1009883a 	mov	r4,r2
    10b4:	0005d640 	call	5d64 <__fixdfsi>
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    10b8:	1009883a 	mov	r4,r2

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    10bc:	1021883a 	mov	r16,r2
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    10c0:	0005de40 	call	5de4 <__floatsidf>
    10c4:	01825eb4 	movhi	r6,2426
    10c8:	01d002f4 	movhi	r7,16395
    10cc:	31a8dc44 	addi	r6,r6,-23695
    10d0:	39e4d3c4 	addi	r7,r7,-27825
    10d4:	1009883a 	mov	r4,r2
    10d8:	180b883a 	mov	r5,r3
    10dc:	102f883a 	mov	r23,r2
    10e0:	1827883a 	mov	r19,r3
    10e4:	0004bfc0 	call	4bfc <__muldf3>
    10e8:	000d883a 	mov	r6,zero
    10ec:	01cff834 	movhi	r7,16352
    10f0:	1009883a 	mov	r4,r2
    10f4:	180b883a 	mov	r5,r3
    10f8:	00037280 	call	3728 <__adddf3>
    10fc:	180b883a 	mov	r5,r3
    1100:	1009883a 	mov	r4,r2
    1104:	0005d640 	call	5d64 <__fixdfsi>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    1108:	01aeed74 	movhi	r6,48053
    110c:	01d000b4 	movhi	r7,16386
    1110:	980b883a 	mov	r5,r19
    1114:	31954584 	addi	r6,r6,21782
    1118:	39daec44 	addi	r7,r7,27569
    111c:	b809883a 	mov	r4,r23
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    1120:	d8800d15 	stw	r2,52(sp)
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    1124:	0004bfc0 	call	4bfc <__muldf3>
    1128:	d9000d17 	ldw	r4,52(sp)
    112c:	102f883a 	mov	r23,r2
    1130:	1827883a 	mov	r19,r3
    1134:	0005de40 	call	5de4 <__floatsidf>
    1138:	01bfbeb4 	movhi	r6,65274
    113c:	01cff9b4 	movhi	r7,16358
    1140:	318e7bc4 	addi	r6,r6,14831
    1144:	39cb9084 	addi	r7,r7,11842
    1148:	1009883a 	mov	r4,r2
    114c:	180b883a 	mov	r5,r3
    1150:	0004bfc0 	call	4bfc <__muldf3>
    1154:	b809883a 	mov	r4,r23
    1158:	980b883a 	mov	r5,r19
    115c:	100d883a 	mov	r6,r2
    1160:	180f883a 	mov	r7,r3
    1164:	00054680 	call	5468 <__subdf3>
  const double z2 = z * z;
    1168:	100d883a 	mov	r6,r2
    116c:	180f883a 	mov	r7,r3
    1170:	1009883a 	mov	r4,r2
    1174:	180b883a 	mov	r5,r3
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    1178:	1839883a 	mov	fp,r3
  const double z2 = z * z;
    117c:	d8800e15 	stw	r2,56(sp)
    1180:	0004bfc0 	call	4bfc <__muldf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    1184:	da400e17 	ldw	r9,56(sp)
    1188:	e00f883a 	mov	r7,fp
    118c:	e00b883a 	mov	r5,fp
    1190:	480d883a 	mov	r6,r9
    1194:	4809883a 	mov	r4,r9
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
    1198:	1027883a 	mov	r19,r2
    119c:	182f883a 	mov	r23,r3
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    11a0:	00037280 	call	3728 <__adddf3>
    11a4:	9809883a 	mov	r4,r19
    11a8:	b80b883a 	mov	r5,r23
    11ac:	000d883a 	mov	r6,zero
    11b0:	01d00b34 	movhi	r7,16428
    11b4:	d8c01015 	stw	r3,64(sp)
    11b8:	d8800f15 	stw	r2,60(sp)
    11bc:	0003fd40 	call	3fd4 <__divdf3>
    11c0:	000d883a 	mov	r6,zero
    11c4:	01d00934 	movhi	r7,16420
    11c8:	1009883a 	mov	r4,r2
    11cc:	180b883a 	mov	r5,r3
    11d0:	00037280 	call	3728 <__adddf3>
    11d4:	9809883a 	mov	r4,r19
    11d8:	b80b883a 	mov	r5,r23
    11dc:	100d883a 	mov	r6,r2
    11e0:	180f883a 	mov	r7,r3
    11e4:	0003fd40 	call	3fd4 <__divdf3>
    11e8:	000d883a 	mov	r6,zero
    11ec:	01d00634 	movhi	r7,16408
    11f0:	1009883a 	mov	r4,r2
    11f4:	180b883a 	mov	r5,r3
    11f8:	00037280 	call	3728 <__adddf3>
    11fc:	9809883a 	mov	r4,r19
    1200:	b80b883a 	mov	r5,r23
    1204:	100d883a 	mov	r6,r2
    1208:	180f883a 	mov	r7,r3
    120c:	0003fd40 	call	3fd4 <__divdf3>
    1210:	da400e17 	ldw	r9,56(sp)
    1214:	e00f883a 	mov	r7,fp
    1218:	0009883a 	mov	r4,zero
    121c:	480d883a 	mov	r6,r9
    1220:	01500034 	movhi	r5,16384
    1224:	102f883a 	mov	r23,r2
    1228:	1827883a 	mov	r19,r3
    122c:	00054680 	call	5468 <__subdf3>
    1230:	b809883a 	mov	r4,r23
    1234:	100d883a 	mov	r6,r2
    1238:	180f883a 	mov	r7,r3
    123c:	980b883a 	mov	r5,r19
    1240:	00037280 	call	3728 <__adddf3>
    1244:	dac00f17 	ldw	r11,60(sp)
    1248:	da801017 	ldw	r10,64(sp)
    124c:	100d883a 	mov	r6,r2
    1250:	5809883a 	mov	r4,r11
    1254:	500b883a 	mov	r5,r10
    1258:	180f883a 	mov	r7,r3
    125c:	0003fd40 	call	3fd4 <__divdf3>
    1260:	000d883a 	mov	r6,zero
    1264:	01cffc34 	movhi	r7,16368
    1268:	1009883a 	mov	r4,r2
    126c:	180b883a 	mov	r5,r3
    1270:	00037280 	call	3728 <__adddf3>
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
    1274:	d9000d17 	ldw	r4,52(sp)
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    1278:	000d883a 	mov	r6,zero
    127c:	180b883a 	mov	r5,r3
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
    1280:	21c0ffc4 	addi	r7,r4,1023
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    1284:	380e953a 	slli	r7,r7,20
    1288:	1009883a 	mov	r4,r2
    128c:	0004bfc0 	call	4bfc <__muldf3>
  // correct for rounding errors
  if (value < conv.F) {
    1290:	180f883a 	mov	r7,r3
    1294:	100d883a 	mov	r6,r2
    1298:	8809883a 	mov	r4,r17
    129c:	900b883a 	mov	r5,r18
    12a0:	d8c00e15 	stw	r3,56(sp)
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    12a4:	102f883a 	mov	r23,r2
  // correct for rounding errors
  if (value < conv.F) {
    12a8:	0004b080 	call	4b08 <__ledf2>
    12ac:	d8c00e17 	ldw	r3,56(sp)
    12b0:	1000070e 	bge	r2,zero,12d0 <_etoa+0x3f8>
    expval--;
    conv.F /= 10;
    12b4:	b809883a 	mov	r4,r23
    12b8:	000d883a 	mov	r6,zero
    12bc:	01d00934 	movhi	r7,16420
    12c0:	180b883a 	mov	r5,r3
    12c4:	0003fd40 	call	3fd4 <__divdf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
  // correct for rounding errors
  if (value < conv.F) {
    expval--;
    12c8:	843fffc4 	addi	r16,r16,-1
    conv.F /= 10;
    12cc:	102f883a 	mov	r23,r2
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    12d0:	808018c4 	addi	r2,r16,99
    12d4:	04c03184 	movi	r19,198
    12d8:	98a7403a 	cmpgeu	r19,r19,r2
    12dc:	00800144 	movi	r2,5
    12e0:	14e7c83a 	sub	r19,r2,r19

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
    12e4:	b082000c 	andi	r2,r22,2048
    12e8:	10001f26 	beq	r2,zero,1368 <_etoa+0x490>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
    12ec:	01bac734 	movhi	r6,60188
    12f0:	01cfc6b4 	movhi	r7,16154
    12f4:	3190cb44 	addi	r6,r6,17197
    12f8:	39cdb884 	addi	r7,r7,14050
    12fc:	8809883a 	mov	r4,r17
    1300:	900b883a 	mov	r5,r18
    1304:	d8c00e15 	stw	r3,56(sp)
    1308:	0004a2c0 	call	4a2c <__gedf2>
    130c:	d8c00e17 	ldw	r3,56(sp)
    1310:	10001116 	blt	r2,zero,1358 <_etoa+0x480>
    1314:	01d04bf4 	movhi	r7,16687
    1318:	000d883a 	mov	r6,zero
    131c:	39e12004 	addi	r7,r7,-31616
    1320:	8809883a 	mov	r4,r17
    1324:	900b883a 	mov	r5,r18
    1328:	0004b080 	call	4b08 <__ledf2>
    132c:	d8c00e17 	ldw	r3,56(sp)
    1330:	1000090e 	bge	r2,zero,1358 <_etoa+0x480>
      if ((int)prec > expval) {
    1334:	8500030e 	bge	r16,r20,1344 <_etoa+0x46c>
        prec = (unsigned)((int)prec - expval - 1);
    1338:	a429c83a 	sub	r20,r20,r16
    133c:	a53fffc4 	addi	r20,r20,-1
    1340:	00000106 	br	1348 <_etoa+0x470>
      }
      else {
        prec = 0;
    1344:	0029883a 	mov	r20,zero
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
    1348:	b5810014 	ori	r22,r22,1024
      // no characters in exponent
      minwidth = 0U;
    134c:	0027883a 	mov	r19,zero
      expval   = 0;
    1350:	0021883a 	mov	r16,zero
    1354:	00000406 	br	1368 <_etoa+0x490>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
    1358:	a0000326 	beq	r20,zero,1368 <_etoa+0x490>
    135c:	d8800917 	ldw	r2,36(sp)
    1360:	10000126 	beq	r2,zero,1368 <_etoa+0x490>
        --prec;
    1364:	a53fffc4 	addi	r20,r20,-1
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
  if (width > minwidth) {
    1368:	d9000a17 	ldw	r4,40(sp)
    136c:	9900022e 	bgeu	r19,r4,1378 <_etoa+0x4a0>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
    1370:	24f9c83a 	sub	fp,r4,r19
    1374:	00000106 	br	137c <_etoa+0x4a4>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
    1378:	0039883a 	mov	fp,zero
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
    137c:	b080008c 	andi	r2,r22,2
    1380:	d8800915 	stw	r2,36(sp)
    1384:	10000226 	beq	r2,zero,1390 <_etoa+0x4b8>
    1388:	98000126 	beq	r19,zero,1390 <_etoa+0x4b8>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
    138c:	0039883a 	mov	fp,zero
  }

  // rescale the float value
  if (expval) {
    1390:	80000726 	beq	r16,zero,13b0 <_etoa+0x4d8>
    value /= conv.F;
    1394:	900b883a 	mov	r5,r18
    1398:	b80d883a 	mov	r6,r23
    139c:	180f883a 	mov	r7,r3
    13a0:	8809883a 	mov	r4,r17
    13a4:	0003fd40 	call	3fd4 <__divdf3>
    13a8:	d8800c15 	stw	r2,48(sp)
    13ac:	1825883a 	mov	r18,r3
  }

  // output the floating part
  const size_t start_idx = idx;
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
    13b0:	000d883a 	mov	r6,zero
    13b4:	000f883a 	mov	r7,zero
    13b8:	8809883a 	mov	r4,r17
    13bc:	a80b883a 	mov	r5,r21
    13c0:	0004b080 	call	4b08 <__ledf2>
    13c4:	1000010e 	bge	r2,zero,13cc <_etoa+0x4f4>
    13c8:	94a0003c 	xorhi	r18,r18,32768
    13cc:	d8c00c17 	ldw	r3,48(sp)
    13d0:	00bdffc4 	movi	r2,-2049
    13d4:	d9c00817 	ldw	r7,32(sp)
    13d8:	d9800b17 	ldw	r6,44(sp)
    13dc:	d9400717 	ldw	r5,28(sp)
    13e0:	d9000617 	ldw	r4,24(sp)
    13e4:	b084703a 	and	r2,r22,r2
    13e8:	d8800415 	stw	r2,16(sp)
    13ec:	df000315 	stw	fp,12(sp)
    13f0:	dd000215 	stw	r20,8(sp)
    13f4:	d8c00015 	stw	r3,0(sp)
    13f8:	dc800115 	stw	r18,4(sp)
    13fc:	00009a40 	call	9a4 <_ftoa>

  // output the exponent part
  if (minwidth) {
    1400:	98002b26 	beq	r19,zero,14b0 <_etoa+0x5d8>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    1404:	b0c0080c 	andi	r3,r22,32
    1408:	1800021e 	bne	r3,zero,1414 <_etoa+0x53c>
    140c:	01001944 	movi	r4,101
    1410:	00000106 	br	1418 <_etoa+0x540>
    1414:	01001144 	movi	r4,69
    1418:	100d883a 	mov	r6,r2
    141c:	14400044 	addi	r17,r2,1
    1420:	d9c00817 	ldw	r7,32(sp)
    1424:	d8800617 	ldw	r2,24(sp)
    1428:	d9400717 	ldw	r5,28(sp)
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    142c:	9cffffc4 	addi	r19,r19,-1
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);

  // output the exponent part
  if (minwidth) {
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    1430:	103ee83a 	callr	r2
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    1434:	00800144 	movi	r2,5
    1438:	d8800515 	stw	r2,20(sp)
    143c:	00800284 	movi	r2,10
    1440:	d8800215 	stw	r2,8(sp)
    1444:	8004d7fa 	srli	r2,r16,31
    1448:	dcc00415 	stw	r19,16(sp)
    144c:	d8000315 	stw	zero,12(sp)
    1450:	d8800115 	stw	r2,4(sp)
    1454:	8000010e 	bge	r16,zero,145c <_etoa+0x584>
    1458:	0421c83a 	sub	r16,zero,r16
    145c:	d9c00817 	ldw	r7,32(sp)
    1460:	d9400717 	ldw	r5,28(sp)
    1464:	d9000617 	ldw	r4,24(sp)
    1468:	dc000015 	stw	r16,0(sp)
    146c:	880d883a 	mov	r6,r17
    1470:	00006580 	call	658 <_ntoa_long>
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
    1474:	d8c00917 	ldw	r3,36(sp)
    1478:	18000d26 	beq	r3,zero,14b0 <_etoa+0x5d8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    147c:	d9000b17 	ldw	r4,44(sp)
    1480:	1107c83a 	sub	r3,r2,r4
    1484:	d9000a17 	ldw	r4,40(sp)
    1488:	1900092e 	bgeu	r3,r4,14b0 <_etoa+0x5d8>
    148c:	14000044 	addi	r16,r2,1
    1490:	100d883a 	mov	r6,r2
    1494:	d9c00817 	ldw	r7,32(sp)
    1498:	d8800617 	ldw	r2,24(sp)
    149c:	d9400717 	ldw	r5,28(sp)
    14a0:	01000804 	movi	r4,32
    14a4:	103ee83a 	callr	r2
    14a8:	8005883a 	mov	r2,r16
    14ac:	003ff306 	br	147c <_gp+0xffff30ac>
    }
  }
  return idx;
}
    14b0:	dfc01a17 	ldw	ra,104(sp)
    14b4:	df001917 	ldw	fp,100(sp)
    14b8:	ddc01817 	ldw	r23,96(sp)
    14bc:	dd801717 	ldw	r22,92(sp)
    14c0:	dd401617 	ldw	r21,88(sp)
    14c4:	dd001517 	ldw	r20,84(sp)
    14c8:	dcc01417 	ldw	r19,80(sp)
    14cc:	dc801317 	ldw	r18,76(sp)
    14d0:	dc401217 	ldw	r17,72(sp)
    14d4:	dc001117 	ldw	r16,68(sp)
    14d8:	dec01b04 	addi	sp,sp,108
    14dc:	f800283a 	ret

000014e0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    14e0:	deffeb04 	addi	sp,sp,-84
    14e4:	df001315 	stw	fp,76(sp)
    14e8:	dd000f15 	stw	r20,60(sp)
    14ec:	dc800d15 	stw	r18,52(sp)
    14f0:	dfc01415 	stw	ra,80(sp)
    14f4:	ddc01215 	stw	r23,72(sp)
    14f8:	dd801115 	stw	r22,68(sp)
    14fc:	dd401015 	stw	r21,64(sp)
    1500:	dcc00e15 	stw	r19,56(sp)
    1504:	dc400c15 	stw	r17,48(sp)
    1508:	dc000b15 	stw	r16,44(sp)
    150c:	2829883a 	mov	r20,r5
    1510:	3025883a 	mov	r18,r6
    1514:	df001517 	ldw	fp,84(sp)
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    1518:	2800031e 	bne	r5,zero,1528 <_vsnprintf+0x48>
    // use null output function
    out = _out_null;
    151c:	04c00034 	movhi	r19,0
    1520:	9cc0e904 	addi	r19,r19,932
    1524:	00000106 	br	152c <_vsnprintf+0x4c>
    1528:	2027883a 	mov	r19,r4
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    152c:	002d883a 	mov	r22,zero
  if (!buffer) {
    // use null output function
    out = _out_null;
  }

  while (*format)
    1530:	39000007 	ldb	r4,0(r7)
    1534:	20005126 	beq	r4,zero,167c <_vsnprintf+0x19c>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    1538:	00800944 	movi	r2,37
    153c:	3c400044 	addi	r17,r7,1
    1540:	20800726 	beq	r4,r2,1560 <_vsnprintf+0x80>
      // no
      out(*format, buffer, idx++, maxlen);
    1544:	900f883a 	mov	r7,r18
    1548:	b00d883a 	mov	r6,r22
    154c:	a00b883a 	mov	r5,r20
    1550:	983ee83a 	callr	r19
    1554:	b4000044 	addi	r16,r22,1
      format++;
    1558:	880f883a 	mov	r7,r17
    155c:	00004506 	br	1674 <_vsnprintf+0x194>
    1560:	880f883a 	mov	r7,r17
      // yes, evaluate it
      format++;
    }

    // evaluate flags
    flags = 0U;
    1564:	0021883a 	mov	r16,zero
    do {
      switch (*format) {
    1568:	01400804 	movi	r5,32
    156c:	018008c4 	movi	r6,35
    1570:	39000003 	ldbu	r4,0(r7)
    1574:	00c00ac4 	movi	r3,43
    1578:	382f883a 	mov	r23,r7
    157c:	20803fcc 	andi	r2,r4,255
    1580:	1080201c 	xori	r2,r2,128
    1584:	10bfe004 	addi	r2,r2,-128
    1588:	10c00d26 	beq	r2,r3,15c0 <_vsnprintf+0xe0>
    158c:	18800416 	blt	r3,r2,15a0 <_vsnprintf+0xc0>
    1590:	11400d26 	beq	r2,r5,15c8 <_vsnprintf+0xe8>
    1594:	1180401e 	bne	r2,r6,1698 <_vsnprintf+0x1b8>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    1598:	84000414 	ori	r16,r16,16
    159c:	00003c06 	br	1690 <_vsnprintf+0x1b0>
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    15a0:	00c00b44 	movi	r3,45
    15a4:	10c00426 	beq	r2,r3,15b8 <_vsnprintf+0xd8>
    15a8:	00c00c04 	movi	r3,48
    15ac:	10c03a1e 	bne	r2,r3,1698 <_vsnprintf+0x1b8>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    15b0:	84000054 	ori	r16,r16,1
    15b4:	00003606 	br	1690 <_vsnprintf+0x1b0>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    15b8:	84000094 	ori	r16,r16,2
    15bc:	00003406 	br	1690 <_vsnprintf+0x1b0>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    15c0:	84000114 	ori	r16,r16,4
    15c4:	00003206 	br	1690 <_vsnprintf+0x1b0>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    15c8:	84000214 	ori	r16,r16,8
    15cc:	00003006 	br	1690 <_vsnprintf+0x1b0>
      flags |= FLAGS_PRECISION;
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
    15d0:	10803fcc 	andi	r2,r2,255
    15d4:	1080201c 	xori	r2,r2,128
    15d8:	10bfe004 	addi	r2,r2,-128
    15dc:	01000a84 	movi	r4,42
    15e0:	11005b1e 	bne	r2,r4,1750 <_vsnprintf+0x270>
        const int prec = (int)va_arg(va, int);
        precision = prec > 0 ? (unsigned int)prec : 0U;
    15e4:	e0800017 	ldw	r2,0(fp)
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
        const int prec = (int)va_arg(va, int);
    15e8:	e1000104 	addi	r4,fp,4
        precision = prec > 0 ? (unsigned int)prec : 0U;
    15ec:	1000010e 	bge	r2,zero,15f4 <_vsnprintf+0x114>
    15f0:	0005883a 	mov	r2,zero
        format++;
    15f4:	bc400084 	addi	r17,r23,2
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
        const int prec = (int)va_arg(va, int);
    15f8:	2039883a 	mov	fp,r4
        format++;
      }
    }

    // evaluate length field
    switch (*format) {
    15fc:	89000007 	ldb	r4,0(r17)
    1600:	01401b04 	movi	r5,108
    1604:	21405a26 	beq	r4,r5,1770 <_vsnprintf+0x290>
    1608:	2900530e 	bge	r5,r4,1758 <_vsnprintf+0x278>
    160c:	01401d04 	movi	r5,116
    1610:	21406226 	beq	r4,r5,179c <_vsnprintf+0x2bc>
    1614:	01401e84 	movi	r5,122
    1618:	21406026 	beq	r4,r5,179c <_vsnprintf+0x2bc>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    161c:	89c00003 	ldbu	r7,0(r17)
    1620:	01401944 	movi	r5,101
    1624:	39003fcc 	andi	r4,r7,255
    1628:	2100201c 	xori	r4,r4,128
    162c:	213fe004 	addi	r4,r4,-128
    1630:	21412a26 	beq	r4,r5,1adc <_vsnprintf+0x5fc>
    1634:	29006516 	blt	r5,r4,17cc <_vsnprintf+0x2ec>
    1638:	014011c4 	movi	r5,71
    163c:	21412726 	beq	r4,r5,1adc <_vsnprintf+0x5fc>
    1640:	29005916 	blt	r5,r4,17a8 <_vsnprintf+0x2c8>
    1644:	01401144 	movi	r5,69
    1648:	21412426 	beq	r4,r5,1adc <_vsnprintf+0x5fc>
    164c:	29011216 	blt	r5,r4,1a98 <_vsnprintf+0x5b8>
    1650:	00800944 	movi	r2,37
    1654:	2081b51e 	bne	r4,r2,1d2c <_vsnprintf+0x84c>
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    1658:	b4000044 	addi	r16,r22,1
    165c:	900f883a 	mov	r7,r18
    1660:	b00d883a 	mov	r6,r22
    1664:	a00b883a 	mov	r5,r20
    1668:	01000944 	movi	r4,37
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    166c:	983ee83a 	callr	r19
        format++;
    1670:	89c00044 	addi	r7,r17,1
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    1674:	802d883a 	mov	r22,r16
        format++;
        break;
    1678:	003fad06 	br	1530 <_gp+0xffff3160>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    167c:	b4800236 	bltu	r22,r18,1688 <_vsnprintf+0x1a8>
    1680:	91bfffc4 	addi	r6,r18,-1
    1684:	0001c406 	br	1d98 <_vsnprintf+0x8b8>
    1688:	b00d883a 	mov	r6,r22
    168c:	0001c206 	br	1d98 <_vsnprintf+0x8b8>
    1690:	39c00044 	addi	r7,r7,1
    1694:	003fb606 	br	1570 <_gp+0xffff31a0>
      }
    } while (n);

    // evaluate width field
    width = 0U;
    if (_is_digit(*format)) {
    1698:	213ff404 	addi	r4,r4,-48
    169c:	21003fcc 	andi	r4,r4,255
    16a0:	01400244 	movi	r5,9
    16a4:	2901a62e 	bgeu	r5,r4,1d40 <_vsnprintf+0x860>
      width = _atoi(&format);
    }
    else if (*format == '*') {
    16a8:	01000a84 	movi	r4,42
    16ac:	11000a1e 	bne	r2,r4,16d8 <_vsnprintf+0x1f8>
      const int w = va_arg(va, int);
    16b0:	e2400017 	ldw	r9,0(fp)
    16b4:	e0800104 	addi	r2,fp,4
      if (w < 0) {
    16b8:	4800030e 	bge	r9,zero,16c8 <_vsnprintf+0x1e8>
        flags |= FLAGS_LEFT;    // reverse padding
    16bc:	84000094 	ori	r16,r16,2
        width = (unsigned int)-w;
    16c0:	026bc83a 	sub	r21,zero,r9
    16c4:	00000106 	br	16cc <_vsnprintf+0x1ec>
      }
      else {
        width = (unsigned int)w;
    16c8:	482b883a 	mov	r21,r9
      }
      format++;
    16cc:	3dc00044 	addi	r23,r7,1
    width = 0U;
    if (_is_digit(*format)) {
      width = _atoi(&format);
    }
    else if (*format == '*') {
      const int w = va_arg(va, int);
    16d0:	1039883a 	mov	fp,r2
    16d4:	00000106 	br	16dc <_vsnprintf+0x1fc>
        default :                                   n = 0U; break;
      }
    } while (n);

    // evaluate width field
    width = 0U;
    16d8:	002b883a 	mov	r21,zero
      format++;
    }

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
    16dc:	b9000007 	ldb	r4,0(r23)
    16e0:	00800b84 	movi	r2,46
    16e4:	2080191e 	bne	r4,r2,174c <_vsnprintf+0x26c>
      flags |= FLAGS_PRECISION;
      format++;
      if (_is_digit(*format)) {
    16e8:	b8800043 	ldbu	r2,1(r23)
    16ec:	01000244 	movi	r4,9
    }

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
      flags |= FLAGS_PRECISION;
    16f0:	84010014 	ori	r16,r16,1024
      format++;
      if (_is_digit(*format)) {
    16f4:	117ff404 	addi	r5,r2,-48
    16f8:	29403fcc 	andi	r5,r5,255

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
      flags |= FLAGS_PRECISION;
      format++;
    16fc:	bc400044 	addi	r17,r23,1
      if (_is_digit(*format)) {
    1700:	217fb336 	bltu	r4,r5,15d0 <_gp+0xffff3200>
    1704:	0005883a 	mov	r2,zero

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
  while (_is_digit(**str)) {
    1708:	202f883a 	mov	r23,r4
    170c:	88c00003 	ldbu	r3,0(r17)
    1710:	193ff404 	addi	r4,r3,-48
    1714:	21003fcc 	andi	r4,r4,255
    1718:	b93fb836 	bltu	r23,r4,15fc <_gp+0xffff322c>
    171c:	01400284 	movi	r5,10
    1720:	1009883a 	mov	r4,r2
    1724:	d8c00915 	stw	r3,36(sp)
    1728:	0002d180 	call	2d18 <__mulsi3>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    172c:	d8c00917 	ldw	r3,36(sp)
    1730:	10bff404 	addi	r2,r2,-48
    1734:	8c400044 	addi	r17,r17,1
    1738:	18c03fcc 	andi	r3,r3,255
    173c:	18c0201c 	xori	r3,r3,128
    1740:	18ffe004 	addi	r3,r3,-128
    1744:	1885883a 	add	r2,r3,r2
    1748:	003ff006 	br	170c <_gp+0xffff333c>
    174c:	b823883a 	mov	r17,r23
      }
      format++;
    }

    // evaluate precision field
    precision = 0U;
    1750:	0005883a 	mov	r2,zero
    1754:	003fa906 	br	15fc <_gp+0xffff322c>
        format++;
      }
    }

    // evaluate length field
    switch (*format) {
    1758:	01401a04 	movi	r5,104
    175c:	21400826 	beq	r4,r5,1780 <_vsnprintf+0x2a0>
    1760:	01401a84 	movi	r5,106
    1764:	217fad1e 	bne	r4,r5,161c <_gp+0xffff324c>
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    1768:	84008014 	ori	r16,r16,512
    176c:	00000c06 	br	17a0 <_vsnprintf+0x2c0>
    // evaluate length field
    switch (*format) {
      case 'l' :
        flags |= FLAGS_LONG;
        format++;
        if (*format == 'l') {
    1770:	89400047 	ldb	r5,1(r17)
    1774:	2900091e 	bne	r5,r4,179c <_vsnprintf+0x2bc>
          flags |= FLAGS_LONG_LONG;
    1778:	8400c014 	ori	r16,r16,768
    177c:	00000506 	br	1794 <_vsnprintf+0x2b4>
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
        format++;
        if (*format == 'h') {
    1780:	89400047 	ldb	r5,1(r17)
    1784:	29000226 	beq	r5,r4,1790 <_vsnprintf+0x2b0>
          flags |= FLAGS_LONG_LONG;
          format++;
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
    1788:	84002014 	ori	r16,r16,128
    178c:	00000406 	br	17a0 <_vsnprintf+0x2c0>
        format++;
        if (*format == 'h') {
          flags |= FLAGS_CHAR;
    1790:	84003014 	ori	r16,r16,192
          format++;
    1794:	8c400084 	addi	r17,r17,2
    1798:	003fa006 	br	161c <_gp+0xffff324c>
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    179c:	84004014 	ori	r16,r16,256
        format++;
    17a0:	8c400044 	addi	r17,r17,1
        break;
    17a4:	003f9d06 	br	161c <_gp+0xffff324c>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    17a8:	01401884 	movi	r5,98
    17ac:	21402926 	beq	r4,r5,1854 <_vsnprintf+0x374>
    17b0:	29000216 	blt	r5,r4,17bc <_vsnprintf+0x2dc>
    17b4:	01401604 	movi	r5,88
    17b8:	00002506 	br	1850 <_vsnprintf+0x370>
    17bc:	014018c4 	movi	r5,99
    17c0:	2140e426 	beq	r4,r5,1b54 <_vsnprintf+0x674>
    17c4:	01401904 	movi	r5,100
    17c8:	00002106 	br	1850 <_vsnprintf+0x370>
    17cc:	01401bc4 	movi	r5,111
    17d0:	21402026 	beq	r4,r5,1854 <_vsnprintf+0x374>
    17d4:	29000516 	blt	r5,r4,17ec <_vsnprintf+0x30c>
    17d8:	014019c4 	movi	r5,103
    17dc:	2140bf26 	beq	r4,r5,1adc <_vsnprintf+0x5fc>
    17e0:	2140ad16 	blt	r4,r5,1a98 <_vsnprintf+0x5b8>
    17e4:	01401a44 	movi	r5,105
    17e8:	00001906 	br	1850 <_vsnprintf+0x370>
    17ec:	01401cc4 	movi	r5,115
    17f0:	21410226 	beq	r4,r5,1bfc <_vsnprintf+0x71c>
    17f4:	29001316 	blt	r5,r4,1844 <_vsnprintf+0x364>
    17f8:	01401c04 	movi	r5,112
    17fc:	21414b1e 	bne	r4,r5,1d2c <_vsnprintf+0x84c>
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    1800:	d8800315 	stw	r2,12(sp)
    1804:	84000854 	ori	r16,r16,33
    1808:	01000204 	movi	r4,8
    180c:	00800404 	movi	r2,16
    1810:	d9000415 	stw	r4,16(sp)
    1814:	dc000515 	stw	r16,20(sp)
    1818:	d8800215 	stw	r2,8(sp)
    181c:	d8000115 	stw	zero,4(sp)
    1820:	e0800017 	ldw	r2,0(fp)
    1824:	900f883a 	mov	r7,r18
    1828:	b00d883a 	mov	r6,r22
    182c:	d8800015 	stw	r2,0(sp)
    1830:	a00b883a 	mov	r5,r20
    1834:	9809883a 	mov	r4,r19
    1838:	e5c00104 	addi	r23,fp,4
    183c:	00006580 	call	658 <_ntoa_long>
    1840:	00013606 	br	1d1c <_vsnprintf+0x83c>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    1844:	01401d44 	movi	r5,117
    1848:	21400226 	beq	r4,r5,1854 <_vsnprintf+0x374>
    184c:	01401e04 	movi	r5,120
    1850:	2141361e 	bne	r4,r5,1d2c <_vsnprintf+0x84c>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    1854:	01401e04 	movi	r5,120
    1858:	21400f26 	beq	r4,r5,1898 <_vsnprintf+0x3b8>
    185c:	01401604 	movi	r5,88
    1860:	21400c26 	beq	r4,r5,1894 <_vsnprintf+0x3b4>
          base = 16U;
        }
        else if (*format == 'o') {
    1864:	01401bc4 	movi	r5,111
    1868:	21414726 	beq	r4,r5,1d88 <_vsnprintf+0x8a8>
          base =  8U;
        }
        else if (*format == 'b') {
    186c:	01401884 	movi	r5,98
    1870:	21414726 	beq	r4,r5,1d90 <_vsnprintf+0x8b0>
          base =  2U;
        }
        else {
          base = 10U;
          flags &= ~FLAGS_HASH;   // no hash for dec format
    1874:	017ffbc4 	movi	r5,-17
    1878:	8160703a 	and	r16,r16,r5
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    187c:	01401a44 	movi	r5,105
        }
        else if (*format == 'b') {
          base =  2U;
        }
        else {
          base = 10U;
    1880:	01800284 	movi	r6,10
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    1884:	21400726 	beq	r4,r5,18a4 <_vsnprintf+0x3c4>
    1888:	01401904 	movi	r5,100
    188c:	21400526 	beq	r4,r5,18a4 <_vsnprintf+0x3c4>
    1890:	00000206 	br	189c <_vsnprintf+0x3bc>
          base = 10U;
          flags &= ~FLAGS_HASH;   // no hash for dec format
        }
        // uppercase
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
    1894:	84000814 	ori	r16,r16,32
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
          base = 16U;
    1898:	01800404 	movi	r6,16
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    189c:	017ffcc4 	movi	r5,-13
    18a0:	8160703a 	and	r16,r16,r5
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    18a4:	8141000c 	andi	r5,r16,1024
    18a8:	28000226 	beq	r5,zero,18b4 <_vsnprintf+0x3d4>
          flags &= ~FLAGS_ZEROPAD;
    18ac:	017fff84 	movi	r5,-2
    18b0:	8160703a 	and	r16,r16,r5
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    18b4:	01c01a44 	movi	r7,105
    18b8:	8140800c 	andi	r5,r16,512
    18bc:	21c00226 	beq	r4,r7,18c8 <_vsnprintf+0x3e8>
    18c0:	01c01904 	movi	r7,100
    18c4:	21c0391e 	bne	r4,r7,19ac <_vsnprintf+0x4cc>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    18c8:	28001226 	beq	r5,zero,1914 <_vsnprintf+0x434>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    18cc:	e1000117 	ldw	r4,4(fp)
    18d0:	e1400017 	ldw	r5,0(fp)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    18d4:	d8800515 	stw	r2,20(sp)
    18d8:	2004d7fa 	srli	r2,r4,31
    18dc:	dc000715 	stw	r16,28(sp)
    18e0:	dd400615 	stw	r21,24(sp)
    18e4:	d8800215 	stw	r2,8(sp)
    18e8:	d9800315 	stw	r6,12(sp)
    18ec:	d8000415 	stw	zero,16(sp)
        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
          // signed
          if (flags & FLAGS_LONG_LONG) {
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    18f0:	e5c00204 	addi	r23,fp,8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    18f4:	2005883a 	mov	r2,r4
    18f8:	2000040e 	bge	r4,zero,190c <_vsnprintf+0x42c>
    18fc:	014bc83a 	sub	r5,zero,r5
    1900:	2808c03a 	cmpne	r4,r5,zero
    1904:	0085c83a 	sub	r2,zero,r2
    1908:	1105c83a 	sub	r2,r2,r4
    190c:	d9400015 	stw	r5,0(sp)
    1910:	00003106 	br	19d8 <_vsnprintf+0x4f8>
#endif
          }
          else if (flags & FLAGS_LONG) {
    1914:	8100400c 	andi	r4,r16,256
    1918:	e5c00104 	addi	r23,fp,4
    191c:	20000b26 	beq	r4,zero,194c <_vsnprintf+0x46c>
            const long value = va_arg(va, long);
    1920:	e1000017 	ldw	r4,0(fp)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1924:	d8800315 	stw	r2,12(sp)
    1928:	dc000515 	stw	r16,20(sp)
    192c:	2004d7fa 	srli	r2,r4,31
    1930:	dd400415 	stw	r21,16(sp)
    1934:	d9800215 	stw	r6,8(sp)
    1938:	d8800115 	stw	r2,4(sp)
    193c:	2005883a 	mov	r2,r4
    1940:	2000370e 	bge	r4,zero,1a20 <_vsnprintf+0x540>
    1944:	0105c83a 	sub	r2,zero,r4
    1948:	00003506 	br	1a20 <_vsnprintf+0x540>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    194c:	8140100c 	andi	r5,r16,64
    1950:	e1000017 	ldw	r4,0(fp)
    1954:	28000426 	beq	r5,zero,1968 <_vsnprintf+0x488>
    1958:	21003fcc 	andi	r4,r4,255
    195c:	2100201c 	xori	r4,r4,128
    1960:	213fe004 	addi	r4,r4,-128
    1964:	00000506 	br	197c <_vsnprintf+0x49c>
    1968:	8140200c 	andi	r5,r16,128
    196c:	28000326 	beq	r5,zero,197c <_vsnprintf+0x49c>
    1970:	213fffcc 	andi	r4,r4,65535
    1974:	2120001c 	xori	r4,r4,32768
    1978:	21200004 	addi	r4,r4,-32768
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    197c:	d8800315 	stw	r2,12(sp)
    1980:	2004d7fa 	srli	r2,r4,31
    1984:	dc000515 	stw	r16,20(sp)
    1988:	dd400415 	stw	r21,16(sp)
    198c:	d8800115 	stw	r2,4(sp)
    1990:	d9800215 	stw	r6,8(sp)
          else if (flags & FLAGS_LONG) {
            const long value = va_arg(va, long);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    1994:	b839883a 	mov	fp,r23
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1998:	2005883a 	mov	r2,r4
    199c:	2000010e 	bge	r4,zero,19a4 <_vsnprintf+0x4c4>
    19a0:	0105c83a 	sub	r2,zero,r4
    19a4:	d8800015 	stw	r2,0(sp)
    19a8:	00003306 	br	1a78 <_vsnprintf+0x598>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    19ac:	28001326 	beq	r5,zero,19fc <_vsnprintf+0x51c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    19b0:	dc000715 	stw	r16,28(sp)
    19b4:	dd400615 	stw	r21,24(sp)
    19b8:	d8800515 	stw	r2,20(sp)
    19bc:	d9800315 	stw	r6,12(sp)
    19c0:	d8000415 	stw	zero,16(sp)
    19c4:	d8000215 	stw	zero,8(sp)
    19c8:	e0800017 	ldw	r2,0(fp)
    19cc:	e5c00204 	addi	r23,fp,8
    19d0:	d8800015 	stw	r2,0(sp)
    19d4:	e0800117 	ldw	r2,4(fp)
    19d8:	d8800115 	stw	r2,4(sp)
    19dc:	900f883a 	mov	r7,r18
    19e0:	b00d883a 	mov	r6,r22
    19e4:	a00b883a 	mov	r5,r20
    19e8:	9809883a 	mov	r4,r19
    19ec:	00007cc0 	call	7cc <_ntoa_long_long>
    19f0:	102d883a 	mov	r22,r2
    19f4:	b839883a 	mov	fp,r23
    19f8:	00002506 	br	1a90 <_vsnprintf+0x5b0>
#endif
          }
          else if (flags & FLAGS_LONG) {
    19fc:	8100400c 	andi	r4,r16,256
    1a00:	e5c00104 	addi	r23,fp,4
    1a04:	20000d26 	beq	r4,zero,1a3c <_vsnprintf+0x55c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    1a08:	dc000515 	stw	r16,20(sp)
    1a0c:	dd400415 	stw	r21,16(sp)
    1a10:	d8800315 	stw	r2,12(sp)
    1a14:	d9800215 	stw	r6,8(sp)
    1a18:	d8000115 	stw	zero,4(sp)
    1a1c:	e0800017 	ldw	r2,0(fp)
    1a20:	d8800015 	stw	r2,0(sp)
    1a24:	900f883a 	mov	r7,r18
    1a28:	b00d883a 	mov	r6,r22
    1a2c:	a00b883a 	mov	r5,r20
    1a30:	9809883a 	mov	r4,r19
    1a34:	00006580 	call	658 <_ntoa_long>
    1a38:	003fed06 	br	19f0 <_gp+0xffff3620>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    1a3c:	8140100c 	andi	r5,r16,64
    1a40:	e1000017 	ldw	r4,0(fp)
    1a44:	28000226 	beq	r5,zero,1a50 <_vsnprintf+0x570>
    1a48:	21003fcc 	andi	r4,r4,255
    1a4c:	00000306 	br	1a5c <_vsnprintf+0x57c>
    1a50:	8140200c 	andi	r5,r16,128
    1a54:	28000126 	beq	r5,zero,1a5c <_vsnprintf+0x57c>
    1a58:	213fffcc 	andi	r4,r4,65535
    1a5c:	b839883a 	mov	fp,r23
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    1a60:	dc000515 	stw	r16,20(sp)
    1a64:	dd400415 	stw	r21,16(sp)
    1a68:	d8800315 	stw	r2,12(sp)
    1a6c:	d9800215 	stw	r6,8(sp)
    1a70:	d8000115 	stw	zero,4(sp)
    1a74:	d9000015 	stw	r4,0(sp)
    1a78:	b00d883a 	mov	r6,r22
    1a7c:	900f883a 	mov	r7,r18
    1a80:	a00b883a 	mov	r5,r20
    1a84:	9809883a 	mov	r4,r19
    1a88:	00006580 	call	658 <_ntoa_long>
    1a8c:	102d883a 	mov	r22,r2
          }
        }
        format++;
    1a90:	89c00044 	addi	r7,r17,1
        break;
    1a94:	003ea606 	br	1530 <_gp+0xffff3160>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    1a98:	01401184 	movi	r5,70
    1a9c:	2140011e 	bne	r4,r5,1aa4 <_vsnprintf+0x5c4>
    1aa0:	84000814 	ori	r16,r16,32
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    1aa4:	dc000415 	stw	r16,16(sp)
    1aa8:	dd400315 	stw	r21,12(sp)
    1aac:	d8800215 	stw	r2,8(sp)
    1ab0:	e0800017 	ldw	r2,0(fp)
    1ab4:	900f883a 	mov	r7,r18
    1ab8:	b00d883a 	mov	r6,r22
    1abc:	d8800015 	stw	r2,0(sp)
    1ac0:	e0800117 	ldw	r2,4(fp)
    1ac4:	a00b883a 	mov	r5,r20
    1ac8:	9809883a 	mov	r4,r19
    1acc:	d8800115 	stw	r2,4(sp)
    1ad0:	e5c00204 	addi	r23,fp,8
    1ad4:	00009a40 	call	9a4 <_ftoa>
    1ad8:	00009006 	br	1d1c <_vsnprintf+0x83c>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1adc:	017ff7c4 	movi	r5,-33
    1ae0:	394a703a 	and	r5,r7,r5
    1ae4:	29403fcc 	andi	r5,r5,255
    1ae8:	2940201c 	xori	r5,r5,128
    1aec:	297fe004 	addi	r5,r5,-128
    1af0:	028011c4 	movi	r10,71
    1af4:	01801144 	movi	r6,69
    1af8:	2a80061e 	bne	r5,r10,1b14 <_vsnprintf+0x634>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1afc:	013fff44 	movi	r4,-3
    1b00:	3908703a 	and	r4,r7,r4
    1b04:	21003fcc 	andi	r4,r4,255
    1b08:	2100201c 	xori	r4,r4,128
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1b0c:	84020014 	ori	r16,r16,2048
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1b10:	213fe004 	addi	r4,r4,-128
    1b14:	2180011e 	bne	r4,r6,1b1c <_vsnprintf+0x63c>
    1b18:	84000814 	ori	r16,r16,32
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    1b1c:	dc000415 	stw	r16,16(sp)
    1b20:	dd400315 	stw	r21,12(sp)
    1b24:	d8800215 	stw	r2,8(sp)
    1b28:	e0800017 	ldw	r2,0(fp)
    1b2c:	900f883a 	mov	r7,r18
    1b30:	b00d883a 	mov	r6,r22
    1b34:	d8800015 	stw	r2,0(sp)
    1b38:	e0800117 	ldw	r2,4(fp)
    1b3c:	a00b883a 	mov	r5,r20
    1b40:	9809883a 	mov	r4,r19
    1b44:	d8800115 	stw	r2,4(sp)
    1b48:	e5c00204 	addi	r23,fp,8
    1b4c:	0000ed80 	call	ed8 <_etoa>
    1b50:	00007206 	br	1d1c <_vsnprintf+0x83c>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    1b54:	8400008c 	andi	r16,r16,2
    1b58:	80000c1e 	bne	r16,zero,1b8c <_vsnprintf+0x6ac>
    1b5c:	002f883a 	mov	r23,zero
    1b60:	b5cd883a 	add	r6,r22,r23
    1b64:	b8c00084 	addi	r3,r23,2
    1b68:	bdc00044 	addi	r23,r23,1
          while (l++ < width) {
    1b6c:	bd40052e 	bgeu	r23,r21,1b84 <_vsnprintf+0x6a4>
            out(' ', buffer, idx++, maxlen);
    1b70:	900f883a 	mov	r7,r18
    1b74:	a00b883a 	mov	r5,r20
    1b78:	01000804 	movi	r4,32
    1b7c:	983ee83a 	callr	r19
    1b80:	003ff706 	br	1b60 <_gp+0xffff3790>
    1b84:	302d883a 	mov	r22,r6
    1b88:	00000106 	br	1b90 <_vsnprintf+0x6b0>
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    1b8c:	00c00044 	movi	r3,1
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    1b90:	e1000007 	ldb	r4,0(fp)
    1b94:	b0800044 	addi	r2,r22,1
    1b98:	d8800a15 	stw	r2,40(sp)
    1b9c:	d8c00915 	stw	r3,36(sp)
    1ba0:	900f883a 	mov	r7,r18
    1ba4:	b00d883a 	mov	r6,r22
    1ba8:	a00b883a 	mov	r5,r20
    1bac:	983ee83a 	callr	r19
    1bb0:	e5c00104 	addi	r23,fp,4
        // post padding
        if (flags & FLAGS_LEFT) {
    1bb4:	d8800a17 	ldw	r2,40(sp)
    1bb8:	d8c00917 	ldw	r3,36(sp)
    1bbc:	80000c26 	beq	r16,zero,1bf0 <_vsnprintf+0x710>
    1bc0:	1f3fffc4 	addi	fp,r3,-1
    1bc4:	e5b9c83a 	sub	fp,fp,r22
          while (l++ < width) {
    1bc8:	1707883a 	add	r3,r2,fp
    1bcc:	1d40082e 	bgeu	r3,r21,1bf0 <_vsnprintf+0x710>
            out(' ', buffer, idx++, maxlen);
    1bd0:	100d883a 	mov	r6,r2
    1bd4:	900f883a 	mov	r7,r18
    1bd8:	a00b883a 	mov	r5,r20
    1bdc:	01000804 	movi	r4,32
    1be0:	14000044 	addi	r16,r2,1
    1be4:	983ee83a 	callr	r19
    1be8:	8005883a 	mov	r2,r16
    1bec:	003ff606 	br	1bc8 <_gp+0xffff37f8>
          }
        }
        format++;
    1bf0:	89c00044 	addi	r7,r17,1
        break;
    1bf4:	102d883a 	mov	r22,r2
    1bf8:	00004a06 	br	1d24 <_vsnprintf+0x844>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    1bfc:	e0c00104 	addi	r3,fp,4
    1c00:	d8c00815 	stw	r3,32(sp)
    1c04:	e2800017 	ldw	r10,0(fp)
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    1c08:	1000021e 	bne	r2,zero,1c14 <_vsnprintf+0x734>
    1c0c:	013fffc4 	movi	r4,-1
    1c10:	00000106 	br	1c18 <_vsnprintf+0x738>
    1c14:	1009883a 	mov	r4,r2
    1c18:	5109883a 	add	r4,r10,r4
    1c1c:	5011883a 	mov	r8,r10
// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
  const char* s;
  for (s = str; *s && maxsize--; ++s);
    1c20:	41400007 	ldb	r5,0(r8)
    1c24:	28000326 	beq	r5,zero,1c34 <_vsnprintf+0x754>
    1c28:	41000226 	beq	r8,r4,1c34 <_vsnprintf+0x754>
    1c2c:	42000044 	addi	r8,r8,1
    1c30:	003ffb06 	br	1c20 <_gp+0xffff3850>

      case 's' : {
        const char* p = va_arg(va, char*);
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
        // pre padding
        if (flags & FLAGS_PRECISION) {
    1c34:	85c1000c 	andi	r23,r16,1024
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
  const char* s;
  for (s = str; *s && maxsize--; ++s);
  return (unsigned int)(s - str);
    1c38:	42b9c83a 	sub	fp,r8,r10

      case 's' : {
        const char* p = va_arg(va, char*);
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
        // pre padding
        if (flags & FLAGS_PRECISION) {
    1c3c:	b8000226 	beq	r23,zero,1c48 <_vsnprintf+0x768>
          l = (l < precision ? l : precision);
    1c40:	1700012e 	bgeu	r2,fp,1c48 <_vsnprintf+0x768>
    1c44:	1039883a 	mov	fp,r2
        }
        if (!(flags & FLAGS_LEFT)) {
    1c48:	8400008c 	andi	r16,r16,2
    1c4c:	8000111e 	bne	r16,zero,1c94 <_vsnprintf+0x7b4>
    1c50:	e009883a 	mov	r4,fp
    1c54:	b739c83a 	sub	fp,r22,fp
    1c58:	270d883a 	add	r6,r4,fp
          while (l++ < width) {
    1c5c:	25800044 	addi	r22,r4,1
    1c60:	25400a2e 	bgeu	r4,r21,1c8c <_vsnprintf+0x7ac>
            out(' ', buffer, idx++, maxlen);
    1c64:	01000804 	movi	r4,32
    1c68:	d8800a15 	stw	r2,40(sp)
    1c6c:	da800915 	stw	r10,36(sp)
    1c70:	900f883a 	mov	r7,r18
    1c74:	a00b883a 	mov	r5,r20
    1c78:	983ee83a 	callr	r19
        // pre padding
        if (flags & FLAGS_PRECISION) {
          l = (l < precision ? l : precision);
        }
        if (!(flags & FLAGS_LEFT)) {
          while (l++ < width) {
    1c7c:	b009883a 	mov	r4,r22
    1c80:	da800917 	ldw	r10,36(sp)
    1c84:	d8800a17 	ldw	r2,40(sp)
    1c88:	003ff306 	br	1c58 <_gp+0xffff3888>
    1c8c:	b039883a 	mov	fp,r22
    1c90:	302d883a 	mov	r22,r6
    1c94:	b2adc83a 	sub	r22,r22,r10
            out(' ', buffer, idx++, maxlen);
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1c98:	51000007 	ldb	r4,0(r10)
    1c9c:	558d883a 	add	r6,r10,r22
    1ca0:	20000e26 	beq	r4,zero,1cdc <_vsnprintf+0x7fc>
    1ca4:	b800091e 	bne	r23,zero,1ccc <_vsnprintf+0x7ec>
          out(*(p++), buffer, idx++, maxlen);
    1ca8:	52800044 	addi	r10,r10,1
    1cac:	d8800a15 	stw	r2,40(sp)
    1cb0:	da800915 	stw	r10,36(sp)
    1cb4:	900f883a 	mov	r7,r18
    1cb8:	a00b883a 	mov	r5,r20
    1cbc:	983ee83a 	callr	r19
    1cc0:	da800917 	ldw	r10,36(sp)
    1cc4:	d8800a17 	ldw	r2,40(sp)
    1cc8:	003ff306 	br	1c98 <_gp+0xffff38c8>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1ccc:	117fffc4 	addi	r5,r2,-1
    1cd0:	10000226 	beq	r2,zero,1cdc <_vsnprintf+0x7fc>
    1cd4:	2805883a 	mov	r2,r5
    1cd8:	003ff306 	br	1ca8 <_gp+0xffff38d8>
    1cdc:	302d883a 	mov	r22,r6
          out(*(p++), buffer, idx++, maxlen);
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    1ce0:	80000b26 	beq	r16,zero,1d10 <_vsnprintf+0x830>
    1ce4:	e1a1c83a 	sub	r16,fp,r6
          while (l++ < width) {
    1ce8:	b405883a 	add	r2,r22,r16
    1cec:	1540082e 	bgeu	r2,r21,1d10 <_vsnprintf+0x830>
            out(' ', buffer, idx++, maxlen);
    1cf0:	b00d883a 	mov	r6,r22
    1cf4:	b5c00044 	addi	r23,r22,1
    1cf8:	900f883a 	mov	r7,r18
    1cfc:	a00b883a 	mov	r5,r20
    1d00:	01000804 	movi	r4,32
    1d04:	983ee83a 	callr	r19
    1d08:	b82d883a 	mov	r22,r23
    1d0c:	003ff606 	br	1ce8 <_gp+0xffff3918>
          }
        }
        format++;
    1d10:	89c00044 	addi	r7,r17,1
        format++;
        break;
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    1d14:	df000817 	ldw	fp,32(sp)
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
        break;
    1d18:	003e0506 	br	1530 <_gp+0xffff3160>
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    1d1c:	102d883a 	mov	r22,r2
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    1d20:	89c00044 	addi	r7,r17,1
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    1d24:	b839883a 	mov	fp,r23
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
        break;
    1d28:	003e0106 	br	1530 <_gp+0xffff3160>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    1d2c:	b4000044 	addi	r16,r22,1
    1d30:	900f883a 	mov	r7,r18
    1d34:	b00d883a 	mov	r6,r22
    1d38:	a00b883a 	mov	r5,r20
    1d3c:	003e4b06 	br	166c <_gp+0xffff329c>
    1d40:	002b883a 	mov	r21,zero

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
  while (_is_digit(**str)) {
    1d44:	2823883a 	mov	r17,r5
    1d48:	b8c00003 	ldbu	r3,0(r23)
    1d4c:	18bff404 	addi	r2,r3,-48
    1d50:	10803fcc 	andi	r2,r2,255
    1d54:	88be6136 	bltu	r17,r2,16dc <_gp+0xffff330c>
    1d58:	a809883a 	mov	r4,r21
    1d5c:	01400284 	movi	r5,10
    1d60:	d8c00915 	stw	r3,36(sp)
    1d64:	0002d180 	call	2d18 <__mulsi3>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1d68:	d8c00917 	ldw	r3,36(sp)
    1d6c:	10bff404 	addi	r2,r2,-48
    1d70:	bdc00044 	addi	r23,r23,1
    1d74:	18c03fcc 	andi	r3,r3,255
    1d78:	18c0201c 	xori	r3,r3,128
    1d7c:	18ffe004 	addi	r3,r3,-128
    1d80:	18ab883a 	add	r21,r3,r2
    1d84:	003ff006 	br	1d48 <_gp+0xffff3978>
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
          base = 16U;
        }
        else if (*format == 'o') {
          base =  8U;
    1d88:	01800204 	movi	r6,8
    1d8c:	003ebe06 	br	1888 <_gp+0xffff34b8>
        }
        else if (*format == 'b') {
          base =  2U;
    1d90:	01800084 	movi	r6,2
    1d94:	003ebc06 	br	1888 <_gp+0xffff34b8>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    1d98:	900f883a 	mov	r7,r18
    1d9c:	a00b883a 	mov	r5,r20
    1da0:	0009883a 	mov	r4,zero
    1da4:	983ee83a 	callr	r19

  // return written chars without terminating \0
  return (int)idx;
}
    1da8:	b005883a 	mov	r2,r22
    1dac:	dfc01417 	ldw	ra,80(sp)
    1db0:	df001317 	ldw	fp,76(sp)
    1db4:	ddc01217 	ldw	r23,72(sp)
    1db8:	dd801117 	ldw	r22,68(sp)
    1dbc:	dd401017 	ldw	r21,64(sp)
    1dc0:	dd000f17 	ldw	r20,60(sp)
    1dc4:	dcc00e17 	ldw	r19,56(sp)
    1dc8:	dc800d17 	ldw	r18,52(sp)
    1dcc:	dc400c17 	ldw	r17,48(sp)
    1dd0:	dc000b17 	ldw	r16,44(sp)
    1dd4:	dec01504 	addi	sp,sp,84
    1dd8:	f800283a 	ret

00001ddc <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    1ddc:	defffa04 	addi	sp,sp,-24
    1de0:	dfc00215 	stw	ra,8(sp)
    1de4:	d9400315 	stw	r5,12(sp)
    1de8:	d9800415 	stw	r6,16(sp)
    1dec:	d9c00515 	stw	r7,20(sp)
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    1df0:	d8800304 	addi	r2,sp,12
    1df4:	200f883a 	mov	r7,r4
    1df8:	01000034 	movhi	r4,0
    1dfc:	d8800015 	stw	r2,0(sp)
    1e00:	01bfffc4 	movi	r6,-1
    1e04:	d9400104 	addi	r5,sp,4
    1e08:	21025b04 	addi	r4,r4,2412
    1e0c:	00014e00 	call	14e0 <_vsnprintf>
  va_end(va);
  return ret;
}
    1e10:	dfc00217 	ldw	ra,8(sp)
    1e14:	dec00604 	addi	sp,sp,24
    1e18:	f800283a 	ret

00001e1c <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
    1e1c:	defffc04 	addi	sp,sp,-16
    1e20:	dfc00115 	stw	ra,4(sp)
    1e24:	d9800215 	stw	r6,8(sp)
    1e28:	d9c00315 	stw	r7,12(sp)
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    1e2c:	d8800204 	addi	r2,sp,8
    1e30:	280f883a 	mov	r7,r5
    1e34:	200b883a 	mov	r5,r4
    1e38:	01000034 	movhi	r4,0
    1e3c:	d8800015 	stw	r2,0(sp)
    1e40:	01bfffc4 	movi	r6,-1
    1e44:	2100e504 	addi	r4,r4,916
    1e48:	00014e00 	call	14e0 <_vsnprintf>
  va_end(va);
  return ret;
}
    1e4c:	dfc00117 	ldw	ra,4(sp)
    1e50:	dec00404 	addi	sp,sp,16
    1e54:	f800283a 	ret

00001e58 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
    1e58:	defffd04 	addi	sp,sp,-12
    1e5c:	dfc00115 	stw	ra,4(sp)
    1e60:	d9c00215 	stw	r7,8(sp)
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    1e64:	d8800204 	addi	r2,sp,8
    1e68:	300f883a 	mov	r7,r6
    1e6c:	280d883a 	mov	r6,r5
    1e70:	200b883a 	mov	r5,r4
    1e74:	01000034 	movhi	r4,0
    1e78:	d8800015 	stw	r2,0(sp)
    1e7c:	2100e504 	addi	r4,r4,916
    1e80:	00014e00 	call	14e0 <_vsnprintf>
  va_end(va);
  return ret;
}
    1e84:	dfc00117 	ldw	ra,4(sp)
    1e88:	dec00304 	addi	sp,sp,12
    1e8c:	f800283a 	ret

00001e90 <vprintf_>:


int vprintf_(const char* format, va_list va)
{
    1e90:	defffd04 	addi	sp,sp,-12
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    1e94:	200f883a 	mov	r7,r4
    1e98:	01000034 	movhi	r4,0
    1e9c:	d9400015 	stw	r5,0(sp)
    1ea0:	01bfffc4 	movi	r6,-1
    1ea4:	d9400104 	addi	r5,sp,4
    1ea8:	21025b04 	addi	r4,r4,2412
  return ret;
}


int vprintf_(const char* format, va_list va)
{
    1eac:	dfc00215 	stw	ra,8(sp)
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    1eb0:	00014e00 	call	14e0 <_vsnprintf>
}
    1eb4:	dfc00217 	ldw	ra,8(sp)
    1eb8:	dec00304 	addi	sp,sp,12
    1ebc:	f800283a 	ret

00001ec0 <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
    1ec0:	defffe04 	addi	sp,sp,-8
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    1ec4:	d9c00015 	stw	r7,0(sp)
    1ec8:	300f883a 	mov	r7,r6
    1ecc:	280d883a 	mov	r6,r5
    1ed0:	200b883a 	mov	r5,r4
    1ed4:	01000034 	movhi	r4,0
    1ed8:	2100e504 	addi	r4,r4,916
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
    1edc:	dfc00115 	stw	ra,4(sp)
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    1ee0:	00014e00 	call	14e0 <_vsnprintf>
}
    1ee4:	dfc00117 	ldw	ra,4(sp)
    1ee8:	dec00204 	addi	sp,sp,8
    1eec:	f800283a 	ret

00001ef0 <fctprintf>:


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
    1ef0:	defffb04 	addi	sp,sp,-20
    1ef4:	dfc00315 	stw	ra,12(sp)
    1ef8:	d9c00415 	stw	r7,16(sp)
  va_list va;
  va_start(va, format);
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    1efc:	d9000115 	stw	r4,4(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    1f00:	d8800404 	addi	r2,sp,16
    1f04:	01000034 	movhi	r4,0

int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
  va_list va;
  va_start(va, format);
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    1f08:	d9400215 	stw	r5,8(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    1f0c:	300f883a 	mov	r7,r6
    1f10:	d8800015 	stw	r2,0(sp)
    1f14:	01bfffc4 	movi	r6,-1
    1f18:	d9400104 	addi	r5,sp,4
    1f1c:	21026104 	addi	r4,r4,2436
    1f20:	00014e00 	call	14e0 <_vsnprintf>
  va_end(va);
  return ret;
}
    1f24:	dfc00317 	ldw	ra,12(sp)
    1f28:	dec00504 	addi	sp,sp,20
    1f2c:	f800283a 	ret

00001f30 <__fixunsdfsi>:
    1f30:	defffd04 	addi	sp,sp,-12
    1f34:	000d883a 	mov	r6,zero
    1f38:	01d07834 	movhi	r7,16864
    1f3c:	dc400115 	stw	r17,4(sp)
    1f40:	dc000015 	stw	r16,0(sp)
    1f44:	dfc00215 	stw	ra,8(sp)
    1f48:	2023883a 	mov	r17,r4
    1f4c:	2821883a 	mov	r16,r5
    1f50:	0004a2c0 	call	4a2c <__gedf2>
    1f54:	1000080e 	bge	r2,zero,1f78 <__fixunsdfsi+0x48>
    1f58:	8809883a 	mov	r4,r17
    1f5c:	800b883a 	mov	r5,r16
    1f60:	0005d640 	call	5d64 <__fixdfsi>
    1f64:	dfc00217 	ldw	ra,8(sp)
    1f68:	dc400117 	ldw	r17,4(sp)
    1f6c:	dc000017 	ldw	r16,0(sp)
    1f70:	dec00304 	addi	sp,sp,12
    1f74:	f800283a 	ret
    1f78:	000d883a 	mov	r6,zero
    1f7c:	01d07834 	movhi	r7,16864
    1f80:	8809883a 	mov	r4,r17
    1f84:	800b883a 	mov	r5,r16
    1f88:	00054680 	call	5468 <__subdf3>
    1f8c:	180b883a 	mov	r5,r3
    1f90:	1009883a 	mov	r4,r2
    1f94:	0005d640 	call	5d64 <__fixdfsi>
    1f98:	00e00034 	movhi	r3,32768
    1f9c:	10c5883a 	add	r2,r2,r3
    1fa0:	003ff006 	br	1f64 <_gp+0xffff3b94>

00001fa4 <__udivdi3>:
    1fa4:	defff404 	addi	sp,sp,-48
    1fa8:	dcc00515 	stw	r19,20(sp)
    1fac:	dc000215 	stw	r16,8(sp)
    1fb0:	dfc00b15 	stw	ra,44(sp)
    1fb4:	df000a15 	stw	fp,40(sp)
    1fb8:	ddc00915 	stw	r23,36(sp)
    1fbc:	dd800815 	stw	r22,32(sp)
    1fc0:	dd400715 	stw	r21,28(sp)
    1fc4:	dd000615 	stw	r20,24(sp)
    1fc8:	dc800415 	stw	r18,16(sp)
    1fcc:	dc400315 	stw	r17,12(sp)
    1fd0:	2027883a 	mov	r19,r4
    1fd4:	2821883a 	mov	r16,r5
    1fd8:	3800461e 	bne	r7,zero,20f4 <__udivdi3+0x150>
    1fdc:	3023883a 	mov	r17,r6
    1fe0:	2025883a 	mov	r18,r4
    1fe4:	2980572e 	bgeu	r5,r6,2144 <__udivdi3+0x1a0>
    1fe8:	00bfffd4 	movui	r2,65535
    1fec:	282d883a 	mov	r22,r5
    1ff0:	1180b236 	bltu	r2,r6,22bc <__udivdi3+0x318>
    1ff4:	00803fc4 	movi	r2,255
    1ff8:	1185803a 	cmpltu	r2,r2,r6
    1ffc:	100490fa 	slli	r2,r2,3
    2000:	3086d83a 	srl	r3,r6,r2
    2004:	01000034 	movhi	r4,0
    2008:	2118b404 	addi	r4,r4,25296
    200c:	20c7883a 	add	r3,r4,r3
    2010:	18c00003 	ldbu	r3,0(r3)
    2014:	1885883a 	add	r2,r3,r2
    2018:	00c00804 	movi	r3,32
    201c:	1887c83a 	sub	r3,r3,r2
    2020:	18000526 	beq	r3,zero,2038 <__udivdi3+0x94>
    2024:	80e0983a 	sll	r16,r16,r3
    2028:	9884d83a 	srl	r2,r19,r2
    202c:	30e2983a 	sll	r17,r6,r3
    2030:	98e4983a 	sll	r18,r19,r3
    2034:	142cb03a 	or	r22,r2,r16
    2038:	882ad43a 	srli	r21,r17,16
    203c:	b009883a 	mov	r4,r22
    2040:	8d3fffcc 	andi	r20,r17,65535
    2044:	a80b883a 	mov	r5,r21
    2048:	0002cc00 	call	2cc0 <__umodsi3>
    204c:	b009883a 	mov	r4,r22
    2050:	a80b883a 	mov	r5,r21
    2054:	1027883a 	mov	r19,r2
    2058:	0002c5c0 	call	2c5c <__udivsi3>
    205c:	100b883a 	mov	r5,r2
    2060:	a009883a 	mov	r4,r20
    2064:	102d883a 	mov	r22,r2
    2068:	0002d180 	call	2d18 <__mulsi3>
    206c:	9826943a 	slli	r19,r19,16
    2070:	9006d43a 	srli	r3,r18,16
    2074:	1cc6b03a 	or	r3,r3,r19
    2078:	1880052e 	bgeu	r3,r2,2090 <__udivdi3+0xec>
    207c:	1c47883a 	add	r3,r3,r17
    2080:	b13fffc4 	addi	r4,r22,-1
    2084:	1c400136 	bltu	r3,r17,208c <__udivdi3+0xe8>
    2088:	18814236 	bltu	r3,r2,2594 <__udivdi3+0x5f0>
    208c:	202d883a 	mov	r22,r4
    2090:	18a1c83a 	sub	r16,r3,r2
    2094:	8009883a 	mov	r4,r16
    2098:	a80b883a 	mov	r5,r21
    209c:	0002cc00 	call	2cc0 <__umodsi3>
    20a0:	1027883a 	mov	r19,r2
    20a4:	8009883a 	mov	r4,r16
    20a8:	a80b883a 	mov	r5,r21
    20ac:	9826943a 	slli	r19,r19,16
    20b0:	0002c5c0 	call	2c5c <__udivsi3>
    20b4:	100b883a 	mov	r5,r2
    20b8:	a009883a 	mov	r4,r20
    20bc:	94bfffcc 	andi	r18,r18,65535
    20c0:	1021883a 	mov	r16,r2
    20c4:	94e4b03a 	or	r18,r18,r19
    20c8:	0002d180 	call	2d18 <__mulsi3>
    20cc:	9080052e 	bgeu	r18,r2,20e4 <__udivdi3+0x140>
    20d0:	8ca5883a 	add	r18,r17,r18
    20d4:	80ffffc4 	addi	r3,r16,-1
    20d8:	94410c36 	bltu	r18,r17,250c <__udivdi3+0x568>
    20dc:	90810b2e 	bgeu	r18,r2,250c <__udivdi3+0x568>
    20e0:	843fff84 	addi	r16,r16,-2
    20e4:	b004943a 	slli	r2,r22,16
    20e8:	0007883a 	mov	r3,zero
    20ec:	1404b03a 	or	r2,r2,r16
    20f0:	00005e06 	br	226c <__udivdi3+0x2c8>
    20f4:	29c05b36 	bltu	r5,r7,2264 <__udivdi3+0x2c0>
    20f8:	00bfffd4 	movui	r2,65535
    20fc:	11c0672e 	bgeu	r2,r7,229c <__udivdi3+0x2f8>
    2100:	00804034 	movhi	r2,256
    2104:	10bfffc4 	addi	r2,r2,-1
    2108:	11c10a36 	bltu	r2,r7,2534 <__udivdi3+0x590>
    210c:	00800404 	movi	r2,16
    2110:	3886d83a 	srl	r3,r7,r2
    2114:	01000034 	movhi	r4,0
    2118:	2118b404 	addi	r4,r4,25296
    211c:	20c7883a 	add	r3,r4,r3
    2120:	18c00003 	ldbu	r3,0(r3)
    2124:	05c00804 	movi	r23,32
    2128:	1885883a 	add	r2,r3,r2
    212c:	b8afc83a 	sub	r23,r23,r2
    2130:	b800671e 	bne	r23,zero,22d0 <__udivdi3+0x32c>
    2134:	3c010536 	bltu	r7,r16,254c <__udivdi3+0x5a8>
    2138:	9985403a 	cmpgeu	r2,r19,r6
    213c:	0007883a 	mov	r3,zero
    2140:	00004a06 	br	226c <__udivdi3+0x2c8>
    2144:	3000041e 	bne	r6,zero,2158 <__udivdi3+0x1b4>
    2148:	000b883a 	mov	r5,zero
    214c:	01000044 	movi	r4,1
    2150:	0002c5c0 	call	2c5c <__udivsi3>
    2154:	1023883a 	mov	r17,r2
    2158:	00bfffd4 	movui	r2,65535
    215c:	1440532e 	bgeu	r2,r17,22ac <__udivdi3+0x308>
    2160:	00804034 	movhi	r2,256
    2164:	10bfffc4 	addi	r2,r2,-1
    2168:	1440f436 	bltu	r2,r17,253c <__udivdi3+0x598>
    216c:	00800404 	movi	r2,16
    2170:	8886d83a 	srl	r3,r17,r2
    2174:	01000034 	movhi	r4,0
    2178:	2118b404 	addi	r4,r4,25296
    217c:	20c7883a 	add	r3,r4,r3
    2180:	18c00003 	ldbu	r3,0(r3)
    2184:	1885883a 	add	r2,r3,r2
    2188:	00c00804 	movi	r3,32
    218c:	1887c83a 	sub	r3,r3,r2
    2190:	1800a51e 	bne	r3,zero,2428 <__udivdi3+0x484>
    2194:	882ad43a 	srli	r21,r17,16
    2198:	8461c83a 	sub	r16,r16,r17
    219c:	8d3fffcc 	andi	r20,r17,65535
    21a0:	00c00044 	movi	r3,1
    21a4:	a80b883a 	mov	r5,r21
    21a8:	8009883a 	mov	r4,r16
    21ac:	d8c00115 	stw	r3,4(sp)
    21b0:	0002cc00 	call	2cc0 <__umodsi3>
    21b4:	a80b883a 	mov	r5,r21
    21b8:	8009883a 	mov	r4,r16
    21bc:	1027883a 	mov	r19,r2
    21c0:	0002c5c0 	call	2c5c <__udivsi3>
    21c4:	a00b883a 	mov	r5,r20
    21c8:	1009883a 	mov	r4,r2
    21cc:	102d883a 	mov	r22,r2
    21d0:	0002d180 	call	2d18 <__mulsi3>
    21d4:	9826943a 	slli	r19,r19,16
    21d8:	900ed43a 	srli	r7,r18,16
    21dc:	d8c00117 	ldw	r3,4(sp)
    21e0:	3cceb03a 	or	r7,r7,r19
    21e4:	3880052e 	bgeu	r7,r2,21fc <__udivdi3+0x258>
    21e8:	3c4f883a 	add	r7,r7,r17
    21ec:	b13fffc4 	addi	r4,r22,-1
    21f0:	3c400136 	bltu	r7,r17,21f8 <__udivdi3+0x254>
    21f4:	3880e436 	bltu	r7,r2,2588 <__udivdi3+0x5e4>
    21f8:	202d883a 	mov	r22,r4
    21fc:	38a1c83a 	sub	r16,r7,r2
    2200:	8009883a 	mov	r4,r16
    2204:	a80b883a 	mov	r5,r21
    2208:	d8c00115 	stw	r3,4(sp)
    220c:	0002cc00 	call	2cc0 <__umodsi3>
    2210:	1027883a 	mov	r19,r2
    2214:	8009883a 	mov	r4,r16
    2218:	a80b883a 	mov	r5,r21
    221c:	9826943a 	slli	r19,r19,16
    2220:	0002c5c0 	call	2c5c <__udivsi3>
    2224:	a00b883a 	mov	r5,r20
    2228:	1009883a 	mov	r4,r2
    222c:	94bfffcc 	andi	r18,r18,65535
    2230:	1021883a 	mov	r16,r2
    2234:	94e4b03a 	or	r18,r18,r19
    2238:	0002d180 	call	2d18 <__mulsi3>
    223c:	d8c00117 	ldw	r3,4(sp)
    2240:	9080052e 	bgeu	r18,r2,2258 <__udivdi3+0x2b4>
    2244:	8ca5883a 	add	r18,r17,r18
    2248:	813fffc4 	addi	r4,r16,-1
    224c:	9440ad36 	bltu	r18,r17,2504 <__udivdi3+0x560>
    2250:	9080ac2e 	bgeu	r18,r2,2504 <__udivdi3+0x560>
    2254:	843fff84 	addi	r16,r16,-2
    2258:	b004943a 	slli	r2,r22,16
    225c:	1404b03a 	or	r2,r2,r16
    2260:	00000206 	br	226c <__udivdi3+0x2c8>
    2264:	0007883a 	mov	r3,zero
    2268:	0005883a 	mov	r2,zero
    226c:	dfc00b17 	ldw	ra,44(sp)
    2270:	df000a17 	ldw	fp,40(sp)
    2274:	ddc00917 	ldw	r23,36(sp)
    2278:	dd800817 	ldw	r22,32(sp)
    227c:	dd400717 	ldw	r21,28(sp)
    2280:	dd000617 	ldw	r20,24(sp)
    2284:	dcc00517 	ldw	r19,20(sp)
    2288:	dc800417 	ldw	r18,16(sp)
    228c:	dc400317 	ldw	r17,12(sp)
    2290:	dc000217 	ldw	r16,8(sp)
    2294:	dec00c04 	addi	sp,sp,48
    2298:	f800283a 	ret
    229c:	00803fc4 	movi	r2,255
    22a0:	11c5803a 	cmpltu	r2,r2,r7
    22a4:	100490fa 	slli	r2,r2,3
    22a8:	003f9906 	br	2110 <_gp+0xffff3d40>
    22ac:	00803fc4 	movi	r2,255
    22b0:	1445803a 	cmpltu	r2,r2,r17
    22b4:	100490fa 	slli	r2,r2,3
    22b8:	003fad06 	br	2170 <_gp+0xffff3da0>
    22bc:	00804034 	movhi	r2,256
    22c0:	10bfffc4 	addi	r2,r2,-1
    22c4:	11809f36 	bltu	r2,r6,2544 <__udivdi3+0x5a0>
    22c8:	00800404 	movi	r2,16
    22cc:	003f4c06 	br	2000 <_gp+0xffff3c30>
    22d0:	3dce983a 	sll	r7,r7,r23
    22d4:	30b8d83a 	srl	fp,r6,r2
    22d8:	80a2d83a 	srl	r17,r16,r2
    22dc:	35cc983a 	sll	r6,r6,r23
    22e0:	3f38b03a 	or	fp,r7,fp
    22e4:	e024d43a 	srli	r18,fp,16
    22e8:	9884d83a 	srl	r2,r19,r2
    22ec:	85e0983a 	sll	r16,r16,r23
    22f0:	8809883a 	mov	r4,r17
    22f4:	900b883a 	mov	r5,r18
    22f8:	d9800015 	stw	r6,0(sp)
    22fc:	1420b03a 	or	r16,r2,r16
    2300:	0002cc00 	call	2cc0 <__umodsi3>
    2304:	900b883a 	mov	r5,r18
    2308:	8809883a 	mov	r4,r17
    230c:	1029883a 	mov	r20,r2
    2310:	e5bfffcc 	andi	r22,fp,65535
    2314:	0002c5c0 	call	2c5c <__udivsi3>
    2318:	100b883a 	mov	r5,r2
    231c:	b009883a 	mov	r4,r22
    2320:	102b883a 	mov	r21,r2
    2324:	0002d180 	call	2d18 <__mulsi3>
    2328:	a028943a 	slli	r20,r20,16
    232c:	8006d43a 	srli	r3,r16,16
    2330:	1d06b03a 	or	r3,r3,r20
    2334:	1880042e 	bgeu	r3,r2,2348 <__udivdi3+0x3a4>
    2338:	1f07883a 	add	r3,r3,fp
    233c:	a93fffc4 	addi	r4,r21,-1
    2340:	1f00892e 	bgeu	r3,fp,2568 <__udivdi3+0x5c4>
    2344:	202b883a 	mov	r21,r4
    2348:	18a3c83a 	sub	r17,r3,r2
    234c:	8809883a 	mov	r4,r17
    2350:	900b883a 	mov	r5,r18
    2354:	0002cc00 	call	2cc0 <__umodsi3>
    2358:	1029883a 	mov	r20,r2
    235c:	8809883a 	mov	r4,r17
    2360:	900b883a 	mov	r5,r18
    2364:	a028943a 	slli	r20,r20,16
    2368:	0002c5c0 	call	2c5c <__udivsi3>
    236c:	100b883a 	mov	r5,r2
    2370:	b009883a 	mov	r4,r22
    2374:	843fffcc 	andi	r16,r16,65535
    2378:	1023883a 	mov	r17,r2
    237c:	8520b03a 	or	r16,r16,r20
    2380:	0002d180 	call	2d18 <__mulsi3>
    2384:	8080042e 	bgeu	r16,r2,2398 <__udivdi3+0x3f4>
    2388:	8721883a 	add	r16,r16,fp
    238c:	88ffffc4 	addi	r3,r17,-1
    2390:	8700712e 	bgeu	r16,fp,2558 <__udivdi3+0x5b4>
    2394:	1823883a 	mov	r17,r3
    2398:	a80e943a 	slli	r7,r21,16
    239c:	d8c00017 	ldw	r3,0(sp)
    23a0:	80a1c83a 	sub	r16,r16,r2
    23a4:	3c64b03a 	or	r18,r7,r17
    23a8:	1d3fffcc 	andi	r20,r3,65535
    23ac:	9022d43a 	srli	r17,r18,16
    23b0:	95bfffcc 	andi	r22,r18,65535
    23b4:	a00b883a 	mov	r5,r20
    23b8:	b009883a 	mov	r4,r22
    23bc:	182ad43a 	srli	r21,r3,16
    23c0:	0002d180 	call	2d18 <__mulsi3>
    23c4:	a00b883a 	mov	r5,r20
    23c8:	8809883a 	mov	r4,r17
    23cc:	1039883a 	mov	fp,r2
    23d0:	0002d180 	call	2d18 <__mulsi3>
    23d4:	8809883a 	mov	r4,r17
    23d8:	a80b883a 	mov	r5,r21
    23dc:	1029883a 	mov	r20,r2
    23e0:	0002d180 	call	2d18 <__mulsi3>
    23e4:	a80b883a 	mov	r5,r21
    23e8:	b009883a 	mov	r4,r22
    23ec:	1023883a 	mov	r17,r2
    23f0:	0002d180 	call	2d18 <__mulsi3>
    23f4:	e006d43a 	srli	r3,fp,16
    23f8:	1505883a 	add	r2,r2,r20
    23fc:	1887883a 	add	r3,r3,r2
    2400:	1d00022e 	bgeu	r3,r20,240c <__udivdi3+0x468>
    2404:	00800074 	movhi	r2,1
    2408:	88a3883a 	add	r17,r17,r2
    240c:	1804d43a 	srli	r2,r3,16
    2410:	1463883a 	add	r17,r2,r17
    2414:	84404436 	bltu	r16,r17,2528 <__udivdi3+0x584>
    2418:	84403e26 	beq	r16,r17,2514 <__udivdi3+0x570>
    241c:	9005883a 	mov	r2,r18
    2420:	0007883a 	mov	r3,zero
    2424:	003f9106 	br	226c <_gp+0xffff3e9c>
    2428:	88e2983a 	sll	r17,r17,r3
    242c:	80aed83a 	srl	r23,r16,r2
    2430:	80e0983a 	sll	r16,r16,r3
    2434:	882ad43a 	srli	r21,r17,16
    2438:	9884d83a 	srl	r2,r19,r2
    243c:	b809883a 	mov	r4,r23
    2440:	a80b883a 	mov	r5,r21
    2444:	98e4983a 	sll	r18,r19,r3
    2448:	142cb03a 	or	r22,r2,r16
    244c:	0002cc00 	call	2cc0 <__umodsi3>
    2450:	b809883a 	mov	r4,r23
    2454:	a80b883a 	mov	r5,r21
    2458:	1027883a 	mov	r19,r2
    245c:	8d3fffcc 	andi	r20,r17,65535
    2460:	0002c5c0 	call	2c5c <__udivsi3>
    2464:	a009883a 	mov	r4,r20
    2468:	100b883a 	mov	r5,r2
    246c:	102f883a 	mov	r23,r2
    2470:	0002d180 	call	2d18 <__mulsi3>
    2474:	9826943a 	slli	r19,r19,16
    2478:	b008d43a 	srli	r4,r22,16
    247c:	24c8b03a 	or	r4,r4,r19
    2480:	2080062e 	bgeu	r4,r2,249c <__udivdi3+0x4f8>
    2484:	2449883a 	add	r4,r4,r17
    2488:	b8ffffc4 	addi	r3,r23,-1
    248c:	24403c36 	bltu	r4,r17,2580 <__udivdi3+0x5dc>
    2490:	20803b2e 	bgeu	r4,r2,2580 <__udivdi3+0x5dc>
    2494:	bdffff84 	addi	r23,r23,-2
    2498:	2449883a 	add	r4,r4,r17
    249c:	20a1c83a 	sub	r16,r4,r2
    24a0:	a80b883a 	mov	r5,r21
    24a4:	8009883a 	mov	r4,r16
    24a8:	0002cc00 	call	2cc0 <__umodsi3>
    24ac:	a80b883a 	mov	r5,r21
    24b0:	8009883a 	mov	r4,r16
    24b4:	1027883a 	mov	r19,r2
    24b8:	0002c5c0 	call	2c5c <__udivsi3>
    24bc:	a009883a 	mov	r4,r20
    24c0:	100b883a 	mov	r5,r2
    24c4:	9826943a 	slli	r19,r19,16
    24c8:	1039883a 	mov	fp,r2
    24cc:	0002d180 	call	2d18 <__mulsi3>
    24d0:	b13fffcc 	andi	r4,r22,65535
    24d4:	24c8b03a 	or	r4,r4,r19
    24d8:	2080062e 	bgeu	r4,r2,24f4 <__udivdi3+0x550>
    24dc:	2449883a 	add	r4,r4,r17
    24e0:	e0ffffc4 	addi	r3,fp,-1
    24e4:	24402436 	bltu	r4,r17,2578 <__udivdi3+0x5d4>
    24e8:	2080232e 	bgeu	r4,r2,2578 <__udivdi3+0x5d4>
    24ec:	e73fff84 	addi	fp,fp,-2
    24f0:	2449883a 	add	r4,r4,r17
    24f4:	b82e943a 	slli	r23,r23,16
    24f8:	20a1c83a 	sub	r16,r4,r2
    24fc:	bf06b03a 	or	r3,r23,fp
    2500:	003f2806 	br	21a4 <_gp+0xffff3dd4>
    2504:	2021883a 	mov	r16,r4
    2508:	003f5306 	br	2258 <_gp+0xffff3e88>
    250c:	1821883a 	mov	r16,r3
    2510:	003ef406 	br	20e4 <_gp+0xffff3d14>
    2514:	1806943a 	slli	r3,r3,16
    2518:	9de6983a 	sll	r19,r19,r23
    251c:	e73fffcc 	andi	fp,fp,65535
    2520:	1f07883a 	add	r3,r3,fp
    2524:	98ffbd2e 	bgeu	r19,r3,241c <_gp+0xffff404c>
    2528:	90bfffc4 	addi	r2,r18,-1
    252c:	0007883a 	mov	r3,zero
    2530:	003f4e06 	br	226c <_gp+0xffff3e9c>
    2534:	00800604 	movi	r2,24
    2538:	003ef506 	br	2110 <_gp+0xffff3d40>
    253c:	00800604 	movi	r2,24
    2540:	003f0b06 	br	2170 <_gp+0xffff3da0>
    2544:	00800604 	movi	r2,24
    2548:	003ead06 	br	2000 <_gp+0xffff3c30>
    254c:	0007883a 	mov	r3,zero
    2550:	00800044 	movi	r2,1
    2554:	003f4506 	br	226c <_gp+0xffff3e9c>
    2558:	80bf8e2e 	bgeu	r16,r2,2394 <_gp+0xffff3fc4>
    255c:	8c7fff84 	addi	r17,r17,-2
    2560:	8721883a 	add	r16,r16,fp
    2564:	003f8c06 	br	2398 <_gp+0xffff3fc8>
    2568:	18bf762e 	bgeu	r3,r2,2344 <_gp+0xffff3f74>
    256c:	ad7fff84 	addi	r21,r21,-2
    2570:	1f07883a 	add	r3,r3,fp
    2574:	003f7406 	br	2348 <_gp+0xffff3f78>
    2578:	1839883a 	mov	fp,r3
    257c:	003fdd06 	br	24f4 <_gp+0xffff4124>
    2580:	182f883a 	mov	r23,r3
    2584:	003fc506 	br	249c <_gp+0xffff40cc>
    2588:	b5bfff84 	addi	r22,r22,-2
    258c:	3c4f883a 	add	r7,r7,r17
    2590:	003f1a06 	br	21fc <_gp+0xffff3e2c>
    2594:	b5bfff84 	addi	r22,r22,-2
    2598:	1c47883a 	add	r3,r3,r17
    259c:	003ebc06 	br	2090 <_gp+0xffff3cc0>

000025a0 <__umoddi3>:
    25a0:	defff304 	addi	sp,sp,-52
    25a4:	df000b15 	stw	fp,44(sp)
    25a8:	dc400415 	stw	r17,16(sp)
    25ac:	dc000315 	stw	r16,12(sp)
    25b0:	dfc00c15 	stw	ra,48(sp)
    25b4:	ddc00a15 	stw	r23,40(sp)
    25b8:	dd800915 	stw	r22,36(sp)
    25bc:	dd400815 	stw	r21,32(sp)
    25c0:	dd000715 	stw	r20,28(sp)
    25c4:	dcc00615 	stw	r19,24(sp)
    25c8:	dc800515 	stw	r18,20(sp)
    25cc:	2021883a 	mov	r16,r4
    25d0:	2823883a 	mov	r17,r5
    25d4:	2839883a 	mov	fp,r5
    25d8:	3800401e 	bne	r7,zero,26dc <__umoddi3+0x13c>
    25dc:	3027883a 	mov	r19,r6
    25e0:	2029883a 	mov	r20,r4
    25e4:	2980552e 	bgeu	r5,r6,273c <__umoddi3+0x19c>
    25e8:	00bfffd4 	movui	r2,65535
    25ec:	1180a236 	bltu	r2,r6,2878 <__umoddi3+0x2d8>
    25f0:	01003fc4 	movi	r4,255
    25f4:	2189803a 	cmpltu	r4,r4,r6
    25f8:	200890fa 	slli	r4,r4,3
    25fc:	3104d83a 	srl	r2,r6,r4
    2600:	00c00034 	movhi	r3,0
    2604:	18d8b404 	addi	r3,r3,25296
    2608:	1885883a 	add	r2,r3,r2
    260c:	10c00003 	ldbu	r3,0(r2)
    2610:	00800804 	movi	r2,32
    2614:	1909883a 	add	r4,r3,r4
    2618:	1125c83a 	sub	r18,r2,r4
    261c:	90000526 	beq	r18,zero,2634 <__umoddi3+0x94>
    2620:	8ca2983a 	sll	r17,r17,r18
    2624:	8108d83a 	srl	r4,r16,r4
    2628:	34a6983a 	sll	r19,r6,r18
    262c:	84a8983a 	sll	r20,r16,r18
    2630:	2478b03a 	or	fp,r4,r17
    2634:	982cd43a 	srli	r22,r19,16
    2638:	e009883a 	mov	r4,fp
    263c:	9dffffcc 	andi	r23,r19,65535
    2640:	b00b883a 	mov	r5,r22
    2644:	0002cc00 	call	2cc0 <__umodsi3>
    2648:	b00b883a 	mov	r5,r22
    264c:	e009883a 	mov	r4,fp
    2650:	102b883a 	mov	r21,r2
    2654:	0002c5c0 	call	2c5c <__udivsi3>
    2658:	100b883a 	mov	r5,r2
    265c:	b809883a 	mov	r4,r23
    2660:	0002d180 	call	2d18 <__mulsi3>
    2664:	a82a943a 	slli	r21,r21,16
    2668:	a006d43a 	srli	r3,r20,16
    266c:	1d46b03a 	or	r3,r3,r21
    2670:	1880032e 	bgeu	r3,r2,2680 <__umoddi3+0xe0>
    2674:	1cc7883a 	add	r3,r3,r19
    2678:	1cc00136 	bltu	r3,r19,2680 <__umoddi3+0xe0>
    267c:	18813136 	bltu	r3,r2,2b44 <__umoddi3+0x5a4>
    2680:	18a1c83a 	sub	r16,r3,r2
    2684:	b00b883a 	mov	r5,r22
    2688:	8009883a 	mov	r4,r16
    268c:	0002cc00 	call	2cc0 <__umodsi3>
    2690:	b00b883a 	mov	r5,r22
    2694:	8009883a 	mov	r4,r16
    2698:	1023883a 	mov	r17,r2
    269c:	0002c5c0 	call	2c5c <__udivsi3>
    26a0:	100b883a 	mov	r5,r2
    26a4:	b809883a 	mov	r4,r23
    26a8:	8822943a 	slli	r17,r17,16
    26ac:	0002d180 	call	2d18 <__mulsi3>
    26b0:	a0ffffcc 	andi	r3,r20,65535
    26b4:	1c46b03a 	or	r3,r3,r17
    26b8:	1880042e 	bgeu	r3,r2,26cc <__umoddi3+0x12c>
    26bc:	1cc7883a 	add	r3,r3,r19
    26c0:	1cc00236 	bltu	r3,r19,26cc <__umoddi3+0x12c>
    26c4:	1880012e 	bgeu	r3,r2,26cc <__umoddi3+0x12c>
    26c8:	1cc7883a 	add	r3,r3,r19
    26cc:	1885c83a 	sub	r2,r3,r2
    26d0:	1484d83a 	srl	r2,r2,r18
    26d4:	0007883a 	mov	r3,zero
    26d8:	00005306 	br	2828 <__umoddi3+0x288>
    26dc:	29c05036 	bltu	r5,r7,2820 <__umoddi3+0x280>
    26e0:	00bfffd4 	movui	r2,65535
    26e4:	11c05c2e 	bgeu	r2,r7,2858 <__umoddi3+0x2b8>
    26e8:	00804034 	movhi	r2,256
    26ec:	10bfffc4 	addi	r2,r2,-1
    26f0:	11c10636 	bltu	r2,r7,2b0c <__umoddi3+0x56c>
    26f4:	01000404 	movi	r4,16
    26f8:	3904d83a 	srl	r2,r7,r4
    26fc:	00c00034 	movhi	r3,0
    2700:	18d8b404 	addi	r3,r3,25296
    2704:	1885883a 	add	r2,r3,r2
    2708:	14c00003 	ldbu	r19,0(r2)
    270c:	00c00804 	movi	r3,32
    2710:	9927883a 	add	r19,r19,r4
    2714:	1ce9c83a 	sub	r20,r3,r19
    2718:	a0005c1e 	bne	r20,zero,288c <__umoddi3+0x2ec>
    271c:	3c400136 	bltu	r7,r17,2724 <__umoddi3+0x184>
    2720:	81810a36 	bltu	r16,r6,2b4c <__umoddi3+0x5ac>
    2724:	8185c83a 	sub	r2,r16,r6
    2728:	89e3c83a 	sub	r17,r17,r7
    272c:	8089803a 	cmpltu	r4,r16,r2
    2730:	8939c83a 	sub	fp,r17,r4
    2734:	e007883a 	mov	r3,fp
    2738:	00003b06 	br	2828 <__umoddi3+0x288>
    273c:	3000041e 	bne	r6,zero,2750 <__umoddi3+0x1b0>
    2740:	000b883a 	mov	r5,zero
    2744:	01000044 	movi	r4,1
    2748:	0002c5c0 	call	2c5c <__udivsi3>
    274c:	1027883a 	mov	r19,r2
    2750:	00bfffd4 	movui	r2,65535
    2754:	14c0442e 	bgeu	r2,r19,2868 <__umoddi3+0x2c8>
    2758:	00804034 	movhi	r2,256
    275c:	10bfffc4 	addi	r2,r2,-1
    2760:	14c0ec36 	bltu	r2,r19,2b14 <__umoddi3+0x574>
    2764:	00800404 	movi	r2,16
    2768:	9886d83a 	srl	r3,r19,r2
    276c:	01000034 	movhi	r4,0
    2770:	2118b404 	addi	r4,r4,25296
    2774:	20c7883a 	add	r3,r4,r3
    2778:	18c00003 	ldbu	r3,0(r3)
    277c:	1887883a 	add	r3,r3,r2
    2780:	00800804 	movi	r2,32
    2784:	10e5c83a 	sub	r18,r2,r3
    2788:	9000ab1e 	bne	r18,zero,2a38 <__umoddi3+0x498>
    278c:	982cd43a 	srli	r22,r19,16
    2790:	8ce3c83a 	sub	r17,r17,r19
    2794:	9dffffcc 	andi	r23,r19,65535
    2798:	b00b883a 	mov	r5,r22
    279c:	8809883a 	mov	r4,r17
    27a0:	0002cc00 	call	2cc0 <__umodsi3>
    27a4:	b00b883a 	mov	r5,r22
    27a8:	8809883a 	mov	r4,r17
    27ac:	102b883a 	mov	r21,r2
    27b0:	0002c5c0 	call	2c5c <__udivsi3>
    27b4:	b80b883a 	mov	r5,r23
    27b8:	1009883a 	mov	r4,r2
    27bc:	0002d180 	call	2d18 <__mulsi3>
    27c0:	a82a943a 	slli	r21,r21,16
    27c4:	a006d43a 	srli	r3,r20,16
    27c8:	1d46b03a 	or	r3,r3,r21
    27cc:	1880042e 	bgeu	r3,r2,27e0 <__umoddi3+0x240>
    27d0:	1cc7883a 	add	r3,r3,r19
    27d4:	1cc00236 	bltu	r3,r19,27e0 <__umoddi3+0x240>
    27d8:	1880012e 	bgeu	r3,r2,27e0 <__umoddi3+0x240>
    27dc:	1cc7883a 	add	r3,r3,r19
    27e0:	18a1c83a 	sub	r16,r3,r2
    27e4:	b00b883a 	mov	r5,r22
    27e8:	8009883a 	mov	r4,r16
    27ec:	0002cc00 	call	2cc0 <__umodsi3>
    27f0:	1023883a 	mov	r17,r2
    27f4:	b00b883a 	mov	r5,r22
    27f8:	8009883a 	mov	r4,r16
    27fc:	0002c5c0 	call	2c5c <__udivsi3>
    2800:	8822943a 	slli	r17,r17,16
    2804:	b80b883a 	mov	r5,r23
    2808:	1009883a 	mov	r4,r2
    280c:	0002d180 	call	2d18 <__mulsi3>
    2810:	a53fffcc 	andi	r20,r20,65535
    2814:	a446b03a 	or	r3,r20,r17
    2818:	18bfac2e 	bgeu	r3,r2,26cc <_gp+0xffff42fc>
    281c:	003fa706 	br	26bc <_gp+0xffff42ec>
    2820:	2005883a 	mov	r2,r4
    2824:	2807883a 	mov	r3,r5
    2828:	dfc00c17 	ldw	ra,48(sp)
    282c:	df000b17 	ldw	fp,44(sp)
    2830:	ddc00a17 	ldw	r23,40(sp)
    2834:	dd800917 	ldw	r22,36(sp)
    2838:	dd400817 	ldw	r21,32(sp)
    283c:	dd000717 	ldw	r20,28(sp)
    2840:	dcc00617 	ldw	r19,24(sp)
    2844:	dc800517 	ldw	r18,20(sp)
    2848:	dc400417 	ldw	r17,16(sp)
    284c:	dc000317 	ldw	r16,12(sp)
    2850:	dec00d04 	addi	sp,sp,52
    2854:	f800283a 	ret
    2858:	04c03fc4 	movi	r19,255
    285c:	99c9803a 	cmpltu	r4,r19,r7
    2860:	200890fa 	slli	r4,r4,3
    2864:	003fa406 	br	26f8 <_gp+0xffff4328>
    2868:	00803fc4 	movi	r2,255
    286c:	14c5803a 	cmpltu	r2,r2,r19
    2870:	100490fa 	slli	r2,r2,3
    2874:	003fbc06 	br	2768 <_gp+0xffff4398>
    2878:	00804034 	movhi	r2,256
    287c:	10bfffc4 	addi	r2,r2,-1
    2880:	1180a636 	bltu	r2,r6,2b1c <__umoddi3+0x57c>
    2884:	01000404 	movi	r4,16
    2888:	003f5c06 	br	25fc <_gp+0xffff422c>
    288c:	3d0e983a 	sll	r7,r7,r20
    2890:	34ead83a 	srl	r21,r6,r19
    2894:	8cc6d83a 	srl	r3,r17,r19
    2898:	8d10983a 	sll	r8,r17,r20
    289c:	3d6ab03a 	or	r21,r7,r21
    28a0:	a82cd43a 	srli	r22,r21,16
    28a4:	84e2d83a 	srl	r17,r16,r19
    28a8:	1809883a 	mov	r4,r3
    28ac:	b00b883a 	mov	r5,r22
    28b0:	8a22b03a 	or	r17,r17,r8
    28b4:	3524983a 	sll	r18,r6,r20
    28b8:	dc400015 	stw	r17,0(sp)
    28bc:	d8c00115 	stw	r3,4(sp)
    28c0:	0002cc00 	call	2cc0 <__umodsi3>
    28c4:	d8c00117 	ldw	r3,4(sp)
    28c8:	b00b883a 	mov	r5,r22
    28cc:	1039883a 	mov	fp,r2
    28d0:	1809883a 	mov	r4,r3
    28d4:	0002c5c0 	call	2c5c <__udivsi3>
    28d8:	adffffcc 	andi	r23,r21,65535
    28dc:	100b883a 	mov	r5,r2
    28e0:	b809883a 	mov	r4,r23
    28e4:	1023883a 	mov	r17,r2
    28e8:	0002d180 	call	2d18 <__mulsi3>
    28ec:	d9400017 	ldw	r5,0(sp)
    28f0:	e008943a 	slli	r4,fp,16
    28f4:	8520983a 	sll	r16,r16,r20
    28f8:	2806d43a 	srli	r3,r5,16
    28fc:	1906b03a 	or	r3,r3,r4
    2900:	1880042e 	bgeu	r3,r2,2914 <__umoddi3+0x374>
    2904:	1d47883a 	add	r3,r3,r21
    2908:	893fffc4 	addi	r4,r17,-1
    290c:	1d40892e 	bgeu	r3,r21,2b34 <__umoddi3+0x594>
    2910:	2023883a 	mov	r17,r4
    2914:	18b9c83a 	sub	fp,r3,r2
    2918:	b00b883a 	mov	r5,r22
    291c:	e009883a 	mov	r4,fp
    2920:	0002cc00 	call	2cc0 <__umodsi3>
    2924:	b00b883a 	mov	r5,r22
    2928:	e009883a 	mov	r4,fp
    292c:	d8800215 	stw	r2,8(sp)
    2930:	0002c5c0 	call	2c5c <__udivsi3>
    2934:	100b883a 	mov	r5,r2
    2938:	b809883a 	mov	r4,r23
    293c:	102d883a 	mov	r22,r2
    2940:	0002d180 	call	2d18 <__mulsi3>
    2944:	d9800217 	ldw	r6,8(sp)
    2948:	d8c00017 	ldw	r3,0(sp)
    294c:	300c943a 	slli	r6,r6,16
    2950:	1a3fffcc 	andi	r8,r3,65535
    2954:	4190b03a 	or	r8,r8,r6
    2958:	4080042e 	bgeu	r8,r2,296c <__umoddi3+0x3cc>
    295c:	4551883a 	add	r8,r8,r21
    2960:	b0ffffc4 	addi	r3,r22,-1
    2964:	45406f2e 	bgeu	r8,r21,2b24 <__umoddi3+0x584>
    2968:	182d883a 	mov	r22,r3
    296c:	880e943a 	slli	r7,r17,16
    2970:	9006d43a 	srli	r3,r18,16
    2974:	91bfffcc 	andi	r6,r18,65535
    2978:	3dacb03a 	or	r22,r7,r22
    297c:	b02ed43a 	srli	r23,r22,16
    2980:	b5bfffcc 	andi	r22,r22,65535
    2984:	300b883a 	mov	r5,r6
    2988:	b009883a 	mov	r4,r22
    298c:	40a3c83a 	sub	r17,r8,r2
    2990:	d8c00115 	stw	r3,4(sp)
    2994:	d9800215 	stw	r6,8(sp)
    2998:	0002d180 	call	2d18 <__mulsi3>
    299c:	d9800217 	ldw	r6,8(sp)
    29a0:	b809883a 	mov	r4,r23
    29a4:	1039883a 	mov	fp,r2
    29a8:	300b883a 	mov	r5,r6
    29ac:	0002d180 	call	2d18 <__mulsi3>
    29b0:	d8c00117 	ldw	r3,4(sp)
    29b4:	b809883a 	mov	r4,r23
    29b8:	d8800215 	stw	r2,8(sp)
    29bc:	180b883a 	mov	r5,r3
    29c0:	0002d180 	call	2d18 <__mulsi3>
    29c4:	d8c00117 	ldw	r3,4(sp)
    29c8:	b009883a 	mov	r4,r22
    29cc:	102f883a 	mov	r23,r2
    29d0:	180b883a 	mov	r5,r3
    29d4:	0002d180 	call	2d18 <__mulsi3>
    29d8:	d9800217 	ldw	r6,8(sp)
    29dc:	e006d43a 	srli	r3,fp,16
    29e0:	1185883a 	add	r2,r2,r6
    29e4:	1885883a 	add	r2,r3,r2
    29e8:	1180022e 	bgeu	r2,r6,29f4 <__umoddi3+0x454>
    29ec:	00c00074 	movhi	r3,1
    29f0:	b8ef883a 	add	r23,r23,r3
    29f4:	1006d43a 	srli	r3,r2,16
    29f8:	1004943a 	slli	r2,r2,16
    29fc:	e73fffcc 	andi	fp,fp,65535
    2a00:	1dc7883a 	add	r3,r3,r23
    2a04:	1739883a 	add	fp,r2,fp
    2a08:	88c03a36 	bltu	r17,r3,2af4 <__umoddi3+0x554>
    2a0c:	88c05126 	beq	r17,r3,2b54 <__umoddi3+0x5b4>
    2a10:	88c9c83a 	sub	r4,r17,r3
    2a14:	e00f883a 	mov	r7,fp
    2a18:	81cfc83a 	sub	r7,r16,r7
    2a1c:	81c7803a 	cmpltu	r3,r16,r7
    2a20:	20c7c83a 	sub	r3,r4,r3
    2a24:	1cc4983a 	sll	r2,r3,r19
    2a28:	3d0ed83a 	srl	r7,r7,r20
    2a2c:	1d06d83a 	srl	r3,r3,r20
    2a30:	11c4b03a 	or	r2,r2,r7
    2a34:	003f7c06 	br	2828 <_gp+0xffff4458>
    2a38:	9ca6983a 	sll	r19,r19,r18
    2a3c:	88f8d83a 	srl	fp,r17,r3
    2a40:	80c4d83a 	srl	r2,r16,r3
    2a44:	982cd43a 	srli	r22,r19,16
    2a48:	8ca2983a 	sll	r17,r17,r18
    2a4c:	e009883a 	mov	r4,fp
    2a50:	b00b883a 	mov	r5,r22
    2a54:	146ab03a 	or	r21,r2,r17
    2a58:	0002cc00 	call	2cc0 <__umodsi3>
    2a5c:	b00b883a 	mov	r5,r22
    2a60:	e009883a 	mov	r4,fp
    2a64:	1029883a 	mov	r20,r2
    2a68:	9dffffcc 	andi	r23,r19,65535
    2a6c:	0002c5c0 	call	2c5c <__udivsi3>
    2a70:	b809883a 	mov	r4,r23
    2a74:	100b883a 	mov	r5,r2
    2a78:	0002d180 	call	2d18 <__mulsi3>
    2a7c:	a008943a 	slli	r4,r20,16
    2a80:	a806d43a 	srli	r3,r21,16
    2a84:	84a8983a 	sll	r20,r16,r18
    2a88:	1906b03a 	or	r3,r3,r4
    2a8c:	1880042e 	bgeu	r3,r2,2aa0 <__umoddi3+0x500>
    2a90:	1cc7883a 	add	r3,r3,r19
    2a94:	1cc00236 	bltu	r3,r19,2aa0 <__umoddi3+0x500>
    2a98:	1880012e 	bgeu	r3,r2,2aa0 <__umoddi3+0x500>
    2a9c:	1cc7883a 	add	r3,r3,r19
    2aa0:	18a3c83a 	sub	r17,r3,r2
    2aa4:	b00b883a 	mov	r5,r22
    2aa8:	8809883a 	mov	r4,r17
    2aac:	0002cc00 	call	2cc0 <__umodsi3>
    2ab0:	b00b883a 	mov	r5,r22
    2ab4:	8809883a 	mov	r4,r17
    2ab8:	1021883a 	mov	r16,r2
    2abc:	0002c5c0 	call	2c5c <__udivsi3>
    2ac0:	100b883a 	mov	r5,r2
    2ac4:	b809883a 	mov	r4,r23
    2ac8:	8020943a 	slli	r16,r16,16
    2acc:	0002d180 	call	2d18 <__mulsi3>
    2ad0:	a8ffffcc 	andi	r3,r21,65535
    2ad4:	1c06b03a 	or	r3,r3,r16
    2ad8:	1880042e 	bgeu	r3,r2,2aec <__umoddi3+0x54c>
    2adc:	1cc7883a 	add	r3,r3,r19
    2ae0:	1cc00236 	bltu	r3,r19,2aec <__umoddi3+0x54c>
    2ae4:	1880012e 	bgeu	r3,r2,2aec <__umoddi3+0x54c>
    2ae8:	1cc7883a 	add	r3,r3,r19
    2aec:	18a3c83a 	sub	r17,r3,r2
    2af0:	003f2906 	br	2798 <_gp+0xffff43c8>
    2af4:	e48fc83a 	sub	r7,fp,r18
    2af8:	1d49c83a 	sub	r4,r3,r21
    2afc:	e1f9803a 	cmpltu	fp,fp,r7
    2b00:	2739c83a 	sub	fp,r4,fp
    2b04:	8f09c83a 	sub	r4,r17,fp
    2b08:	003fc306 	br	2a18 <_gp+0xffff4648>
    2b0c:	01000604 	movi	r4,24
    2b10:	003ef906 	br	26f8 <_gp+0xffff4328>
    2b14:	00800604 	movi	r2,24
    2b18:	003f1306 	br	2768 <_gp+0xffff4398>
    2b1c:	01000604 	movi	r4,24
    2b20:	003eb606 	br	25fc <_gp+0xffff422c>
    2b24:	40bf902e 	bgeu	r8,r2,2968 <_gp+0xffff4598>
    2b28:	b5bfff84 	addi	r22,r22,-2
    2b2c:	4551883a 	add	r8,r8,r21
    2b30:	003f8e06 	br	296c <_gp+0xffff459c>
    2b34:	18bf762e 	bgeu	r3,r2,2910 <_gp+0xffff4540>
    2b38:	8c7fff84 	addi	r17,r17,-2
    2b3c:	1d47883a 	add	r3,r3,r21
    2b40:	003f7406 	br	2914 <_gp+0xffff4544>
    2b44:	1cc7883a 	add	r3,r3,r19
    2b48:	003ecd06 	br	2680 <_gp+0xffff42b0>
    2b4c:	8005883a 	mov	r2,r16
    2b50:	003ef806 	br	2734 <_gp+0xffff4364>
    2b54:	873fe736 	bltu	r16,fp,2af4 <_gp+0xffff4724>
    2b58:	e00f883a 	mov	r7,fp
    2b5c:	0009883a 	mov	r4,zero
    2b60:	003fad06 	br	2a18 <_gp+0xffff4648>

00002b64 <__divsi3>:
    2b64:	20001b16 	blt	r4,zero,2bd4 <__divsi3+0x70>
    2b68:	000f883a 	mov	r7,zero
    2b6c:	28001616 	blt	r5,zero,2bc8 <__divsi3+0x64>
    2b70:	200d883a 	mov	r6,r4
    2b74:	29001a2e 	bgeu	r5,r4,2be0 <__divsi3+0x7c>
    2b78:	00800804 	movi	r2,32
    2b7c:	00c00044 	movi	r3,1
    2b80:	00000106 	br	2b88 <__divsi3+0x24>
    2b84:	10000d26 	beq	r2,zero,2bbc <__divsi3+0x58>
    2b88:	294b883a 	add	r5,r5,r5
    2b8c:	10bfffc4 	addi	r2,r2,-1
    2b90:	18c7883a 	add	r3,r3,r3
    2b94:	293ffb36 	bltu	r5,r4,2b84 <_gp+0xffff47b4>
    2b98:	0005883a 	mov	r2,zero
    2b9c:	18000726 	beq	r3,zero,2bbc <__divsi3+0x58>
    2ba0:	0005883a 	mov	r2,zero
    2ba4:	31400236 	bltu	r6,r5,2bb0 <__divsi3+0x4c>
    2ba8:	314dc83a 	sub	r6,r6,r5
    2bac:	10c4b03a 	or	r2,r2,r3
    2bb0:	1806d07a 	srli	r3,r3,1
    2bb4:	280ad07a 	srli	r5,r5,1
    2bb8:	183ffa1e 	bne	r3,zero,2ba4 <_gp+0xffff47d4>
    2bbc:	38000126 	beq	r7,zero,2bc4 <__divsi3+0x60>
    2bc0:	0085c83a 	sub	r2,zero,r2
    2bc4:	f800283a 	ret
    2bc8:	014bc83a 	sub	r5,zero,r5
    2bcc:	39c0005c 	xori	r7,r7,1
    2bd0:	003fe706 	br	2b70 <_gp+0xffff47a0>
    2bd4:	0109c83a 	sub	r4,zero,r4
    2bd8:	01c00044 	movi	r7,1
    2bdc:	003fe306 	br	2b6c <_gp+0xffff479c>
    2be0:	00c00044 	movi	r3,1
    2be4:	003fee06 	br	2ba0 <_gp+0xffff47d0>

00002be8 <__modsi3>:
    2be8:	20001716 	blt	r4,zero,2c48 <__modsi3+0x60>
    2bec:	000f883a 	mov	r7,zero
    2bf0:	2005883a 	mov	r2,r4
    2bf4:	28001216 	blt	r5,zero,2c40 <__modsi3+0x58>
    2bf8:	2900162e 	bgeu	r5,r4,2c54 <__modsi3+0x6c>
    2bfc:	01800804 	movi	r6,32
    2c00:	00c00044 	movi	r3,1
    2c04:	00000106 	br	2c0c <__modsi3+0x24>
    2c08:	30000a26 	beq	r6,zero,2c34 <__modsi3+0x4c>
    2c0c:	294b883a 	add	r5,r5,r5
    2c10:	31bfffc4 	addi	r6,r6,-1
    2c14:	18c7883a 	add	r3,r3,r3
    2c18:	293ffb36 	bltu	r5,r4,2c08 <_gp+0xffff4838>
    2c1c:	18000526 	beq	r3,zero,2c34 <__modsi3+0x4c>
    2c20:	1806d07a 	srli	r3,r3,1
    2c24:	11400136 	bltu	r2,r5,2c2c <__modsi3+0x44>
    2c28:	1145c83a 	sub	r2,r2,r5
    2c2c:	280ad07a 	srli	r5,r5,1
    2c30:	183ffb1e 	bne	r3,zero,2c20 <_gp+0xffff4850>
    2c34:	38000126 	beq	r7,zero,2c3c <__modsi3+0x54>
    2c38:	0085c83a 	sub	r2,zero,r2
    2c3c:	f800283a 	ret
    2c40:	014bc83a 	sub	r5,zero,r5
    2c44:	003fec06 	br	2bf8 <_gp+0xffff4828>
    2c48:	0109c83a 	sub	r4,zero,r4
    2c4c:	01c00044 	movi	r7,1
    2c50:	003fe706 	br	2bf0 <_gp+0xffff4820>
    2c54:	00c00044 	movi	r3,1
    2c58:	003ff106 	br	2c20 <_gp+0xffff4850>

00002c5c <__udivsi3>:
    2c5c:	200d883a 	mov	r6,r4
    2c60:	2900152e 	bgeu	r5,r4,2cb8 <__udivsi3+0x5c>
    2c64:	28001416 	blt	r5,zero,2cb8 <__udivsi3+0x5c>
    2c68:	00800804 	movi	r2,32
    2c6c:	00c00044 	movi	r3,1
    2c70:	00000206 	br	2c7c <__udivsi3+0x20>
    2c74:	10000e26 	beq	r2,zero,2cb0 <__udivsi3+0x54>
    2c78:	28000516 	blt	r5,zero,2c90 <__udivsi3+0x34>
    2c7c:	294b883a 	add	r5,r5,r5
    2c80:	10bfffc4 	addi	r2,r2,-1
    2c84:	18c7883a 	add	r3,r3,r3
    2c88:	293ffa36 	bltu	r5,r4,2c74 <_gp+0xffff48a4>
    2c8c:	18000826 	beq	r3,zero,2cb0 <__udivsi3+0x54>
    2c90:	0005883a 	mov	r2,zero
    2c94:	31400236 	bltu	r6,r5,2ca0 <__udivsi3+0x44>
    2c98:	314dc83a 	sub	r6,r6,r5
    2c9c:	10c4b03a 	or	r2,r2,r3
    2ca0:	1806d07a 	srli	r3,r3,1
    2ca4:	280ad07a 	srli	r5,r5,1
    2ca8:	183ffa1e 	bne	r3,zero,2c94 <_gp+0xffff48c4>
    2cac:	f800283a 	ret
    2cb0:	0005883a 	mov	r2,zero
    2cb4:	f800283a 	ret
    2cb8:	00c00044 	movi	r3,1
    2cbc:	003ff406 	br	2c90 <_gp+0xffff48c0>

00002cc0 <__umodsi3>:
    2cc0:	2005883a 	mov	r2,r4
    2cc4:	2900122e 	bgeu	r5,r4,2d10 <__umodsi3+0x50>
    2cc8:	28001116 	blt	r5,zero,2d10 <__umodsi3+0x50>
    2ccc:	01800804 	movi	r6,32
    2cd0:	00c00044 	movi	r3,1
    2cd4:	00000206 	br	2ce0 <__umodsi3+0x20>
    2cd8:	30000c26 	beq	r6,zero,2d0c <__umodsi3+0x4c>
    2cdc:	28000516 	blt	r5,zero,2cf4 <__umodsi3+0x34>
    2ce0:	294b883a 	add	r5,r5,r5
    2ce4:	31bfffc4 	addi	r6,r6,-1
    2ce8:	18c7883a 	add	r3,r3,r3
    2cec:	293ffa36 	bltu	r5,r4,2cd8 <_gp+0xffff4908>
    2cf0:	18000626 	beq	r3,zero,2d0c <__umodsi3+0x4c>
    2cf4:	1806d07a 	srli	r3,r3,1
    2cf8:	11400136 	bltu	r2,r5,2d00 <__umodsi3+0x40>
    2cfc:	1145c83a 	sub	r2,r2,r5
    2d00:	280ad07a 	srli	r5,r5,1
    2d04:	183ffb1e 	bne	r3,zero,2cf4 <_gp+0xffff4924>
    2d08:	f800283a 	ret
    2d0c:	f800283a 	ret
    2d10:	00c00044 	movi	r3,1
    2d14:	003ff706 	br	2cf4 <_gp+0xffff4924>

00002d18 <__mulsi3>:
    2d18:	0005883a 	mov	r2,zero
    2d1c:	20000726 	beq	r4,zero,2d3c <__mulsi3+0x24>
    2d20:	20c0004c 	andi	r3,r4,1
    2d24:	2008d07a 	srli	r4,r4,1
    2d28:	18000126 	beq	r3,zero,2d30 <__mulsi3+0x18>
    2d2c:	1145883a 	add	r2,r2,r5
    2d30:	294b883a 	add	r5,r5,r5
    2d34:	203ffa1e 	bne	r4,zero,2d20 <_gp+0xffff4950>
    2d38:	f800283a 	ret
    2d3c:	f800283a 	ret

00002d40 <__addsf3>:
    2d40:	defffc04 	addi	sp,sp,-16
    2d44:	2004d7fa 	srli	r2,r4,31
    2d48:	280cd5fa 	srli	r6,r5,23
    2d4c:	dc000015 	stw	r16,0(sp)
    2d50:	00c02034 	movhi	r3,128
    2d54:	2020d5fa 	srli	r16,r4,23
    2d58:	280ed7fa 	srli	r7,r5,31
    2d5c:	18ffffc4 	addi	r3,r3,-1
    2d60:	dc400115 	stw	r17,4(sp)
    2d64:	1908703a 	and	r4,r3,r4
    2d68:	194a703a 	and	r5,r3,r5
    2d6c:	dfc00315 	stw	ra,12(sp)
    2d70:	dc800215 	stw	r18,8(sp)
    2d74:	14403fcc 	andi	r17,r2,255
    2d78:	84003fcc 	andi	r16,r16,255
    2d7c:	200890fa 	slli	r4,r4,3
    2d80:	31803fcc 	andi	r6,r6,255
    2d84:	280a90fa 	slli	r5,r5,3
    2d88:	89c05026 	beq	r17,r7,2ecc <__addsf3+0x18c>
    2d8c:	8185c83a 	sub	r2,r16,r6
    2d90:	00807a0e 	bge	zero,r2,2f7c <__addsf3+0x23c>
    2d94:	30001e1e 	bne	r6,zero,2e10 <__addsf3+0xd0>
    2d98:	28006d1e 	bne	r5,zero,2f50 <__addsf3+0x210>
    2d9c:	208001cc 	andi	r2,r4,7
    2da0:	10000426 	beq	r2,zero,2db4 <__addsf3+0x74>
    2da4:	208003cc 	andi	r2,r4,15
    2da8:	00c00104 	movi	r3,4
    2dac:	10c00126 	beq	r2,r3,2db4 <__addsf3+0x74>
    2db0:	20c9883a 	add	r4,r4,r3
    2db4:	2081002c 	andhi	r2,r4,1024
    2db8:	10003926 	beq	r2,zero,2ea0 <__addsf3+0x160>
    2dbc:	84000044 	addi	r16,r16,1
    2dc0:	00803fc4 	movi	r2,255
    2dc4:	80807826 	beq	r16,r2,2fa8 <__addsf3+0x268>
    2dc8:	200891ba 	slli	r4,r4,6
    2dcc:	8805883a 	mov	r2,r17
    2dd0:	2008d27a 	srli	r4,r4,9
    2dd4:	84003fcc 	andi	r16,r16,255
    2dd8:	800695fa 	slli	r3,r16,23
    2ddc:	10803fcc 	andi	r2,r2,255
    2de0:	04002034 	movhi	r16,128
    2de4:	843fffc4 	addi	r16,r16,-1
    2de8:	100497fa 	slli	r2,r2,31
    2dec:	2408703a 	and	r4,r4,r16
    2df0:	20e0b03a 	or	r16,r4,r3
    2df4:	8084b03a 	or	r2,r16,r2
    2df8:	dfc00317 	ldw	ra,12(sp)
    2dfc:	dc800217 	ldw	r18,8(sp)
    2e00:	dc400117 	ldw	r17,4(sp)
    2e04:	dc000017 	ldw	r16,0(sp)
    2e08:	dec00404 	addi	sp,sp,16
    2e0c:	f800283a 	ret
    2e10:	00c03fc4 	movi	r3,255
    2e14:	80ffe126 	beq	r16,r3,2d9c <_gp+0xffff49cc>
    2e18:	29410034 	orhi	r5,r5,1024
    2e1c:	00c006c4 	movi	r3,27
    2e20:	18807516 	blt	r3,r2,2ff8 <__addsf3+0x2b8>
    2e24:	00c00804 	movi	r3,32
    2e28:	1887c83a 	sub	r3,r3,r2
    2e2c:	28c6983a 	sll	r3,r5,r3
    2e30:	288ad83a 	srl	r5,r5,r2
    2e34:	1804c03a 	cmpne	r2,r3,zero
    2e38:	288ab03a 	or	r5,r5,r2
    2e3c:	2149c83a 	sub	r4,r4,r5
    2e40:	2081002c 	andhi	r2,r4,1024
    2e44:	10001426 	beq	r2,zero,2e98 <__addsf3+0x158>
    2e48:	04810034 	movhi	r18,1024
    2e4c:	94bfffc4 	addi	r18,r18,-1
    2e50:	24a4703a 	and	r18,r4,r18
    2e54:	9009883a 	mov	r4,r18
    2e58:	0005f680 	call	5f68 <__clzsi2>
    2e5c:	10bffec4 	addi	r2,r2,-5
    2e60:	90a4983a 	sll	r18,r18,r2
    2e64:	14005416 	blt	r2,r16,2fb8 <__addsf3+0x278>
    2e68:	1405c83a 	sub	r2,r2,r16
    2e6c:	11000044 	addi	r4,r2,1
    2e70:	00800804 	movi	r2,32
    2e74:	1105c83a 	sub	r2,r2,r4
    2e78:	9084983a 	sll	r2,r18,r2
    2e7c:	9124d83a 	srl	r18,r18,r4
    2e80:	0021883a 	mov	r16,zero
    2e84:	1008c03a 	cmpne	r4,r2,zero
    2e88:	9108b03a 	or	r4,r18,r4
    2e8c:	003fc306 	br	2d9c <_gp+0xffff49cc>
    2e90:	1000db26 	beq	r2,zero,3200 <__addsf3+0x4c0>
    2e94:	1009883a 	mov	r4,r2
    2e98:	208001cc 	andi	r2,r4,7
    2e9c:	103fc11e 	bne	r2,zero,2da4 <_gp+0xffff49d4>
    2ea0:	2006d0fa 	srli	r3,r4,3
    2ea4:	01003fc4 	movi	r4,255
    2ea8:	8805883a 	mov	r2,r17
    2eac:	8100241e 	bne	r16,r4,2f40 <__addsf3+0x200>
    2eb0:	18006e26 	beq	r3,zero,306c <__addsf3+0x32c>
    2eb4:	19001034 	orhi	r4,r3,64
    2eb8:	00c02034 	movhi	r3,128
    2ebc:	18ffffc4 	addi	r3,r3,-1
    2ec0:	043fffc4 	movi	r16,-1
    2ec4:	20c8703a 	and	r4,r4,r3
    2ec8:	003fc206 	br	2dd4 <_gp+0xffff4a04>
    2ecc:	8187c83a 	sub	r3,r16,r6
    2ed0:	00c03e0e 	bge	zero,r3,2fcc <__addsf3+0x28c>
    2ed4:	30002326 	beq	r6,zero,2f64 <__addsf3+0x224>
    2ed8:	01803fc4 	movi	r6,255
    2edc:	81bfaf26 	beq	r16,r6,2d9c <_gp+0xffff49cc>
    2ee0:	29410034 	orhi	r5,r5,1024
    2ee4:	018006c4 	movi	r6,27
    2ee8:	30c07416 	blt	r6,r3,30bc <__addsf3+0x37c>
    2eec:	01800804 	movi	r6,32
    2ef0:	30cdc83a 	sub	r6,r6,r3
    2ef4:	298c983a 	sll	r6,r5,r6
    2ef8:	28cad83a 	srl	r5,r5,r3
    2efc:	3006c03a 	cmpne	r3,r6,zero
    2f00:	28cab03a 	or	r5,r5,r3
    2f04:	2149883a 	add	r4,r4,r5
    2f08:	20c1002c 	andhi	r3,r4,1024
    2f0c:	183fe226 	beq	r3,zero,2e98 <_gp+0xffff4ac8>
    2f10:	84000044 	addi	r16,r16,1
    2f14:	00c03fc4 	movi	r3,255
    2f18:	80c05426 	beq	r16,r3,306c <__addsf3+0x32c>
    2f1c:	00bf0034 	movhi	r2,64512
    2f20:	10bfffc4 	addi	r2,r2,-1
    2f24:	20c0004c 	andi	r3,r4,1
    2f28:	2088703a 	and	r4,r4,r2
    2f2c:	2008d07a 	srli	r4,r4,1
    2f30:	20c8b03a 	or	r4,r4,r3
    2f34:	003f9906 	br	2d9c <_gp+0xffff49cc>
    2f38:	0007883a 	mov	r3,zero
    2f3c:	0005883a 	mov	r2,zero
    2f40:	01002034 	movhi	r4,128
    2f44:	213fffc4 	addi	r4,r4,-1
    2f48:	1908703a 	and	r4,r3,r4
    2f4c:	003fa106 	br	2dd4 <_gp+0xffff4a04>
    2f50:	10bfffc4 	addi	r2,r2,-1
    2f54:	103fb926 	beq	r2,zero,2e3c <_gp+0xffff4a6c>
    2f58:	00c03fc4 	movi	r3,255
    2f5c:	80ffaf1e 	bne	r16,r3,2e1c <_gp+0xffff4a4c>
    2f60:	003f8e06 	br	2d9c <_gp+0xffff49cc>
    2f64:	283f8d26 	beq	r5,zero,2d9c <_gp+0xffff49cc>
    2f68:	18ffffc4 	addi	r3,r3,-1
    2f6c:	183fe526 	beq	r3,zero,2f04 <_gp+0xffff4b34>
    2f70:	01803fc4 	movi	r6,255
    2f74:	81bfdb1e 	bne	r16,r6,2ee4 <_gp+0xffff4b14>
    2f78:	003f8806 	br	2d9c <_gp+0xffff49cc>
    2f7c:	1000201e 	bne	r2,zero,3000 <__addsf3+0x2c0>
    2f80:	80800044 	addi	r2,r16,1
    2f84:	10803fcc 	andi	r2,r2,255
    2f88:	01800044 	movi	r6,1
    2f8c:	3080450e 	bge	r6,r2,30a4 <__addsf3+0x364>
    2f90:	2165c83a 	sub	r18,r4,r5
    2f94:	90c1002c 	andhi	r3,r18,1024
    2f98:	18002b26 	beq	r3,zero,3048 <__addsf3+0x308>
    2f9c:	2925c83a 	sub	r18,r5,r4
    2fa0:	3823883a 	mov	r17,r7
    2fa4:	003fab06 	br	2e54 <_gp+0xffff4a84>
    2fa8:	8805883a 	mov	r2,r17
    2fac:	043fffc4 	movi	r16,-1
    2fb0:	0009883a 	mov	r4,zero
    2fb4:	003f8706 	br	2dd4 <_gp+0xffff4a04>
    2fb8:	013f0034 	movhi	r4,64512
    2fbc:	213fffc4 	addi	r4,r4,-1
    2fc0:	80a1c83a 	sub	r16,r16,r2
    2fc4:	9108703a 	and	r4,r18,r4
    2fc8:	003f7406 	br	2d9c <_gp+0xffff49cc>
    2fcc:	1800411e 	bne	r3,zero,30d4 <__addsf3+0x394>
    2fd0:	80c00044 	addi	r3,r16,1
    2fd4:	19c03fcc 	andi	r7,r3,255
    2fd8:	01800044 	movi	r6,1
    2fdc:	31c0260e 	bge	r6,r7,3078 <__addsf3+0x338>
    2fe0:	01803fc4 	movi	r6,255
    2fe4:	19802126 	beq	r3,r6,306c <__addsf3+0x32c>
    2fe8:	2149883a 	add	r4,r4,r5
    2fec:	2008d07a 	srli	r4,r4,1
    2ff0:	1821883a 	mov	r16,r3
    2ff4:	003f6906 	br	2d9c <_gp+0xffff49cc>
    2ff8:	01400044 	movi	r5,1
    2ffc:	003f8f06 	br	2e3c <_gp+0xffff4a6c>
    3000:	8000151e 	bne	r16,zero,3058 <__addsf3+0x318>
    3004:	20002f26 	beq	r4,zero,30c4 <__addsf3+0x384>
    3008:	0084303a 	nor	r2,zero,r2
    300c:	10000a26 	beq	r2,zero,3038 <__addsf3+0x2f8>
    3010:	00c03fc4 	movi	r3,255
    3014:	30c02b26 	beq	r6,r3,30c4 <__addsf3+0x384>
    3018:	00c006c4 	movi	r3,27
    301c:	18806d16 	blt	r3,r2,31d4 <__addsf3+0x494>
    3020:	00c00804 	movi	r3,32
    3024:	1887c83a 	sub	r3,r3,r2
    3028:	20c6983a 	sll	r3,r4,r3
    302c:	2084d83a 	srl	r2,r4,r2
    3030:	1808c03a 	cmpne	r4,r3,zero
    3034:	1108b03a 	or	r4,r2,r4
    3038:	2909c83a 	sub	r4,r5,r4
    303c:	3021883a 	mov	r16,r6
    3040:	3823883a 	mov	r17,r7
    3044:	003f7e06 	br	2e40 <_gp+0xffff4a70>
    3048:	903f821e 	bne	r18,zero,2e54 <_gp+0xffff4a84>
    304c:	0005883a 	mov	r2,zero
    3050:	0021883a 	mov	r16,zero
    3054:	003fba06 	br	2f40 <_gp+0xffff4b70>
    3058:	00c03fc4 	movi	r3,255
    305c:	30c01926 	beq	r6,r3,30c4 <__addsf3+0x384>
    3060:	0085c83a 	sub	r2,zero,r2
    3064:	21010034 	orhi	r4,r4,1024
    3068:	003feb06 	br	3018 <_gp+0xffff4c48>
    306c:	043fffc4 	movi	r16,-1
    3070:	0009883a 	mov	r4,zero
    3074:	003f5706 	br	2dd4 <_gp+0xffff4a04>
    3078:	80004a1e 	bne	r16,zero,31a4 <__addsf3+0x464>
    307c:	20005926 	beq	r4,zero,31e4 <__addsf3+0x4a4>
    3080:	283f4626 	beq	r5,zero,2d9c <_gp+0xffff49cc>
    3084:	2149883a 	add	r4,r4,r5
    3088:	2081002c 	andhi	r2,r4,1024
    308c:	103f8226 	beq	r2,zero,2e98 <_gp+0xffff4ac8>
    3090:	00bf0034 	movhi	r2,64512
    3094:	10bfffc4 	addi	r2,r2,-1
    3098:	3021883a 	mov	r16,r6
    309c:	2088703a 	and	r4,r4,r2
    30a0:	003f3e06 	br	2d9c <_gp+0xffff49cc>
    30a4:	8000121e 	bne	r16,zero,30f0 <__addsf3+0x3b0>
    30a8:	2000261e 	bne	r4,zero,3144 <__addsf3+0x404>
    30ac:	283fa226 	beq	r5,zero,2f38 <_gp+0xffff4b68>
    30b0:	2809883a 	mov	r4,r5
    30b4:	3823883a 	mov	r17,r7
    30b8:	003f3806 	br	2d9c <_gp+0xffff49cc>
    30bc:	01400044 	movi	r5,1
    30c0:	003f9006 	br	2f04 <_gp+0xffff4b34>
    30c4:	2809883a 	mov	r4,r5
    30c8:	3021883a 	mov	r16,r6
    30cc:	3823883a 	mov	r17,r7
    30d0:	003f3206 	br	2d9c <_gp+0xffff49cc>
    30d4:	80000c1e 	bne	r16,zero,3108 <__addsf3+0x3c8>
    30d8:	20002f26 	beq	r4,zero,3198 <__addsf3+0x458>
    30dc:	00c6303a 	nor	r3,zero,r3
    30e0:	18002b1e 	bne	r3,zero,3190 <__addsf3+0x450>
    30e4:	2149883a 	add	r4,r4,r5
    30e8:	3021883a 	mov	r16,r6
    30ec:	003f8606 	br	2f08 <_gp+0xffff4b38>
    30f0:	20001b1e 	bne	r4,zero,3160 <__addsf3+0x420>
    30f4:	28003926 	beq	r5,zero,31dc <__addsf3+0x49c>
    30f8:	2809883a 	mov	r4,r5
    30fc:	3823883a 	mov	r17,r7
    3100:	04003fc4 	movi	r16,255
    3104:	003f2506 	br	2d9c <_gp+0xffff49cc>
    3108:	01c03fc4 	movi	r7,255
    310c:	31c02226 	beq	r6,r7,3198 <__addsf3+0x458>
    3110:	00c7c83a 	sub	r3,zero,r3
    3114:	21010034 	orhi	r4,r4,1024
    3118:	01c006c4 	movi	r7,27
    311c:	38c03616 	blt	r7,r3,31f8 <__addsf3+0x4b8>
    3120:	01c00804 	movi	r7,32
    3124:	38cfc83a 	sub	r7,r7,r3
    3128:	21ce983a 	sll	r7,r4,r7
    312c:	20c6d83a 	srl	r3,r4,r3
    3130:	3808c03a 	cmpne	r4,r7,zero
    3134:	1906b03a 	or	r3,r3,r4
    3138:	1949883a 	add	r4,r3,r5
    313c:	3021883a 	mov	r16,r6
    3140:	003f7106 	br	2f08 <_gp+0xffff4b38>
    3144:	283f1526 	beq	r5,zero,2d9c <_gp+0xffff49cc>
    3148:	2145c83a 	sub	r2,r4,r5
    314c:	10c1002c 	andhi	r3,r2,1024
    3150:	183f4f26 	beq	r3,zero,2e90 <_gp+0xffff4ac0>
    3154:	2909c83a 	sub	r4,r5,r4
    3158:	3823883a 	mov	r17,r7
    315c:	003f0f06 	br	2d9c <_gp+0xffff49cc>
    3160:	28001a26 	beq	r5,zero,31cc <__addsf3+0x48c>
    3164:	2008d0fa 	srli	r4,r4,3
    3168:	2080102c 	andhi	r2,r4,64
    316c:	10000526 	beq	r2,zero,3184 <__addsf3+0x444>
    3170:	280ad0fa 	srli	r5,r5,3
    3174:	2880102c 	andhi	r2,r5,64
    3178:	1000021e 	bne	r2,zero,3184 <__addsf3+0x444>
    317c:	2809883a 	mov	r4,r5
    3180:	3823883a 	mov	r17,r7
    3184:	200890fa 	slli	r4,r4,3
    3188:	04003fc4 	movi	r16,255
    318c:	003f0306 	br	2d9c <_gp+0xffff49cc>
    3190:	01c03fc4 	movi	r7,255
    3194:	31ffe01e 	bne	r6,r7,3118 <_gp+0xffff4d48>
    3198:	2809883a 	mov	r4,r5
    319c:	3021883a 	mov	r16,r6
    31a0:	003efe06 	br	2d9c <_gp+0xffff49cc>
    31a4:	20001126 	beq	r4,zero,31ec <__addsf3+0x4ac>
    31a8:	28000826 	beq	r5,zero,31cc <__addsf3+0x48c>
    31ac:	2008d0fa 	srli	r4,r4,3
    31b0:	2080102c 	andhi	r2,r4,64
    31b4:	103ff326 	beq	r2,zero,3184 <_gp+0xffff4db4>
    31b8:	280ad0fa 	srli	r5,r5,3
    31bc:	2880102c 	andhi	r2,r5,64
    31c0:	103ff01e 	bne	r2,zero,3184 <_gp+0xffff4db4>
    31c4:	2809883a 	mov	r4,r5
    31c8:	003fee06 	br	3184 <_gp+0xffff4db4>
    31cc:	04003fc4 	movi	r16,255
    31d0:	003ef206 	br	2d9c <_gp+0xffff49cc>
    31d4:	01000044 	movi	r4,1
    31d8:	003f9706 	br	3038 <_gp+0xffff4c68>
    31dc:	0005883a 	mov	r2,zero
    31e0:	003f3406 	br	2eb4 <_gp+0xffff4ae4>
    31e4:	2809883a 	mov	r4,r5
    31e8:	003eec06 	br	2d9c <_gp+0xffff49cc>
    31ec:	2809883a 	mov	r4,r5
    31f0:	04003fc4 	movi	r16,255
    31f4:	003ee906 	br	2d9c <_gp+0xffff49cc>
    31f8:	00c00044 	movi	r3,1
    31fc:	003fce06 	br	3138 <_gp+0xffff4d68>
    3200:	0005883a 	mov	r2,zero
    3204:	003f4e06 	br	2f40 <_gp+0xffff4b70>

00003208 <__mulsf3>:
    3208:	defff504 	addi	sp,sp,-44
    320c:	dc000115 	stw	r16,4(sp)
    3210:	2020d5fa 	srli	r16,r4,23
    3214:	dd400615 	stw	r21,24(sp)
    3218:	202ad7fa 	srli	r21,r4,31
    321c:	dc800315 	stw	r18,12(sp)
    3220:	04802034 	movhi	r18,128
    3224:	df000915 	stw	fp,36(sp)
    3228:	dd000515 	stw	r20,20(sp)
    322c:	94bfffc4 	addi	r18,r18,-1
    3230:	dfc00a15 	stw	ra,40(sp)
    3234:	ddc00815 	stw	r23,32(sp)
    3238:	dd800715 	stw	r22,28(sp)
    323c:	dcc00415 	stw	r19,16(sp)
    3240:	dc400215 	stw	r17,8(sp)
    3244:	84003fcc 	andi	r16,r16,255
    3248:	9124703a 	and	r18,r18,r4
    324c:	a829883a 	mov	r20,r21
    3250:	af003fcc 	andi	fp,r21,255
    3254:	80005426 	beq	r16,zero,33a8 <__mulsf3+0x1a0>
    3258:	00803fc4 	movi	r2,255
    325c:	80802f26 	beq	r16,r2,331c <__mulsf3+0x114>
    3260:	91002034 	orhi	r4,r18,128
    3264:	202490fa 	slli	r18,r4,3
    3268:	843fe044 	addi	r16,r16,-127
    326c:	0023883a 	mov	r17,zero
    3270:	002f883a 	mov	r23,zero
    3274:	2804d5fa 	srli	r2,r5,23
    3278:	282cd7fa 	srli	r22,r5,31
    327c:	01002034 	movhi	r4,128
    3280:	213fffc4 	addi	r4,r4,-1
    3284:	10803fcc 	andi	r2,r2,255
    3288:	2166703a 	and	r19,r4,r5
    328c:	b1803fcc 	andi	r6,r22,255
    3290:	10004c26 	beq	r2,zero,33c4 <__mulsf3+0x1bc>
    3294:	00c03fc4 	movi	r3,255
    3298:	10c04726 	beq	r2,r3,33b8 <__mulsf3+0x1b0>
    329c:	99002034 	orhi	r4,r19,128
    32a0:	202690fa 	slli	r19,r4,3
    32a4:	10bfe044 	addi	r2,r2,-127
    32a8:	0007883a 	mov	r3,zero
    32ac:	80a1883a 	add	r16,r16,r2
    32b0:	010003c4 	movi	r4,15
    32b4:	1c44b03a 	or	r2,r3,r17
    32b8:	b56af03a 	xor	r21,r22,r21
    32bc:	81c00044 	addi	r7,r16,1
    32c0:	20806b36 	bltu	r4,r2,3470 <__mulsf3+0x268>
    32c4:	100490ba 	slli	r2,r2,2
    32c8:	01000034 	movhi	r4,0
    32cc:	210cb704 	addi	r4,r4,13020
    32d0:	1105883a 	add	r2,r2,r4
    32d4:	10800017 	ldw	r2,0(r2)
    32d8:	1000683a 	jmp	r2
    32dc:	00003470 	cmpltui	zero,zero,209
    32e0:	00003330 	cmpltui	zero,zero,204
    32e4:	00003330 	cmpltui	zero,zero,204
    32e8:	0000332c 	andhi	zero,zero,204
    32ec:	00003454 	movui	zero,209
    32f0:	00003454 	movui	zero,209
    32f4:	00003440 	call	344 <main+0x114>
    32f8:	0000332c 	andhi	zero,zero,204
    32fc:	00003454 	movui	zero,209
    3300:	00003440 	call	344 <main+0x114>
    3304:	00003454 	movui	zero,209
    3308:	0000332c 	andhi	zero,zero,204
    330c:	00003460 	cmpeqi	zero,zero,209
    3310:	00003460 	cmpeqi	zero,zero,209
    3314:	00003460 	cmpeqi	zero,zero,209
    3318:	00003570 	cmpltui	zero,zero,213
    331c:	90003b1e 	bne	r18,zero,340c <__mulsf3+0x204>
    3320:	04400204 	movi	r17,8
    3324:	05c00084 	movi	r23,2
    3328:	003fd206 	br	3274 <_gp+0xffff4ea4>
    332c:	302b883a 	mov	r21,r6
    3330:	00800084 	movi	r2,2
    3334:	18802626 	beq	r3,r2,33d0 <__mulsf3+0x1c8>
    3338:	008000c4 	movi	r2,3
    333c:	1880b826 	beq	r3,r2,3620 <__mulsf3+0x418>
    3340:	00800044 	movi	r2,1
    3344:	1880af1e 	bne	r3,r2,3604 <__mulsf3+0x3fc>
    3348:	a829883a 	mov	r20,r21
    334c:	0007883a 	mov	r3,zero
    3350:	0009883a 	mov	r4,zero
    3354:	18803fcc 	andi	r2,r3,255
    3358:	100695fa 	slli	r3,r2,23
    335c:	a0803fcc 	andi	r2,r20,255
    3360:	100a97fa 	slli	r5,r2,31
    3364:	00802034 	movhi	r2,128
    3368:	10bfffc4 	addi	r2,r2,-1
    336c:	2084703a 	and	r2,r4,r2
    3370:	10c4b03a 	or	r2,r2,r3
    3374:	1144b03a 	or	r2,r2,r5
    3378:	dfc00a17 	ldw	ra,40(sp)
    337c:	df000917 	ldw	fp,36(sp)
    3380:	ddc00817 	ldw	r23,32(sp)
    3384:	dd800717 	ldw	r22,28(sp)
    3388:	dd400617 	ldw	r21,24(sp)
    338c:	dd000517 	ldw	r20,20(sp)
    3390:	dcc00417 	ldw	r19,16(sp)
    3394:	dc800317 	ldw	r18,12(sp)
    3398:	dc400217 	ldw	r17,8(sp)
    339c:	dc000117 	ldw	r16,4(sp)
    33a0:	dec00b04 	addi	sp,sp,44
    33a4:	f800283a 	ret
    33a8:	90000d1e 	bne	r18,zero,33e0 <__mulsf3+0x1d8>
    33ac:	04400104 	movi	r17,4
    33b0:	05c00044 	movi	r23,1
    33b4:	003faf06 	br	3274 <_gp+0xffff4ea4>
    33b8:	9806c03a 	cmpne	r3,r19,zero
    33bc:	18c00084 	addi	r3,r3,2
    33c0:	003fba06 	br	32ac <_gp+0xffff4edc>
    33c4:	9800141e 	bne	r19,zero,3418 <__mulsf3+0x210>
    33c8:	00c00044 	movi	r3,1
    33cc:	003fb706 	br	32ac <_gp+0xffff4edc>
    33d0:	a829883a 	mov	r20,r21
    33d4:	00ffffc4 	movi	r3,-1
    33d8:	0009883a 	mov	r4,zero
    33dc:	003fdd06 	br	3354 <_gp+0xffff4f84>
    33e0:	9009883a 	mov	r4,r18
    33e4:	d9400015 	stw	r5,0(sp)
    33e8:	0005f680 	call	5f68 <__clzsi2>
    33ec:	10fffec4 	addi	r3,r2,-5
    33f0:	10801d84 	addi	r2,r2,118
    33f4:	90e4983a 	sll	r18,r18,r3
    33f8:	00a1c83a 	sub	r16,zero,r2
    33fc:	0023883a 	mov	r17,zero
    3400:	002f883a 	mov	r23,zero
    3404:	d9400017 	ldw	r5,0(sp)
    3408:	003f9a06 	br	3274 <_gp+0xffff4ea4>
    340c:	04400304 	movi	r17,12
    3410:	05c000c4 	movi	r23,3
    3414:	003f9706 	br	3274 <_gp+0xffff4ea4>
    3418:	9809883a 	mov	r4,r19
    341c:	d9800015 	stw	r6,0(sp)
    3420:	0005f680 	call	5f68 <__clzsi2>
    3424:	10fffec4 	addi	r3,r2,-5
    3428:	10801d84 	addi	r2,r2,118
    342c:	98e6983a 	sll	r19,r19,r3
    3430:	0085c83a 	sub	r2,zero,r2
    3434:	0007883a 	mov	r3,zero
    3438:	d9800017 	ldw	r6,0(sp)
    343c:	003f9b06 	br	32ac <_gp+0xffff4edc>
    3440:	01002034 	movhi	r4,128
    3444:	0029883a 	mov	r20,zero
    3448:	213fffc4 	addi	r4,r4,-1
    344c:	00ffffc4 	movi	r3,-1
    3450:	003fc006 	br	3354 <_gp+0xffff4f84>
    3454:	9027883a 	mov	r19,r18
    3458:	b807883a 	mov	r3,r23
    345c:	003fb406 	br	3330 <_gp+0xffff4f60>
    3460:	9027883a 	mov	r19,r18
    3464:	e02b883a 	mov	r21,fp
    3468:	b807883a 	mov	r3,r23
    346c:	003fb006 	br	3330 <_gp+0xffff4f60>
    3470:	9028d43a 	srli	r20,r18,16
    3474:	982cd43a 	srli	r22,r19,16
    3478:	94bfffcc 	andi	r18,r18,65535
    347c:	9cffffcc 	andi	r19,r19,65535
    3480:	980b883a 	mov	r5,r19
    3484:	9009883a 	mov	r4,r18
    3488:	d9c00015 	stw	r7,0(sp)
    348c:	0002d180 	call	2d18 <__mulsi3>
    3490:	a00b883a 	mov	r5,r20
    3494:	9809883a 	mov	r4,r19
    3498:	1023883a 	mov	r17,r2
    349c:	0002d180 	call	2d18 <__mulsi3>
    34a0:	a009883a 	mov	r4,r20
    34a4:	b00b883a 	mov	r5,r22
    34a8:	1027883a 	mov	r19,r2
    34ac:	0002d180 	call	2d18 <__mulsi3>
    34b0:	b00b883a 	mov	r5,r22
    34b4:	9009883a 	mov	r4,r18
    34b8:	1029883a 	mov	r20,r2
    34bc:	0002d180 	call	2d18 <__mulsi3>
    34c0:	8806d43a 	srli	r3,r17,16
    34c4:	14c5883a 	add	r2,r2,r19
    34c8:	d9c00017 	ldw	r7,0(sp)
    34cc:	1885883a 	add	r2,r3,r2
    34d0:	14c0022e 	bgeu	r2,r19,34dc <__mulsf3+0x2d4>
    34d4:	00c00074 	movhi	r3,1
    34d8:	a0e9883a 	add	r20,r20,r3
    34dc:	1026943a 	slli	r19,r2,16
    34e0:	8c7fffcc 	andi	r17,r17,65535
    34e4:	1004d43a 	srli	r2,r2,16
    34e8:	9c63883a 	add	r17,r19,r17
    34ec:	882691ba 	slli	r19,r17,6
    34f0:	1505883a 	add	r2,r2,r20
    34f4:	8822d6ba 	srli	r17,r17,26
    34f8:	100891ba 	slli	r4,r2,6
    34fc:	9826c03a 	cmpne	r19,r19,zero
    3500:	9c62b03a 	or	r17,r19,r17
    3504:	8926b03a 	or	r19,r17,r4
    3508:	9882002c 	andhi	r2,r19,2048
    350c:	10000426 	beq	r2,zero,3520 <__mulsf3+0x318>
    3510:	9804d07a 	srli	r2,r19,1
    3514:	9900004c 	andi	r4,r19,1
    3518:	3821883a 	mov	r16,r7
    351c:	1126b03a 	or	r19,r2,r4
    3520:	80c01fc4 	addi	r3,r16,127
    3524:	00c0210e 	bge	zero,r3,35ac <__mulsf3+0x3a4>
    3528:	988001cc 	andi	r2,r19,7
    352c:	10000426 	beq	r2,zero,3540 <__mulsf3+0x338>
    3530:	988003cc 	andi	r2,r19,15
    3534:	01000104 	movi	r4,4
    3538:	11000126 	beq	r2,r4,3540 <__mulsf3+0x338>
    353c:	9927883a 	add	r19,r19,r4
    3540:	9882002c 	andhi	r2,r19,2048
    3544:	10000426 	beq	r2,zero,3558 <__mulsf3+0x350>
    3548:	00be0034 	movhi	r2,63488
    354c:	10bfffc4 	addi	r2,r2,-1
    3550:	80c02004 	addi	r3,r16,128
    3554:	98a6703a 	and	r19,r19,r2
    3558:	00803f84 	movi	r2,254
    355c:	10ff9c16 	blt	r2,r3,33d0 <_gp+0xffff5000>
    3560:	980891ba 	slli	r4,r19,6
    3564:	a829883a 	mov	r20,r21
    3568:	2008d27a 	srli	r4,r4,9
    356c:	003f7906 	br	3354 <_gp+0xffff4f84>
    3570:	9080102c 	andhi	r2,r18,64
    3574:	10000826 	beq	r2,zero,3598 <__mulsf3+0x390>
    3578:	9880102c 	andhi	r2,r19,64
    357c:	1000061e 	bne	r2,zero,3598 <__mulsf3+0x390>
    3580:	00802034 	movhi	r2,128
    3584:	99001034 	orhi	r4,r19,64
    3588:	10bfffc4 	addi	r2,r2,-1
    358c:	b029883a 	mov	r20,r22
    3590:	2088703a 	and	r4,r4,r2
    3594:	003fad06 	br	344c <_gp+0xffff507c>
    3598:	00802034 	movhi	r2,128
    359c:	91001034 	orhi	r4,r18,64
    35a0:	10bfffc4 	addi	r2,r2,-1
    35a4:	2088703a 	and	r4,r4,r2
    35a8:	003fa806 	br	344c <_gp+0xffff507c>
    35ac:	00800044 	movi	r2,1
    35b0:	10c7c83a 	sub	r3,r2,r3
    35b4:	008006c4 	movi	r2,27
    35b8:	10ff6316 	blt	r2,r3,3348 <_gp+0xffff4f78>
    35bc:	00800804 	movi	r2,32
    35c0:	10c5c83a 	sub	r2,r2,r3
    35c4:	9884983a 	sll	r2,r19,r2
    35c8:	98c6d83a 	srl	r3,r19,r3
    35cc:	1004c03a 	cmpne	r2,r2,zero
    35d0:	1884b03a 	or	r2,r3,r2
    35d4:	10c001cc 	andi	r3,r2,7
    35d8:	18000426 	beq	r3,zero,35ec <__mulsf3+0x3e4>
    35dc:	10c003cc 	andi	r3,r2,15
    35e0:	01000104 	movi	r4,4
    35e4:	19000126 	beq	r3,r4,35ec <__mulsf3+0x3e4>
    35e8:	1105883a 	add	r2,r2,r4
    35ec:	10c1002c 	andhi	r3,r2,1024
    35f0:	18000626 	beq	r3,zero,360c <__mulsf3+0x404>
    35f4:	a829883a 	mov	r20,r21
    35f8:	00c00044 	movi	r3,1
    35fc:	0009883a 	mov	r4,zero
    3600:	003f5406 	br	3354 <_gp+0xffff4f84>
    3604:	3821883a 	mov	r16,r7
    3608:	003fc506 	br	3520 <_gp+0xffff5150>
    360c:	100491ba 	slli	r2,r2,6
    3610:	a829883a 	mov	r20,r21
    3614:	0007883a 	mov	r3,zero
    3618:	1008d27a 	srli	r4,r2,9
    361c:	003f4d06 	br	3354 <_gp+0xffff4f84>
    3620:	00802034 	movhi	r2,128
    3624:	99001034 	orhi	r4,r19,64
    3628:	10bfffc4 	addi	r2,r2,-1
    362c:	a829883a 	mov	r20,r21
    3630:	2088703a 	and	r4,r4,r2
    3634:	003f8506 	br	344c <_gp+0xffff507c>

00003638 <__floatunsisf>:
    3638:	defffe04 	addi	sp,sp,-8
    363c:	dfc00115 	stw	ra,4(sp)
    3640:	dc000015 	stw	r16,0(sp)
    3644:	20002c26 	beq	r4,zero,36f8 <__floatunsisf+0xc0>
    3648:	2021883a 	mov	r16,r4
    364c:	0005f680 	call	5f68 <__clzsi2>
    3650:	00c02784 	movi	r3,158
    3654:	1887c83a 	sub	r3,r3,r2
    3658:	01002584 	movi	r4,150
    365c:	20c00f16 	blt	r4,r3,369c <__floatunsisf+0x64>
    3660:	20c9c83a 	sub	r4,r4,r3
    3664:	8108983a 	sll	r4,r16,r4
    3668:	00802034 	movhi	r2,128
    366c:	10bfffc4 	addi	r2,r2,-1
    3670:	2088703a 	and	r4,r4,r2
    3674:	18803fcc 	andi	r2,r3,255
    3678:	100695fa 	slli	r3,r2,23
    367c:	00802034 	movhi	r2,128
    3680:	10bfffc4 	addi	r2,r2,-1
    3684:	2084703a 	and	r2,r4,r2
    3688:	10c4b03a 	or	r2,r2,r3
    368c:	dfc00117 	ldw	ra,4(sp)
    3690:	dc000017 	ldw	r16,0(sp)
    3694:	dec00204 	addi	sp,sp,8
    3698:	f800283a 	ret
    369c:	01002644 	movi	r4,153
    36a0:	20c01816 	blt	r4,r3,3704 <__floatunsisf+0xcc>
    36a4:	20c9c83a 	sub	r4,r4,r3
    36a8:	8108983a 	sll	r4,r16,r4
    36ac:	017f0034 	movhi	r5,64512
    36b0:	297fffc4 	addi	r5,r5,-1
    36b4:	218001cc 	andi	r6,r4,7
    36b8:	214a703a 	and	r5,r4,r5
    36bc:	30000426 	beq	r6,zero,36d0 <__floatunsisf+0x98>
    36c0:	210003cc 	andi	r4,r4,15
    36c4:	01800104 	movi	r6,4
    36c8:	21800126 	beq	r4,r6,36d0 <__floatunsisf+0x98>
    36cc:	298b883a 	add	r5,r5,r6
    36d0:	2901002c 	andhi	r4,r5,1024
    36d4:	20000526 	beq	r4,zero,36ec <__floatunsisf+0xb4>
    36d8:	00c027c4 	movi	r3,159
    36dc:	1887c83a 	sub	r3,r3,r2
    36e0:	00bf0034 	movhi	r2,64512
    36e4:	10bfffc4 	addi	r2,r2,-1
    36e8:	288a703a 	and	r5,r5,r2
    36ec:	280891ba 	slli	r4,r5,6
    36f0:	2008d27a 	srli	r4,r4,9
    36f4:	003fdf06 	br	3674 <_gp+0xffff52a4>
    36f8:	0007883a 	mov	r3,zero
    36fc:	0009883a 	mov	r4,zero
    3700:	003fdc06 	br	3674 <_gp+0xffff52a4>
    3704:	01402e44 	movi	r5,185
    3708:	28cbc83a 	sub	r5,r5,r3
    370c:	01000144 	movi	r4,5
    3710:	2089c83a 	sub	r4,r4,r2
    3714:	814a983a 	sll	r5,r16,r5
    3718:	8108d83a 	srl	r4,r16,r4
    371c:	2820c03a 	cmpne	r16,r5,zero
    3720:	2408b03a 	or	r4,r4,r16
    3724:	003fe106 	br	36ac <_gp+0xffff52dc>

00003728 <__adddf3>:
    3728:	02c00434 	movhi	r11,16
    372c:	5affffc4 	addi	r11,r11,-1
    3730:	2806d7fa 	srli	r3,r5,31
    3734:	2ad4703a 	and	r10,r5,r11
    3738:	3ad2703a 	and	r9,r7,r11
    373c:	3804d53a 	srli	r2,r7,20
    3740:	3018d77a 	srli	r12,r6,29
    3744:	280ad53a 	srli	r5,r5,20
    3748:	501490fa 	slli	r10,r10,3
    374c:	2010d77a 	srli	r8,r4,29
    3750:	481290fa 	slli	r9,r9,3
    3754:	380ed7fa 	srli	r7,r7,31
    3758:	defffb04 	addi	sp,sp,-20
    375c:	dc800215 	stw	r18,8(sp)
    3760:	dc400115 	stw	r17,4(sp)
    3764:	dc000015 	stw	r16,0(sp)
    3768:	dfc00415 	stw	ra,16(sp)
    376c:	dcc00315 	stw	r19,12(sp)
    3770:	1c803fcc 	andi	r18,r3,255
    3774:	2c01ffcc 	andi	r16,r5,2047
    3778:	5210b03a 	or	r8,r10,r8
    377c:	202290fa 	slli	r17,r4,3
    3780:	1081ffcc 	andi	r2,r2,2047
    3784:	4b12b03a 	or	r9,r9,r12
    3788:	300c90fa 	slli	r6,r6,3
    378c:	91c07526 	beq	r18,r7,3964 <__adddf3+0x23c>
    3790:	8087c83a 	sub	r3,r16,r2
    3794:	00c0ab0e 	bge	zero,r3,3a44 <__adddf3+0x31c>
    3798:	10002a1e 	bne	r2,zero,3844 <__adddf3+0x11c>
    379c:	4984b03a 	or	r2,r9,r6
    37a0:	1000961e 	bne	r2,zero,39fc <__adddf3+0x2d4>
    37a4:	888001cc 	andi	r2,r17,7
    37a8:	10000726 	beq	r2,zero,37c8 <__adddf3+0xa0>
    37ac:	888003cc 	andi	r2,r17,15
    37b0:	00c00104 	movi	r3,4
    37b4:	10c00426 	beq	r2,r3,37c8 <__adddf3+0xa0>
    37b8:	88c7883a 	add	r3,r17,r3
    37bc:	1c63803a 	cmpltu	r17,r3,r17
    37c0:	4451883a 	add	r8,r8,r17
    37c4:	1823883a 	mov	r17,r3
    37c8:	4080202c 	andhi	r2,r8,128
    37cc:	10005926 	beq	r2,zero,3934 <__adddf3+0x20c>
    37d0:	84000044 	addi	r16,r16,1
    37d4:	0081ffc4 	movi	r2,2047
    37d8:	8080ba26 	beq	r16,r2,3ac4 <__adddf3+0x39c>
    37dc:	00bfe034 	movhi	r2,65408
    37e0:	10bfffc4 	addi	r2,r2,-1
    37e4:	4090703a 	and	r8,r8,r2
    37e8:	4004977a 	slli	r2,r8,29
    37ec:	4010927a 	slli	r8,r8,9
    37f0:	8822d0fa 	srli	r17,r17,3
    37f4:	8401ffcc 	andi	r16,r16,2047
    37f8:	4010d33a 	srli	r8,r8,12
    37fc:	9007883a 	mov	r3,r18
    3800:	1444b03a 	or	r2,r2,r17
    3804:	8401ffcc 	andi	r16,r16,2047
    3808:	8020953a 	slli	r16,r16,20
    380c:	18c03fcc 	andi	r3,r3,255
    3810:	01000434 	movhi	r4,16
    3814:	213fffc4 	addi	r4,r4,-1
    3818:	180697fa 	slli	r3,r3,31
    381c:	4110703a 	and	r8,r8,r4
    3820:	4410b03a 	or	r8,r8,r16
    3824:	40c6b03a 	or	r3,r8,r3
    3828:	dfc00417 	ldw	ra,16(sp)
    382c:	dcc00317 	ldw	r19,12(sp)
    3830:	dc800217 	ldw	r18,8(sp)
    3834:	dc400117 	ldw	r17,4(sp)
    3838:	dc000017 	ldw	r16,0(sp)
    383c:	dec00504 	addi	sp,sp,20
    3840:	f800283a 	ret
    3844:	0081ffc4 	movi	r2,2047
    3848:	80bfd626 	beq	r16,r2,37a4 <_gp+0xffff53d4>
    384c:	4a402034 	orhi	r9,r9,128
    3850:	00800e04 	movi	r2,56
    3854:	10c09f16 	blt	r2,r3,3ad4 <__adddf3+0x3ac>
    3858:	008007c4 	movi	r2,31
    385c:	10c0c216 	blt	r2,r3,3b68 <__adddf3+0x440>
    3860:	00800804 	movi	r2,32
    3864:	10c5c83a 	sub	r2,r2,r3
    3868:	488a983a 	sll	r5,r9,r2
    386c:	30c8d83a 	srl	r4,r6,r3
    3870:	3084983a 	sll	r2,r6,r2
    3874:	48c6d83a 	srl	r3,r9,r3
    3878:	290cb03a 	or	r6,r5,r4
    387c:	1004c03a 	cmpne	r2,r2,zero
    3880:	308cb03a 	or	r6,r6,r2
    3884:	898dc83a 	sub	r6,r17,r6
    3888:	89a3803a 	cmpltu	r17,r17,r6
    388c:	40d1c83a 	sub	r8,r8,r3
    3890:	4451c83a 	sub	r8,r8,r17
    3894:	3023883a 	mov	r17,r6
    3898:	4080202c 	andhi	r2,r8,128
    389c:	10002326 	beq	r2,zero,392c <__adddf3+0x204>
    38a0:	04c02034 	movhi	r19,128
    38a4:	9cffffc4 	addi	r19,r19,-1
    38a8:	44e6703a 	and	r19,r8,r19
    38ac:	98007626 	beq	r19,zero,3a88 <__adddf3+0x360>
    38b0:	9809883a 	mov	r4,r19
    38b4:	0005f680 	call	5f68 <__clzsi2>
    38b8:	10fffe04 	addi	r3,r2,-8
    38bc:	010007c4 	movi	r4,31
    38c0:	20c07716 	blt	r4,r3,3aa0 <__adddf3+0x378>
    38c4:	00800804 	movi	r2,32
    38c8:	10c5c83a 	sub	r2,r2,r3
    38cc:	8884d83a 	srl	r2,r17,r2
    38d0:	98d0983a 	sll	r8,r19,r3
    38d4:	88e2983a 	sll	r17,r17,r3
    38d8:	1204b03a 	or	r2,r2,r8
    38dc:	1c007416 	blt	r3,r16,3ab0 <__adddf3+0x388>
    38e0:	1c21c83a 	sub	r16,r3,r16
    38e4:	82000044 	addi	r8,r16,1
    38e8:	00c007c4 	movi	r3,31
    38ec:	1a009116 	blt	r3,r8,3b34 <__adddf3+0x40c>
    38f0:	00c00804 	movi	r3,32
    38f4:	1a07c83a 	sub	r3,r3,r8
    38f8:	8a08d83a 	srl	r4,r17,r8
    38fc:	88e2983a 	sll	r17,r17,r3
    3900:	10c6983a 	sll	r3,r2,r3
    3904:	1210d83a 	srl	r8,r2,r8
    3908:	8804c03a 	cmpne	r2,r17,zero
    390c:	1906b03a 	or	r3,r3,r4
    3910:	18a2b03a 	or	r17,r3,r2
    3914:	0021883a 	mov	r16,zero
    3918:	003fa206 	br	37a4 <_gp+0xffff53d4>
    391c:	1890b03a 	or	r8,r3,r2
    3920:	40017d26 	beq	r8,zero,3f18 <__adddf3+0x7f0>
    3924:	1011883a 	mov	r8,r2
    3928:	1823883a 	mov	r17,r3
    392c:	888001cc 	andi	r2,r17,7
    3930:	103f9e1e 	bne	r2,zero,37ac <_gp+0xffff53dc>
    3934:	4004977a 	slli	r2,r8,29
    3938:	8822d0fa 	srli	r17,r17,3
    393c:	4010d0fa 	srli	r8,r8,3
    3940:	9007883a 	mov	r3,r18
    3944:	1444b03a 	or	r2,r2,r17
    3948:	0101ffc4 	movi	r4,2047
    394c:	81002426 	beq	r16,r4,39e0 <__adddf3+0x2b8>
    3950:	8120703a 	and	r16,r16,r4
    3954:	01000434 	movhi	r4,16
    3958:	213fffc4 	addi	r4,r4,-1
    395c:	4110703a 	and	r8,r8,r4
    3960:	003fa806 	br	3804 <_gp+0xffff5434>
    3964:	8089c83a 	sub	r4,r16,r2
    3968:	01005e0e 	bge	zero,r4,3ae4 <__adddf3+0x3bc>
    396c:	10002b26 	beq	r2,zero,3a1c <__adddf3+0x2f4>
    3970:	0081ffc4 	movi	r2,2047
    3974:	80bf8b26 	beq	r16,r2,37a4 <_gp+0xffff53d4>
    3978:	4a402034 	orhi	r9,r9,128
    397c:	00800e04 	movi	r2,56
    3980:	1100a40e 	bge	r2,r4,3c14 <__adddf3+0x4ec>
    3984:	498cb03a 	or	r6,r9,r6
    3988:	300ac03a 	cmpne	r5,r6,zero
    398c:	0013883a 	mov	r9,zero
    3990:	2c4b883a 	add	r5,r5,r17
    3994:	2c63803a 	cmpltu	r17,r5,r17
    3998:	4a11883a 	add	r8,r9,r8
    399c:	8a11883a 	add	r8,r17,r8
    39a0:	2823883a 	mov	r17,r5
    39a4:	4080202c 	andhi	r2,r8,128
    39a8:	103fe026 	beq	r2,zero,392c <_gp+0xffff555c>
    39ac:	84000044 	addi	r16,r16,1
    39b0:	0081ffc4 	movi	r2,2047
    39b4:	8080d226 	beq	r16,r2,3d00 <__adddf3+0x5d8>
    39b8:	00bfe034 	movhi	r2,65408
    39bc:	10bfffc4 	addi	r2,r2,-1
    39c0:	4090703a 	and	r8,r8,r2
    39c4:	880ad07a 	srli	r5,r17,1
    39c8:	400897fa 	slli	r4,r8,31
    39cc:	88c0004c 	andi	r3,r17,1
    39d0:	28e2b03a 	or	r17,r5,r3
    39d4:	4010d07a 	srli	r8,r8,1
    39d8:	2462b03a 	or	r17,r4,r17
    39dc:	003f7106 	br	37a4 <_gp+0xffff53d4>
    39e0:	4088b03a 	or	r4,r8,r2
    39e4:	20014526 	beq	r4,zero,3efc <__adddf3+0x7d4>
    39e8:	01000434 	movhi	r4,16
    39ec:	42000234 	orhi	r8,r8,8
    39f0:	213fffc4 	addi	r4,r4,-1
    39f4:	4110703a 	and	r8,r8,r4
    39f8:	003f8206 	br	3804 <_gp+0xffff5434>
    39fc:	18ffffc4 	addi	r3,r3,-1
    3a00:	1800491e 	bne	r3,zero,3b28 <__adddf3+0x400>
    3a04:	898bc83a 	sub	r5,r17,r6
    3a08:	8963803a 	cmpltu	r17,r17,r5
    3a0c:	4251c83a 	sub	r8,r8,r9
    3a10:	4451c83a 	sub	r8,r8,r17
    3a14:	2823883a 	mov	r17,r5
    3a18:	003f9f06 	br	3898 <_gp+0xffff54c8>
    3a1c:	4984b03a 	or	r2,r9,r6
    3a20:	103f6026 	beq	r2,zero,37a4 <_gp+0xffff53d4>
    3a24:	213fffc4 	addi	r4,r4,-1
    3a28:	2000931e 	bne	r4,zero,3c78 <__adddf3+0x550>
    3a2c:	898d883a 	add	r6,r17,r6
    3a30:	3463803a 	cmpltu	r17,r6,r17
    3a34:	4251883a 	add	r8,r8,r9
    3a38:	8a11883a 	add	r8,r17,r8
    3a3c:	3023883a 	mov	r17,r6
    3a40:	003fd806 	br	39a4 <_gp+0xffff55d4>
    3a44:	1800541e 	bne	r3,zero,3b98 <__adddf3+0x470>
    3a48:	80800044 	addi	r2,r16,1
    3a4c:	1081ffcc 	andi	r2,r2,2047
    3a50:	00c00044 	movi	r3,1
    3a54:	1880a00e 	bge	r3,r2,3cd8 <__adddf3+0x5b0>
    3a58:	8989c83a 	sub	r4,r17,r6
    3a5c:	8905803a 	cmpltu	r2,r17,r4
    3a60:	4267c83a 	sub	r19,r8,r9
    3a64:	98a7c83a 	sub	r19,r19,r2
    3a68:	9880202c 	andhi	r2,r19,128
    3a6c:	10006326 	beq	r2,zero,3bfc <__adddf3+0x4d4>
    3a70:	3463c83a 	sub	r17,r6,r17
    3a74:	4a07c83a 	sub	r3,r9,r8
    3a78:	344d803a 	cmpltu	r6,r6,r17
    3a7c:	19a7c83a 	sub	r19,r3,r6
    3a80:	3825883a 	mov	r18,r7
    3a84:	983f8a1e 	bne	r19,zero,38b0 <_gp+0xffff54e0>
    3a88:	8809883a 	mov	r4,r17
    3a8c:	0005f680 	call	5f68 <__clzsi2>
    3a90:	10800804 	addi	r2,r2,32
    3a94:	10fffe04 	addi	r3,r2,-8
    3a98:	010007c4 	movi	r4,31
    3a9c:	20ff890e 	bge	r4,r3,38c4 <_gp+0xffff54f4>
    3aa0:	10bff604 	addi	r2,r2,-40
    3aa4:	8884983a 	sll	r2,r17,r2
    3aa8:	0023883a 	mov	r17,zero
    3aac:	1c3f8c0e 	bge	r3,r16,38e0 <_gp+0xffff5510>
    3ab0:	023fe034 	movhi	r8,65408
    3ab4:	423fffc4 	addi	r8,r8,-1
    3ab8:	80e1c83a 	sub	r16,r16,r3
    3abc:	1210703a 	and	r8,r2,r8
    3ac0:	003f3806 	br	37a4 <_gp+0xffff53d4>
    3ac4:	9007883a 	mov	r3,r18
    3ac8:	0011883a 	mov	r8,zero
    3acc:	0005883a 	mov	r2,zero
    3ad0:	003f4c06 	br	3804 <_gp+0xffff5434>
    3ad4:	498cb03a 	or	r6,r9,r6
    3ad8:	300cc03a 	cmpne	r6,r6,zero
    3adc:	0007883a 	mov	r3,zero
    3ae0:	003f6806 	br	3884 <_gp+0xffff54b4>
    3ae4:	20009c1e 	bne	r4,zero,3d58 <__adddf3+0x630>
    3ae8:	80800044 	addi	r2,r16,1
    3aec:	1141ffcc 	andi	r5,r2,2047
    3af0:	01000044 	movi	r4,1
    3af4:	2140670e 	bge	r4,r5,3c94 <__adddf3+0x56c>
    3af8:	0101ffc4 	movi	r4,2047
    3afc:	11007f26 	beq	r2,r4,3cfc <__adddf3+0x5d4>
    3b00:	898d883a 	add	r6,r17,r6
    3b04:	4247883a 	add	r3,r8,r9
    3b08:	3451803a 	cmpltu	r8,r6,r17
    3b0c:	40d1883a 	add	r8,r8,r3
    3b10:	402297fa 	slli	r17,r8,31
    3b14:	300cd07a 	srli	r6,r6,1
    3b18:	4010d07a 	srli	r8,r8,1
    3b1c:	1021883a 	mov	r16,r2
    3b20:	89a2b03a 	or	r17,r17,r6
    3b24:	003f1f06 	br	37a4 <_gp+0xffff53d4>
    3b28:	0081ffc4 	movi	r2,2047
    3b2c:	80bf481e 	bne	r16,r2,3850 <_gp+0xffff5480>
    3b30:	003f1c06 	br	37a4 <_gp+0xffff53d4>
    3b34:	843ff844 	addi	r16,r16,-31
    3b38:	01000804 	movi	r4,32
    3b3c:	1406d83a 	srl	r3,r2,r16
    3b40:	41005026 	beq	r8,r4,3c84 <__adddf3+0x55c>
    3b44:	01001004 	movi	r4,64
    3b48:	2211c83a 	sub	r8,r4,r8
    3b4c:	1204983a 	sll	r2,r2,r8
    3b50:	88a2b03a 	or	r17,r17,r2
    3b54:	8822c03a 	cmpne	r17,r17,zero
    3b58:	1c62b03a 	or	r17,r3,r17
    3b5c:	0011883a 	mov	r8,zero
    3b60:	0021883a 	mov	r16,zero
    3b64:	003f7106 	br	392c <_gp+0xffff555c>
    3b68:	193ff804 	addi	r4,r3,-32
    3b6c:	00800804 	movi	r2,32
    3b70:	4908d83a 	srl	r4,r9,r4
    3b74:	18804526 	beq	r3,r2,3c8c <__adddf3+0x564>
    3b78:	00801004 	movi	r2,64
    3b7c:	10c5c83a 	sub	r2,r2,r3
    3b80:	4886983a 	sll	r3,r9,r2
    3b84:	198cb03a 	or	r6,r3,r6
    3b88:	300cc03a 	cmpne	r6,r6,zero
    3b8c:	218cb03a 	or	r6,r4,r6
    3b90:	0007883a 	mov	r3,zero
    3b94:	003f3b06 	br	3884 <_gp+0xffff54b4>
    3b98:	80002a26 	beq	r16,zero,3c44 <__adddf3+0x51c>
    3b9c:	0101ffc4 	movi	r4,2047
    3ba0:	11006826 	beq	r2,r4,3d44 <__adddf3+0x61c>
    3ba4:	00c7c83a 	sub	r3,zero,r3
    3ba8:	42002034 	orhi	r8,r8,128
    3bac:	01000e04 	movi	r4,56
    3bb0:	20c07c16 	blt	r4,r3,3da4 <__adddf3+0x67c>
    3bb4:	010007c4 	movi	r4,31
    3bb8:	20c0da16 	blt	r4,r3,3f24 <__adddf3+0x7fc>
    3bbc:	01000804 	movi	r4,32
    3bc0:	20c9c83a 	sub	r4,r4,r3
    3bc4:	4114983a 	sll	r10,r8,r4
    3bc8:	88cad83a 	srl	r5,r17,r3
    3bcc:	8908983a 	sll	r4,r17,r4
    3bd0:	40c6d83a 	srl	r3,r8,r3
    3bd4:	5162b03a 	or	r17,r10,r5
    3bd8:	2008c03a 	cmpne	r4,r4,zero
    3bdc:	8922b03a 	or	r17,r17,r4
    3be0:	3463c83a 	sub	r17,r6,r17
    3be4:	48c7c83a 	sub	r3,r9,r3
    3be8:	344d803a 	cmpltu	r6,r6,r17
    3bec:	1991c83a 	sub	r8,r3,r6
    3bf0:	1021883a 	mov	r16,r2
    3bf4:	3825883a 	mov	r18,r7
    3bf8:	003f2706 	br	3898 <_gp+0xffff54c8>
    3bfc:	24d0b03a 	or	r8,r4,r19
    3c00:	40001b1e 	bne	r8,zero,3c70 <__adddf3+0x548>
    3c04:	0005883a 	mov	r2,zero
    3c08:	0007883a 	mov	r3,zero
    3c0c:	0021883a 	mov	r16,zero
    3c10:	003f4d06 	br	3948 <_gp+0xffff5578>
    3c14:	008007c4 	movi	r2,31
    3c18:	11003c16 	blt	r2,r4,3d0c <__adddf3+0x5e4>
    3c1c:	00800804 	movi	r2,32
    3c20:	1105c83a 	sub	r2,r2,r4
    3c24:	488e983a 	sll	r7,r9,r2
    3c28:	310ad83a 	srl	r5,r6,r4
    3c2c:	3084983a 	sll	r2,r6,r2
    3c30:	4912d83a 	srl	r9,r9,r4
    3c34:	394ab03a 	or	r5,r7,r5
    3c38:	1004c03a 	cmpne	r2,r2,zero
    3c3c:	288ab03a 	or	r5,r5,r2
    3c40:	003f5306 	br	3990 <_gp+0xffff55c0>
    3c44:	4448b03a 	or	r4,r8,r17
    3c48:	20003e26 	beq	r4,zero,3d44 <__adddf3+0x61c>
    3c4c:	00c6303a 	nor	r3,zero,r3
    3c50:	18003a1e 	bne	r3,zero,3d3c <__adddf3+0x614>
    3c54:	3463c83a 	sub	r17,r6,r17
    3c58:	4a07c83a 	sub	r3,r9,r8
    3c5c:	344d803a 	cmpltu	r6,r6,r17
    3c60:	1991c83a 	sub	r8,r3,r6
    3c64:	1021883a 	mov	r16,r2
    3c68:	3825883a 	mov	r18,r7
    3c6c:	003f0a06 	br	3898 <_gp+0xffff54c8>
    3c70:	2023883a 	mov	r17,r4
    3c74:	003f0d06 	br	38ac <_gp+0xffff54dc>
    3c78:	0081ffc4 	movi	r2,2047
    3c7c:	80bf3f1e 	bne	r16,r2,397c <_gp+0xffff55ac>
    3c80:	003ec806 	br	37a4 <_gp+0xffff53d4>
    3c84:	0005883a 	mov	r2,zero
    3c88:	003fb106 	br	3b50 <_gp+0xffff5780>
    3c8c:	0007883a 	mov	r3,zero
    3c90:	003fbc06 	br	3b84 <_gp+0xffff57b4>
    3c94:	4444b03a 	or	r2,r8,r17
    3c98:	8000871e 	bne	r16,zero,3eb8 <__adddf3+0x790>
    3c9c:	1000ba26 	beq	r2,zero,3f88 <__adddf3+0x860>
    3ca0:	4984b03a 	or	r2,r9,r6
    3ca4:	103ebf26 	beq	r2,zero,37a4 <_gp+0xffff53d4>
    3ca8:	8985883a 	add	r2,r17,r6
    3cac:	4247883a 	add	r3,r8,r9
    3cb0:	1451803a 	cmpltu	r8,r2,r17
    3cb4:	40d1883a 	add	r8,r8,r3
    3cb8:	40c0202c 	andhi	r3,r8,128
    3cbc:	1023883a 	mov	r17,r2
    3cc0:	183f1a26 	beq	r3,zero,392c <_gp+0xffff555c>
    3cc4:	00bfe034 	movhi	r2,65408
    3cc8:	10bfffc4 	addi	r2,r2,-1
    3ccc:	2021883a 	mov	r16,r4
    3cd0:	4090703a 	and	r8,r8,r2
    3cd4:	003eb306 	br	37a4 <_gp+0xffff53d4>
    3cd8:	4444b03a 	or	r2,r8,r17
    3cdc:	8000291e 	bne	r16,zero,3d84 <__adddf3+0x65c>
    3ce0:	10004b1e 	bne	r2,zero,3e10 <__adddf3+0x6e8>
    3ce4:	4990b03a 	or	r8,r9,r6
    3ce8:	40008b26 	beq	r8,zero,3f18 <__adddf3+0x7f0>
    3cec:	4811883a 	mov	r8,r9
    3cf0:	3023883a 	mov	r17,r6
    3cf4:	3825883a 	mov	r18,r7
    3cf8:	003eaa06 	br	37a4 <_gp+0xffff53d4>
    3cfc:	1021883a 	mov	r16,r2
    3d00:	0011883a 	mov	r8,zero
    3d04:	0005883a 	mov	r2,zero
    3d08:	003f0f06 	br	3948 <_gp+0xffff5578>
    3d0c:	217ff804 	addi	r5,r4,-32
    3d10:	00800804 	movi	r2,32
    3d14:	494ad83a 	srl	r5,r9,r5
    3d18:	20807d26 	beq	r4,r2,3f10 <__adddf3+0x7e8>
    3d1c:	00801004 	movi	r2,64
    3d20:	1109c83a 	sub	r4,r2,r4
    3d24:	4912983a 	sll	r9,r9,r4
    3d28:	498cb03a 	or	r6,r9,r6
    3d2c:	300cc03a 	cmpne	r6,r6,zero
    3d30:	298ab03a 	or	r5,r5,r6
    3d34:	0013883a 	mov	r9,zero
    3d38:	003f1506 	br	3990 <_gp+0xffff55c0>
    3d3c:	0101ffc4 	movi	r4,2047
    3d40:	113f9a1e 	bne	r2,r4,3bac <_gp+0xffff57dc>
    3d44:	4811883a 	mov	r8,r9
    3d48:	3023883a 	mov	r17,r6
    3d4c:	1021883a 	mov	r16,r2
    3d50:	3825883a 	mov	r18,r7
    3d54:	003e9306 	br	37a4 <_gp+0xffff53d4>
    3d58:	8000161e 	bne	r16,zero,3db4 <__adddf3+0x68c>
    3d5c:	444ab03a 	or	r5,r8,r17
    3d60:	28005126 	beq	r5,zero,3ea8 <__adddf3+0x780>
    3d64:	0108303a 	nor	r4,zero,r4
    3d68:	20004d1e 	bne	r4,zero,3ea0 <__adddf3+0x778>
    3d6c:	89a3883a 	add	r17,r17,r6
    3d70:	4253883a 	add	r9,r8,r9
    3d74:	898d803a 	cmpltu	r6,r17,r6
    3d78:	3251883a 	add	r8,r6,r9
    3d7c:	1021883a 	mov	r16,r2
    3d80:	003f0806 	br	39a4 <_gp+0xffff55d4>
    3d84:	1000301e 	bne	r2,zero,3e48 <__adddf3+0x720>
    3d88:	4984b03a 	or	r2,r9,r6
    3d8c:	10007126 	beq	r2,zero,3f54 <__adddf3+0x82c>
    3d90:	4811883a 	mov	r8,r9
    3d94:	3023883a 	mov	r17,r6
    3d98:	3825883a 	mov	r18,r7
    3d9c:	0401ffc4 	movi	r16,2047
    3da0:	003e8006 	br	37a4 <_gp+0xffff53d4>
    3da4:	4462b03a 	or	r17,r8,r17
    3da8:	8822c03a 	cmpne	r17,r17,zero
    3dac:	0007883a 	mov	r3,zero
    3db0:	003f8b06 	br	3be0 <_gp+0xffff5810>
    3db4:	0141ffc4 	movi	r5,2047
    3db8:	11403b26 	beq	r2,r5,3ea8 <__adddf3+0x780>
    3dbc:	0109c83a 	sub	r4,zero,r4
    3dc0:	42002034 	orhi	r8,r8,128
    3dc4:	01400e04 	movi	r5,56
    3dc8:	29006716 	blt	r5,r4,3f68 <__adddf3+0x840>
    3dcc:	014007c4 	movi	r5,31
    3dd0:	29007016 	blt	r5,r4,3f94 <__adddf3+0x86c>
    3dd4:	01400804 	movi	r5,32
    3dd8:	290bc83a 	sub	r5,r5,r4
    3ddc:	4154983a 	sll	r10,r8,r5
    3de0:	890ed83a 	srl	r7,r17,r4
    3de4:	894a983a 	sll	r5,r17,r5
    3de8:	4108d83a 	srl	r4,r8,r4
    3dec:	51e2b03a 	or	r17,r10,r7
    3df0:	280ac03a 	cmpne	r5,r5,zero
    3df4:	8962b03a 	or	r17,r17,r5
    3df8:	89a3883a 	add	r17,r17,r6
    3dfc:	2253883a 	add	r9,r4,r9
    3e00:	898d803a 	cmpltu	r6,r17,r6
    3e04:	3251883a 	add	r8,r6,r9
    3e08:	1021883a 	mov	r16,r2
    3e0c:	003ee506 	br	39a4 <_gp+0xffff55d4>
    3e10:	4984b03a 	or	r2,r9,r6
    3e14:	103e6326 	beq	r2,zero,37a4 <_gp+0xffff53d4>
    3e18:	8987c83a 	sub	r3,r17,r6
    3e1c:	88c9803a 	cmpltu	r4,r17,r3
    3e20:	4245c83a 	sub	r2,r8,r9
    3e24:	1105c83a 	sub	r2,r2,r4
    3e28:	1100202c 	andhi	r4,r2,128
    3e2c:	203ebb26 	beq	r4,zero,391c <_gp+0xffff554c>
    3e30:	3463c83a 	sub	r17,r6,r17
    3e34:	4a07c83a 	sub	r3,r9,r8
    3e38:	344d803a 	cmpltu	r6,r6,r17
    3e3c:	1991c83a 	sub	r8,r3,r6
    3e40:	3825883a 	mov	r18,r7
    3e44:	003e5706 	br	37a4 <_gp+0xffff53d4>
    3e48:	4984b03a 	or	r2,r9,r6
    3e4c:	10002e26 	beq	r2,zero,3f08 <__adddf3+0x7e0>
    3e50:	4004d0fa 	srli	r2,r8,3
    3e54:	8822d0fa 	srli	r17,r17,3
    3e58:	4010977a 	slli	r8,r8,29
    3e5c:	10c0022c 	andhi	r3,r2,8
    3e60:	4462b03a 	or	r17,r8,r17
    3e64:	18000826 	beq	r3,zero,3e88 <__adddf3+0x760>
    3e68:	4808d0fa 	srli	r4,r9,3
    3e6c:	20c0022c 	andhi	r3,r4,8
    3e70:	1800051e 	bne	r3,zero,3e88 <__adddf3+0x760>
    3e74:	300cd0fa 	srli	r6,r6,3
    3e78:	4806977a 	slli	r3,r9,29
    3e7c:	2005883a 	mov	r2,r4
    3e80:	3825883a 	mov	r18,r7
    3e84:	19a2b03a 	or	r17,r3,r6
    3e88:	8810d77a 	srli	r8,r17,29
    3e8c:	100490fa 	slli	r2,r2,3
    3e90:	882290fa 	slli	r17,r17,3
    3e94:	0401ffc4 	movi	r16,2047
    3e98:	4090b03a 	or	r8,r8,r2
    3e9c:	003e4106 	br	37a4 <_gp+0xffff53d4>
    3ea0:	0141ffc4 	movi	r5,2047
    3ea4:	117fc71e 	bne	r2,r5,3dc4 <_gp+0xffff59f4>
    3ea8:	4811883a 	mov	r8,r9
    3eac:	3023883a 	mov	r17,r6
    3eb0:	1021883a 	mov	r16,r2
    3eb4:	003e3b06 	br	37a4 <_gp+0xffff53d4>
    3eb8:	10002f26 	beq	r2,zero,3f78 <__adddf3+0x850>
    3ebc:	4984b03a 	or	r2,r9,r6
    3ec0:	10001126 	beq	r2,zero,3f08 <__adddf3+0x7e0>
    3ec4:	4004d0fa 	srli	r2,r8,3
    3ec8:	8822d0fa 	srli	r17,r17,3
    3ecc:	4010977a 	slli	r8,r8,29
    3ed0:	10c0022c 	andhi	r3,r2,8
    3ed4:	4462b03a 	or	r17,r8,r17
    3ed8:	183feb26 	beq	r3,zero,3e88 <_gp+0xffff5ab8>
    3edc:	4808d0fa 	srli	r4,r9,3
    3ee0:	20c0022c 	andhi	r3,r4,8
    3ee4:	183fe81e 	bne	r3,zero,3e88 <_gp+0xffff5ab8>
    3ee8:	300cd0fa 	srli	r6,r6,3
    3eec:	4806977a 	slli	r3,r9,29
    3ef0:	2005883a 	mov	r2,r4
    3ef4:	19a2b03a 	or	r17,r3,r6
    3ef8:	003fe306 	br	3e88 <_gp+0xffff5ab8>
    3efc:	0011883a 	mov	r8,zero
    3f00:	0005883a 	mov	r2,zero
    3f04:	003e3f06 	br	3804 <_gp+0xffff5434>
    3f08:	0401ffc4 	movi	r16,2047
    3f0c:	003e2506 	br	37a4 <_gp+0xffff53d4>
    3f10:	0013883a 	mov	r9,zero
    3f14:	003f8406 	br	3d28 <_gp+0xffff5958>
    3f18:	0005883a 	mov	r2,zero
    3f1c:	0007883a 	mov	r3,zero
    3f20:	003e8906 	br	3948 <_gp+0xffff5578>
    3f24:	197ff804 	addi	r5,r3,-32
    3f28:	01000804 	movi	r4,32
    3f2c:	414ad83a 	srl	r5,r8,r5
    3f30:	19002426 	beq	r3,r4,3fc4 <__adddf3+0x89c>
    3f34:	01001004 	movi	r4,64
    3f38:	20c7c83a 	sub	r3,r4,r3
    3f3c:	40c6983a 	sll	r3,r8,r3
    3f40:	1c46b03a 	or	r3,r3,r17
    3f44:	1806c03a 	cmpne	r3,r3,zero
    3f48:	28e2b03a 	or	r17,r5,r3
    3f4c:	0007883a 	mov	r3,zero
    3f50:	003f2306 	br	3be0 <_gp+0xffff5810>
    3f54:	0007883a 	mov	r3,zero
    3f58:	5811883a 	mov	r8,r11
    3f5c:	00bfffc4 	movi	r2,-1
    3f60:	0401ffc4 	movi	r16,2047
    3f64:	003e7806 	br	3948 <_gp+0xffff5578>
    3f68:	4462b03a 	or	r17,r8,r17
    3f6c:	8822c03a 	cmpne	r17,r17,zero
    3f70:	0009883a 	mov	r4,zero
    3f74:	003fa006 	br	3df8 <_gp+0xffff5a28>
    3f78:	4811883a 	mov	r8,r9
    3f7c:	3023883a 	mov	r17,r6
    3f80:	0401ffc4 	movi	r16,2047
    3f84:	003e0706 	br	37a4 <_gp+0xffff53d4>
    3f88:	4811883a 	mov	r8,r9
    3f8c:	3023883a 	mov	r17,r6
    3f90:	003e0406 	br	37a4 <_gp+0xffff53d4>
    3f94:	21fff804 	addi	r7,r4,-32
    3f98:	01400804 	movi	r5,32
    3f9c:	41ced83a 	srl	r7,r8,r7
    3fa0:	21400a26 	beq	r4,r5,3fcc <__adddf3+0x8a4>
    3fa4:	01401004 	movi	r5,64
    3fa8:	2909c83a 	sub	r4,r5,r4
    3fac:	4108983a 	sll	r4,r8,r4
    3fb0:	2448b03a 	or	r4,r4,r17
    3fb4:	2008c03a 	cmpne	r4,r4,zero
    3fb8:	3922b03a 	or	r17,r7,r4
    3fbc:	0009883a 	mov	r4,zero
    3fc0:	003f8d06 	br	3df8 <_gp+0xffff5a28>
    3fc4:	0007883a 	mov	r3,zero
    3fc8:	003fdd06 	br	3f40 <_gp+0xffff5b70>
    3fcc:	0009883a 	mov	r4,zero
    3fd0:	003ff706 	br	3fb0 <_gp+0xffff5be0>

00003fd4 <__divdf3>:
    3fd4:	defff004 	addi	sp,sp,-64
    3fd8:	dc800815 	stw	r18,32(sp)
    3fdc:	2824d53a 	srli	r18,r5,20
    3fe0:	dd800c15 	stw	r22,48(sp)
    3fe4:	282cd7fa 	srli	r22,r5,31
    3fe8:	dc000615 	stw	r16,24(sp)
    3fec:	04000434 	movhi	r16,16
    3ff0:	843fffc4 	addi	r16,r16,-1
    3ff4:	dfc00f15 	stw	ra,60(sp)
    3ff8:	df000e15 	stw	fp,56(sp)
    3ffc:	ddc00d15 	stw	r23,52(sp)
    4000:	dd400b15 	stw	r21,44(sp)
    4004:	dd000a15 	stw	r20,40(sp)
    4008:	dcc00915 	stw	r19,36(sp)
    400c:	dc400715 	stw	r17,28(sp)
    4010:	9481ffcc 	andi	r18,r18,2047
    4014:	2c20703a 	and	r16,r5,r16
    4018:	b2003fcc 	andi	r8,r22,255
    401c:	90006126 	beq	r18,zero,41a4 <__divdf3+0x1d0>
    4020:	0081ffc4 	movi	r2,2047
    4024:	202b883a 	mov	r21,r4
    4028:	90803726 	beq	r18,r2,4108 <__divdf3+0x134>
    402c:	80800434 	orhi	r2,r16,16
    4030:	100490fa 	slli	r2,r2,3
    4034:	2020d77a 	srli	r16,r4,29
    4038:	202a90fa 	slli	r21,r4,3
    403c:	94bf0044 	addi	r18,r18,-1023
    4040:	80a0b03a 	or	r16,r16,r2
    4044:	0013883a 	mov	r9,zero
    4048:	000b883a 	mov	r5,zero
    404c:	3806d53a 	srli	r3,r7,20
    4050:	382ed7fa 	srli	r23,r7,31
    4054:	04400434 	movhi	r17,16
    4058:	8c7fffc4 	addi	r17,r17,-1
    405c:	18c1ffcc 	andi	r3,r3,2047
    4060:	3029883a 	mov	r20,r6
    4064:	3c62703a 	and	r17,r7,r17
    4068:	bf003fcc 	andi	fp,r23,255
    406c:	18006e26 	beq	r3,zero,4228 <__divdf3+0x254>
    4070:	0081ffc4 	movi	r2,2047
    4074:	18806626 	beq	r3,r2,4210 <__divdf3+0x23c>
    4078:	88800434 	orhi	r2,r17,16
    407c:	100490fa 	slli	r2,r2,3
    4080:	3022d77a 	srli	r17,r6,29
    4084:	302890fa 	slli	r20,r6,3
    4088:	18ff0044 	addi	r3,r3,-1023
    408c:	88a2b03a 	or	r17,r17,r2
    4090:	000f883a 	mov	r7,zero
    4094:	b5e6f03a 	xor	r19,r22,r23
    4098:	3a4cb03a 	or	r6,r7,r9
    409c:	008003c4 	movi	r2,15
    40a0:	9809883a 	mov	r4,r19
    40a4:	90c7c83a 	sub	r3,r18,r3
    40a8:	9cc03fcc 	andi	r19,r19,255
    40ac:	11809636 	bltu	r2,r6,4308 <__divdf3+0x334>
    40b0:	300c90ba 	slli	r6,r6,2
    40b4:	00800034 	movhi	r2,0
    40b8:	10903204 	addi	r2,r2,16584
    40bc:	308d883a 	add	r6,r6,r2
    40c0:	30800017 	ldw	r2,0(r6)
    40c4:	1000683a 	jmp	r2
    40c8:	00004308 	cmpgei	zero,zero,268
    40cc:	00004140 	call	414 <_out_rev+0x6c>
    40d0:	000042f8 	rdprs	zero,zero,267
    40d4:	00004134 	movhi	zero,260
    40d8:	000042f8 	rdprs	zero,zero,267
    40dc:	000042cc 	andi	zero,zero,267
    40e0:	000042f8 	rdprs	zero,zero,267
    40e4:	00004134 	movhi	zero,260
    40e8:	00004140 	call	414 <_out_rev+0x6c>
    40ec:	00004140 	call	414 <_out_rev+0x6c>
    40f0:	000042cc 	andi	zero,zero,267
    40f4:	00004134 	movhi	zero,260
    40f8:	00004124 	muli	zero,zero,260
    40fc:	00004124 	muli	zero,zero,260
    4100:	00004124 	muli	zero,zero,260
    4104:	00004690 	cmplti	zero,zero,282
    4108:	2404b03a 	or	r2,r4,r16
    410c:	10006c1e 	bne	r2,zero,42c0 <__divdf3+0x2ec>
    4110:	02400204 	movi	r9,8
    4114:	0021883a 	mov	r16,zero
    4118:	002b883a 	mov	r21,zero
    411c:	01400084 	movi	r5,2
    4120:	003fca06 	br	404c <_gp+0xffff5c7c>
    4124:	8023883a 	mov	r17,r16
    4128:	a829883a 	mov	r20,r21
    412c:	4039883a 	mov	fp,r8
    4130:	280f883a 	mov	r7,r5
    4134:	00800084 	movi	r2,2
    4138:	3881601e 	bne	r7,r2,46bc <__divdf3+0x6e8>
    413c:	e027883a 	mov	r19,fp
    4140:	9900004c 	andi	r4,r19,1
    4144:	0081ffc4 	movi	r2,2047
    4148:	0021883a 	mov	r16,zero
    414c:	002b883a 	mov	r21,zero
    4150:	1004953a 	slli	r2,r2,20
    4154:	20c03fcc 	andi	r3,r4,255
    4158:	01400434 	movhi	r5,16
    415c:	297fffc4 	addi	r5,r5,-1
    4160:	180697fa 	slli	r3,r3,31
    4164:	8160703a 	and	r16,r16,r5
    4168:	80a0b03a 	or	r16,r16,r2
    416c:	80c6b03a 	or	r3,r16,r3
    4170:	a805883a 	mov	r2,r21
    4174:	dfc00f17 	ldw	ra,60(sp)
    4178:	df000e17 	ldw	fp,56(sp)
    417c:	ddc00d17 	ldw	r23,52(sp)
    4180:	dd800c17 	ldw	r22,48(sp)
    4184:	dd400b17 	ldw	r21,44(sp)
    4188:	dd000a17 	ldw	r20,40(sp)
    418c:	dcc00917 	ldw	r19,36(sp)
    4190:	dc800817 	ldw	r18,32(sp)
    4194:	dc400717 	ldw	r17,28(sp)
    4198:	dc000617 	ldw	r16,24(sp)
    419c:	dec01004 	addi	sp,sp,64
    41a0:	f800283a 	ret
    41a4:	2404b03a 	or	r2,r4,r16
    41a8:	2023883a 	mov	r17,r4
    41ac:	10003f26 	beq	r2,zero,42ac <__divdf3+0x2d8>
    41b0:	80015e26 	beq	r16,zero,472c <__divdf3+0x758>
    41b4:	8009883a 	mov	r4,r16
    41b8:	d9800215 	stw	r6,8(sp)
    41bc:	d9c00515 	stw	r7,20(sp)
    41c0:	da000415 	stw	r8,16(sp)
    41c4:	0005f680 	call	5f68 <__clzsi2>
    41c8:	d9800217 	ldw	r6,8(sp)
    41cc:	d9c00517 	ldw	r7,20(sp)
    41d0:	da000417 	ldw	r8,16(sp)
    41d4:	113ffd44 	addi	r4,r2,-11
    41d8:	00c00704 	movi	r3,28
    41dc:	19014f16 	blt	r3,r4,471c <__divdf3+0x748>
    41e0:	00c00744 	movi	r3,29
    41e4:	157ffe04 	addi	r21,r2,-8
    41e8:	1907c83a 	sub	r3,r3,r4
    41ec:	8560983a 	sll	r16,r16,r21
    41f0:	88c6d83a 	srl	r3,r17,r3
    41f4:	8d6a983a 	sll	r21,r17,r21
    41f8:	1c20b03a 	or	r16,r3,r16
    41fc:	1080fcc4 	addi	r2,r2,1011
    4200:	00a5c83a 	sub	r18,zero,r2
    4204:	0013883a 	mov	r9,zero
    4208:	000b883a 	mov	r5,zero
    420c:	003f8f06 	br	404c <_gp+0xffff5c7c>
    4210:	3444b03a 	or	r2,r6,r17
    4214:	1000231e 	bne	r2,zero,42a4 <__divdf3+0x2d0>
    4218:	0023883a 	mov	r17,zero
    421c:	0029883a 	mov	r20,zero
    4220:	01c00084 	movi	r7,2
    4224:	003f9b06 	br	4094 <_gp+0xffff5cc4>
    4228:	3444b03a 	or	r2,r6,r17
    422c:	10001926 	beq	r2,zero,4294 <__divdf3+0x2c0>
    4230:	88014b26 	beq	r17,zero,4760 <__divdf3+0x78c>
    4234:	8809883a 	mov	r4,r17
    4238:	d9400115 	stw	r5,4(sp)
    423c:	d9800215 	stw	r6,8(sp)
    4240:	da000415 	stw	r8,16(sp)
    4244:	da400315 	stw	r9,12(sp)
    4248:	0005f680 	call	5f68 <__clzsi2>
    424c:	d9400117 	ldw	r5,4(sp)
    4250:	d9800217 	ldw	r6,8(sp)
    4254:	da000417 	ldw	r8,16(sp)
    4258:	da400317 	ldw	r9,12(sp)
    425c:	113ffd44 	addi	r4,r2,-11
    4260:	00c00704 	movi	r3,28
    4264:	19013a16 	blt	r3,r4,4750 <__divdf3+0x77c>
    4268:	00c00744 	movi	r3,29
    426c:	153ffe04 	addi	r20,r2,-8
    4270:	1907c83a 	sub	r3,r3,r4
    4274:	8d22983a 	sll	r17,r17,r20
    4278:	30c6d83a 	srl	r3,r6,r3
    427c:	3528983a 	sll	r20,r6,r20
    4280:	1c62b03a 	or	r17,r3,r17
    4284:	1080fcc4 	addi	r2,r2,1011
    4288:	0087c83a 	sub	r3,zero,r2
    428c:	000f883a 	mov	r7,zero
    4290:	003f8006 	br	4094 <_gp+0xffff5cc4>
    4294:	0023883a 	mov	r17,zero
    4298:	0029883a 	mov	r20,zero
    429c:	01c00044 	movi	r7,1
    42a0:	003f7c06 	br	4094 <_gp+0xffff5cc4>
    42a4:	01c000c4 	movi	r7,3
    42a8:	003f7a06 	br	4094 <_gp+0xffff5cc4>
    42ac:	02400104 	movi	r9,4
    42b0:	0021883a 	mov	r16,zero
    42b4:	002b883a 	mov	r21,zero
    42b8:	01400044 	movi	r5,1
    42bc:	003f6306 	br	404c <_gp+0xffff5c7c>
    42c0:	02400304 	movi	r9,12
    42c4:	014000c4 	movi	r5,3
    42c8:	003f6006 	br	404c <_gp+0xffff5c7c>
    42cc:	04000434 	movhi	r16,16
    42d0:	0009883a 	mov	r4,zero
    42d4:	843fffc4 	addi	r16,r16,-1
    42d8:	057fffc4 	movi	r21,-1
    42dc:	0081ffc4 	movi	r2,2047
    42e0:	003f9b06 	br	4150 <_gp+0xffff5d80>
    42e4:	00c00044 	movi	r3,1
    42e8:	1887c83a 	sub	r3,r3,r2
    42ec:	01000e04 	movi	r4,56
    42f0:	20c1530e 	bge	r4,r3,4840 <__divdf3+0x86c>
    42f4:	9900004c 	andi	r4,r19,1
    42f8:	0005883a 	mov	r2,zero
    42fc:	0021883a 	mov	r16,zero
    4300:	002b883a 	mov	r21,zero
    4304:	003f9206 	br	4150 <_gp+0xffff5d80>
    4308:	8c012e36 	bltu	r17,r16,47c4 <__divdf3+0x7f0>
    430c:	84412c26 	beq	r16,r17,47c0 <__divdf3+0x7ec>
    4310:	a82f883a 	mov	r23,r21
    4314:	18ffffc4 	addi	r3,r3,-1
    4318:	002b883a 	mov	r21,zero
    431c:	a004d63a 	srli	r2,r20,24
    4320:	8822923a 	slli	r17,r17,8
    4324:	a028923a 	slli	r20,r20,8
    4328:	8009883a 	mov	r4,r16
    432c:	88acb03a 	or	r22,r17,r2
    4330:	dd000015 	stw	r20,0(sp)
    4334:	b028d43a 	srli	r20,r22,16
    4338:	d8c00215 	stw	r3,8(sp)
    433c:	b4bfffcc 	andi	r18,r22,65535
    4340:	a00b883a 	mov	r5,r20
    4344:	0002c5c0 	call	2c5c <__udivsi3>
    4348:	100b883a 	mov	r5,r2
    434c:	9009883a 	mov	r4,r18
    4350:	1023883a 	mov	r17,r2
    4354:	0002d180 	call	2d18 <__mulsi3>
    4358:	8009883a 	mov	r4,r16
    435c:	a00b883a 	mov	r5,r20
    4360:	1039883a 	mov	fp,r2
    4364:	0002cc00 	call	2cc0 <__umodsi3>
    4368:	1004943a 	slli	r2,r2,16
    436c:	b808d43a 	srli	r4,r23,16
    4370:	d8c00217 	ldw	r3,8(sp)
    4374:	2084b03a 	or	r2,r4,r2
    4378:	1700062e 	bgeu	r2,fp,4394 <__divdf3+0x3c0>
    437c:	1585883a 	add	r2,r2,r22
    4380:	893fffc4 	addi	r4,r17,-1
    4384:	15811d36 	bltu	r2,r22,47fc <__divdf3+0x828>
    4388:	17011c2e 	bgeu	r2,fp,47fc <__divdf3+0x828>
    438c:	8c7fff84 	addi	r17,r17,-2
    4390:	1585883a 	add	r2,r2,r22
    4394:	1739c83a 	sub	fp,r2,fp
    4398:	a00b883a 	mov	r5,r20
    439c:	e009883a 	mov	r4,fp
    43a0:	d8c00215 	stw	r3,8(sp)
    43a4:	0002c5c0 	call	2c5c <__udivsi3>
    43a8:	100b883a 	mov	r5,r2
    43ac:	9009883a 	mov	r4,r18
    43b0:	1021883a 	mov	r16,r2
    43b4:	0002d180 	call	2d18 <__mulsi3>
    43b8:	a00b883a 	mov	r5,r20
    43bc:	e009883a 	mov	r4,fp
    43c0:	d8800415 	stw	r2,16(sp)
    43c4:	0002cc00 	call	2cc0 <__umodsi3>
    43c8:	1004943a 	slli	r2,r2,16
    43cc:	da000417 	ldw	r8,16(sp)
    43d0:	bdffffcc 	andi	r23,r23,65535
    43d4:	b884b03a 	or	r2,r23,r2
    43d8:	d8c00217 	ldw	r3,8(sp)
    43dc:	1200062e 	bgeu	r2,r8,43f8 <__divdf3+0x424>
    43e0:	1585883a 	add	r2,r2,r22
    43e4:	813fffc4 	addi	r4,r16,-1
    43e8:	15810236 	bltu	r2,r22,47f4 <__divdf3+0x820>
    43ec:	1201012e 	bgeu	r2,r8,47f4 <__divdf3+0x820>
    43f0:	843fff84 	addi	r16,r16,-2
    43f4:	1585883a 	add	r2,r2,r22
    43f8:	8822943a 	slli	r17,r17,16
    43fc:	d9800017 	ldw	r6,0(sp)
    4400:	1211c83a 	sub	r8,r2,r8
    4404:	8c22b03a 	or	r17,r17,r16
    4408:	373fffcc 	andi	fp,r6,65535
    440c:	8abfffcc 	andi	r10,r17,65535
    4410:	8820d43a 	srli	r16,r17,16
    4414:	5009883a 	mov	r4,r10
    4418:	e00b883a 	mov	r5,fp
    441c:	302ed43a 	srli	r23,r6,16
    4420:	d8c00215 	stw	r3,8(sp)
    4424:	da000415 	stw	r8,16(sp)
    4428:	da800115 	stw	r10,4(sp)
    442c:	0002d180 	call	2d18 <__mulsi3>
    4430:	800b883a 	mov	r5,r16
    4434:	e009883a 	mov	r4,fp
    4438:	d8800515 	stw	r2,20(sp)
    443c:	0002d180 	call	2d18 <__mulsi3>
    4440:	8009883a 	mov	r4,r16
    4444:	b80b883a 	mov	r5,r23
    4448:	d8800315 	stw	r2,12(sp)
    444c:	0002d180 	call	2d18 <__mulsi3>
    4450:	da800117 	ldw	r10,4(sp)
    4454:	b80b883a 	mov	r5,r23
    4458:	1021883a 	mov	r16,r2
    445c:	5009883a 	mov	r4,r10
    4460:	0002d180 	call	2d18 <__mulsi3>
    4464:	d9c00517 	ldw	r7,20(sp)
    4468:	da400317 	ldw	r9,12(sp)
    446c:	d8c00217 	ldw	r3,8(sp)
    4470:	3808d43a 	srli	r4,r7,16
    4474:	1245883a 	add	r2,r2,r9
    4478:	da000417 	ldw	r8,16(sp)
    447c:	2085883a 	add	r2,r4,r2
    4480:	1240022e 	bgeu	r2,r9,448c <__divdf3+0x4b8>
    4484:	01000074 	movhi	r4,1
    4488:	8121883a 	add	r16,r16,r4
    448c:	1008d43a 	srli	r4,r2,16
    4490:	1004943a 	slli	r2,r2,16
    4494:	39ffffcc 	andi	r7,r7,65535
    4498:	2409883a 	add	r4,r4,r16
    449c:	11c5883a 	add	r2,r2,r7
    44a0:	4100bb36 	bltu	r8,r4,4790 <__divdf3+0x7bc>
    44a4:	4100d726 	beq	r8,r4,4804 <__divdf3+0x830>
    44a8:	4109c83a 	sub	r4,r8,r4
    44ac:	a8a1c83a 	sub	r16,r21,r2
    44b0:	ac2b803a 	cmpltu	r21,r21,r16
    44b4:	256bc83a 	sub	r21,r4,r21
    44b8:	b540d926 	beq	r22,r21,4820 <__divdf3+0x84c>
    44bc:	a00b883a 	mov	r5,r20
    44c0:	a809883a 	mov	r4,r21
    44c4:	d8c00215 	stw	r3,8(sp)
    44c8:	0002c5c0 	call	2c5c <__udivsi3>
    44cc:	100b883a 	mov	r5,r2
    44d0:	9009883a 	mov	r4,r18
    44d4:	d8800515 	stw	r2,20(sp)
    44d8:	0002d180 	call	2d18 <__mulsi3>
    44dc:	a809883a 	mov	r4,r21
    44e0:	a00b883a 	mov	r5,r20
    44e4:	d8800415 	stw	r2,16(sp)
    44e8:	0002cc00 	call	2cc0 <__umodsi3>
    44ec:	1004943a 	slli	r2,r2,16
    44f0:	8008d43a 	srli	r4,r16,16
    44f4:	da000417 	ldw	r8,16(sp)
    44f8:	d8c00217 	ldw	r3,8(sp)
    44fc:	2084b03a 	or	r2,r4,r2
    4500:	d9c00517 	ldw	r7,20(sp)
    4504:	1200062e 	bgeu	r2,r8,4520 <__divdf3+0x54c>
    4508:	1585883a 	add	r2,r2,r22
    450c:	393fffc4 	addi	r4,r7,-1
    4510:	1580c536 	bltu	r2,r22,4828 <__divdf3+0x854>
    4514:	1200c42e 	bgeu	r2,r8,4828 <__divdf3+0x854>
    4518:	39ffff84 	addi	r7,r7,-2
    451c:	1585883a 	add	r2,r2,r22
    4520:	122bc83a 	sub	r21,r2,r8
    4524:	a00b883a 	mov	r5,r20
    4528:	a809883a 	mov	r4,r21
    452c:	d8c00215 	stw	r3,8(sp)
    4530:	d9c00515 	stw	r7,20(sp)
    4534:	0002c5c0 	call	2c5c <__udivsi3>
    4538:	9009883a 	mov	r4,r18
    453c:	100b883a 	mov	r5,r2
    4540:	d8800415 	stw	r2,16(sp)
    4544:	0002d180 	call	2d18 <__mulsi3>
    4548:	a809883a 	mov	r4,r21
    454c:	a00b883a 	mov	r5,r20
    4550:	1025883a 	mov	r18,r2
    4554:	0002cc00 	call	2cc0 <__umodsi3>
    4558:	1004943a 	slli	r2,r2,16
    455c:	813fffcc 	andi	r4,r16,65535
    4560:	d8c00217 	ldw	r3,8(sp)
    4564:	20a0b03a 	or	r16,r4,r2
    4568:	d9c00517 	ldw	r7,20(sp)
    456c:	da000417 	ldw	r8,16(sp)
    4570:	8480062e 	bgeu	r16,r18,458c <__divdf3+0x5b8>
    4574:	85a1883a 	add	r16,r16,r22
    4578:	40bfffc4 	addi	r2,r8,-1
    457c:	8580ac36 	bltu	r16,r22,4830 <__divdf3+0x85c>
    4580:	8480ab2e 	bgeu	r16,r18,4830 <__divdf3+0x85c>
    4584:	423fff84 	addi	r8,r8,-2
    4588:	85a1883a 	add	r16,r16,r22
    458c:	3804943a 	slli	r2,r7,16
    4590:	84a1c83a 	sub	r16,r16,r18
    4594:	e009883a 	mov	r4,fp
    4598:	1228b03a 	or	r20,r2,r8
    459c:	a1ffffcc 	andi	r7,r20,65535
    45a0:	a024d43a 	srli	r18,r20,16
    45a4:	380b883a 	mov	r5,r7
    45a8:	d8c00215 	stw	r3,8(sp)
    45ac:	d9c00515 	stw	r7,20(sp)
    45b0:	0002d180 	call	2d18 <__mulsi3>
    45b4:	900b883a 	mov	r5,r18
    45b8:	e009883a 	mov	r4,fp
    45bc:	102b883a 	mov	r21,r2
    45c0:	0002d180 	call	2d18 <__mulsi3>
    45c4:	900b883a 	mov	r5,r18
    45c8:	b809883a 	mov	r4,r23
    45cc:	1039883a 	mov	fp,r2
    45d0:	0002d180 	call	2d18 <__mulsi3>
    45d4:	d9c00517 	ldw	r7,20(sp)
    45d8:	b80b883a 	mov	r5,r23
    45dc:	1025883a 	mov	r18,r2
    45e0:	3809883a 	mov	r4,r7
    45e4:	0002d180 	call	2d18 <__mulsi3>
    45e8:	a808d43a 	srli	r4,r21,16
    45ec:	1705883a 	add	r2,r2,fp
    45f0:	d8c00217 	ldw	r3,8(sp)
    45f4:	2085883a 	add	r2,r4,r2
    45f8:	1700022e 	bgeu	r2,fp,4604 <__divdf3+0x630>
    45fc:	01000074 	movhi	r4,1
    4600:	9125883a 	add	r18,r18,r4
    4604:	1008d43a 	srli	r4,r2,16
    4608:	1004943a 	slli	r2,r2,16
    460c:	ad7fffcc 	andi	r21,r21,65535
    4610:	2489883a 	add	r4,r4,r18
    4614:	1545883a 	add	r2,r2,r21
    4618:	81003836 	bltu	r16,r4,46fc <__divdf3+0x728>
    461c:	81003626 	beq	r16,r4,46f8 <__divdf3+0x724>
    4620:	a5000054 	ori	r20,r20,1
    4624:	1880ffc4 	addi	r2,r3,1023
    4628:	00bf2e0e 	bge	zero,r2,42e4 <_gp+0xffff5f14>
    462c:	a10001cc 	andi	r4,r20,7
    4630:	20000726 	beq	r4,zero,4650 <__divdf3+0x67c>
    4634:	a10003cc 	andi	r4,r20,15
    4638:	01400104 	movi	r5,4
    463c:	21400426 	beq	r4,r5,4650 <__divdf3+0x67c>
    4640:	a149883a 	add	r4,r20,r5
    4644:	2529803a 	cmpltu	r20,r4,r20
    4648:	8d23883a 	add	r17,r17,r20
    464c:	2029883a 	mov	r20,r4
    4650:	8900402c 	andhi	r4,r17,256
    4654:	20000426 	beq	r4,zero,4668 <__divdf3+0x694>
    4658:	18810004 	addi	r2,r3,1024
    465c:	00ffc034 	movhi	r3,65280
    4660:	18ffffc4 	addi	r3,r3,-1
    4664:	88e2703a 	and	r17,r17,r3
    4668:	00c1ff84 	movi	r3,2046
    466c:	18beb416 	blt	r3,r2,4140 <_gp+0xffff5d70>
    4670:	a028d0fa 	srli	r20,r20,3
    4674:	882a977a 	slli	r21,r17,29
    4678:	8820927a 	slli	r16,r17,9
    467c:	1081ffcc 	andi	r2,r2,2047
    4680:	ad2ab03a 	or	r21,r21,r20
    4684:	8020d33a 	srli	r16,r16,12
    4688:	9900004c 	andi	r4,r19,1
    468c:	003eb006 	br	4150 <_gp+0xffff5d80>
    4690:	8080022c 	andhi	r2,r16,8
    4694:	10001226 	beq	r2,zero,46e0 <__divdf3+0x70c>
    4698:	8880022c 	andhi	r2,r17,8
    469c:	1000101e 	bne	r2,zero,46e0 <__divdf3+0x70c>
    46a0:	00800434 	movhi	r2,16
    46a4:	8c000234 	orhi	r16,r17,8
    46a8:	10bfffc4 	addi	r2,r2,-1
    46ac:	b809883a 	mov	r4,r23
    46b0:	80a0703a 	and	r16,r16,r2
    46b4:	a02b883a 	mov	r21,r20
    46b8:	003f0806 	br	42dc <_gp+0xffff5f0c>
    46bc:	008000c4 	movi	r2,3
    46c0:	3880b126 	beq	r7,r2,4988 <__divdf3+0x9b4>
    46c4:	00800044 	movi	r2,1
    46c8:	38805b1e 	bne	r7,r2,4838 <__divdf3+0x864>
    46cc:	e009883a 	mov	r4,fp
    46d0:	0005883a 	mov	r2,zero
    46d4:	0021883a 	mov	r16,zero
    46d8:	002b883a 	mov	r21,zero
    46dc:	003e9c06 	br	4150 <_gp+0xffff5d80>
    46e0:	00800434 	movhi	r2,16
    46e4:	84000234 	orhi	r16,r16,8
    46e8:	10bfffc4 	addi	r2,r2,-1
    46ec:	b009883a 	mov	r4,r22
    46f0:	80a0703a 	and	r16,r16,r2
    46f4:	003ef906 	br	42dc <_gp+0xffff5f0c>
    46f8:	103fca26 	beq	r2,zero,4624 <_gp+0xffff6254>
    46fc:	b421883a 	add	r16,r22,r16
    4700:	a17fffc4 	addi	r5,r20,-1
    4704:	8580422e 	bgeu	r16,r22,4810 <__divdf3+0x83c>
    4708:	2829883a 	mov	r20,r5
    470c:	813fc41e 	bne	r16,r4,4620 <_gp+0xffff6250>
    4710:	d9800017 	ldw	r6,0(sp)
    4714:	30bfc21e 	bne	r6,r2,4620 <_gp+0xffff6250>
    4718:	003fc206 	br	4624 <_gp+0xffff6254>
    471c:	143ff604 	addi	r16,r2,-40
    4720:	8c20983a 	sll	r16,r17,r16
    4724:	002b883a 	mov	r21,zero
    4728:	003eb406 	br	41fc <_gp+0xffff5e2c>
    472c:	d9800215 	stw	r6,8(sp)
    4730:	d9c00515 	stw	r7,20(sp)
    4734:	da000415 	stw	r8,16(sp)
    4738:	0005f680 	call	5f68 <__clzsi2>
    473c:	10800804 	addi	r2,r2,32
    4740:	da000417 	ldw	r8,16(sp)
    4744:	d9c00517 	ldw	r7,20(sp)
    4748:	d9800217 	ldw	r6,8(sp)
    474c:	003ea106 	br	41d4 <_gp+0xffff5e04>
    4750:	147ff604 	addi	r17,r2,-40
    4754:	3462983a 	sll	r17,r6,r17
    4758:	0029883a 	mov	r20,zero
    475c:	003ec906 	br	4284 <_gp+0xffff5eb4>
    4760:	3009883a 	mov	r4,r6
    4764:	d9400115 	stw	r5,4(sp)
    4768:	d9800215 	stw	r6,8(sp)
    476c:	da000415 	stw	r8,16(sp)
    4770:	da400315 	stw	r9,12(sp)
    4774:	0005f680 	call	5f68 <__clzsi2>
    4778:	10800804 	addi	r2,r2,32
    477c:	da400317 	ldw	r9,12(sp)
    4780:	da000417 	ldw	r8,16(sp)
    4784:	d9800217 	ldw	r6,8(sp)
    4788:	d9400117 	ldw	r5,4(sp)
    478c:	003eb306 	br	425c <_gp+0xffff5e8c>
    4790:	d9800017 	ldw	r6,0(sp)
    4794:	a9ab883a 	add	r21,r21,r6
    4798:	a98b803a 	cmpltu	r5,r21,r6
    479c:	2d8b883a 	add	r5,r5,r22
    47a0:	2a11883a 	add	r8,r5,r8
    47a4:	897fffc4 	addi	r5,r17,-1
    47a8:	b2000c2e 	bgeu	r22,r8,47dc <__divdf3+0x808>
    47ac:	41003f36 	bltu	r8,r4,48ac <__divdf3+0x8d8>
    47b0:	22006c26 	beq	r4,r8,4964 <__divdf3+0x990>
    47b4:	4109c83a 	sub	r4,r8,r4
    47b8:	2823883a 	mov	r17,r5
    47bc:	003f3b06 	br	44ac <_gp+0xffff60dc>
    47c0:	ad3ed336 	bltu	r21,r20,4310 <_gp+0xffff5f40>
    47c4:	a804d07a 	srli	r2,r21,1
    47c8:	802e97fa 	slli	r23,r16,31
    47cc:	a82a97fa 	slli	r21,r21,31
    47d0:	8020d07a 	srli	r16,r16,1
    47d4:	b8aeb03a 	or	r23,r23,r2
    47d8:	003ed006 	br	431c <_gp+0xffff5f4c>
    47dc:	b23ff51e 	bne	r22,r8,47b4 <_gp+0xffff63e4>
    47e0:	d9800017 	ldw	r6,0(sp)
    47e4:	a9bff12e 	bgeu	r21,r6,47ac <_gp+0xffff63dc>
    47e8:	b109c83a 	sub	r4,r22,r4
    47ec:	2823883a 	mov	r17,r5
    47f0:	003f2e06 	br	44ac <_gp+0xffff60dc>
    47f4:	2021883a 	mov	r16,r4
    47f8:	003eff06 	br	43f8 <_gp+0xffff6028>
    47fc:	2023883a 	mov	r17,r4
    4800:	003ee406 	br	4394 <_gp+0xffff5fc4>
    4804:	a8bfe236 	bltu	r21,r2,4790 <_gp+0xffff63c0>
    4808:	0009883a 	mov	r4,zero
    480c:	003f2706 	br	44ac <_gp+0xffff60dc>
    4810:	81002d36 	bltu	r16,r4,48c8 <__divdf3+0x8f4>
    4814:	24005626 	beq	r4,r16,4970 <__divdf3+0x99c>
    4818:	2829883a 	mov	r20,r5
    481c:	003f8006 	br	4620 <_gp+0xffff6250>
    4820:	053fffc4 	movi	r20,-1
    4824:	003f7f06 	br	4624 <_gp+0xffff6254>
    4828:	200f883a 	mov	r7,r4
    482c:	003f3c06 	br	4520 <_gp+0xffff6150>
    4830:	1011883a 	mov	r8,r2
    4834:	003f5506 	br	458c <_gp+0xffff61bc>
    4838:	e027883a 	mov	r19,fp
    483c:	003f7906 	br	4624 <_gp+0xffff6254>
    4840:	010007c4 	movi	r4,31
    4844:	20c02816 	blt	r4,r3,48e8 <__divdf3+0x914>
    4848:	00800804 	movi	r2,32
    484c:	10c5c83a 	sub	r2,r2,r3
    4850:	888a983a 	sll	r5,r17,r2
    4854:	a0c8d83a 	srl	r4,r20,r3
    4858:	a084983a 	sll	r2,r20,r2
    485c:	88e2d83a 	srl	r17,r17,r3
    4860:	2906b03a 	or	r3,r5,r4
    4864:	1004c03a 	cmpne	r2,r2,zero
    4868:	1886b03a 	or	r3,r3,r2
    486c:	188001cc 	andi	r2,r3,7
    4870:	10000726 	beq	r2,zero,4890 <__divdf3+0x8bc>
    4874:	188003cc 	andi	r2,r3,15
    4878:	01000104 	movi	r4,4
    487c:	11000426 	beq	r2,r4,4890 <__divdf3+0x8bc>
    4880:	1805883a 	mov	r2,r3
    4884:	10c00104 	addi	r3,r2,4
    4888:	1885803a 	cmpltu	r2,r3,r2
    488c:	88a3883a 	add	r17,r17,r2
    4890:	8880202c 	andhi	r2,r17,128
    4894:	10002926 	beq	r2,zero,493c <__divdf3+0x968>
    4898:	9900004c 	andi	r4,r19,1
    489c:	00800044 	movi	r2,1
    48a0:	0021883a 	mov	r16,zero
    48a4:	002b883a 	mov	r21,zero
    48a8:	003e2906 	br	4150 <_gp+0xffff5d80>
    48ac:	d9800017 	ldw	r6,0(sp)
    48b0:	8c7fff84 	addi	r17,r17,-2
    48b4:	a9ab883a 	add	r21,r21,r6
    48b8:	a98b803a 	cmpltu	r5,r21,r6
    48bc:	2d8b883a 	add	r5,r5,r22
    48c0:	2a11883a 	add	r8,r5,r8
    48c4:	003ef806 	br	44a8 <_gp+0xffff60d8>
    48c8:	d9800017 	ldw	r6,0(sp)
    48cc:	318f883a 	add	r7,r6,r6
    48d0:	398b803a 	cmpltu	r5,r7,r6
    48d4:	2d8d883a 	add	r6,r5,r22
    48d8:	81a1883a 	add	r16,r16,r6
    48dc:	a17fff84 	addi	r5,r20,-2
    48e0:	d9c00015 	stw	r7,0(sp)
    48e4:	003f8806 	br	4708 <_gp+0xffff6338>
    48e8:	013ff844 	movi	r4,-31
    48ec:	2085c83a 	sub	r2,r4,r2
    48f0:	8888d83a 	srl	r4,r17,r2
    48f4:	00800804 	movi	r2,32
    48f8:	18802126 	beq	r3,r2,4980 <__divdf3+0x9ac>
    48fc:	04001004 	movi	r16,64
    4900:	80c7c83a 	sub	r3,r16,r3
    4904:	88e0983a 	sll	r16,r17,r3
    4908:	8504b03a 	or	r2,r16,r20
    490c:	1004c03a 	cmpne	r2,r2,zero
    4910:	2084b03a 	or	r2,r4,r2
    4914:	144001cc 	andi	r17,r2,7
    4918:	88000d1e 	bne	r17,zero,4950 <__divdf3+0x97c>
    491c:	0021883a 	mov	r16,zero
    4920:	102ad0fa 	srli	r21,r2,3
    4924:	9900004c 	andi	r4,r19,1
    4928:	0005883a 	mov	r2,zero
    492c:	ac6ab03a 	or	r21,r21,r17
    4930:	003e0706 	br	4150 <_gp+0xffff5d80>
    4934:	1007883a 	mov	r3,r2
    4938:	0023883a 	mov	r17,zero
    493c:	8820927a 	slli	r16,r17,9
    4940:	1805883a 	mov	r2,r3
    4944:	8822977a 	slli	r17,r17,29
    4948:	8020d33a 	srli	r16,r16,12
    494c:	003ff406 	br	4920 <_gp+0xffff6550>
    4950:	10c003cc 	andi	r3,r2,15
    4954:	01000104 	movi	r4,4
    4958:	193ff626 	beq	r3,r4,4934 <_gp+0xffff6564>
    495c:	0023883a 	mov	r17,zero
    4960:	003fc806 	br	4884 <_gp+0xffff64b4>
    4964:	a8bfd136 	bltu	r21,r2,48ac <_gp+0xffff64dc>
    4968:	2823883a 	mov	r17,r5
    496c:	003fa606 	br	4808 <_gp+0xffff6438>
    4970:	d9800017 	ldw	r6,0(sp)
    4974:	30bfd436 	bltu	r6,r2,48c8 <_gp+0xffff64f8>
    4978:	2829883a 	mov	r20,r5
    497c:	003f6406 	br	4710 <_gp+0xffff6340>
    4980:	0021883a 	mov	r16,zero
    4984:	003fe006 	br	4908 <_gp+0xffff6538>
    4988:	00800434 	movhi	r2,16
    498c:	8c000234 	orhi	r16,r17,8
    4990:	10bfffc4 	addi	r2,r2,-1
    4994:	e009883a 	mov	r4,fp
    4998:	80a0703a 	and	r16,r16,r2
    499c:	a02b883a 	mov	r21,r20
    49a0:	003e4e06 	br	42dc <_gp+0xffff5f0c>

000049a4 <__eqdf2>:
    49a4:	2804d53a 	srli	r2,r5,20
    49a8:	3806d53a 	srli	r3,r7,20
    49ac:	02000434 	movhi	r8,16
    49b0:	423fffc4 	addi	r8,r8,-1
    49b4:	1081ffcc 	andi	r2,r2,2047
    49b8:	0281ffc4 	movi	r10,2047
    49bc:	2a12703a 	and	r9,r5,r8
    49c0:	18c1ffcc 	andi	r3,r3,2047
    49c4:	3a10703a 	and	r8,r7,r8
    49c8:	280ad7fa 	srli	r5,r5,31
    49cc:	380ed7fa 	srli	r7,r7,31
    49d0:	12801026 	beq	r2,r10,4a14 <__eqdf2+0x70>
    49d4:	0281ffc4 	movi	r10,2047
    49d8:	1a800a26 	beq	r3,r10,4a04 <__eqdf2+0x60>
    49dc:	10c00226 	beq	r2,r3,49e8 <__eqdf2+0x44>
    49e0:	00800044 	movi	r2,1
    49e4:	f800283a 	ret
    49e8:	4a3ffd1e 	bne	r9,r8,49e0 <_gp+0xffff6610>
    49ec:	21bffc1e 	bne	r4,r6,49e0 <_gp+0xffff6610>
    49f0:	29c00c26 	beq	r5,r7,4a24 <__eqdf2+0x80>
    49f4:	103ffa1e 	bne	r2,zero,49e0 <_gp+0xffff6610>
    49f8:	2244b03a 	or	r2,r4,r9
    49fc:	1004c03a 	cmpne	r2,r2,zero
    4a00:	f800283a 	ret
    4a04:	3214b03a 	or	r10,r6,r8
    4a08:	503ff426 	beq	r10,zero,49dc <_gp+0xffff660c>
    4a0c:	00800044 	movi	r2,1
    4a10:	f800283a 	ret
    4a14:	2254b03a 	or	r10,r4,r9
    4a18:	503fee26 	beq	r10,zero,49d4 <_gp+0xffff6604>
    4a1c:	00800044 	movi	r2,1
    4a20:	f800283a 	ret
    4a24:	0005883a 	mov	r2,zero
    4a28:	f800283a 	ret

00004a2c <__gedf2>:
    4a2c:	2804d53a 	srli	r2,r5,20
    4a30:	3806d53a 	srli	r3,r7,20
    4a34:	02000434 	movhi	r8,16
    4a38:	423fffc4 	addi	r8,r8,-1
    4a3c:	1081ffcc 	andi	r2,r2,2047
    4a40:	0241ffc4 	movi	r9,2047
    4a44:	2a14703a 	and	r10,r5,r8
    4a48:	18c1ffcc 	andi	r3,r3,2047
    4a4c:	3a10703a 	and	r8,r7,r8
    4a50:	280ad7fa 	srli	r5,r5,31
    4a54:	380ed7fa 	srli	r7,r7,31
    4a58:	12401d26 	beq	r2,r9,4ad0 <__gedf2+0xa4>
    4a5c:	0241ffc4 	movi	r9,2047
    4a60:	1a401226 	beq	r3,r9,4aac <__gedf2+0x80>
    4a64:	1000081e 	bne	r2,zero,4a88 <__gedf2+0x5c>
    4a68:	2296b03a 	or	r11,r4,r10
    4a6c:	5813003a 	cmpeq	r9,r11,zero
    4a70:	1800091e 	bne	r3,zero,4a98 <__gedf2+0x6c>
    4a74:	3218b03a 	or	r12,r6,r8
    4a78:	6000071e 	bne	r12,zero,4a98 <__gedf2+0x6c>
    4a7c:	0005883a 	mov	r2,zero
    4a80:	5800101e 	bne	r11,zero,4ac4 <__gedf2+0x98>
    4a84:	f800283a 	ret
    4a88:	18000c1e 	bne	r3,zero,4abc <__gedf2+0x90>
    4a8c:	3212b03a 	or	r9,r6,r8
    4a90:	48000c26 	beq	r9,zero,4ac4 <__gedf2+0x98>
    4a94:	0013883a 	mov	r9,zero
    4a98:	39c03fcc 	andi	r7,r7,255
    4a9c:	48000826 	beq	r9,zero,4ac0 <__gedf2+0x94>
    4aa0:	38000926 	beq	r7,zero,4ac8 <__gedf2+0x9c>
    4aa4:	00800044 	movi	r2,1
    4aa8:	f800283a 	ret
    4aac:	3212b03a 	or	r9,r6,r8
    4ab0:	483fec26 	beq	r9,zero,4a64 <_gp+0xffff6694>
    4ab4:	00bfff84 	movi	r2,-2
    4ab8:	f800283a 	ret
    4abc:	39c03fcc 	andi	r7,r7,255
    4ac0:	29c00626 	beq	r5,r7,4adc <__gedf2+0xb0>
    4ac4:	283ff726 	beq	r5,zero,4aa4 <_gp+0xffff66d4>
    4ac8:	00bfffc4 	movi	r2,-1
    4acc:	f800283a 	ret
    4ad0:	2292b03a 	or	r9,r4,r10
    4ad4:	483fe126 	beq	r9,zero,4a5c <_gp+0xffff668c>
    4ad8:	003ff606 	br	4ab4 <_gp+0xffff66e4>
    4adc:	18bff916 	blt	r3,r2,4ac4 <_gp+0xffff66f4>
    4ae0:	10c00316 	blt	r2,r3,4af0 <__gedf2+0xc4>
    4ae4:	42bff736 	bltu	r8,r10,4ac4 <_gp+0xffff66f4>
    4ae8:	52000326 	beq	r10,r8,4af8 <__gedf2+0xcc>
    4aec:	5200042e 	bgeu	r10,r8,4b00 <__gedf2+0xd4>
    4af0:	283fec1e 	bne	r5,zero,4aa4 <_gp+0xffff66d4>
    4af4:	003ff406 	br	4ac8 <_gp+0xffff66f8>
    4af8:	313ff236 	bltu	r6,r4,4ac4 <_gp+0xffff66f4>
    4afc:	21bffc36 	bltu	r4,r6,4af0 <_gp+0xffff6720>
    4b00:	0005883a 	mov	r2,zero
    4b04:	f800283a 	ret

00004b08 <__ledf2>:
    4b08:	2804d53a 	srli	r2,r5,20
    4b0c:	3810d53a 	srli	r8,r7,20
    4b10:	00c00434 	movhi	r3,16
    4b14:	18ffffc4 	addi	r3,r3,-1
    4b18:	1081ffcc 	andi	r2,r2,2047
    4b1c:	0241ffc4 	movi	r9,2047
    4b20:	28d4703a 	and	r10,r5,r3
    4b24:	4201ffcc 	andi	r8,r8,2047
    4b28:	38c6703a 	and	r3,r7,r3
    4b2c:	280ad7fa 	srli	r5,r5,31
    4b30:	380ed7fa 	srli	r7,r7,31
    4b34:	12401f26 	beq	r2,r9,4bb4 <__ledf2+0xac>
    4b38:	0241ffc4 	movi	r9,2047
    4b3c:	42401426 	beq	r8,r9,4b90 <__ledf2+0x88>
    4b40:	1000091e 	bne	r2,zero,4b68 <__ledf2+0x60>
    4b44:	2296b03a 	or	r11,r4,r10
    4b48:	5813003a 	cmpeq	r9,r11,zero
    4b4c:	29403fcc 	andi	r5,r5,255
    4b50:	40000a1e 	bne	r8,zero,4b7c <__ledf2+0x74>
    4b54:	30d8b03a 	or	r12,r6,r3
    4b58:	6000081e 	bne	r12,zero,4b7c <__ledf2+0x74>
    4b5c:	0005883a 	mov	r2,zero
    4b60:	5800111e 	bne	r11,zero,4ba8 <__ledf2+0xa0>
    4b64:	f800283a 	ret
    4b68:	29403fcc 	andi	r5,r5,255
    4b6c:	40000c1e 	bne	r8,zero,4ba0 <__ledf2+0x98>
    4b70:	30d2b03a 	or	r9,r6,r3
    4b74:	48000c26 	beq	r9,zero,4ba8 <__ledf2+0xa0>
    4b78:	0013883a 	mov	r9,zero
    4b7c:	39c03fcc 	andi	r7,r7,255
    4b80:	48000826 	beq	r9,zero,4ba4 <__ledf2+0x9c>
    4b84:	38001126 	beq	r7,zero,4bcc <__ledf2+0xc4>
    4b88:	00800044 	movi	r2,1
    4b8c:	f800283a 	ret
    4b90:	30d2b03a 	or	r9,r6,r3
    4b94:	483fea26 	beq	r9,zero,4b40 <_gp+0xffff6770>
    4b98:	00800084 	movi	r2,2
    4b9c:	f800283a 	ret
    4ba0:	39c03fcc 	andi	r7,r7,255
    4ba4:	39400726 	beq	r7,r5,4bc4 <__ledf2+0xbc>
    4ba8:	2800081e 	bne	r5,zero,4bcc <__ledf2+0xc4>
    4bac:	00800044 	movi	r2,1
    4bb0:	f800283a 	ret
    4bb4:	2292b03a 	or	r9,r4,r10
    4bb8:	483fdf26 	beq	r9,zero,4b38 <_gp+0xffff6768>
    4bbc:	00800084 	movi	r2,2
    4bc0:	f800283a 	ret
    4bc4:	4080030e 	bge	r8,r2,4bd4 <__ledf2+0xcc>
    4bc8:	383fef26 	beq	r7,zero,4b88 <_gp+0xffff67b8>
    4bcc:	00bfffc4 	movi	r2,-1
    4bd0:	f800283a 	ret
    4bd4:	123feb16 	blt	r2,r8,4b84 <_gp+0xffff67b4>
    4bd8:	1abff336 	bltu	r3,r10,4ba8 <_gp+0xffff67d8>
    4bdc:	50c00326 	beq	r10,r3,4bec <__ledf2+0xe4>
    4be0:	50c0042e 	bgeu	r10,r3,4bf4 <__ledf2+0xec>
    4be4:	283fe81e 	bne	r5,zero,4b88 <_gp+0xffff67b8>
    4be8:	003ff806 	br	4bcc <_gp+0xffff67fc>
    4bec:	313fee36 	bltu	r6,r4,4ba8 <_gp+0xffff67d8>
    4bf0:	21bffc36 	bltu	r4,r6,4be4 <_gp+0xffff6814>
    4bf4:	0005883a 	mov	r2,zero
    4bf8:	f800283a 	ret

00004bfc <__muldf3>:
    4bfc:	deffee04 	addi	sp,sp,-72
    4c00:	dd000c15 	stw	r20,48(sp)
    4c04:	2828d53a 	srli	r20,r5,20
    4c08:	ddc00f15 	stw	r23,60(sp)
    4c0c:	282ed7fa 	srli	r23,r5,31
    4c10:	dc000815 	stw	r16,32(sp)
    4c14:	04000434 	movhi	r16,16
    4c18:	dcc00b15 	stw	r19,44(sp)
    4c1c:	843fffc4 	addi	r16,r16,-1
    4c20:	dfc01115 	stw	ra,68(sp)
    4c24:	df001015 	stw	fp,64(sp)
    4c28:	dd800e15 	stw	r22,56(sp)
    4c2c:	dd400d15 	stw	r21,52(sp)
    4c30:	dc800a15 	stw	r18,40(sp)
    4c34:	dc400915 	stw	r17,36(sp)
    4c38:	a501ffcc 	andi	r20,r20,2047
    4c3c:	2c20703a 	and	r16,r5,r16
    4c40:	b827883a 	mov	r19,r23
    4c44:	ba403fcc 	andi	r9,r23,255
    4c48:	a0006026 	beq	r20,zero,4dcc <__muldf3+0x1d0>
    4c4c:	0081ffc4 	movi	r2,2047
    4c50:	202d883a 	mov	r22,r4
    4c54:	a0803626 	beq	r20,r2,4d30 <__muldf3+0x134>
    4c58:	84000434 	orhi	r16,r16,16
    4c5c:	200ad77a 	srli	r5,r4,29
    4c60:	800490fa 	slli	r2,r16,3
    4c64:	202c90fa 	slli	r22,r4,3
    4c68:	a53f0044 	addi	r20,r20,-1023
    4c6c:	28a0b03a 	or	r16,r5,r2
    4c70:	002b883a 	mov	r21,zero
    4c74:	000b883a 	mov	r5,zero
    4c78:	3804d53a 	srli	r2,r7,20
    4c7c:	3838d7fa 	srli	fp,r7,31
    4c80:	04400434 	movhi	r17,16
    4c84:	8c7fffc4 	addi	r17,r17,-1
    4c88:	1081ffcc 	andi	r2,r2,2047
    4c8c:	3025883a 	mov	r18,r6
    4c90:	3c62703a 	and	r17,r7,r17
    4c94:	e2803fcc 	andi	r10,fp,255
    4c98:	10006d26 	beq	r2,zero,4e50 <__muldf3+0x254>
    4c9c:	00c1ffc4 	movi	r3,2047
    4ca0:	10c06526 	beq	r2,r3,4e38 <__muldf3+0x23c>
    4ca4:	8c400434 	orhi	r17,r17,16
    4ca8:	300ed77a 	srli	r7,r6,29
    4cac:	880690fa 	slli	r3,r17,3
    4cb0:	302490fa 	slli	r18,r6,3
    4cb4:	10bf0044 	addi	r2,r2,-1023
    4cb8:	38e2b03a 	or	r17,r7,r3
    4cbc:	000f883a 	mov	r7,zero
    4cc0:	a087883a 	add	r3,r20,r2
    4cc4:	010003c4 	movi	r4,15
    4cc8:	3d44b03a 	or	r2,r7,r21
    4ccc:	e5ccf03a 	xor	r6,fp,r23
    4cd0:	1a000044 	addi	r8,r3,1
    4cd4:	20809b36 	bltu	r4,r2,4f44 <__muldf3+0x348>
    4cd8:	100490ba 	slli	r2,r2,2
    4cdc:	01000034 	movhi	r4,0
    4ce0:	21133c04 	addi	r4,r4,19696
    4ce4:	1105883a 	add	r2,r2,r4
    4ce8:	10800017 	ldw	r2,0(r2)
    4cec:	1000683a 	jmp	r2
    4cf0:	00004f44 	movi	zero,317
    4cf4:	00004d50 	cmplti	zero,zero,309
    4cf8:	00004d50 	cmplti	zero,zero,309
    4cfc:	00004d4c 	andi	zero,zero,309
    4d00:	00004f20 	cmpeqi	zero,zero,316
    4d04:	00004f20 	cmpeqi	zero,zero,316
    4d08:	00004f08 	cmpgei	zero,zero,316
    4d0c:	00004d4c 	andi	zero,zero,309
    4d10:	00004f20 	cmpeqi	zero,zero,316
    4d14:	00004f08 	cmpgei	zero,zero,316
    4d18:	00004f20 	cmpeqi	zero,zero,316
    4d1c:	00004d4c 	andi	zero,zero,309
    4d20:	00004f30 	cmpltui	zero,zero,316
    4d24:	00004f30 	cmpltui	zero,zero,316
    4d28:	00004f30 	cmpltui	zero,zero,316
    4d2c:	00005290 	cmplti	zero,zero,330
    4d30:	2404b03a 	or	r2,r4,r16
    4d34:	1000711e 	bne	r2,zero,4efc <__muldf3+0x300>
    4d38:	05400204 	movi	r21,8
    4d3c:	0021883a 	mov	r16,zero
    4d40:	002d883a 	mov	r22,zero
    4d44:	01400084 	movi	r5,2
    4d48:	003fcb06 	br	4c78 <_gp+0xffff68a8>
    4d4c:	500d883a 	mov	r6,r10
    4d50:	00800084 	movi	r2,2
    4d54:	38805926 	beq	r7,r2,4ebc <__muldf3+0x2c0>
    4d58:	008000c4 	movi	r2,3
    4d5c:	3881bb26 	beq	r7,r2,544c <__muldf3+0x850>
    4d60:	00800044 	movi	r2,1
    4d64:	3881961e 	bne	r7,r2,53c0 <__muldf3+0x7c4>
    4d68:	3027883a 	mov	r19,r6
    4d6c:	0005883a 	mov	r2,zero
    4d70:	0021883a 	mov	r16,zero
    4d74:	002d883a 	mov	r22,zero
    4d78:	1004953a 	slli	r2,r2,20
    4d7c:	98c03fcc 	andi	r3,r19,255
    4d80:	04400434 	movhi	r17,16
    4d84:	8c7fffc4 	addi	r17,r17,-1
    4d88:	180697fa 	slli	r3,r3,31
    4d8c:	8460703a 	and	r16,r16,r17
    4d90:	80a0b03a 	or	r16,r16,r2
    4d94:	80c6b03a 	or	r3,r16,r3
    4d98:	b005883a 	mov	r2,r22
    4d9c:	dfc01117 	ldw	ra,68(sp)
    4da0:	df001017 	ldw	fp,64(sp)
    4da4:	ddc00f17 	ldw	r23,60(sp)
    4da8:	dd800e17 	ldw	r22,56(sp)
    4dac:	dd400d17 	ldw	r21,52(sp)
    4db0:	dd000c17 	ldw	r20,48(sp)
    4db4:	dcc00b17 	ldw	r19,44(sp)
    4db8:	dc800a17 	ldw	r18,40(sp)
    4dbc:	dc400917 	ldw	r17,36(sp)
    4dc0:	dc000817 	ldw	r16,32(sp)
    4dc4:	dec01204 	addi	sp,sp,72
    4dc8:	f800283a 	ret
    4dcc:	2404b03a 	or	r2,r4,r16
    4dd0:	202b883a 	mov	r21,r4
    4dd4:	10004426 	beq	r2,zero,4ee8 <__muldf3+0x2ec>
    4dd8:	80015126 	beq	r16,zero,5320 <__muldf3+0x724>
    4ddc:	8009883a 	mov	r4,r16
    4de0:	d9800715 	stw	r6,28(sp)
    4de4:	d9c00215 	stw	r7,8(sp)
    4de8:	da400415 	stw	r9,16(sp)
    4dec:	0005f680 	call	5f68 <__clzsi2>
    4df0:	d9800717 	ldw	r6,28(sp)
    4df4:	d9c00217 	ldw	r7,8(sp)
    4df8:	da400417 	ldw	r9,16(sp)
    4dfc:	113ffd44 	addi	r4,r2,-11
    4e00:	00c00704 	movi	r3,28
    4e04:	19014216 	blt	r3,r4,5310 <__muldf3+0x714>
    4e08:	00c00744 	movi	r3,29
    4e0c:	15bffe04 	addi	r22,r2,-8
    4e10:	1907c83a 	sub	r3,r3,r4
    4e14:	85a0983a 	sll	r16,r16,r22
    4e18:	a8c6d83a 	srl	r3,r21,r3
    4e1c:	adac983a 	sll	r22,r21,r22
    4e20:	1c20b03a 	or	r16,r3,r16
    4e24:	1080fcc4 	addi	r2,r2,1011
    4e28:	00a9c83a 	sub	r20,zero,r2
    4e2c:	002b883a 	mov	r21,zero
    4e30:	000b883a 	mov	r5,zero
    4e34:	003f9006 	br	4c78 <_gp+0xffff68a8>
    4e38:	3446b03a 	or	r3,r6,r17
    4e3c:	1800281e 	bne	r3,zero,4ee0 <__muldf3+0x2e4>
    4e40:	0023883a 	mov	r17,zero
    4e44:	0025883a 	mov	r18,zero
    4e48:	01c00084 	movi	r7,2
    4e4c:	003f9c06 	br	4cc0 <_gp+0xffff68f0>
    4e50:	3446b03a 	or	r3,r6,r17
    4e54:	18001e26 	beq	r3,zero,4ed0 <__muldf3+0x2d4>
    4e58:	88012126 	beq	r17,zero,52e0 <__muldf3+0x6e4>
    4e5c:	8809883a 	mov	r4,r17
    4e60:	d9400215 	stw	r5,8(sp)
    4e64:	d9800715 	stw	r6,28(sp)
    4e68:	da400415 	stw	r9,16(sp)
    4e6c:	da800315 	stw	r10,12(sp)
    4e70:	0005f680 	call	5f68 <__clzsi2>
    4e74:	d9400217 	ldw	r5,8(sp)
    4e78:	d9800717 	ldw	r6,28(sp)
    4e7c:	da400417 	ldw	r9,16(sp)
    4e80:	da800317 	ldw	r10,12(sp)
    4e84:	113ffd44 	addi	r4,r2,-11
    4e88:	00c00704 	movi	r3,28
    4e8c:	19011016 	blt	r3,r4,52d0 <__muldf3+0x6d4>
    4e90:	00c00744 	movi	r3,29
    4e94:	14bffe04 	addi	r18,r2,-8
    4e98:	1907c83a 	sub	r3,r3,r4
    4e9c:	8ca2983a 	sll	r17,r17,r18
    4ea0:	30c6d83a 	srl	r3,r6,r3
    4ea4:	34a4983a 	sll	r18,r6,r18
    4ea8:	1c62b03a 	or	r17,r3,r17
    4eac:	1080fcc4 	addi	r2,r2,1011
    4eb0:	0085c83a 	sub	r2,zero,r2
    4eb4:	000f883a 	mov	r7,zero
    4eb8:	003f8106 	br	4cc0 <_gp+0xffff68f0>
    4ebc:	3027883a 	mov	r19,r6
    4ec0:	0081ffc4 	movi	r2,2047
    4ec4:	0021883a 	mov	r16,zero
    4ec8:	002d883a 	mov	r22,zero
    4ecc:	003faa06 	br	4d78 <_gp+0xffff69a8>
    4ed0:	0023883a 	mov	r17,zero
    4ed4:	0025883a 	mov	r18,zero
    4ed8:	01c00044 	movi	r7,1
    4edc:	003f7806 	br	4cc0 <_gp+0xffff68f0>
    4ee0:	01c000c4 	movi	r7,3
    4ee4:	003f7606 	br	4cc0 <_gp+0xffff68f0>
    4ee8:	05400104 	movi	r21,4
    4eec:	0021883a 	mov	r16,zero
    4ef0:	002d883a 	mov	r22,zero
    4ef4:	01400044 	movi	r5,1
    4ef8:	003f5f06 	br	4c78 <_gp+0xffff68a8>
    4efc:	05400304 	movi	r21,12
    4f00:	014000c4 	movi	r5,3
    4f04:	003f5c06 	br	4c78 <_gp+0xffff68a8>
    4f08:	04000434 	movhi	r16,16
    4f0c:	0027883a 	mov	r19,zero
    4f10:	843fffc4 	addi	r16,r16,-1
    4f14:	05bfffc4 	movi	r22,-1
    4f18:	0081ffc4 	movi	r2,2047
    4f1c:	003f9606 	br	4d78 <_gp+0xffff69a8>
    4f20:	8023883a 	mov	r17,r16
    4f24:	b025883a 	mov	r18,r22
    4f28:	280f883a 	mov	r7,r5
    4f2c:	003f8806 	br	4d50 <_gp+0xffff6980>
    4f30:	8023883a 	mov	r17,r16
    4f34:	b025883a 	mov	r18,r22
    4f38:	480d883a 	mov	r6,r9
    4f3c:	280f883a 	mov	r7,r5
    4f40:	003f8306 	br	4d50 <_gp+0xffff6980>
    4f44:	b026d43a 	srli	r19,r22,16
    4f48:	902ed43a 	srli	r23,r18,16
    4f4c:	b5bfffcc 	andi	r22,r22,65535
    4f50:	94bfffcc 	andi	r18,r18,65535
    4f54:	b00b883a 	mov	r5,r22
    4f58:	9009883a 	mov	r4,r18
    4f5c:	d8c00515 	stw	r3,20(sp)
    4f60:	d9800715 	stw	r6,28(sp)
    4f64:	da000615 	stw	r8,24(sp)
    4f68:	0002d180 	call	2d18 <__mulsi3>
    4f6c:	980b883a 	mov	r5,r19
    4f70:	9009883a 	mov	r4,r18
    4f74:	1029883a 	mov	r20,r2
    4f78:	0002d180 	call	2d18 <__mulsi3>
    4f7c:	b80b883a 	mov	r5,r23
    4f80:	9809883a 	mov	r4,r19
    4f84:	102b883a 	mov	r21,r2
    4f88:	0002d180 	call	2d18 <__mulsi3>
    4f8c:	b809883a 	mov	r4,r23
    4f90:	b00b883a 	mov	r5,r22
    4f94:	1039883a 	mov	fp,r2
    4f98:	0002d180 	call	2d18 <__mulsi3>
    4f9c:	a008d43a 	srli	r4,r20,16
    4fa0:	1545883a 	add	r2,r2,r21
    4fa4:	d8c00517 	ldw	r3,20(sp)
    4fa8:	2085883a 	add	r2,r4,r2
    4fac:	d9800717 	ldw	r6,28(sp)
    4fb0:	da000617 	ldw	r8,24(sp)
    4fb4:	1540022e 	bgeu	r2,r21,4fc0 <__muldf3+0x3c4>
    4fb8:	01000074 	movhi	r4,1
    4fbc:	e139883a 	add	fp,fp,r4
    4fc0:	100e943a 	slli	r7,r2,16
    4fc4:	1004d43a 	srli	r2,r2,16
    4fc8:	882ad43a 	srli	r21,r17,16
    4fcc:	a53fffcc 	andi	r20,r20,65535
    4fd0:	8c7fffcc 	andi	r17,r17,65535
    4fd4:	3d29883a 	add	r20,r7,r20
    4fd8:	b00b883a 	mov	r5,r22
    4fdc:	8809883a 	mov	r4,r17
    4fe0:	d8c00515 	stw	r3,20(sp)
    4fe4:	d9800715 	stw	r6,28(sp)
    4fe8:	da000615 	stw	r8,24(sp)
    4fec:	dd000115 	stw	r20,4(sp)
    4ff0:	d8800015 	stw	r2,0(sp)
    4ff4:	0002d180 	call	2d18 <__mulsi3>
    4ff8:	980b883a 	mov	r5,r19
    4ffc:	8809883a 	mov	r4,r17
    5000:	d8800215 	stw	r2,8(sp)
    5004:	0002d180 	call	2d18 <__mulsi3>
    5008:	9809883a 	mov	r4,r19
    500c:	a80b883a 	mov	r5,r21
    5010:	1029883a 	mov	r20,r2
    5014:	0002d180 	call	2d18 <__mulsi3>
    5018:	b00b883a 	mov	r5,r22
    501c:	a809883a 	mov	r4,r21
    5020:	d8800415 	stw	r2,16(sp)
    5024:	0002d180 	call	2d18 <__mulsi3>
    5028:	d9c00217 	ldw	r7,8(sp)
    502c:	1505883a 	add	r2,r2,r20
    5030:	d8c00517 	ldw	r3,20(sp)
    5034:	3826d43a 	srli	r19,r7,16
    5038:	d9800717 	ldw	r6,28(sp)
    503c:	da000617 	ldw	r8,24(sp)
    5040:	9885883a 	add	r2,r19,r2
    5044:	da400417 	ldw	r9,16(sp)
    5048:	1500022e 	bgeu	r2,r20,5054 <__muldf3+0x458>
    504c:	01000074 	movhi	r4,1
    5050:	4913883a 	add	r9,r9,r4
    5054:	1028d43a 	srli	r20,r2,16
    5058:	1004943a 	slli	r2,r2,16
    505c:	802cd43a 	srli	r22,r16,16
    5060:	843fffcc 	andi	r16,r16,65535
    5064:	3cffffcc 	andi	r19,r7,65535
    5068:	9009883a 	mov	r4,r18
    506c:	800b883a 	mov	r5,r16
    5070:	a269883a 	add	r20,r20,r9
    5074:	d8c00515 	stw	r3,20(sp)
    5078:	d9800715 	stw	r6,28(sp)
    507c:	da000615 	stw	r8,24(sp)
    5080:	14e7883a 	add	r19,r2,r19
    5084:	0002d180 	call	2d18 <__mulsi3>
    5088:	9009883a 	mov	r4,r18
    508c:	b00b883a 	mov	r5,r22
    5090:	d8800315 	stw	r2,12(sp)
    5094:	0002d180 	call	2d18 <__mulsi3>
    5098:	b809883a 	mov	r4,r23
    509c:	b00b883a 	mov	r5,r22
    50a0:	d8800215 	stw	r2,8(sp)
    50a4:	0002d180 	call	2d18 <__mulsi3>
    50a8:	b80b883a 	mov	r5,r23
    50ac:	8009883a 	mov	r4,r16
    50b0:	d8800415 	stw	r2,16(sp)
    50b4:	0002d180 	call	2d18 <__mulsi3>
    50b8:	da800317 	ldw	r10,12(sp)
    50bc:	d9c00217 	ldw	r7,8(sp)
    50c0:	d9000017 	ldw	r4,0(sp)
    50c4:	502ed43a 	srli	r23,r10,16
    50c8:	11c5883a 	add	r2,r2,r7
    50cc:	24e5883a 	add	r18,r4,r19
    50d0:	b885883a 	add	r2,r23,r2
    50d4:	d8c00517 	ldw	r3,20(sp)
    50d8:	d9800717 	ldw	r6,28(sp)
    50dc:	da000617 	ldw	r8,24(sp)
    50e0:	da400417 	ldw	r9,16(sp)
    50e4:	11c0022e 	bgeu	r2,r7,50f0 <__muldf3+0x4f4>
    50e8:	01000074 	movhi	r4,1
    50ec:	4913883a 	add	r9,r9,r4
    50f0:	100ed43a 	srli	r7,r2,16
    50f4:	1004943a 	slli	r2,r2,16
    50f8:	55ffffcc 	andi	r23,r10,65535
    50fc:	3a53883a 	add	r9,r7,r9
    5100:	8809883a 	mov	r4,r17
    5104:	800b883a 	mov	r5,r16
    5108:	d8c00515 	stw	r3,20(sp)
    510c:	d9800715 	stw	r6,28(sp)
    5110:	da000615 	stw	r8,24(sp)
    5114:	da400415 	stw	r9,16(sp)
    5118:	15ef883a 	add	r23,r2,r23
    511c:	0002d180 	call	2d18 <__mulsi3>
    5120:	8809883a 	mov	r4,r17
    5124:	b00b883a 	mov	r5,r22
    5128:	d8800215 	stw	r2,8(sp)
    512c:	0002d180 	call	2d18 <__mulsi3>
    5130:	b00b883a 	mov	r5,r22
    5134:	a809883a 	mov	r4,r21
    5138:	d8800315 	stw	r2,12(sp)
    513c:	0002d180 	call	2d18 <__mulsi3>
    5140:	8009883a 	mov	r4,r16
    5144:	a80b883a 	mov	r5,r21
    5148:	1023883a 	mov	r17,r2
    514c:	0002d180 	call	2d18 <__mulsi3>
    5150:	d9c00217 	ldw	r7,8(sp)
    5154:	da800317 	ldw	r10,12(sp)
    5158:	d8c00517 	ldw	r3,20(sp)
    515c:	3808d43a 	srli	r4,r7,16
    5160:	1285883a 	add	r2,r2,r10
    5164:	d9800717 	ldw	r6,28(sp)
    5168:	2085883a 	add	r2,r4,r2
    516c:	da000617 	ldw	r8,24(sp)
    5170:	da400417 	ldw	r9,16(sp)
    5174:	1280022e 	bgeu	r2,r10,5180 <__muldf3+0x584>
    5178:	01000074 	movhi	r4,1
    517c:	8923883a 	add	r17,r17,r4
    5180:	1008943a 	slli	r4,r2,16
    5184:	39ffffcc 	andi	r7,r7,65535
    5188:	e4b9883a 	add	fp,fp,r18
    518c:	21cf883a 	add	r7,r4,r7
    5190:	e4e7803a 	cmpltu	r19,fp,r19
    5194:	3d0f883a 	add	r7,r7,r20
    5198:	bf39883a 	add	fp,r23,fp
    519c:	99c9883a 	add	r4,r19,r7
    51a0:	e5ef803a 	cmpltu	r23,fp,r23
    51a4:	490b883a 	add	r5,r9,r4
    51a8:	1004d43a 	srli	r2,r2,16
    51ac:	b965883a 	add	r18,r23,r5
    51b0:	24c9803a 	cmpltu	r4,r4,r19
    51b4:	3d29803a 	cmpltu	r20,r7,r20
    51b8:	a128b03a 	or	r20,r20,r4
    51bc:	95ef803a 	cmpltu	r23,r18,r23
    51c0:	2a53803a 	cmpltu	r9,r5,r9
    51c4:	a0a9883a 	add	r20,r20,r2
    51c8:	4deeb03a 	or	r23,r9,r23
    51cc:	a5ef883a 	add	r23,r20,r23
    51d0:	bc63883a 	add	r17,r23,r17
    51d4:	e004927a 	slli	r2,fp,9
    51d8:	d9000117 	ldw	r4,4(sp)
    51dc:	882e927a 	slli	r23,r17,9
    51e0:	9022d5fa 	srli	r17,r18,23
    51e4:	e038d5fa 	srli	fp,fp,23
    51e8:	1104b03a 	or	r2,r2,r4
    51ec:	9024927a 	slli	r18,r18,9
    51f0:	1004c03a 	cmpne	r2,r2,zero
    51f4:	bc62b03a 	or	r17,r23,r17
    51f8:	1738b03a 	or	fp,r2,fp
    51fc:	8880402c 	andhi	r2,r17,256
    5200:	e4a4b03a 	or	r18,fp,r18
    5204:	10000726 	beq	r2,zero,5224 <__muldf3+0x628>
    5208:	9006d07a 	srli	r3,r18,1
    520c:	880497fa 	slli	r2,r17,31
    5210:	9480004c 	andi	r18,r18,1
    5214:	8822d07a 	srli	r17,r17,1
    5218:	1ca4b03a 	or	r18,r3,r18
    521c:	14a4b03a 	or	r18,r2,r18
    5220:	4007883a 	mov	r3,r8
    5224:	1880ffc4 	addi	r2,r3,1023
    5228:	0080460e 	bge	zero,r2,5344 <__muldf3+0x748>
    522c:	910001cc 	andi	r4,r18,7
    5230:	20000726 	beq	r4,zero,5250 <__muldf3+0x654>
    5234:	910003cc 	andi	r4,r18,15
    5238:	01400104 	movi	r5,4
    523c:	21400426 	beq	r4,r5,5250 <__muldf3+0x654>
    5240:	9149883a 	add	r4,r18,r5
    5244:	24a5803a 	cmpltu	r18,r4,r18
    5248:	8ca3883a 	add	r17,r17,r18
    524c:	2025883a 	mov	r18,r4
    5250:	8900402c 	andhi	r4,r17,256
    5254:	20000426 	beq	r4,zero,5268 <__muldf3+0x66c>
    5258:	18810004 	addi	r2,r3,1024
    525c:	00ffc034 	movhi	r3,65280
    5260:	18ffffc4 	addi	r3,r3,-1
    5264:	88e2703a 	and	r17,r17,r3
    5268:	00c1ff84 	movi	r3,2046
    526c:	18bf1316 	blt	r3,r2,4ebc <_gp+0xffff6aec>
    5270:	882c977a 	slli	r22,r17,29
    5274:	9024d0fa 	srli	r18,r18,3
    5278:	8822927a 	slli	r17,r17,9
    527c:	1081ffcc 	andi	r2,r2,2047
    5280:	b4acb03a 	or	r22,r22,r18
    5284:	8820d33a 	srli	r16,r17,12
    5288:	3027883a 	mov	r19,r6
    528c:	003eba06 	br	4d78 <_gp+0xffff69a8>
    5290:	8080022c 	andhi	r2,r16,8
    5294:	10000926 	beq	r2,zero,52bc <__muldf3+0x6c0>
    5298:	8880022c 	andhi	r2,r17,8
    529c:	1000071e 	bne	r2,zero,52bc <__muldf3+0x6c0>
    52a0:	00800434 	movhi	r2,16
    52a4:	8c000234 	orhi	r16,r17,8
    52a8:	10bfffc4 	addi	r2,r2,-1
    52ac:	e027883a 	mov	r19,fp
    52b0:	80a0703a 	and	r16,r16,r2
    52b4:	902d883a 	mov	r22,r18
    52b8:	003f1706 	br	4f18 <_gp+0xffff6b48>
    52bc:	00800434 	movhi	r2,16
    52c0:	84000234 	orhi	r16,r16,8
    52c4:	10bfffc4 	addi	r2,r2,-1
    52c8:	80a0703a 	and	r16,r16,r2
    52cc:	003f1206 	br	4f18 <_gp+0xffff6b48>
    52d0:	147ff604 	addi	r17,r2,-40
    52d4:	3462983a 	sll	r17,r6,r17
    52d8:	0025883a 	mov	r18,zero
    52dc:	003ef306 	br	4eac <_gp+0xffff6adc>
    52e0:	3009883a 	mov	r4,r6
    52e4:	d9400215 	stw	r5,8(sp)
    52e8:	d9800715 	stw	r6,28(sp)
    52ec:	da400415 	stw	r9,16(sp)
    52f0:	da800315 	stw	r10,12(sp)
    52f4:	0005f680 	call	5f68 <__clzsi2>
    52f8:	10800804 	addi	r2,r2,32
    52fc:	da800317 	ldw	r10,12(sp)
    5300:	da400417 	ldw	r9,16(sp)
    5304:	d9800717 	ldw	r6,28(sp)
    5308:	d9400217 	ldw	r5,8(sp)
    530c:	003edd06 	br	4e84 <_gp+0xffff6ab4>
    5310:	143ff604 	addi	r16,r2,-40
    5314:	ac20983a 	sll	r16,r21,r16
    5318:	002d883a 	mov	r22,zero
    531c:	003ec106 	br	4e24 <_gp+0xffff6a54>
    5320:	d9800715 	stw	r6,28(sp)
    5324:	d9c00215 	stw	r7,8(sp)
    5328:	da400415 	stw	r9,16(sp)
    532c:	0005f680 	call	5f68 <__clzsi2>
    5330:	10800804 	addi	r2,r2,32
    5334:	da400417 	ldw	r9,16(sp)
    5338:	d9c00217 	ldw	r7,8(sp)
    533c:	d9800717 	ldw	r6,28(sp)
    5340:	003eae06 	br	4dfc <_gp+0xffff6a2c>
    5344:	00c00044 	movi	r3,1
    5348:	1887c83a 	sub	r3,r3,r2
    534c:	01000e04 	movi	r4,56
    5350:	20fe8516 	blt	r4,r3,4d68 <_gp+0xffff6998>
    5354:	010007c4 	movi	r4,31
    5358:	20c01b16 	blt	r4,r3,53c8 <__muldf3+0x7cc>
    535c:	00800804 	movi	r2,32
    5360:	10c5c83a 	sub	r2,r2,r3
    5364:	888a983a 	sll	r5,r17,r2
    5368:	90c8d83a 	srl	r4,r18,r3
    536c:	9084983a 	sll	r2,r18,r2
    5370:	88e2d83a 	srl	r17,r17,r3
    5374:	2906b03a 	or	r3,r5,r4
    5378:	1004c03a 	cmpne	r2,r2,zero
    537c:	1886b03a 	or	r3,r3,r2
    5380:	188001cc 	andi	r2,r3,7
    5384:	10000726 	beq	r2,zero,53a4 <__muldf3+0x7a8>
    5388:	188003cc 	andi	r2,r3,15
    538c:	01000104 	movi	r4,4
    5390:	11000426 	beq	r2,r4,53a4 <__muldf3+0x7a8>
    5394:	1805883a 	mov	r2,r3
    5398:	10c00104 	addi	r3,r2,4
    539c:	1885803a 	cmpltu	r2,r3,r2
    53a0:	88a3883a 	add	r17,r17,r2
    53a4:	8880202c 	andhi	r2,r17,128
    53a8:	10001c26 	beq	r2,zero,541c <__muldf3+0x820>
    53ac:	3027883a 	mov	r19,r6
    53b0:	00800044 	movi	r2,1
    53b4:	0021883a 	mov	r16,zero
    53b8:	002d883a 	mov	r22,zero
    53bc:	003e6e06 	br	4d78 <_gp+0xffff69a8>
    53c0:	4007883a 	mov	r3,r8
    53c4:	003f9706 	br	5224 <_gp+0xffff6e54>
    53c8:	017ff844 	movi	r5,-31
    53cc:	2885c83a 	sub	r2,r5,r2
    53d0:	888ad83a 	srl	r5,r17,r2
    53d4:	00800804 	movi	r2,32
    53d8:	18801a26 	beq	r3,r2,5444 <__muldf3+0x848>
    53dc:	01001004 	movi	r4,64
    53e0:	20c7c83a 	sub	r3,r4,r3
    53e4:	88e2983a 	sll	r17,r17,r3
    53e8:	8ca4b03a 	or	r18,r17,r18
    53ec:	9004c03a 	cmpne	r2,r18,zero
    53f0:	2884b03a 	or	r2,r5,r2
    53f4:	144001cc 	andi	r17,r2,7
    53f8:	88000d1e 	bne	r17,zero,5430 <__muldf3+0x834>
    53fc:	0021883a 	mov	r16,zero
    5400:	102cd0fa 	srli	r22,r2,3
    5404:	3027883a 	mov	r19,r6
    5408:	0005883a 	mov	r2,zero
    540c:	b46cb03a 	or	r22,r22,r17
    5410:	003e5906 	br	4d78 <_gp+0xffff69a8>
    5414:	1007883a 	mov	r3,r2
    5418:	0023883a 	mov	r17,zero
    541c:	8820927a 	slli	r16,r17,9
    5420:	1805883a 	mov	r2,r3
    5424:	8822977a 	slli	r17,r17,29
    5428:	8020d33a 	srli	r16,r16,12
    542c:	003ff406 	br	5400 <_gp+0xffff7030>
    5430:	10c003cc 	andi	r3,r2,15
    5434:	01000104 	movi	r4,4
    5438:	193ff626 	beq	r3,r4,5414 <_gp+0xffff7044>
    543c:	0023883a 	mov	r17,zero
    5440:	003fd506 	br	5398 <_gp+0xffff6fc8>
    5444:	0023883a 	mov	r17,zero
    5448:	003fe706 	br	53e8 <_gp+0xffff7018>
    544c:	00800434 	movhi	r2,16
    5450:	8c000234 	orhi	r16,r17,8
    5454:	10bfffc4 	addi	r2,r2,-1
    5458:	3027883a 	mov	r19,r6
    545c:	80a0703a 	and	r16,r16,r2
    5460:	902d883a 	mov	r22,r18
    5464:	003eac06 	br	4f18 <_gp+0xffff6b48>

00005468 <__subdf3>:
    5468:	02000434 	movhi	r8,16
    546c:	423fffc4 	addi	r8,r8,-1
    5470:	defffb04 	addi	sp,sp,-20
    5474:	2a14703a 	and	r10,r5,r8
    5478:	3812d53a 	srli	r9,r7,20
    547c:	3a10703a 	and	r8,r7,r8
    5480:	2006d77a 	srli	r3,r4,29
    5484:	3004d77a 	srli	r2,r6,29
    5488:	dc000015 	stw	r16,0(sp)
    548c:	501490fa 	slli	r10,r10,3
    5490:	2820d53a 	srli	r16,r5,20
    5494:	401090fa 	slli	r8,r8,3
    5498:	dc800215 	stw	r18,8(sp)
    549c:	dc400115 	stw	r17,4(sp)
    54a0:	dfc00415 	stw	ra,16(sp)
    54a4:	202290fa 	slli	r17,r4,3
    54a8:	dcc00315 	stw	r19,12(sp)
    54ac:	4a41ffcc 	andi	r9,r9,2047
    54b0:	0101ffc4 	movi	r4,2047
    54b4:	2824d7fa 	srli	r18,r5,31
    54b8:	8401ffcc 	andi	r16,r16,2047
    54bc:	50c6b03a 	or	r3,r10,r3
    54c0:	380ed7fa 	srli	r7,r7,31
    54c4:	408ab03a 	or	r5,r8,r2
    54c8:	300c90fa 	slli	r6,r6,3
    54cc:	49009626 	beq	r9,r4,5728 <__subdf3+0x2c0>
    54d0:	39c0005c 	xori	r7,r7,1
    54d4:	8245c83a 	sub	r2,r16,r9
    54d8:	3c807426 	beq	r7,r18,56ac <__subdf3+0x244>
    54dc:	0080af0e 	bge	zero,r2,579c <__subdf3+0x334>
    54e0:	48002a1e 	bne	r9,zero,558c <__subdf3+0x124>
    54e4:	2988b03a 	or	r4,r5,r6
    54e8:	20009a1e 	bne	r4,zero,5754 <__subdf3+0x2ec>
    54ec:	888001cc 	andi	r2,r17,7
    54f0:	10000726 	beq	r2,zero,5510 <__subdf3+0xa8>
    54f4:	888003cc 	andi	r2,r17,15
    54f8:	01000104 	movi	r4,4
    54fc:	11000426 	beq	r2,r4,5510 <__subdf3+0xa8>
    5500:	890b883a 	add	r5,r17,r4
    5504:	2c63803a 	cmpltu	r17,r5,r17
    5508:	1c47883a 	add	r3,r3,r17
    550c:	2823883a 	mov	r17,r5
    5510:	1880202c 	andhi	r2,r3,128
    5514:	10005926 	beq	r2,zero,567c <__subdf3+0x214>
    5518:	84000044 	addi	r16,r16,1
    551c:	0081ffc4 	movi	r2,2047
    5520:	8080be26 	beq	r16,r2,581c <__subdf3+0x3b4>
    5524:	017fe034 	movhi	r5,65408
    5528:	297fffc4 	addi	r5,r5,-1
    552c:	1946703a 	and	r3,r3,r5
    5530:	1804977a 	slli	r2,r3,29
    5534:	1806927a 	slli	r3,r3,9
    5538:	8822d0fa 	srli	r17,r17,3
    553c:	8401ffcc 	andi	r16,r16,2047
    5540:	180ad33a 	srli	r5,r3,12
    5544:	9100004c 	andi	r4,r18,1
    5548:	1444b03a 	or	r2,r2,r17
    554c:	80c1ffcc 	andi	r3,r16,2047
    5550:	1820953a 	slli	r16,r3,20
    5554:	20c03fcc 	andi	r3,r4,255
    5558:	180897fa 	slli	r4,r3,31
    555c:	00c00434 	movhi	r3,16
    5560:	18ffffc4 	addi	r3,r3,-1
    5564:	28c6703a 	and	r3,r5,r3
    5568:	1c06b03a 	or	r3,r3,r16
    556c:	1906b03a 	or	r3,r3,r4
    5570:	dfc00417 	ldw	ra,16(sp)
    5574:	dcc00317 	ldw	r19,12(sp)
    5578:	dc800217 	ldw	r18,8(sp)
    557c:	dc400117 	ldw	r17,4(sp)
    5580:	dc000017 	ldw	r16,0(sp)
    5584:	dec00504 	addi	sp,sp,20
    5588:	f800283a 	ret
    558c:	0101ffc4 	movi	r4,2047
    5590:	813fd626 	beq	r16,r4,54ec <_gp+0xffff711c>
    5594:	29402034 	orhi	r5,r5,128
    5598:	01000e04 	movi	r4,56
    559c:	2080a316 	blt	r4,r2,582c <__subdf3+0x3c4>
    55a0:	010007c4 	movi	r4,31
    55a4:	2080c616 	blt	r4,r2,58c0 <__subdf3+0x458>
    55a8:	01000804 	movi	r4,32
    55ac:	2089c83a 	sub	r4,r4,r2
    55b0:	2910983a 	sll	r8,r5,r4
    55b4:	308ed83a 	srl	r7,r6,r2
    55b8:	3108983a 	sll	r4,r6,r4
    55bc:	2884d83a 	srl	r2,r5,r2
    55c0:	41ccb03a 	or	r6,r8,r7
    55c4:	2008c03a 	cmpne	r4,r4,zero
    55c8:	310cb03a 	or	r6,r6,r4
    55cc:	898dc83a 	sub	r6,r17,r6
    55d0:	89a3803a 	cmpltu	r17,r17,r6
    55d4:	1887c83a 	sub	r3,r3,r2
    55d8:	1c47c83a 	sub	r3,r3,r17
    55dc:	3023883a 	mov	r17,r6
    55e0:	1880202c 	andhi	r2,r3,128
    55e4:	10002326 	beq	r2,zero,5674 <__subdf3+0x20c>
    55e8:	04c02034 	movhi	r19,128
    55ec:	9cffffc4 	addi	r19,r19,-1
    55f0:	1ce6703a 	and	r19,r3,r19
    55f4:	98007a26 	beq	r19,zero,57e0 <__subdf3+0x378>
    55f8:	9809883a 	mov	r4,r19
    55fc:	0005f680 	call	5f68 <__clzsi2>
    5600:	113ffe04 	addi	r4,r2,-8
    5604:	00c007c4 	movi	r3,31
    5608:	19007b16 	blt	r3,r4,57f8 <__subdf3+0x390>
    560c:	00800804 	movi	r2,32
    5610:	1105c83a 	sub	r2,r2,r4
    5614:	8884d83a 	srl	r2,r17,r2
    5618:	9906983a 	sll	r3,r19,r4
    561c:	8922983a 	sll	r17,r17,r4
    5620:	10c4b03a 	or	r2,r2,r3
    5624:	24007816 	blt	r4,r16,5808 <__subdf3+0x3a0>
    5628:	2421c83a 	sub	r16,r4,r16
    562c:	80c00044 	addi	r3,r16,1
    5630:	010007c4 	movi	r4,31
    5634:	20c09516 	blt	r4,r3,588c <__subdf3+0x424>
    5638:	01400804 	movi	r5,32
    563c:	28cbc83a 	sub	r5,r5,r3
    5640:	88c8d83a 	srl	r4,r17,r3
    5644:	8962983a 	sll	r17,r17,r5
    5648:	114a983a 	sll	r5,r2,r5
    564c:	10c6d83a 	srl	r3,r2,r3
    5650:	8804c03a 	cmpne	r2,r17,zero
    5654:	290ab03a 	or	r5,r5,r4
    5658:	28a2b03a 	or	r17,r5,r2
    565c:	0021883a 	mov	r16,zero
    5660:	003fa206 	br	54ec <_gp+0xffff711c>
    5664:	2090b03a 	or	r8,r4,r2
    5668:	40018e26 	beq	r8,zero,5ca4 <__subdf3+0x83c>
    566c:	1007883a 	mov	r3,r2
    5670:	2023883a 	mov	r17,r4
    5674:	888001cc 	andi	r2,r17,7
    5678:	103f9e1e 	bne	r2,zero,54f4 <_gp+0xffff7124>
    567c:	1804977a 	slli	r2,r3,29
    5680:	8822d0fa 	srli	r17,r17,3
    5684:	1810d0fa 	srli	r8,r3,3
    5688:	9100004c 	andi	r4,r18,1
    568c:	1444b03a 	or	r2,r2,r17
    5690:	00c1ffc4 	movi	r3,2047
    5694:	80c02826 	beq	r16,r3,5738 <__subdf3+0x2d0>
    5698:	01400434 	movhi	r5,16
    569c:	297fffc4 	addi	r5,r5,-1
    56a0:	80e0703a 	and	r16,r16,r3
    56a4:	414a703a 	and	r5,r8,r5
    56a8:	003fa806 	br	554c <_gp+0xffff717c>
    56ac:	0080630e 	bge	zero,r2,583c <__subdf3+0x3d4>
    56b0:	48003026 	beq	r9,zero,5774 <__subdf3+0x30c>
    56b4:	0101ffc4 	movi	r4,2047
    56b8:	813f8c26 	beq	r16,r4,54ec <_gp+0xffff711c>
    56bc:	29402034 	orhi	r5,r5,128
    56c0:	01000e04 	movi	r4,56
    56c4:	2080a90e 	bge	r4,r2,596c <__subdf3+0x504>
    56c8:	298cb03a 	or	r6,r5,r6
    56cc:	3012c03a 	cmpne	r9,r6,zero
    56d0:	0005883a 	mov	r2,zero
    56d4:	4c53883a 	add	r9,r9,r17
    56d8:	4c63803a 	cmpltu	r17,r9,r17
    56dc:	10c7883a 	add	r3,r2,r3
    56e0:	88c7883a 	add	r3,r17,r3
    56e4:	4823883a 	mov	r17,r9
    56e8:	1880202c 	andhi	r2,r3,128
    56ec:	1000d026 	beq	r2,zero,5a30 <__subdf3+0x5c8>
    56f0:	84000044 	addi	r16,r16,1
    56f4:	0081ffc4 	movi	r2,2047
    56f8:	8080fe26 	beq	r16,r2,5af4 <__subdf3+0x68c>
    56fc:	00bfe034 	movhi	r2,65408
    5700:	10bfffc4 	addi	r2,r2,-1
    5704:	1886703a 	and	r3,r3,r2
    5708:	880ad07a 	srli	r5,r17,1
    570c:	180497fa 	slli	r2,r3,31
    5710:	8900004c 	andi	r4,r17,1
    5714:	2922b03a 	or	r17,r5,r4
    5718:	1806d07a 	srli	r3,r3,1
    571c:	1462b03a 	or	r17,r2,r17
    5720:	3825883a 	mov	r18,r7
    5724:	003f7106 	br	54ec <_gp+0xffff711c>
    5728:	2984b03a 	or	r2,r5,r6
    572c:	103f6826 	beq	r2,zero,54d0 <_gp+0xffff7100>
    5730:	39c03fcc 	andi	r7,r7,255
    5734:	003f6706 	br	54d4 <_gp+0xffff7104>
    5738:	4086b03a 	or	r3,r8,r2
    573c:	18015226 	beq	r3,zero,5c88 <__subdf3+0x820>
    5740:	00c00434 	movhi	r3,16
    5744:	41400234 	orhi	r5,r8,8
    5748:	18ffffc4 	addi	r3,r3,-1
    574c:	28ca703a 	and	r5,r5,r3
    5750:	003f7e06 	br	554c <_gp+0xffff717c>
    5754:	10bfffc4 	addi	r2,r2,-1
    5758:	1000491e 	bne	r2,zero,5880 <__subdf3+0x418>
    575c:	898fc83a 	sub	r7,r17,r6
    5760:	89e3803a 	cmpltu	r17,r17,r7
    5764:	1947c83a 	sub	r3,r3,r5
    5768:	1c47c83a 	sub	r3,r3,r17
    576c:	3823883a 	mov	r17,r7
    5770:	003f9b06 	br	55e0 <_gp+0xffff7210>
    5774:	2988b03a 	or	r4,r5,r6
    5778:	203f5c26 	beq	r4,zero,54ec <_gp+0xffff711c>
    577c:	10bfffc4 	addi	r2,r2,-1
    5780:	1000931e 	bne	r2,zero,59d0 <__subdf3+0x568>
    5784:	898d883a 	add	r6,r17,r6
    5788:	3463803a 	cmpltu	r17,r6,r17
    578c:	1947883a 	add	r3,r3,r5
    5790:	88c7883a 	add	r3,r17,r3
    5794:	3023883a 	mov	r17,r6
    5798:	003fd306 	br	56e8 <_gp+0xffff7318>
    579c:	1000541e 	bne	r2,zero,58f0 <__subdf3+0x488>
    57a0:	80800044 	addi	r2,r16,1
    57a4:	1081ffcc 	andi	r2,r2,2047
    57a8:	01000044 	movi	r4,1
    57ac:	2080a20e 	bge	r4,r2,5a38 <__subdf3+0x5d0>
    57b0:	8989c83a 	sub	r4,r17,r6
    57b4:	8905803a 	cmpltu	r2,r17,r4
    57b8:	1967c83a 	sub	r19,r3,r5
    57bc:	98a7c83a 	sub	r19,r19,r2
    57c0:	9880202c 	andhi	r2,r19,128
    57c4:	10006326 	beq	r2,zero,5954 <__subdf3+0x4ec>
    57c8:	3463c83a 	sub	r17,r6,r17
    57cc:	28c7c83a 	sub	r3,r5,r3
    57d0:	344d803a 	cmpltu	r6,r6,r17
    57d4:	19a7c83a 	sub	r19,r3,r6
    57d8:	3825883a 	mov	r18,r7
    57dc:	983f861e 	bne	r19,zero,55f8 <_gp+0xffff7228>
    57e0:	8809883a 	mov	r4,r17
    57e4:	0005f680 	call	5f68 <__clzsi2>
    57e8:	10800804 	addi	r2,r2,32
    57ec:	113ffe04 	addi	r4,r2,-8
    57f0:	00c007c4 	movi	r3,31
    57f4:	193f850e 	bge	r3,r4,560c <_gp+0xffff723c>
    57f8:	10bff604 	addi	r2,r2,-40
    57fc:	8884983a 	sll	r2,r17,r2
    5800:	0023883a 	mov	r17,zero
    5804:	243f880e 	bge	r4,r16,5628 <_gp+0xffff7258>
    5808:	00ffe034 	movhi	r3,65408
    580c:	18ffffc4 	addi	r3,r3,-1
    5810:	8121c83a 	sub	r16,r16,r4
    5814:	10c6703a 	and	r3,r2,r3
    5818:	003f3406 	br	54ec <_gp+0xffff711c>
    581c:	9100004c 	andi	r4,r18,1
    5820:	000b883a 	mov	r5,zero
    5824:	0005883a 	mov	r2,zero
    5828:	003f4806 	br	554c <_gp+0xffff717c>
    582c:	298cb03a 	or	r6,r5,r6
    5830:	300cc03a 	cmpne	r6,r6,zero
    5834:	0005883a 	mov	r2,zero
    5838:	003f6406 	br	55cc <_gp+0xffff71fc>
    583c:	10009a1e 	bne	r2,zero,5aa8 <__subdf3+0x640>
    5840:	82400044 	addi	r9,r16,1
    5844:	4881ffcc 	andi	r2,r9,2047
    5848:	02800044 	movi	r10,1
    584c:	5080670e 	bge	r10,r2,59ec <__subdf3+0x584>
    5850:	0081ffc4 	movi	r2,2047
    5854:	4880af26 	beq	r9,r2,5b14 <__subdf3+0x6ac>
    5858:	898d883a 	add	r6,r17,r6
    585c:	1945883a 	add	r2,r3,r5
    5860:	3447803a 	cmpltu	r3,r6,r17
    5864:	1887883a 	add	r3,r3,r2
    5868:	182297fa 	slli	r17,r3,31
    586c:	300cd07a 	srli	r6,r6,1
    5870:	1806d07a 	srli	r3,r3,1
    5874:	4821883a 	mov	r16,r9
    5878:	89a2b03a 	or	r17,r17,r6
    587c:	003f1b06 	br	54ec <_gp+0xffff711c>
    5880:	0101ffc4 	movi	r4,2047
    5884:	813f441e 	bne	r16,r4,5598 <_gp+0xffff71c8>
    5888:	003f1806 	br	54ec <_gp+0xffff711c>
    588c:	843ff844 	addi	r16,r16,-31
    5890:	01400804 	movi	r5,32
    5894:	1408d83a 	srl	r4,r2,r16
    5898:	19405026 	beq	r3,r5,59dc <__subdf3+0x574>
    589c:	01401004 	movi	r5,64
    58a0:	28c7c83a 	sub	r3,r5,r3
    58a4:	10c4983a 	sll	r2,r2,r3
    58a8:	88a2b03a 	or	r17,r17,r2
    58ac:	8822c03a 	cmpne	r17,r17,zero
    58b0:	2462b03a 	or	r17,r4,r17
    58b4:	0007883a 	mov	r3,zero
    58b8:	0021883a 	mov	r16,zero
    58bc:	003f6d06 	br	5674 <_gp+0xffff72a4>
    58c0:	11fff804 	addi	r7,r2,-32
    58c4:	01000804 	movi	r4,32
    58c8:	29ced83a 	srl	r7,r5,r7
    58cc:	11004526 	beq	r2,r4,59e4 <__subdf3+0x57c>
    58d0:	01001004 	movi	r4,64
    58d4:	2089c83a 	sub	r4,r4,r2
    58d8:	2904983a 	sll	r2,r5,r4
    58dc:	118cb03a 	or	r6,r2,r6
    58e0:	300cc03a 	cmpne	r6,r6,zero
    58e4:	398cb03a 	or	r6,r7,r6
    58e8:	0005883a 	mov	r2,zero
    58ec:	003f3706 	br	55cc <_gp+0xffff71fc>
    58f0:	80002a26 	beq	r16,zero,599c <__subdf3+0x534>
    58f4:	0101ffc4 	movi	r4,2047
    58f8:	49006626 	beq	r9,r4,5a94 <__subdf3+0x62c>
    58fc:	0085c83a 	sub	r2,zero,r2
    5900:	18c02034 	orhi	r3,r3,128
    5904:	01000e04 	movi	r4,56
    5908:	20807e16 	blt	r4,r2,5b04 <__subdf3+0x69c>
    590c:	010007c4 	movi	r4,31
    5910:	2080e716 	blt	r4,r2,5cb0 <__subdf3+0x848>
    5914:	01000804 	movi	r4,32
    5918:	2089c83a 	sub	r4,r4,r2
    591c:	1914983a 	sll	r10,r3,r4
    5920:	8890d83a 	srl	r8,r17,r2
    5924:	8908983a 	sll	r4,r17,r4
    5928:	1884d83a 	srl	r2,r3,r2
    592c:	5222b03a 	or	r17,r10,r8
    5930:	2006c03a 	cmpne	r3,r4,zero
    5934:	88e2b03a 	or	r17,r17,r3
    5938:	3463c83a 	sub	r17,r6,r17
    593c:	2885c83a 	sub	r2,r5,r2
    5940:	344d803a 	cmpltu	r6,r6,r17
    5944:	1187c83a 	sub	r3,r2,r6
    5948:	4821883a 	mov	r16,r9
    594c:	3825883a 	mov	r18,r7
    5950:	003f2306 	br	55e0 <_gp+0xffff7210>
    5954:	24d0b03a 	or	r8,r4,r19
    5958:	40001b1e 	bne	r8,zero,59c8 <__subdf3+0x560>
    595c:	0005883a 	mov	r2,zero
    5960:	0009883a 	mov	r4,zero
    5964:	0021883a 	mov	r16,zero
    5968:	003f4906 	br	5690 <_gp+0xffff72c0>
    596c:	010007c4 	movi	r4,31
    5970:	20803a16 	blt	r4,r2,5a5c <__subdf3+0x5f4>
    5974:	01000804 	movi	r4,32
    5978:	2089c83a 	sub	r4,r4,r2
    597c:	2912983a 	sll	r9,r5,r4
    5980:	3090d83a 	srl	r8,r6,r2
    5984:	3108983a 	sll	r4,r6,r4
    5988:	2884d83a 	srl	r2,r5,r2
    598c:	4a12b03a 	or	r9,r9,r8
    5990:	2008c03a 	cmpne	r4,r4,zero
    5994:	4912b03a 	or	r9,r9,r4
    5998:	003f4e06 	br	56d4 <_gp+0xffff7304>
    599c:	1c48b03a 	or	r4,r3,r17
    59a0:	20003c26 	beq	r4,zero,5a94 <__subdf3+0x62c>
    59a4:	0084303a 	nor	r2,zero,r2
    59a8:	1000381e 	bne	r2,zero,5a8c <__subdf3+0x624>
    59ac:	3463c83a 	sub	r17,r6,r17
    59b0:	28c5c83a 	sub	r2,r5,r3
    59b4:	344d803a 	cmpltu	r6,r6,r17
    59b8:	1187c83a 	sub	r3,r2,r6
    59bc:	4821883a 	mov	r16,r9
    59c0:	3825883a 	mov	r18,r7
    59c4:	003f0606 	br	55e0 <_gp+0xffff7210>
    59c8:	2023883a 	mov	r17,r4
    59cc:	003f0906 	br	55f4 <_gp+0xffff7224>
    59d0:	0101ffc4 	movi	r4,2047
    59d4:	813f3a1e 	bne	r16,r4,56c0 <_gp+0xffff72f0>
    59d8:	003ec406 	br	54ec <_gp+0xffff711c>
    59dc:	0005883a 	mov	r2,zero
    59e0:	003fb106 	br	58a8 <_gp+0xffff74d8>
    59e4:	0005883a 	mov	r2,zero
    59e8:	003fbc06 	br	58dc <_gp+0xffff750c>
    59ec:	1c44b03a 	or	r2,r3,r17
    59f0:	80008e1e 	bne	r16,zero,5c2c <__subdf3+0x7c4>
    59f4:	1000c826 	beq	r2,zero,5d18 <__subdf3+0x8b0>
    59f8:	2984b03a 	or	r2,r5,r6
    59fc:	103ebb26 	beq	r2,zero,54ec <_gp+0xffff711c>
    5a00:	8989883a 	add	r4,r17,r6
    5a04:	1945883a 	add	r2,r3,r5
    5a08:	2447803a 	cmpltu	r3,r4,r17
    5a0c:	1887883a 	add	r3,r3,r2
    5a10:	1880202c 	andhi	r2,r3,128
    5a14:	2023883a 	mov	r17,r4
    5a18:	103f1626 	beq	r2,zero,5674 <_gp+0xffff72a4>
    5a1c:	00bfe034 	movhi	r2,65408
    5a20:	10bfffc4 	addi	r2,r2,-1
    5a24:	5021883a 	mov	r16,r10
    5a28:	1886703a 	and	r3,r3,r2
    5a2c:	003eaf06 	br	54ec <_gp+0xffff711c>
    5a30:	3825883a 	mov	r18,r7
    5a34:	003f0f06 	br	5674 <_gp+0xffff72a4>
    5a38:	1c44b03a 	or	r2,r3,r17
    5a3c:	8000251e 	bne	r16,zero,5ad4 <__subdf3+0x66c>
    5a40:	1000661e 	bne	r2,zero,5bdc <__subdf3+0x774>
    5a44:	2990b03a 	or	r8,r5,r6
    5a48:	40009626 	beq	r8,zero,5ca4 <__subdf3+0x83c>
    5a4c:	2807883a 	mov	r3,r5
    5a50:	3023883a 	mov	r17,r6
    5a54:	3825883a 	mov	r18,r7
    5a58:	003ea406 	br	54ec <_gp+0xffff711c>
    5a5c:	127ff804 	addi	r9,r2,-32
    5a60:	01000804 	movi	r4,32
    5a64:	2a52d83a 	srl	r9,r5,r9
    5a68:	11008c26 	beq	r2,r4,5c9c <__subdf3+0x834>
    5a6c:	01001004 	movi	r4,64
    5a70:	2085c83a 	sub	r2,r4,r2
    5a74:	2884983a 	sll	r2,r5,r2
    5a78:	118cb03a 	or	r6,r2,r6
    5a7c:	300cc03a 	cmpne	r6,r6,zero
    5a80:	4992b03a 	or	r9,r9,r6
    5a84:	0005883a 	mov	r2,zero
    5a88:	003f1206 	br	56d4 <_gp+0xffff7304>
    5a8c:	0101ffc4 	movi	r4,2047
    5a90:	493f9c1e 	bne	r9,r4,5904 <_gp+0xffff7534>
    5a94:	2807883a 	mov	r3,r5
    5a98:	3023883a 	mov	r17,r6
    5a9c:	4821883a 	mov	r16,r9
    5aa0:	3825883a 	mov	r18,r7
    5aa4:	003e9106 	br	54ec <_gp+0xffff711c>
    5aa8:	80001f1e 	bne	r16,zero,5b28 <__subdf3+0x6c0>
    5aac:	1c48b03a 	or	r4,r3,r17
    5ab0:	20005a26 	beq	r4,zero,5c1c <__subdf3+0x7b4>
    5ab4:	0084303a 	nor	r2,zero,r2
    5ab8:	1000561e 	bne	r2,zero,5c14 <__subdf3+0x7ac>
    5abc:	89a3883a 	add	r17,r17,r6
    5ac0:	1945883a 	add	r2,r3,r5
    5ac4:	898d803a 	cmpltu	r6,r17,r6
    5ac8:	3087883a 	add	r3,r6,r2
    5acc:	4821883a 	mov	r16,r9
    5ad0:	003f0506 	br	56e8 <_gp+0xffff7318>
    5ad4:	10002b1e 	bne	r2,zero,5b84 <__subdf3+0x71c>
    5ad8:	2984b03a 	or	r2,r5,r6
    5adc:	10008026 	beq	r2,zero,5ce0 <__subdf3+0x878>
    5ae0:	2807883a 	mov	r3,r5
    5ae4:	3023883a 	mov	r17,r6
    5ae8:	3825883a 	mov	r18,r7
    5aec:	0401ffc4 	movi	r16,2047
    5af0:	003e7e06 	br	54ec <_gp+0xffff711c>
    5af4:	3809883a 	mov	r4,r7
    5af8:	0011883a 	mov	r8,zero
    5afc:	0005883a 	mov	r2,zero
    5b00:	003ee306 	br	5690 <_gp+0xffff72c0>
    5b04:	1c62b03a 	or	r17,r3,r17
    5b08:	8822c03a 	cmpne	r17,r17,zero
    5b0c:	0005883a 	mov	r2,zero
    5b10:	003f8906 	br	5938 <_gp+0xffff7568>
    5b14:	3809883a 	mov	r4,r7
    5b18:	4821883a 	mov	r16,r9
    5b1c:	0011883a 	mov	r8,zero
    5b20:	0005883a 	mov	r2,zero
    5b24:	003eda06 	br	5690 <_gp+0xffff72c0>
    5b28:	0101ffc4 	movi	r4,2047
    5b2c:	49003b26 	beq	r9,r4,5c1c <__subdf3+0x7b4>
    5b30:	0085c83a 	sub	r2,zero,r2
    5b34:	18c02034 	orhi	r3,r3,128
    5b38:	01000e04 	movi	r4,56
    5b3c:	20806e16 	blt	r4,r2,5cf8 <__subdf3+0x890>
    5b40:	010007c4 	movi	r4,31
    5b44:	20807716 	blt	r4,r2,5d24 <__subdf3+0x8bc>
    5b48:	01000804 	movi	r4,32
    5b4c:	2089c83a 	sub	r4,r4,r2
    5b50:	1914983a 	sll	r10,r3,r4
    5b54:	8890d83a 	srl	r8,r17,r2
    5b58:	8908983a 	sll	r4,r17,r4
    5b5c:	1884d83a 	srl	r2,r3,r2
    5b60:	5222b03a 	or	r17,r10,r8
    5b64:	2006c03a 	cmpne	r3,r4,zero
    5b68:	88e2b03a 	or	r17,r17,r3
    5b6c:	89a3883a 	add	r17,r17,r6
    5b70:	1145883a 	add	r2,r2,r5
    5b74:	898d803a 	cmpltu	r6,r17,r6
    5b78:	3087883a 	add	r3,r6,r2
    5b7c:	4821883a 	mov	r16,r9
    5b80:	003ed906 	br	56e8 <_gp+0xffff7318>
    5b84:	2984b03a 	or	r2,r5,r6
    5b88:	10004226 	beq	r2,zero,5c94 <__subdf3+0x82c>
    5b8c:	1808d0fa 	srli	r4,r3,3
    5b90:	8822d0fa 	srli	r17,r17,3
    5b94:	1806977a 	slli	r3,r3,29
    5b98:	2080022c 	andhi	r2,r4,8
    5b9c:	1c62b03a 	or	r17,r3,r17
    5ba0:	10000826 	beq	r2,zero,5bc4 <__subdf3+0x75c>
    5ba4:	2812d0fa 	srli	r9,r5,3
    5ba8:	4880022c 	andhi	r2,r9,8
    5bac:	1000051e 	bne	r2,zero,5bc4 <__subdf3+0x75c>
    5bb0:	300cd0fa 	srli	r6,r6,3
    5bb4:	2804977a 	slli	r2,r5,29
    5bb8:	4809883a 	mov	r4,r9
    5bbc:	3825883a 	mov	r18,r7
    5bc0:	11a2b03a 	or	r17,r2,r6
    5bc4:	8806d77a 	srli	r3,r17,29
    5bc8:	200890fa 	slli	r4,r4,3
    5bcc:	882290fa 	slli	r17,r17,3
    5bd0:	0401ffc4 	movi	r16,2047
    5bd4:	1906b03a 	or	r3,r3,r4
    5bd8:	003e4406 	br	54ec <_gp+0xffff711c>
    5bdc:	2984b03a 	or	r2,r5,r6
    5be0:	103e4226 	beq	r2,zero,54ec <_gp+0xffff711c>
    5be4:	8989c83a 	sub	r4,r17,r6
    5be8:	8911803a 	cmpltu	r8,r17,r4
    5bec:	1945c83a 	sub	r2,r3,r5
    5bf0:	1205c83a 	sub	r2,r2,r8
    5bf4:	1200202c 	andhi	r8,r2,128
    5bf8:	403e9a26 	beq	r8,zero,5664 <_gp+0xffff7294>
    5bfc:	3463c83a 	sub	r17,r6,r17
    5c00:	28c5c83a 	sub	r2,r5,r3
    5c04:	344d803a 	cmpltu	r6,r6,r17
    5c08:	1187c83a 	sub	r3,r2,r6
    5c0c:	3825883a 	mov	r18,r7
    5c10:	003e3606 	br	54ec <_gp+0xffff711c>
    5c14:	0101ffc4 	movi	r4,2047
    5c18:	493fc71e 	bne	r9,r4,5b38 <_gp+0xffff7768>
    5c1c:	2807883a 	mov	r3,r5
    5c20:	3023883a 	mov	r17,r6
    5c24:	4821883a 	mov	r16,r9
    5c28:	003e3006 	br	54ec <_gp+0xffff711c>
    5c2c:	10003626 	beq	r2,zero,5d08 <__subdf3+0x8a0>
    5c30:	2984b03a 	or	r2,r5,r6
    5c34:	10001726 	beq	r2,zero,5c94 <__subdf3+0x82c>
    5c38:	1808d0fa 	srli	r4,r3,3
    5c3c:	8822d0fa 	srli	r17,r17,3
    5c40:	1806977a 	slli	r3,r3,29
    5c44:	2080022c 	andhi	r2,r4,8
    5c48:	1c62b03a 	or	r17,r3,r17
    5c4c:	10000726 	beq	r2,zero,5c6c <__subdf3+0x804>
    5c50:	2812d0fa 	srli	r9,r5,3
    5c54:	4880022c 	andhi	r2,r9,8
    5c58:	1000041e 	bne	r2,zero,5c6c <__subdf3+0x804>
    5c5c:	300cd0fa 	srli	r6,r6,3
    5c60:	2804977a 	slli	r2,r5,29
    5c64:	4809883a 	mov	r4,r9
    5c68:	11a2b03a 	or	r17,r2,r6
    5c6c:	8806d77a 	srli	r3,r17,29
    5c70:	200890fa 	slli	r4,r4,3
    5c74:	882290fa 	slli	r17,r17,3
    5c78:	3825883a 	mov	r18,r7
    5c7c:	1906b03a 	or	r3,r3,r4
    5c80:	0401ffc4 	movi	r16,2047
    5c84:	003e1906 	br	54ec <_gp+0xffff711c>
    5c88:	000b883a 	mov	r5,zero
    5c8c:	0005883a 	mov	r2,zero
    5c90:	003e2e06 	br	554c <_gp+0xffff717c>
    5c94:	0401ffc4 	movi	r16,2047
    5c98:	003e1406 	br	54ec <_gp+0xffff711c>
    5c9c:	0005883a 	mov	r2,zero
    5ca0:	003f7506 	br	5a78 <_gp+0xffff76a8>
    5ca4:	0005883a 	mov	r2,zero
    5ca8:	0009883a 	mov	r4,zero
    5cac:	003e7806 	br	5690 <_gp+0xffff72c0>
    5cb0:	123ff804 	addi	r8,r2,-32
    5cb4:	01000804 	movi	r4,32
    5cb8:	1a10d83a 	srl	r8,r3,r8
    5cbc:	11002526 	beq	r2,r4,5d54 <__subdf3+0x8ec>
    5cc0:	01001004 	movi	r4,64
    5cc4:	2085c83a 	sub	r2,r4,r2
    5cc8:	1884983a 	sll	r2,r3,r2
    5ccc:	1444b03a 	or	r2,r2,r17
    5cd0:	1004c03a 	cmpne	r2,r2,zero
    5cd4:	40a2b03a 	or	r17,r8,r2
    5cd8:	0005883a 	mov	r2,zero
    5cdc:	003f1606 	br	5938 <_gp+0xffff7568>
    5ce0:	02000434 	movhi	r8,16
    5ce4:	0009883a 	mov	r4,zero
    5ce8:	423fffc4 	addi	r8,r8,-1
    5cec:	00bfffc4 	movi	r2,-1
    5cf0:	0401ffc4 	movi	r16,2047
    5cf4:	003e6606 	br	5690 <_gp+0xffff72c0>
    5cf8:	1c62b03a 	or	r17,r3,r17
    5cfc:	8822c03a 	cmpne	r17,r17,zero
    5d00:	0005883a 	mov	r2,zero
    5d04:	003f9906 	br	5b6c <_gp+0xffff779c>
    5d08:	2807883a 	mov	r3,r5
    5d0c:	3023883a 	mov	r17,r6
    5d10:	0401ffc4 	movi	r16,2047
    5d14:	003df506 	br	54ec <_gp+0xffff711c>
    5d18:	2807883a 	mov	r3,r5
    5d1c:	3023883a 	mov	r17,r6
    5d20:	003df206 	br	54ec <_gp+0xffff711c>
    5d24:	123ff804 	addi	r8,r2,-32
    5d28:	01000804 	movi	r4,32
    5d2c:	1a10d83a 	srl	r8,r3,r8
    5d30:	11000a26 	beq	r2,r4,5d5c <__subdf3+0x8f4>
    5d34:	01001004 	movi	r4,64
    5d38:	2085c83a 	sub	r2,r4,r2
    5d3c:	1884983a 	sll	r2,r3,r2
    5d40:	1444b03a 	or	r2,r2,r17
    5d44:	1004c03a 	cmpne	r2,r2,zero
    5d48:	40a2b03a 	or	r17,r8,r2
    5d4c:	0005883a 	mov	r2,zero
    5d50:	003f8606 	br	5b6c <_gp+0xffff779c>
    5d54:	0005883a 	mov	r2,zero
    5d58:	003fdc06 	br	5ccc <_gp+0xffff78fc>
    5d5c:	0005883a 	mov	r2,zero
    5d60:	003ff706 	br	5d40 <_gp+0xffff7970>

00005d64 <__fixdfsi>:
    5d64:	280cd53a 	srli	r6,r5,20
    5d68:	00c00434 	movhi	r3,16
    5d6c:	18ffffc4 	addi	r3,r3,-1
    5d70:	3181ffcc 	andi	r6,r6,2047
    5d74:	01c0ff84 	movi	r7,1022
    5d78:	28c6703a 	and	r3,r5,r3
    5d7c:	280ad7fa 	srli	r5,r5,31
    5d80:	3980120e 	bge	r7,r6,5dcc <__fixdfsi+0x68>
    5d84:	00810744 	movi	r2,1053
    5d88:	11800c16 	blt	r2,r6,5dbc <__fixdfsi+0x58>
    5d8c:	00810cc4 	movi	r2,1075
    5d90:	1185c83a 	sub	r2,r2,r6
    5d94:	01c007c4 	movi	r7,31
    5d98:	18c00434 	orhi	r3,r3,16
    5d9c:	38800d16 	blt	r7,r2,5dd4 <__fixdfsi+0x70>
    5da0:	31befb44 	addi	r6,r6,-1043
    5da4:	2084d83a 	srl	r2,r4,r2
    5da8:	1986983a 	sll	r3,r3,r6
    5dac:	1884b03a 	or	r2,r3,r2
    5db0:	28000726 	beq	r5,zero,5dd0 <__fixdfsi+0x6c>
    5db4:	0085c83a 	sub	r2,zero,r2
    5db8:	f800283a 	ret
    5dbc:	00a00034 	movhi	r2,32768
    5dc0:	10bfffc4 	addi	r2,r2,-1
    5dc4:	2885883a 	add	r2,r5,r2
    5dc8:	f800283a 	ret
    5dcc:	0005883a 	mov	r2,zero
    5dd0:	f800283a 	ret
    5dd4:	008104c4 	movi	r2,1043
    5dd8:	1185c83a 	sub	r2,r2,r6
    5ddc:	1884d83a 	srl	r2,r3,r2
    5de0:	003ff306 	br	5db0 <_gp+0xffff79e0>

00005de4 <__floatsidf>:
    5de4:	defffd04 	addi	sp,sp,-12
    5de8:	dfc00215 	stw	ra,8(sp)
    5dec:	dc400115 	stw	r17,4(sp)
    5df0:	dc000015 	stw	r16,0(sp)
    5df4:	20002b26 	beq	r4,zero,5ea4 <__floatsidf+0xc0>
    5df8:	2023883a 	mov	r17,r4
    5dfc:	2020d7fa 	srli	r16,r4,31
    5e00:	20002d16 	blt	r4,zero,5eb8 <__floatsidf+0xd4>
    5e04:	8809883a 	mov	r4,r17
    5e08:	0005f680 	call	5f68 <__clzsi2>
    5e0c:	01410784 	movi	r5,1054
    5e10:	288bc83a 	sub	r5,r5,r2
    5e14:	01010cc4 	movi	r4,1075
    5e18:	2149c83a 	sub	r4,r4,r5
    5e1c:	00c007c4 	movi	r3,31
    5e20:	1900160e 	bge	r3,r4,5e7c <__floatsidf+0x98>
    5e24:	00c104c4 	movi	r3,1043
    5e28:	1947c83a 	sub	r3,r3,r5
    5e2c:	88c6983a 	sll	r3,r17,r3
    5e30:	00800434 	movhi	r2,16
    5e34:	10bfffc4 	addi	r2,r2,-1
    5e38:	1886703a 	and	r3,r3,r2
    5e3c:	2941ffcc 	andi	r5,r5,2047
    5e40:	800d883a 	mov	r6,r16
    5e44:	0005883a 	mov	r2,zero
    5e48:	280a953a 	slli	r5,r5,20
    5e4c:	31803fcc 	andi	r6,r6,255
    5e50:	01000434 	movhi	r4,16
    5e54:	300c97fa 	slli	r6,r6,31
    5e58:	213fffc4 	addi	r4,r4,-1
    5e5c:	1906703a 	and	r3,r3,r4
    5e60:	1946b03a 	or	r3,r3,r5
    5e64:	1986b03a 	or	r3,r3,r6
    5e68:	dfc00217 	ldw	ra,8(sp)
    5e6c:	dc400117 	ldw	r17,4(sp)
    5e70:	dc000017 	ldw	r16,0(sp)
    5e74:	dec00304 	addi	sp,sp,12
    5e78:	f800283a 	ret
    5e7c:	00c002c4 	movi	r3,11
    5e80:	1887c83a 	sub	r3,r3,r2
    5e84:	88c6d83a 	srl	r3,r17,r3
    5e88:	8904983a 	sll	r2,r17,r4
    5e8c:	01000434 	movhi	r4,16
    5e90:	213fffc4 	addi	r4,r4,-1
    5e94:	2941ffcc 	andi	r5,r5,2047
    5e98:	1906703a 	and	r3,r3,r4
    5e9c:	800d883a 	mov	r6,r16
    5ea0:	003fe906 	br	5e48 <_gp+0xffff7a78>
    5ea4:	000d883a 	mov	r6,zero
    5ea8:	000b883a 	mov	r5,zero
    5eac:	0007883a 	mov	r3,zero
    5eb0:	0005883a 	mov	r2,zero
    5eb4:	003fe406 	br	5e48 <_gp+0xffff7a78>
    5eb8:	0123c83a 	sub	r17,zero,r4
    5ebc:	003fd106 	br	5e04 <_gp+0xffff7a34>

00005ec0 <__floatunsidf>:
    5ec0:	defffe04 	addi	sp,sp,-8
    5ec4:	dc000015 	stw	r16,0(sp)
    5ec8:	dfc00115 	stw	ra,4(sp)
    5ecc:	2021883a 	mov	r16,r4
    5ed0:	20002226 	beq	r4,zero,5f5c <__floatunsidf+0x9c>
    5ed4:	0005f680 	call	5f68 <__clzsi2>
    5ed8:	01010784 	movi	r4,1054
    5edc:	2089c83a 	sub	r4,r4,r2
    5ee0:	01810cc4 	movi	r6,1075
    5ee4:	310dc83a 	sub	r6,r6,r4
    5ee8:	00c007c4 	movi	r3,31
    5eec:	1980120e 	bge	r3,r6,5f38 <__floatunsidf+0x78>
    5ef0:	00c104c4 	movi	r3,1043
    5ef4:	1907c83a 	sub	r3,r3,r4
    5ef8:	80ca983a 	sll	r5,r16,r3
    5efc:	00800434 	movhi	r2,16
    5f00:	10bfffc4 	addi	r2,r2,-1
    5f04:	2101ffcc 	andi	r4,r4,2047
    5f08:	0021883a 	mov	r16,zero
    5f0c:	288a703a 	and	r5,r5,r2
    5f10:	2008953a 	slli	r4,r4,20
    5f14:	00c00434 	movhi	r3,16
    5f18:	18ffffc4 	addi	r3,r3,-1
    5f1c:	28c6703a 	and	r3,r5,r3
    5f20:	8005883a 	mov	r2,r16
    5f24:	1906b03a 	or	r3,r3,r4
    5f28:	dfc00117 	ldw	ra,4(sp)
    5f2c:	dc000017 	ldw	r16,0(sp)
    5f30:	dec00204 	addi	sp,sp,8
    5f34:	f800283a 	ret
    5f38:	00c002c4 	movi	r3,11
    5f3c:	188bc83a 	sub	r5,r3,r2
    5f40:	814ad83a 	srl	r5,r16,r5
    5f44:	00c00434 	movhi	r3,16
    5f48:	18ffffc4 	addi	r3,r3,-1
    5f4c:	81a0983a 	sll	r16,r16,r6
    5f50:	2101ffcc 	andi	r4,r4,2047
    5f54:	28ca703a 	and	r5,r5,r3
    5f58:	003fed06 	br	5f10 <_gp+0xffff7b40>
    5f5c:	0009883a 	mov	r4,zero
    5f60:	000b883a 	mov	r5,zero
    5f64:	003fea06 	br	5f10 <_gp+0xffff7b40>

00005f68 <__clzsi2>:
    5f68:	00bfffd4 	movui	r2,65535
    5f6c:	11000536 	bltu	r2,r4,5f84 <__clzsi2+0x1c>
    5f70:	00803fc4 	movi	r2,255
    5f74:	11000f36 	bltu	r2,r4,5fb4 <__clzsi2+0x4c>
    5f78:	00800804 	movi	r2,32
    5f7c:	0007883a 	mov	r3,zero
    5f80:	00000506 	br	5f98 <__clzsi2+0x30>
    5f84:	00804034 	movhi	r2,256
    5f88:	10bfffc4 	addi	r2,r2,-1
    5f8c:	11000c2e 	bgeu	r2,r4,5fc0 <__clzsi2+0x58>
    5f90:	00800204 	movi	r2,8
    5f94:	00c00604 	movi	r3,24
    5f98:	20c8d83a 	srl	r4,r4,r3
    5f9c:	00c00034 	movhi	r3,0
    5fa0:	18d8b404 	addi	r3,r3,25296
    5fa4:	1909883a 	add	r4,r3,r4
    5fa8:	20c00003 	ldbu	r3,0(r4)
    5fac:	10c5c83a 	sub	r2,r2,r3
    5fb0:	f800283a 	ret
    5fb4:	00800604 	movi	r2,24
    5fb8:	00c00204 	movi	r3,8
    5fbc:	003ff606 	br	5f98 <_gp+0xffff7bc8>
    5fc0:	00800404 	movi	r2,16
    5fc4:	1007883a 	mov	r3,r2
    5fc8:	003ff306 	br	5f98 <_gp+0xffff7bc8>

00005fcc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5fcc:	deffff04 	addi	sp,sp,-4
    5fd0:	01000034 	movhi	r4,0
    5fd4:	01400034 	movhi	r5,0
    5fd8:	dfc00015 	stw	ra,0(sp)
    5fdc:	2118f404 	addi	r4,r4,25552
    5fe0:	2958f504 	addi	r5,r5,25556

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5fe4:	2140061e 	bne	r4,r5,6000 <alt_load+0x34>
    5fe8:	01000034 	movhi	r4,0
    5fec:	01400034 	movhi	r5,0
    5ff0:	21000804 	addi	r4,r4,32
    5ff4:	29400804 	addi	r5,r5,32
    5ff8:	2140121e 	bne	r4,r5,6044 <alt_load+0x78>
    5ffc:	00000b06 	br	602c <alt_load+0x60>
    6000:	00c00034 	movhi	r3,0
    6004:	18d8f504 	addi	r3,r3,25556
    6008:	1907c83a 	sub	r3,r3,r4
    600c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    6010:	10fff526 	beq	r2,r3,5fe8 <_gp+0xffff7c18>
    {
      *to++ = *from++;
    6014:	114f883a 	add	r7,r2,r5
    6018:	39c00017 	ldw	r7,0(r7)
    601c:	110d883a 	add	r6,r2,r4
    6020:	10800104 	addi	r2,r2,4
    6024:	31c00015 	stw	r7,0(r6)
    6028:	003ff906 	br	6010 <_gp+0xffff7c40>
    602c:	01000034 	movhi	r4,0
    6030:	01400034 	movhi	r5,0
    6034:	21188504 	addi	r4,r4,25108
    6038:	29588504 	addi	r5,r5,25108

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    603c:	2140101e 	bne	r4,r5,6080 <alt_load+0xb4>
    6040:	00000b06 	br	6070 <alt_load+0xa4>
    6044:	00c00034 	movhi	r3,0
    6048:	18c00804 	addi	r3,r3,32
    604c:	1907c83a 	sub	r3,r3,r4
    6050:	0005883a 	mov	r2,zero
  {
    while( to != end )
    6054:	10fff526 	beq	r2,r3,602c <_gp+0xffff7c5c>
    {
      *to++ = *from++;
    6058:	114f883a 	add	r7,r2,r5
    605c:	39c00017 	ldw	r7,0(r7)
    6060:	110d883a 	add	r6,r2,r4
    6064:	10800104 	addi	r2,r2,4
    6068:	31c00015 	stw	r7,0(r6)
    606c:	003ff906 	br	6054 <_gp+0xffff7c84>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    6070:	00062040 	call	6204 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    6074:	dfc00017 	ldw	ra,0(sp)
    6078:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    607c:	00062081 	jmpi	6208 <alt_icache_flush_all>
    6080:	00c00034 	movhi	r3,0
    6084:	18d8f404 	addi	r3,r3,25552
    6088:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    608c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    6090:	18bff726 	beq	r3,r2,6070 <_gp+0xffff7ca0>
    {
      *to++ = *from++;
    6094:	114f883a 	add	r7,r2,r5
    6098:	39c00017 	ldw	r7,0(r7)
    609c:	110d883a 	add	r6,r2,r4
    60a0:	10800104 	addi	r2,r2,4
    60a4:	31c00015 	stw	r7,0(r6)
    60a8:	003ff906 	br	6090 <_gp+0xffff7cc0>

000060ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    60ac:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    60b0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    60b4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    60b8:	00061240 	call	6124 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    60bc:	00061440 	call	6144 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    60c0:	d1a00217 	ldw	r6,-32760(gp)
    60c4:	d1600317 	ldw	r5,-32756(gp)
    60c8:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    60cc:	dfc00017 	ldw	ra,0(sp)
    60d0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    60d4:	00002301 	jmpi	230 <main>

000060d8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    60d8:	defffd04 	addi	sp,sp,-12
    60dc:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    60e0:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    60e4:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    60e8:	01000034 	movhi	r4,0
    60ec:	000f883a 	mov	r7,zero
    60f0:	01800044 	movi	r6,1
    60f4:	d80b883a 	mov	r5,sp
    60f8:	2118f404 	addi	r4,r4,25552
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    60fc:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    6100:	00061480 	call	6148 <altera_avalon_jtag_uart_write>
    6104:	00ffffc4 	movi	r3,-1
    6108:	10c00126 	beq	r2,r3,6110 <alt_putchar+0x38>
        return -1;
    }
    return c;
    610c:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    6110:	dfc00217 	ldw	ra,8(sp)
    6114:	dc000117 	ldw	r16,4(sp)
    6118:	dec00304 	addi	sp,sp,12
    611c:	f800283a 	ret

00006120 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    6120:	000617c1 	jmpi	617c <alt_busy_sleep>

00006124 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    6124:	deffff04 	addi	sp,sp,-4
    6128:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, nios);
    612c:	000620c0 	call	620c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    6130:	00800044 	movi	r2,1
    6134:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    6138:	dfc00017 	ldw	ra,0(sp)
    613c:	dec00104 	addi	sp,sp,4
    6140:	f800283a 	ret

00006144 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    6144:	f800283a 	ret

00006148 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    6148:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    614c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    6150:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    6154:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    6158:	2980072e 	bgeu	r5,r6,6178 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    615c:	38c00037 	ldwio	r3,0(r7)
    6160:	18ffffec 	andhi	r3,r3,65535
    6164:	183ffc26 	beq	r3,zero,6158 <_gp+0xffff7d88>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    6168:	28c00007 	ldb	r3,0(r5)
    616c:	20c00035 	stwio	r3,0(r4)
    6170:	29400044 	addi	r5,r5,1
    6174:	003ff806 	br	6158 <_gp+0xffff7d88>

  return count;
}
    6178:	f800283a 	ret

0000617c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    617c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    6180:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    6184:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    6188:	dc000015 	stw	r16,0(sp)
    618c:	dfc00115 	stw	ra,4(sp)
    6190:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    6194:	0002c5c0 	call	2c5c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    6198:	10001026 	beq	r2,zero,61dc <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    619c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    61a0:	013999b4 	movhi	r4,58982
    61a4:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    61a8:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    61ac:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    61b0:	297fffc4 	addi	r5,r5,-1
    61b4:	283ffe1e 	bne	r5,zero,61b0 <_gp+0xffff7de0>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    61b8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    61bc:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    61c0:	18bffb16 	blt	r3,r2,61b0 <_gp+0xffff7de0>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    61c4:	01400144 	movi	r5,5
    61c8:	8009883a 	mov	r4,r16
    61cc:	0002d180 	call	2d18 <__mulsi3>
    61d0:	10bfffc4 	addi	r2,r2,-1
    61d4:	103ffe1e 	bne	r2,zero,61d0 <_gp+0xffff7e00>
    61d8:	00000506 	br	61f0 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    61dc:	01400144 	movi	r5,5
    61e0:	8009883a 	mov	r4,r16
    61e4:	0002d180 	call	2d18 <__mulsi3>
    61e8:	10bfffc4 	addi	r2,r2,-1
    61ec:	00bffe16 	blt	zero,r2,61e8 <_gp+0xffff7e18>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    61f0:	0005883a 	mov	r2,zero
    61f4:	dfc00117 	ldw	ra,4(sp)
    61f8:	dc000017 	ldw	r16,0(sp)
    61fc:	dec00204 	addi	sp,sp,8
    6200:	f800283a 	ret

00006204 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    6204:	f800283a 	ret

00006208 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    6208:	f800283a 	ret

0000620c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    620c:	000170fa 	wrctl	ienable,zero
    6210:	f800283a 	ret
