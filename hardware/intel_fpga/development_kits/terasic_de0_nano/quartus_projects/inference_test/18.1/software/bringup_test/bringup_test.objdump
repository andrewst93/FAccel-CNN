
bringup_test.elf:     file format elf32-littlenios2
bringup_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x000093a4 memsz 0x000093a4 flags r-x
    LOAD off    0x0000a3a4 vaddr 0x000093a4 paddr 0x0000b4ac align 2**12
         filesz 0x00002108 memsz 0x00002108 flags rw-
    LOAD off    0x0000c5b4 vaddr 0x0000d5b4 paddr 0x0000d5b4 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x0000d000 vaddr 0x02002000 paddr 0x02002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02002000  02002000  0000d000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  02002020  02002020  0000d020  2**0
                  CONTENTS
  2 .text         0000911c  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000288  0000911c  0000911c  0000a11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002108  000093a4  0000b4ac  0000a3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0000d5b4  0000d5b4  0000c5b4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0000d5c0  0000d5c0  0000d020  2**0
                  CONTENTS
  7 .onchip_ram   00000000  02002020  02002020  0000d020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000d020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000006b8  00000000  00000000  0000d048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00009ba7  00000000  00000000  0000d700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000037a5  00000000  00000000  000172a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000462a  00000000  00000000  0001aa4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001074  00000000  00000000  0001f078  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002038  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000100a9  00000000  00000000  00022124  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000321d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001660  00000000  00000000  000321e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000353f6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000006  00000000  00000000  000353f9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000353ff  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00035400  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00035401  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0003540a  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00035413  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0003541c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000006f  00000000  00000000  00035426  2**0
                  CONTENTS, READONLY
 27 .jdi          00004b97  00000000  00000000  00035495  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000394a7  00000000  00000000  0003a02c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02002000 l    d  .entry	00000000 .entry
02002020 l    d  .exceptions	00000000 .exceptions
00000000 l    d  .text	00000000 .text
0000911c l    d  .rodata	00000000 .rodata
000093a4 l    d  .rwdata	00000000 .rwdata
0000d5b4 l    d  .bss	00000000 .bss
0000d5c0 l    d  .sdram	00000000 .sdram
02002020 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../bringup_test_bsp//obj/HAL/src/crt0.o
00000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 bringup_test.c
00000000 l    df *ABS*	00000000 printf.c
000016c4 l     F .text	00000010 _out_buffer
000016d4 l     F .text	00000004 _out_null
000016d8 l     F .text	00000114 _out_rev
000017ec l     F .text	0000019c _ntoa_format
00001988 l     F .text	00000174 _ntoa_long
00001afc l     F .text	000001a0 _ntoa_long_long
00001c9c l     F .text	00000018 _out_char
00001cb4 l     F .text	00000020 _out_fct
00001cd4 l     F .text	00000534 _ftoa
00002208 l     F .text	00000608 _etoa
00009244 l     O .rodata	00000050 pow10.1806
00002810 l     F .text	000008fc _vsnprintf
00000000 l    df *ABS*	00000000 wf_exp.c
00000000 l    df *ABS*	00000000 wf_log.c
00000000 l    df *ABS*	00000000 ef_exp.c
0000b48c l     O .rwdata	00000008 ln2HI
0000b484 l     O .rwdata	00000008 ln2LO
0000b494 l     O .rwdata	00000008 halF
00000000 l    df *ABS*	00000000 ef_log.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_fpclassify.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0000b3a4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008ed0 g     F .text	0000002c alt_main
00000054 g     F .text	00000008 f2bf
0000003c g     F .text	00000010 _putchar
0000b4ac g       *ABS*	00000000 __flash_rwdata_start
000074b8 g     F .text	00000088 .hidden __eqdf2
00001240 g     F .text	00000428 grey_to_text
00005068 g     F .text	00000440 .hidden __divsf3
000000b8 g     F .text	00000040 bf_gt
000031c0 g     F .text	00000030 vprintf_
000001dc g     F .text	0000009c show_featuremap
00005fb8 g     F .text	00000070 .hidden __fixsfsi
00007540 g     F .text	000000dc .hidden __gtdf2
0000b4a8 g     O .rwdata	00000004 jtag_uart
00009114 g     F .text	00000008 altera_nios2_gen2_irq_init
00008d98 g     F .text	00000010 __errno
02002000 g     F .entry	0000000c __reset
00000678 g     F .text	00000184 maxpool
00000c74 g     F .text	00000090 grey_to_feature
000033cc g     F .text	00000178 logf
00000000 g       *ABS*	00000000 __flash_exceptions_start
0000d5b8 g     O .bss	00000004 alt_argv
00013484 g       *ABS*	00000000 _gp
00005ad4 g     F .text	000004e4 .hidden __subsf3
00008da8 g     F .text	00000028 memcpy
000088f8 g     F .text	000000dc .hidden __floatsidf
0000761c g     F .text	000000f4 .hidden __ltdf2
000007fc g     F .text	00000090 global_average_pooling
00003874 g     F .text	00000498 __ieee754_logf
00004abc g     F .text	00000064 .hidden __udivsi3
0000314c g     F .text	0000003c sprintf_
000055dc g     F .text	000000c8 .hidden __lesf2
00003d90 g     F .text	00000074 .hidden __fixunsdfsi
00003d38 g     F .text	00000058 __fpclassifyf
00003d20 g     F .text	00000018 finitef
00000dec g     F .text	00000454 rgb565_to_text
00008a7c g     F .text	00000110 .hidden __extendsfdf2
0000623c g     F .text	000008ac .hidden __adddf3
000054a8 g     F .text	00000078 .hidden __nesf2
00004400 g     F .text	000005c4 .hidden __umoddi3
0000b49c g     O .rwdata	00000004 __fdlib_version
0000b4a0 g     O .rwdata	00000004 _global_impure_ptr
0000d5c0 g       *ABS*	00000000 __bss_end
000093a4 g     O .rwdata	00002000 image64by64
00003e04 g     F .text	000005fc .hidden __udivdi3
000089d4 g     F .text	000000a8 .hidden __floatunsidf
000031f0 g     F .text	00000030 vsnprintf_
00003544 g     F .text	00000330 __ieee754_expf
0000910c g     F .text	00000004 alt_dcache_flush_all
00008878 g     F .text	00000080 .hidden __fixdfsi
0000b4ac g       *ABS*	00000000 __ram_rwdata_end
00003220 g     F .text	00000040 fctprintf
00005520 g     F .text	000000bc .hidden __gtsf2
000000ac g     F .text	0000000c bf_neg
000093a4 g       *ABS*	00000000 __ram_rodata_end
0000761c g     F .text	000000f4 .hidden __ledf2
00004b20 g     F .text	00000058 .hidden __umodsi3
0000d5c0 g       *ABS*	00000000 end
000002cc g     F .text	000001a4 padding
02000000 g       *ABS*	00000000 __alt_stack_pointer
00008d34 g     F .text	00000064 .hidden __clzsi2
000090d8 g     F .text	00000034 altera_avalon_jtag_uart_write
00008efc g     F .text	00000170 alt_printf
00000084 g     F .text	00000028 bf_add
00000000 g     F .text	0000003c _start
000090d4 g     F .text	00000004 alt_sys_init
00006028 g     F .text	00000124 .hidden __floatsisf
00004b78 g     F .text	00000028 .hidden __mulsi3
000093a4 g       *ABS*	00000000 __ram_rwdata_start
0000911c g       *ABS*	00000000 __ram_rodata_start
0000005c g     F .text	00000028 bf_mult
000054a8 g     F .text	00000078 .hidden __eqsf2
00000138 g     F .text	00000058 put_pixel
0000d5c0 g       *ABS*	00000000 __alt_stack_base
00006ae8 g     F .text	000009d0 .hidden __divdf3
00007710 g     F .text	0000086c .hidden __muldf3
00000470 g     F .text	00000208 convolution
0000d5b4 g       *ABS*	00000000 __bss_start
00008dd0 g     F .text	00000020 memset
00001668 g     F .text	0000005c main
0000d5b4 g     O .bss	00000004 alt_envp
00000b54 g     F .text	00000120 rgb565_to_feature
000055dc g     F .text	000000c8 .hidden __ltsf2
00003d0c g     F .text	00000008 matherr
00008b8c g     F .text	000001a8 .hidden __truncdfsf2
00000278 g     F .text	00000054 relu
00000d04 g     F .text	000000e8 rgb_to_grey
000049c4 g     F .text	00000084 .hidden __divsi3
000056a4 g     F .text	00000430 .hidden __mulsf3
0000911c g       *ABS*	00000000 __flash_rodata_start
000074b8 g     F .text	00000088 .hidden __nedf2
000090b4 g     F .text	00000020 alt_irq_init
000092a4 g     O .rodata	00000100 .hidden __clz_tab
00005520 g     F .text	000000bc .hidden __gesf2
00003188 g     F .text	00000038 snprintf_
0000b4a4 g     O .rwdata	00000004 _impure_ptr
0000d5bc g     O .bss	00000004 alt_argc
00000190 g     F .text	0000004c get_pixel
00003d14 g     F .text	0000000c nan
02002020 g       *ABS*	00000000 __ram_exceptions_start
0000310c g     F .text	00000040 printf_
0000088c g     F .text	0000012c softmax
0000b4ac g       *ABS*	00000000 _edata
0000d5c0 g       *ABS*	00000000 _end
02002020 g       *ABS*	00000000 __ram_exceptions_end
0000004c g     F .text	00000008 bf2f
0000614c g     F .text	000000f0 .hidden __floatunsisf
000000f8 g     F .text	00000040 bf_lt
00004a48 g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000000 g       *ABS*	00000000 __alt_mem_sdram
02002000 g       *ABS*	00000000 __alt_mem_onchip_ram
0200200c g       .entry	00000000 _exit
00003260 g     F .text	0000016c expf
000009b8 g     F .text	0000019c scale
00007540 g     F .text	000000dc .hidden __gedf2
0000906c g     F .text	00000048 alt_putchar
00009110 g     F .text	00000004 alt_icache_flush_all
00007f7c g     F .text	000008fc .hidden __subdf3
00004ba0 g     F .text	000004c8 .hidden __addsf3
00008df0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

02002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2002000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 2002004:	08400014 	ori	at,at,0
    jmp r1
 2002008:	0800683a 	jmp	at

0200200c <_exit>:
	...

Disassembly of section .text:

00000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
       0:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
       4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
       8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
       c:	d68d2114 	ori	gp,gp,13444
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      10:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      14:	10b56d14 	ori	r2,r2,54708

    movhi r3, %hi(__bss_end)
      18:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      1c:	18f57014 	ori	r3,r3,54720

    beq r2, r3, 1f
      20:	10c00326 	beq	r2,r3,30 <_start+0x30>

0:
    stw zero, (r2)
      24:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      28:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      2c:	10fffd36 	bltu	r2,r3,24 <__ram_exceptions_end+0xfdffe004>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      30:	0008df00 	call	8df0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      34:	0008ed00 	call	8ed0 <alt_main>

00000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      38:	003fff06 	br	38 <__ram_exceptions_end+0xfdffe018>

0000003c <_putchar>:
typedef alt_u16 bfloat16;

//////////////////////////////////////////////////////////////////////////////
void _putchar(char character)
{
	alt_putchar((int)character);	// printf_ character output
      3c:	21003fcc 	andi	r4,r4,255
      40:	2100201c 	xori	r4,r4,128
      44:	213fe004 	addi	r4,r4,-128
      48:	000906c1 	jmpi	906c <alt_putchar>

0000004c <bf2f>:
//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     return f.f;
}
      4c:	2004943a 	slli	r2,r4,16
      50:	f800283a 	ret

00000054 <f2bf>:
//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
}
      54:	2004d43a 	srli	r2,r4,16
      58:	f800283a 	ret

0000005c <bf_mult>:
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
      5c:	2804943a 	slli	r2,r5,16

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      60:	200a943a 	slli	r5,r4,16
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
      64:	deffff04 	addi	sp,sp,-4

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      68:	1009883a 	mov	r4,r2
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
      6c:	dfc00015 	stw	ra,0(sp)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      70:	00056a40 	call	56a4 <__mulsf3>
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}
      74:	1004d43a 	srli	r2,r2,16
      78:	dfc00017 	ldw	ra,0(sp)
      7c:	dec00104 	addi	sp,sp,4
      80:	f800283a 	ret

00000084 <bf_add>:
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
      84:	2804943a 	slli	r2,r5,16

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      88:	200a943a 	slli	r5,r4,16
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_add(bfloat16 a, bfloat16 b) {
      8c:	deffff04 	addi	sp,sp,-4

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      90:	1009883a 	mov	r4,r2
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_add(bfloat16 a, bfloat16 b) {
      94:	dfc00015 	stw	ra,0(sp)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      98:	0004ba00 	call	4ba0 <__addsf3>
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_add(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) + bf2f(b));
}
      9c:	1004d43a 	srli	r2,r2,16
      a0:	dfc00017 	ldw	ra,0(sp)
      a4:	dec00104 	addi	sp,sp,4
      a8:	f800283a 	ret

000000ac <bf_neg>:

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      ac:	213fffcc 	andi	r4,r4,65535
     return f2bf(bf2f(a) + bf2f(b));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_neg(bfloat16 a) {
     return f2bf(-bf2f(a));
      b0:	20a0001c 	xori	r2,r4,32768
}
      b4:	f800283a 	ret

000000b8 <bf_gt>:
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
      b8:	2804943a 	slli	r2,r5,16
     return f2bf(-bf2f(a));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
     return bf2f(a) > bf2f(b);
      bc:	200a943a 	slli	r5,r4,16
bfloat16 bf_neg(bfloat16 a) {
     return f2bf(-bf2f(a));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
      c0:	defffe04 	addi	sp,sp,-8
     return bf2f(a) > bf2f(b);
      c4:	1009883a 	mov	r4,r2
bfloat16 bf_neg(bfloat16 a) {
     return f2bf(-bf2f(a));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
      c8:	dfc00115 	stw	ra,4(sp)
      cc:	dc000015 	stw	r16,0(sp)
     return bf2f(a) > bf2f(b);
      d0:	00055dc0 	call	55dc <__lesf2>
      d4:	10000216 	blt	r2,zero,e0 <bf_gt+0x28>
      d8:	0021883a 	mov	r16,zero
      dc:	00000106 	br	e4 <bf_gt+0x2c>
      e0:	04000044 	movi	r16,1
}
      e4:	8005883a 	mov	r2,r16
      e8:	dfc00117 	ldw	ra,4(sp)
      ec:	dc000017 	ldw	r16,0(sp)
      f0:	dec00204 	addi	sp,sp,8
      f4:	f800283a 	ret

000000f8 <bf_lt>:
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
      f8:	2804943a 	slli	r2,r5,16
     return bf2f(a) > bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     return bf2f(a) < bf2f(b);
      fc:	200a943a 	slli	r5,r4,16
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
     return bf2f(a) > bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     100:	defffe04 	addi	sp,sp,-8
     return bf2f(a) < bf2f(b);
     104:	1009883a 	mov	r4,r2
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
     return bf2f(a) > bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     108:	dfc00115 	stw	ra,4(sp)
     10c:	dc000015 	stw	r16,0(sp)
     return bf2f(a) < bf2f(b);
     110:	00055200 	call	5520 <__gesf2>
     114:	00800216 	blt	zero,r2,120 <bf_lt+0x28>
     118:	0021883a 	mov	r16,zero
     11c:	00000106 	br	124 <bf_lt+0x2c>
     120:	04000044 	movi	r16,1
}
     124:	8005883a 	mov	r2,r16
     128:	dfc00117 	ldw	ra,4(sp)
     12c:	dc000017 	ldw	r16,0(sp)
     130:	dec00204 	addi	sp,sp,8
     134:	f800283a 	ret

00000138 <put_pixel>:

//////////////////////////////////////////////////////////////////////////////
void put_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y, alt_u16 data) {
     138:	defffc04 	addi	sp,sp,-16
     13c:	dc800215 	stw	r18,8(sp)
     140:	dc000015 	stw	r16,0(sp)
     144:	2025883a 	mov	r18,r4
     148:	3021883a 	mov	r16,r6
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
     14c:	297fffcc 	andi	r5,r5,65535
     150:	393fffcc 	andi	r4,r7,65535
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     return bf2f(a) < bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
void put_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y, alt_u16 data) {
     154:	dc400115 	stw	r17,4(sp)
     158:	dfc00315 	stw	ra,12(sp)
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
     15c:	843fffcc 	andi	r16,r16,65535
     160:	0004b780 	call	4b78 <__mulsi3>
     164:	1405883a 	add	r2,r2,r16
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     return bf2f(a) < bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
void put_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y, alt_u16 data) {
     168:	dc400417 	ldw	r17,16(sp)
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
     16c:	1085883a 	add	r2,r2,r2
     170:	9085883a 	add	r2,r18,r2
     174:	1440002d 	sthio	r17,0(r2)
}
     178:	dfc00317 	ldw	ra,12(sp)
     17c:	dc800217 	ldw	r18,8(sp)
     180:	dc400117 	ldw	r17,4(sp)
     184:	dc000017 	ldw	r16,0(sp)
     188:	dec00404 	addi	sp,sp,16
     18c:	f800283a 	ret

00000190 <get_pixel>:

//////////////////////////////////////////////////////////////////////////////
alt_u16 get_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y) {
     190:	defffd04 	addi	sp,sp,-12
     194:	dc400115 	stw	r17,4(sp)
     198:	dc000015 	stw	r16,0(sp)
     19c:	2023883a 	mov	r17,r4
     1a0:	3021883a 	mov	r16,r6
	return IORD_16DIRECT(base, (x + (y * res)) << 1);
     1a4:	297fffcc 	andi	r5,r5,65535
     1a8:	393fffcc 	andi	r4,r7,65535
void put_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y, alt_u16 data) {
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
}

//////////////////////////////////////////////////////////////////////////////
alt_u16 get_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y) {
     1ac:	dfc00215 	stw	ra,8(sp)
	return IORD_16DIRECT(base, (x + (y * res)) << 1);
     1b0:	843fffcc 	andi	r16,r16,65535
     1b4:	0004b780 	call	4b78 <__mulsi3>
     1b8:	1405883a 	add	r2,r2,r16
     1bc:	1085883a 	add	r2,r2,r2
     1c0:	8885883a 	add	r2,r17,r2
}
     1c4:	1080002b 	ldhuio	r2,0(r2)
     1c8:	dfc00217 	ldw	ra,8(sp)
     1cc:	dc400117 	ldw	r17,4(sp)
     1d0:	dc000017 	ldw	r16,0(sp)
     1d4:	dec00304 	addi	sp,sp,12
     1d8:	f800283a 	ret

000001dc <show_featuremap>:

//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
     1dc:	defffa04 	addi	sp,sp,-24
     1e0:	dd000415 	stw	r20,16(sp)
     1e4:	dc800215 	stw	r18,8(sp)
     1e8:	dc400115 	stw	r17,4(sp)
     1ec:	dfc00515 	stw	ra,20(sp)
     1f0:	dcc00315 	stw	r19,12(sp)
     1f4:	dc000015 	stw	r16,0(sp)
     1f8:	2029883a 	mov	r20,r4
	alt_u32 x, y;
	for (y=0; y<res; y++) {
     1fc:	0023883a 	mov	r17,zero
     200:	2cbfffcc 	andi	r18,r5,65535
     204:	8c80142e 	bgeu	r17,r18,258 <show_featuremap+0x7c>
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
}

//////////////////////////////////////////////////////////////////////////////
alt_u16 get_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y) {
	return IORD_16DIRECT(base, (x + (y * res)) << 1);
     208:	900b883a 	mov	r5,r18
     20c:	8809883a 	mov	r4,r17
     210:	0004b780 	call	4b78 <__mulsi3>
     214:	1027883a 	mov	r19,r2
     218:	0021883a 	mov	r16,zero
     21c:	84c7883a 	add	r3,r16,r19
     220:	18c7883a 	add	r3,r3,r3
     224:	a0c7883a 	add	r3,r20,r3
     228:	1940002b 	ldhuio	r5,0(r3)
//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
	alt_u32 x, y;
	for (y=0; y<res; y++) {
		for (x=0; x<res; x++) {
			alt_printf("%x ", get_pixel(base, res, x, y));
     22c:	01000074 	movhi	r4,1
     230:	297fffcc 	andi	r5,r5,65535
     234:	21244704 	addi	r4,r4,-28388

//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
	alt_u32 x, y;
	for (y=0; y<res; y++) {
		for (x=0; x<res; x++) {
     238:	84000044 	addi	r16,r16,1
			alt_printf("%x ", get_pixel(base, res, x, y));
     23c:	0008efc0 	call	8efc <alt_printf>

//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
	alt_u32 x, y;
	for (y=0; y<res; y++) {
		for (x=0; x<res; x++) {
     240:	84bff636 	bltu	r16,r18,21c <__ram_exceptions_end+0xfdffe1fc>
			alt_printf("%x ", get_pixel(base, res, x, y));
		}
		alt_printf("\n");
     244:	01000074 	movhi	r4,1
     248:	21244804 	addi	r4,r4,-28384
     24c:	0008efc0 	call	8efc <alt_printf>
}

//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
	alt_u32 x, y;
	for (y=0; y<res; y++) {
     250:	8c400044 	addi	r17,r17,1
     254:	003feb06 	br	204 <__ram_exceptions_end+0xfdffe1e4>
		for (x=0; x<res; x++) {
			alt_printf("%x ", get_pixel(base, res, x, y));
		}
		alt_printf("\n");
	}
}
     258:	dfc00517 	ldw	ra,20(sp)
     25c:	dd000417 	ldw	r20,16(sp)
     260:	dcc00317 	ldw	r19,12(sp)
     264:	dc800217 	ldw	r18,8(sp)
     268:	dc400117 	ldw	r17,4(sp)
     26c:	dc000017 	ldw	r16,0(sp)
     270:	dec00604 	addi	sp,sp,24
     274:	f800283a 	ret

00000278 <relu>:

//////////////////////////////////////////////////////////////////////////////
void relu (alt_u16* featuremap, alt_u16 res) {
     278:	defffe04 	addi	sp,sp,-8
	alt_u32 x, i;

	x = res * res;
     27c:	297fffcc 	andi	r5,r5,65535
		alt_printf("\n");
	}
}

//////////////////////////////////////////////////////////////////////////////
void relu (alt_u16* featuremap, alt_u16 res) {
     280:	dc000015 	stw	r16,0(sp)
     284:	2021883a 	mov	r16,r4
	alt_u32 x, i;

	x = res * res;
     288:	2809883a 	mov	r4,r5
		alt_printf("\n");
	}
}

//////////////////////////////////////////////////////////////////////////////
void relu (alt_u16* featuremap, alt_u16 res) {
     28c:	dfc00115 	stw	ra,4(sp)
	alt_u32 x, i;

	x = res * res;
     290:	0004b780 	call	4b78 <__mulsi3>
	for (i=0; i<x; i++) {
     294:	0007883a 	mov	r3,zero
     298:	18800826 	beq	r3,r2,2bc <relu+0x44>
		if (IORD_16DIRECT(featuremap, (i << 1)) & 0x8000) { // test sign bit
     29c:	18c9883a 	add	r4,r3,r3
     2a0:	8109883a 	add	r4,r16,r4
     2a4:	2140002b 	ldhuio	r5,0(r4)
     2a8:	2960000c 	andi	r5,r5,32768
     2ac:	28000126 	beq	r5,zero,2b4 <relu+0x3c>
			IOWR_16DIRECT(featuremap, (i << 1), 0x0);
     2b0:	2000002d 	sthio	zero,0(r4)
//////////////////////////////////////////////////////////////////////////////
void relu (alt_u16* featuremap, alt_u16 res) {
	alt_u32 x, i;

	x = res * res;
	for (i=0; i<x; i++) {
     2b4:	18c00044 	addi	r3,r3,1
     2b8:	003ff706 	br	298 <__ram_exceptions_end+0xfdffe278>
		if (IORD_16DIRECT(featuremap, (i << 1)) & 0x8000) { // test sign bit
			IOWR_16DIRECT(featuremap, (i << 1), 0x0);
		}
	}
}
     2bc:	dfc00117 	ldw	ra,4(sp)
     2c0:	dc000017 	ldw	r16,0(sp)
     2c4:	dec00204 	addi	sp,sp,8
     2c8:	f800283a 	ret

000002cc <padding>:

//////////////////////////////////////////////////////////////////////////////
void padding (alt_u16* src_map, alt_u16* dst_map, alt_u16 res, alt_u16 pad) {
     2cc:	defff704 	addi	sp,sp,-36
     2d0:	dc000015 	stw	r16,0(sp)
	alt_u32 src, dst;

	dst = 0;
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
		for (i=0; i<(res + (pad << 1)); i++) {
     2d4:	3c3fffcc 	andi	r16,r7,65535
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void padding (alt_u16* src_map, alt_u16* dst_map, alt_u16 res, alt_u16 pad) {
     2d8:	dc800215 	stw	r18,8(sp)
	alt_u32 src, dst;

	dst = 0;
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
		for (i=0; i<(res + (pad << 1)); i++) {
     2dc:	8421883a 	add	r16,r16,r16
     2e0:	34bfffcc 	andi	r18,r6,65535
     2e4:	84a1883a 	add	r16,r16,r18
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void padding (alt_u16* src_map, alt_u16* dst_map, alt_u16 res, alt_u16 pad) {
     2e8:	dd800615 	stw	r22,24(sp)
     2ec:	dd400515 	stw	r21,20(sp)
     2f0:	dd000415 	stw	r20,16(sp)
     2f4:	dc400115 	stw	r17,4(sp)
     2f8:	202d883a 	mov	r22,r4
     2fc:	282b883a 	mov	r21,r5
     300:	dfc00815 	stw	ra,32(sp)
     304:	ddc00715 	stw	r23,28(sp)
     308:	dcc00315 	stw	r19,12(sp)
     30c:	8429883a 	add	r20,r16,r16
	alt_u32 i, j, pixel;
	alt_u32 src, dst;

	dst = 0;
     310:	000b883a 	mov	r5,zero
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
     314:	0009883a 	mov	r4,zero
     318:	3c7fffcc 	andi	r17,r7,65535
     31c:	24400b2e 	bgeu	r4,r17,34c <padding+0x80>
     320:	0005883a 	mov	r2,zero
		for (i=0; i<(res + (pad << 1)); i++) {
     324:	14000626 	beq	r2,r16,340 <padding+0x74>
			IOWR_16DIRECT(dst_map, (dst), 0);
     328:	1087883a 	add	r3,r2,r2
     32c:	1947883a 	add	r3,r3,r5
     330:	a8c7883a 	add	r3,r21,r3
     334:	1800002d 	sthio	zero,0(r3)
	alt_u32 src, dst;

	dst = 0;
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
		for (i=0; i<(res + (pad << 1)); i++) {
     338:	10800044 	addi	r2,r2,1
     33c:	003ff906 	br	324 <__ram_exceptions_end+0xfdffe304>
     340:	2d0b883a 	add	r5,r5,r20
	alt_u32 i, j, pixel;
	alt_u32 src, dst;

	dst = 0;
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
     344:	21000044 	addi	r4,r4,1
     348:	003ff406 	br	31c <__ram_exceptions_end+0xfdffe2fc>
     34c:	8c6f883a 	add	r23,r17,r17
     350:	b80b883a 	mov	r5,r23
     354:	8009883a 	mov	r4,r16
     358:	0004b780 	call	4b78 <__mulsi3>
     35c:	1027883a 	mov	r19,r2
     360:	8c85883a 	add	r2,r17,r18
     364:	1085883a 	add	r2,r2,r2
     368:	95cf883a 	add	r7,r18,r23
     36c:	948b883a 	add	r5,r18,r18
     370:	39cf883a 	add	r7,r7,r7
     374:	980d883a 	mov	r6,r19
     378:	0013883a 	mov	r9,zero
     37c:	0011883a 	mov	r8,zero
     380:	113fff84 	addi	r4,r2,-2
		for (i=0; i<(res + (pad << 1)); i++) {
			IOWR_16DIRECT(dst_map, (dst), 0);
			dst += 2;
		}
	}
	for (j=0; j<res; j++) {
     384:	44801f2e 	bgeu	r8,r18,404 <padding+0x138>
     388:	0005883a 	mov	r2,zero
		for (i=0; i<pad; i++) {
     38c:	1440062e 	bgeu	r2,r17,3a8 <padding+0xdc>
			IOWR_16DIRECT(dst_map, (dst), 0); // pad LHS
     390:	1087883a 	add	r3,r2,r2
     394:	1987883a 	add	r3,r3,r6
     398:	a8c7883a 	add	r3,r21,r3
     39c:	1800002d 	sthio	zero,0(r3)
			IOWR_16DIRECT(dst_map, (dst), 0);
			dst += 2;
		}
	}
	for (j=0; j<res; j++) {
		for (i=0; i<pad; i++) {
     3a0:	10800044 	addi	r2,r2,1
     3a4:	003ff906 	br	38c <__ram_exceptions_end+0xfdffe36c>
     3a8:	35d7883a 	add	r11,r6,r23
     3ac:	0007883a 	mov	r3,zero
     3b0:	18c5883a 	add	r2,r3,r3
			IOWR_16DIRECT(dst_map, (dst), 0); // pad LHS
			dst += 2;
		}
		for (i=0; i<res; i++) {
			pixel = IORD_16DIRECT(src_map, src);
     3b4:	4895883a 	add	r10,r9,r2
     3b8:	b295883a 	add	r10,r22,r10
     3bc:	5280002b 	ldhuio	r10,0(r10)
			src += 2;
			IOWR_16DIRECT(dst_map, (dst), pixel);
     3c0:	12c5883a 	add	r2,r2,r11
     3c4:	a885883a 	add	r2,r21,r2
     3c8:	1280002d 	sthio	r10,0(r2)
	for (j=0; j<res; j++) {
		for (i=0; i<pad; i++) {
			IOWR_16DIRECT(dst_map, (dst), 0); // pad LHS
			dst += 2;
		}
		for (i=0; i<res; i++) {
     3cc:	18c00044 	addi	r3,r3,1
     3d0:	1cbff736 	bltu	r3,r18,3b0 <__ram_exceptions_end+0xfdffe390>
     3d4:	2185883a 	add	r2,r4,r6
     3d8:	4953883a 	add	r9,r9,r5
     3dc:	a885883a 	add	r2,r21,r2
     3e0:	0007883a 	mov	r3,zero
     3e4:	10800084 	addi	r2,r2,2
			pixel = IORD_16DIRECT(src_map, src);
			src += 2;
			IOWR_16DIRECT(dst_map, (dst), pixel);
			dst += 2;
		}
		for (i=0; i<pad; i++) {
     3e8:	1c40032e 	bgeu	r3,r17,3f8 <padding+0x12c>
			IOWR_16DIRECT(dst_map, (dst), 0); // pad RHS
     3ec:	1000002d 	sthio	zero,0(r2)
			pixel = IORD_16DIRECT(src_map, src);
			src += 2;
			IOWR_16DIRECT(dst_map, (dst), pixel);
			dst += 2;
		}
		for (i=0; i<pad; i++) {
     3f0:	18c00044 	addi	r3,r3,1
     3f4:	003ffb06 	br	3e4 <__ram_exceptions_end+0xfdffe3c4>
     3f8:	31cd883a 	add	r6,r6,r7
		for (i=0; i<(res + (pad << 1)); i++) {
			IOWR_16DIRECT(dst_map, (dst), 0);
			dst += 2;
		}
	}
	for (j=0; j<res; j++) {
     3fc:	42000044 	addi	r8,r8,1
     400:	003fe006 	br	384 <__ram_exceptions_end+0xfdffe364>
     404:	bc89883a 	add	r4,r23,r18
     408:	0004b780 	call	4b78 <__mulsi3>
     40c:	14c5883a 	add	r2,r2,r19
     410:	000b883a 	mov	r5,zero
		for (i=0; i<pad; i++) {
			IOWR_16DIRECT(dst_map, (dst), 0); // pad RHS
			dst += 2;
		}
	}
	for (j=0; j<pad; j++) {	// pad BOTTOM pixels
     414:	2c400b2e 	bgeu	r5,r17,444 <padding+0x178>
     418:	0007883a 	mov	r3,zero
		for (i=0; i<(res + (pad << 1)); i++) {
     41c:	1c000626 	beq	r3,r16,438 <padding+0x16c>
			IOWR_16DIRECT(dst_map, (dst), 0);
     420:	18c9883a 	add	r4,r3,r3
     424:	2089883a 	add	r4,r4,r2
     428:	a909883a 	add	r4,r21,r4
     42c:	2000002d 	sthio	zero,0(r4)
			IOWR_16DIRECT(dst_map, (dst), 0); // pad RHS
			dst += 2;
		}
	}
	for (j=0; j<pad; j++) {	// pad BOTTOM pixels
		for (i=0; i<(res + (pad << 1)); i++) {
     430:	18c00044 	addi	r3,r3,1
     434:	003ff906 	br	41c <__ram_exceptions_end+0xfdffe3fc>
     438:	1505883a 	add	r2,r2,r20
		for (i=0; i<pad; i++) {
			IOWR_16DIRECT(dst_map, (dst), 0); // pad RHS
			dst += 2;
		}
	}
	for (j=0; j<pad; j++) {	// pad BOTTOM pixels
     43c:	29400044 	addi	r5,r5,1
     440:	003ff406 	br	414 <__ram_exceptions_end+0xfdffe3f4>
		for (i=0; i<(res + (pad << 1)); i++) {
			IOWR_16DIRECT(dst_map, (dst), 0);
			dst += 2;
		}
	}
}
     444:	dfc00817 	ldw	ra,32(sp)
     448:	ddc00717 	ldw	r23,28(sp)
     44c:	dd800617 	ldw	r22,24(sp)
     450:	dd400517 	ldw	r21,20(sp)
     454:	dd000417 	ldw	r20,16(sp)
     458:	dcc00317 	ldw	r19,12(sp)
     45c:	dc800217 	ldw	r18,8(sp)
     460:	dc400117 	ldw	r17,4(sp)
     464:	dc000017 	ldw	r16,0(sp)
     468:	dec00904 	addi	sp,sp,36
     46c:	f800283a 	ret

00000470 <convolution>:

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl,
		alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     470:	deffe704 	addi	sp,sp,-100
     474:	d8801917 	ldw	r2,100(sp)
     478:	df001715 	stw	fp,92(sp)
     47c:	2839883a 	mov	fp,r5
	alt_16 x, y, ks;
	alt_32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
     480:	117fffcc 	andi	r5,r2,65535
	}
}

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl,
		alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     484:	dc401015 	stw	r17,64(sp)
	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
     488:	2822d07a 	srli	r17,r5,1
	}
}

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl,
		alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     48c:	dcc01215 	stw	r19,72(sp)
     490:	d9000215 	stw	r4,8(sp)
	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
     494:	0467c83a 	sub	r19,zero,r17
	}
}

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl,
		alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     498:	d9c00315 	stw	r7,12(sp)
     49c:	9809883a 	mov	r4,r19
     4a0:	100f883a 	mov	r7,r2
     4a4:	ddc01615 	stw	r23,88(sp)
     4a8:	dd801515 	stw	r22,84(sp)
     4ac:	dd401415 	stw	r21,80(sp)
     4b0:	dd001315 	stw	r20,76(sp)
     4b4:	dc801115 	stw	r18,68(sp)
     4b8:	dc000f15 	stw	r16,60(sp)
     4bc:	d9c00615 	stw	r7,24(sp)
     4c0:	dfc01815 	stw	ra,96(sp)
     4c4:	302b883a 	mov	r21,r6
     4c8:	0004b780 	call	4b78 <__mulsi3>
     4cc:	dc001b17 	ldw	r16,108(sp)
     4d0:	dc801a0b 	ldhu	r18,104(sp)
     4d4:	d9c00617 	ldw	r7,24(sp)
     4d8:	dd801c0b 	ldhu	r22,112(sp)
	alt_32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     4dc:	95ffffcc 	andi	r23,r18,65535
     4e0:	39ffffcc 	andi	r7,r7,65535
     4e4:	84bfffcc 	andi	r18,r16,65535
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
					sum = bf_add(sum, bf_mult(src_pix, k_pix)); // sum of products
				}
			}
			if (clr == 0)
     4e8:	e73fffcc 	andi	fp,fp,65535
	alt_32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     4ec:	8029883a 	mov	r20,r16
     4f0:	d8800115 	stw	r2,4(sp)
	alt_16 x, y, ks;
	alt_32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
     4f4:	000b883a 	mov	r5,zero
	for (y=pad; y<(res + pad); y=y+stride) {
     4f8:	bca5883a 	add	r18,r23,r18
     4fc:	d9c00415 	stw	r7,16(sp)
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
					sum = bf_add(sum, bf_mult(src_pix, k_pix)); // sum of products
				}
			}
			if (clr == 0)
     500:	df000515 	stw	fp,20(sp)
	alt_32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     504:	813fffcc 	andi	r4,r16,65535
     508:	2120001c 	xori	r4,r4,32768
     50c:	21200004 	addi	r4,r4,-32768
     510:	24804d0e 	bge	r4,r18,648 <convolution+0x1d8>
     514:	a979883a 	add	fp,r21,r5
     518:	2449c83a 	sub	r4,r4,r17
     51c:	b80b883a 	mov	r5,r23
     520:	0004b780 	call	4b78 <__mulsi3>
     524:	101b883a 	mov	r13,r2
     528:	a013883a 	mov	r9,r20
		for (x=pad; x<(res + pad); x=x+stride) {
     52c:	48bfffcc 	andi	r2,r9,65535
     530:	10a0001c 	xori	r2,r2,32768
     534:	10a00004 	addi	r2,r2,-32768
     538:	e54bc83a 	sub	r5,fp,r21
     53c:	1480400e 	bge	r2,r18,640 <convolution+0x1d0>
     540:	1345883a 	add	r2,r2,r13
     544:	d8800015 	stw	r2,0(sp)
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
     548:	9815883a 	mov	r10,r19
     54c:	0019883a 	mov	r12,zero
     550:	0017883a 	mov	r11,zero

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
     554:	000f883a 	mov	r7,zero
			for (ky=-ks; ky<ks; ky++) {
     558:	5440310e 	bge	r10,r17,620 <convolution+0x1b0>
     55c:	d8c00017 	ldw	r3,0(sp)
				offset_s = (res * (y + ky)) + x;
				offset_d = (k * ky);
				for (kx=-ks; kx<ks; kx++) {
     560:	9811883a 	mov	r8,r19
     564:	58dd883a 	add	r14,r11,r3
     568:	d8c00117 	ldw	r3,4(sp)
     56c:	60df883a 	add	r15,r12,r3
     570:	4440260e 	bge	r8,r17,60c <convolution+0x19c>
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
     574:	d8c00217 	ldw	r3,8(sp)
     578:	4385883a 	add	r2,r8,r14
     57c:	1085883a 	add	r2,r2,r2
     580:	1885883a 	add	r2,r3,r2
     584:	1100002b 	ldhuio	r4,0(r2)
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
     588:	d8c00317 	ldw	r3,12(sp)
     58c:	43c5883a 	add	r2,r8,r15
     590:	1085883a 	add	r2,r2,r2
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
				offset_s = (res * (y + ky)) + x;
				offset_d = (k * ky);
				for (kx=-ks; kx<ks; kx++) {
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
     594:	213fffcc 	andi	r4,r4,65535
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
     598:	1885883a 	add	r2,r3,r2
     59c:	1140002b 	ldhuio	r5,0(r2)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     5a0:	280a943a 	slli	r5,r5,16
     5a4:	2008943a 	slli	r4,r4,16
     5a8:	da000815 	stw	r8,32(sp)
     5ac:	da400715 	stw	r9,28(sp)
     5b0:	da800915 	stw	r10,36(sp)
     5b4:	dac00a15 	stw	r11,40(sp)
     5b8:	db000b15 	stw	r12,44(sp)
     5bc:	db400c15 	stw	r13,48(sp)
     5c0:	db800d15 	stw	r14,52(sp)
     5c4:	dbc00e15 	stw	r15,56(sp)
     5c8:	d9c00615 	stw	r7,24(sp)
     5cc:	00056a40 	call	56a4 <__mulsf3>
     5d0:	d9c00617 	ldw	r7,24(sp)
     5d4:	113fffec 	andhi	r4,r2,65535
     5d8:	380a943a 	slli	r5,r7,16
     5dc:	0004ba00 	call	4ba0 <__addsf3>
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
				offset_s = (res * (y + ky)) + x;
				offset_d = (k * ky);
				for (kx=-ks; kx<ks; kx++) {
     5e0:	da000817 	ldw	r8,32(sp)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     5e4:	100ed43a 	srli	r7,r2,16
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
				offset_s = (res * (y + ky)) + x;
				offset_d = (k * ky);
				for (kx=-ks; kx<ks; kx++) {
     5e8:	dbc00e17 	ldw	r15,56(sp)
     5ec:	42000044 	addi	r8,r8,1
     5f0:	db800d17 	ldw	r14,52(sp)
     5f4:	db400c17 	ldw	r13,48(sp)
     5f8:	db000b17 	ldw	r12,44(sp)
     5fc:	dac00a17 	ldw	r11,40(sp)
     600:	da800917 	ldw	r10,36(sp)
     604:	da400717 	ldw	r9,28(sp)
     608:	003fd906 	br	570 <__ram_exceptions_end+0xfdffe550>
     60c:	d8c00417 	ldw	r3,16(sp)
	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
     610:	52800044 	addi	r10,r10,1
     614:	5dd7883a 	add	r11,r11,r23
     618:	60d9883a 	add	r12,r12,r3
     61c:	003fce06 	br	558 <__ram_exceptions_end+0xfdffe538>
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
					sum = bf_add(sum, bf_mult(src_pix, k_pix)); // sum of products
				}
			}
			if (clr == 0)
     620:	d8c00517 	ldw	r3,20(sp)
     624:	1800021e 	bne	r3,zero,630 <convolution+0x1c0>
				sum += IORD_16DIRECT(dst, dst_ptr);
     628:	e080002b 	ldhuio	r2,0(fp)
     62c:	11cf883a 	add	r7,r2,r7
			IOWR_16DIRECT(dst, dst_ptr, sum);
     630:	e1c0002d 	sthio	r7,0(fp)
     634:	4d93883a 	add	r9,r9,r22
     638:	e7000084 	addi	fp,fp,2
     63c:	003fbb06 	br	52c <__ram_exceptions_end+0xfdffe50c>
	alt_32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     640:	85a1883a 	add	r16,r16,r22
     644:	003faf06 	br	504 <__ram_exceptions_end+0xfdffe4e4>
				sum += IORD_16DIRECT(dst, dst_ptr);
			IOWR_16DIRECT(dst, dst_ptr, sum);
			dst_ptr += 2;
		}
	}
}
     648:	dfc01817 	ldw	ra,96(sp)
     64c:	df001717 	ldw	fp,92(sp)
     650:	ddc01617 	ldw	r23,88(sp)
     654:	dd801517 	ldw	r22,84(sp)
     658:	dd401417 	ldw	r21,80(sp)
     65c:	dd001317 	ldw	r20,76(sp)
     660:	dcc01217 	ldw	r19,72(sp)
     664:	dc801117 	ldw	r18,68(sp)
     668:	dc401017 	ldw	r17,64(sp)
     66c:	dc000f17 	ldw	r16,60(sp)
     670:	dec01904 	addi	sp,sp,100
     674:	f800283a 	ret

00000678 <maxpool>:

//////////////////////////////////////////////////////////////////////////////
void maxpool(alt_u16* src, alt_u16* dst, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     678:	deffee04 	addi	sp,sp,-72
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     67c:	d8801217 	ldw	r2,72(sp)
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void maxpool(alt_u16* src, alt_u16* dst, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     680:	d8c0130b 	ldhu	r3,76(sp)
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     684:	39ffffcc 	andi	r7,r7,65535
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void maxpool(alt_u16* src, alt_u16* dst, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     688:	dc000815 	stw	r16,32(sp)
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     68c:	143fffcc 	andi	r16,r2,65535
     690:	3c21883a 	add	r16,r7,r16
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void maxpool(alt_u16* src, alt_u16* dst, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     694:	df001015 	stw	fp,64(sp)
     698:	dd400d15 	stw	r21,52(sp)
     69c:	dcc00b15 	stw	r19,44(sp)
     6a0:	dc800a15 	stw	r18,40(sp)
     6a4:	dfc01115 	stw	ra,68(sp)
     6a8:	ddc00f15 	stw	r23,60(sp)
     6ac:	dd800e15 	stw	r22,56(sp)
     6b0:	dd000c15 	stw	r20,48(sp)
     6b4:	dc400915 	stw	r17,36(sp)
     6b8:	d9000415 	stw	r4,16(sp)
     6bc:	d9400515 	stw	r5,20(sp)
     6c0:	d8c0010d 	sth	r3,4(sp)
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     6c4:	1039883a 	mov	fp,r2
     6c8:	1027883a 	mov	r19,r2
	alt_16 x, y, kx, ky;
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
     6cc:	0025883a 	mov	r18,zero
	for (y=pad; y<(res + pad); y=y+stride) {
     6d0:	d9c00215 	stw	r7,8(sp)
     6d4:	dc000315 	stw	r16,12(sp)
		for (x=pad; x<(res + pad); x=x+stride) {
			max = f2bf(-10000.0); // negative enough?
			for (ky=0; ky<k; ky++) {
     6d8:	357fffcc 	andi	r21,r6,65535
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     6dc:	98ffffcc 	andi	r3,r19,65535
     6e0:	18e0001c 	xori	r3,r3,32768
     6e4:	d8800317 	ldw	r2,12(sp)
     6e8:	18e00004 	addi	r3,r3,-32768
     6ec:	d8c00015 	stw	r3,0(sp)
     6f0:	1880360e 	bge	r3,r2,7cc <maxpool+0x154>
     6f4:	e02f883a 	mov	r23,fp
		for (x=pad; x<(res + pad); x=x+stride) {
     6f8:	bdbfffcc 	andi	r22,r23,65535
     6fc:	d8c00317 	ldw	r3,12(sp)
     700:	b5a0001c 	xori	r22,r22,32768
     704:	b5a00004 	addi	r22,r22,-32768
     708:	b0c02d0e 	bge	r22,r3,7c0 <maxpool+0x148>
     70c:	05318704 	movi	r20,-14820
     710:	0021883a 	mov	r16,zero
			max = f2bf(-10000.0); // negative enough?
			for (ky=0; ky<k; ky++) {
     714:	817fffcc 	andi	r5,r16,65535
     718:	2960001c 	xori	r5,r5,32768
     71c:	29600004 	addi	r5,r5,-32768
     720:	2d40200e 	bge	r5,r21,7a4 <maxpool+0x12c>
     724:	d8c00017 	ldw	r3,0(sp)
     728:	d9000217 	ldw	r4,8(sp)
     72c:	194b883a 	add	r5,r3,r5
     730:	0004b780 	call	4b78 <__mulsi3>
     734:	1017883a 	mov	r11,r2
				for (kx=0; kx<k; kx++) {
					src_pix = bf2f(IORD_16DIRECT(src, ((x + kx) + (res * (y + ky))) << 1));
     738:	0015883a 	mov	r10,zero
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
		for (x=pad; x<(res + pad); x=x+stride) {
			max = f2bf(-10000.0); // negative enough?
			for (ky=0; ky<k; ky++) {
				for (kx=0; kx<k; kx++) {
     73c:	50bfffcc 	andi	r2,r10,65535
     740:	10a0001c 	xori	r2,r2,32768
     744:	10a00004 	addi	r2,r2,-32768
     748:	1540140e 	bge	r2,r21,79c <maxpool+0x124>
					src_pix = bf2f(IORD_16DIRECT(src, ((x + kx) + (res * (y + ky))) << 1));
     74c:	b085883a 	add	r2,r22,r2
     750:	d8c00417 	ldw	r3,16(sp)
     754:	12c5883a 	add	r2,r2,r11
     758:	1085883a 	add	r2,r2,r2
     75c:	1885883a 	add	r2,r3,r2
     760:	1440002b 	ldhuio	r17,0(r2)
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     764:	8822943a 	slli	r17,r17,16
		for (x=pad; x<(res + pad); x=x+stride) {
			max = f2bf(-10000.0); // negative enough?
			for (ky=0; ky<k; ky++) {
				for (kx=0; kx<k; kx++) {
					src_pix = bf2f(IORD_16DIRECT(src, ((x + kx) + (res * (y + ky))) << 1));
					if (src_pix > max)
     768:	a13fffcc 	andi	r4,r20,65535
     76c:	da800615 	stw	r10,24(sp)
     770:	dac00715 	stw	r11,28(sp)
     774:	00060280 	call	6028 <__floatsisf>
     778:	880b883a 	mov	r5,r17
     77c:	1009883a 	mov	r4,r2
     780:	00055dc0 	call	55dc <__lesf2>
     784:	da800617 	ldw	r10,24(sp)
     788:	dac00717 	ldw	r11,28(sp)
     78c:	1000010e 	bge	r2,zero,794 <maxpool+0x11c>

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     790:	8828d43a 	srli	r20,r17,16
     794:	52800044 	addi	r10,r10,1
     798:	003fe806 	br	73c <__ram_exceptions_end+0xfdffe71c>
     79c:	84000044 	addi	r16,r16,1
     7a0:	003fdc06 	br	714 <__ram_exceptions_end+0xfdffe6f4>
					src_pix = bf2f(IORD_16DIRECT(src, ((x + kx) + (res * (y + ky))) << 1));
					if (src_pix > max)
						max = f2bf(src_pix);
				}
			}
			IOWR_16DIRECT(dst, dst_ptr, max);
     7a4:	d8c00517 	ldw	r3,20(sp)
     7a8:	1c85883a 	add	r2,r3,r18
     7ac:	1500002d 	sthio	r20,0(r2)
     7b0:	d8c0010b 	ldhu	r3,4(sp)
			dst_ptr += 2;
     7b4:	94800084 	addi	r18,r18,2
     7b8:	b8ef883a 	add	r23,r23,r3
     7bc:	003fce06 	br	6f8 <__ram_exceptions_end+0xfdffe6d8>
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     7c0:	d8c0010b 	ldhu	r3,4(sp)
     7c4:	98e7883a 	add	r19,r19,r3
     7c8:	003fc406 	br	6dc <__ram_exceptions_end+0xfdffe6bc>
			}
			IOWR_16DIRECT(dst, dst_ptr, max);
			dst_ptr += 2;
		}
	}
}
     7cc:	dfc01117 	ldw	ra,68(sp)
     7d0:	df001017 	ldw	fp,64(sp)
     7d4:	ddc00f17 	ldw	r23,60(sp)
     7d8:	dd800e17 	ldw	r22,56(sp)
     7dc:	dd400d17 	ldw	r21,52(sp)
     7e0:	dd000c17 	ldw	r20,48(sp)
     7e4:	dcc00b17 	ldw	r19,44(sp)
     7e8:	dc800a17 	ldw	r18,40(sp)
     7ec:	dc400917 	ldw	r17,36(sp)
     7f0:	dc000817 	ldw	r16,32(sp)
     7f4:	dec01204 	addi	sp,sp,72
     7f8:	f800283a 	ret

000007fc <global_average_pooling>:

//////////////////////////////////////////////////////////////////////////////
bfloat16 global_average_pooling(alt_u16* src, alt_u16 res) {
     7fc:	defffc04 	addi	sp,sp,-16
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     800:	297fffcc 	andi	r5,r5,65535
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 global_average_pooling(alt_u16* src, alt_u16 res) {
     804:	dc800215 	stw	r18,8(sp)
     808:	2025883a 	mov	r18,r4
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     80c:	2809883a 	mov	r4,r5
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 global_average_pooling(alt_u16* src, alt_u16 res) {
     810:	dc400115 	stw	r17,4(sp)
     814:	dc000015 	stw	r16,0(sp)
     818:	dfc00315 	stw	ra,12(sp)
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     81c:	0004b780 	call	4b78 <__mulsi3>
     820:	1021883a 	mov	r16,r2
     824:	0023883a 	mov	r17,zero
//////////////////////////////////////////////////////////////////////////////
bfloat16 global_average_pooling(alt_u16* src, alt_u16 res) {
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
     828:	0005883a 	mov	r2,zero
     82c:	117fffcc 	andi	r5,r2,65535
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     830:	8c000926 	beq	r17,r16,858 <global_average_pooling+0x5c>
		sum = bf_add(sum, IORD_16DIRECT(src, src_ptr));
     834:	8c45883a 	add	r2,r17,r17
     838:	9085883a 	add	r2,r18,r2
     83c:	1100002b 	ldhuio	r4,0(r2)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     840:	280a943a 	slli	r5,r5,16
     844:	2008943a 	slli	r4,r4,16
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     848:	8c400044 	addi	r17,r17,1

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     84c:	0004ba00 	call	4ba0 <__addsf3>
     850:	1004d43a 	srli	r2,r2,16
     854:	003ff506 	br	82c <__ram_exceptions_end+0xfdffe80c>
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     858:	2820943a 	slli	r16,r5,16

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     85c:	8809883a 	mov	r4,r17
     860:	00060280 	call	6028 <__floatsisf>
     864:	100b883a 	mov	r5,r2
     868:	8009883a 	mov	r4,r16
     86c:	00050680 	call	5068 <__divsf3>
	for (x=0; x<(res*res); x++) {
		sum = bf_add(sum, IORD_16DIRECT(src, src_ptr));
		src_ptr += 2;
	}
	return f2bf(bf2f(sum) / (float)(res * res));
}
     870:	1004d43a 	srli	r2,r2,16
     874:	dfc00317 	ldw	ra,12(sp)
     878:	dc800217 	ldw	r18,8(sp)
     87c:	dc400117 	ldw	r17,4(sp)
     880:	dc000017 	ldw	r16,0(sp)
     884:	dec00404 	addi	sp,sp,16
     888:	f800283a 	ret

0000088c <softmax>:

//////////////////////////////////////////////////////////////////////////////
void softmax(alt_u16* src, alt_u16 input_len) {
     88c:	defff804 	addi	sp,sp,-32
     890:	dd800615 	stw	r22,24(sp)
     894:	dd400515 	stw	r21,20(sp)
     898:	dd000415 	stw	r20,16(sp)
     89c:	dc800215 	stw	r18,8(sp)
     8a0:	dc400115 	stw	r17,4(sp)
     8a4:	dc000015 	stw	r16,0(sp)
     8a8:	dfc00715 	stw	ra,28(sp)
     8ac:	dcc00315 	stw	r19,12(sp)
     8b0:	2021883a 	mov	r16,r4
     8b4:	2023883a 	mov	r17,r4
	alt_u16 i;
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
     8b8:	202d883a 	mov	r22,r4
void softmax(alt_u16* src, alt_u16 input_len) {
	alt_u16 i;
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
     8bc:	04bfe034 	movhi	r18,65408
	for (i = 0; i < input_len; i++)
     8c0:	002b883a 	mov	r21,zero
     8c4:	2d3fffcc 	andi	r20,r5,65535
     8c8:	a8bfffcc 	andi	r2,r21,65535
     8cc:	15000a26 	beq	r2,r20,8f8 <softmax+0x6c>
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     8d0:	b4c0000b 	ldhu	r19,0(r22)
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
		if (bf2f(src[i]) > m)
     8d4:	9009883a 	mov	r4,r18
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     8d8:	9826943a 	slli	r19,r19,16
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
		if (bf2f(src[i]) > m)
     8dc:	980b883a 	mov	r5,r19
     8e0:	00055dc0 	call	55dc <__lesf2>
     8e4:	1000010e 	bge	r2,zero,8ec <softmax+0x60>
			m = bf2f(src[i]);
     8e8:	9825883a 	mov	r18,r19
	alt_u16 i;
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
     8ec:	ad400044 	addi	r21,r21,1
     8f0:	b5800084 	addi	r22,r22,2
     8f4:	003ff406 	br	8c8 <__ram_exceptions_end+0xfdffe8a8>
     8f8:	0027883a 	mov	r19,zero
     8fc:	002b883a 	mov	r21,zero
		if (bf2f(src[i]) > m)
			m = bf2f(src[i]);
	for (i = 0; i < input_len; i++)
     900:	a8bfffcc 	andi	r2,r21,65535
     904:	15000d26 	beq	r2,r20,93c <softmax+0xb0>
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     908:	8100000b 	ldhu	r4,0(r16)
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
		if (bf2f(src[i]) > m)
			m = bf2f(src[i]);
	for (i = 0; i < input_len; i++)
		sum += expf(bf2f(src[i]) - m);
     90c:	900b883a 	mov	r5,r18
	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
		if (bf2f(src[i]) > m)
			m = bf2f(src[i]);
	for (i = 0; i < input_len; i++)
     910:	ad400044 	addi	r21,r21,1
		sum += expf(bf2f(src[i]) - m);
     914:	2008943a 	slli	r4,r4,16
     918:	84000084 	addi	r16,r16,2
     91c:	0005ad40 	call	5ad4 <__subsf3>
     920:	1009883a 	mov	r4,r2
     924:	00032600 	call	3260 <expf>
     928:	9809883a 	mov	r4,r19
     92c:	100b883a 	mov	r5,r2
     930:	0004ba00 	call	4ba0 <__addsf3>
     934:	1027883a 	mov	r19,r2
     938:	003ff106 	br	900 <__ram_exceptions_end+0xfdffe8e0>
	offset = m + logf(sum);
     93c:	9809883a 	mov	r4,r19
     940:	00033cc0 	call	33cc <logf>
     944:	9009883a 	mov	r4,r18
     948:	100b883a 	mov	r5,r2
     94c:	0004ba00 	call	4ba0 <__addsf3>
     950:	1025883a 	mov	r18,r2
	for (alt_u16 i = 0; i < input_len; i++)
     954:	0021883a 	mov	r16,zero
     958:	80bfffcc 	andi	r2,r16,65535
     95c:	15000c26 	beq	r2,r20,990 <softmax+0x104>
		src[i] = f2bf(expf(src[i] - offset));
     960:	8900000b 	ldhu	r4,0(r17)
		if (bf2f(src[i]) > m)
			m = bf2f(src[i]);
	for (i = 0; i < input_len; i++)
		sum += expf(bf2f(src[i]) - m);
	offset = m + logf(sum);
	for (alt_u16 i = 0; i < input_len; i++)
     964:	84000044 	addi	r16,r16,1
     968:	8c400084 	addi	r17,r17,2
		src[i] = f2bf(expf(src[i] - offset));
     96c:	00060280 	call	6028 <__floatsisf>
     970:	900b883a 	mov	r5,r18
     974:	1009883a 	mov	r4,r2
     978:	0005ad40 	call	5ad4 <__subsf3>
     97c:	1009883a 	mov	r4,r2
     980:	00032600 	call	3260 <expf>
     984:	1004d43a 	srli	r2,r2,16
     988:	88bfff8d 	sth	r2,-2(r17)
     98c:	003ff206 	br	958 <__ram_exceptions_end+0xfdffe938>
}
     990:	dfc00717 	ldw	ra,28(sp)
     994:	dd800617 	ldw	r22,24(sp)
     998:	dd400517 	ldw	r21,20(sp)
     99c:	dd000417 	ldw	r20,16(sp)
     9a0:	dcc00317 	ldw	r19,12(sp)
     9a4:	dc800217 	ldw	r18,8(sp)
     9a8:	dc400117 	ldw	r17,4(sp)
     9ac:	dc000017 	ldw	r16,0(sp)
     9b0:	dec00804 	addi	sp,sp,32
     9b4:	f800283a 	ret

000009b8 <scale>:

//////////////////////////////////////////////////////////////////////////////
// resize a 565 bitmap
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     9b8:	defff104 	addi	sp,sp,-60
     9bc:	dc400615 	stw	r17,24(sp)
     9c0:	dc400f17 	ldw	r17,60(sp)
     9c4:	ddc00c15 	stw	r23,48(sp)
     9c8:	202f883a 	mov	r23,r4
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
     9cc:	893fffcc 	andi	r4,r17,65535
		src[i] = f2bf(expf(src[i] - offset));
}

//////////////////////////////////////////////////////////////////////////////
// resize a 565 bitmap
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     9d0:	dfc00e15 	stw	ra,56(sp)
     9d4:	df000d15 	stw	fp,52(sp)
     9d8:	dd800b15 	stw	r22,44(sp)
     9dc:	2839883a 	mov	fp,r5
     9e0:	382d883a 	mov	r22,r7
     9e4:	dd400a15 	stw	r21,40(sp)
     9e8:	dd000915 	stw	r20,36(sp)
     9ec:	302b883a 	mov	r21,r6
     9f0:	dcc00815 	stw	r19,32(sp)
     9f4:	dc800715 	stw	r18,28(sp)
     9f8:	dc000515 	stw	r16,20(sp)
     9fc:	3025883a 	mov	r18,r6
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
     a00:	000614c0 	call	614c <__floatunsisf>
     a04:	a93fffcc 	andi	r4,r21,65535
     a08:	d8800415 	stw	r2,16(sp)
     a0c:	000614c0 	call	614c <__floatunsisf>
     a10:	d8c00417 	ldw	r3,16(sp)
		src[i] = f2bf(expf(src[i] - offset));
}

//////////////////////////////////////////////////////////////////////////////
// resize a 565 bitmap
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     a14:	dc001017 	ldw	r16,64(sp)
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
     a18:	100b883a 	mov	r5,r2
     a1c:	1809883a 	mov	r4,r3
     a20:	00050680 	call	5068 <__divsf3>
        scale_height = (float)new_height / (float)height;
     a24:	813fffcc 	andi	r4,r16,65535
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
     a28:	d8800015 	stw	r2,0(sp)
        scale_height = (float)new_height / (float)height;
     a2c:	000614c0 	call	614c <__floatunsisf>
     a30:	b13fffcc 	andi	r4,r22,65535
		src[i] = f2bf(expf(src[i] - offset));
}

//////////////////////////////////////////////////////////////////////////////
// resize a 565 bitmap
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     a34:	8027883a 	mov	r19,r16
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;
     a38:	1021883a 	mov	r16,r2
     a3c:	000614c0 	call	614c <__floatunsisf>
     a40:	100b883a 	mov	r5,r2
     a44:	8009883a 	mov	r4,r16
		src[i] = f2bf(expf(src[i] - offset));
}

//////////////////////////////////////////////////////////////////////////////
// resize a 565 bitmap
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     a48:	8829883a 	mov	r20,r17
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;
     a4c:	00050680 	call	5068 <__divsf3>
     a50:	8c63883a 	add	r17,r17,r17
     a54:	dc40010d 	sth	r17,4(sp)
     a58:	102d883a 	mov	r22,r2

        src_ptr = 0;
     a5c:	002b883a 	mov	r21,zero
        for(cy = 0; cy < new_height; cy++) {
     a60:	0023883a 	mov	r17,zero
     a64:	9cffffcc 	andi	r19,r19,65535
     a68:	94bfffcc 	andi	r18,r18,65535
            for(cx = 0; cx < new_width; cx++) {
     a6c:	a53fffcc 	andi	r20,r20,65535

        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;

        src_ptr = 0;
        for(cy = 0; cy < new_height; cy++) {
     a70:	897fffcc 	andi	r5,r17,65535
     a74:	2cc02b2e 	bgeu	r5,r19,b24 <scale+0x16c>
     a78:	9009883a 	mov	r4,r18
     a7c:	0004b780 	call	4b78 <__mulsi3>
     a80:	1013883a 	mov	r9,r2
            for(cx = 0; cx < new_width; cx++) {
                nearest =  (int)(((float)(cy * width) / scale_height) + ((float)cx / scale_width));
     a84:	0007883a 	mov	r3,zero
     a88:	18e1883a 	add	r16,r3,r3
        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;

        src_ptr = 0;
        for(cy = 0; cy < new_height; cy++) {
            for(cx = 0; cx < new_width; cx++) {
     a8c:	1a3fffcc 	andi	r8,r3,65535
     a90:	8561883a 	add	r16,r16,r21
     a94:	45001f26 	beq	r8,r20,b14 <scale+0x15c>
                nearest =  (int)(((float)(cy * width) / scale_height) + ((float)cx / scale_width));
                pixel = IORD_16DIRECT(src, nearest << 1);
     a98:	4809883a 	mov	r4,r9
     a9c:	d8c00415 	stw	r3,16(sp)
     aa0:	da400315 	stw	r9,12(sp)
     aa4:	da000215 	stw	r8,8(sp)
     aa8:	00060280 	call	6028 <__floatsisf>
     aac:	b00b883a 	mov	r5,r22
     ab0:	1009883a 	mov	r4,r2
     ab4:	00050680 	call	5068 <__divsf3>
     ab8:	da000217 	ldw	r8,8(sp)
     abc:	d8800215 	stw	r2,8(sp)
     ac0:	4009883a 	mov	r4,r8
     ac4:	000614c0 	call	614c <__floatunsisf>
     ac8:	d9400017 	ldw	r5,0(sp)
     acc:	1009883a 	mov	r4,r2
     ad0:	00050680 	call	5068 <__divsf3>
     ad4:	da800217 	ldw	r10,8(sp)
     ad8:	100b883a 	mov	r5,r2
     adc:	5009883a 	mov	r4,r10
     ae0:	0004ba00 	call	4ba0 <__addsf3>
     ae4:	1009883a 	mov	r4,r2
     ae8:	0005fb80 	call	5fb8 <__fixsfsi>
     aec:	1085883a 	add	r2,r2,r2
     af0:	b885883a 	add	r2,r23,r2
     af4:	1080002b 	ldhuio	r2,0(r2)
                IOWR_16DIRECT(dst, src_ptr, pixel);
     af8:	843fffcc 	andi	r16,r16,65535
     afc:	e421883a 	add	r16,fp,r16
     b00:	8080002d 	sthio	r2,0(r16)
        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;

        src_ptr = 0;
        for(cy = 0; cy < new_height; cy++) {
            for(cx = 0; cx < new_width; cx++) {
     b04:	d8c00417 	ldw	r3,16(sp)
     b08:	da400317 	ldw	r9,12(sp)
     b0c:	18c00044 	addi	r3,r3,1
     b10:	003fdd06 	br	a88 <__ram_exceptions_end+0xfdffea68>
     b14:	d880010b 	ldhu	r2,4(sp)

        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;

        src_ptr = 0;
        for(cy = 0; cy < new_height; cy++) {
     b18:	8c400044 	addi	r17,r17,1
     b1c:	a8ab883a 	add	r21,r21,r2
     b20:	003fd306 	br	a70 <__ram_exceptions_end+0xfdffea50>
                pixel = IORD_16DIRECT(src, nearest << 1);
                IOWR_16DIRECT(dst, src_ptr, pixel);
                src_ptr += 2;
            }
        }
}
     b24:	dfc00e17 	ldw	ra,56(sp)
     b28:	df000d17 	ldw	fp,52(sp)
     b2c:	ddc00c17 	ldw	r23,48(sp)
     b30:	dd800b17 	ldw	r22,44(sp)
     b34:	dd400a17 	ldw	r21,40(sp)
     b38:	dd000917 	ldw	r20,36(sp)
     b3c:	dcc00817 	ldw	r19,32(sp)
     b40:	dc800717 	ldw	r18,28(sp)
     b44:	dc400617 	ldw	r17,24(sp)
     b48:	dc000517 	ldw	r16,20(sp)
     b4c:	dec00f04 	addi	sp,sp,60
     b50:	f800283a 	ret

00000b54 <rgb565_to_feature>:

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
     b54:	defff504 	addi	sp,sp,-44
     b58:	dd000515 	stw	r20,20(sp)
     b5c:	2829883a 	mov	r20,r5
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     b60:	d9400b0b 	ldhu	r5,44(sp)
            }
        }
}

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
     b64:	dcc00415 	stw	r19,16(sp)
     b68:	2027883a 	mov	r19,r4
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     b6c:	2809883a 	mov	r4,r5
            }
        }
}

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
     b70:	df000915 	stw	fp,36(sp)
     b74:	dd800715 	stw	r22,28(sp)
     b78:	dd400615 	stw	r21,24(sp)
     b7c:	dc800315 	stw	r18,12(sp)
     b80:	dc400215 	stw	r17,8(sp)
     b84:	dfc00a15 	stw	ra,40(sp)
     b88:	ddc00815 	stw	r23,32(sp)
     b8c:	dc000115 	stw	r16,4(sp)
     b90:	302b883a 	mov	r21,r6
     b94:	382d883a 	mov	r22,r7
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     b98:	0004b780 	call	4b78 <__mulsi3>
     b9c:	1039883a 	mov	fp,r2
//////////////////////////////////////////////////////////////////////////////
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
     ba0:	0023883a 	mov	r17,zero
	for (i=0; i<(res*res); i++) {
     ba4:	0025883a 	mov	r18,zero
     ba8:	97002626 	beq	r18,fp,c44 <rgb565_to_feature+0xf0>
		pixel = IORD_16DIRECT(src, ptr);
     bac:	9c45883a 	add	r2,r19,r17
     bb0:	1400002b 	ldhuio	r16,0(r2)
     bb4:	843fffcc 	andi	r16,r16,65535

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     bb8:	813e000c 	andi	r4,r16,63488
     bbc:	2008d23a 	srli	r4,r4,8
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
     bc0:	a447883a 	add	r3,r20,r17

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     bc4:	d8c00015 	stw	r3,0(sp)
     bc8:	00060280 	call	6028 <__floatsisf>
     bcc:	0150dff4 	movhi	r5,17279
     bd0:	1009883a 	mov	r4,r2
     bd4:	00050680 	call	5068 <__divsf3>
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
     bd8:	1004d43a 	srli	r2,r2,16
     bdc:	d8c00017 	ldw	r3,0(sp)
     be0:	85ffffcc 	andi	r23,r16,65535
     be4:	1880002d 	sthio	r2,0(r3)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     be8:	8101f80c 	andi	r4,r16,2016
     bec:	2008d0fa 	srli	r4,r4,3

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
     bf0:	ac47883a 	add	r3,r21,r17

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     bf4:	d8c00015 	stw	r3,0(sp)
     bf8:	00060280 	call	6028 <__floatsisf>
     bfc:	0150dff4 	movhi	r5,17279
     c00:	1009883a 	mov	r4,r2
     c04:	00050680 	call	5068 <__divsf3>

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
     c08:	1004d43a 	srli	r2,r2,16
     c0c:	d8c00017 	ldw	r3,0(sp)
     c10:	1880002d 	sthio	r2,0(r3)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     c14:	b80890fa 	slli	r4,r23,3
	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
		IOWR_16DIRECT(dst_b, ptr, f2bf((float)((pixel & 0x1f) << 3) / 255.0));
     c18:	b461883a 	add	r16,r22,r17

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     c1c:	21003e0c 	andi	r4,r4,248
     c20:	00060280 	call	6028 <__floatsisf>
     c24:	0150dff4 	movhi	r5,17279
     c28:	1009883a 	mov	r4,r2
     c2c:	00050680 	call	5068 <__divsf3>
	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
		IOWR_16DIRECT(dst_b, ptr, f2bf((float)((pixel & 0x1f) << 3) / 255.0));
     c30:	1004d43a 	srli	r2,r2,16
     c34:	8080002d 	sthio	r2,0(r16)
		ptr += 2;
     c38:	8c400084 	addi	r17,r17,2
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     c3c:	94800044 	addi	r18,r18,1
     c40:	003fd906 	br	ba8 <__ram_exceptions_end+0xfdffeb88>
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
		IOWR_16DIRECT(dst_b, ptr, f2bf((float)((pixel & 0x1f) << 3) / 255.0));
		ptr += 2;
	}
}
     c44:	dfc00a17 	ldw	ra,40(sp)
     c48:	df000917 	ldw	fp,36(sp)
     c4c:	ddc00817 	ldw	r23,32(sp)
     c50:	dd800717 	ldw	r22,28(sp)
     c54:	dd400617 	ldw	r21,24(sp)
     c58:	dd000517 	ldw	r20,20(sp)
     c5c:	dcc00417 	ldw	r19,16(sp)
     c60:	dc800317 	ldw	r18,12(sp)
     c64:	dc400217 	ldw	r17,8(sp)
     c68:	dc000117 	ldw	r16,4(sp)
     c6c:	dec00b04 	addi	sp,sp,44
     c70:	f800283a 	ret

00000c74 <grey_to_feature>:

//////////////////////////////////////////////////////////////////////////////
void grey_to_feature(alt_u16* src, alt_u16* dst, alt_u16 res) {
     c74:	defffa04 	addi	sp,sp,-24
     c78:	dd000415 	stw	r20,16(sp)
     c7c:	2829883a 	mov	r20,r5
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     c80:	317fffcc 	andi	r5,r6,65535
		ptr += 2;
	}
}

//////////////////////////////////////////////////////////////////////////////
void grey_to_feature(alt_u16* src, alt_u16* dst, alt_u16 res) {
     c84:	dcc00315 	stw	r19,12(sp)
     c88:	2027883a 	mov	r19,r4
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     c8c:	2809883a 	mov	r4,r5
		ptr += 2;
	}
}

//////////////////////////////////////////////////////////////////////////////
void grey_to_feature(alt_u16* src, alt_u16* dst, alt_u16 res) {
     c90:	dc800215 	stw	r18,8(sp)
     c94:	dc000015 	stw	r16,0(sp)
     c98:	dfc00515 	stw	ra,20(sp)
     c9c:	dc400115 	stw	r17,4(sp)
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     ca0:	0004b780 	call	4b78 <__mulsi3>
     ca4:	1025883a 	mov	r18,r2
     ca8:	0021883a 	mov	r16,zero
     cac:	84800d26 	beq	r16,r18,ce4 <grey_to_feature+0x70>
     cb0:	8405883a 	add	r2,r16,r16
		pixel = IORD_16DIRECT(src, ptr);
     cb4:	9887883a 	add	r3,r19,r2
     cb8:	1900002b 	ldhuio	r4,0(r3)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     cbc:	213fffcc 	andi	r4,r4,65535
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst, ptr, f2bf(((float)pixel) / 255.0));
     cc0:	a0a3883a 	add	r17,r20,r2

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     cc4:	000614c0 	call	614c <__floatunsisf>
     cc8:	0150dff4 	movhi	r5,17279
     ccc:	1009883a 	mov	r4,r2
     cd0:	00050680 	call	5068 <__divsf3>
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst, ptr, f2bf(((float)pixel) / 255.0));
     cd4:	1004d43a 	srli	r2,r2,16
     cd8:	8880002d 	sthio	r2,0(r17)
void grey_to_feature(alt_u16* src, alt_u16* dst, alt_u16 res) {
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     cdc:	84000044 	addi	r16,r16,1
     ce0:	003ff206 	br	cac <__ram_exceptions_end+0xfdffec8c>
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst, ptr, f2bf(((float)pixel) / 255.0));
		ptr += 2;
	}
}
     ce4:	dfc00517 	ldw	ra,20(sp)
     ce8:	dd000417 	ldw	r20,16(sp)
     cec:	dcc00317 	ldw	r19,12(sp)
     cf0:	dc800217 	ldw	r18,8(sp)
     cf4:	dc400117 	ldw	r17,4(sp)
     cf8:	dc000017 	ldw	r16,0(sp)
     cfc:	dec00604 	addi	sp,sp,24
     d00:	f800283a 	ret

00000d04 <rgb_to_grey>:

//////////////////////////////////////////////////////////////////////////////
alt_u16 rgb_to_grey(alt_u16 rgb565) {
     d04:	defffd04 	addi	sp,sp,-12
     d08:	dc000015 	stw	r16,0(sp)
     d0c:	2021883a 	mov	r16,r4
	alt_u16 grey;

	grey = (alt_u16)((float)((rgb565 & 0xf800) >> 8) * 0.299);
     d10:	213e000c 	andi	r4,r4,63488
     d14:	2008d23a 	srli	r4,r4,8
		ptr += 2;
	}
}

//////////////////////////////////////////////////////////////////////////////
alt_u16 rgb_to_grey(alt_u16 rgb565) {
     d18:	dfc00215 	stw	ra,8(sp)
     d1c:	dc400115 	stw	r17,4(sp)
	alt_u16 grey;

	grey = (alt_u16)((float)((rgb565 & 0xf800) >> 8) * 0.299);
     d20:	00060280 	call	6028 <__floatsisf>
     d24:	1009883a 	mov	r4,r2
     d28:	0008a7c0 	call	8a7c <__extendsfdf2>
     d2c:	01b95834 	movhi	r6,58720
     d30:	01cff4f4 	movhi	r7,16339
     d34:	31906244 	addi	r6,r6,16777
     d38:	39c8b404 	addi	r7,r7,8912
     d3c:	1009883a 	mov	r4,r2
     d40:	180b883a 	mov	r5,r3
     d44:	00077100 	call	7710 <__muldf3>
     d48:	180b883a 	mov	r5,r3
     d4c:	1009883a 	mov	r4,r2
     d50:	0003d900 	call	3d90 <__fixunsdfsi>
	grey += (alt_u16)((float)((rgb565 & 0x07e0) >> 3) * 0.587);
     d54:	8101f80c 	andi	r4,r16,2016
     d58:	2008d0fa 	srli	r4,r4,3

//////////////////////////////////////////////////////////////////////////////
alt_u16 rgb_to_grey(alt_u16 rgb565) {
	alt_u16 grey;

	grey = (alt_u16)((float)((rgb565 & 0xf800) >> 8) * 0.299);
     d5c:	1023883a 	mov	r17,r2
	grey += (alt_u16)((float)((rgb565 & 0x07e0) >> 3) * 0.587);
     d60:	00060280 	call	6028 <__floatsisf>
     d64:	1009883a 	mov	r4,r2
     d68:	0008a7c0 	call	8a7c <__extendsfdf2>
     d6c:	018e5634 	movhi	r6,14680
     d70:	01cff8f4 	movhi	r7,16355
     d74:	31841884 	addi	r6,r6,4194
     d78:	39f22d04 	addi	r7,r7,-14156
     d7c:	1009883a 	mov	r4,r2
     d80:	180b883a 	mov	r5,r3
     d84:	00077100 	call	7710 <__muldf3>
     d88:	180b883a 	mov	r5,r3
     d8c:	1009883a 	mov	r4,r2
     d90:	0003d900 	call	3d90 <__fixunsdfsi>
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
     d94:	800890fa 	slli	r4,r16,3
//////////////////////////////////////////////////////////////////////////////
alt_u16 rgb_to_grey(alt_u16 rgb565) {
	alt_u16 grey;

	grey = (alt_u16)((float)((rgb565 & 0xf800) >> 8) * 0.299);
	grey += (alt_u16)((float)((rgb565 & 0x07e0) >> 3) * 0.587);
     d98:	88a3883a 	add	r17,r17,r2
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
     d9c:	21003e0c 	andi	r4,r4,248
     da0:	00060280 	call	6028 <__floatsisf>
     da4:	1009883a 	mov	r4,r2
     da8:	0008a7c0 	call	8a7c <__extendsfdf2>
     dac:	01a7efb4 	movhi	r6,40894
     db0:	01cfef74 	movhi	r7,16317
     db4:	319db244 	addi	r6,r6,30409
     db8:	39cbc684 	addi	r7,r7,12058
     dbc:	1009883a 	mov	r4,r2
     dc0:	180b883a 	mov	r5,r3
     dc4:	00077100 	call	7710 <__muldf3>
     dc8:	1009883a 	mov	r4,r2
     dcc:	180b883a 	mov	r5,r3
     dd0:	0003d900 	call	3d90 <__fixunsdfsi>
}
     dd4:	8885883a 	add	r2,r17,r2
     dd8:	dfc00217 	ldw	ra,8(sp)
     ddc:	dc400117 	ldw	r17,4(sp)
     de0:	dc000017 	ldw	r16,0(sp)
     de4:	dec00304 	addi	sp,sp,12
     de8:	f800283a 	ret

00000dec <rgb565_to_text>:

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
     dec:	deffdb04 	addi	sp,sp,-148
     df0:	dc801d15 	stw	r18,116(sp)

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
     df4:	04801704 	movi	r18,92
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
}

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
     df8:	dd402015 	stw	r21,128(sp)
     dfc:	dcc01e15 	stw	r19,120(sp)
     e00:	dc401c15 	stw	r17,112(sp)
     e04:	dc001b15 	stw	r16,108(sp)
     e08:	2823883a 	mov	r17,r5
     e0c:	3021883a 	mov	r16,r6

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
     e10:	000b883a 	mov	r5,zero
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
}

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
     e14:	202b883a 	mov	r21,r4
     e18:	3027883a 	mov	r19,r6

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
     e1c:	d809883a 	mov	r4,sp
     e20:	900d883a 	mov	r6,r18
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
}

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
     e24:	dfc02415 	stw	ra,144(sp)
     e28:	df002315 	stw	fp,140(sp)
     e2c:	ddc02215 	stw	r23,136(sp)
     e30:	dd802115 	stw	r22,132(sp)
     e34:	dd001f15 	stw	r20,124(sp)

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
     e38:	0008dd00 	call	8dd0 <memset>
     e3c:	00800804 	movi	r2,32
     e40:	d8800005 	stb	r2,0(sp)
     e44:	00801804 	movi	r2,96
     e48:	d8800045 	stb	r2,1(sp)
     e4c:	00800b44 	movi	r2,45
     e50:	d8800085 	stb	r2,2(sp)
     e54:	00800b84 	movi	r2,46
     e58:	d88000c5 	stb	r2,3(sp)
     e5c:	008009c4 	movi	r2,39
     e60:	d8800105 	stb	r2,4(sp)
     e64:	008017c4 	movi	r2,95
     e68:	d8800145 	stb	r2,5(sp)
     e6c:	00800e84 	movi	r2,58
     e70:	d8800185 	stb	r2,6(sp)
     e74:	00800b04 	movi	r2,44
     e78:	d88001c5 	stb	r2,7(sp)
     e7c:	00800884 	movi	r2,34
     e80:	d8800205 	stb	r2,8(sp)
     e84:	00800f44 	movi	r2,61
     e88:	d8800245 	stb	r2,9(sp)
     e8c:	00801784 	movi	r2,94
     e90:	d8800285 	stb	r2,10(sp)
     e94:	00800ec4 	movi	r2,59
     e98:	d88002c5 	stb	r2,11(sp)
     e9c:	00800f04 	movi	r2,60
     ea0:	d8800305 	stb	r2,12(sp)
     ea4:	00800ac4 	movi	r2,43
     ea8:	d8800345 	stb	r2,13(sp)
     eac:	00800844 	movi	r2,33
     eb0:	d8800385 	stb	r2,14(sp)
     eb4:	00800a84 	movi	r2,42
     eb8:	d88003c5 	stb	r2,15(sp)
     ebc:	00800fc4 	movi	r2,63
     ec0:	d8800405 	stb	r2,16(sp)
     ec4:	00800bc4 	movi	r2,47
     ec8:	d8800445 	stb	r2,17(sp)
     ecc:	008018c4 	movi	r2,99
     ed0:	d8800485 	stb	r2,18(sp)
     ed4:	00801304 	movi	r2,76
     ed8:	d88004c5 	stb	r2,19(sp)
     edc:	00801e84 	movi	r2,122
     ee0:	d8800545 	stb	r2,21(sp)
     ee4:	00801c84 	movi	r2,114
     ee8:	d8800585 	stb	r2,22(sp)
     eec:	00801cc4 	movi	r2,115
     ef0:	d88005c5 	stb	r2,23(sp)
     ef4:	00800dc4 	movi	r2,55
     ef8:	d8800605 	stb	r2,24(sp)
     efc:	00801504 	movi	r2,84
     f00:	d8800645 	stb	r2,25(sp)
     f04:	00801a44 	movi	r2,105
     f08:	d8800685 	stb	r2,26(sp)
     f0c:	00801d84 	movi	r2,118
     f10:	d88006c5 	stb	r2,27(sp)
     f14:	00801284 	movi	r2,74
     f18:	d8800705 	stb	r2,28(sp)
     f1c:	00801d04 	movi	r2,116
     f20:	d8800745 	stb	r2,29(sp)
     f24:	008010c4 	movi	r2,67
     f28:	d8800785 	stb	r2,30(sp)
     f2c:	00801ec4 	movi	r2,123
     f30:	dc800505 	stb	r18,20(sp)
     f34:	d88007c5 	stb	r2,31(sp)
     f38:	00800cc4 	movi	r2,51
     f3c:	d8800805 	stb	r2,32(sp)
     f40:	00801184 	movi	r2,70
     f44:	d8800845 	stb	r2,33(sp)
     f48:	00800a44 	movi	r2,41
     f4c:	d8800885 	stb	r2,34(sp)
     f50:	00801244 	movi	r2,73
     f54:	d88008c5 	stb	r2,35(sp)
     f58:	00801b04 	movi	r2,108
     f5c:	d8800905 	stb	r2,36(sp)
     f60:	00800a04 	movi	r2,40
     f64:	d8800945 	stb	r2,37(sp)
     f68:	00801e04 	movi	r2,120
     f6c:	d8800985 	stb	r2,38(sp)
     f70:	00801684 	movi	r2,90
     f74:	d88009c5 	stb	r2,39(sp)
     f78:	00801984 	movi	r2,102
     f7c:	d8800a05 	stb	r2,40(sp)
     f80:	00801644 	movi	r2,89
     f84:	d8800a45 	stb	r2,41(sp)
     f88:	00800d44 	movi	r2,53
     f8c:	d8800a85 	stb	r2,42(sp)
     f90:	008014c4 	movi	r2,83
     f94:	d8800ac5 	stb	r2,43(sp)
     f98:	00800c84 	movi	r2,50
     f9c:	d8800b05 	stb	r2,44(sp)
     fa0:	00801944 	movi	r2,101
     fa4:	d8800b45 	stb	r2,45(sp)
     fa8:	00801844 	movi	r2,97
     fac:	d8800b85 	stb	r2,46(sp)
     fb0:	00801a84 	movi	r2,106
     fb4:	d8800bc5 	stb	r2,47(sp)
     fb8:	00801bc4 	movi	r2,111
     fbc:	d8800c05 	stb	r2,48(sp)
     fc0:	00800c44 	movi	r2,49
     fc4:	d8800c45 	stb	r2,49(sp)
     fc8:	00800d04 	movi	r2,52
     fcc:	d8800c85 	stb	r2,50(sp)
     fd0:	008016c4 	movi	r2,91
     fd4:	d8800cc5 	stb	r2,51(sp)
     fd8:	00801b84 	movi	r2,110
     fdc:	d8800d05 	stb	r2,52(sp)
     fe0:	00801d44 	movi	r2,117
     fe4:	d8800d45 	stb	r2,53(sp)
     fe8:	00801e44 	movi	r2,121
     fec:	d8800d85 	stb	r2,54(sp)
     ff0:	00801144 	movi	r2,69
     ff4:	d8800dc5 	stb	r2,55(sp)
     ff8:	00801744 	movi	r2,93
     ffc:	d8800e05 	stb	r2,56(sp)
    1000:	00801404 	movi	r2,80
    1004:	d8800e45 	stb	r2,57(sp)
    1008:	00800d84 	movi	r2,54
    100c:	d8800e85 	stb	r2,58(sp)
    1010:	00801584 	movi	r2,86
    1014:	d8800ec5 	stb	r2,59(sp)
    1018:	00800e44 	movi	r2,57
    101c:	d8800f05 	stb	r2,60(sp)
    1020:	00801ac4 	movi	r2,107
    1024:	d8800f45 	stb	r2,61(sp)
    1028:	00801604 	movi	r2,88
    102c:	d8800f85 	stb	r2,62(sp)
    1030:	00801c04 	movi	r2,112
    1034:	d8800fc5 	stb	r2,63(sp)
    1038:	008012c4 	movi	r2,75
    103c:	d8801005 	stb	r2,64(sp)
    1040:	00801dc4 	movi	r2,119
    1044:	d8801045 	stb	r2,65(sp)
    1048:	008011c4 	movi	r2,71
    104c:	d8801085 	stb	r2,66(sp)
    1050:	00801a04 	movi	r2,104
    1054:	d88010c5 	stb	r2,67(sp)
    1058:	00801c44 	movi	r2,113
    105c:	d8801105 	stb	r2,68(sp)
    1060:	00801044 	movi	r2,65
    1064:	d8801145 	stb	r2,69(sp)
    1068:	00801544 	movi	r2,85
    106c:	d8801185 	stb	r2,70(sp)
    1070:	00801884 	movi	r2,98
    1074:	d88011c5 	stb	r2,71(sp)
    1078:	008013c4 	movi	r2,79
    107c:	d8801205 	stb	r2,72(sp)
    1080:	00801904 	movi	r2,100
    1084:	d8801245 	stb	r2,73(sp)
    1088:	00800e04 	movi	r2,56
    108c:	d8801285 	stb	r2,74(sp)
    1090:	008008c4 	movi	r2,35
    1094:	d88012c5 	stb	r2,75(sp)
    1098:	00801204 	movi	r2,72
    109c:	d8801305 	stb	r2,76(sp)
    10a0:	00801484 	movi	r2,82
    10a4:	d8801345 	stb	r2,77(sp)
    10a8:	00801104 	movi	r2,68
    10ac:	d8801385 	stb	r2,78(sp)
    10b0:	00801084 	movi	r2,66
    10b4:	d88013c5 	stb	r2,79(sp)
    10b8:	00800c04 	movi	r2,48
    10bc:	d8801405 	stb	r2,80(sp)
    10c0:	00800904 	movi	r2,36
    10c4:	d8801445 	stb	r2,81(sp)
    10c8:	00801b44 	movi	r2,109
    10cc:	d8801485 	stb	r2,82(sp)
    10d0:	008019c4 	movi	r2,103
    10d4:	d88014c5 	stb	r2,83(sp)
    10d8:	00801344 	movi	r2,77
    10dc:	d8801505 	stb	r2,84(sp)
    10e0:	008015c4 	movi	r2,87
    10e4:	d8801545 	stb	r2,85(sp)
    10e8:	00800984 	movi	r2,38
    10ec:	d8801585 	stb	r2,86(sp)
    10f0:	00801444 	movi	r2,81
    10f4:	d88015c5 	stb	r2,87(sp)
    10f8:	00800944 	movi	r2,37
    10fc:	d8801605 	stb	r2,88(sp)
    1100:	817fffcc 	andi	r5,r16,65535
    1104:	00801384 	movi	r2,78
    1108:	d8801645 	stb	r2,89(sp)
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
				for (xx=0; xx<step; xx++)
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
			sum = (sum / (step * step));
    110c:	2809883a 	mov	r4,r5
//////////////////////////////////////////////////////////////////////////////
void rgb565_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    1110:	00801004 	movi	r2,64
    1114:	d8801685 	stb	r2,90(sp)
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
				for (xx=0; xx<step; xx++)
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
			sum = (sum / (step * step));
    1118:	0004b780 	call	4b78 <__mulsi3>
    111c:	d8801715 	stw	r2,92(sp)
			47,99,76,92,122,114,115,55,84,105,118,74,116,67,123,51,70,41,73,108,
			40,120,90,102,89,53,83,50,101,97,106,111,49,52,91,110,117,121,69,93,
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
    1120:	0025883a 	mov	r18,zero
    1124:	8c7fffcc 	andi	r17,r17,65535
    1128:	913fffcc 	andi	r4,r18,65535
    112c:	2440382e 	bgeu	r4,r17,1210 <rgb565_to_text+0x424>
		line = (y * res);
    1130:	880b883a 	mov	r5,r17
    1134:	0004b780 	call	4b78 <__mulsi3>
    1138:	102d883a 	mov	r22,r2
		for (x=0; x<res; x+=step) {
    113c:	0021883a 	mov	r16,zero
    1140:	9d3fffcc 	andi	r20,r19,65535
    1144:	80bfffcc 	andi	r2,r16,65535
    1148:	14402c2e 	bgeu	r2,r17,11fc <rgb565_to_text+0x410>
			sum = 0;
			src_ptr = (x + line) << 1;
    114c:	1585883a 	add	r2,r2,r22
    1150:	1087883a 	add	r3,r2,r2
			for (yy=0; yy<step; yy++)
    1154:	a039883a 	mov	fp,r20
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
			sum = 0;
    1158:	000f883a 	mov	r7,zero
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
    115c:	000b883a 	mov	r5,zero
    1160:	28bfffcc 	andi	r2,r5,65535
    1164:	15001526 	beq	r2,r20,11bc <rgb565_to_text+0x3d0>
    1168:	e52fc83a 	sub	r23,fp,r20
				for (xx=0; xx<step; xx++)
    116c:	e5c01026 	beq	fp,r23,11b0 <rgb565_to_text+0x3c4>
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
    1170:	bdc5883a 	add	r2,r23,r23
    1174:	10c5883a 	add	r2,r2,r3
    1178:	a885883a 	add	r2,r21,r2
    117c:	1100002b 	ldhuio	r4,0(r2)
    1180:	213fffcc 	andi	r4,r4,65535
    1184:	d8c01a15 	stw	r3,104(sp)
    1188:	d9401815 	stw	r5,96(sp)
    118c:	d9c01915 	stw	r7,100(sp)
    1190:	0000d040 	call	d04 <rgb_to_grey>
    1194:	d9c01917 	ldw	r7,100(sp)
    1198:	10bfffcc 	andi	r2,r2,65535
    119c:	bdc00044 	addi	r23,r23,1
    11a0:	388f883a 	add	r7,r7,r2
    11a4:	d9401817 	ldw	r5,96(sp)
    11a8:	d8c01a17 	ldw	r3,104(sp)
    11ac:	003fef06 	br	116c <__ram_exceptions_end+0xfdfff14c>
	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
    11b0:	29400044 	addi	r5,r5,1
    11b4:	e479883a 	add	fp,fp,r17
    11b8:	003fe906 	br	1160 <__ram_exceptions_end+0xfdfff140>
				for (xx=0; xx<step; xx++)
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
			sum = (sum / (step * step));
			sum = (sum * 92) / 255;		// scale grey count
    11bc:	d9401717 	ldw	r5,92(sp)
    11c0:	3809883a 	mov	r4,r7
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
    11c4:	84e1883a 	add	r16,r16,r19
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
				for (xx=0; xx<step; xx++)
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
			sum = (sum / (step * step));
			sum = (sum * 92) / 255;		// scale grey count
    11c8:	0004abc0 	call	4abc <__udivsi3>
    11cc:	01401704 	movi	r5,92
    11d0:	1009883a 	mov	r4,r2
    11d4:	0004b780 	call	4b78 <__mulsi3>
			alt_printf("%c", char_grey[sum]);
    11d8:	01403fc4 	movi	r5,255
    11dc:	1009883a 	mov	r4,r2
    11e0:	0004abc0 	call	4abc <__udivsi3>
    11e4:	d885883a 	add	r2,sp,r2
    11e8:	11400003 	ldbu	r5,0(r2)
    11ec:	01000074 	movhi	r4,1
    11f0:	21244904 	addi	r4,r4,-28380
    11f4:	0008efc0 	call	8efc <alt_printf>
    11f8:	003fd206 	br	1144 <__ram_exceptions_end+0xfdfff124>
		}
		alt_printf("\n");
    11fc:	01000074 	movhi	r4,1
    1200:	21244804 	addi	r4,r4,-28384
    1204:	0008efc0 	call	8efc <alt_printf>
			47,99,76,92,122,114,115,55,84,105,118,74,116,67,123,51,70,41,73,108,
			40,120,90,102,89,53,83,50,101,97,106,111,49,52,91,110,117,121,69,93,
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
    1208:	94e5883a 	add	r18,r18,r19
    120c:	003fc606 	br	1128 <__ram_exceptions_end+0xfdfff108>
			sum = (sum * 92) / 255;		// scale grey count
			alt_printf("%c", char_grey[sum]);
		}
		alt_printf("\n");
	}
}
    1210:	dfc02417 	ldw	ra,144(sp)
    1214:	df002317 	ldw	fp,140(sp)
    1218:	ddc02217 	ldw	r23,136(sp)
    121c:	dd802117 	ldw	r22,132(sp)
    1220:	dd402017 	ldw	r21,128(sp)
    1224:	dd001f17 	ldw	r20,124(sp)
    1228:	dcc01e17 	ldw	r19,120(sp)
    122c:	dc801d17 	ldw	r18,116(sp)
    1230:	dc401c17 	ldw	r17,112(sp)
    1234:	dc001b17 	ldw	r16,108(sp)
    1238:	dec02504 	addi	sp,sp,148
    123c:	f800283a 	ret

00001240 <grey_to_text>:
//////////////////////////////////////////////////////////////////////////////
void grey_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
    1240:	deffe004 	addi	sp,sp,-128
    1244:	dcc01a15 	stw	r19,104(sp)

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    1248:	04c01704 	movi	r19,92
		}
		alt_printf("\n");
	}
}
//////////////////////////////////////////////////////////////////////////////
void grey_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
    124c:	dd001b15 	stw	r20,108(sp)
    1250:	dc801915 	stw	r18,100(sp)
    1254:	dc401815 	stw	r17,96(sp)
    1258:	dc001715 	stw	r16,92(sp)
    125c:	3023883a 	mov	r17,r6
    1260:	2821883a 	mov	r16,r5
    1264:	2029883a 	mov	r20,r4

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    1268:	000b883a 	mov	r5,zero
    126c:	d809883a 	mov	r4,sp
		}
		alt_printf("\n");
	}
}
//////////////////////////////////////////////////////////////////////////////
void grey_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
    1270:	3025883a 	mov	r18,r6

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    1274:	980d883a 	mov	r6,r19
		}
		alt_printf("\n");
	}
}
//////////////////////////////////////////////////////////////////////////////
void grey_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
    1278:	dfc01f15 	stw	ra,124(sp)
    127c:	ddc01e15 	stw	r23,120(sp)
    1280:	dd801d15 	stw	r22,116(sp)
    1284:	dd401c15 	stw	r21,112(sp)

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    1288:	0008dd00 	call	8dd0 <memset>
    128c:	00800804 	movi	r2,32
    1290:	d8800005 	stb	r2,0(sp)
    1294:	00801804 	movi	r2,96
    1298:	d8800045 	stb	r2,1(sp)
    129c:	00800b44 	movi	r2,45
    12a0:	d8800085 	stb	r2,2(sp)
    12a4:	00800b84 	movi	r2,46
    12a8:	d88000c5 	stb	r2,3(sp)
    12ac:	008009c4 	movi	r2,39
    12b0:	d8800105 	stb	r2,4(sp)
    12b4:	008017c4 	movi	r2,95
    12b8:	d8800145 	stb	r2,5(sp)
    12bc:	00800e84 	movi	r2,58
    12c0:	d8800185 	stb	r2,6(sp)
    12c4:	00800b04 	movi	r2,44
    12c8:	d88001c5 	stb	r2,7(sp)
    12cc:	00800884 	movi	r2,34
    12d0:	d8800205 	stb	r2,8(sp)
    12d4:	00800f44 	movi	r2,61
    12d8:	d8800245 	stb	r2,9(sp)
    12dc:	00801784 	movi	r2,94
    12e0:	d8800285 	stb	r2,10(sp)
    12e4:	00800ec4 	movi	r2,59
    12e8:	d88002c5 	stb	r2,11(sp)
    12ec:	00800f04 	movi	r2,60
    12f0:	d8800305 	stb	r2,12(sp)
    12f4:	00800ac4 	movi	r2,43
    12f8:	d8800345 	stb	r2,13(sp)
    12fc:	00800844 	movi	r2,33
    1300:	d8800385 	stb	r2,14(sp)
    1304:	00800a84 	movi	r2,42
    1308:	d88003c5 	stb	r2,15(sp)
    130c:	00800fc4 	movi	r2,63
    1310:	d8800405 	stb	r2,16(sp)
    1314:	00800bc4 	movi	r2,47
    1318:	d8800445 	stb	r2,17(sp)
    131c:	008018c4 	movi	r2,99
    1320:	d8800485 	stb	r2,18(sp)
    1324:	00801304 	movi	r2,76
    1328:	d88004c5 	stb	r2,19(sp)
    132c:	00801e84 	movi	r2,122
    1330:	d8800545 	stb	r2,21(sp)
    1334:	00801c84 	movi	r2,114
    1338:	d8800585 	stb	r2,22(sp)
    133c:	00801cc4 	movi	r2,115
    1340:	d88005c5 	stb	r2,23(sp)
    1344:	00800dc4 	movi	r2,55
    1348:	d8800605 	stb	r2,24(sp)
    134c:	00801504 	movi	r2,84
    1350:	d8800645 	stb	r2,25(sp)
    1354:	00801a44 	movi	r2,105
    1358:	d8800685 	stb	r2,26(sp)
    135c:	00801d84 	movi	r2,118
    1360:	d88006c5 	stb	r2,27(sp)
    1364:	00801284 	movi	r2,74
    1368:	d8800705 	stb	r2,28(sp)
    136c:	00801d04 	movi	r2,116
    1370:	d8800745 	stb	r2,29(sp)
    1374:	008010c4 	movi	r2,67
    1378:	d8800785 	stb	r2,30(sp)
    137c:	00801ec4 	movi	r2,123
    1380:	dcc00505 	stb	r19,20(sp)
    1384:	d88007c5 	stb	r2,31(sp)
    1388:	00800cc4 	movi	r2,51
    138c:	d8800805 	stb	r2,32(sp)
    1390:	00801184 	movi	r2,70
    1394:	d8800845 	stb	r2,33(sp)
    1398:	00800a44 	movi	r2,41
    139c:	d8800885 	stb	r2,34(sp)
    13a0:	00801244 	movi	r2,73
    13a4:	d88008c5 	stb	r2,35(sp)
    13a8:	00801b04 	movi	r2,108
    13ac:	d8800905 	stb	r2,36(sp)
    13b0:	00800a04 	movi	r2,40
    13b4:	d8800945 	stb	r2,37(sp)
    13b8:	00801e04 	movi	r2,120
    13bc:	d8800985 	stb	r2,38(sp)
    13c0:	00801684 	movi	r2,90
    13c4:	d88009c5 	stb	r2,39(sp)
    13c8:	00801984 	movi	r2,102
    13cc:	d8800a05 	stb	r2,40(sp)
    13d0:	00801644 	movi	r2,89
    13d4:	d8800a45 	stb	r2,41(sp)
    13d8:	00800d44 	movi	r2,53
    13dc:	d8800a85 	stb	r2,42(sp)
    13e0:	008014c4 	movi	r2,83
    13e4:	d8800ac5 	stb	r2,43(sp)
    13e8:	00800c84 	movi	r2,50
    13ec:	d8800b05 	stb	r2,44(sp)
    13f0:	00801944 	movi	r2,101
    13f4:	d8800b45 	stb	r2,45(sp)
    13f8:	00801844 	movi	r2,97
    13fc:	d8800b85 	stb	r2,46(sp)
    1400:	00801a84 	movi	r2,106
    1404:	d8800bc5 	stb	r2,47(sp)
    1408:	00801bc4 	movi	r2,111
    140c:	d8800c05 	stb	r2,48(sp)
    1410:	00800c44 	movi	r2,49
    1414:	d8800c45 	stb	r2,49(sp)
    1418:	00800d04 	movi	r2,52
    141c:	d8800c85 	stb	r2,50(sp)
    1420:	008016c4 	movi	r2,91
    1424:	d8800cc5 	stb	r2,51(sp)
    1428:	00801b84 	movi	r2,110
    142c:	d8800d05 	stb	r2,52(sp)
    1430:	00801d44 	movi	r2,117
    1434:	d8800d45 	stb	r2,53(sp)
    1438:	00801e44 	movi	r2,121
    143c:	d8800d85 	stb	r2,54(sp)
    1440:	00801144 	movi	r2,69
    1444:	d8800dc5 	stb	r2,55(sp)
    1448:	00801744 	movi	r2,93
    144c:	d8800e05 	stb	r2,56(sp)
    1450:	00801404 	movi	r2,80
    1454:	d8800e45 	stb	r2,57(sp)
    1458:	00800d84 	movi	r2,54
    145c:	d8800e85 	stb	r2,58(sp)
    1460:	00801584 	movi	r2,86
    1464:	d8800ec5 	stb	r2,59(sp)
    1468:	00800e44 	movi	r2,57
    146c:	d8800f05 	stb	r2,60(sp)
    1470:	00801ac4 	movi	r2,107
    1474:	d8800f45 	stb	r2,61(sp)
    1478:	00801604 	movi	r2,88
    147c:	d8800f85 	stb	r2,62(sp)
    1480:	00801c04 	movi	r2,112
    1484:	d8800fc5 	stb	r2,63(sp)
    1488:	008012c4 	movi	r2,75
    148c:	d8801005 	stb	r2,64(sp)
    1490:	00801dc4 	movi	r2,119
    1494:	d8801045 	stb	r2,65(sp)
    1498:	008011c4 	movi	r2,71
    149c:	d8801085 	stb	r2,66(sp)
    14a0:	00801a04 	movi	r2,104
    14a4:	d88010c5 	stb	r2,67(sp)
    14a8:	00801c44 	movi	r2,113
    14ac:	d8801105 	stb	r2,68(sp)
    14b0:	00801044 	movi	r2,65
    14b4:	d8801145 	stb	r2,69(sp)
    14b8:	00801544 	movi	r2,85
    14bc:	d8801185 	stb	r2,70(sp)
    14c0:	00801884 	movi	r2,98
    14c4:	d88011c5 	stb	r2,71(sp)
    14c8:	008013c4 	movi	r2,79
    14cc:	d8801205 	stb	r2,72(sp)
    14d0:	00801904 	movi	r2,100
    14d4:	d8801245 	stb	r2,73(sp)
    14d8:	00800e04 	movi	r2,56
    14dc:	d8801285 	stb	r2,74(sp)
    14e0:	008008c4 	movi	r2,35
    14e4:	d88012c5 	stb	r2,75(sp)
    14e8:	00801204 	movi	r2,72
    14ec:	d8801305 	stb	r2,76(sp)
    14f0:	00801484 	movi	r2,82
    14f4:	d8801345 	stb	r2,77(sp)
    14f8:	00801104 	movi	r2,68
    14fc:	d8801385 	stb	r2,78(sp)
    1500:	00801084 	movi	r2,66
    1504:	d88013c5 	stb	r2,79(sp)
    1508:	00800c04 	movi	r2,48
    150c:	d8801405 	stb	r2,80(sp)
    1510:	00800904 	movi	r2,36
    1514:	d8801445 	stb	r2,81(sp)
    1518:	00801b44 	movi	r2,109
    151c:	d8801485 	stb	r2,82(sp)
    1520:	008019c4 	movi	r2,103
    1524:	d88014c5 	stb	r2,83(sp)
    1528:	00801344 	movi	r2,77
    152c:	d8801505 	stb	r2,84(sp)
    1530:	008015c4 	movi	r2,87
    1534:	d8801545 	stb	r2,85(sp)
    1538:	00800984 	movi	r2,38
    153c:	d8801585 	stb	r2,86(sp)
    1540:	00801444 	movi	r2,81
    1544:	d88015c5 	stb	r2,87(sp)
    1548:	00800944 	movi	r2,37
    154c:	897fffcc 	andi	r5,r17,65535
    1550:	d8801605 	stb	r2,88(sp)
    1554:	00801384 	movi	r2,78
    1558:	d8801645 	stb	r2,89(sp)
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
				for (xx=0; xx<step; xx++)
					sum += IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1));
			sum = (sum / (step * step));
    155c:	2809883a 	mov	r4,r5
//////////////////////////////////////////////////////////////////////////////
void grey_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    1560:	00801004 	movi	r2,64
    1564:	d8801685 	stb	r2,90(sp)
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
				for (xx=0; xx<step; xx++)
					sum += IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1));
			sum = (sum / (step * step));
    1568:	0004b780 	call	4b78 <__mulsi3>
    156c:	1027883a 	mov	r19,r2
			47,99,76,92,122,114,115,55,84,105,118,74,116,67,123,51,70,41,73,108,
			40,120,90,102,89,53,83,50,101,97,106,111,49,52,91,110,117,121,69,93,
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
    1570:	0023883a 	mov	r17,zero
    1574:	843fffcc 	andi	r16,r16,65535
    1578:	893fffcc 	andi	r4,r17,65535
    157c:	24002f2e 	bgeu	r4,r16,163c <grey_to_text+0x3fc>
		line = (y * res);
    1580:	800b883a 	mov	r5,r16
    1584:	0004b780 	call	4b78 <__mulsi3>
    1588:	102f883a 	mov	r23,r2
		for (x=0; x<res; x+=step) {
    158c:	002b883a 	mov	r21,zero
    1590:	95bfffcc 	andi	r22,r18,65535
    1594:	a8bfffcc 	andi	r2,r21,65535
    1598:	1400232e 	bgeu	r2,r16,1628 <grey_to_text+0x3e8>
			sum = 0;
			src_ptr = (x + line) << 1;
    159c:	15c5883a 	add	r2,r2,r23
    15a0:	1085883a 	add	r2,r2,r2
			for (yy=0; yy<step; yy++)
    15a4:	b00d883a 	mov	r6,r22
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
			sum = 0;
    15a8:	0009883a 	mov	r4,zero
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
    15ac:	000f883a 	mov	r7,zero
    15b0:	38ffffcc 	andi	r3,r7,65535
    15b4:	1d800d26 	beq	r3,r22,15ec <grey_to_text+0x3ac>
    15b8:	3587c83a 	sub	r3,r6,r22
				for (xx=0; xx<step; xx++)
    15bc:	30c00826 	beq	r6,r3,15e0 <grey_to_text+0x3a0>
					sum += IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1));
    15c0:	18cb883a 	add	r5,r3,r3
    15c4:	288b883a 	add	r5,r5,r2
    15c8:	a14b883a 	add	r5,r20,r5
    15cc:	2940002b 	ldhuio	r5,0(r5)
    15d0:	297fffcc 	andi	r5,r5,65535
    15d4:	2149883a 	add	r4,r4,r5
    15d8:	18c00044 	addi	r3,r3,1
    15dc:	003ff706 	br	15bc <__ram_exceptions_end+0xfdfff59c>
	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
    15e0:	39c00044 	addi	r7,r7,1
    15e4:	340d883a 	add	r6,r6,r16
    15e8:	003ff106 	br	15b0 <__ram_exceptions_end+0xfdfff590>
				for (xx=0; xx<step; xx++)
					sum += IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1));
			sum = (sum / (step * step));
			sum = (sum * 92) / 255;		// scale grey count
    15ec:	980b883a 	mov	r5,r19
    15f0:	0004abc0 	call	4abc <__udivsi3>
    15f4:	01401704 	movi	r5,92
    15f8:	1009883a 	mov	r4,r2
    15fc:	0004b780 	call	4b78 <__mulsi3>
			alt_printf("%c", char_grey[sum]);
    1600:	01403fc4 	movi	r5,255
    1604:	1009883a 	mov	r4,r2
    1608:	0004abc0 	call	4abc <__udivsi3>
    160c:	d885883a 	add	r2,sp,r2
    1610:	11400003 	ldbu	r5,0(r2)
    1614:	01000074 	movhi	r4,1
    1618:	21244904 	addi	r4,r4,-28380
    161c:	0008efc0 	call	8efc <alt_printf>
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
    1620:	acab883a 	add	r21,r21,r18
    1624:	003fdb06 	br	1594 <__ram_exceptions_end+0xfdfff574>
					sum += IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1));
			sum = (sum / (step * step));
			sum = (sum * 92) / 255;		// scale grey count
			alt_printf("%c", char_grey[sum]);
		}
		alt_printf("\n");
    1628:	01000074 	movhi	r4,1
    162c:	21244804 	addi	r4,r4,-28384
    1630:	0008efc0 	call	8efc <alt_printf>
			47,99,76,92,122,114,115,55,84,105,118,74,116,67,123,51,70,41,73,108,
			40,120,90,102,89,53,83,50,101,97,106,111,49,52,91,110,117,121,69,93,
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
    1634:	8ca3883a 	add	r17,r17,r18
    1638:	003fcf06 	br	1578 <__ram_exceptions_end+0xfdfff558>
			sum = (sum * 92) / 255;		// scale grey count
			alt_printf("%c", char_grey[sum]);
		}
		alt_printf("\n");
	}
}
    163c:	dfc01f17 	ldw	ra,124(sp)
    1640:	ddc01e17 	ldw	r23,120(sp)
    1644:	dd801d17 	ldw	r22,116(sp)
    1648:	dd401c17 	ldw	r21,112(sp)
    164c:	dd001b17 	ldw	r20,108(sp)
    1650:	dcc01a17 	ldw	r19,104(sp)
    1654:	dc801917 	ldw	r18,100(sp)
    1658:	dc401817 	ldw	r17,96(sp)
    165c:	dc001717 	ldw	r16,92(sp)
    1660:	dec02004 	addi	sp,sp,128
    1664:	f800283a 	ret

00001668 <main>:

//////////////////////////////////////////////////////////////////////////////
int main()
{
    1668:	deffbd04 	addi	sp,sp,-268
	alt_u16 i;

	alt_u8 lcnt = 8;
	alt_u8 layers[8][32] = {
    166c:	01400074 	movhi	r5,1
    1670:	01804004 	movi	r6,256
    1674:	29644b04 	addi	r5,r5,-28372
    1678:	d809883a 	mov	r4,sp
	}
}

//////////////////////////////////////////////////////////////////////////////
int main()
{
    167c:	dc404115 	stw	r17,260(sp)
    1680:	dc004015 	stw	r16,256(sp)
    1684:	dfc04215 	stw	ra,264(sp)
	alt_u16 i;

	alt_u8 lcnt = 8;
	alt_u8 layers[8][32] = {
    1688:	0021883a 	mov	r16,zero
    168c:	0008da80 	call	8da8 <memcpy>
		"CNV[10,3,1]",	// Conv2D(filters=10, kernel=(3,3), strides=(1,1), padding='same', use_bias=False, activation='relu')
		"GAP[]",		// GlobalAveragePooling2D()
		"SMX[]"			// Activation('softmax')
	};

	for (i=0; i<lcnt; i++) {
    1690:	04404004 	movi	r17,256
		alt_printf("%s\n", layers[i]);
    1694:	01000074 	movhi	r4,1
    1698:	dc0b883a 	add	r5,sp,r16
    169c:	21244a04 	addi	r4,r4,-28376
    16a0:	84000804 	addi	r16,r16,32
    16a4:	0008efc0 	call	8efc <alt_printf>
		"CNV[10,3,1]",	// Conv2D(filters=10, kernel=(3,3), strides=(1,1), padding='same', use_bias=False, activation='relu')
		"GAP[]",		// GlobalAveragePooling2D()
		"SMX[]"			// Activation('softmax')
	};

	for (i=0; i<lcnt; i++) {
    16a8:	847ffa1e 	bne	r16,r17,1694 <__ram_exceptions_end+0xfdfff674>
		alt_printf("%s\n", layers[i]);
	}

	return 0;
}
    16ac:	0005883a 	mov	r2,zero
    16b0:	dfc04217 	ldw	ra,264(sp)
    16b4:	dc404117 	ldw	r17,260(sp)
    16b8:	dc004017 	ldw	r16,256(sp)
    16bc:	dec04304 	addi	sp,sp,268
    16c0:	f800283a 	ret

000016c4 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
    16c4:	31c0022e 	bgeu	r6,r7,16d0 <_out_buffer+0xc>
    ((char*)buffer)[idx] = character;
    16c8:	298d883a 	add	r6,r5,r6
    16cc:	31000005 	stb	r4,0(r6)
    16d0:	f800283a 	ret

000016d4 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    16d4:	f800283a 	ret

000016d8 <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
    16d8:	defff604 	addi	sp,sp,-40
    16dc:	dc800215 	stw	r18,8(sp)
    16e0:	dc800d17 	ldw	r18,52(sp)
    16e4:	dd800615 	stw	r22,24(sp)
    16e8:	dd400515 	stw	r21,20(sp)
    16ec:	dd000415 	stw	r20,16(sp)
    16f0:	dcc00315 	stw	r19,12(sp)
    16f4:	dc400115 	stw	r17,4(sp)
    16f8:	dc000015 	stw	r16,0(sp)
    16fc:	dfc00915 	stw	ra,36(sp)
    1700:	df000815 	stw	fp,32(sp)
    1704:	ddc00715 	stw	r23,28(sp)
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    1708:	908000cc 	andi	r2,r18,3
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
    170c:	2027883a 	mov	r19,r4
    1710:	2829883a 	mov	r20,r5
    1714:	3023883a 	mov	r17,r6
    1718:	382b883a 	mov	r21,r7
    171c:	dc000b17 	ldw	r16,44(sp)
    1720:	dd800c17 	ldw	r22,48(sp)
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    1724:	1000021e 	bne	r2,zero,1730 <_out_rev+0x58>
    1728:	81afc83a 	sub	r23,r16,r6
    172c:	00000406 	br	1740 <_out_rev+0x68>
    1730:	ddc00a17 	ldw	r23,40(sp)
    1734:	bc2f883a 	add	r23,r23,r16
    1738:	81a1883a 	add	r16,r16,r6
    173c:	00000906 	br	1764 <_out_rev+0x8c>
    for (size_t i = len; i < width; i++) {
    1740:	35c5883a 	add	r2,r6,r23
    1744:	15bffa2e 	bgeu	r2,r22,1730 <__ram_exceptions_end+0xfdfff710>
      out(' ', buffer, idx++, maxlen);
    1748:	a80f883a 	mov	r7,r21
    174c:	a00b883a 	mov	r5,r20
    1750:	01000804 	movi	r4,32
    1754:	37000044 	addi	fp,r6,1
    1758:	983ee83a 	callr	r19
    175c:	e00d883a 	mov	r6,fp
    1760:	003ff706 	br	1740 <__ram_exceptions_end+0xfdfff720>
    1764:	bdffffc4 	addi	r23,r23,-1
    }
  }

  // reverse string
  while (len) {
    1768:	34000726 	beq	r6,r16,1788 <_out_rev+0xb0>
    out(buf[--len], buffer, idx++, maxlen);
    176c:	b9000007 	ldb	r4,0(r23)
    1770:	a80f883a 	mov	r7,r21
    1774:	a00b883a 	mov	r5,r20
    1778:	37000044 	addi	fp,r6,1
    177c:	983ee83a 	callr	r19
    1780:	e00d883a 	mov	r6,fp
    1784:	003ff706 	br	1764 <__ram_exceptions_end+0xfdfff744>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    1788:	9480008c 	andi	r18,r18,2
    178c:	90000a26 	beq	r18,zero,17b8 <_out_rev+0xe0>
    while (idx - start_idx < width) {
    1790:	8445c83a 	sub	r2,r16,r17
    1794:	1580082e 	bgeu	r2,r22,17b8 <_out_rev+0xe0>
      out(' ', buffer, idx++, maxlen);
    1798:	800d883a 	mov	r6,r16
    179c:	84800044 	addi	r18,r16,1
    17a0:	a80f883a 	mov	r7,r21
    17a4:	a00b883a 	mov	r5,r20
    17a8:	01000804 	movi	r4,32
    17ac:	983ee83a 	callr	r19
    17b0:	9021883a 	mov	r16,r18
    17b4:	003ff606 	br	1790 <__ram_exceptions_end+0xfdfff770>
    }
  }

  return idx;
}
    17b8:	8005883a 	mov	r2,r16
    17bc:	dfc00917 	ldw	ra,36(sp)
    17c0:	df000817 	ldw	fp,32(sp)
    17c4:	ddc00717 	ldw	r23,28(sp)
    17c8:	dd800617 	ldw	r22,24(sp)
    17cc:	dd400517 	ldw	r21,20(sp)
    17d0:	dd000417 	ldw	r20,16(sp)
    17d4:	dcc00317 	ldw	r19,12(sp)
    17d8:	dc800217 	ldw	r18,8(sp)
    17dc:	dc400117 	ldw	r17,4(sp)
    17e0:	dc000017 	ldw	r16,0(sp)
    17e4:	dec00a04 	addi	sp,sp,40
    17e8:	f800283a 	ret

000017ec <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    17ec:	deffff04 	addi	sp,sp,-4
    17f0:	da000717 	ldw	r8,28(sp)
    17f4:	dfc00015 	stw	ra,0(sp)
    17f8:	d8c00117 	ldw	r3,4(sp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    17fc:	4300008c 	andi	r12,r8,2
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1800:	d8800217 	ldw	r2,8(sp)
    1804:	da800317 	ldw	r10,12(sp)
    1808:	dac00417 	ldw	r11,16(sp)
    180c:	db800517 	ldw	r14,20(sp)
    1810:	da400617 	ldw	r9,24(sp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    1814:	60001a1e 	bne	r12,zero,1880 <_ntoa_format+0x94>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    1818:	48000726 	beq	r9,zero,1838 <_ntoa_format+0x4c>
    181c:	4300004c 	andi	r12,r8,1
    1820:	60000526 	beq	r12,zero,1838 <_ntoa_format+0x4c>
    1824:	53003fcc 	andi	r12,r10,255
    1828:	6000021e 	bne	r12,zero,1834 <_ntoa_format+0x48>
    182c:	4300030c 	andi	r12,r8,12
    1830:	60000126 	beq	r12,zero,1838 <_ntoa_format+0x4c>
      width--;
    1834:	4a7fffc4 	addi	r9,r9,-1
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1838:	030007c4 	movi	r12,31
      buf[len++] = '0';
    183c:	03400c04 	movi	r13,48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1840:	13800436 	bltu	r2,r14,1854 <_ntoa_format+0x68>
      buf[len++] = '0';
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1844:	4340004c 	andi	r13,r8,1
    1848:	030007c4 	movi	r12,31
      buf[len++] = '0';
    184c:	03c00c04 	movi	r15,48
    1850:	00000a06 	br	187c <_ntoa_format+0x90>
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1854:	60bffb36 	bltu	r12,r2,1844 <__ram_exceptions_end+0xfdfff824>
      buf[len++] = '0';
    1858:	189f883a 	add	r15,r3,r2
    185c:	7b400005 	stb	r13,0(r15)
    1860:	10800044 	addi	r2,r2,1
    1864:	003ff606 	br	1840 <__ram_exceptions_end+0xfdfff820>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1868:	1240052e 	bgeu	r2,r9,1880 <_ntoa_format+0x94>
    186c:	60800436 	bltu	r12,r2,1880 <_ntoa_format+0x94>
      buf[len++] = '0';
    1870:	18bf883a 	add	ra,r3,r2
    1874:	fbc00005 	stb	r15,0(ra)
    1878:	10800044 	addi	r2,r2,1
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    187c:	683ffa1e 	bne	r13,zero,1868 <__ram_exceptions_end+0xfdfff848>
      buf[len++] = '0';
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    1880:	4300040c 	andi	r12,r8,16
    1884:	60002726 	beq	r12,zero,1924 <_ntoa_format+0x138>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    1888:	4301000c 	andi	r12,r8,1024
    188c:	03400404 	movi	r13,16
    1890:	6000091e 	bne	r12,zero,18b8 <_ntoa_format+0xcc>
    1894:	10000826 	beq	r2,zero,18b8 <_ntoa_format+0xcc>
    1898:	13800126 	beq	r2,r14,18a0 <_ntoa_format+0xb4>
    189c:	1240061e 	bne	r2,r9,18b8 <_ntoa_format+0xcc>
      len--;
    18a0:	133fffc4 	addi	r12,r2,-1
      if (len && (base == 16U)) {
    18a4:	60000326 	beq	r12,zero,18b4 <_ntoa_format+0xc8>
    18a8:	5b400f1e 	bne	r11,r13,18e8 <_ntoa_format+0xfc>
        len--;
    18ac:	10bfff84 	addi	r2,r2,-2
    18b0:	00000206 	br	18bc <_ntoa_format+0xd0>
    18b4:	0005883a 	mov	r2,zero
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    18b8:	5b400c1e 	bne	r11,r13,18ec <_ntoa_format+0x100>
    18bc:	42c0080c 	andi	r11,r8,32
    18c0:	030007c4 	movi	r12,31
    18c4:	5800041e 	bne	r11,zero,18d8 <_ntoa_format+0xec>
    18c8:	60802836 	bltu	r12,r2,196c <_ntoa_format+0x180>
      buf[len++] = 'x';
    18cc:	1897883a 	add	r11,r3,r2
    18d0:	03001e04 	movi	r12,120
    18d4:	00000b06 	br	1904 <_ntoa_format+0x118>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    18d8:	60802436 	bltu	r12,r2,196c <_ntoa_format+0x180>
      buf[len++] = 'X';
    18dc:	1897883a 	add	r11,r3,r2
    18e0:	03001604 	movi	r12,88
    18e4:	00000706 	br	1904 <_ntoa_format+0x118>
    18e8:	6005883a 	mov	r2,r12
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    18ec:	03000084 	movi	r12,2
    18f0:	5b00061e 	bne	r11,r12,190c <_ntoa_format+0x120>
    18f4:	02c007c4 	movi	r11,31
    18f8:	58801c36 	bltu	r11,r2,196c <_ntoa_format+0x180>
      buf[len++] = 'b';
    18fc:	1897883a 	add	r11,r3,r2
    1900:	03001884 	movi	r12,98
    1904:	5b000005 	stb	r12,0(r11)
    1908:	10800044 	addi	r2,r2,1
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    190c:	02c007c4 	movi	r11,31
    1910:	58801636 	bltu	r11,r2,196c <_ntoa_format+0x180>
      buf[len++] = '0';
    1914:	1897883a 	add	r11,r3,r2
    1918:	03000c04 	movi	r12,48
    191c:	5b000005 	stb	r12,0(r11)
    1920:	10800044 	addi	r2,r2,1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    1924:	02c007c4 	movi	r11,31
    1928:	58801036 	bltu	r11,r2,196c <_ntoa_format+0x180>
    if (negative) {
    192c:	52803fcc 	andi	r10,r10,255
    1930:	50000326 	beq	r10,zero,1940 <_ntoa_format+0x154>
      buf[len++] = '-';
    1934:	1895883a 	add	r10,r3,r2
    1938:	02c00b44 	movi	r11,45
    193c:	00000906 	br	1964 <_ntoa_format+0x178>
    }
    else if (flags & FLAGS_PLUS) {
    1940:	4280010c 	andi	r10,r8,4
    1944:	50000326 	beq	r10,zero,1954 <_ntoa_format+0x168>
      buf[len++] = '+';  // ignore the space if the '+' exists
    1948:	1895883a 	add	r10,r3,r2
    194c:	02c00ac4 	movi	r11,43
    1950:	00000406 	br	1964 <_ntoa_format+0x178>
    }
    else if (flags & FLAGS_SPACE) {
    1954:	4280020c 	andi	r10,r8,8
    1958:	50000426 	beq	r10,zero,196c <_ntoa_format+0x180>
      buf[len++] = ' ';
    195c:	1895883a 	add	r10,r3,r2
    1960:	02c00804 	movi	r11,32
    1964:	52c00005 	stb	r11,0(r10)
    1968:	10800044 	addi	r2,r2,1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    196c:	da000415 	stw	r8,16(sp)
    1970:	da400315 	stw	r9,12(sp)
    1974:	d8800215 	stw	r2,8(sp)
    1978:	d8c00115 	stw	r3,4(sp)
}
    197c:	dfc00017 	ldw	ra,0(sp)
    1980:	dec00104 	addi	sp,sp,4
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    1984:	00016d81 	jmpi	16d8 <_out_rev>

00001988 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1988:	deffe404 	addi	sp,sp,-112
    198c:	d8c01d17 	ldw	r3,116(sp)
    1990:	dc001215 	stw	r16,72(sp)
    1994:	dc001c17 	ldw	r16,112(sp)
    1998:	dd801815 	stw	r22,96(sp)
    199c:	dd401715 	stw	r21,92(sp)
    19a0:	dd001615 	stw	r20,88(sp)
    19a4:	dcc01515 	stw	r19,84(sp)
    19a8:	dc801415 	stw	r18,80(sp)
    19ac:	dfc01b15 	stw	ra,108(sp)
    19b0:	df001a15 	stw	fp,104(sp)
    19b4:	ddc01915 	stw	r23,100(sp)
    19b8:	dc401315 	stw	r17,76(sp)
    19bc:	d8c00f15 	stw	r3,60(sp)
    19c0:	2029883a 	mov	r20,r4
    19c4:	282b883a 	mov	r21,r5
    19c8:	302d883a 	mov	r22,r6
    19cc:	dcc01e17 	ldw	r19,120(sp)
    19d0:	dc802117 	ldw	r18,132(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
    19d4:	8000021e 	bne	r16,zero,19e0 <_ntoa_long+0x58>
    flags &= ~FLAGS_HASH;
    19d8:	00bffbc4 	movi	r2,-17
    19dc:	90a4703a 	and	r18,r18,r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    19e0:	9081000c 	andi	r2,r18,1024
    19e4:	10000126 	beq	r2,zero,19ec <_ntoa_long+0x64>
    19e8:	80002726 	beq	r16,zero,1a88 <_ntoa_long+0x100>
    19ec:	9080080c 	andi	r2,r18,32
    19f0:	10000226 	beq	r2,zero,19fc <_ntoa_long+0x74>
    19f4:	04401044 	movi	r17,65
    19f8:	00000106 	br	1a00 <_ntoa_long+0x78>
    19fc:	04401844 	movi	r17,97
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    1a00:	000d883a 	mov	r6,zero
    1a04:	07000244 	movi	fp,9
    1a08:	8c7ffd84 	addi	r17,r17,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1a0c:	05c00804 	movi	r23,32
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
    1a10:	8009883a 	mov	r4,r16
    1a14:	980b883a 	mov	r5,r19
    1a18:	d9801015 	stw	r6,64(sp)
    1a1c:	d9c01115 	stw	r7,68(sp)
    1a20:	0004b200 	call	4b20 <__umodsi3>
    1a24:	d9801017 	ldw	r6,64(sp)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    1a28:	11003fcc 	andi	r4,r2,255
    1a2c:	2100201c 	xori	r4,r4,128
    1a30:	213fe004 	addi	r4,r4,-128
    1a34:	32000044 	addi	r8,r6,1
    1a38:	d9c01117 	ldw	r7,68(sp)
    1a3c:	e1000216 	blt	fp,r4,1a48 <_ntoa_long+0xc0>
    1a40:	10800c04 	addi	r2,r2,48
    1a44:	00000106 	br	1a4c <_ntoa_long+0xc4>
    1a48:	8885883a 	add	r2,r17,r2
    1a4c:	d8c00704 	addi	r3,sp,28
    1a50:	198d883a 	add	r6,r3,r6
    1a54:	30800005 	stb	r2,0(r6)
      value /= base;
    1a58:	8009883a 	mov	r4,r16
    1a5c:	980b883a 	mov	r5,r19
    1a60:	d9c01115 	stw	r7,68(sp)
    1a64:	da001015 	stw	r8,64(sp)
    1a68:	0004abc0 	call	4abc <__udivsi3>
    1a6c:	1021883a 	mov	r16,r2
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1a70:	d9c01117 	ldw	r7,68(sp)
    1a74:	da001017 	ldw	r8,64(sp)
    1a78:	10000426 	beq	r2,zero,1a8c <_ntoa_long+0x104>
    1a7c:	400d883a 	mov	r6,r8
    1a80:	45ffe31e 	bne	r8,r23,1a10 <__ram_exceptions_end+0xfdfff9f0>
    1a84:	00000106 	br	1a8c <_ntoa_long+0x104>

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    1a88:	0011883a 	mov	r8,zero
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    1a8c:	d8802017 	ldw	r2,128(sp)
    1a90:	d8c00f17 	ldw	r3,60(sp)
    1a94:	dc800615 	stw	r18,24(sp)
    1a98:	d8800515 	stw	r2,20(sp)
    1a9c:	d8801f17 	ldw	r2,124(sp)
    1aa0:	1c803fcc 	andi	r18,r3,255
    1aa4:	dcc00315 	stw	r19,12(sp)
    1aa8:	d8800415 	stw	r2,16(sp)
    1aac:	d8800704 	addi	r2,sp,28
    1ab0:	dc800215 	stw	r18,8(sp)
    1ab4:	da000115 	stw	r8,4(sp)
    1ab8:	d8800015 	stw	r2,0(sp)
    1abc:	b00d883a 	mov	r6,r22
    1ac0:	a80b883a 	mov	r5,r21
    1ac4:	a009883a 	mov	r4,r20
    1ac8:	00017ec0 	call	17ec <_ntoa_format>
}
    1acc:	dfc01b17 	ldw	ra,108(sp)
    1ad0:	df001a17 	ldw	fp,104(sp)
    1ad4:	ddc01917 	ldw	r23,100(sp)
    1ad8:	dd801817 	ldw	r22,96(sp)
    1adc:	dd401717 	ldw	r21,92(sp)
    1ae0:	dd001617 	ldw	r20,88(sp)
    1ae4:	dcc01517 	ldw	r19,84(sp)
    1ae8:	dc801417 	ldw	r18,80(sp)
    1aec:	dc401317 	ldw	r17,76(sp)
    1af0:	dc001217 	ldw	r16,72(sp)
    1af4:	dec01c04 	addi	sp,sp,112
    1af8:	f800283a 	ret

00001afc <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1afc:	deffe204 	addi	sp,sp,-120
    1b00:	d8802017 	ldw	r2,128(sp)
    1b04:	da801e17 	ldw	r10,120(sp)
    1b08:	dac01f17 	ldw	r11,124(sp)
    1b0c:	dd801a15 	stw	r22,104(sp)
    1b10:	dd401915 	stw	r21,100(sp)
    1b14:	dd001815 	stw	r20,96(sp)
    1b18:	dcc01715 	stw	r19,92(sp)
    1b1c:	dc801615 	stw	r18,88(sp)
    1b20:	dc401515 	stw	r17,84(sp)
    1b24:	d8801015 	stw	r2,64(sp)
    1b28:	dfc01d15 	stw	ra,116(sp)
    1b2c:	df001c15 	stw	fp,112(sp)
    1b30:	ddc01b15 	stw	r23,108(sp)
    1b34:	dc001415 	stw	r16,80(sp)
    1b38:	d9000f15 	stw	r4,60(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
    1b3c:	52c4b03a 	or	r2,r10,r11


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1b40:	2829883a 	mov	r20,r5
    1b44:	302b883a 	mov	r21,r6
    1b48:	382d883a 	mov	r22,r7
    1b4c:	dc402117 	ldw	r17,132(sp)
    1b50:	dc802217 	ldw	r18,136(sp)
    1b54:	dcc02517 	ldw	r19,148(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
    1b58:	1000021e 	bne	r2,zero,1b64 <_ntoa_long_long+0x68>
    flags &= ~FLAGS_HASH;
    1b5c:	00fffbc4 	movi	r3,-17
    1b60:	98e6703a 	and	r19,r19,r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    1b64:	98c1000c 	andi	r3,r19,1024
    1b68:	18000126 	beq	r3,zero,1b70 <_ntoa_long_long+0x74>
    1b6c:	10002d26 	beq	r2,zero,1c24 <_ntoa_long_long+0x128>
    1b70:	9880080c 	andi	r2,r19,32
    1b74:	10000226 	beq	r2,zero,1b80 <_ntoa_long_long+0x84>
    1b78:	04001044 	movi	r16,65
    1b7c:	00000106 	br	1b84 <_ntoa_long_long+0x88>
    1b80:	04001844 	movi	r16,97
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    1b84:	0013883a 	mov	r9,zero
    1b88:	07000244 	movi	fp,9
    1b8c:	843ffd84 	addi	r16,r16,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1b90:	05c00804 	movi	r23,32
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
    1b94:	5009883a 	mov	r4,r10
    1b98:	580b883a 	mov	r5,r11
    1b9c:	880d883a 	mov	r6,r17
    1ba0:	900f883a 	mov	r7,r18
    1ba4:	da401115 	stw	r9,68(sp)
    1ba8:	da801215 	stw	r10,72(sp)
    1bac:	dac01315 	stw	r11,76(sp)
    1bb0:	00044000 	call	4400 <__umoddi3>
    1bb4:	da401117 	ldw	r9,68(sp)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    1bb8:	10c03fcc 	andi	r3,r2,255
    1bbc:	18c0201c 	xori	r3,r3,128
    1bc0:	18ffe004 	addi	r3,r3,-128
    1bc4:	4b000044 	addi	r12,r9,1
    1bc8:	da801217 	ldw	r10,72(sp)
    1bcc:	dac01317 	ldw	r11,76(sp)
    1bd0:	e0c00216 	blt	fp,r3,1bdc <_ntoa_long_long+0xe0>
    1bd4:	10800c04 	addi	r2,r2,48
    1bd8:	00000106 	br	1be0 <_ntoa_long_long+0xe4>
    1bdc:	8085883a 	add	r2,r16,r2
    1be0:	d8c00704 	addi	r3,sp,28
    1be4:	1a53883a 	add	r9,r3,r9
    1be8:	48800005 	stb	r2,0(r9)
      value /= base;
    1bec:	5009883a 	mov	r4,r10
    1bf0:	580b883a 	mov	r5,r11
    1bf4:	880d883a 	mov	r6,r17
    1bf8:	900f883a 	mov	r7,r18
    1bfc:	db001115 	stw	r12,68(sp)
    1c00:	0003e040 	call	3e04 <__udivdi3>
    1c04:	1015883a 	mov	r10,r2
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1c08:	10c4b03a 	or	r2,r2,r3
  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    1c0c:	1817883a 	mov	r11,r3
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1c10:	db001117 	ldw	r12,68(sp)
    1c14:	10000426 	beq	r2,zero,1c28 <_ntoa_long_long+0x12c>
    1c18:	6013883a 	mov	r9,r12
    1c1c:	65ffdd1e 	bne	r12,r23,1b94 <__ram_exceptions_end+0xfdfffb74>
    1c20:	00000106 	br	1c28 <_ntoa_long_long+0x12c>
// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    1c24:	0019883a 	mov	r12,zero
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    1c28:	d8802417 	ldw	r2,144(sp)
    1c2c:	d9000f17 	ldw	r4,60(sp)
    1c30:	dc400315 	stw	r17,12(sp)
    1c34:	d8800515 	stw	r2,20(sp)
    1c38:	d8802317 	ldw	r2,140(sp)
    1c3c:	d8c00704 	addi	r3,sp,28
    1c40:	dcc00615 	stw	r19,24(sp)
    1c44:	d8800415 	stw	r2,16(sp)
    1c48:	d8801017 	ldw	r2,64(sp)
    1c4c:	db000115 	stw	r12,4(sp)
    1c50:	d8c00015 	stw	r3,0(sp)
    1c54:	14403fcc 	andi	r17,r2,255
    1c58:	dc400215 	stw	r17,8(sp)
    1c5c:	b00f883a 	mov	r7,r22
    1c60:	a80d883a 	mov	r6,r21
    1c64:	a00b883a 	mov	r5,r20
    1c68:	00017ec0 	call	17ec <_ntoa_format>
}
    1c6c:	dfc01d17 	ldw	ra,116(sp)
    1c70:	df001c17 	ldw	fp,112(sp)
    1c74:	ddc01b17 	ldw	r23,108(sp)
    1c78:	dd801a17 	ldw	r22,104(sp)
    1c7c:	dd401917 	ldw	r21,100(sp)
    1c80:	dd001817 	ldw	r20,96(sp)
    1c84:	dcc01717 	ldw	r19,92(sp)
    1c88:	dc801617 	ldw	r18,88(sp)
    1c8c:	dc401517 	ldw	r17,84(sp)
    1c90:	dc001417 	ldw	r16,80(sp)
    1c94:	dec01e04 	addi	sp,sp,120
    1c98:	f800283a 	ret

00001c9c <_out_char>:

// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
    1c9c:	21003fcc 	andi	r4,r4,255
    1ca0:	2100201c 	xori	r4,r4,128
    1ca4:	213fe004 	addi	r4,r4,-128
    1ca8:	20000126 	beq	r4,zero,1cb0 <_out_char+0x14>
    _putchar(character);
    1cac:	000003c1 	jmpi	3c <_putchar>
    1cb0:	f800283a 	ret

00001cb4 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)idx; (void)maxlen;
  if (character) {
    1cb4:	21003fcc 	andi	r4,r4,255
    1cb8:	2100201c 	xori	r4,r4,128
    1cbc:	213fe004 	addi	r4,r4,-128
    1cc0:	20000326 	beq	r4,zero,1cd0 <_out_fct+0x1c>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
    1cc4:	28800017 	ldw	r2,0(r5)
    1cc8:	29400117 	ldw	r5,4(r5)
    1ccc:	1000683a 	jmp	r2
    1cd0:	f800283a 	ret

00001cd4 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    1cd4:	deffe104 	addi	sp,sp,-124
    1cd8:	dc401615 	stw	r17,88(sp)
    1cdc:	dc001515 	stw	r16,84(sp)
    1ce0:	dc401f17 	ldw	r17,124(sp)
    1ce4:	dc002017 	ldw	r16,128(sp)
    1ce8:	df001d15 	stw	fp,116(sp)
    1cec:	d9000d15 	stw	r4,52(sp)
    1cf0:	d9400e15 	stw	r5,56(sp)
    1cf4:	d9800f15 	stw	r6,60(sp)
    1cf8:	3839883a 	mov	fp,r7

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
    1cfc:	880d883a 	mov	r6,r17
    1d00:	800f883a 	mov	r7,r16
    1d04:	8809883a 	mov	r4,r17
    1d08:	800b883a 	mov	r5,r16
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    1d0c:	dd801b15 	stw	r22,108(sp)
    1d10:	dd001915 	stw	r20,100(sp)
    1d14:	dc801715 	stw	r18,92(sp)
    1d18:	dfc01e15 	stw	ra,120(sp)
    1d1c:	ddc01c15 	stw	r23,112(sp)
    1d20:	dd401a15 	stw	r21,104(sp)
    1d24:	dcc01815 	stw	r19,96(sp)
    1d28:	dc802117 	ldw	r18,132(sp)
    1d2c:	dd802217 	ldw	r22,136(sp)
    1d30:	dd002317 	ldw	r20,140(sp)

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
    1d34:	00074b80 	call	74b8 <__eqdf2>
    1d38:	10000726 	beq	r2,zero,1d58 <_ftoa+0x84>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    1d3c:	008000c4 	movi	r2,3
    1d40:	d8800115 	stw	r2,4(sp)
    1d44:	00800074 	movhi	r2,1
    1d48:	dd000315 	stw	r20,12(sp)
    1d4c:	dd800215 	stw	r22,8(sp)
    1d50:	10a48e04 	addi	r2,r2,-28104
    1d54:	00002106 	br	1ddc <_ftoa+0x108>
  if (value < -DBL_MAX)
    1d58:	01bfffc4 	movi	r6,-1
    1d5c:	01fffc34 	movhi	r7,65520
    1d60:	398f883a 	add	r7,r7,r6
    1d64:	8809883a 	mov	r4,r17
    1d68:	800b883a 	mov	r5,r16
    1d6c:	000761c0 	call	761c <__ledf2>
    1d70:	1000070e 	bge	r2,zero,1d90 <_ftoa+0xbc>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    1d74:	00800104 	movi	r2,4
    1d78:	d8800115 	stw	r2,4(sp)
    1d7c:	00800074 	movhi	r2,1
    1d80:	dd000315 	stw	r20,12(sp)
    1d84:	dd800215 	stw	r22,8(sp)
    1d88:	10a48f04 	addi	r2,r2,-28100
    1d8c:	00001306 	br	1ddc <_ftoa+0x108>
  if (value > DBL_MAX)
    1d90:	01bfffc4 	movi	r6,-1
    1d94:	01dffc34 	movhi	r7,32752
    1d98:	398f883a 	add	r7,r7,r6
    1d9c:	8809883a 	mov	r4,r17
    1da0:	800b883a 	mov	r5,r16
    1da4:	00075400 	call	7540 <__gedf2>
    1da8:	00800e0e 	bge	zero,r2,1de4 <_ftoa+0x110>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    1dac:	a080010c 	andi	r2,r20,4
    1db0:	10000426 	beq	r2,zero,1dc4 <_ftoa+0xf0>
    1db4:	00800074 	movhi	r2,1
    1db8:	10a48b04 	addi	r2,r2,-28116
    1dbc:	00c00104 	movi	r3,4
    1dc0:	00000306 	br	1dd0 <_ftoa+0xfc>
    1dc4:	00800074 	movhi	r2,1
    1dc8:	10a48d04 	addi	r2,r2,-28108
    1dcc:	00c000c4 	movi	r3,3
    1dd0:	dd000315 	stw	r20,12(sp)
    1dd4:	dd800215 	stw	r22,8(sp)
    1dd8:	d8c00115 	stw	r3,4(sp)
    1ddc:	d8800015 	stw	r2,0(sp)
    1de0:	0000f806 	br	21c4 <_ftoa+0x4f0>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
    1de4:	01d073b4 	movhi	r7,16846
    1de8:	000d883a 	mov	r6,zero
    1dec:	39f35944 	addi	r7,r7,-12955
    1df0:	8809883a 	mov	r4,r17
    1df4:	800b883a 	mov	r5,r16
    1df8:	00075400 	call	7540 <__gedf2>
    1dfc:	00800716 	blt	zero,r2,1e1c <_ftoa+0x148>
    1e00:	01f073b4 	movhi	r7,49614
    1e04:	000d883a 	mov	r6,zero
    1e08:	39f35944 	addi	r7,r7,-12955
    1e0c:	8809883a 	mov	r4,r17
    1e10:	800b883a 	mov	r5,r16
    1e14:	000761c0 	call	761c <__ledf2>
    1e18:	10000b0e 	bge	r2,zero,1e48 <_ftoa+0x174>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1e1c:	d9800f17 	ldw	r6,60(sp)
    1e20:	d9400e17 	ldw	r5,56(sp)
    1e24:	d9000d17 	ldw	r4,52(sp)
    1e28:	dd000415 	stw	r20,16(sp)
    1e2c:	dd800315 	stw	r22,12(sp)
    1e30:	dc800215 	stw	r18,8(sp)
    1e34:	dc400015 	stw	r17,0(sp)
    1e38:	dc000115 	stw	r16,4(sp)
    1e3c:	e00f883a 	mov	r7,fp
    1e40:	00022080 	call	2208 <_etoa>
    1e44:	0000e406 	br	21d8 <_ftoa+0x504>
#endif
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
    1e48:	000d883a 	mov	r6,zero
    1e4c:	000f883a 	mov	r7,zero
    1e50:	8809883a 	mov	r4,r17
    1e54:	800b883a 	mov	r5,r16
    1e58:	000761c0 	call	761c <__ledf2>
    1e5c:	10000a0e 	bge	r2,zero,1e88 <_ftoa+0x1b4>
    negative = true;
    value = 0 - value;
    1e60:	880d883a 	mov	r6,r17
    1e64:	800f883a 	mov	r7,r16
    1e68:	0009883a 	mov	r4,zero
    1e6c:	000b883a 	mov	r5,zero
    1e70:	0007f7c0 	call	7f7c <__subdf3>
    1e74:	1023883a 	mov	r17,r2
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
    negative = true;
    1e78:	00800044 	movi	r2,1
    value = 0 - value;
    1e7c:	1821883a 	mov	r16,r3
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
    negative = true;
    1e80:	d8801005 	stb	r2,64(sp)
    1e84:	00000106 	br	1e8c <_ftoa+0x1b8>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
    1e88:	d8001005 	stb	zero,64(sp)
    negative = true;
    value = 0 - value;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    1e8c:	a081000c 	andi	r2,r20,1024
    1e90:	1000011e 	bne	r2,zero,1e98 <_ftoa+0x1c4>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    1e94:	04800184 	movi	r18,6
    1e98:	002b883a 	mov	r21,zero
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1e9c:	00800244 	movi	r2,9
    buf[len++] = '0';
    1ea0:	00c00c04 	movi	r3,48
  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1ea4:	01000804 	movi	r4,32
    1ea8:	1480062e 	bgeu	r2,r18,1ec4 <_ftoa+0x1f0>
    buf[len++] = '0';
    1eac:	d9800504 	addi	r6,sp,20
    1eb0:	354b883a 	add	r5,r6,r21
    1eb4:	28c00005 	stb	r3,0(r5)
    1eb8:	ad400044 	addi	r21,r21,1
    prec--;
    1ebc:	94bfffc4 	addi	r18,r18,-1
  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1ec0:	a93ff91e 	bne	r21,r4,1ea8 <__ram_exceptions_end+0xfdfffe88>
    buf[len++] = '0';
    prec--;
  }

  int whole = (int)value;
    1ec4:	800b883a 	mov	r5,r16
    1ec8:	8809883a 	mov	r4,r17
    1ecc:	00088780 	call	8878 <__fixdfsi>
    1ed0:	1027883a 	mov	r19,r2
  double tmp = (value - whole) * pow10[prec];
    1ed4:	900490fa 	slli	r2,r18,3
    1ed8:	00c00074 	movhi	r3,1
    1edc:	18e49104 	addi	r3,r3,-28092
    1ee0:	1885883a 	add	r2,r3,r2
    1ee4:	10c00017 	ldw	r3,0(r2)
    1ee8:	10800117 	ldw	r2,4(r2)
    1eec:	9809883a 	mov	r4,r19
    1ef0:	d8c01115 	stw	r3,68(sp)
    1ef4:	d8801215 	stw	r2,72(sp)
    1ef8:	00088f80 	call	88f8 <__floatsidf>
    1efc:	100d883a 	mov	r6,r2
    1f00:	180f883a 	mov	r7,r3
    1f04:	8809883a 	mov	r4,r17
    1f08:	800b883a 	mov	r5,r16
    1f0c:	0007f7c0 	call	7f7c <__subdf3>
    1f10:	d9801117 	ldw	r6,68(sp)
    1f14:	d9c01217 	ldw	r7,72(sp)
    1f18:	1009883a 	mov	r4,r2
    1f1c:	180b883a 	mov	r5,r3
    1f20:	00077100 	call	7710 <__muldf3>
  unsigned long frac = (unsigned long)tmp;
    1f24:	180b883a 	mov	r5,r3
    1f28:	1009883a 	mov	r4,r2
    1f2c:	d8c01415 	stw	r3,80(sp)
    1f30:	d8801315 	stw	r2,76(sp)
    1f34:	0003d900 	call	3d90 <__fixunsdfsi>
  diff = tmp - frac;
    1f38:	1009883a 	mov	r4,r2
    prec--;
  }

  int whole = (int)value;
  double tmp = (value - whole) * pow10[prec];
  unsigned long frac = (unsigned long)tmp;
    1f3c:	102f883a 	mov	r23,r2
  diff = tmp - frac;
    1f40:	00089d40 	call	89d4 <__floatunsidf>
    1f44:	da401417 	ldw	r9,80(sp)
    1f48:	da801317 	ldw	r10,76(sp)
    1f4c:	100d883a 	mov	r6,r2
    1f50:	480b883a 	mov	r5,r9
    1f54:	5009883a 	mov	r4,r10
    1f58:	180f883a 	mov	r7,r3
    1f5c:	0007f7c0 	call	7f7c <__subdf3>

  if (diff > 0.5) {
    1f60:	180b883a 	mov	r5,r3
    1f64:	000d883a 	mov	r6,zero
    1f68:	01cff834 	movhi	r7,16352
    1f6c:	1009883a 	mov	r4,r2
    1f70:	d8c01315 	stw	r3,76(sp)
    1f74:	d8801415 	stw	r2,80(sp)
    1f78:	00075400 	call	7540 <__gedf2>
    1f7c:	d8c01317 	ldw	r3,76(sp)
    1f80:	da401417 	ldw	r9,80(sp)
    1f84:	00800c0e 	bge	zero,r2,1fb8 <_ftoa+0x2e4>
    ++frac;
    1f88:	bdc00044 	addi	r23,r23,1
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    1f8c:	b809883a 	mov	r4,r23
    1f90:	00089d40 	call	89d4 <__floatunsidf>
    1f94:	d9001117 	ldw	r4,68(sp)
    1f98:	d9401217 	ldw	r5,72(sp)
    1f9c:	100d883a 	mov	r6,r2
    1fa0:	180f883a 	mov	r7,r3
    1fa4:	000761c0 	call	761c <__ledf2>
    1fa8:	00800d16 	blt	zero,r2,1fe0 <_ftoa+0x30c>
      frac = 0;
      ++whole;
    1fac:	9cc00044 	addi	r19,r19,1

  if (diff > 0.5) {
    ++frac;
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
      frac = 0;
    1fb0:	002f883a 	mov	r23,zero
    1fb4:	00000a06 	br	1fe0 <_ftoa+0x30c>
      ++whole;
    }
  }
  else if (diff < 0.5) {
    1fb8:	000d883a 	mov	r6,zero
    1fbc:	01cff834 	movhi	r7,16352
    1fc0:	4809883a 	mov	r4,r9
    1fc4:	180b883a 	mov	r5,r3
    1fc8:	000761c0 	call	761c <__ledf2>
    1fcc:	10000416 	blt	r2,zero,1fe0 <_ftoa+0x30c>
  }
  else if ((frac == 0U) || (frac & 1U)) {
    1fd0:	b8000226 	beq	r23,zero,1fdc <_ftoa+0x308>
    1fd4:	b880004c 	andi	r2,r23,1
    1fd8:	10000126 	beq	r2,zero,1fe0 <_ftoa+0x30c>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
    1fdc:	bdc00044 	addi	r23,r23,1
  }

  if (prec == 0U) {
    1fe0:	9000191e 	bne	r18,zero,2048 <_ftoa+0x374>
    diff = value - (double)whole;
    1fe4:	9809883a 	mov	r4,r19
    1fe8:	00088f80 	call	88f8 <__floatsidf>
    1fec:	8809883a 	mov	r4,r17
    1ff0:	800b883a 	mov	r5,r16
    1ff4:	100d883a 	mov	r6,r2
    1ff8:	180f883a 	mov	r7,r3
    1ffc:	0007f7c0 	call	7f7c <__subdf3>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    2000:	000d883a 	mov	r6,zero
    2004:	01cff834 	movhi	r7,16352
    2008:	1009883a 	mov	r4,r2
    200c:	180b883a 	mov	r5,r3
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
  }

  if (prec == 0U) {
    diff = value - (double)whole;
    2010:	1023883a 	mov	r17,r2
    2014:	1821883a 	mov	r16,r3
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    2018:	000761c0 	call	761c <__ledf2>
    201c:	1000060e 	bge	r2,zero,2038 <_ftoa+0x364>
    2020:	000d883a 	mov	r6,zero
    2024:	01cff834 	movhi	r7,16352
    2028:	8809883a 	mov	r4,r17
    202c:	800b883a 	mov	r5,r16
    2030:	00075400 	call	7540 <__gedf2>
    2034:	0080240e 	bge	zero,r2,20c8 <_ftoa+0x3f4>
    2038:	9880004c 	andi	r2,r19,1
    203c:	10002226 	beq	r2,zero,20c8 <_ftoa+0x3f4>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    2040:	9cc00044 	addi	r19,r19,1
    2044:	00002006 	br	20c8 <_ftoa+0x3f4>
  else if ((frac == 0U) || (frac & 1U)) {
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
  }

  if (prec == 0U) {
    2048:	a805883a 	mov	r2,r21
    }
  }
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    204c:	04400804 	movi	r17,32
    2050:	14402f26 	beq	r2,r17,2110 <_ftoa+0x43c>
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
    2054:	d9000504 	addi	r4,sp,20
    2058:	20a1883a 	add	r16,r4,r2
    205c:	01400284 	movi	r5,10
    2060:	b809883a 	mov	r4,r23
    2064:	15400044 	addi	r21,r2,1
    2068:	0004b200 	call	4b20 <__umodsi3>
    206c:	10800c04 	addi	r2,r2,48
      if (!(frac /= 10U)) {
    2070:	b809883a 	mov	r4,r23
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
    2074:	80800005 	stb	r2,0(r16)
      if (!(frac /= 10U)) {
    2078:	01400284 	movi	r5,10
    207c:	0004abc0 	call	4abc <__udivsi3>
    2080:	102f883a 	mov	r23,r2
  }
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
    2084:	94bfffc4 	addi	r18,r18,-1
      buf[len++] = (char)(48U + (frac % 10U));
    2088:	a805883a 	mov	r2,r21
      if (!(frac /= 10U)) {
    208c:	b83ff01e 	bne	r23,zero,2050 <__ram_exceptions_end+0xfe000030>
    2090:	9565883a 	add	r18,r18,r21
        break;
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    2094:	01400804 	movi	r5,32
      buf[len++] = '0';
    2098:	01800c04 	movi	r6,48
      if (!(frac /= 10U)) {
        break;
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    209c:	11401c26 	beq	r2,r5,2110 <_ftoa+0x43c>
    20a0:	d9000504 	addi	r4,sp,20
    20a4:	2087883a 	add	r3,r4,r2
    20a8:	11000044 	addi	r4,r2,1
    20ac:	14800326 	beq	r2,r18,20bc <_ftoa+0x3e8>
      buf[len++] = '0';
    20b0:	19800005 	stb	r6,0(r3)
    20b4:	2005883a 	mov	r2,r4
    20b8:	003ff806 	br	209c <__ram_exceptions_end+0xfe00007c>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
      // add decimal
      buf[len++] = '.';
    20bc:	00800b84 	movi	r2,46
    20c0:	202b883a 	mov	r21,r4
    20c4:	18800005 	stb	r2,0(r3)
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
    20c8:	a805883a 	mov	r2,r21
      buf[len++] = '.';
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    20cc:	04800804 	movi	r18,32
    20d0:	14800f26 	beq	r2,r18,2110 <_ftoa+0x43c>
    buf[len++] = (char)(48 + (whole % 10));
    20d4:	d9400504 	addi	r5,sp,20
    20d8:	28a3883a 	add	r17,r5,r2
    20dc:	9809883a 	mov	r4,r19
    20e0:	01400284 	movi	r5,10
    20e4:	14000044 	addi	r16,r2,1
    20e8:	0004a480 	call	4a48 <__modsi3>
    20ec:	10800c04 	addi	r2,r2,48
    if (!(whole /= 10)) {
    20f0:	9809883a 	mov	r4,r19
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    buf[len++] = (char)(48 + (whole % 10));
    20f4:	88800005 	stb	r2,0(r17)
    if (!(whole /= 10)) {
    20f8:	01400284 	movi	r5,10
    20fc:	00049c40 	call	49c4 <__divsi3>
    2100:	1027883a 	mov	r19,r2
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    buf[len++] = (char)(48 + (whole % 10));
    2104:	8005883a 	mov	r2,r16
    if (!(whole /= 10)) {
    2108:	983ff11e 	bne	r19,zero,20d0 <__ram_exceptions_end+0xfe0000b0>
    210c:	00000106 	br	2114 <_ftoa+0x440>
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
    2110:	04000804 	movi	r16,32
      break;
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    2114:	a0c000cc 	andi	r3,r20,3
    2118:	00800044 	movi	r2,1
    211c:	18800f1e 	bne	r3,r2,215c <_ftoa+0x488>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    2120:	b0000e26 	beq	r22,zero,215c <_ftoa+0x488>
    2124:	d8801003 	ldbu	r2,64(sp)
    2128:	1000021e 	bne	r2,zero,2134 <_ftoa+0x460>
    212c:	a080030c 	andi	r2,r20,12
    2130:	10000126 	beq	r2,zero,2138 <_ftoa+0x464>
      width--;
    2134:	b5bfffc4 	addi	r22,r22,-1
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    2138:	00800804 	movi	r2,32
      buf[len++] = '0';
    213c:	00c00c04 	movi	r3,48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    2140:	8580062e 	bgeu	r16,r22,215c <_ftoa+0x488>
    2144:	80801a26 	beq	r16,r2,21b0 <_ftoa+0x4dc>
      buf[len++] = '0';
    2148:	d9800504 	addi	r6,sp,20
    214c:	3409883a 	add	r4,r6,r16
    2150:	20c00005 	stb	r3,0(r4)
    2154:	84000044 	addi	r16,r16,1
    2158:	003ff906 	br	2140 <__ram_exceptions_end+0xfe000120>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    215c:	008007c4 	movi	r2,31
    2160:	14001336 	bltu	r2,r16,21b0 <_ftoa+0x4dc>
    if (negative) {
    2164:	d8801003 	ldbu	r2,64(sp)
    2168:	10000426 	beq	r2,zero,217c <_ftoa+0x4a8>
      buf[len++] = '-';
    216c:	d8c00504 	addi	r3,sp,20
    2170:	1c05883a 	add	r2,r3,r16
    2174:	00c00b44 	movi	r3,45
    2178:	00000b06 	br	21a8 <_ftoa+0x4d4>
    }
    else if (flags & FLAGS_PLUS) {
    217c:	a080010c 	andi	r2,r20,4
    2180:	10000426 	beq	r2,zero,2194 <_ftoa+0x4c0>
      buf[len++] = '+';  // ignore the space if the '+' exists
    2184:	d9000504 	addi	r4,sp,20
    2188:	2405883a 	add	r2,r4,r16
    218c:	00c00ac4 	movi	r3,43
    2190:	00000506 	br	21a8 <_ftoa+0x4d4>
    }
    else if (flags & FLAGS_SPACE) {
    2194:	a080020c 	andi	r2,r20,8
    2198:	10000526 	beq	r2,zero,21b0 <_ftoa+0x4dc>
      buf[len++] = ' ';
    219c:	d9400504 	addi	r5,sp,20
    21a0:	2c05883a 	add	r2,r5,r16
    21a4:	00c00804 	movi	r3,32
    21a8:	10c00005 	stb	r3,0(r2)
    21ac:	84000044 	addi	r16,r16,1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    21b0:	d9800504 	addi	r6,sp,20
    21b4:	dd000315 	stw	r20,12(sp)
    21b8:	dd800215 	stw	r22,8(sp)
    21bc:	dc000115 	stw	r16,4(sp)
    21c0:	d9800015 	stw	r6,0(sp)
    21c4:	d9800f17 	ldw	r6,60(sp)
    21c8:	d9400e17 	ldw	r5,56(sp)
    21cc:	d9000d17 	ldw	r4,52(sp)
    21d0:	e00f883a 	mov	r7,fp
    21d4:	00016d80 	call	16d8 <_out_rev>
}
    21d8:	dfc01e17 	ldw	ra,120(sp)
    21dc:	df001d17 	ldw	fp,116(sp)
    21e0:	ddc01c17 	ldw	r23,112(sp)
    21e4:	dd801b17 	ldw	r22,108(sp)
    21e8:	dd401a17 	ldw	r21,104(sp)
    21ec:	dd001917 	ldw	r20,100(sp)
    21f0:	dcc01817 	ldw	r19,96(sp)
    21f4:	dc801717 	ldw	r18,92(sp)
    21f8:	dc401617 	ldw	r17,88(sp)
    21fc:	dc001517 	ldw	r16,84(sp)
    2200:	dec01f04 	addi	sp,sp,124
    2204:	f800283a 	ret

00002208 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    2208:	deffe504 	addi	sp,sp,-108
    220c:	dd401615 	stw	r21,88(sp)
    2210:	dc401215 	stw	r17,72(sp)
    2214:	dd401c17 	ldw	r21,112(sp)
    2218:	dc401b17 	ldw	r17,108(sp)
    221c:	d8801e17 	ldw	r2,120(sp)
    2220:	d9000615 	stw	r4,24(sp)
    2224:	d9400715 	stw	r5,28(sp)
    2228:	d9800b15 	stw	r6,44(sp)
    222c:	d9c00815 	stw	r7,32(sp)
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    2230:	880d883a 	mov	r6,r17
    2234:	a80f883a 	mov	r7,r21
    2238:	8809883a 	mov	r4,r17
    223c:	a80b883a 	mov	r5,r21


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    2240:	dd801715 	stw	r22,92(sp)
    2244:	dd001515 	stw	r20,84(sp)
    2248:	dfc01a15 	stw	ra,104(sp)
    224c:	df001915 	stw	fp,100(sp)
    2250:	ddc01815 	stw	r23,96(sp)
    2254:	dcc01415 	stw	r19,80(sp)
    2258:	dc801315 	stw	r18,76(sp)
    225c:	dc001115 	stw	r16,68(sp)
    2260:	dd001d17 	ldw	r20,116(sp)
    2264:	d8800a15 	stw	r2,40(sp)
    2268:	dd801f17 	ldw	r22,124(sp)
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    226c:	00074b80 	call	74b8 <__eqdf2>
    2270:	10000e1e 	bne	r2,zero,22ac <_etoa+0xa4>
    2274:	01bfffc4 	movi	r6,-1
    2278:	01dffc34 	movhi	r7,32752
    227c:	398f883a 	add	r7,r7,r6
    2280:	8809883a 	mov	r4,r17
    2284:	a80b883a 	mov	r5,r21
    2288:	00075400 	call	7540 <__gedf2>
    228c:	00800716 	blt	zero,r2,22ac <_etoa+0xa4>
    2290:	01bfffc4 	movi	r6,-1
    2294:	01fffc34 	movhi	r7,65520
    2298:	398f883a 	add	r7,r7,r6
    229c:	8809883a 	mov	r4,r17
    22a0:	a80b883a 	mov	r5,r21
    22a4:	000761c0 	call	761c <__ledf2>
    22a8:	1000160e 	bge	r2,zero,2304 <_etoa+0xfc>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    22ac:	d8c00a17 	ldw	r3,40(sp)
    22b0:	d9c00817 	ldw	r7,32(sp)
    22b4:	d9800b17 	ldw	r6,44(sp)
    22b8:	d9400717 	ldw	r5,28(sp)
    22bc:	d9000617 	ldw	r4,24(sp)
    22c0:	dd801f15 	stw	r22,124(sp)
    22c4:	d8c01e15 	stw	r3,120(sp)
    22c8:	dd001d15 	stw	r20,116(sp)
    22cc:	dc401b15 	stw	r17,108(sp)
    22d0:	dd401c15 	stw	r21,112(sp)
    if (flags & FLAGS_LEFT) {
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
    22d4:	dfc01a17 	ldw	ra,104(sp)
    22d8:	df001917 	ldw	fp,100(sp)
    22dc:	ddc01817 	ldw	r23,96(sp)
    22e0:	dd801717 	ldw	r22,92(sp)
    22e4:	dd401617 	ldw	r21,88(sp)
    22e8:	dd001517 	ldw	r20,84(sp)
    22ec:	dcc01417 	ldw	r19,80(sp)
    22f0:	dc801317 	ldw	r18,76(sp)
    22f4:	dc401217 	ldw	r17,72(sp)
    22f8:	dc001117 	ldw	r16,68(sp)
    22fc:	dec01b04 	addi	sp,sp,108
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    2300:	0001cd41 	jmpi	1cd4 <_ftoa>
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
    2304:	000d883a 	mov	r6,zero
    2308:	000f883a 	mov	r7,zero
    230c:	8809883a 	mov	r4,r17
    2310:	a80b883a 	mov	r5,r21
    2314:	000761c0 	call	761c <__ledf2>
    value = -value;
    2318:	dc400c15 	stw	r17,48(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
    231c:	1000020e 	bge	r2,zero,2328 <_etoa+0x120>
    value = -value;
    2320:	aca0003c 	xorhi	r18,r21,32768
    2324:	00000106 	br	232c <_etoa+0x124>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
    2328:	a825883a 	mov	r18,r21
    value = -value;
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
    232c:	b101000c 	andi	r4,r22,1024
    2330:	d9000915 	stw	r4,36(sp)
    2334:	2000011e 	bne	r4,zero,233c <_etoa+0x134>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    2338:	05000184 	movi	r20,6

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    233c:	9008d53a 	srli	r4,r18,20
    2340:	2101ffcc 	andi	r4,r4,2047
    2344:	213f0044 	addi	r4,r4,-1023
    2348:	00088f80 	call	88f8 <__floatsidf>
    234c:	019427f4 	movhi	r6,20639
    2350:	01cff4f4 	movhi	r7,16339
    2354:	319e7ec4 	addi	r6,r6,31227
    2358:	39d104c4 	addi	r7,r7,17427
    235c:	1009883a 	mov	r4,r2
    2360:	180b883a 	mov	r5,r3
    2364:	00077100 	call	7710 <__muldf3>
    2368:	01a2d874 	movhi	r6,35681
    236c:	01cff1f4 	movhi	r7,16327
    2370:	31b22cc4 	addi	r6,r6,-14157
    2374:	39e28a04 	addi	r7,r7,-30168
    2378:	1009883a 	mov	r4,r2
    237c:	180b883a 	mov	r5,r3
    2380:	000623c0 	call	623c <__adddf3>
    double   F;
  } conv;

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    2384:	01400434 	movhi	r5,16
    2388:	297fffc4 	addi	r5,r5,-1
    238c:	914a703a 	and	r5,r18,r5
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    2390:	000d883a 	mov	r6,zero
    2394:	01cffe34 	movhi	r7,16376
    2398:	8809883a 	mov	r4,r17
    239c:	294ffc34 	orhi	r5,r5,16368
    23a0:	1027883a 	mov	r19,r2
    23a4:	1821883a 	mov	r16,r3
    23a8:	0007f7c0 	call	7f7c <__subdf3>
    23ac:	0198dbf4 	movhi	r6,25455
    23b0:	01cff4f4 	movhi	r7,16339
    23b4:	3190d844 	addi	r6,r6,17249
    23b8:	39e1e9c4 	addi	r7,r7,-30809
    23bc:	1009883a 	mov	r4,r2
    23c0:	180b883a 	mov	r5,r3
    23c4:	00077100 	call	7710 <__muldf3>
    23c8:	100d883a 	mov	r6,r2
    23cc:	180f883a 	mov	r7,r3
    23d0:	9809883a 	mov	r4,r19
    23d4:	800b883a 	mov	r5,r16
    23d8:	000623c0 	call	623c <__adddf3>
    23dc:	180b883a 	mov	r5,r3
    23e0:	1009883a 	mov	r4,r2
    23e4:	00088780 	call	8878 <__fixdfsi>
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    23e8:	1009883a 	mov	r4,r2

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    23ec:	1021883a 	mov	r16,r2
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    23f0:	00088f80 	call	88f8 <__floatsidf>
    23f4:	01825eb4 	movhi	r6,2426
    23f8:	01d002f4 	movhi	r7,16395
    23fc:	31a8dc44 	addi	r6,r6,-23695
    2400:	39e4d3c4 	addi	r7,r7,-27825
    2404:	1009883a 	mov	r4,r2
    2408:	180b883a 	mov	r5,r3
    240c:	102f883a 	mov	r23,r2
    2410:	1827883a 	mov	r19,r3
    2414:	00077100 	call	7710 <__muldf3>
    2418:	000d883a 	mov	r6,zero
    241c:	01cff834 	movhi	r7,16352
    2420:	1009883a 	mov	r4,r2
    2424:	180b883a 	mov	r5,r3
    2428:	000623c0 	call	623c <__adddf3>
    242c:	180b883a 	mov	r5,r3
    2430:	1009883a 	mov	r4,r2
    2434:	00088780 	call	8878 <__fixdfsi>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    2438:	01aeed74 	movhi	r6,48053
    243c:	01d000b4 	movhi	r7,16386
    2440:	980b883a 	mov	r5,r19
    2444:	31954584 	addi	r6,r6,21782
    2448:	39daec44 	addi	r7,r7,27569
    244c:	b809883a 	mov	r4,r23
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    2450:	d8800d15 	stw	r2,52(sp)
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    2454:	00077100 	call	7710 <__muldf3>
    2458:	d9000d17 	ldw	r4,52(sp)
    245c:	102f883a 	mov	r23,r2
    2460:	1827883a 	mov	r19,r3
    2464:	00088f80 	call	88f8 <__floatsidf>
    2468:	01bfbeb4 	movhi	r6,65274
    246c:	01cff9b4 	movhi	r7,16358
    2470:	318e7bc4 	addi	r6,r6,14831
    2474:	39cb9084 	addi	r7,r7,11842
    2478:	1009883a 	mov	r4,r2
    247c:	180b883a 	mov	r5,r3
    2480:	00077100 	call	7710 <__muldf3>
    2484:	b809883a 	mov	r4,r23
    2488:	980b883a 	mov	r5,r19
    248c:	100d883a 	mov	r6,r2
    2490:	180f883a 	mov	r7,r3
    2494:	0007f7c0 	call	7f7c <__subdf3>
  const double z2 = z * z;
    2498:	100d883a 	mov	r6,r2
    249c:	180f883a 	mov	r7,r3
    24a0:	1009883a 	mov	r4,r2
    24a4:	180b883a 	mov	r5,r3
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    24a8:	1839883a 	mov	fp,r3
  const double z2 = z * z;
    24ac:	d8800e15 	stw	r2,56(sp)
    24b0:	00077100 	call	7710 <__muldf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    24b4:	da400e17 	ldw	r9,56(sp)
    24b8:	e00f883a 	mov	r7,fp
    24bc:	e00b883a 	mov	r5,fp
    24c0:	480d883a 	mov	r6,r9
    24c4:	4809883a 	mov	r4,r9
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
    24c8:	1027883a 	mov	r19,r2
    24cc:	182f883a 	mov	r23,r3
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    24d0:	000623c0 	call	623c <__adddf3>
    24d4:	9809883a 	mov	r4,r19
    24d8:	b80b883a 	mov	r5,r23
    24dc:	000d883a 	mov	r6,zero
    24e0:	01d00b34 	movhi	r7,16428
    24e4:	d8c01015 	stw	r3,64(sp)
    24e8:	d8800f15 	stw	r2,60(sp)
    24ec:	0006ae80 	call	6ae8 <__divdf3>
    24f0:	000d883a 	mov	r6,zero
    24f4:	01d00934 	movhi	r7,16420
    24f8:	1009883a 	mov	r4,r2
    24fc:	180b883a 	mov	r5,r3
    2500:	000623c0 	call	623c <__adddf3>
    2504:	9809883a 	mov	r4,r19
    2508:	b80b883a 	mov	r5,r23
    250c:	100d883a 	mov	r6,r2
    2510:	180f883a 	mov	r7,r3
    2514:	0006ae80 	call	6ae8 <__divdf3>
    2518:	000d883a 	mov	r6,zero
    251c:	01d00634 	movhi	r7,16408
    2520:	1009883a 	mov	r4,r2
    2524:	180b883a 	mov	r5,r3
    2528:	000623c0 	call	623c <__adddf3>
    252c:	9809883a 	mov	r4,r19
    2530:	b80b883a 	mov	r5,r23
    2534:	100d883a 	mov	r6,r2
    2538:	180f883a 	mov	r7,r3
    253c:	0006ae80 	call	6ae8 <__divdf3>
    2540:	da400e17 	ldw	r9,56(sp)
    2544:	e00f883a 	mov	r7,fp
    2548:	0009883a 	mov	r4,zero
    254c:	480d883a 	mov	r6,r9
    2550:	01500034 	movhi	r5,16384
    2554:	102f883a 	mov	r23,r2
    2558:	1827883a 	mov	r19,r3
    255c:	0007f7c0 	call	7f7c <__subdf3>
    2560:	b809883a 	mov	r4,r23
    2564:	100d883a 	mov	r6,r2
    2568:	180f883a 	mov	r7,r3
    256c:	980b883a 	mov	r5,r19
    2570:	000623c0 	call	623c <__adddf3>
    2574:	dac00f17 	ldw	r11,60(sp)
    2578:	da801017 	ldw	r10,64(sp)
    257c:	100d883a 	mov	r6,r2
    2580:	5809883a 	mov	r4,r11
    2584:	500b883a 	mov	r5,r10
    2588:	180f883a 	mov	r7,r3
    258c:	0006ae80 	call	6ae8 <__divdf3>
    2590:	000d883a 	mov	r6,zero
    2594:	01cffc34 	movhi	r7,16368
    2598:	1009883a 	mov	r4,r2
    259c:	180b883a 	mov	r5,r3
    25a0:	000623c0 	call	623c <__adddf3>
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
    25a4:	d9000d17 	ldw	r4,52(sp)
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    25a8:	000d883a 	mov	r6,zero
    25ac:	180b883a 	mov	r5,r3
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
    25b0:	21c0ffc4 	addi	r7,r4,1023
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    25b4:	380e953a 	slli	r7,r7,20
    25b8:	1009883a 	mov	r4,r2
    25bc:	00077100 	call	7710 <__muldf3>
  // correct for rounding errors
  if (value < conv.F) {
    25c0:	180f883a 	mov	r7,r3
    25c4:	100d883a 	mov	r6,r2
    25c8:	8809883a 	mov	r4,r17
    25cc:	900b883a 	mov	r5,r18
    25d0:	d8c00e15 	stw	r3,56(sp)
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    25d4:	102f883a 	mov	r23,r2
  // correct for rounding errors
  if (value < conv.F) {
    25d8:	000761c0 	call	761c <__ledf2>
    25dc:	d8c00e17 	ldw	r3,56(sp)
    25e0:	1000070e 	bge	r2,zero,2600 <_etoa+0x3f8>
    expval--;
    conv.F /= 10;
    25e4:	b809883a 	mov	r4,r23
    25e8:	000d883a 	mov	r6,zero
    25ec:	01d00934 	movhi	r7,16420
    25f0:	180b883a 	mov	r5,r3
    25f4:	0006ae80 	call	6ae8 <__divdf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
  // correct for rounding errors
  if (value < conv.F) {
    expval--;
    25f8:	843fffc4 	addi	r16,r16,-1
    conv.F /= 10;
    25fc:	102f883a 	mov	r23,r2
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    2600:	808018c4 	addi	r2,r16,99
    2604:	04c03184 	movi	r19,198
    2608:	98a7403a 	cmpgeu	r19,r19,r2
    260c:	00800144 	movi	r2,5
    2610:	14e7c83a 	sub	r19,r2,r19

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
    2614:	b082000c 	andi	r2,r22,2048
    2618:	10001f26 	beq	r2,zero,2698 <_etoa+0x490>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
    261c:	01bac734 	movhi	r6,60188
    2620:	01cfc6b4 	movhi	r7,16154
    2624:	3190cb44 	addi	r6,r6,17197
    2628:	39cdb884 	addi	r7,r7,14050
    262c:	8809883a 	mov	r4,r17
    2630:	900b883a 	mov	r5,r18
    2634:	d8c00e15 	stw	r3,56(sp)
    2638:	00075400 	call	7540 <__gedf2>
    263c:	d8c00e17 	ldw	r3,56(sp)
    2640:	10001116 	blt	r2,zero,2688 <_etoa+0x480>
    2644:	01d04bf4 	movhi	r7,16687
    2648:	000d883a 	mov	r6,zero
    264c:	39e12004 	addi	r7,r7,-31616
    2650:	8809883a 	mov	r4,r17
    2654:	900b883a 	mov	r5,r18
    2658:	000761c0 	call	761c <__ledf2>
    265c:	d8c00e17 	ldw	r3,56(sp)
    2660:	1000090e 	bge	r2,zero,2688 <_etoa+0x480>
      if ((int)prec > expval) {
    2664:	8500030e 	bge	r16,r20,2674 <_etoa+0x46c>
        prec = (unsigned)((int)prec - expval - 1);
    2668:	a429c83a 	sub	r20,r20,r16
    266c:	a53fffc4 	addi	r20,r20,-1
    2670:	00000106 	br	2678 <_etoa+0x470>
      }
      else {
        prec = 0;
    2674:	0029883a 	mov	r20,zero
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
    2678:	b5810014 	ori	r22,r22,1024
      // no characters in exponent
      minwidth = 0U;
    267c:	0027883a 	mov	r19,zero
      expval   = 0;
    2680:	0021883a 	mov	r16,zero
    2684:	00000406 	br	2698 <_etoa+0x490>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
    2688:	a0000326 	beq	r20,zero,2698 <_etoa+0x490>
    268c:	d8800917 	ldw	r2,36(sp)
    2690:	10000126 	beq	r2,zero,2698 <_etoa+0x490>
        --prec;
    2694:	a53fffc4 	addi	r20,r20,-1
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
  if (width > minwidth) {
    2698:	d9000a17 	ldw	r4,40(sp)
    269c:	9900022e 	bgeu	r19,r4,26a8 <_etoa+0x4a0>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
    26a0:	24f9c83a 	sub	fp,r4,r19
    26a4:	00000106 	br	26ac <_etoa+0x4a4>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
    26a8:	0039883a 	mov	fp,zero
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
    26ac:	b080008c 	andi	r2,r22,2
    26b0:	d8800915 	stw	r2,36(sp)
    26b4:	10000226 	beq	r2,zero,26c0 <_etoa+0x4b8>
    26b8:	98000126 	beq	r19,zero,26c0 <_etoa+0x4b8>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
    26bc:	0039883a 	mov	fp,zero
  }

  // rescale the float value
  if (expval) {
    26c0:	80000726 	beq	r16,zero,26e0 <_etoa+0x4d8>
    value /= conv.F;
    26c4:	900b883a 	mov	r5,r18
    26c8:	b80d883a 	mov	r6,r23
    26cc:	180f883a 	mov	r7,r3
    26d0:	8809883a 	mov	r4,r17
    26d4:	0006ae80 	call	6ae8 <__divdf3>
    26d8:	d8800c15 	stw	r2,48(sp)
    26dc:	1825883a 	mov	r18,r3
  }

  // output the floating part
  const size_t start_idx = idx;
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
    26e0:	000d883a 	mov	r6,zero
    26e4:	000f883a 	mov	r7,zero
    26e8:	8809883a 	mov	r4,r17
    26ec:	a80b883a 	mov	r5,r21
    26f0:	000761c0 	call	761c <__ledf2>
    26f4:	1000010e 	bge	r2,zero,26fc <_etoa+0x4f4>
    26f8:	94a0003c 	xorhi	r18,r18,32768
    26fc:	d8c00c17 	ldw	r3,48(sp)
    2700:	00bdffc4 	movi	r2,-2049
    2704:	d9c00817 	ldw	r7,32(sp)
    2708:	d9800b17 	ldw	r6,44(sp)
    270c:	d9400717 	ldw	r5,28(sp)
    2710:	d9000617 	ldw	r4,24(sp)
    2714:	b084703a 	and	r2,r22,r2
    2718:	d8800415 	stw	r2,16(sp)
    271c:	df000315 	stw	fp,12(sp)
    2720:	dd000215 	stw	r20,8(sp)
    2724:	d8c00015 	stw	r3,0(sp)
    2728:	dc800115 	stw	r18,4(sp)
    272c:	0001cd40 	call	1cd4 <_ftoa>

  // output the exponent part
  if (minwidth) {
    2730:	98002b26 	beq	r19,zero,27e0 <_etoa+0x5d8>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    2734:	b0c0080c 	andi	r3,r22,32
    2738:	1800021e 	bne	r3,zero,2744 <_etoa+0x53c>
    273c:	01001944 	movi	r4,101
    2740:	00000106 	br	2748 <_etoa+0x540>
    2744:	01001144 	movi	r4,69
    2748:	100d883a 	mov	r6,r2
    274c:	14400044 	addi	r17,r2,1
    2750:	d9c00817 	ldw	r7,32(sp)
    2754:	d8800617 	ldw	r2,24(sp)
    2758:	d9400717 	ldw	r5,28(sp)
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    275c:	9cffffc4 	addi	r19,r19,-1
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);

  // output the exponent part
  if (minwidth) {
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    2760:	103ee83a 	callr	r2
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    2764:	00800144 	movi	r2,5
    2768:	d8800515 	stw	r2,20(sp)
    276c:	00800284 	movi	r2,10
    2770:	d8800215 	stw	r2,8(sp)
    2774:	8004d7fa 	srli	r2,r16,31
    2778:	dcc00415 	stw	r19,16(sp)
    277c:	d8000315 	stw	zero,12(sp)
    2780:	d8800115 	stw	r2,4(sp)
    2784:	8000010e 	bge	r16,zero,278c <_etoa+0x584>
    2788:	0421c83a 	sub	r16,zero,r16
    278c:	d9c00817 	ldw	r7,32(sp)
    2790:	d9400717 	ldw	r5,28(sp)
    2794:	d9000617 	ldw	r4,24(sp)
    2798:	dc000015 	stw	r16,0(sp)
    279c:	880d883a 	mov	r6,r17
    27a0:	00019880 	call	1988 <_ntoa_long>
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
    27a4:	d8c00917 	ldw	r3,36(sp)
    27a8:	18000d26 	beq	r3,zero,27e0 <_etoa+0x5d8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    27ac:	d9000b17 	ldw	r4,44(sp)
    27b0:	1107c83a 	sub	r3,r2,r4
    27b4:	d9000a17 	ldw	r4,40(sp)
    27b8:	1900092e 	bgeu	r3,r4,27e0 <_etoa+0x5d8>
    27bc:	14000044 	addi	r16,r2,1
    27c0:	100d883a 	mov	r6,r2
    27c4:	d9c00817 	ldw	r7,32(sp)
    27c8:	d8800617 	ldw	r2,24(sp)
    27cc:	d9400717 	ldw	r5,28(sp)
    27d0:	01000804 	movi	r4,32
    27d4:	103ee83a 	callr	r2
    27d8:	8005883a 	mov	r2,r16
    27dc:	003ff306 	br	27ac <__ram_exceptions_end+0xfe00078c>
    }
  }
  return idx;
}
    27e0:	dfc01a17 	ldw	ra,104(sp)
    27e4:	df001917 	ldw	fp,100(sp)
    27e8:	ddc01817 	ldw	r23,96(sp)
    27ec:	dd801717 	ldw	r22,92(sp)
    27f0:	dd401617 	ldw	r21,88(sp)
    27f4:	dd001517 	ldw	r20,84(sp)
    27f8:	dcc01417 	ldw	r19,80(sp)
    27fc:	dc801317 	ldw	r18,76(sp)
    2800:	dc401217 	ldw	r17,72(sp)
    2804:	dc001117 	ldw	r16,68(sp)
    2808:	dec01b04 	addi	sp,sp,108
    280c:	f800283a 	ret

00002810 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    2810:	deffeb04 	addi	sp,sp,-84
    2814:	df001315 	stw	fp,76(sp)
    2818:	dd000f15 	stw	r20,60(sp)
    281c:	dc800d15 	stw	r18,52(sp)
    2820:	dfc01415 	stw	ra,80(sp)
    2824:	ddc01215 	stw	r23,72(sp)
    2828:	dd801115 	stw	r22,68(sp)
    282c:	dd401015 	stw	r21,64(sp)
    2830:	dcc00e15 	stw	r19,56(sp)
    2834:	dc400c15 	stw	r17,48(sp)
    2838:	dc000b15 	stw	r16,44(sp)
    283c:	2829883a 	mov	r20,r5
    2840:	3025883a 	mov	r18,r6
    2844:	df001517 	ldw	fp,84(sp)
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    2848:	2800031e 	bne	r5,zero,2858 <_vsnprintf+0x48>
    // use null output function
    out = _out_null;
    284c:	04c00034 	movhi	r19,0
    2850:	9cc5b504 	addi	r19,r19,5844
    2854:	00000106 	br	285c <_vsnprintf+0x4c>
    2858:	2027883a 	mov	r19,r4
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    285c:	002d883a 	mov	r22,zero
  if (!buffer) {
    // use null output function
    out = _out_null;
  }

  while (*format)
    2860:	39000007 	ldb	r4,0(r7)
    2864:	20005126 	beq	r4,zero,29ac <_vsnprintf+0x19c>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    2868:	00800944 	movi	r2,37
    286c:	3c400044 	addi	r17,r7,1
    2870:	20800726 	beq	r4,r2,2890 <_vsnprintf+0x80>
      // no
      out(*format, buffer, idx++, maxlen);
    2874:	900f883a 	mov	r7,r18
    2878:	b00d883a 	mov	r6,r22
    287c:	a00b883a 	mov	r5,r20
    2880:	983ee83a 	callr	r19
    2884:	b4000044 	addi	r16,r22,1
      format++;
    2888:	880f883a 	mov	r7,r17
    288c:	00004506 	br	29a4 <_vsnprintf+0x194>
    2890:	880f883a 	mov	r7,r17
      // yes, evaluate it
      format++;
    }

    // evaluate flags
    flags = 0U;
    2894:	0021883a 	mov	r16,zero
    do {
      switch (*format) {
    2898:	01400804 	movi	r5,32
    289c:	018008c4 	movi	r6,35
    28a0:	39000003 	ldbu	r4,0(r7)
    28a4:	00c00ac4 	movi	r3,43
    28a8:	382f883a 	mov	r23,r7
    28ac:	20803fcc 	andi	r2,r4,255
    28b0:	1080201c 	xori	r2,r2,128
    28b4:	10bfe004 	addi	r2,r2,-128
    28b8:	10c00d26 	beq	r2,r3,28f0 <_vsnprintf+0xe0>
    28bc:	18800416 	blt	r3,r2,28d0 <_vsnprintf+0xc0>
    28c0:	11400d26 	beq	r2,r5,28f8 <_vsnprintf+0xe8>
    28c4:	1180401e 	bne	r2,r6,29c8 <_vsnprintf+0x1b8>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    28c8:	84000414 	ori	r16,r16,16
    28cc:	00003c06 	br	29c0 <_vsnprintf+0x1b0>
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    28d0:	00c00b44 	movi	r3,45
    28d4:	10c00426 	beq	r2,r3,28e8 <_vsnprintf+0xd8>
    28d8:	00c00c04 	movi	r3,48
    28dc:	10c03a1e 	bne	r2,r3,29c8 <_vsnprintf+0x1b8>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    28e0:	84000054 	ori	r16,r16,1
    28e4:	00003606 	br	29c0 <_vsnprintf+0x1b0>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    28e8:	84000094 	ori	r16,r16,2
    28ec:	00003406 	br	29c0 <_vsnprintf+0x1b0>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    28f0:	84000114 	ori	r16,r16,4
    28f4:	00003206 	br	29c0 <_vsnprintf+0x1b0>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    28f8:	84000214 	ori	r16,r16,8
    28fc:	00003006 	br	29c0 <_vsnprintf+0x1b0>
      flags |= FLAGS_PRECISION;
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
    2900:	10803fcc 	andi	r2,r2,255
    2904:	1080201c 	xori	r2,r2,128
    2908:	10bfe004 	addi	r2,r2,-128
    290c:	01000a84 	movi	r4,42
    2910:	11005b1e 	bne	r2,r4,2a80 <_vsnprintf+0x270>
        const int prec = (int)va_arg(va, int);
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2914:	e0800017 	ldw	r2,0(fp)
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
        const int prec = (int)va_arg(va, int);
    2918:	e1000104 	addi	r4,fp,4
        precision = prec > 0 ? (unsigned int)prec : 0U;
    291c:	1000010e 	bge	r2,zero,2924 <_vsnprintf+0x114>
    2920:	0005883a 	mov	r2,zero
        format++;
    2924:	bc400084 	addi	r17,r23,2
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
        const int prec = (int)va_arg(va, int);
    2928:	2039883a 	mov	fp,r4
        format++;
      }
    }

    // evaluate length field
    switch (*format) {
    292c:	89000007 	ldb	r4,0(r17)
    2930:	01401b04 	movi	r5,108
    2934:	21405a26 	beq	r4,r5,2aa0 <_vsnprintf+0x290>
    2938:	2900530e 	bge	r5,r4,2a88 <_vsnprintf+0x278>
    293c:	01401d04 	movi	r5,116
    2940:	21406226 	beq	r4,r5,2acc <_vsnprintf+0x2bc>
    2944:	01401e84 	movi	r5,122
    2948:	21406026 	beq	r4,r5,2acc <_vsnprintf+0x2bc>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    294c:	89c00003 	ldbu	r7,0(r17)
    2950:	01401944 	movi	r5,101
    2954:	39003fcc 	andi	r4,r7,255
    2958:	2100201c 	xori	r4,r4,128
    295c:	213fe004 	addi	r4,r4,-128
    2960:	21412a26 	beq	r4,r5,2e0c <_vsnprintf+0x5fc>
    2964:	29006516 	blt	r5,r4,2afc <_vsnprintf+0x2ec>
    2968:	014011c4 	movi	r5,71
    296c:	21412726 	beq	r4,r5,2e0c <_vsnprintf+0x5fc>
    2970:	29005916 	blt	r5,r4,2ad8 <_vsnprintf+0x2c8>
    2974:	01401144 	movi	r5,69
    2978:	21412426 	beq	r4,r5,2e0c <_vsnprintf+0x5fc>
    297c:	29011216 	blt	r5,r4,2dc8 <_vsnprintf+0x5b8>
    2980:	00800944 	movi	r2,37
    2984:	2081b51e 	bne	r4,r2,305c <_vsnprintf+0x84c>
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    2988:	b4000044 	addi	r16,r22,1
    298c:	900f883a 	mov	r7,r18
    2990:	b00d883a 	mov	r6,r22
    2994:	a00b883a 	mov	r5,r20
    2998:	01000944 	movi	r4,37
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    299c:	983ee83a 	callr	r19
        format++;
    29a0:	89c00044 	addi	r7,r17,1
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    29a4:	802d883a 	mov	r22,r16
        format++;
        break;
    29a8:	003fad06 	br	2860 <__ram_exceptions_end+0xfe000840>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    29ac:	b4800236 	bltu	r22,r18,29b8 <_vsnprintf+0x1a8>
    29b0:	91bfffc4 	addi	r6,r18,-1
    29b4:	0001c406 	br	30c8 <_vsnprintf+0x8b8>
    29b8:	b00d883a 	mov	r6,r22
    29bc:	0001c206 	br	30c8 <_vsnprintf+0x8b8>
    29c0:	39c00044 	addi	r7,r7,1
    29c4:	003fb606 	br	28a0 <__ram_exceptions_end+0xfe000880>
      }
    } while (n);

    // evaluate width field
    width = 0U;
    if (_is_digit(*format)) {
    29c8:	213ff404 	addi	r4,r4,-48
    29cc:	21003fcc 	andi	r4,r4,255
    29d0:	01400244 	movi	r5,9
    29d4:	2901a62e 	bgeu	r5,r4,3070 <_vsnprintf+0x860>
      width = _atoi(&format);
    }
    else if (*format == '*') {
    29d8:	01000a84 	movi	r4,42
    29dc:	11000a1e 	bne	r2,r4,2a08 <_vsnprintf+0x1f8>
      const int w = va_arg(va, int);
    29e0:	e2400017 	ldw	r9,0(fp)
    29e4:	e0800104 	addi	r2,fp,4
      if (w < 0) {
    29e8:	4800030e 	bge	r9,zero,29f8 <_vsnprintf+0x1e8>
        flags |= FLAGS_LEFT;    // reverse padding
    29ec:	84000094 	ori	r16,r16,2
        width = (unsigned int)-w;
    29f0:	026bc83a 	sub	r21,zero,r9
    29f4:	00000106 	br	29fc <_vsnprintf+0x1ec>
      }
      else {
        width = (unsigned int)w;
    29f8:	482b883a 	mov	r21,r9
      }
      format++;
    29fc:	3dc00044 	addi	r23,r7,1
    width = 0U;
    if (_is_digit(*format)) {
      width = _atoi(&format);
    }
    else if (*format == '*') {
      const int w = va_arg(va, int);
    2a00:	1039883a 	mov	fp,r2
    2a04:	00000106 	br	2a0c <_vsnprintf+0x1fc>
        default :                                   n = 0U; break;
      }
    } while (n);

    // evaluate width field
    width = 0U;
    2a08:	002b883a 	mov	r21,zero
      format++;
    }

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
    2a0c:	b9000007 	ldb	r4,0(r23)
    2a10:	00800b84 	movi	r2,46
    2a14:	2080191e 	bne	r4,r2,2a7c <_vsnprintf+0x26c>
      flags |= FLAGS_PRECISION;
      format++;
      if (_is_digit(*format)) {
    2a18:	b8800043 	ldbu	r2,1(r23)
    2a1c:	01000244 	movi	r4,9
    }

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
      flags |= FLAGS_PRECISION;
    2a20:	84010014 	ori	r16,r16,1024
      format++;
      if (_is_digit(*format)) {
    2a24:	117ff404 	addi	r5,r2,-48
    2a28:	29403fcc 	andi	r5,r5,255

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
      flags |= FLAGS_PRECISION;
      format++;
    2a2c:	bc400044 	addi	r17,r23,1
      if (_is_digit(*format)) {
    2a30:	217fb336 	bltu	r4,r5,2900 <__ram_exceptions_end+0xfe0008e0>
    2a34:	0005883a 	mov	r2,zero

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
  while (_is_digit(**str)) {
    2a38:	202f883a 	mov	r23,r4
    2a3c:	88c00003 	ldbu	r3,0(r17)
    2a40:	193ff404 	addi	r4,r3,-48
    2a44:	21003fcc 	andi	r4,r4,255
    2a48:	b93fb836 	bltu	r23,r4,292c <__ram_exceptions_end+0xfe00090c>
    2a4c:	01400284 	movi	r5,10
    2a50:	1009883a 	mov	r4,r2
    2a54:	d8c00915 	stw	r3,36(sp)
    2a58:	0004b780 	call	4b78 <__mulsi3>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2a5c:	d8c00917 	ldw	r3,36(sp)
    2a60:	10bff404 	addi	r2,r2,-48
    2a64:	8c400044 	addi	r17,r17,1
    2a68:	18c03fcc 	andi	r3,r3,255
    2a6c:	18c0201c 	xori	r3,r3,128
    2a70:	18ffe004 	addi	r3,r3,-128
    2a74:	1885883a 	add	r2,r3,r2
    2a78:	003ff006 	br	2a3c <__ram_exceptions_end+0xfe000a1c>
    2a7c:	b823883a 	mov	r17,r23
      }
      format++;
    }

    // evaluate precision field
    precision = 0U;
    2a80:	0005883a 	mov	r2,zero
    2a84:	003fa906 	br	292c <__ram_exceptions_end+0xfe00090c>
        format++;
      }
    }

    // evaluate length field
    switch (*format) {
    2a88:	01401a04 	movi	r5,104
    2a8c:	21400826 	beq	r4,r5,2ab0 <_vsnprintf+0x2a0>
    2a90:	01401a84 	movi	r5,106
    2a94:	217fad1e 	bne	r4,r5,294c <__ram_exceptions_end+0xfe00092c>
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2a98:	84008014 	ori	r16,r16,512
    2a9c:	00000c06 	br	2ad0 <_vsnprintf+0x2c0>
    // evaluate length field
    switch (*format) {
      case 'l' :
        flags |= FLAGS_LONG;
        format++;
        if (*format == 'l') {
    2aa0:	89400047 	ldb	r5,1(r17)
    2aa4:	2900091e 	bne	r5,r4,2acc <_vsnprintf+0x2bc>
          flags |= FLAGS_LONG_LONG;
    2aa8:	8400c014 	ori	r16,r16,768
    2aac:	00000506 	br	2ac4 <_vsnprintf+0x2b4>
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
        format++;
        if (*format == 'h') {
    2ab0:	89400047 	ldb	r5,1(r17)
    2ab4:	29000226 	beq	r5,r4,2ac0 <_vsnprintf+0x2b0>
          flags |= FLAGS_LONG_LONG;
          format++;
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
    2ab8:	84002014 	ori	r16,r16,128
    2abc:	00000406 	br	2ad0 <_vsnprintf+0x2c0>
        format++;
        if (*format == 'h') {
          flags |= FLAGS_CHAR;
    2ac0:	84003014 	ori	r16,r16,192
          format++;
    2ac4:	8c400084 	addi	r17,r17,2
    2ac8:	003fa006 	br	294c <__ram_exceptions_end+0xfe00092c>
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2acc:	84004014 	ori	r16,r16,256
        format++;
    2ad0:	8c400044 	addi	r17,r17,1
        break;
    2ad4:	003f9d06 	br	294c <__ram_exceptions_end+0xfe00092c>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    2ad8:	01401884 	movi	r5,98
    2adc:	21402926 	beq	r4,r5,2b84 <_vsnprintf+0x374>
    2ae0:	29000216 	blt	r5,r4,2aec <_vsnprintf+0x2dc>
    2ae4:	01401604 	movi	r5,88
    2ae8:	00002506 	br	2b80 <_vsnprintf+0x370>
    2aec:	014018c4 	movi	r5,99
    2af0:	2140e426 	beq	r4,r5,2e84 <_vsnprintf+0x674>
    2af4:	01401904 	movi	r5,100
    2af8:	00002106 	br	2b80 <_vsnprintf+0x370>
    2afc:	01401bc4 	movi	r5,111
    2b00:	21402026 	beq	r4,r5,2b84 <_vsnprintf+0x374>
    2b04:	29000516 	blt	r5,r4,2b1c <_vsnprintf+0x30c>
    2b08:	014019c4 	movi	r5,103
    2b0c:	2140bf26 	beq	r4,r5,2e0c <_vsnprintf+0x5fc>
    2b10:	2140ad16 	blt	r4,r5,2dc8 <_vsnprintf+0x5b8>
    2b14:	01401a44 	movi	r5,105
    2b18:	00001906 	br	2b80 <_vsnprintf+0x370>
    2b1c:	01401cc4 	movi	r5,115
    2b20:	21410226 	beq	r4,r5,2f2c <_vsnprintf+0x71c>
    2b24:	29001316 	blt	r5,r4,2b74 <_vsnprintf+0x364>
    2b28:	01401c04 	movi	r5,112
    2b2c:	21414b1e 	bne	r4,r5,305c <_vsnprintf+0x84c>
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2b30:	d8800315 	stw	r2,12(sp)
    2b34:	84000854 	ori	r16,r16,33
    2b38:	01000204 	movi	r4,8
    2b3c:	00800404 	movi	r2,16
    2b40:	d9000415 	stw	r4,16(sp)
    2b44:	dc000515 	stw	r16,20(sp)
    2b48:	d8800215 	stw	r2,8(sp)
    2b4c:	d8000115 	stw	zero,4(sp)
    2b50:	e0800017 	ldw	r2,0(fp)
    2b54:	900f883a 	mov	r7,r18
    2b58:	b00d883a 	mov	r6,r22
    2b5c:	d8800015 	stw	r2,0(sp)
    2b60:	a00b883a 	mov	r5,r20
    2b64:	9809883a 	mov	r4,r19
    2b68:	e5c00104 	addi	r23,fp,4
    2b6c:	00019880 	call	1988 <_ntoa_long>
    2b70:	00013606 	br	304c <_vsnprintf+0x83c>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    2b74:	01401d44 	movi	r5,117
    2b78:	21400226 	beq	r4,r5,2b84 <_vsnprintf+0x374>
    2b7c:	01401e04 	movi	r5,120
    2b80:	2141361e 	bne	r4,r5,305c <_vsnprintf+0x84c>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    2b84:	01401e04 	movi	r5,120
    2b88:	21400f26 	beq	r4,r5,2bc8 <_vsnprintf+0x3b8>
    2b8c:	01401604 	movi	r5,88
    2b90:	21400c26 	beq	r4,r5,2bc4 <_vsnprintf+0x3b4>
          base = 16U;
        }
        else if (*format == 'o') {
    2b94:	01401bc4 	movi	r5,111
    2b98:	21414726 	beq	r4,r5,30b8 <_vsnprintf+0x8a8>
          base =  8U;
        }
        else if (*format == 'b') {
    2b9c:	01401884 	movi	r5,98
    2ba0:	21414726 	beq	r4,r5,30c0 <_vsnprintf+0x8b0>
          base =  2U;
        }
        else {
          base = 10U;
          flags &= ~FLAGS_HASH;   // no hash for dec format
    2ba4:	017ffbc4 	movi	r5,-17
    2ba8:	8160703a 	and	r16,r16,r5
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    2bac:	01401a44 	movi	r5,105
        }
        else if (*format == 'b') {
          base =  2U;
        }
        else {
          base = 10U;
    2bb0:	01800284 	movi	r6,10
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    2bb4:	21400726 	beq	r4,r5,2bd4 <_vsnprintf+0x3c4>
    2bb8:	01401904 	movi	r5,100
    2bbc:	21400526 	beq	r4,r5,2bd4 <_vsnprintf+0x3c4>
    2bc0:	00000206 	br	2bcc <_vsnprintf+0x3bc>
          base = 10U;
          flags &= ~FLAGS_HASH;   // no hash for dec format
        }
        // uppercase
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
    2bc4:	84000814 	ori	r16,r16,32
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
          base = 16U;
    2bc8:	01800404 	movi	r6,16
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2bcc:	017ffcc4 	movi	r5,-13
    2bd0:	8160703a 	and	r16,r16,r5
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    2bd4:	8141000c 	andi	r5,r16,1024
    2bd8:	28000226 	beq	r5,zero,2be4 <_vsnprintf+0x3d4>
          flags &= ~FLAGS_ZEROPAD;
    2bdc:	017fff84 	movi	r5,-2
    2be0:	8160703a 	and	r16,r16,r5
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    2be4:	01c01a44 	movi	r7,105
    2be8:	8140800c 	andi	r5,r16,512
    2bec:	21c00226 	beq	r4,r7,2bf8 <_vsnprintf+0x3e8>
    2bf0:	01c01904 	movi	r7,100
    2bf4:	21c0391e 	bne	r4,r7,2cdc <_vsnprintf+0x4cc>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    2bf8:	28001226 	beq	r5,zero,2c44 <_vsnprintf+0x434>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    2bfc:	e1000117 	ldw	r4,4(fp)
    2c00:	e1400017 	ldw	r5,0(fp)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2c04:	d8800515 	stw	r2,20(sp)
    2c08:	2004d7fa 	srli	r2,r4,31
    2c0c:	dc000715 	stw	r16,28(sp)
    2c10:	dd400615 	stw	r21,24(sp)
    2c14:	d8800215 	stw	r2,8(sp)
    2c18:	d9800315 	stw	r6,12(sp)
    2c1c:	d8000415 	stw	zero,16(sp)
        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
          // signed
          if (flags & FLAGS_LONG_LONG) {
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    2c20:	e5c00204 	addi	r23,fp,8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2c24:	2005883a 	mov	r2,r4
    2c28:	2000040e 	bge	r4,zero,2c3c <_vsnprintf+0x42c>
    2c2c:	014bc83a 	sub	r5,zero,r5
    2c30:	2808c03a 	cmpne	r4,r5,zero
    2c34:	0085c83a 	sub	r2,zero,r2
    2c38:	1105c83a 	sub	r2,r2,r4
    2c3c:	d9400015 	stw	r5,0(sp)
    2c40:	00003106 	br	2d08 <_vsnprintf+0x4f8>
#endif
          }
          else if (flags & FLAGS_LONG) {
    2c44:	8100400c 	andi	r4,r16,256
    2c48:	e5c00104 	addi	r23,fp,4
    2c4c:	20000b26 	beq	r4,zero,2c7c <_vsnprintf+0x46c>
            const long value = va_arg(va, long);
    2c50:	e1000017 	ldw	r4,0(fp)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2c54:	d8800315 	stw	r2,12(sp)
    2c58:	dc000515 	stw	r16,20(sp)
    2c5c:	2004d7fa 	srli	r2,r4,31
    2c60:	dd400415 	stw	r21,16(sp)
    2c64:	d9800215 	stw	r6,8(sp)
    2c68:	d8800115 	stw	r2,4(sp)
    2c6c:	2005883a 	mov	r2,r4
    2c70:	2000370e 	bge	r4,zero,2d50 <_vsnprintf+0x540>
    2c74:	0105c83a 	sub	r2,zero,r4
    2c78:	00003506 	br	2d50 <_vsnprintf+0x540>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2c7c:	8140100c 	andi	r5,r16,64
    2c80:	e1000017 	ldw	r4,0(fp)
    2c84:	28000426 	beq	r5,zero,2c98 <_vsnprintf+0x488>
    2c88:	21003fcc 	andi	r4,r4,255
    2c8c:	2100201c 	xori	r4,r4,128
    2c90:	213fe004 	addi	r4,r4,-128
    2c94:	00000506 	br	2cac <_vsnprintf+0x49c>
    2c98:	8140200c 	andi	r5,r16,128
    2c9c:	28000326 	beq	r5,zero,2cac <_vsnprintf+0x49c>
    2ca0:	213fffcc 	andi	r4,r4,65535
    2ca4:	2120001c 	xori	r4,r4,32768
    2ca8:	21200004 	addi	r4,r4,-32768
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2cac:	d8800315 	stw	r2,12(sp)
    2cb0:	2004d7fa 	srli	r2,r4,31
    2cb4:	dc000515 	stw	r16,20(sp)
    2cb8:	dd400415 	stw	r21,16(sp)
    2cbc:	d8800115 	stw	r2,4(sp)
    2cc0:	d9800215 	stw	r6,8(sp)
          else if (flags & FLAGS_LONG) {
            const long value = va_arg(va, long);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2cc4:	b839883a 	mov	fp,r23
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2cc8:	2005883a 	mov	r2,r4
    2ccc:	2000010e 	bge	r4,zero,2cd4 <_vsnprintf+0x4c4>
    2cd0:	0105c83a 	sub	r2,zero,r4
    2cd4:	d8800015 	stw	r2,0(sp)
    2cd8:	00003306 	br	2da8 <_vsnprintf+0x598>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    2cdc:	28001326 	beq	r5,zero,2d2c <_vsnprintf+0x51c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    2ce0:	dc000715 	stw	r16,28(sp)
    2ce4:	dd400615 	stw	r21,24(sp)
    2ce8:	d8800515 	stw	r2,20(sp)
    2cec:	d9800315 	stw	r6,12(sp)
    2cf0:	d8000415 	stw	zero,16(sp)
    2cf4:	d8000215 	stw	zero,8(sp)
    2cf8:	e0800017 	ldw	r2,0(fp)
    2cfc:	e5c00204 	addi	r23,fp,8
    2d00:	d8800015 	stw	r2,0(sp)
    2d04:	e0800117 	ldw	r2,4(fp)
    2d08:	d8800115 	stw	r2,4(sp)
    2d0c:	900f883a 	mov	r7,r18
    2d10:	b00d883a 	mov	r6,r22
    2d14:	a00b883a 	mov	r5,r20
    2d18:	9809883a 	mov	r4,r19
    2d1c:	0001afc0 	call	1afc <_ntoa_long_long>
    2d20:	102d883a 	mov	r22,r2
    2d24:	b839883a 	mov	fp,r23
    2d28:	00002506 	br	2dc0 <_vsnprintf+0x5b0>
#endif
          }
          else if (flags & FLAGS_LONG) {
    2d2c:	8100400c 	andi	r4,r16,256
    2d30:	e5c00104 	addi	r23,fp,4
    2d34:	20000d26 	beq	r4,zero,2d6c <_vsnprintf+0x55c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2d38:	dc000515 	stw	r16,20(sp)
    2d3c:	dd400415 	stw	r21,16(sp)
    2d40:	d8800315 	stw	r2,12(sp)
    2d44:	d9800215 	stw	r6,8(sp)
    2d48:	d8000115 	stw	zero,4(sp)
    2d4c:	e0800017 	ldw	r2,0(fp)
    2d50:	d8800015 	stw	r2,0(sp)
    2d54:	900f883a 	mov	r7,r18
    2d58:	b00d883a 	mov	r6,r22
    2d5c:	a00b883a 	mov	r5,r20
    2d60:	9809883a 	mov	r4,r19
    2d64:	00019880 	call	1988 <_ntoa_long>
    2d68:	003fed06 	br	2d20 <__ram_exceptions_end+0xfe000d00>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2d6c:	8140100c 	andi	r5,r16,64
    2d70:	e1000017 	ldw	r4,0(fp)
    2d74:	28000226 	beq	r5,zero,2d80 <_vsnprintf+0x570>
    2d78:	21003fcc 	andi	r4,r4,255
    2d7c:	00000306 	br	2d8c <_vsnprintf+0x57c>
    2d80:	8140200c 	andi	r5,r16,128
    2d84:	28000126 	beq	r5,zero,2d8c <_vsnprintf+0x57c>
    2d88:	213fffcc 	andi	r4,r4,65535
    2d8c:	b839883a 	mov	fp,r23
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2d90:	dc000515 	stw	r16,20(sp)
    2d94:	dd400415 	stw	r21,16(sp)
    2d98:	d8800315 	stw	r2,12(sp)
    2d9c:	d9800215 	stw	r6,8(sp)
    2da0:	d8000115 	stw	zero,4(sp)
    2da4:	d9000015 	stw	r4,0(sp)
    2da8:	b00d883a 	mov	r6,r22
    2dac:	900f883a 	mov	r7,r18
    2db0:	a00b883a 	mov	r5,r20
    2db4:	9809883a 	mov	r4,r19
    2db8:	00019880 	call	1988 <_ntoa_long>
    2dbc:	102d883a 	mov	r22,r2
          }
        }
        format++;
    2dc0:	89c00044 	addi	r7,r17,1
        break;
    2dc4:	003ea606 	br	2860 <__ram_exceptions_end+0xfe000840>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    2dc8:	01401184 	movi	r5,70
    2dcc:	2140011e 	bne	r4,r5,2dd4 <_vsnprintf+0x5c4>
    2dd0:	84000814 	ori	r16,r16,32
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    2dd4:	dc000415 	stw	r16,16(sp)
    2dd8:	dd400315 	stw	r21,12(sp)
    2ddc:	d8800215 	stw	r2,8(sp)
    2de0:	e0800017 	ldw	r2,0(fp)
    2de4:	900f883a 	mov	r7,r18
    2de8:	b00d883a 	mov	r6,r22
    2dec:	d8800015 	stw	r2,0(sp)
    2df0:	e0800117 	ldw	r2,4(fp)
    2df4:	a00b883a 	mov	r5,r20
    2df8:	9809883a 	mov	r4,r19
    2dfc:	d8800115 	stw	r2,4(sp)
    2e00:	e5c00204 	addi	r23,fp,8
    2e04:	0001cd40 	call	1cd4 <_ftoa>
    2e08:	00009006 	br	304c <_vsnprintf+0x83c>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    2e0c:	017ff7c4 	movi	r5,-33
    2e10:	394a703a 	and	r5,r7,r5
    2e14:	29403fcc 	andi	r5,r5,255
    2e18:	2940201c 	xori	r5,r5,128
    2e1c:	297fe004 	addi	r5,r5,-128
    2e20:	028011c4 	movi	r10,71
    2e24:	01801144 	movi	r6,69
    2e28:	2a80061e 	bne	r5,r10,2e44 <_vsnprintf+0x634>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    2e2c:	013fff44 	movi	r4,-3
    2e30:	3908703a 	and	r4,r7,r4
    2e34:	21003fcc 	andi	r4,r4,255
    2e38:	2100201c 	xori	r4,r4,128
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    2e3c:	84020014 	ori	r16,r16,2048
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    2e40:	213fe004 	addi	r4,r4,-128
    2e44:	2180011e 	bne	r4,r6,2e4c <_vsnprintf+0x63c>
    2e48:	84000814 	ori	r16,r16,32
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    2e4c:	dc000415 	stw	r16,16(sp)
    2e50:	dd400315 	stw	r21,12(sp)
    2e54:	d8800215 	stw	r2,8(sp)
    2e58:	e0800017 	ldw	r2,0(fp)
    2e5c:	900f883a 	mov	r7,r18
    2e60:	b00d883a 	mov	r6,r22
    2e64:	d8800015 	stw	r2,0(sp)
    2e68:	e0800117 	ldw	r2,4(fp)
    2e6c:	a00b883a 	mov	r5,r20
    2e70:	9809883a 	mov	r4,r19
    2e74:	d8800115 	stw	r2,4(sp)
    2e78:	e5c00204 	addi	r23,fp,8
    2e7c:	00022080 	call	2208 <_etoa>
    2e80:	00007206 	br	304c <_vsnprintf+0x83c>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    2e84:	8400008c 	andi	r16,r16,2
    2e88:	80000c1e 	bne	r16,zero,2ebc <_vsnprintf+0x6ac>
    2e8c:	002f883a 	mov	r23,zero
    2e90:	b5cd883a 	add	r6,r22,r23
    2e94:	b8c00084 	addi	r3,r23,2
    2e98:	bdc00044 	addi	r23,r23,1
          while (l++ < width) {
    2e9c:	bd40052e 	bgeu	r23,r21,2eb4 <_vsnprintf+0x6a4>
            out(' ', buffer, idx++, maxlen);
    2ea0:	900f883a 	mov	r7,r18
    2ea4:	a00b883a 	mov	r5,r20
    2ea8:	01000804 	movi	r4,32
    2eac:	983ee83a 	callr	r19
    2eb0:	003ff706 	br	2e90 <__ram_exceptions_end+0xfe000e70>
    2eb4:	302d883a 	mov	r22,r6
    2eb8:	00000106 	br	2ec0 <_vsnprintf+0x6b0>
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    2ebc:	00c00044 	movi	r3,1
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2ec0:	e1000007 	ldb	r4,0(fp)
    2ec4:	b0800044 	addi	r2,r22,1
    2ec8:	d8800a15 	stw	r2,40(sp)
    2ecc:	d8c00915 	stw	r3,36(sp)
    2ed0:	900f883a 	mov	r7,r18
    2ed4:	b00d883a 	mov	r6,r22
    2ed8:	a00b883a 	mov	r5,r20
    2edc:	983ee83a 	callr	r19
    2ee0:	e5c00104 	addi	r23,fp,4
        // post padding
        if (flags & FLAGS_LEFT) {
    2ee4:	d8800a17 	ldw	r2,40(sp)
    2ee8:	d8c00917 	ldw	r3,36(sp)
    2eec:	80000c26 	beq	r16,zero,2f20 <_vsnprintf+0x710>
    2ef0:	1f3fffc4 	addi	fp,r3,-1
    2ef4:	e5b9c83a 	sub	fp,fp,r22
          while (l++ < width) {
    2ef8:	1707883a 	add	r3,r2,fp
    2efc:	1d40082e 	bgeu	r3,r21,2f20 <_vsnprintf+0x710>
            out(' ', buffer, idx++, maxlen);
    2f00:	100d883a 	mov	r6,r2
    2f04:	900f883a 	mov	r7,r18
    2f08:	a00b883a 	mov	r5,r20
    2f0c:	01000804 	movi	r4,32
    2f10:	14000044 	addi	r16,r2,1
    2f14:	983ee83a 	callr	r19
    2f18:	8005883a 	mov	r2,r16
    2f1c:	003ff606 	br	2ef8 <__ram_exceptions_end+0xfe000ed8>
          }
        }
        format++;
    2f20:	89c00044 	addi	r7,r17,1
        break;
    2f24:	102d883a 	mov	r22,r2
    2f28:	00004a06 	br	3054 <_vsnprintf+0x844>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    2f2c:	e0c00104 	addi	r3,fp,4
    2f30:	d8c00815 	stw	r3,32(sp)
    2f34:	e2800017 	ldw	r10,0(fp)
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    2f38:	1000021e 	bne	r2,zero,2f44 <_vsnprintf+0x734>
    2f3c:	013fffc4 	movi	r4,-1
    2f40:	00000106 	br	2f48 <_vsnprintf+0x738>
    2f44:	1009883a 	mov	r4,r2
    2f48:	5109883a 	add	r4,r10,r4
    2f4c:	5011883a 	mov	r8,r10
// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
  const char* s;
  for (s = str; *s && maxsize--; ++s);
    2f50:	41400007 	ldb	r5,0(r8)
    2f54:	28000326 	beq	r5,zero,2f64 <_vsnprintf+0x754>
    2f58:	41000226 	beq	r8,r4,2f64 <_vsnprintf+0x754>
    2f5c:	42000044 	addi	r8,r8,1
    2f60:	003ffb06 	br	2f50 <__ram_exceptions_end+0xfe000f30>

      case 's' : {
        const char* p = va_arg(va, char*);
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
        // pre padding
        if (flags & FLAGS_PRECISION) {
    2f64:	85c1000c 	andi	r23,r16,1024
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
  const char* s;
  for (s = str; *s && maxsize--; ++s);
  return (unsigned int)(s - str);
    2f68:	42b9c83a 	sub	fp,r8,r10

      case 's' : {
        const char* p = va_arg(va, char*);
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
        // pre padding
        if (flags & FLAGS_PRECISION) {
    2f6c:	b8000226 	beq	r23,zero,2f78 <_vsnprintf+0x768>
          l = (l < precision ? l : precision);
    2f70:	1700012e 	bgeu	r2,fp,2f78 <_vsnprintf+0x768>
    2f74:	1039883a 	mov	fp,r2
        }
        if (!(flags & FLAGS_LEFT)) {
    2f78:	8400008c 	andi	r16,r16,2
    2f7c:	8000111e 	bne	r16,zero,2fc4 <_vsnprintf+0x7b4>
    2f80:	e009883a 	mov	r4,fp
    2f84:	b739c83a 	sub	fp,r22,fp
    2f88:	270d883a 	add	r6,r4,fp
          while (l++ < width) {
    2f8c:	25800044 	addi	r22,r4,1
    2f90:	25400a2e 	bgeu	r4,r21,2fbc <_vsnprintf+0x7ac>
            out(' ', buffer, idx++, maxlen);
    2f94:	01000804 	movi	r4,32
    2f98:	d8800a15 	stw	r2,40(sp)
    2f9c:	da800915 	stw	r10,36(sp)
    2fa0:	900f883a 	mov	r7,r18
    2fa4:	a00b883a 	mov	r5,r20
    2fa8:	983ee83a 	callr	r19
        // pre padding
        if (flags & FLAGS_PRECISION) {
          l = (l < precision ? l : precision);
        }
        if (!(flags & FLAGS_LEFT)) {
          while (l++ < width) {
    2fac:	b009883a 	mov	r4,r22
    2fb0:	da800917 	ldw	r10,36(sp)
    2fb4:	d8800a17 	ldw	r2,40(sp)
    2fb8:	003ff306 	br	2f88 <__ram_exceptions_end+0xfe000f68>
    2fbc:	b039883a 	mov	fp,r22
    2fc0:	302d883a 	mov	r22,r6
    2fc4:	b2adc83a 	sub	r22,r22,r10
            out(' ', buffer, idx++, maxlen);
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2fc8:	51000007 	ldb	r4,0(r10)
    2fcc:	558d883a 	add	r6,r10,r22
    2fd0:	20000e26 	beq	r4,zero,300c <_vsnprintf+0x7fc>
    2fd4:	b800091e 	bne	r23,zero,2ffc <_vsnprintf+0x7ec>
          out(*(p++), buffer, idx++, maxlen);
    2fd8:	52800044 	addi	r10,r10,1
    2fdc:	d8800a15 	stw	r2,40(sp)
    2fe0:	da800915 	stw	r10,36(sp)
    2fe4:	900f883a 	mov	r7,r18
    2fe8:	a00b883a 	mov	r5,r20
    2fec:	983ee83a 	callr	r19
    2ff0:	da800917 	ldw	r10,36(sp)
    2ff4:	d8800a17 	ldw	r2,40(sp)
    2ff8:	003ff306 	br	2fc8 <__ram_exceptions_end+0xfe000fa8>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2ffc:	117fffc4 	addi	r5,r2,-1
    3000:	10000226 	beq	r2,zero,300c <_vsnprintf+0x7fc>
    3004:	2805883a 	mov	r2,r5
    3008:	003ff306 	br	2fd8 <__ram_exceptions_end+0xfe000fb8>
    300c:	302d883a 	mov	r22,r6
          out(*(p++), buffer, idx++, maxlen);
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    3010:	80000b26 	beq	r16,zero,3040 <_vsnprintf+0x830>
    3014:	e1a1c83a 	sub	r16,fp,r6
          while (l++ < width) {
    3018:	b405883a 	add	r2,r22,r16
    301c:	1540082e 	bgeu	r2,r21,3040 <_vsnprintf+0x830>
            out(' ', buffer, idx++, maxlen);
    3020:	b00d883a 	mov	r6,r22
    3024:	b5c00044 	addi	r23,r22,1
    3028:	900f883a 	mov	r7,r18
    302c:	a00b883a 	mov	r5,r20
    3030:	01000804 	movi	r4,32
    3034:	983ee83a 	callr	r19
    3038:	b82d883a 	mov	r22,r23
    303c:	003ff606 	br	3018 <__ram_exceptions_end+0xfe000ff8>
          }
        }
        format++;
    3040:	89c00044 	addi	r7,r17,1
        format++;
        break;
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    3044:	df000817 	ldw	fp,32(sp)
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
        break;
    3048:	003e0506 	br	2860 <__ram_exceptions_end+0xfe000840>
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    304c:	102d883a 	mov	r22,r2
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    3050:	89c00044 	addi	r7,r17,1
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    3054:	b839883a 	mov	fp,r23
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
        break;
    3058:	003e0106 	br	2860 <__ram_exceptions_end+0xfe000840>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    305c:	b4000044 	addi	r16,r22,1
    3060:	900f883a 	mov	r7,r18
    3064:	b00d883a 	mov	r6,r22
    3068:	a00b883a 	mov	r5,r20
    306c:	003e4b06 	br	299c <__ram_exceptions_end+0xfe00097c>
    3070:	002b883a 	mov	r21,zero

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
  while (_is_digit(**str)) {
    3074:	2823883a 	mov	r17,r5
    3078:	b8c00003 	ldbu	r3,0(r23)
    307c:	18bff404 	addi	r2,r3,-48
    3080:	10803fcc 	andi	r2,r2,255
    3084:	88be6136 	bltu	r17,r2,2a0c <__ram_exceptions_end+0xfe0009ec>
    3088:	a809883a 	mov	r4,r21
    308c:	01400284 	movi	r5,10
    3090:	d8c00915 	stw	r3,36(sp)
    3094:	0004b780 	call	4b78 <__mulsi3>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3098:	d8c00917 	ldw	r3,36(sp)
    309c:	10bff404 	addi	r2,r2,-48
    30a0:	bdc00044 	addi	r23,r23,1
    30a4:	18c03fcc 	andi	r3,r3,255
    30a8:	18c0201c 	xori	r3,r3,128
    30ac:	18ffe004 	addi	r3,r3,-128
    30b0:	18ab883a 	add	r21,r3,r2
    30b4:	003ff006 	br	3078 <__ram_exceptions_end+0xfe001058>
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
          base = 16U;
        }
        else if (*format == 'o') {
          base =  8U;
    30b8:	01800204 	movi	r6,8
    30bc:	003ebe06 	br	2bb8 <__ram_exceptions_end+0xfe000b98>
        }
        else if (*format == 'b') {
          base =  2U;
    30c0:	01800084 	movi	r6,2
    30c4:	003ebc06 	br	2bb8 <__ram_exceptions_end+0xfe000b98>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    30c8:	900f883a 	mov	r7,r18
    30cc:	a00b883a 	mov	r5,r20
    30d0:	0009883a 	mov	r4,zero
    30d4:	983ee83a 	callr	r19

  // return written chars without terminating \0
  return (int)idx;
}
    30d8:	b005883a 	mov	r2,r22
    30dc:	dfc01417 	ldw	ra,80(sp)
    30e0:	df001317 	ldw	fp,76(sp)
    30e4:	ddc01217 	ldw	r23,72(sp)
    30e8:	dd801117 	ldw	r22,68(sp)
    30ec:	dd401017 	ldw	r21,64(sp)
    30f0:	dd000f17 	ldw	r20,60(sp)
    30f4:	dcc00e17 	ldw	r19,56(sp)
    30f8:	dc800d17 	ldw	r18,52(sp)
    30fc:	dc400c17 	ldw	r17,48(sp)
    3100:	dc000b17 	ldw	r16,44(sp)
    3104:	dec01504 	addi	sp,sp,84
    3108:	f800283a 	ret

0000310c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    310c:	defffa04 	addi	sp,sp,-24
    3110:	dfc00215 	stw	ra,8(sp)
    3114:	d9400315 	stw	r5,12(sp)
    3118:	d9800415 	stw	r6,16(sp)
    311c:	d9c00515 	stw	r7,20(sp)
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    3120:	d8800304 	addi	r2,sp,12
    3124:	200f883a 	mov	r7,r4
    3128:	01000034 	movhi	r4,0
    312c:	d8800015 	stw	r2,0(sp)
    3130:	01bfffc4 	movi	r6,-1
    3134:	d9400104 	addi	r5,sp,4
    3138:	21072704 	addi	r4,r4,7324
    313c:	00028100 	call	2810 <_vsnprintf>
  va_end(va);
  return ret;
}
    3140:	dfc00217 	ldw	ra,8(sp)
    3144:	dec00604 	addi	sp,sp,24
    3148:	f800283a 	ret

0000314c <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
    314c:	defffc04 	addi	sp,sp,-16
    3150:	dfc00115 	stw	ra,4(sp)
    3154:	d9800215 	stw	r6,8(sp)
    3158:	d9c00315 	stw	r7,12(sp)
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    315c:	d8800204 	addi	r2,sp,8
    3160:	280f883a 	mov	r7,r5
    3164:	200b883a 	mov	r5,r4
    3168:	01000034 	movhi	r4,0
    316c:	d8800015 	stw	r2,0(sp)
    3170:	01bfffc4 	movi	r6,-1
    3174:	2105b104 	addi	r4,r4,5828
    3178:	00028100 	call	2810 <_vsnprintf>
  va_end(va);
  return ret;
}
    317c:	dfc00117 	ldw	ra,4(sp)
    3180:	dec00404 	addi	sp,sp,16
    3184:	f800283a 	ret

00003188 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
    3188:	defffd04 	addi	sp,sp,-12
    318c:	dfc00115 	stw	ra,4(sp)
    3190:	d9c00215 	stw	r7,8(sp)
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    3194:	d8800204 	addi	r2,sp,8
    3198:	300f883a 	mov	r7,r6
    319c:	280d883a 	mov	r6,r5
    31a0:	200b883a 	mov	r5,r4
    31a4:	01000034 	movhi	r4,0
    31a8:	d8800015 	stw	r2,0(sp)
    31ac:	2105b104 	addi	r4,r4,5828
    31b0:	00028100 	call	2810 <_vsnprintf>
  va_end(va);
  return ret;
}
    31b4:	dfc00117 	ldw	ra,4(sp)
    31b8:	dec00304 	addi	sp,sp,12
    31bc:	f800283a 	ret

000031c0 <vprintf_>:


int vprintf_(const char* format, va_list va)
{
    31c0:	defffd04 	addi	sp,sp,-12
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    31c4:	200f883a 	mov	r7,r4
    31c8:	01000034 	movhi	r4,0
    31cc:	d9400015 	stw	r5,0(sp)
    31d0:	01bfffc4 	movi	r6,-1
    31d4:	d9400104 	addi	r5,sp,4
    31d8:	21072704 	addi	r4,r4,7324
  return ret;
}


int vprintf_(const char* format, va_list va)
{
    31dc:	dfc00215 	stw	ra,8(sp)
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    31e0:	00028100 	call	2810 <_vsnprintf>
}
    31e4:	dfc00217 	ldw	ra,8(sp)
    31e8:	dec00304 	addi	sp,sp,12
    31ec:	f800283a 	ret

000031f0 <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
    31f0:	defffe04 	addi	sp,sp,-8
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    31f4:	d9c00015 	stw	r7,0(sp)
    31f8:	300f883a 	mov	r7,r6
    31fc:	280d883a 	mov	r6,r5
    3200:	200b883a 	mov	r5,r4
    3204:	01000034 	movhi	r4,0
    3208:	2105b104 	addi	r4,r4,5828
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
    320c:	dfc00115 	stw	ra,4(sp)
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    3210:	00028100 	call	2810 <_vsnprintf>
}
    3214:	dfc00117 	ldw	ra,4(sp)
    3218:	dec00204 	addi	sp,sp,8
    321c:	f800283a 	ret

00003220 <fctprintf>:


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
    3220:	defffb04 	addi	sp,sp,-20
    3224:	dfc00315 	stw	ra,12(sp)
    3228:	d9c00415 	stw	r7,16(sp)
  va_list va;
  va_start(va, format);
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    322c:	d9000115 	stw	r4,4(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    3230:	d8800404 	addi	r2,sp,16
    3234:	01000034 	movhi	r4,0

int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
  va_list va;
  va_start(va, format);
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    3238:	d9400215 	stw	r5,8(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    323c:	300f883a 	mov	r7,r6
    3240:	d8800015 	stw	r2,0(sp)
    3244:	01bfffc4 	movi	r6,-1
    3248:	d9400104 	addi	r5,sp,4
    324c:	21072d04 	addi	r4,r4,7348
    3250:	00028100 	call	2810 <_vsnprintf>
  va_end(va);
  return ret;
}
    3254:	dfc00317 	ldw	ra,12(sp)
    3258:	dec00504 	addi	sp,sp,20
    325c:	f800283a 	ret

00003260 <expf>:
    3260:	defff304 	addi	sp,sp,-52
    3264:	dc800b15 	stw	r18,44(sp)
    3268:	04800074 	movhi	r18,1
    326c:	dc400a15 	stw	r17,40(sp)
    3270:	dc000915 	stw	r16,36(sp)
    3274:	dfc00c15 	stw	ra,48(sp)
    3278:	94ad2704 	addi	r18,r18,-19300
    327c:	2023883a 	mov	r17,r4
    3280:	00035440 	call	3544 <__ieee754_expf>
    3284:	90c00017 	ldw	r3,0(r18)
    3288:	1021883a 	mov	r16,r2
    328c:	00bfffc4 	movi	r2,-1
    3290:	18802a26 	beq	r3,r2,333c <expf+0xdc>
    3294:	8809883a 	mov	r4,r17
    3298:	0003d200 	call	3d20 <finitef>
    329c:	10002726 	beq	r2,zero,333c <expf+0xdc>
    32a0:	0150ac74 	movhi	r5,17073
    32a4:	295c6004 	addi	r5,r5,29056
    32a8:	8809883a 	mov	r4,r17
    32ac:	00055200 	call	5520 <__gesf2>
    32b0:	00802916 	blt	zero,r2,3358 <expf+0xf8>
    32b4:	0170b434 	movhi	r5,49872
    32b8:	297c6d44 	addi	r5,r5,-3659
    32bc:	8809883a 	mov	r4,r17
    32c0:	00055dc0 	call	55dc <__lesf2>
    32c4:	10001d0e 	bge	r2,zero,333c <expf+0xdc>
    32c8:	00800104 	movi	r2,4
    32cc:	d8800015 	stw	r2,0(sp)
    32d0:	00800074 	movhi	r2,1
    32d4:	8809883a 	mov	r4,r17
    32d8:	10a4a504 	addi	r2,r2,-28012
    32dc:	d8800115 	stw	r2,4(sp)
    32e0:	d8000815 	stw	zero,32(sp)
    32e4:	0008a7c0 	call	8a7c <__extendsfdf2>
    32e8:	91000017 	ldw	r4,0(r18)
    32ec:	d8800415 	stw	r2,16(sp)
    32f0:	d8800215 	stw	r2,8(sp)
    32f4:	d8c00515 	stw	r3,20(sp)
    32f8:	d8c00315 	stw	r3,12(sp)
    32fc:	d8000615 	stw	zero,24(sp)
    3300:	d8000715 	stw	zero,28(sp)
    3304:	00800084 	movi	r2,2
    3308:	20802c26 	beq	r4,r2,33bc <expf+0x15c>
    330c:	d809883a 	mov	r4,sp
    3310:	0003d0c0 	call	3d0c <matherr>
    3314:	10002926 	beq	r2,zero,33bc <expf+0x15c>
    3318:	d8800817 	ldw	r2,32(sp)
    331c:	10000326 	beq	r2,zero,332c <expf+0xcc>
    3320:	0008d980 	call	8d98 <__errno>
    3324:	d8c00817 	ldw	r3,32(sp)
    3328:	10c00015 	stw	r3,0(r2)
    332c:	d9000617 	ldw	r4,24(sp)
    3330:	d9400717 	ldw	r5,28(sp)
    3334:	0008b8c0 	call	8b8c <__truncdfsf2>
    3338:	00000106 	br	3340 <expf+0xe0>
    333c:	8005883a 	mov	r2,r16
    3340:	dfc00c17 	ldw	ra,48(sp)
    3344:	dc800b17 	ldw	r18,44(sp)
    3348:	dc400a17 	ldw	r17,40(sp)
    334c:	dc000917 	ldw	r16,36(sp)
    3350:	dec00d04 	addi	sp,sp,52
    3354:	f800283a 	ret
    3358:	008000c4 	movi	r2,3
    335c:	d8800015 	stw	r2,0(sp)
    3360:	00800074 	movhi	r2,1
    3364:	8809883a 	mov	r4,r17
    3368:	10a4a504 	addi	r2,r2,-28012
    336c:	d8800115 	stw	r2,4(sp)
    3370:	d8000815 	stw	zero,32(sp)
    3374:	0008a7c0 	call	8a7c <__extendsfdf2>
    3378:	91000017 	ldw	r4,0(r18)
    337c:	d8800415 	stw	r2,16(sp)
    3380:	d8c00515 	stw	r3,20(sp)
    3384:	d8800215 	stw	r2,8(sp)
    3388:	d8c00315 	stw	r3,12(sp)
    338c:	2000061e 	bne	r4,zero,33a8 <expf+0x148>
    3390:	00b80034 	movhi	r2,57344
    3394:	d8800615 	stw	r2,24(sp)
    3398:	0091fc34 	movhi	r2,18416
    339c:	10bfffc4 	addi	r2,r2,-1
    33a0:	d8800715 	stw	r2,28(sp)
    33a4:	003fd906 	br	330c <__ram_exceptions_end+0xfe0012ec>
    33a8:	009ffc34 	movhi	r2,32752
    33ac:	d8800715 	stw	r2,28(sp)
    33b0:	d8000615 	stw	zero,24(sp)
    33b4:	00800084 	movi	r2,2
    33b8:	20bfd41e 	bne	r4,r2,330c <__ram_exceptions_end+0xfe0012ec>
    33bc:	0008d980 	call	8d98 <__errno>
    33c0:	00c00884 	movi	r3,34
    33c4:	10c00015 	stw	r3,0(r2)
    33c8:	003fd306 	br	3318 <__ram_exceptions_end+0xfe0012f8>

000033cc <logf>:
    33cc:	defff304 	addi	sp,sp,-52
    33d0:	dc800b15 	stw	r18,44(sp)
    33d4:	04800074 	movhi	r18,1
    33d8:	dc400a15 	stw	r17,40(sp)
    33dc:	dc000915 	stw	r16,36(sp)
    33e0:	dfc00c15 	stw	ra,48(sp)
    33e4:	94ad2704 	addi	r18,r18,-19300
    33e8:	2023883a 	mov	r17,r4
    33ec:	00038740 	call	3874 <__ieee754_logf>
    33f0:	90c00017 	ldw	r3,0(r18)
    33f4:	1021883a 	mov	r16,r2
    33f8:	00bfffc4 	movi	r2,-1
    33fc:	18800726 	beq	r3,r2,341c <logf+0x50>
    3400:	8809883a 	mov	r4,r17
    3404:	0003d380 	call	3d38 <__fpclassifyf>
    3408:	10000426 	beq	r2,zero,341c <logf+0x50>
    340c:	000b883a 	mov	r5,zero
    3410:	8809883a 	mov	r4,r17
    3414:	00055200 	call	5520 <__gesf2>
    3418:	0080070e 	bge	zero,r2,3438 <logf+0x6c>
    341c:	8005883a 	mov	r2,r16
    3420:	dfc00c17 	ldw	ra,48(sp)
    3424:	dc800b17 	ldw	r18,44(sp)
    3428:	dc400a17 	ldw	r17,40(sp)
    342c:	dc000917 	ldw	r16,36(sp)
    3430:	dec00d04 	addi	sp,sp,52
    3434:	f800283a 	ret
    3438:	00800074 	movhi	r2,1
    343c:	8809883a 	mov	r4,r17
    3440:	10a4a704 	addi	r2,r2,-28004
    3444:	d8000815 	stw	zero,32(sp)
    3448:	d8800115 	stw	r2,4(sp)
    344c:	0008a7c0 	call	8a7c <__extendsfdf2>
    3450:	94000017 	ldw	r16,0(r18)
    3454:	d8800415 	stw	r2,16(sp)
    3458:	d8c00515 	stw	r3,20(sp)
    345c:	d8800215 	stw	r2,8(sp)
    3460:	d8c00315 	stw	r3,12(sp)
    3464:	000b883a 	mov	r5,zero
    3468:	8809883a 	mov	r4,r17
    346c:	8000101e 	bne	r16,zero,34b0 <logf+0xe4>
    3470:	00b80034 	movhi	r2,57344
    3474:	d8800615 	stw	r2,24(sp)
    3478:	00b1fc34 	movhi	r2,51184
    347c:	10bfffc4 	addi	r2,r2,-1
    3480:	d8800715 	stw	r2,28(sp)
    3484:	00054a80 	call	54a8 <__eqsf2>
    3488:	1000201e 	bne	r2,zero,350c <logf+0x140>
    348c:	00800084 	movi	r2,2
    3490:	d8800015 	stw	r2,0(sp)
    3494:	d809883a 	mov	r4,sp
    3498:	0003d0c0 	call	3d0c <matherr>
    349c:	1000151e 	bne	r2,zero,34f4 <logf+0x128>
    34a0:	0008d980 	call	8d98 <__errno>
    34a4:	00c00884 	movi	r3,34
    34a8:	10c00015 	stw	r3,0(r2)
    34ac:	00001106 	br	34f4 <logf+0x128>
    34b0:	00bffc34 	movhi	r2,65520
    34b4:	d8000615 	stw	zero,24(sp)
    34b8:	d8800715 	stw	r2,28(sp)
    34bc:	00054a80 	call	54a8 <__eqsf2>
    34c0:	10001826 	beq	r2,zero,3524 <logf+0x158>
    34c4:	00800044 	movi	r2,1
    34c8:	d8800015 	stw	r2,0(sp)
    34cc:	00800084 	movi	r2,2
    34d0:	8080101e 	bne	r16,r2,3514 <logf+0x148>
    34d4:	0008d980 	call	8d98 <__errno>
    34d8:	00c00844 	movi	r3,33
    34dc:	10c00015 	stw	r3,0(r2)
    34e0:	01000074 	movhi	r4,1
    34e4:	21248c04 	addi	r4,r4,-28112
    34e8:	0003d140 	call	3d14 <nan>
    34ec:	d8800615 	stw	r2,24(sp)
    34f0:	d8c00715 	stw	r3,28(sp)
    34f4:	d8800817 	ldw	r2,32(sp)
    34f8:	10000e1e 	bne	r2,zero,3534 <logf+0x168>
    34fc:	d9000617 	ldw	r4,24(sp)
    3500:	d9400717 	ldw	r5,28(sp)
    3504:	0008b8c0 	call	8b8c <__truncdfsf2>
    3508:	003fc506 	br	3420 <__ram_exceptions_end+0xfe001400>
    350c:	00800044 	movi	r2,1
    3510:	d8800015 	stw	r2,0(sp)
    3514:	d809883a 	mov	r4,sp
    3518:	0003d0c0 	call	3d0c <matherr>
    351c:	103ff01e 	bne	r2,zero,34e0 <__ram_exceptions_end+0xfe0014c0>
    3520:	003fec06 	br	34d4 <__ram_exceptions_end+0xfe0014b4>
    3524:	00800084 	movi	r2,2
    3528:	d8800015 	stw	r2,0(sp)
    352c:	80bfdc26 	beq	r16,r2,34a0 <__ram_exceptions_end+0xfe001480>
    3530:	003fd806 	br	3494 <__ram_exceptions_end+0xfe001474>
    3534:	0008d980 	call	8d98 <__errno>
    3538:	d8c00817 	ldw	r3,32(sp)
    353c:	10c00015 	stw	r3,0(r2)
    3540:	003fee06 	br	34fc <__ram_exceptions_end+0xfe0014dc>

00003544 <__ieee754_expf>:
    3544:	00a00034 	movhi	r2,32768
    3548:	defffa04 	addi	sp,sp,-24
    354c:	10bfffc4 	addi	r2,r2,-1
    3550:	dfc00515 	stw	ra,20(sp)
    3554:	dd000415 	stw	r20,16(sp)
    3558:	dcc00315 	stw	r19,12(sp)
    355c:	dc800215 	stw	r18,8(sp)
    3560:	dc400115 	stw	r17,4(sp)
    3564:	dc000015 	stw	r16,0(sp)
    3568:	00dfe034 	movhi	r3,32640
    356c:	1104703a 	and	r2,r2,r4
    3570:	200b883a 	mov	r5,r4
    3574:	18807336 	bltu	r3,r2,3744 <__ieee754_expf+0x200>
    3578:	2021883a 	mov	r16,r4
    357c:	2022d7fa 	srli	r17,r4,31
    3580:	10c07926 	beq	r2,r3,3768 <__ieee754_expf+0x224>
    3584:	00d0ac74 	movhi	r3,17073
    3588:	18dc85c4 	addi	r3,r3,29207
    358c:	19008016 	blt	r3,r4,3790 <__ieee754_expf+0x24c>
    3590:	20007816 	blt	r4,zero,3774 <__ieee754_expf+0x230>
    3594:	00cfac74 	movhi	r3,16049
    3598:	18dc8604 	addi	r3,r3,29208
    359c:	18805b2e 	bgeu	r3,r2,370c <__ieee754_expf+0x1c8>
    35a0:	00cfe174 	movhi	r3,16261
    35a4:	18c56444 	addi	r3,r3,5521
    35a8:	18808f36 	bltu	r3,r2,37e8 <__ieee754_expf+0x2a4>
    35ac:	8c67883a 	add	r19,r17,r17
    35b0:	00800074 	movhi	r2,1
    35b4:	9ce7883a 	add	r19,r19,r19
    35b8:	10ad2304 	addi	r2,r2,-19316
    35bc:	14c5883a 	add	r2,r2,r19
    35c0:	11400017 	ldw	r5,0(r2)
    35c4:	8009883a 	mov	r4,r16
    35c8:	0005ad40 	call	5ad4 <__subsf3>
    35cc:	00c00074 	movhi	r3,1
    35d0:	18ed2104 	addi	r3,r3,-19324
    35d4:	1ce7883a 	add	r19,r3,r19
    35d8:	1025883a 	mov	r18,r2
    35dc:	9cc00017 	ldw	r19,0(r19)
    35e0:	00800044 	movi	r2,1
    35e4:	1445c83a 	sub	r2,r2,r17
    35e8:	1463c83a 	sub	r17,r2,r17
    35ec:	980b883a 	mov	r5,r19
    35f0:	9009883a 	mov	r4,r18
    35f4:	0005ad40 	call	5ad4 <__subsf3>
    35f8:	1021883a 	mov	r16,r2
    35fc:	800b883a 	mov	r5,r16
    3600:	8009883a 	mov	r4,r16
    3604:	00056a40 	call	56a4 <__mulsf3>
    3608:	014cccb4 	movhi	r5,13106
    360c:	296ed304 	addi	r5,r5,-17588
    3610:	1009883a 	mov	r4,r2
    3614:	1029883a 	mov	r20,r2
    3618:	00056a40 	call	56a4 <__mulsf3>
    361c:	014d77b4 	movhi	r5,13790
    3620:	297a8384 	addi	r5,r5,-5618
    3624:	1009883a 	mov	r4,r2
    3628:	0005ad40 	call	5ad4 <__subsf3>
    362c:	a00b883a 	mov	r5,r20
    3630:	1009883a 	mov	r4,r2
    3634:	00056a40 	call	56a4 <__mulsf3>
    3638:	014e22f4 	movhi	r5,14475
    363c:	296cd544 	addi	r5,r5,-19627
    3640:	1009883a 	mov	r4,r2
    3644:	0004ba00 	call	4ba0 <__addsf3>
    3648:	a00b883a 	mov	r5,r20
    364c:	1009883a 	mov	r4,r2
    3650:	00056a40 	call	56a4 <__mulsf3>
    3654:	014ecdb4 	movhi	r5,15158
    3658:	2942d844 	addi	r5,r5,2913
    365c:	1009883a 	mov	r4,r2
    3660:	0005ad40 	call	5ad4 <__subsf3>
    3664:	a00b883a 	mov	r5,r20
    3668:	1009883a 	mov	r4,r2
    366c:	00056a40 	call	56a4 <__mulsf3>
    3670:	014f8af4 	movhi	r5,15915
    3674:	296aaac4 	addi	r5,r5,-21845
    3678:	1009883a 	mov	r4,r2
    367c:	0004ba00 	call	4ba0 <__addsf3>
    3680:	a00b883a 	mov	r5,r20
    3684:	1009883a 	mov	r4,r2
    3688:	00056a40 	call	56a4 <__mulsf3>
    368c:	100b883a 	mov	r5,r2
    3690:	8009883a 	mov	r4,r16
    3694:	0005ad40 	call	5ad4 <__subsf3>
    3698:	1029883a 	mov	r20,r2
    369c:	88004126 	beq	r17,zero,37a4 <__ieee754_expf+0x260>
    36a0:	8009883a 	mov	r4,r16
    36a4:	100b883a 	mov	r5,r2
    36a8:	00056a40 	call	56a4 <__mulsf3>
    36ac:	a00b883a 	mov	r5,r20
    36b0:	01100034 	movhi	r4,16384
    36b4:	1021883a 	mov	r16,r2
    36b8:	0005ad40 	call	5ad4 <__subsf3>
    36bc:	100b883a 	mov	r5,r2
    36c0:	8009883a 	mov	r4,r16
    36c4:	00050680 	call	5068 <__divsf3>
    36c8:	100b883a 	mov	r5,r2
    36cc:	9809883a 	mov	r4,r19
    36d0:	0005ad40 	call	5ad4 <__subsf3>
    36d4:	900b883a 	mov	r5,r18
    36d8:	1009883a 	mov	r4,r2
    36dc:	0005ad40 	call	5ad4 <__subsf3>
    36e0:	100b883a 	mov	r5,r2
    36e4:	010fe034 	movhi	r4,16256
    36e8:	0005ad40 	call	5ad4 <__subsf3>
    36ec:	00ffe0c4 	movi	r3,-125
    36f0:	88c05d0e 	bge	r17,r3,3868 <__ieee754_expf+0x324>
    36f4:	8c401904 	addi	r17,r17,100
    36f8:	880895fa 	slli	r4,r17,23
    36fc:	01436034 	movhi	r5,3456
    3700:	2089883a 	add	r4,r4,r2
    3704:	00056a40 	call	56a4 <__mulsf3>
    3708:	00000f06 	br	3748 <__ieee754_expf+0x204>
    370c:	00cc6034 	movhi	r3,12672
    3710:	18ffffc4 	addi	r3,r3,-1
    3714:	18801c36 	bltu	r3,r2,3788 <__ieee754_expf+0x244>
    3718:	015c52b4 	movhi	r5,29002
    371c:	297cb284 	addi	r5,r5,-3382
    3720:	8009883a 	mov	r4,r16
    3724:	0004ba00 	call	4ba0 <__addsf3>
    3728:	044fe034 	movhi	r17,16256
    372c:	880b883a 	mov	r5,r17
    3730:	1009883a 	mov	r4,r2
    3734:	00055200 	call	5520 <__gesf2>
    3738:	0080130e 	bge	zero,r2,3788 <__ieee754_expf+0x244>
    373c:	880b883a 	mov	r5,r17
    3740:	8009883a 	mov	r4,r16
    3744:	0004ba00 	call	4ba0 <__addsf3>
    3748:	dfc00517 	ldw	ra,20(sp)
    374c:	dd000417 	ldw	r20,16(sp)
    3750:	dcc00317 	ldw	r19,12(sp)
    3754:	dc800217 	ldw	r18,8(sp)
    3758:	dc400117 	ldw	r17,4(sp)
    375c:	dc000017 	ldw	r16,0(sp)
    3760:	dec00604 	addi	sp,sp,24
    3764:	f800283a 	ret
    3768:	8800051e 	bne	r17,zero,3780 <__ieee754_expf+0x23c>
    376c:	2005883a 	mov	r2,r4
    3770:	003ff506 	br	3748 <__ram_exceptions_end+0xfe001728>
    3774:	00d0b434 	movhi	r3,17104
    3778:	18fc6d44 	addi	r3,r3,-3659
    377c:	18bf852e 	bgeu	r3,r2,3594 <__ram_exceptions_end+0xfe001574>
    3780:	0005883a 	mov	r2,zero
    3784:	003ff006 	br	3748 <__ram_exceptions_end+0xfe001728>
    3788:	0023883a 	mov	r17,zero
    378c:	003f9b06 	br	35fc <__ram_exceptions_end+0xfe0015dc>
    3790:	015c52b4 	movhi	r5,29002
    3794:	297cb284 	addi	r5,r5,-3382
    3798:	2809883a 	mov	r4,r5
    379c:	00056a40 	call	56a4 <__mulsf3>
    37a0:	003fe906 	br	3748 <__ram_exceptions_end+0xfe001728>
    37a4:	8009883a 	mov	r4,r16
    37a8:	100b883a 	mov	r5,r2
    37ac:	00056a40 	call	56a4 <__mulsf3>
    37b0:	a009883a 	mov	r4,r20
    37b4:	01500034 	movhi	r5,16384
    37b8:	1023883a 	mov	r17,r2
    37bc:	0005ad40 	call	5ad4 <__subsf3>
    37c0:	8809883a 	mov	r4,r17
    37c4:	100b883a 	mov	r5,r2
    37c8:	00050680 	call	5068 <__divsf3>
    37cc:	800b883a 	mov	r5,r16
    37d0:	1009883a 	mov	r4,r2
    37d4:	0005ad40 	call	5ad4 <__subsf3>
    37d8:	100b883a 	mov	r5,r2
    37dc:	010fe034 	movhi	r4,16256
    37e0:	0005ad40 	call	5ad4 <__subsf3>
    37e4:	003fd806 	br	3748 <__ram_exceptions_end+0xfe001728>
    37e8:	014fee74 	movhi	r5,16313
    37ec:	296a8ec4 	addi	r5,r5,-21957
    37f0:	8009883a 	mov	r4,r16
    37f4:	00056a40 	call	56a4 <__mulsf3>
    37f8:	8c63883a 	add	r17,r17,r17
    37fc:	00c00074 	movhi	r3,1
    3800:	18ed2504 	addi	r3,r3,-19308
    3804:	8c63883a 	add	r17,r17,r17
    3808:	1c63883a 	add	r17,r3,r17
    380c:	89400017 	ldw	r5,0(r17)
    3810:	1009883a 	mov	r4,r2
    3814:	0004ba00 	call	4ba0 <__addsf3>
    3818:	1009883a 	mov	r4,r2
    381c:	0005fb80 	call	5fb8 <__fixsfsi>
    3820:	1009883a 	mov	r4,r2
    3824:	1023883a 	mov	r17,r2
    3828:	00060280 	call	6028 <__floatsisf>
    382c:	014fcc74 	movhi	r5,16177
    3830:	295c6004 	addi	r5,r5,29056
    3834:	1009883a 	mov	r4,r2
    3838:	1027883a 	mov	r19,r2
    383c:	00056a40 	call	56a4 <__mulsf3>
    3840:	100b883a 	mov	r5,r2
    3844:	8009883a 	mov	r4,r16
    3848:	0005ad40 	call	5ad4 <__subsf3>
    384c:	014dc634 	movhi	r5,14104
    3850:	9809883a 	mov	r4,r19
    3854:	297df444 	addi	r5,r5,-2095
    3858:	1025883a 	mov	r18,r2
    385c:	00056a40 	call	56a4 <__mulsf3>
    3860:	1027883a 	mov	r19,r2
    3864:	003f6106 	br	35ec <__ram_exceptions_end+0xfe0015cc>
    3868:	882295fa 	slli	r17,r17,23
    386c:	8885883a 	add	r2,r17,r2
    3870:	003fb506 	br	3748 <__ram_exceptions_end+0xfe001728>

00003874 <__ieee754_logf>:
    3874:	00e00034 	movhi	r3,32768
    3878:	defff704 	addi	sp,sp,-36
    387c:	18ffffc4 	addi	r3,r3,-1
    3880:	dfc00815 	stw	ra,32(sp)
    3884:	ddc00715 	stw	r23,28(sp)
    3888:	dd800615 	stw	r22,24(sp)
    388c:	dd400515 	stw	r21,20(sp)
    3890:	dd000415 	stw	r20,16(sp)
    3894:	dcc00315 	stw	r19,12(sp)
    3898:	dc800215 	stw	r18,8(sp)
    389c:	dc400115 	stw	r17,4(sp)
    38a0:	dc000015 	stw	r16,0(sp)
    38a4:	1906703a 	and	r3,r3,r4
    38a8:	18002626 	beq	r3,zero,3944 <__ieee754_logf+0xd0>
    38ac:	200b883a 	mov	r5,r4
    38b0:	2005883a 	mov	r2,r4
    38b4:	20004516 	blt	r4,zero,39cc <__ieee754_logf+0x158>
    38b8:	00dfe034 	movhi	r3,32640
    38bc:	18ffffc4 	addi	r3,r3,-1
    38c0:	19003c16 	blt	r3,r4,39b4 <__ieee754_logf+0x140>
    38c4:	00c02034 	movhi	r3,128
    38c8:	18ffffc4 	addi	r3,r3,-1
    38cc:	19003b0e 	bge	r3,r4,39bc <__ieee754_logf+0x148>
    38d0:	0023883a 	mov	r17,zero
    38d4:	04802034 	movhi	r18,128
    38d8:	94bfffc4 	addi	r18,r18,-1
    38dc:	010012f4 	movhi	r4,75
    38e0:	14a0703a 	and	r16,r2,r18
    38e4:	213ec804 	addi	r4,r4,-1248
    38e8:	1007d5fa 	srai	r3,r2,23
    38ec:	8109883a 	add	r4,r16,r4
    38f0:	2100202c 	andhi	r4,r4,128
    38f4:	200dd5fa 	srai	r6,r4,23
    38f8:	18bfe044 	addi	r2,r3,-127
    38fc:	210fe03c 	xorhi	r4,r4,16256
    3900:	1445883a 	add	r2,r2,r17
    3904:	014fe034 	movhi	r5,16256
    3908:	2408b03a 	or	r4,r4,r16
    390c:	30a3883a 	add	r17,r6,r2
    3910:	0005ad40 	call	5ad4 <__subsf3>
    3914:	1027883a 	mov	r19,r2
    3918:	808003c4 	addi	r2,r16,15
    391c:	14a4703a 	and	r18,r2,r18
    3920:	008003c4 	movi	r2,15
    3924:	14802e16 	blt	r2,r18,39e0 <__ieee754_logf+0x16c>
    3928:	000b883a 	mov	r5,zero
    392c:	9809883a 	mov	r4,r19
    3930:	00054a80 	call	54a8 <__eqsf2>
    3934:	1000891e 	bne	r2,zero,3b5c <__ieee754_logf+0x2e8>
    3938:	8800101e 	bne	r17,zero,397c <__ieee754_logf+0x108>
    393c:	0005883a 	mov	r2,zero
    3940:	00000306 	br	3950 <__ieee754_logf+0xdc>
    3944:	000b883a 	mov	r5,zero
    3948:	01330034 	movhi	r4,52224
    394c:	00050680 	call	5068 <__divsf3>
    3950:	dfc00817 	ldw	ra,32(sp)
    3954:	ddc00717 	ldw	r23,28(sp)
    3958:	dd800617 	ldw	r22,24(sp)
    395c:	dd400517 	ldw	r21,20(sp)
    3960:	dd000417 	ldw	r20,16(sp)
    3964:	dcc00317 	ldw	r19,12(sp)
    3968:	dc800217 	ldw	r18,8(sp)
    396c:	dc400117 	ldw	r17,4(sp)
    3970:	dc000017 	ldw	r16,0(sp)
    3974:	dec00904 	addi	sp,sp,36
    3978:	f800283a 	ret
    397c:	8809883a 	mov	r4,r17
    3980:	00060280 	call	6028 <__floatsisf>
    3984:	014fcc74 	movhi	r5,16177
    3988:	295c6004 	addi	r5,r5,29056
    398c:	1009883a 	mov	r4,r2
    3990:	1021883a 	mov	r16,r2
    3994:	00056a40 	call	56a4 <__mulsf3>
    3998:	014dc634 	movhi	r5,14104
    399c:	297df444 	addi	r5,r5,-2095
    39a0:	8009883a 	mov	r4,r16
    39a4:	1023883a 	mov	r17,r2
    39a8:	00056a40 	call	56a4 <__mulsf3>
    39ac:	100b883a 	mov	r5,r2
    39b0:	8809883a 	mov	r4,r17
    39b4:	0004ba00 	call	4ba0 <__addsf3>
    39b8:	003fe506 	br	3950 <__ram_exceptions_end+0xfe001930>
    39bc:	01530034 	movhi	r5,19456
    39c0:	00056a40 	call	56a4 <__mulsf3>
    39c4:	047ff9c4 	movi	r17,-25
    39c8:	003fc206 	br	38d4 <__ram_exceptions_end+0xfe0018b4>
    39cc:	0005ad40 	call	5ad4 <__subsf3>
    39d0:	000b883a 	mov	r5,zero
    39d4:	1009883a 	mov	r4,r2
    39d8:	00050680 	call	5068 <__divsf3>
    39dc:	003fdc06 	br	3950 <__ram_exceptions_end+0xfe001930>
    39e0:	01500034 	movhi	r5,16384
    39e4:	9809883a 	mov	r4,r19
    39e8:	0004ba00 	call	4ba0 <__addsf3>
    39ec:	100b883a 	mov	r5,r2
    39f0:	9809883a 	mov	r4,r19
    39f4:	00050680 	call	5068 <__divsf3>
    39f8:	8809883a 	mov	r4,r17
    39fc:	102b883a 	mov	r21,r2
    3a00:	00060280 	call	6028 <__floatsisf>
    3a04:	a80b883a 	mov	r5,r21
    3a08:	a809883a 	mov	r4,r21
    3a0c:	102d883a 	mov	r22,r2
    3a10:	00056a40 	call	56a4 <__mulsf3>
    3a14:	100b883a 	mov	r5,r2
    3a18:	1009883a 	mov	r4,r2
    3a1c:	102f883a 	mov	r23,r2
    3a20:	00056a40 	call	56a4 <__mulsf3>
    3a24:	014f8634 	movhi	r5,15896
    3a28:	296225c4 	addi	r5,r5,-30569
    3a2c:	1009883a 	mov	r4,r2
    3a30:	1025883a 	mov	r18,r2
    3a34:	00056a40 	call	56a4 <__mulsf3>
    3a38:	014f8eb4 	movhi	r5,15930
    3a3c:	294cc944 	addi	r5,r5,13093
    3a40:	1009883a 	mov	r4,r2
    3a44:	0004ba00 	call	4ba0 <__addsf3>
    3a48:	900b883a 	mov	r5,r18
    3a4c:	1009883a 	mov	r4,r2
    3a50:	00056a40 	call	56a4 <__mulsf3>
    3a54:	014fa4b4 	movhi	r5,16018
    3a58:	29524944 	addi	r5,r5,18725
    3a5c:	1009883a 	mov	r4,r2
    3a60:	0004ba00 	call	4ba0 <__addsf3>
    3a64:	900b883a 	mov	r5,r18
    3a68:	1009883a 	mov	r4,r2
    3a6c:	00056a40 	call	56a4 <__mulsf3>
    3a70:	014fcaf4 	movhi	r5,16171
    3a74:	296aaac4 	addi	r5,r5,-21845
    3a78:	1009883a 	mov	r4,r2
    3a7c:	0004ba00 	call	4ba0 <__addsf3>
    3a80:	b80b883a 	mov	r5,r23
    3a84:	1009883a 	mov	r4,r2
    3a88:	00056a40 	call	56a4 <__mulsf3>
    3a8c:	014f8774 	movhi	r5,15901
    3a90:	9009883a 	mov	r4,r18
    3a94:	297413c4 	addi	r5,r5,-12209
    3a98:	102f883a 	mov	r23,r2
    3a9c:	00056a40 	call	56a4 <__mulsf3>
    3aa0:	014f9934 	movhi	r5,15972
    3aa4:	29638a44 	addi	r5,r5,-29143
    3aa8:	1009883a 	mov	r4,r2
    3aac:	0004ba00 	call	4ba0 <__addsf3>
    3ab0:	900b883a 	mov	r5,r18
    3ab4:	1009883a 	mov	r4,r2
    3ab8:	00056a40 	call	56a4 <__mulsf3>
    3abc:	014fb374 	movhi	r5,16077
    3ac0:	29733344 	addi	r5,r5,-13107
    3ac4:	1009883a 	mov	r4,r2
    3ac8:	0004ba00 	call	4ba0 <__addsf3>
    3acc:	900b883a 	mov	r5,r18
    3ad0:	1009883a 	mov	r4,r2
    3ad4:	00056a40 	call	56a4 <__mulsf3>
    3ad8:	100b883a 	mov	r5,r2
    3adc:	b809883a 	mov	r4,r23
    3ae0:	0004ba00 	call	4ba0 <__addsf3>
    3ae4:	053ff3f4 	movhi	r20,65487
    3ae8:	1025883a 	mov	r18,r2
    3aec:	00800db4 	movhi	r2,54
    3af0:	a5170c04 	addi	r20,r20,23600
    3af4:	10b0a204 	addi	r2,r2,-15736
    3af8:	8529883a 	add	r20,r16,r20
    3afc:	1405c83a 	sub	r2,r2,r16
    3b00:	1528b03a 	or	r20,r2,r20
    3b04:	05005c0e 	bge	zero,r20,3c78 <__ieee754_logf+0x404>
    3b08:	014fc034 	movhi	r5,16128
    3b0c:	9809883a 	mov	r4,r19
    3b10:	00056a40 	call	56a4 <__mulsf3>
    3b14:	980b883a 	mov	r5,r19
    3b18:	1009883a 	mov	r4,r2
    3b1c:	00056a40 	call	56a4 <__mulsf3>
    3b20:	1021883a 	mov	r16,r2
    3b24:	8800211e 	bne	r17,zero,3bac <__ieee754_logf+0x338>
    3b28:	9009883a 	mov	r4,r18
    3b2c:	100b883a 	mov	r5,r2
    3b30:	0004ba00 	call	4ba0 <__addsf3>
    3b34:	a80b883a 	mov	r5,r21
    3b38:	1009883a 	mov	r4,r2
    3b3c:	00056a40 	call	56a4 <__mulsf3>
    3b40:	8009883a 	mov	r4,r16
    3b44:	100b883a 	mov	r5,r2
    3b48:	0005ad40 	call	5ad4 <__subsf3>
    3b4c:	100b883a 	mov	r5,r2
    3b50:	9809883a 	mov	r4,r19
    3b54:	0005ad40 	call	5ad4 <__subsf3>
    3b58:	003f7d06 	br	3950 <__ram_exceptions_end+0xfe001930>
    3b5c:	014faaf4 	movhi	r5,16043
    3b60:	296aaac4 	addi	r5,r5,-21845
    3b64:	9809883a 	mov	r4,r19
    3b68:	00056a40 	call	56a4 <__mulsf3>
    3b6c:	100b883a 	mov	r5,r2
    3b70:	010fc034 	movhi	r4,16128
    3b74:	0005ad40 	call	5ad4 <__subsf3>
    3b78:	980b883a 	mov	r5,r19
    3b7c:	9809883a 	mov	r4,r19
    3b80:	1021883a 	mov	r16,r2
    3b84:	00056a40 	call	56a4 <__mulsf3>
    3b88:	8009883a 	mov	r4,r16
    3b8c:	100b883a 	mov	r5,r2
    3b90:	00056a40 	call	56a4 <__mulsf3>
    3b94:	1021883a 	mov	r16,r2
    3b98:	8800211e 	bne	r17,zero,3c20 <__ieee754_logf+0x3ac>
    3b9c:	100b883a 	mov	r5,r2
    3ba0:	9809883a 	mov	r4,r19
    3ba4:	0005ad40 	call	5ad4 <__subsf3>
    3ba8:	003f6906 	br	3950 <__ram_exceptions_end+0xfe001930>
    3bac:	014fcc74 	movhi	r5,16177
    3bb0:	b009883a 	mov	r4,r22
    3bb4:	295c6004 	addi	r5,r5,29056
    3bb8:	00056a40 	call	56a4 <__mulsf3>
    3bbc:	800b883a 	mov	r5,r16
    3bc0:	9009883a 	mov	r4,r18
    3bc4:	1023883a 	mov	r17,r2
    3bc8:	0004ba00 	call	4ba0 <__addsf3>
    3bcc:	a80b883a 	mov	r5,r21
    3bd0:	1009883a 	mov	r4,r2
    3bd4:	00056a40 	call	56a4 <__mulsf3>
    3bd8:	014dc634 	movhi	r5,14104
    3bdc:	b009883a 	mov	r4,r22
    3be0:	297df444 	addi	r5,r5,-2095
    3be4:	1025883a 	mov	r18,r2
    3be8:	00056a40 	call	56a4 <__mulsf3>
    3bec:	9009883a 	mov	r4,r18
    3bf0:	100b883a 	mov	r5,r2
    3bf4:	0004ba00 	call	4ba0 <__addsf3>
    3bf8:	8009883a 	mov	r4,r16
    3bfc:	100b883a 	mov	r5,r2
    3c00:	0005ad40 	call	5ad4 <__subsf3>
    3c04:	980b883a 	mov	r5,r19
    3c08:	1009883a 	mov	r4,r2
    3c0c:	0005ad40 	call	5ad4 <__subsf3>
    3c10:	100b883a 	mov	r5,r2
    3c14:	8809883a 	mov	r4,r17
    3c18:	0005ad40 	call	5ad4 <__subsf3>
    3c1c:	003f4c06 	br	3950 <__ram_exceptions_end+0xfe001930>
    3c20:	8809883a 	mov	r4,r17
    3c24:	00060280 	call	6028 <__floatsisf>
    3c28:	014fcc74 	movhi	r5,16177
    3c2c:	295c6004 	addi	r5,r5,29056
    3c30:	1009883a 	mov	r4,r2
    3c34:	1023883a 	mov	r17,r2
    3c38:	00056a40 	call	56a4 <__mulsf3>
    3c3c:	014dc634 	movhi	r5,14104
    3c40:	8809883a 	mov	r4,r17
    3c44:	297df444 	addi	r5,r5,-2095
    3c48:	1025883a 	mov	r18,r2
    3c4c:	00056a40 	call	56a4 <__mulsf3>
    3c50:	8009883a 	mov	r4,r16
    3c54:	100b883a 	mov	r5,r2
    3c58:	0005ad40 	call	5ad4 <__subsf3>
    3c5c:	980b883a 	mov	r5,r19
    3c60:	1009883a 	mov	r4,r2
    3c64:	0005ad40 	call	5ad4 <__subsf3>
    3c68:	100b883a 	mov	r5,r2
    3c6c:	9009883a 	mov	r4,r18
    3c70:	0005ad40 	call	5ad4 <__subsf3>
    3c74:	003f3606 	br	3950 <__ram_exceptions_end+0xfe001930>
    3c78:	88001a26 	beq	r17,zero,3ce4 <__ieee754_logf+0x470>
    3c7c:	014fcc74 	movhi	r5,16177
    3c80:	b009883a 	mov	r4,r22
    3c84:	295c6004 	addi	r5,r5,29056
    3c88:	00056a40 	call	56a4 <__mulsf3>
    3c8c:	900b883a 	mov	r5,r18
    3c90:	9809883a 	mov	r4,r19
    3c94:	1021883a 	mov	r16,r2
    3c98:	0005ad40 	call	5ad4 <__subsf3>
    3c9c:	a80b883a 	mov	r5,r21
    3ca0:	1009883a 	mov	r4,r2
    3ca4:	00056a40 	call	56a4 <__mulsf3>
    3ca8:	014dc634 	movhi	r5,14104
    3cac:	b009883a 	mov	r4,r22
    3cb0:	297df444 	addi	r5,r5,-2095
    3cb4:	1023883a 	mov	r17,r2
    3cb8:	00056a40 	call	56a4 <__mulsf3>
    3cbc:	8809883a 	mov	r4,r17
    3cc0:	100b883a 	mov	r5,r2
    3cc4:	0005ad40 	call	5ad4 <__subsf3>
    3cc8:	980b883a 	mov	r5,r19
    3ccc:	1009883a 	mov	r4,r2
    3cd0:	0005ad40 	call	5ad4 <__subsf3>
    3cd4:	100b883a 	mov	r5,r2
    3cd8:	8009883a 	mov	r4,r16
    3cdc:	0005ad40 	call	5ad4 <__subsf3>
    3ce0:	003f1b06 	br	3950 <__ram_exceptions_end+0xfe001930>
    3ce4:	900b883a 	mov	r5,r18
    3ce8:	9809883a 	mov	r4,r19
    3cec:	0005ad40 	call	5ad4 <__subsf3>
    3cf0:	a80b883a 	mov	r5,r21
    3cf4:	1009883a 	mov	r4,r2
    3cf8:	00056a40 	call	56a4 <__mulsf3>
    3cfc:	100b883a 	mov	r5,r2
    3d00:	9809883a 	mov	r4,r19
    3d04:	0005ad40 	call	5ad4 <__subsf3>
    3d08:	003f1106 	br	3950 <__ram_exceptions_end+0xfe001930>

00003d0c <matherr>:
    3d0c:	0005883a 	mov	r2,zero
    3d10:	f800283a 	ret

00003d14 <nan>:
    3d14:	0005883a 	mov	r2,zero
    3d18:	00dffe34 	movhi	r3,32760
    3d1c:	f800283a 	ret

00003d20 <finitef>:
    3d20:	00a00034 	movhi	r2,32768
    3d24:	10bfffc4 	addi	r2,r2,-1
    3d28:	1104703a 	and	r2,r2,r4
    3d2c:	00dfe034 	movhi	r3,32640
    3d30:	10c4803a 	cmplt	r2,r2,r3
    3d34:	f800283a 	ret

00003d38 <__fpclassifyf>:
    3d38:	00a00034 	movhi	r2,32768
    3d3c:	10bfffc4 	addi	r2,r2,-1
    3d40:	2088703a 	and	r4,r4,r2
    3d44:	2000021e 	bne	r4,zero,3d50 <__fpclassifyf+0x18>
    3d48:	00800084 	movi	r2,2
    3d4c:	f800283a 	ret
    3d50:	00bfe034 	movhi	r2,65408
    3d54:	00dfc034 	movhi	r3,32512
    3d58:	2085883a 	add	r2,r4,r2
    3d5c:	18ffffc4 	addi	r3,r3,-1
    3d60:	18800236 	bltu	r3,r2,3d6c <__fpclassifyf+0x34>
    3d64:	00800104 	movi	r2,4
    3d68:	f800283a 	ret
    3d6c:	00c02034 	movhi	r3,128
    3d70:	20bfffc4 	addi	r2,r4,-1
    3d74:	18ffff84 	addi	r3,r3,-2
    3d78:	18800236 	bltu	r3,r2,3d84 <__fpclassifyf+0x4c>
    3d7c:	008000c4 	movi	r2,3
    3d80:	f800283a 	ret
    3d84:	009fe034 	movhi	r2,32640
    3d88:	2085003a 	cmpeq	r2,r4,r2
    3d8c:	f800283a 	ret

00003d90 <__fixunsdfsi>:
    3d90:	defffd04 	addi	sp,sp,-12
    3d94:	000d883a 	mov	r6,zero
    3d98:	01d07834 	movhi	r7,16864
    3d9c:	dc400115 	stw	r17,4(sp)
    3da0:	dc000015 	stw	r16,0(sp)
    3da4:	dfc00215 	stw	ra,8(sp)
    3da8:	2023883a 	mov	r17,r4
    3dac:	2821883a 	mov	r16,r5
    3db0:	00075400 	call	7540 <__gedf2>
    3db4:	1000080e 	bge	r2,zero,3dd8 <__fixunsdfsi+0x48>
    3db8:	8809883a 	mov	r4,r17
    3dbc:	800b883a 	mov	r5,r16
    3dc0:	00088780 	call	8878 <__fixdfsi>
    3dc4:	dfc00217 	ldw	ra,8(sp)
    3dc8:	dc400117 	ldw	r17,4(sp)
    3dcc:	dc000017 	ldw	r16,0(sp)
    3dd0:	dec00304 	addi	sp,sp,12
    3dd4:	f800283a 	ret
    3dd8:	000d883a 	mov	r6,zero
    3ddc:	01d07834 	movhi	r7,16864
    3de0:	8809883a 	mov	r4,r17
    3de4:	800b883a 	mov	r5,r16
    3de8:	0007f7c0 	call	7f7c <__subdf3>
    3dec:	180b883a 	mov	r5,r3
    3df0:	1009883a 	mov	r4,r2
    3df4:	00088780 	call	8878 <__fixdfsi>
    3df8:	00e00034 	movhi	r3,32768
    3dfc:	10c5883a 	add	r2,r2,r3
    3e00:	003ff006 	br	3dc4 <__ram_exceptions_end+0xfe001da4>

00003e04 <__udivdi3>:
    3e04:	defff404 	addi	sp,sp,-48
    3e08:	dcc00515 	stw	r19,20(sp)
    3e0c:	dc000215 	stw	r16,8(sp)
    3e10:	dfc00b15 	stw	ra,44(sp)
    3e14:	df000a15 	stw	fp,40(sp)
    3e18:	ddc00915 	stw	r23,36(sp)
    3e1c:	dd800815 	stw	r22,32(sp)
    3e20:	dd400715 	stw	r21,28(sp)
    3e24:	dd000615 	stw	r20,24(sp)
    3e28:	dc800415 	stw	r18,16(sp)
    3e2c:	dc400315 	stw	r17,12(sp)
    3e30:	2027883a 	mov	r19,r4
    3e34:	2821883a 	mov	r16,r5
    3e38:	3800461e 	bne	r7,zero,3f54 <__udivdi3+0x150>
    3e3c:	3023883a 	mov	r17,r6
    3e40:	2025883a 	mov	r18,r4
    3e44:	2980572e 	bgeu	r5,r6,3fa4 <__udivdi3+0x1a0>
    3e48:	00bfffd4 	movui	r2,65535
    3e4c:	282d883a 	mov	r22,r5
    3e50:	1180b236 	bltu	r2,r6,411c <__udivdi3+0x318>
    3e54:	00803fc4 	movi	r2,255
    3e58:	1185803a 	cmpltu	r2,r2,r6
    3e5c:	100490fa 	slli	r2,r2,3
    3e60:	3086d83a 	srl	r3,r6,r2
    3e64:	01000074 	movhi	r4,1
    3e68:	2124a904 	addi	r4,r4,-27996
    3e6c:	20c7883a 	add	r3,r4,r3
    3e70:	18c00003 	ldbu	r3,0(r3)
    3e74:	1885883a 	add	r2,r3,r2
    3e78:	00c00804 	movi	r3,32
    3e7c:	1887c83a 	sub	r3,r3,r2
    3e80:	18000526 	beq	r3,zero,3e98 <__udivdi3+0x94>
    3e84:	80e0983a 	sll	r16,r16,r3
    3e88:	9884d83a 	srl	r2,r19,r2
    3e8c:	30e2983a 	sll	r17,r6,r3
    3e90:	98e4983a 	sll	r18,r19,r3
    3e94:	142cb03a 	or	r22,r2,r16
    3e98:	882ad43a 	srli	r21,r17,16
    3e9c:	b009883a 	mov	r4,r22
    3ea0:	8d3fffcc 	andi	r20,r17,65535
    3ea4:	a80b883a 	mov	r5,r21
    3ea8:	0004b200 	call	4b20 <__umodsi3>
    3eac:	b009883a 	mov	r4,r22
    3eb0:	a80b883a 	mov	r5,r21
    3eb4:	1027883a 	mov	r19,r2
    3eb8:	0004abc0 	call	4abc <__udivsi3>
    3ebc:	100b883a 	mov	r5,r2
    3ec0:	a009883a 	mov	r4,r20
    3ec4:	102d883a 	mov	r22,r2
    3ec8:	0004b780 	call	4b78 <__mulsi3>
    3ecc:	9826943a 	slli	r19,r19,16
    3ed0:	9006d43a 	srli	r3,r18,16
    3ed4:	1cc6b03a 	or	r3,r3,r19
    3ed8:	1880052e 	bgeu	r3,r2,3ef0 <__udivdi3+0xec>
    3edc:	1c47883a 	add	r3,r3,r17
    3ee0:	b13fffc4 	addi	r4,r22,-1
    3ee4:	1c400136 	bltu	r3,r17,3eec <__udivdi3+0xe8>
    3ee8:	18814236 	bltu	r3,r2,43f4 <__udivdi3+0x5f0>
    3eec:	202d883a 	mov	r22,r4
    3ef0:	18a1c83a 	sub	r16,r3,r2
    3ef4:	8009883a 	mov	r4,r16
    3ef8:	a80b883a 	mov	r5,r21
    3efc:	0004b200 	call	4b20 <__umodsi3>
    3f00:	1027883a 	mov	r19,r2
    3f04:	8009883a 	mov	r4,r16
    3f08:	a80b883a 	mov	r5,r21
    3f0c:	9826943a 	slli	r19,r19,16
    3f10:	0004abc0 	call	4abc <__udivsi3>
    3f14:	100b883a 	mov	r5,r2
    3f18:	a009883a 	mov	r4,r20
    3f1c:	94bfffcc 	andi	r18,r18,65535
    3f20:	1021883a 	mov	r16,r2
    3f24:	94e4b03a 	or	r18,r18,r19
    3f28:	0004b780 	call	4b78 <__mulsi3>
    3f2c:	9080052e 	bgeu	r18,r2,3f44 <__udivdi3+0x140>
    3f30:	8ca5883a 	add	r18,r17,r18
    3f34:	80ffffc4 	addi	r3,r16,-1
    3f38:	94410c36 	bltu	r18,r17,436c <__udivdi3+0x568>
    3f3c:	90810b2e 	bgeu	r18,r2,436c <__udivdi3+0x568>
    3f40:	843fff84 	addi	r16,r16,-2
    3f44:	b004943a 	slli	r2,r22,16
    3f48:	0007883a 	mov	r3,zero
    3f4c:	1404b03a 	or	r2,r2,r16
    3f50:	00005e06 	br	40cc <__udivdi3+0x2c8>
    3f54:	29c05b36 	bltu	r5,r7,40c4 <__udivdi3+0x2c0>
    3f58:	00bfffd4 	movui	r2,65535
    3f5c:	11c0672e 	bgeu	r2,r7,40fc <__udivdi3+0x2f8>
    3f60:	00804034 	movhi	r2,256
    3f64:	10bfffc4 	addi	r2,r2,-1
    3f68:	11c10a36 	bltu	r2,r7,4394 <__udivdi3+0x590>
    3f6c:	00800404 	movi	r2,16
    3f70:	3886d83a 	srl	r3,r7,r2
    3f74:	01000074 	movhi	r4,1
    3f78:	2124a904 	addi	r4,r4,-27996
    3f7c:	20c7883a 	add	r3,r4,r3
    3f80:	18c00003 	ldbu	r3,0(r3)
    3f84:	05c00804 	movi	r23,32
    3f88:	1885883a 	add	r2,r3,r2
    3f8c:	b8afc83a 	sub	r23,r23,r2
    3f90:	b800671e 	bne	r23,zero,4130 <__udivdi3+0x32c>
    3f94:	3c010536 	bltu	r7,r16,43ac <__udivdi3+0x5a8>
    3f98:	9985403a 	cmpgeu	r2,r19,r6
    3f9c:	0007883a 	mov	r3,zero
    3fa0:	00004a06 	br	40cc <__udivdi3+0x2c8>
    3fa4:	3000041e 	bne	r6,zero,3fb8 <__udivdi3+0x1b4>
    3fa8:	000b883a 	mov	r5,zero
    3fac:	01000044 	movi	r4,1
    3fb0:	0004abc0 	call	4abc <__udivsi3>
    3fb4:	1023883a 	mov	r17,r2
    3fb8:	00bfffd4 	movui	r2,65535
    3fbc:	1440532e 	bgeu	r2,r17,410c <__udivdi3+0x308>
    3fc0:	00804034 	movhi	r2,256
    3fc4:	10bfffc4 	addi	r2,r2,-1
    3fc8:	1440f436 	bltu	r2,r17,439c <__udivdi3+0x598>
    3fcc:	00800404 	movi	r2,16
    3fd0:	8886d83a 	srl	r3,r17,r2
    3fd4:	01000074 	movhi	r4,1
    3fd8:	2124a904 	addi	r4,r4,-27996
    3fdc:	20c7883a 	add	r3,r4,r3
    3fe0:	18c00003 	ldbu	r3,0(r3)
    3fe4:	1885883a 	add	r2,r3,r2
    3fe8:	00c00804 	movi	r3,32
    3fec:	1887c83a 	sub	r3,r3,r2
    3ff0:	1800a51e 	bne	r3,zero,4288 <__udivdi3+0x484>
    3ff4:	882ad43a 	srli	r21,r17,16
    3ff8:	8461c83a 	sub	r16,r16,r17
    3ffc:	8d3fffcc 	andi	r20,r17,65535
    4000:	00c00044 	movi	r3,1
    4004:	a80b883a 	mov	r5,r21
    4008:	8009883a 	mov	r4,r16
    400c:	d8c00115 	stw	r3,4(sp)
    4010:	0004b200 	call	4b20 <__umodsi3>
    4014:	a80b883a 	mov	r5,r21
    4018:	8009883a 	mov	r4,r16
    401c:	1027883a 	mov	r19,r2
    4020:	0004abc0 	call	4abc <__udivsi3>
    4024:	a00b883a 	mov	r5,r20
    4028:	1009883a 	mov	r4,r2
    402c:	102d883a 	mov	r22,r2
    4030:	0004b780 	call	4b78 <__mulsi3>
    4034:	9826943a 	slli	r19,r19,16
    4038:	900ed43a 	srli	r7,r18,16
    403c:	d8c00117 	ldw	r3,4(sp)
    4040:	3cceb03a 	or	r7,r7,r19
    4044:	3880052e 	bgeu	r7,r2,405c <__udivdi3+0x258>
    4048:	3c4f883a 	add	r7,r7,r17
    404c:	b13fffc4 	addi	r4,r22,-1
    4050:	3c400136 	bltu	r7,r17,4058 <__udivdi3+0x254>
    4054:	3880e436 	bltu	r7,r2,43e8 <__udivdi3+0x5e4>
    4058:	202d883a 	mov	r22,r4
    405c:	38a1c83a 	sub	r16,r7,r2
    4060:	8009883a 	mov	r4,r16
    4064:	a80b883a 	mov	r5,r21
    4068:	d8c00115 	stw	r3,4(sp)
    406c:	0004b200 	call	4b20 <__umodsi3>
    4070:	1027883a 	mov	r19,r2
    4074:	8009883a 	mov	r4,r16
    4078:	a80b883a 	mov	r5,r21
    407c:	9826943a 	slli	r19,r19,16
    4080:	0004abc0 	call	4abc <__udivsi3>
    4084:	a00b883a 	mov	r5,r20
    4088:	1009883a 	mov	r4,r2
    408c:	94bfffcc 	andi	r18,r18,65535
    4090:	1021883a 	mov	r16,r2
    4094:	94e4b03a 	or	r18,r18,r19
    4098:	0004b780 	call	4b78 <__mulsi3>
    409c:	d8c00117 	ldw	r3,4(sp)
    40a0:	9080052e 	bgeu	r18,r2,40b8 <__udivdi3+0x2b4>
    40a4:	8ca5883a 	add	r18,r17,r18
    40a8:	813fffc4 	addi	r4,r16,-1
    40ac:	9440ad36 	bltu	r18,r17,4364 <__udivdi3+0x560>
    40b0:	9080ac2e 	bgeu	r18,r2,4364 <__udivdi3+0x560>
    40b4:	843fff84 	addi	r16,r16,-2
    40b8:	b004943a 	slli	r2,r22,16
    40bc:	1404b03a 	or	r2,r2,r16
    40c0:	00000206 	br	40cc <__udivdi3+0x2c8>
    40c4:	0007883a 	mov	r3,zero
    40c8:	0005883a 	mov	r2,zero
    40cc:	dfc00b17 	ldw	ra,44(sp)
    40d0:	df000a17 	ldw	fp,40(sp)
    40d4:	ddc00917 	ldw	r23,36(sp)
    40d8:	dd800817 	ldw	r22,32(sp)
    40dc:	dd400717 	ldw	r21,28(sp)
    40e0:	dd000617 	ldw	r20,24(sp)
    40e4:	dcc00517 	ldw	r19,20(sp)
    40e8:	dc800417 	ldw	r18,16(sp)
    40ec:	dc400317 	ldw	r17,12(sp)
    40f0:	dc000217 	ldw	r16,8(sp)
    40f4:	dec00c04 	addi	sp,sp,48
    40f8:	f800283a 	ret
    40fc:	00803fc4 	movi	r2,255
    4100:	11c5803a 	cmpltu	r2,r2,r7
    4104:	100490fa 	slli	r2,r2,3
    4108:	003f9906 	br	3f70 <__ram_exceptions_end+0xfe001f50>
    410c:	00803fc4 	movi	r2,255
    4110:	1445803a 	cmpltu	r2,r2,r17
    4114:	100490fa 	slli	r2,r2,3
    4118:	003fad06 	br	3fd0 <__ram_exceptions_end+0xfe001fb0>
    411c:	00804034 	movhi	r2,256
    4120:	10bfffc4 	addi	r2,r2,-1
    4124:	11809f36 	bltu	r2,r6,43a4 <__udivdi3+0x5a0>
    4128:	00800404 	movi	r2,16
    412c:	003f4c06 	br	3e60 <__ram_exceptions_end+0xfe001e40>
    4130:	3dce983a 	sll	r7,r7,r23
    4134:	30b8d83a 	srl	fp,r6,r2
    4138:	80a2d83a 	srl	r17,r16,r2
    413c:	35cc983a 	sll	r6,r6,r23
    4140:	3f38b03a 	or	fp,r7,fp
    4144:	e024d43a 	srli	r18,fp,16
    4148:	9884d83a 	srl	r2,r19,r2
    414c:	85e0983a 	sll	r16,r16,r23
    4150:	8809883a 	mov	r4,r17
    4154:	900b883a 	mov	r5,r18
    4158:	d9800015 	stw	r6,0(sp)
    415c:	1420b03a 	or	r16,r2,r16
    4160:	0004b200 	call	4b20 <__umodsi3>
    4164:	900b883a 	mov	r5,r18
    4168:	8809883a 	mov	r4,r17
    416c:	1029883a 	mov	r20,r2
    4170:	e5bfffcc 	andi	r22,fp,65535
    4174:	0004abc0 	call	4abc <__udivsi3>
    4178:	100b883a 	mov	r5,r2
    417c:	b009883a 	mov	r4,r22
    4180:	102b883a 	mov	r21,r2
    4184:	0004b780 	call	4b78 <__mulsi3>
    4188:	a028943a 	slli	r20,r20,16
    418c:	8006d43a 	srli	r3,r16,16
    4190:	1d06b03a 	or	r3,r3,r20
    4194:	1880042e 	bgeu	r3,r2,41a8 <__udivdi3+0x3a4>
    4198:	1f07883a 	add	r3,r3,fp
    419c:	a93fffc4 	addi	r4,r21,-1
    41a0:	1f00892e 	bgeu	r3,fp,43c8 <__udivdi3+0x5c4>
    41a4:	202b883a 	mov	r21,r4
    41a8:	18a3c83a 	sub	r17,r3,r2
    41ac:	8809883a 	mov	r4,r17
    41b0:	900b883a 	mov	r5,r18
    41b4:	0004b200 	call	4b20 <__umodsi3>
    41b8:	1029883a 	mov	r20,r2
    41bc:	8809883a 	mov	r4,r17
    41c0:	900b883a 	mov	r5,r18
    41c4:	a028943a 	slli	r20,r20,16
    41c8:	0004abc0 	call	4abc <__udivsi3>
    41cc:	100b883a 	mov	r5,r2
    41d0:	b009883a 	mov	r4,r22
    41d4:	843fffcc 	andi	r16,r16,65535
    41d8:	1023883a 	mov	r17,r2
    41dc:	8520b03a 	or	r16,r16,r20
    41e0:	0004b780 	call	4b78 <__mulsi3>
    41e4:	8080042e 	bgeu	r16,r2,41f8 <__udivdi3+0x3f4>
    41e8:	8721883a 	add	r16,r16,fp
    41ec:	88ffffc4 	addi	r3,r17,-1
    41f0:	8700712e 	bgeu	r16,fp,43b8 <__udivdi3+0x5b4>
    41f4:	1823883a 	mov	r17,r3
    41f8:	a80e943a 	slli	r7,r21,16
    41fc:	d8c00017 	ldw	r3,0(sp)
    4200:	80a1c83a 	sub	r16,r16,r2
    4204:	3c64b03a 	or	r18,r7,r17
    4208:	1d3fffcc 	andi	r20,r3,65535
    420c:	9022d43a 	srli	r17,r18,16
    4210:	95bfffcc 	andi	r22,r18,65535
    4214:	a00b883a 	mov	r5,r20
    4218:	b009883a 	mov	r4,r22
    421c:	182ad43a 	srli	r21,r3,16
    4220:	0004b780 	call	4b78 <__mulsi3>
    4224:	a00b883a 	mov	r5,r20
    4228:	8809883a 	mov	r4,r17
    422c:	1039883a 	mov	fp,r2
    4230:	0004b780 	call	4b78 <__mulsi3>
    4234:	8809883a 	mov	r4,r17
    4238:	a80b883a 	mov	r5,r21
    423c:	1029883a 	mov	r20,r2
    4240:	0004b780 	call	4b78 <__mulsi3>
    4244:	a80b883a 	mov	r5,r21
    4248:	b009883a 	mov	r4,r22
    424c:	1023883a 	mov	r17,r2
    4250:	0004b780 	call	4b78 <__mulsi3>
    4254:	e006d43a 	srli	r3,fp,16
    4258:	1505883a 	add	r2,r2,r20
    425c:	1887883a 	add	r3,r3,r2
    4260:	1d00022e 	bgeu	r3,r20,426c <__udivdi3+0x468>
    4264:	00800074 	movhi	r2,1
    4268:	88a3883a 	add	r17,r17,r2
    426c:	1804d43a 	srli	r2,r3,16
    4270:	1463883a 	add	r17,r2,r17
    4274:	84404436 	bltu	r16,r17,4388 <__udivdi3+0x584>
    4278:	84403e26 	beq	r16,r17,4374 <__udivdi3+0x570>
    427c:	9005883a 	mov	r2,r18
    4280:	0007883a 	mov	r3,zero
    4284:	003f9106 	br	40cc <__ram_exceptions_end+0xfe0020ac>
    4288:	88e2983a 	sll	r17,r17,r3
    428c:	80aed83a 	srl	r23,r16,r2
    4290:	80e0983a 	sll	r16,r16,r3
    4294:	882ad43a 	srli	r21,r17,16
    4298:	9884d83a 	srl	r2,r19,r2
    429c:	b809883a 	mov	r4,r23
    42a0:	a80b883a 	mov	r5,r21
    42a4:	98e4983a 	sll	r18,r19,r3
    42a8:	142cb03a 	or	r22,r2,r16
    42ac:	0004b200 	call	4b20 <__umodsi3>
    42b0:	b809883a 	mov	r4,r23
    42b4:	a80b883a 	mov	r5,r21
    42b8:	1027883a 	mov	r19,r2
    42bc:	8d3fffcc 	andi	r20,r17,65535
    42c0:	0004abc0 	call	4abc <__udivsi3>
    42c4:	a009883a 	mov	r4,r20
    42c8:	100b883a 	mov	r5,r2
    42cc:	102f883a 	mov	r23,r2
    42d0:	0004b780 	call	4b78 <__mulsi3>
    42d4:	9826943a 	slli	r19,r19,16
    42d8:	b008d43a 	srli	r4,r22,16
    42dc:	24c8b03a 	or	r4,r4,r19
    42e0:	2080062e 	bgeu	r4,r2,42fc <__udivdi3+0x4f8>
    42e4:	2449883a 	add	r4,r4,r17
    42e8:	b8ffffc4 	addi	r3,r23,-1
    42ec:	24403c36 	bltu	r4,r17,43e0 <__udivdi3+0x5dc>
    42f0:	20803b2e 	bgeu	r4,r2,43e0 <__udivdi3+0x5dc>
    42f4:	bdffff84 	addi	r23,r23,-2
    42f8:	2449883a 	add	r4,r4,r17
    42fc:	20a1c83a 	sub	r16,r4,r2
    4300:	a80b883a 	mov	r5,r21
    4304:	8009883a 	mov	r4,r16
    4308:	0004b200 	call	4b20 <__umodsi3>
    430c:	a80b883a 	mov	r5,r21
    4310:	8009883a 	mov	r4,r16
    4314:	1027883a 	mov	r19,r2
    4318:	0004abc0 	call	4abc <__udivsi3>
    431c:	a009883a 	mov	r4,r20
    4320:	100b883a 	mov	r5,r2
    4324:	9826943a 	slli	r19,r19,16
    4328:	1039883a 	mov	fp,r2
    432c:	0004b780 	call	4b78 <__mulsi3>
    4330:	b13fffcc 	andi	r4,r22,65535
    4334:	24c8b03a 	or	r4,r4,r19
    4338:	2080062e 	bgeu	r4,r2,4354 <__udivdi3+0x550>
    433c:	2449883a 	add	r4,r4,r17
    4340:	e0ffffc4 	addi	r3,fp,-1
    4344:	24402436 	bltu	r4,r17,43d8 <__udivdi3+0x5d4>
    4348:	2080232e 	bgeu	r4,r2,43d8 <__udivdi3+0x5d4>
    434c:	e73fff84 	addi	fp,fp,-2
    4350:	2449883a 	add	r4,r4,r17
    4354:	b82e943a 	slli	r23,r23,16
    4358:	20a1c83a 	sub	r16,r4,r2
    435c:	bf06b03a 	or	r3,r23,fp
    4360:	003f2806 	br	4004 <__ram_exceptions_end+0xfe001fe4>
    4364:	2021883a 	mov	r16,r4
    4368:	003f5306 	br	40b8 <__ram_exceptions_end+0xfe002098>
    436c:	1821883a 	mov	r16,r3
    4370:	003ef406 	br	3f44 <__ram_exceptions_end+0xfe001f24>
    4374:	1806943a 	slli	r3,r3,16
    4378:	9de6983a 	sll	r19,r19,r23
    437c:	e73fffcc 	andi	fp,fp,65535
    4380:	1f07883a 	add	r3,r3,fp
    4384:	98ffbd2e 	bgeu	r19,r3,427c <__ram_exceptions_end+0xfe00225c>
    4388:	90bfffc4 	addi	r2,r18,-1
    438c:	0007883a 	mov	r3,zero
    4390:	003f4e06 	br	40cc <__ram_exceptions_end+0xfe0020ac>
    4394:	00800604 	movi	r2,24
    4398:	003ef506 	br	3f70 <__ram_exceptions_end+0xfe001f50>
    439c:	00800604 	movi	r2,24
    43a0:	003f0b06 	br	3fd0 <__ram_exceptions_end+0xfe001fb0>
    43a4:	00800604 	movi	r2,24
    43a8:	003ead06 	br	3e60 <__ram_exceptions_end+0xfe001e40>
    43ac:	0007883a 	mov	r3,zero
    43b0:	00800044 	movi	r2,1
    43b4:	003f4506 	br	40cc <__ram_exceptions_end+0xfe0020ac>
    43b8:	80bf8e2e 	bgeu	r16,r2,41f4 <__ram_exceptions_end+0xfe0021d4>
    43bc:	8c7fff84 	addi	r17,r17,-2
    43c0:	8721883a 	add	r16,r16,fp
    43c4:	003f8c06 	br	41f8 <__ram_exceptions_end+0xfe0021d8>
    43c8:	18bf762e 	bgeu	r3,r2,41a4 <__ram_exceptions_end+0xfe002184>
    43cc:	ad7fff84 	addi	r21,r21,-2
    43d0:	1f07883a 	add	r3,r3,fp
    43d4:	003f7406 	br	41a8 <__ram_exceptions_end+0xfe002188>
    43d8:	1839883a 	mov	fp,r3
    43dc:	003fdd06 	br	4354 <__ram_exceptions_end+0xfe002334>
    43e0:	182f883a 	mov	r23,r3
    43e4:	003fc506 	br	42fc <__ram_exceptions_end+0xfe0022dc>
    43e8:	b5bfff84 	addi	r22,r22,-2
    43ec:	3c4f883a 	add	r7,r7,r17
    43f0:	003f1a06 	br	405c <__ram_exceptions_end+0xfe00203c>
    43f4:	b5bfff84 	addi	r22,r22,-2
    43f8:	1c47883a 	add	r3,r3,r17
    43fc:	003ebc06 	br	3ef0 <__ram_exceptions_end+0xfe001ed0>

00004400 <__umoddi3>:
    4400:	defff304 	addi	sp,sp,-52
    4404:	df000b15 	stw	fp,44(sp)
    4408:	dc400415 	stw	r17,16(sp)
    440c:	dc000315 	stw	r16,12(sp)
    4410:	dfc00c15 	stw	ra,48(sp)
    4414:	ddc00a15 	stw	r23,40(sp)
    4418:	dd800915 	stw	r22,36(sp)
    441c:	dd400815 	stw	r21,32(sp)
    4420:	dd000715 	stw	r20,28(sp)
    4424:	dcc00615 	stw	r19,24(sp)
    4428:	dc800515 	stw	r18,20(sp)
    442c:	2021883a 	mov	r16,r4
    4430:	2823883a 	mov	r17,r5
    4434:	2839883a 	mov	fp,r5
    4438:	3800401e 	bne	r7,zero,453c <__umoddi3+0x13c>
    443c:	3027883a 	mov	r19,r6
    4440:	2029883a 	mov	r20,r4
    4444:	2980552e 	bgeu	r5,r6,459c <__umoddi3+0x19c>
    4448:	00bfffd4 	movui	r2,65535
    444c:	1180a236 	bltu	r2,r6,46d8 <__umoddi3+0x2d8>
    4450:	01003fc4 	movi	r4,255
    4454:	2189803a 	cmpltu	r4,r4,r6
    4458:	200890fa 	slli	r4,r4,3
    445c:	3104d83a 	srl	r2,r6,r4
    4460:	00c00074 	movhi	r3,1
    4464:	18e4a904 	addi	r3,r3,-27996
    4468:	1885883a 	add	r2,r3,r2
    446c:	10c00003 	ldbu	r3,0(r2)
    4470:	00800804 	movi	r2,32
    4474:	1909883a 	add	r4,r3,r4
    4478:	1125c83a 	sub	r18,r2,r4
    447c:	90000526 	beq	r18,zero,4494 <__umoddi3+0x94>
    4480:	8ca2983a 	sll	r17,r17,r18
    4484:	8108d83a 	srl	r4,r16,r4
    4488:	34a6983a 	sll	r19,r6,r18
    448c:	84a8983a 	sll	r20,r16,r18
    4490:	2478b03a 	or	fp,r4,r17
    4494:	982cd43a 	srli	r22,r19,16
    4498:	e009883a 	mov	r4,fp
    449c:	9dffffcc 	andi	r23,r19,65535
    44a0:	b00b883a 	mov	r5,r22
    44a4:	0004b200 	call	4b20 <__umodsi3>
    44a8:	b00b883a 	mov	r5,r22
    44ac:	e009883a 	mov	r4,fp
    44b0:	102b883a 	mov	r21,r2
    44b4:	0004abc0 	call	4abc <__udivsi3>
    44b8:	100b883a 	mov	r5,r2
    44bc:	b809883a 	mov	r4,r23
    44c0:	0004b780 	call	4b78 <__mulsi3>
    44c4:	a82a943a 	slli	r21,r21,16
    44c8:	a006d43a 	srli	r3,r20,16
    44cc:	1d46b03a 	or	r3,r3,r21
    44d0:	1880032e 	bgeu	r3,r2,44e0 <__umoddi3+0xe0>
    44d4:	1cc7883a 	add	r3,r3,r19
    44d8:	1cc00136 	bltu	r3,r19,44e0 <__umoddi3+0xe0>
    44dc:	18813136 	bltu	r3,r2,49a4 <__umoddi3+0x5a4>
    44e0:	18a1c83a 	sub	r16,r3,r2
    44e4:	b00b883a 	mov	r5,r22
    44e8:	8009883a 	mov	r4,r16
    44ec:	0004b200 	call	4b20 <__umodsi3>
    44f0:	b00b883a 	mov	r5,r22
    44f4:	8009883a 	mov	r4,r16
    44f8:	1023883a 	mov	r17,r2
    44fc:	0004abc0 	call	4abc <__udivsi3>
    4500:	100b883a 	mov	r5,r2
    4504:	b809883a 	mov	r4,r23
    4508:	8822943a 	slli	r17,r17,16
    450c:	0004b780 	call	4b78 <__mulsi3>
    4510:	a0ffffcc 	andi	r3,r20,65535
    4514:	1c46b03a 	or	r3,r3,r17
    4518:	1880042e 	bgeu	r3,r2,452c <__umoddi3+0x12c>
    451c:	1cc7883a 	add	r3,r3,r19
    4520:	1cc00236 	bltu	r3,r19,452c <__umoddi3+0x12c>
    4524:	1880012e 	bgeu	r3,r2,452c <__umoddi3+0x12c>
    4528:	1cc7883a 	add	r3,r3,r19
    452c:	1885c83a 	sub	r2,r3,r2
    4530:	1484d83a 	srl	r2,r2,r18
    4534:	0007883a 	mov	r3,zero
    4538:	00005306 	br	4688 <__umoddi3+0x288>
    453c:	29c05036 	bltu	r5,r7,4680 <__umoddi3+0x280>
    4540:	00bfffd4 	movui	r2,65535
    4544:	11c05c2e 	bgeu	r2,r7,46b8 <__umoddi3+0x2b8>
    4548:	00804034 	movhi	r2,256
    454c:	10bfffc4 	addi	r2,r2,-1
    4550:	11c10636 	bltu	r2,r7,496c <__umoddi3+0x56c>
    4554:	01000404 	movi	r4,16
    4558:	3904d83a 	srl	r2,r7,r4
    455c:	00c00074 	movhi	r3,1
    4560:	18e4a904 	addi	r3,r3,-27996
    4564:	1885883a 	add	r2,r3,r2
    4568:	14c00003 	ldbu	r19,0(r2)
    456c:	00c00804 	movi	r3,32
    4570:	9927883a 	add	r19,r19,r4
    4574:	1ce9c83a 	sub	r20,r3,r19
    4578:	a0005c1e 	bne	r20,zero,46ec <__umoddi3+0x2ec>
    457c:	3c400136 	bltu	r7,r17,4584 <__umoddi3+0x184>
    4580:	81810a36 	bltu	r16,r6,49ac <__umoddi3+0x5ac>
    4584:	8185c83a 	sub	r2,r16,r6
    4588:	89e3c83a 	sub	r17,r17,r7
    458c:	8089803a 	cmpltu	r4,r16,r2
    4590:	8939c83a 	sub	fp,r17,r4
    4594:	e007883a 	mov	r3,fp
    4598:	00003b06 	br	4688 <__umoddi3+0x288>
    459c:	3000041e 	bne	r6,zero,45b0 <__umoddi3+0x1b0>
    45a0:	000b883a 	mov	r5,zero
    45a4:	01000044 	movi	r4,1
    45a8:	0004abc0 	call	4abc <__udivsi3>
    45ac:	1027883a 	mov	r19,r2
    45b0:	00bfffd4 	movui	r2,65535
    45b4:	14c0442e 	bgeu	r2,r19,46c8 <__umoddi3+0x2c8>
    45b8:	00804034 	movhi	r2,256
    45bc:	10bfffc4 	addi	r2,r2,-1
    45c0:	14c0ec36 	bltu	r2,r19,4974 <__umoddi3+0x574>
    45c4:	00800404 	movi	r2,16
    45c8:	9886d83a 	srl	r3,r19,r2
    45cc:	01000074 	movhi	r4,1
    45d0:	2124a904 	addi	r4,r4,-27996
    45d4:	20c7883a 	add	r3,r4,r3
    45d8:	18c00003 	ldbu	r3,0(r3)
    45dc:	1887883a 	add	r3,r3,r2
    45e0:	00800804 	movi	r2,32
    45e4:	10e5c83a 	sub	r18,r2,r3
    45e8:	9000ab1e 	bne	r18,zero,4898 <__umoddi3+0x498>
    45ec:	982cd43a 	srli	r22,r19,16
    45f0:	8ce3c83a 	sub	r17,r17,r19
    45f4:	9dffffcc 	andi	r23,r19,65535
    45f8:	b00b883a 	mov	r5,r22
    45fc:	8809883a 	mov	r4,r17
    4600:	0004b200 	call	4b20 <__umodsi3>
    4604:	b00b883a 	mov	r5,r22
    4608:	8809883a 	mov	r4,r17
    460c:	102b883a 	mov	r21,r2
    4610:	0004abc0 	call	4abc <__udivsi3>
    4614:	b80b883a 	mov	r5,r23
    4618:	1009883a 	mov	r4,r2
    461c:	0004b780 	call	4b78 <__mulsi3>
    4620:	a82a943a 	slli	r21,r21,16
    4624:	a006d43a 	srli	r3,r20,16
    4628:	1d46b03a 	or	r3,r3,r21
    462c:	1880042e 	bgeu	r3,r2,4640 <__umoddi3+0x240>
    4630:	1cc7883a 	add	r3,r3,r19
    4634:	1cc00236 	bltu	r3,r19,4640 <__umoddi3+0x240>
    4638:	1880012e 	bgeu	r3,r2,4640 <__umoddi3+0x240>
    463c:	1cc7883a 	add	r3,r3,r19
    4640:	18a1c83a 	sub	r16,r3,r2
    4644:	b00b883a 	mov	r5,r22
    4648:	8009883a 	mov	r4,r16
    464c:	0004b200 	call	4b20 <__umodsi3>
    4650:	1023883a 	mov	r17,r2
    4654:	b00b883a 	mov	r5,r22
    4658:	8009883a 	mov	r4,r16
    465c:	0004abc0 	call	4abc <__udivsi3>
    4660:	8822943a 	slli	r17,r17,16
    4664:	b80b883a 	mov	r5,r23
    4668:	1009883a 	mov	r4,r2
    466c:	0004b780 	call	4b78 <__mulsi3>
    4670:	a53fffcc 	andi	r20,r20,65535
    4674:	a446b03a 	or	r3,r20,r17
    4678:	18bfac2e 	bgeu	r3,r2,452c <__ram_exceptions_end+0xfe00250c>
    467c:	003fa706 	br	451c <__ram_exceptions_end+0xfe0024fc>
    4680:	2005883a 	mov	r2,r4
    4684:	2807883a 	mov	r3,r5
    4688:	dfc00c17 	ldw	ra,48(sp)
    468c:	df000b17 	ldw	fp,44(sp)
    4690:	ddc00a17 	ldw	r23,40(sp)
    4694:	dd800917 	ldw	r22,36(sp)
    4698:	dd400817 	ldw	r21,32(sp)
    469c:	dd000717 	ldw	r20,28(sp)
    46a0:	dcc00617 	ldw	r19,24(sp)
    46a4:	dc800517 	ldw	r18,20(sp)
    46a8:	dc400417 	ldw	r17,16(sp)
    46ac:	dc000317 	ldw	r16,12(sp)
    46b0:	dec00d04 	addi	sp,sp,52
    46b4:	f800283a 	ret
    46b8:	04c03fc4 	movi	r19,255
    46bc:	99c9803a 	cmpltu	r4,r19,r7
    46c0:	200890fa 	slli	r4,r4,3
    46c4:	003fa406 	br	4558 <__ram_exceptions_end+0xfe002538>
    46c8:	00803fc4 	movi	r2,255
    46cc:	14c5803a 	cmpltu	r2,r2,r19
    46d0:	100490fa 	slli	r2,r2,3
    46d4:	003fbc06 	br	45c8 <__ram_exceptions_end+0xfe0025a8>
    46d8:	00804034 	movhi	r2,256
    46dc:	10bfffc4 	addi	r2,r2,-1
    46e0:	1180a636 	bltu	r2,r6,497c <__umoddi3+0x57c>
    46e4:	01000404 	movi	r4,16
    46e8:	003f5c06 	br	445c <__ram_exceptions_end+0xfe00243c>
    46ec:	3d0e983a 	sll	r7,r7,r20
    46f0:	34ead83a 	srl	r21,r6,r19
    46f4:	8cc6d83a 	srl	r3,r17,r19
    46f8:	8d10983a 	sll	r8,r17,r20
    46fc:	3d6ab03a 	or	r21,r7,r21
    4700:	a82cd43a 	srli	r22,r21,16
    4704:	84e2d83a 	srl	r17,r16,r19
    4708:	1809883a 	mov	r4,r3
    470c:	b00b883a 	mov	r5,r22
    4710:	8a22b03a 	or	r17,r17,r8
    4714:	3524983a 	sll	r18,r6,r20
    4718:	dc400015 	stw	r17,0(sp)
    471c:	d8c00115 	stw	r3,4(sp)
    4720:	0004b200 	call	4b20 <__umodsi3>
    4724:	d8c00117 	ldw	r3,4(sp)
    4728:	b00b883a 	mov	r5,r22
    472c:	1039883a 	mov	fp,r2
    4730:	1809883a 	mov	r4,r3
    4734:	0004abc0 	call	4abc <__udivsi3>
    4738:	adffffcc 	andi	r23,r21,65535
    473c:	100b883a 	mov	r5,r2
    4740:	b809883a 	mov	r4,r23
    4744:	1023883a 	mov	r17,r2
    4748:	0004b780 	call	4b78 <__mulsi3>
    474c:	d9400017 	ldw	r5,0(sp)
    4750:	e008943a 	slli	r4,fp,16
    4754:	8520983a 	sll	r16,r16,r20
    4758:	2806d43a 	srli	r3,r5,16
    475c:	1906b03a 	or	r3,r3,r4
    4760:	1880042e 	bgeu	r3,r2,4774 <__umoddi3+0x374>
    4764:	1d47883a 	add	r3,r3,r21
    4768:	893fffc4 	addi	r4,r17,-1
    476c:	1d40892e 	bgeu	r3,r21,4994 <__umoddi3+0x594>
    4770:	2023883a 	mov	r17,r4
    4774:	18b9c83a 	sub	fp,r3,r2
    4778:	b00b883a 	mov	r5,r22
    477c:	e009883a 	mov	r4,fp
    4780:	0004b200 	call	4b20 <__umodsi3>
    4784:	b00b883a 	mov	r5,r22
    4788:	e009883a 	mov	r4,fp
    478c:	d8800215 	stw	r2,8(sp)
    4790:	0004abc0 	call	4abc <__udivsi3>
    4794:	100b883a 	mov	r5,r2
    4798:	b809883a 	mov	r4,r23
    479c:	102d883a 	mov	r22,r2
    47a0:	0004b780 	call	4b78 <__mulsi3>
    47a4:	d9800217 	ldw	r6,8(sp)
    47a8:	d8c00017 	ldw	r3,0(sp)
    47ac:	300c943a 	slli	r6,r6,16
    47b0:	1a3fffcc 	andi	r8,r3,65535
    47b4:	4190b03a 	or	r8,r8,r6
    47b8:	4080042e 	bgeu	r8,r2,47cc <__umoddi3+0x3cc>
    47bc:	4551883a 	add	r8,r8,r21
    47c0:	b0ffffc4 	addi	r3,r22,-1
    47c4:	45406f2e 	bgeu	r8,r21,4984 <__umoddi3+0x584>
    47c8:	182d883a 	mov	r22,r3
    47cc:	880e943a 	slli	r7,r17,16
    47d0:	9006d43a 	srli	r3,r18,16
    47d4:	91bfffcc 	andi	r6,r18,65535
    47d8:	3dacb03a 	or	r22,r7,r22
    47dc:	b02ed43a 	srli	r23,r22,16
    47e0:	b5bfffcc 	andi	r22,r22,65535
    47e4:	300b883a 	mov	r5,r6
    47e8:	b009883a 	mov	r4,r22
    47ec:	40a3c83a 	sub	r17,r8,r2
    47f0:	d8c00115 	stw	r3,4(sp)
    47f4:	d9800215 	stw	r6,8(sp)
    47f8:	0004b780 	call	4b78 <__mulsi3>
    47fc:	d9800217 	ldw	r6,8(sp)
    4800:	b809883a 	mov	r4,r23
    4804:	1039883a 	mov	fp,r2
    4808:	300b883a 	mov	r5,r6
    480c:	0004b780 	call	4b78 <__mulsi3>
    4810:	d8c00117 	ldw	r3,4(sp)
    4814:	b809883a 	mov	r4,r23
    4818:	d8800215 	stw	r2,8(sp)
    481c:	180b883a 	mov	r5,r3
    4820:	0004b780 	call	4b78 <__mulsi3>
    4824:	d8c00117 	ldw	r3,4(sp)
    4828:	b009883a 	mov	r4,r22
    482c:	102f883a 	mov	r23,r2
    4830:	180b883a 	mov	r5,r3
    4834:	0004b780 	call	4b78 <__mulsi3>
    4838:	d9800217 	ldw	r6,8(sp)
    483c:	e006d43a 	srli	r3,fp,16
    4840:	1185883a 	add	r2,r2,r6
    4844:	1885883a 	add	r2,r3,r2
    4848:	1180022e 	bgeu	r2,r6,4854 <__umoddi3+0x454>
    484c:	00c00074 	movhi	r3,1
    4850:	b8ef883a 	add	r23,r23,r3
    4854:	1006d43a 	srli	r3,r2,16
    4858:	1004943a 	slli	r2,r2,16
    485c:	e73fffcc 	andi	fp,fp,65535
    4860:	1dc7883a 	add	r3,r3,r23
    4864:	1739883a 	add	fp,r2,fp
    4868:	88c03a36 	bltu	r17,r3,4954 <__umoddi3+0x554>
    486c:	88c05126 	beq	r17,r3,49b4 <__umoddi3+0x5b4>
    4870:	88c9c83a 	sub	r4,r17,r3
    4874:	e00f883a 	mov	r7,fp
    4878:	81cfc83a 	sub	r7,r16,r7
    487c:	81c7803a 	cmpltu	r3,r16,r7
    4880:	20c7c83a 	sub	r3,r4,r3
    4884:	1cc4983a 	sll	r2,r3,r19
    4888:	3d0ed83a 	srl	r7,r7,r20
    488c:	1d06d83a 	srl	r3,r3,r20
    4890:	11c4b03a 	or	r2,r2,r7
    4894:	003f7c06 	br	4688 <__ram_exceptions_end+0xfe002668>
    4898:	9ca6983a 	sll	r19,r19,r18
    489c:	88f8d83a 	srl	fp,r17,r3
    48a0:	80c4d83a 	srl	r2,r16,r3
    48a4:	982cd43a 	srli	r22,r19,16
    48a8:	8ca2983a 	sll	r17,r17,r18
    48ac:	e009883a 	mov	r4,fp
    48b0:	b00b883a 	mov	r5,r22
    48b4:	146ab03a 	or	r21,r2,r17
    48b8:	0004b200 	call	4b20 <__umodsi3>
    48bc:	b00b883a 	mov	r5,r22
    48c0:	e009883a 	mov	r4,fp
    48c4:	1029883a 	mov	r20,r2
    48c8:	9dffffcc 	andi	r23,r19,65535
    48cc:	0004abc0 	call	4abc <__udivsi3>
    48d0:	b809883a 	mov	r4,r23
    48d4:	100b883a 	mov	r5,r2
    48d8:	0004b780 	call	4b78 <__mulsi3>
    48dc:	a008943a 	slli	r4,r20,16
    48e0:	a806d43a 	srli	r3,r21,16
    48e4:	84a8983a 	sll	r20,r16,r18
    48e8:	1906b03a 	or	r3,r3,r4
    48ec:	1880042e 	bgeu	r3,r2,4900 <__umoddi3+0x500>
    48f0:	1cc7883a 	add	r3,r3,r19
    48f4:	1cc00236 	bltu	r3,r19,4900 <__umoddi3+0x500>
    48f8:	1880012e 	bgeu	r3,r2,4900 <__umoddi3+0x500>
    48fc:	1cc7883a 	add	r3,r3,r19
    4900:	18a3c83a 	sub	r17,r3,r2
    4904:	b00b883a 	mov	r5,r22
    4908:	8809883a 	mov	r4,r17
    490c:	0004b200 	call	4b20 <__umodsi3>
    4910:	b00b883a 	mov	r5,r22
    4914:	8809883a 	mov	r4,r17
    4918:	1021883a 	mov	r16,r2
    491c:	0004abc0 	call	4abc <__udivsi3>
    4920:	100b883a 	mov	r5,r2
    4924:	b809883a 	mov	r4,r23
    4928:	8020943a 	slli	r16,r16,16
    492c:	0004b780 	call	4b78 <__mulsi3>
    4930:	a8ffffcc 	andi	r3,r21,65535
    4934:	1c06b03a 	or	r3,r3,r16
    4938:	1880042e 	bgeu	r3,r2,494c <__umoddi3+0x54c>
    493c:	1cc7883a 	add	r3,r3,r19
    4940:	1cc00236 	bltu	r3,r19,494c <__umoddi3+0x54c>
    4944:	1880012e 	bgeu	r3,r2,494c <__umoddi3+0x54c>
    4948:	1cc7883a 	add	r3,r3,r19
    494c:	18a3c83a 	sub	r17,r3,r2
    4950:	003f2906 	br	45f8 <__ram_exceptions_end+0xfe0025d8>
    4954:	e48fc83a 	sub	r7,fp,r18
    4958:	1d49c83a 	sub	r4,r3,r21
    495c:	e1f9803a 	cmpltu	fp,fp,r7
    4960:	2739c83a 	sub	fp,r4,fp
    4964:	8f09c83a 	sub	r4,r17,fp
    4968:	003fc306 	br	4878 <__ram_exceptions_end+0xfe002858>
    496c:	01000604 	movi	r4,24
    4970:	003ef906 	br	4558 <__ram_exceptions_end+0xfe002538>
    4974:	00800604 	movi	r2,24
    4978:	003f1306 	br	45c8 <__ram_exceptions_end+0xfe0025a8>
    497c:	01000604 	movi	r4,24
    4980:	003eb606 	br	445c <__ram_exceptions_end+0xfe00243c>
    4984:	40bf902e 	bgeu	r8,r2,47c8 <__ram_exceptions_end+0xfe0027a8>
    4988:	b5bfff84 	addi	r22,r22,-2
    498c:	4551883a 	add	r8,r8,r21
    4990:	003f8e06 	br	47cc <__ram_exceptions_end+0xfe0027ac>
    4994:	18bf762e 	bgeu	r3,r2,4770 <__ram_exceptions_end+0xfe002750>
    4998:	8c7fff84 	addi	r17,r17,-2
    499c:	1d47883a 	add	r3,r3,r21
    49a0:	003f7406 	br	4774 <__ram_exceptions_end+0xfe002754>
    49a4:	1cc7883a 	add	r3,r3,r19
    49a8:	003ecd06 	br	44e0 <__ram_exceptions_end+0xfe0024c0>
    49ac:	8005883a 	mov	r2,r16
    49b0:	003ef806 	br	4594 <__ram_exceptions_end+0xfe002574>
    49b4:	873fe736 	bltu	r16,fp,4954 <__ram_exceptions_end+0xfe002934>
    49b8:	e00f883a 	mov	r7,fp
    49bc:	0009883a 	mov	r4,zero
    49c0:	003fad06 	br	4878 <__ram_exceptions_end+0xfe002858>

000049c4 <__divsi3>:
    49c4:	20001b16 	blt	r4,zero,4a34 <__divsi3+0x70>
    49c8:	000f883a 	mov	r7,zero
    49cc:	28001616 	blt	r5,zero,4a28 <__divsi3+0x64>
    49d0:	200d883a 	mov	r6,r4
    49d4:	29001a2e 	bgeu	r5,r4,4a40 <__divsi3+0x7c>
    49d8:	00800804 	movi	r2,32
    49dc:	00c00044 	movi	r3,1
    49e0:	00000106 	br	49e8 <__divsi3+0x24>
    49e4:	10000d26 	beq	r2,zero,4a1c <__divsi3+0x58>
    49e8:	294b883a 	add	r5,r5,r5
    49ec:	10bfffc4 	addi	r2,r2,-1
    49f0:	18c7883a 	add	r3,r3,r3
    49f4:	293ffb36 	bltu	r5,r4,49e4 <__ram_exceptions_end+0xfe0029c4>
    49f8:	0005883a 	mov	r2,zero
    49fc:	18000726 	beq	r3,zero,4a1c <__divsi3+0x58>
    4a00:	0005883a 	mov	r2,zero
    4a04:	31400236 	bltu	r6,r5,4a10 <__divsi3+0x4c>
    4a08:	314dc83a 	sub	r6,r6,r5
    4a0c:	10c4b03a 	or	r2,r2,r3
    4a10:	1806d07a 	srli	r3,r3,1
    4a14:	280ad07a 	srli	r5,r5,1
    4a18:	183ffa1e 	bne	r3,zero,4a04 <__ram_exceptions_end+0xfe0029e4>
    4a1c:	38000126 	beq	r7,zero,4a24 <__divsi3+0x60>
    4a20:	0085c83a 	sub	r2,zero,r2
    4a24:	f800283a 	ret
    4a28:	014bc83a 	sub	r5,zero,r5
    4a2c:	39c0005c 	xori	r7,r7,1
    4a30:	003fe706 	br	49d0 <__ram_exceptions_end+0xfe0029b0>
    4a34:	0109c83a 	sub	r4,zero,r4
    4a38:	01c00044 	movi	r7,1
    4a3c:	003fe306 	br	49cc <__ram_exceptions_end+0xfe0029ac>
    4a40:	00c00044 	movi	r3,1
    4a44:	003fee06 	br	4a00 <__ram_exceptions_end+0xfe0029e0>

00004a48 <__modsi3>:
    4a48:	20001716 	blt	r4,zero,4aa8 <__modsi3+0x60>
    4a4c:	000f883a 	mov	r7,zero
    4a50:	2005883a 	mov	r2,r4
    4a54:	28001216 	blt	r5,zero,4aa0 <__modsi3+0x58>
    4a58:	2900162e 	bgeu	r5,r4,4ab4 <__modsi3+0x6c>
    4a5c:	01800804 	movi	r6,32
    4a60:	00c00044 	movi	r3,1
    4a64:	00000106 	br	4a6c <__modsi3+0x24>
    4a68:	30000a26 	beq	r6,zero,4a94 <__modsi3+0x4c>
    4a6c:	294b883a 	add	r5,r5,r5
    4a70:	31bfffc4 	addi	r6,r6,-1
    4a74:	18c7883a 	add	r3,r3,r3
    4a78:	293ffb36 	bltu	r5,r4,4a68 <__ram_exceptions_end+0xfe002a48>
    4a7c:	18000526 	beq	r3,zero,4a94 <__modsi3+0x4c>
    4a80:	1806d07a 	srli	r3,r3,1
    4a84:	11400136 	bltu	r2,r5,4a8c <__modsi3+0x44>
    4a88:	1145c83a 	sub	r2,r2,r5
    4a8c:	280ad07a 	srli	r5,r5,1
    4a90:	183ffb1e 	bne	r3,zero,4a80 <__ram_exceptions_end+0xfe002a60>
    4a94:	38000126 	beq	r7,zero,4a9c <__modsi3+0x54>
    4a98:	0085c83a 	sub	r2,zero,r2
    4a9c:	f800283a 	ret
    4aa0:	014bc83a 	sub	r5,zero,r5
    4aa4:	003fec06 	br	4a58 <__ram_exceptions_end+0xfe002a38>
    4aa8:	0109c83a 	sub	r4,zero,r4
    4aac:	01c00044 	movi	r7,1
    4ab0:	003fe706 	br	4a50 <__ram_exceptions_end+0xfe002a30>
    4ab4:	00c00044 	movi	r3,1
    4ab8:	003ff106 	br	4a80 <__ram_exceptions_end+0xfe002a60>

00004abc <__udivsi3>:
    4abc:	200d883a 	mov	r6,r4
    4ac0:	2900152e 	bgeu	r5,r4,4b18 <__udivsi3+0x5c>
    4ac4:	28001416 	blt	r5,zero,4b18 <__udivsi3+0x5c>
    4ac8:	00800804 	movi	r2,32
    4acc:	00c00044 	movi	r3,1
    4ad0:	00000206 	br	4adc <__udivsi3+0x20>
    4ad4:	10000e26 	beq	r2,zero,4b10 <__udivsi3+0x54>
    4ad8:	28000516 	blt	r5,zero,4af0 <__udivsi3+0x34>
    4adc:	294b883a 	add	r5,r5,r5
    4ae0:	10bfffc4 	addi	r2,r2,-1
    4ae4:	18c7883a 	add	r3,r3,r3
    4ae8:	293ffa36 	bltu	r5,r4,4ad4 <__ram_exceptions_end+0xfe002ab4>
    4aec:	18000826 	beq	r3,zero,4b10 <__udivsi3+0x54>
    4af0:	0005883a 	mov	r2,zero
    4af4:	31400236 	bltu	r6,r5,4b00 <__udivsi3+0x44>
    4af8:	314dc83a 	sub	r6,r6,r5
    4afc:	10c4b03a 	or	r2,r2,r3
    4b00:	1806d07a 	srli	r3,r3,1
    4b04:	280ad07a 	srli	r5,r5,1
    4b08:	183ffa1e 	bne	r3,zero,4af4 <__ram_exceptions_end+0xfe002ad4>
    4b0c:	f800283a 	ret
    4b10:	0005883a 	mov	r2,zero
    4b14:	f800283a 	ret
    4b18:	00c00044 	movi	r3,1
    4b1c:	003ff406 	br	4af0 <__ram_exceptions_end+0xfe002ad0>

00004b20 <__umodsi3>:
    4b20:	2005883a 	mov	r2,r4
    4b24:	2900122e 	bgeu	r5,r4,4b70 <__umodsi3+0x50>
    4b28:	28001116 	blt	r5,zero,4b70 <__umodsi3+0x50>
    4b2c:	01800804 	movi	r6,32
    4b30:	00c00044 	movi	r3,1
    4b34:	00000206 	br	4b40 <__umodsi3+0x20>
    4b38:	30000c26 	beq	r6,zero,4b6c <__umodsi3+0x4c>
    4b3c:	28000516 	blt	r5,zero,4b54 <__umodsi3+0x34>
    4b40:	294b883a 	add	r5,r5,r5
    4b44:	31bfffc4 	addi	r6,r6,-1
    4b48:	18c7883a 	add	r3,r3,r3
    4b4c:	293ffa36 	bltu	r5,r4,4b38 <__ram_exceptions_end+0xfe002b18>
    4b50:	18000626 	beq	r3,zero,4b6c <__umodsi3+0x4c>
    4b54:	1806d07a 	srli	r3,r3,1
    4b58:	11400136 	bltu	r2,r5,4b60 <__umodsi3+0x40>
    4b5c:	1145c83a 	sub	r2,r2,r5
    4b60:	280ad07a 	srli	r5,r5,1
    4b64:	183ffb1e 	bne	r3,zero,4b54 <__ram_exceptions_end+0xfe002b34>
    4b68:	f800283a 	ret
    4b6c:	f800283a 	ret
    4b70:	00c00044 	movi	r3,1
    4b74:	003ff706 	br	4b54 <__ram_exceptions_end+0xfe002b34>

00004b78 <__mulsi3>:
    4b78:	0005883a 	mov	r2,zero
    4b7c:	20000726 	beq	r4,zero,4b9c <__mulsi3+0x24>
    4b80:	20c0004c 	andi	r3,r4,1
    4b84:	2008d07a 	srli	r4,r4,1
    4b88:	18000126 	beq	r3,zero,4b90 <__mulsi3+0x18>
    4b8c:	1145883a 	add	r2,r2,r5
    4b90:	294b883a 	add	r5,r5,r5
    4b94:	203ffa1e 	bne	r4,zero,4b80 <__ram_exceptions_end+0xfe002b60>
    4b98:	f800283a 	ret
    4b9c:	f800283a 	ret

00004ba0 <__addsf3>:
    4ba0:	defffc04 	addi	sp,sp,-16
    4ba4:	2004d7fa 	srli	r2,r4,31
    4ba8:	280cd5fa 	srli	r6,r5,23
    4bac:	dc000015 	stw	r16,0(sp)
    4bb0:	00c02034 	movhi	r3,128
    4bb4:	2020d5fa 	srli	r16,r4,23
    4bb8:	280ed7fa 	srli	r7,r5,31
    4bbc:	18ffffc4 	addi	r3,r3,-1
    4bc0:	dc400115 	stw	r17,4(sp)
    4bc4:	1908703a 	and	r4,r3,r4
    4bc8:	194a703a 	and	r5,r3,r5
    4bcc:	dfc00315 	stw	ra,12(sp)
    4bd0:	dc800215 	stw	r18,8(sp)
    4bd4:	14403fcc 	andi	r17,r2,255
    4bd8:	84003fcc 	andi	r16,r16,255
    4bdc:	200890fa 	slli	r4,r4,3
    4be0:	31803fcc 	andi	r6,r6,255
    4be4:	280a90fa 	slli	r5,r5,3
    4be8:	89c05026 	beq	r17,r7,4d2c <__addsf3+0x18c>
    4bec:	8185c83a 	sub	r2,r16,r6
    4bf0:	00807a0e 	bge	zero,r2,4ddc <__addsf3+0x23c>
    4bf4:	30001e1e 	bne	r6,zero,4c70 <__addsf3+0xd0>
    4bf8:	28006d1e 	bne	r5,zero,4db0 <__addsf3+0x210>
    4bfc:	208001cc 	andi	r2,r4,7
    4c00:	10000426 	beq	r2,zero,4c14 <__addsf3+0x74>
    4c04:	208003cc 	andi	r2,r4,15
    4c08:	00c00104 	movi	r3,4
    4c0c:	10c00126 	beq	r2,r3,4c14 <__addsf3+0x74>
    4c10:	20c9883a 	add	r4,r4,r3
    4c14:	2081002c 	andhi	r2,r4,1024
    4c18:	10003926 	beq	r2,zero,4d00 <__addsf3+0x160>
    4c1c:	84000044 	addi	r16,r16,1
    4c20:	00803fc4 	movi	r2,255
    4c24:	80807826 	beq	r16,r2,4e08 <__addsf3+0x268>
    4c28:	200891ba 	slli	r4,r4,6
    4c2c:	8805883a 	mov	r2,r17
    4c30:	2008d27a 	srli	r4,r4,9
    4c34:	84003fcc 	andi	r16,r16,255
    4c38:	800695fa 	slli	r3,r16,23
    4c3c:	10803fcc 	andi	r2,r2,255
    4c40:	04002034 	movhi	r16,128
    4c44:	843fffc4 	addi	r16,r16,-1
    4c48:	100497fa 	slli	r2,r2,31
    4c4c:	2408703a 	and	r4,r4,r16
    4c50:	20e0b03a 	or	r16,r4,r3
    4c54:	8084b03a 	or	r2,r16,r2
    4c58:	dfc00317 	ldw	ra,12(sp)
    4c5c:	dc800217 	ldw	r18,8(sp)
    4c60:	dc400117 	ldw	r17,4(sp)
    4c64:	dc000017 	ldw	r16,0(sp)
    4c68:	dec00404 	addi	sp,sp,16
    4c6c:	f800283a 	ret
    4c70:	00c03fc4 	movi	r3,255
    4c74:	80ffe126 	beq	r16,r3,4bfc <__ram_exceptions_end+0xfe002bdc>
    4c78:	29410034 	orhi	r5,r5,1024
    4c7c:	00c006c4 	movi	r3,27
    4c80:	18807516 	blt	r3,r2,4e58 <__addsf3+0x2b8>
    4c84:	00c00804 	movi	r3,32
    4c88:	1887c83a 	sub	r3,r3,r2
    4c8c:	28c6983a 	sll	r3,r5,r3
    4c90:	288ad83a 	srl	r5,r5,r2
    4c94:	1804c03a 	cmpne	r2,r3,zero
    4c98:	288ab03a 	or	r5,r5,r2
    4c9c:	2149c83a 	sub	r4,r4,r5
    4ca0:	2081002c 	andhi	r2,r4,1024
    4ca4:	10001426 	beq	r2,zero,4cf8 <__addsf3+0x158>
    4ca8:	04810034 	movhi	r18,1024
    4cac:	94bfffc4 	addi	r18,r18,-1
    4cb0:	24a4703a 	and	r18,r4,r18
    4cb4:	9009883a 	mov	r4,r18
    4cb8:	0008d340 	call	8d34 <__clzsi2>
    4cbc:	10bffec4 	addi	r2,r2,-5
    4cc0:	90a4983a 	sll	r18,r18,r2
    4cc4:	14005416 	blt	r2,r16,4e18 <__addsf3+0x278>
    4cc8:	1405c83a 	sub	r2,r2,r16
    4ccc:	11000044 	addi	r4,r2,1
    4cd0:	00800804 	movi	r2,32
    4cd4:	1105c83a 	sub	r2,r2,r4
    4cd8:	9084983a 	sll	r2,r18,r2
    4cdc:	9124d83a 	srl	r18,r18,r4
    4ce0:	0021883a 	mov	r16,zero
    4ce4:	1008c03a 	cmpne	r4,r2,zero
    4ce8:	9108b03a 	or	r4,r18,r4
    4cec:	003fc306 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    4cf0:	1000db26 	beq	r2,zero,5060 <__addsf3+0x4c0>
    4cf4:	1009883a 	mov	r4,r2
    4cf8:	208001cc 	andi	r2,r4,7
    4cfc:	103fc11e 	bne	r2,zero,4c04 <__ram_exceptions_end+0xfe002be4>
    4d00:	2006d0fa 	srli	r3,r4,3
    4d04:	01003fc4 	movi	r4,255
    4d08:	8805883a 	mov	r2,r17
    4d0c:	8100241e 	bne	r16,r4,4da0 <__addsf3+0x200>
    4d10:	18006e26 	beq	r3,zero,4ecc <__addsf3+0x32c>
    4d14:	19001034 	orhi	r4,r3,64
    4d18:	00c02034 	movhi	r3,128
    4d1c:	18ffffc4 	addi	r3,r3,-1
    4d20:	043fffc4 	movi	r16,-1
    4d24:	20c8703a 	and	r4,r4,r3
    4d28:	003fc206 	br	4c34 <__ram_exceptions_end+0xfe002c14>
    4d2c:	8187c83a 	sub	r3,r16,r6
    4d30:	00c03e0e 	bge	zero,r3,4e2c <__addsf3+0x28c>
    4d34:	30002326 	beq	r6,zero,4dc4 <__addsf3+0x224>
    4d38:	01803fc4 	movi	r6,255
    4d3c:	81bfaf26 	beq	r16,r6,4bfc <__ram_exceptions_end+0xfe002bdc>
    4d40:	29410034 	orhi	r5,r5,1024
    4d44:	018006c4 	movi	r6,27
    4d48:	30c07416 	blt	r6,r3,4f1c <__addsf3+0x37c>
    4d4c:	01800804 	movi	r6,32
    4d50:	30cdc83a 	sub	r6,r6,r3
    4d54:	298c983a 	sll	r6,r5,r6
    4d58:	28cad83a 	srl	r5,r5,r3
    4d5c:	3006c03a 	cmpne	r3,r6,zero
    4d60:	28cab03a 	or	r5,r5,r3
    4d64:	2149883a 	add	r4,r4,r5
    4d68:	20c1002c 	andhi	r3,r4,1024
    4d6c:	183fe226 	beq	r3,zero,4cf8 <__ram_exceptions_end+0xfe002cd8>
    4d70:	84000044 	addi	r16,r16,1
    4d74:	00c03fc4 	movi	r3,255
    4d78:	80c05426 	beq	r16,r3,4ecc <__addsf3+0x32c>
    4d7c:	00bf0034 	movhi	r2,64512
    4d80:	10bfffc4 	addi	r2,r2,-1
    4d84:	20c0004c 	andi	r3,r4,1
    4d88:	2088703a 	and	r4,r4,r2
    4d8c:	2008d07a 	srli	r4,r4,1
    4d90:	20c8b03a 	or	r4,r4,r3
    4d94:	003f9906 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    4d98:	0007883a 	mov	r3,zero
    4d9c:	0005883a 	mov	r2,zero
    4da0:	01002034 	movhi	r4,128
    4da4:	213fffc4 	addi	r4,r4,-1
    4da8:	1908703a 	and	r4,r3,r4
    4dac:	003fa106 	br	4c34 <__ram_exceptions_end+0xfe002c14>
    4db0:	10bfffc4 	addi	r2,r2,-1
    4db4:	103fb926 	beq	r2,zero,4c9c <__ram_exceptions_end+0xfe002c7c>
    4db8:	00c03fc4 	movi	r3,255
    4dbc:	80ffaf1e 	bne	r16,r3,4c7c <__ram_exceptions_end+0xfe002c5c>
    4dc0:	003f8e06 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    4dc4:	283f8d26 	beq	r5,zero,4bfc <__ram_exceptions_end+0xfe002bdc>
    4dc8:	18ffffc4 	addi	r3,r3,-1
    4dcc:	183fe526 	beq	r3,zero,4d64 <__ram_exceptions_end+0xfe002d44>
    4dd0:	01803fc4 	movi	r6,255
    4dd4:	81bfdb1e 	bne	r16,r6,4d44 <__ram_exceptions_end+0xfe002d24>
    4dd8:	003f8806 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    4ddc:	1000201e 	bne	r2,zero,4e60 <__addsf3+0x2c0>
    4de0:	80800044 	addi	r2,r16,1
    4de4:	10803fcc 	andi	r2,r2,255
    4de8:	01800044 	movi	r6,1
    4dec:	3080450e 	bge	r6,r2,4f04 <__addsf3+0x364>
    4df0:	2165c83a 	sub	r18,r4,r5
    4df4:	90c1002c 	andhi	r3,r18,1024
    4df8:	18002b26 	beq	r3,zero,4ea8 <__addsf3+0x308>
    4dfc:	2925c83a 	sub	r18,r5,r4
    4e00:	3823883a 	mov	r17,r7
    4e04:	003fab06 	br	4cb4 <__ram_exceptions_end+0xfe002c94>
    4e08:	8805883a 	mov	r2,r17
    4e0c:	043fffc4 	movi	r16,-1
    4e10:	0009883a 	mov	r4,zero
    4e14:	003f8706 	br	4c34 <__ram_exceptions_end+0xfe002c14>
    4e18:	013f0034 	movhi	r4,64512
    4e1c:	213fffc4 	addi	r4,r4,-1
    4e20:	80a1c83a 	sub	r16,r16,r2
    4e24:	9108703a 	and	r4,r18,r4
    4e28:	003f7406 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    4e2c:	1800411e 	bne	r3,zero,4f34 <__addsf3+0x394>
    4e30:	80c00044 	addi	r3,r16,1
    4e34:	19c03fcc 	andi	r7,r3,255
    4e38:	01800044 	movi	r6,1
    4e3c:	31c0260e 	bge	r6,r7,4ed8 <__addsf3+0x338>
    4e40:	01803fc4 	movi	r6,255
    4e44:	19802126 	beq	r3,r6,4ecc <__addsf3+0x32c>
    4e48:	2149883a 	add	r4,r4,r5
    4e4c:	2008d07a 	srli	r4,r4,1
    4e50:	1821883a 	mov	r16,r3
    4e54:	003f6906 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    4e58:	01400044 	movi	r5,1
    4e5c:	003f8f06 	br	4c9c <__ram_exceptions_end+0xfe002c7c>
    4e60:	8000151e 	bne	r16,zero,4eb8 <__addsf3+0x318>
    4e64:	20002f26 	beq	r4,zero,4f24 <__addsf3+0x384>
    4e68:	0084303a 	nor	r2,zero,r2
    4e6c:	10000a26 	beq	r2,zero,4e98 <__addsf3+0x2f8>
    4e70:	00c03fc4 	movi	r3,255
    4e74:	30c02b26 	beq	r6,r3,4f24 <__addsf3+0x384>
    4e78:	00c006c4 	movi	r3,27
    4e7c:	18806d16 	blt	r3,r2,5034 <__addsf3+0x494>
    4e80:	00c00804 	movi	r3,32
    4e84:	1887c83a 	sub	r3,r3,r2
    4e88:	20c6983a 	sll	r3,r4,r3
    4e8c:	2084d83a 	srl	r2,r4,r2
    4e90:	1808c03a 	cmpne	r4,r3,zero
    4e94:	1108b03a 	or	r4,r2,r4
    4e98:	2909c83a 	sub	r4,r5,r4
    4e9c:	3021883a 	mov	r16,r6
    4ea0:	3823883a 	mov	r17,r7
    4ea4:	003f7e06 	br	4ca0 <__ram_exceptions_end+0xfe002c80>
    4ea8:	903f821e 	bne	r18,zero,4cb4 <__ram_exceptions_end+0xfe002c94>
    4eac:	0005883a 	mov	r2,zero
    4eb0:	0021883a 	mov	r16,zero
    4eb4:	003fba06 	br	4da0 <__ram_exceptions_end+0xfe002d80>
    4eb8:	00c03fc4 	movi	r3,255
    4ebc:	30c01926 	beq	r6,r3,4f24 <__addsf3+0x384>
    4ec0:	0085c83a 	sub	r2,zero,r2
    4ec4:	21010034 	orhi	r4,r4,1024
    4ec8:	003feb06 	br	4e78 <__ram_exceptions_end+0xfe002e58>
    4ecc:	043fffc4 	movi	r16,-1
    4ed0:	0009883a 	mov	r4,zero
    4ed4:	003f5706 	br	4c34 <__ram_exceptions_end+0xfe002c14>
    4ed8:	80004a1e 	bne	r16,zero,5004 <__addsf3+0x464>
    4edc:	20005926 	beq	r4,zero,5044 <__addsf3+0x4a4>
    4ee0:	283f4626 	beq	r5,zero,4bfc <__ram_exceptions_end+0xfe002bdc>
    4ee4:	2149883a 	add	r4,r4,r5
    4ee8:	2081002c 	andhi	r2,r4,1024
    4eec:	103f8226 	beq	r2,zero,4cf8 <__ram_exceptions_end+0xfe002cd8>
    4ef0:	00bf0034 	movhi	r2,64512
    4ef4:	10bfffc4 	addi	r2,r2,-1
    4ef8:	3021883a 	mov	r16,r6
    4efc:	2088703a 	and	r4,r4,r2
    4f00:	003f3e06 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    4f04:	8000121e 	bne	r16,zero,4f50 <__addsf3+0x3b0>
    4f08:	2000261e 	bne	r4,zero,4fa4 <__addsf3+0x404>
    4f0c:	283fa226 	beq	r5,zero,4d98 <__ram_exceptions_end+0xfe002d78>
    4f10:	2809883a 	mov	r4,r5
    4f14:	3823883a 	mov	r17,r7
    4f18:	003f3806 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    4f1c:	01400044 	movi	r5,1
    4f20:	003f9006 	br	4d64 <__ram_exceptions_end+0xfe002d44>
    4f24:	2809883a 	mov	r4,r5
    4f28:	3021883a 	mov	r16,r6
    4f2c:	3823883a 	mov	r17,r7
    4f30:	003f3206 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    4f34:	80000c1e 	bne	r16,zero,4f68 <__addsf3+0x3c8>
    4f38:	20002f26 	beq	r4,zero,4ff8 <__addsf3+0x458>
    4f3c:	00c6303a 	nor	r3,zero,r3
    4f40:	18002b1e 	bne	r3,zero,4ff0 <__addsf3+0x450>
    4f44:	2149883a 	add	r4,r4,r5
    4f48:	3021883a 	mov	r16,r6
    4f4c:	003f8606 	br	4d68 <__ram_exceptions_end+0xfe002d48>
    4f50:	20001b1e 	bne	r4,zero,4fc0 <__addsf3+0x420>
    4f54:	28003926 	beq	r5,zero,503c <__addsf3+0x49c>
    4f58:	2809883a 	mov	r4,r5
    4f5c:	3823883a 	mov	r17,r7
    4f60:	04003fc4 	movi	r16,255
    4f64:	003f2506 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    4f68:	01c03fc4 	movi	r7,255
    4f6c:	31c02226 	beq	r6,r7,4ff8 <__addsf3+0x458>
    4f70:	00c7c83a 	sub	r3,zero,r3
    4f74:	21010034 	orhi	r4,r4,1024
    4f78:	01c006c4 	movi	r7,27
    4f7c:	38c03616 	blt	r7,r3,5058 <__addsf3+0x4b8>
    4f80:	01c00804 	movi	r7,32
    4f84:	38cfc83a 	sub	r7,r7,r3
    4f88:	21ce983a 	sll	r7,r4,r7
    4f8c:	20c6d83a 	srl	r3,r4,r3
    4f90:	3808c03a 	cmpne	r4,r7,zero
    4f94:	1906b03a 	or	r3,r3,r4
    4f98:	1949883a 	add	r4,r3,r5
    4f9c:	3021883a 	mov	r16,r6
    4fa0:	003f7106 	br	4d68 <__ram_exceptions_end+0xfe002d48>
    4fa4:	283f1526 	beq	r5,zero,4bfc <__ram_exceptions_end+0xfe002bdc>
    4fa8:	2145c83a 	sub	r2,r4,r5
    4fac:	10c1002c 	andhi	r3,r2,1024
    4fb0:	183f4f26 	beq	r3,zero,4cf0 <__ram_exceptions_end+0xfe002cd0>
    4fb4:	2909c83a 	sub	r4,r5,r4
    4fb8:	3823883a 	mov	r17,r7
    4fbc:	003f0f06 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    4fc0:	28001a26 	beq	r5,zero,502c <__addsf3+0x48c>
    4fc4:	2008d0fa 	srli	r4,r4,3
    4fc8:	2080102c 	andhi	r2,r4,64
    4fcc:	10000526 	beq	r2,zero,4fe4 <__addsf3+0x444>
    4fd0:	280ad0fa 	srli	r5,r5,3
    4fd4:	2880102c 	andhi	r2,r5,64
    4fd8:	1000021e 	bne	r2,zero,4fe4 <__addsf3+0x444>
    4fdc:	2809883a 	mov	r4,r5
    4fe0:	3823883a 	mov	r17,r7
    4fe4:	200890fa 	slli	r4,r4,3
    4fe8:	04003fc4 	movi	r16,255
    4fec:	003f0306 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    4ff0:	01c03fc4 	movi	r7,255
    4ff4:	31ffe01e 	bne	r6,r7,4f78 <__ram_exceptions_end+0xfe002f58>
    4ff8:	2809883a 	mov	r4,r5
    4ffc:	3021883a 	mov	r16,r6
    5000:	003efe06 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    5004:	20001126 	beq	r4,zero,504c <__addsf3+0x4ac>
    5008:	28000826 	beq	r5,zero,502c <__addsf3+0x48c>
    500c:	2008d0fa 	srli	r4,r4,3
    5010:	2080102c 	andhi	r2,r4,64
    5014:	103ff326 	beq	r2,zero,4fe4 <__ram_exceptions_end+0xfe002fc4>
    5018:	280ad0fa 	srli	r5,r5,3
    501c:	2880102c 	andhi	r2,r5,64
    5020:	103ff01e 	bne	r2,zero,4fe4 <__ram_exceptions_end+0xfe002fc4>
    5024:	2809883a 	mov	r4,r5
    5028:	003fee06 	br	4fe4 <__ram_exceptions_end+0xfe002fc4>
    502c:	04003fc4 	movi	r16,255
    5030:	003ef206 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    5034:	01000044 	movi	r4,1
    5038:	003f9706 	br	4e98 <__ram_exceptions_end+0xfe002e78>
    503c:	0005883a 	mov	r2,zero
    5040:	003f3406 	br	4d14 <__ram_exceptions_end+0xfe002cf4>
    5044:	2809883a 	mov	r4,r5
    5048:	003eec06 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    504c:	2809883a 	mov	r4,r5
    5050:	04003fc4 	movi	r16,255
    5054:	003ee906 	br	4bfc <__ram_exceptions_end+0xfe002bdc>
    5058:	00c00044 	movi	r3,1
    505c:	003fce06 	br	4f98 <__ram_exceptions_end+0xfe002f78>
    5060:	0005883a 	mov	r2,zero
    5064:	003f4e06 	br	4da0 <__ram_exceptions_end+0xfe002d80>

00005068 <__divsf3>:
    5068:	defff504 	addi	sp,sp,-44
    506c:	200cd5fa 	srli	r6,r4,23
    5070:	dcc00415 	stw	r19,16(sp)
    5074:	2026d7fa 	srli	r19,r4,31
    5078:	00c02034 	movhi	r3,128
    507c:	dd800715 	stw	r22,28(sp)
    5080:	dd000515 	stw	r20,20(sp)
    5084:	dc800315 	stw	r18,12(sp)
    5088:	18ffffc4 	addi	r3,r3,-1
    508c:	dfc00a15 	stw	ra,40(sp)
    5090:	df000915 	stw	fp,36(sp)
    5094:	ddc00815 	stw	r23,32(sp)
    5098:	dd400615 	stw	r21,24(sp)
    509c:	dc400215 	stw	r17,8(sp)
    50a0:	dc000115 	stw	r16,4(sp)
    50a4:	35003fcc 	andi	r20,r6,255
    50a8:	1924703a 	and	r18,r3,r4
    50ac:	9d803fcc 	andi	r22,r19,255
    50b0:	a0005226 	beq	r20,zero,51fc <__divsf3+0x194>
    50b4:	00803fc4 	movi	r2,255
    50b8:	a0802e26 	beq	r20,r2,5174 <__divsf3+0x10c>
    50bc:	91002034 	orhi	r4,r18,128
    50c0:	202490fa 	slli	r18,r4,3
    50c4:	a53fe044 	addi	r20,r20,-127
    50c8:	0021883a 	mov	r16,zero
    50cc:	002f883a 	mov	r23,zero
    50d0:	280cd5fa 	srli	r6,r5,23
    50d4:	282ad7fa 	srli	r21,r5,31
    50d8:	00c02034 	movhi	r3,128
    50dc:	18ffffc4 	addi	r3,r3,-1
    50e0:	31803fcc 	andi	r6,r6,255
    50e4:	1962703a 	and	r17,r3,r5
    50e8:	af003fcc 	andi	fp,r21,255
    50ec:	30004a26 	beq	r6,zero,5218 <__divsf3+0x1b0>
    50f0:	00803fc4 	movi	r2,255
    50f4:	30804526 	beq	r6,r2,520c <__divsf3+0x1a4>
    50f8:	89402034 	orhi	r5,r17,128
    50fc:	282290fa 	slli	r17,r5,3
    5100:	31bfe044 	addi	r6,r6,-127
    5104:	000b883a 	mov	r5,zero
    5108:	2c20b03a 	or	r16,r5,r16
    510c:	802090ba 	slli	r16,r16,2
    5110:	00800034 	movhi	r2,0
    5114:	10944d04 	addi	r2,r2,20788
    5118:	80a1883a 	add	r16,r16,r2
    511c:	81000017 	ldw	r4,0(r16)
    5120:	9d46f03a 	xor	r3,r19,r21
    5124:	180f883a 	mov	r7,r3
    5128:	18803fcc 	andi	r2,r3,255
    512c:	a18dc83a 	sub	r6,r20,r6
    5130:	2000683a 	jmp	r4
    5134:	00005318 	cmpnei	zero,zero,332
    5138:	0000519c 	xori	zero,zero,326
    513c:	0000530c 	andi	zero,zero,332
    5140:	00005188 	cmpgei	zero,zero,326
    5144:	0000530c 	andi	zero,zero,332
    5148:	000052e4 	muli	zero,zero,331
    514c:	0000530c 	andi	zero,zero,332
    5150:	00005188 	cmpgei	zero,zero,326
    5154:	0000519c 	xori	zero,zero,326
    5158:	0000519c 	xori	zero,zero,326
    515c:	000052e4 	muli	zero,zero,331
    5160:	00005188 	cmpgei	zero,zero,326
    5164:	000053f8 	rdprs	zero,zero,335
    5168:	000053f8 	rdprs	zero,zero,335
    516c:	000053f8 	rdprs	zero,zero,335
    5170:	000053ac 	andhi	zero,zero,334
    5174:	9000581e 	bne	r18,zero,52d8 <__divsf3+0x270>
    5178:	04000204 	movi	r16,8
    517c:	05c00084 	movi	r23,2
    5180:	003fd306 	br	50d0 <__ram_exceptions_end+0xfe0030b0>
    5184:	0023883a 	mov	r17,zero
    5188:	e02d883a 	mov	r22,fp
    518c:	282f883a 	mov	r23,r5
    5190:	00800084 	movi	r2,2
    5194:	b8808f1e 	bne	r23,r2,53d4 <__divsf3+0x36c>
    5198:	b005883a 	mov	r2,r22
    519c:	11c0004c 	andi	r7,r2,1
    51a0:	013fffc4 	movi	r4,-1
    51a4:	000d883a 	mov	r6,zero
    51a8:	21003fcc 	andi	r4,r4,255
    51ac:	200895fa 	slli	r4,r4,23
    51b0:	38803fcc 	andi	r2,r7,255
    51b4:	00c02034 	movhi	r3,128
    51b8:	100497fa 	slli	r2,r2,31
    51bc:	18ffffc4 	addi	r3,r3,-1
    51c0:	30c6703a 	and	r3,r6,r3
    51c4:	1906b03a 	or	r3,r3,r4
    51c8:	1884b03a 	or	r2,r3,r2
    51cc:	dfc00a17 	ldw	ra,40(sp)
    51d0:	df000917 	ldw	fp,36(sp)
    51d4:	ddc00817 	ldw	r23,32(sp)
    51d8:	dd800717 	ldw	r22,28(sp)
    51dc:	dd400617 	ldw	r21,24(sp)
    51e0:	dd000517 	ldw	r20,20(sp)
    51e4:	dcc00417 	ldw	r19,16(sp)
    51e8:	dc800317 	ldw	r18,12(sp)
    51ec:	dc400217 	ldw	r17,8(sp)
    51f0:	dc000117 	ldw	r16,4(sp)
    51f4:	dec00b04 	addi	sp,sp,44
    51f8:	f800283a 	ret
    51fc:	90002b1e 	bne	r18,zero,52ac <__divsf3+0x244>
    5200:	04000104 	movi	r16,4
    5204:	05c00044 	movi	r23,1
    5208:	003fb106 	br	50d0 <__ram_exceptions_end+0xfe0030b0>
    520c:	8800251e 	bne	r17,zero,52a4 <__divsf3+0x23c>
    5210:	01400084 	movi	r5,2
    5214:	00000206 	br	5220 <__divsf3+0x1b8>
    5218:	88001a1e 	bne	r17,zero,5284 <__divsf3+0x21c>
    521c:	01400044 	movi	r5,1
    5220:	8160b03a 	or	r16,r16,r5
    5224:	802090ba 	slli	r16,r16,2
    5228:	00c00034 	movhi	r3,0
    522c:	18d49104 	addi	r3,r3,21060
    5230:	80e1883a 	add	r16,r16,r3
    5234:	80c00017 	ldw	r3,0(r16)
    5238:	9d44f03a 	xor	r2,r19,r21
    523c:	a18dc83a 	sub	r6,r20,r6
    5240:	1800683a 	jmp	r3
    5244:	0000519c 	xori	zero,zero,326
    5248:	0000519c 	xori	zero,zero,326
    524c:	000053e8 	cmpgeui	zero,zero,335
    5250:	00005184 	movi	zero,326
    5254:	000053e8 	cmpgeui	zero,zero,335
    5258:	000052e4 	muli	zero,zero,331
    525c:	000053e8 	cmpgeui	zero,zero,335
    5260:	00005184 	movi	zero,326
    5264:	0000519c 	xori	zero,zero,326
    5268:	0000519c 	xori	zero,zero,326
    526c:	000052e4 	muli	zero,zero,331
    5270:	00005184 	movi	zero,326
    5274:	000053f8 	rdprs	zero,zero,335
    5278:	000053f8 	rdprs	zero,zero,335
    527c:	000053f8 	rdprs	zero,zero,335
    5280:	00005410 	cmplti	zero,zero,336
    5284:	8809883a 	mov	r4,r17
    5288:	0008d340 	call	8d34 <__clzsi2>
    528c:	10fffec4 	addi	r3,r2,-5
    5290:	10801d84 	addi	r2,r2,118
    5294:	88e2983a 	sll	r17,r17,r3
    5298:	008dc83a 	sub	r6,zero,r2
    529c:	000b883a 	mov	r5,zero
    52a0:	003f9906 	br	5108 <__ram_exceptions_end+0xfe0030e8>
    52a4:	014000c4 	movi	r5,3
    52a8:	003f9706 	br	5108 <__ram_exceptions_end+0xfe0030e8>
    52ac:	9009883a 	mov	r4,r18
    52b0:	d9400015 	stw	r5,0(sp)
    52b4:	0008d340 	call	8d34 <__clzsi2>
    52b8:	10fffec4 	addi	r3,r2,-5
    52bc:	11801d84 	addi	r6,r2,118
    52c0:	90e4983a 	sll	r18,r18,r3
    52c4:	01a9c83a 	sub	r20,zero,r6
    52c8:	0021883a 	mov	r16,zero
    52cc:	002f883a 	mov	r23,zero
    52d0:	d9400017 	ldw	r5,0(sp)
    52d4:	003f7e06 	br	50d0 <__ram_exceptions_end+0xfe0030b0>
    52d8:	04000304 	movi	r16,12
    52dc:	05c000c4 	movi	r23,3
    52e0:	003f7b06 	br	50d0 <__ram_exceptions_end+0xfe0030b0>
    52e4:	01802034 	movhi	r6,128
    52e8:	000f883a 	mov	r7,zero
    52ec:	31bfffc4 	addi	r6,r6,-1
    52f0:	013fffc4 	movi	r4,-1
    52f4:	003fac06 	br	51a8 <__ram_exceptions_end+0xfe003188>
    52f8:	01400044 	movi	r5,1
    52fc:	2909c83a 	sub	r4,r5,r4
    5300:	00c006c4 	movi	r3,27
    5304:	19004b0e 	bge	r3,r4,5434 <__divsf3+0x3cc>
    5308:	114e703a 	and	r7,r2,r5
    530c:	0009883a 	mov	r4,zero
    5310:	000d883a 	mov	r6,zero
    5314:	003fa406 	br	51a8 <__ram_exceptions_end+0xfe003188>
    5318:	9006917a 	slli	r3,r18,5
    531c:	8822917a 	slli	r17,r17,5
    5320:	1c40372e 	bgeu	r3,r17,5400 <__divsf3+0x398>
    5324:	31bfffc4 	addi	r6,r6,-1
    5328:	010006c4 	movi	r4,27
    532c:	000b883a 	mov	r5,zero
    5330:	180f883a 	mov	r7,r3
    5334:	294b883a 	add	r5,r5,r5
    5338:	18c7883a 	add	r3,r3,r3
    533c:	38000116 	blt	r7,zero,5344 <__divsf3+0x2dc>
    5340:	1c400236 	bltu	r3,r17,534c <__divsf3+0x2e4>
    5344:	1c47c83a 	sub	r3,r3,r17
    5348:	29400054 	ori	r5,r5,1
    534c:	213fffc4 	addi	r4,r4,-1
    5350:	203ff71e 	bne	r4,zero,5330 <__ram_exceptions_end+0xfe003310>
    5354:	1806c03a 	cmpne	r3,r3,zero
    5358:	1962b03a 	or	r17,r3,r5
    535c:	31001fc4 	addi	r4,r6,127
    5360:	013fe50e 	bge	zero,r4,52f8 <__ram_exceptions_end+0xfe0032d8>
    5364:	88c001cc 	andi	r3,r17,7
    5368:	18000426 	beq	r3,zero,537c <__divsf3+0x314>
    536c:	88c003cc 	andi	r3,r17,15
    5370:	01400104 	movi	r5,4
    5374:	19400126 	beq	r3,r5,537c <__divsf3+0x314>
    5378:	8963883a 	add	r17,r17,r5
    537c:	88c2002c 	andhi	r3,r17,2048
    5380:	18000426 	beq	r3,zero,5394 <__divsf3+0x32c>
    5384:	00fe0034 	movhi	r3,63488
    5388:	18ffffc4 	addi	r3,r3,-1
    538c:	31002004 	addi	r4,r6,128
    5390:	88e2703a 	and	r17,r17,r3
    5394:	00c03f84 	movi	r3,254
    5398:	193f8016 	blt	r3,r4,519c <__ram_exceptions_end+0xfe00317c>
    539c:	880c91ba 	slli	r6,r17,6
    53a0:	11c0004c 	andi	r7,r2,1
    53a4:	300cd27a 	srli	r6,r6,9
    53a8:	003f7f06 	br	51a8 <__ram_exceptions_end+0xfe003188>
    53ac:	9080102c 	andhi	r2,r18,64
    53b0:	10000226 	beq	r2,zero,53bc <__divsf3+0x354>
    53b4:	8880102c 	andhi	r2,r17,64
    53b8:	10001826 	beq	r2,zero,541c <__divsf3+0x3b4>
    53bc:	00802034 	movhi	r2,128
    53c0:	91801034 	orhi	r6,r18,64
    53c4:	10bfffc4 	addi	r2,r2,-1
    53c8:	980f883a 	mov	r7,r19
    53cc:	308c703a 	and	r6,r6,r2
    53d0:	003fc706 	br	52f0 <__ram_exceptions_end+0xfe0032d0>
    53d4:	008000c4 	movi	r2,3
    53d8:	b8802d26 	beq	r23,r2,5490 <__divsf3+0x428>
    53dc:	00c00044 	movi	r3,1
    53e0:	b005883a 	mov	r2,r22
    53e4:	b8ffdd1e 	bne	r23,r3,535c <__ram_exceptions_end+0xfe00333c>
    53e8:	11c0004c 	andi	r7,r2,1
    53ec:	0009883a 	mov	r4,zero
    53f0:	000d883a 	mov	r6,zero
    53f4:	003f6c06 	br	51a8 <__ram_exceptions_end+0xfe003188>
    53f8:	9023883a 	mov	r17,r18
    53fc:	003f6406 	br	5190 <__ram_exceptions_end+0xfe003170>
    5400:	1c47c83a 	sub	r3,r3,r17
    5404:	01000684 	movi	r4,26
    5408:	01400044 	movi	r5,1
    540c:	003fc806 	br	5330 <__ram_exceptions_end+0xfe003310>
    5410:	9080102c 	andhi	r2,r18,64
    5414:	103fe926 	beq	r2,zero,53bc <__ram_exceptions_end+0xfe00339c>
    5418:	0023883a 	mov	r17,zero
    541c:	00802034 	movhi	r2,128
    5420:	89801034 	orhi	r6,r17,64
    5424:	10bfffc4 	addi	r2,r2,-1
    5428:	a80f883a 	mov	r7,r21
    542c:	308c703a 	and	r6,r6,r2
    5430:	003faf06 	br	52f0 <__ram_exceptions_end+0xfe0032d0>
    5434:	01c00804 	movi	r7,32
    5438:	390fc83a 	sub	r7,r7,r4
    543c:	89ce983a 	sll	r7,r17,r7
    5440:	890ad83a 	srl	r5,r17,r4
    5444:	380ec03a 	cmpne	r7,r7,zero
    5448:	29cab03a 	or	r5,r5,r7
    544c:	28c001cc 	andi	r3,r5,7
    5450:	18000426 	beq	r3,zero,5464 <__divsf3+0x3fc>
    5454:	28c003cc 	andi	r3,r5,15
    5458:	01000104 	movi	r4,4
    545c:	19000126 	beq	r3,r4,5464 <__divsf3+0x3fc>
    5460:	290b883a 	add	r5,r5,r4
    5464:	28c1002c 	andhi	r3,r5,1024
    5468:	18000426 	beq	r3,zero,547c <__divsf3+0x414>
    546c:	11c0004c 	andi	r7,r2,1
    5470:	01000044 	movi	r4,1
    5474:	000d883a 	mov	r6,zero
    5478:	003f4b06 	br	51a8 <__ram_exceptions_end+0xfe003188>
    547c:	280a91ba 	slli	r5,r5,6
    5480:	11c0004c 	andi	r7,r2,1
    5484:	0009883a 	mov	r4,zero
    5488:	280cd27a 	srli	r6,r5,9
    548c:	003f4606 	br	51a8 <__ram_exceptions_end+0xfe003188>
    5490:	00802034 	movhi	r2,128
    5494:	89801034 	orhi	r6,r17,64
    5498:	10bfffc4 	addi	r2,r2,-1
    549c:	b00f883a 	mov	r7,r22
    54a0:	308c703a 	and	r6,r6,r2
    54a4:	003f9206 	br	52f0 <__ram_exceptions_end+0xfe0032d0>

000054a8 <__eqsf2>:
    54a8:	2006d5fa 	srli	r3,r4,23
    54ac:	280cd5fa 	srli	r6,r5,23
    54b0:	01c02034 	movhi	r7,128
    54b4:	39ffffc4 	addi	r7,r7,-1
    54b8:	18c03fcc 	andi	r3,r3,255
    54bc:	02003fc4 	movi	r8,255
    54c0:	3904703a 	and	r2,r7,r4
    54c4:	31803fcc 	andi	r6,r6,255
    54c8:	394e703a 	and	r7,r7,r5
    54cc:	2008d7fa 	srli	r4,r4,31
    54d0:	280ad7fa 	srli	r5,r5,31
    54d4:	1a000d26 	beq	r3,r8,550c <__eqsf2+0x64>
    54d8:	02003fc4 	movi	r8,255
    54dc:	32000826 	beq	r6,r8,5500 <__eqsf2+0x58>
    54e0:	19800226 	beq	r3,r6,54ec <__eqsf2+0x44>
    54e4:	00800044 	movi	r2,1
    54e8:	f800283a 	ret
    54ec:	11fffd1e 	bne	r2,r7,54e4 <__ram_exceptions_end+0xfe0034c4>
    54f0:	21400926 	beq	r4,r5,5518 <__eqsf2+0x70>
    54f4:	183ffb1e 	bne	r3,zero,54e4 <__ram_exceptions_end+0xfe0034c4>
    54f8:	1004c03a 	cmpne	r2,r2,zero
    54fc:	f800283a 	ret
    5500:	383ff726 	beq	r7,zero,54e0 <__ram_exceptions_end+0xfe0034c0>
    5504:	00800044 	movi	r2,1
    5508:	f800283a 	ret
    550c:	103ff226 	beq	r2,zero,54d8 <__ram_exceptions_end+0xfe0034b8>
    5510:	00800044 	movi	r2,1
    5514:	f800283a 	ret
    5518:	0005883a 	mov	r2,zero
    551c:	f800283a 	ret

00005520 <__gesf2>:
    5520:	2004d5fa 	srli	r2,r4,23
    5524:	2806d5fa 	srli	r3,r5,23
    5528:	01802034 	movhi	r6,128
    552c:	31bfffc4 	addi	r6,r6,-1
    5530:	10803fcc 	andi	r2,r2,255
    5534:	01c03fc4 	movi	r7,255
    5538:	3110703a 	and	r8,r6,r4
    553c:	18c03fcc 	andi	r3,r3,255
    5540:	314c703a 	and	r6,r6,r5
    5544:	2008d7fa 	srli	r4,r4,31
    5548:	280ad7fa 	srli	r5,r5,31
    554c:	11c01926 	beq	r2,r7,55b4 <__gesf2+0x94>
    5550:	01c03fc4 	movi	r7,255
    5554:	19c00f26 	beq	r3,r7,5594 <__gesf2+0x74>
    5558:	1000061e 	bne	r2,zero,5574 <__gesf2+0x54>
    555c:	400f003a 	cmpeq	r7,r8,zero
    5560:	1800071e 	bne	r3,zero,5580 <__gesf2+0x60>
    5564:	3000061e 	bne	r6,zero,5580 <__gesf2+0x60>
    5568:	0005883a 	mov	r2,zero
    556c:	40000e1e 	bne	r8,zero,55a8 <__gesf2+0x88>
    5570:	f800283a 	ret
    5574:	18000a1e 	bne	r3,zero,55a0 <__gesf2+0x80>
    5578:	30000b26 	beq	r6,zero,55a8 <__gesf2+0x88>
    557c:	000f883a 	mov	r7,zero
    5580:	29403fcc 	andi	r5,r5,255
    5584:	38000726 	beq	r7,zero,55a4 <__gesf2+0x84>
    5588:	28000826 	beq	r5,zero,55ac <__gesf2+0x8c>
    558c:	00800044 	movi	r2,1
    5590:	f800283a 	ret
    5594:	303ff026 	beq	r6,zero,5558 <__ram_exceptions_end+0xfe003538>
    5598:	00bfff84 	movi	r2,-2
    559c:	f800283a 	ret
    55a0:	29403fcc 	andi	r5,r5,255
    55a4:	21400526 	beq	r4,r5,55bc <__gesf2+0x9c>
    55a8:	203ff826 	beq	r4,zero,558c <__ram_exceptions_end+0xfe00356c>
    55ac:	00bfffc4 	movi	r2,-1
    55b0:	f800283a 	ret
    55b4:	403fe626 	beq	r8,zero,5550 <__ram_exceptions_end+0xfe003530>
    55b8:	003ff706 	br	5598 <__ram_exceptions_end+0xfe003578>
    55bc:	18bffa16 	blt	r3,r2,55a8 <__ram_exceptions_end+0xfe003588>
    55c0:	10c00216 	blt	r2,r3,55cc <__gesf2+0xac>
    55c4:	323ff836 	bltu	r6,r8,55a8 <__ram_exceptions_end+0xfe003588>
    55c8:	4180022e 	bgeu	r8,r6,55d4 <__gesf2+0xb4>
    55cc:	203fef1e 	bne	r4,zero,558c <__ram_exceptions_end+0xfe00356c>
    55d0:	003ff606 	br	55ac <__ram_exceptions_end+0xfe00358c>
    55d4:	0005883a 	mov	r2,zero
    55d8:	f800283a 	ret

000055dc <__lesf2>:
    55dc:	2004d5fa 	srli	r2,r4,23
    55e0:	280cd5fa 	srli	r6,r5,23
    55e4:	00c02034 	movhi	r3,128
    55e8:	18ffffc4 	addi	r3,r3,-1
    55ec:	10803fcc 	andi	r2,r2,255
    55f0:	01c03fc4 	movi	r7,255
    55f4:	1910703a 	and	r8,r3,r4
    55f8:	31803fcc 	andi	r6,r6,255
    55fc:	1946703a 	and	r3,r3,r5
    5600:	2008d7fa 	srli	r4,r4,31
    5604:	280ad7fa 	srli	r5,r5,31
    5608:	11c01b26 	beq	r2,r7,5678 <__lesf2+0x9c>
    560c:	01c03fc4 	movi	r7,255
    5610:	31c01126 	beq	r6,r7,5658 <__lesf2+0x7c>
    5614:	1000071e 	bne	r2,zero,5634 <__lesf2+0x58>
    5618:	400f003a 	cmpeq	r7,r8,zero
    561c:	21003fcc 	andi	r4,r4,255
    5620:	3000081e 	bne	r6,zero,5644 <__lesf2+0x68>
    5624:	1800071e 	bne	r3,zero,5644 <__lesf2+0x68>
    5628:	0005883a 	mov	r2,zero
    562c:	40000f1e 	bne	r8,zero,566c <__lesf2+0x90>
    5630:	f800283a 	ret
    5634:	21003fcc 	andi	r4,r4,255
    5638:	30000a1e 	bne	r6,zero,5664 <__lesf2+0x88>
    563c:	18000b26 	beq	r3,zero,566c <__lesf2+0x90>
    5640:	000f883a 	mov	r7,zero
    5644:	29403fcc 	andi	r5,r5,255
    5648:	38000726 	beq	r7,zero,5668 <__lesf2+0x8c>
    564c:	28000826 	beq	r5,zero,5670 <__lesf2+0x94>
    5650:	00800044 	movi	r2,1
    5654:	f800283a 	ret
    5658:	183fee26 	beq	r3,zero,5614 <__ram_exceptions_end+0xfe0035f4>
    565c:	00800084 	movi	r2,2
    5660:	f800283a 	ret
    5664:	29403fcc 	andi	r5,r5,255
    5668:	21400626 	beq	r4,r5,5684 <__lesf2+0xa8>
    566c:	203ff826 	beq	r4,zero,5650 <__ram_exceptions_end+0xfe003630>
    5670:	00bfffc4 	movi	r2,-1
    5674:	f800283a 	ret
    5678:	403fe426 	beq	r8,zero,560c <__ram_exceptions_end+0xfe0035ec>
    567c:	00800084 	movi	r2,2
    5680:	f800283a 	ret
    5684:	30bff916 	blt	r6,r2,566c <__ram_exceptions_end+0xfe00364c>
    5688:	11800216 	blt	r2,r6,5694 <__lesf2+0xb8>
    568c:	1a3ff736 	bltu	r3,r8,566c <__ram_exceptions_end+0xfe00364c>
    5690:	40c0022e 	bgeu	r8,r3,569c <__lesf2+0xc0>
    5694:	203fee1e 	bne	r4,zero,5650 <__ram_exceptions_end+0xfe003630>
    5698:	003ff506 	br	5670 <__ram_exceptions_end+0xfe003650>
    569c:	0005883a 	mov	r2,zero
    56a0:	f800283a 	ret

000056a4 <__mulsf3>:
    56a4:	defff504 	addi	sp,sp,-44
    56a8:	dc000115 	stw	r16,4(sp)
    56ac:	2020d5fa 	srli	r16,r4,23
    56b0:	dd400615 	stw	r21,24(sp)
    56b4:	202ad7fa 	srli	r21,r4,31
    56b8:	dc800315 	stw	r18,12(sp)
    56bc:	04802034 	movhi	r18,128
    56c0:	df000915 	stw	fp,36(sp)
    56c4:	dd000515 	stw	r20,20(sp)
    56c8:	94bfffc4 	addi	r18,r18,-1
    56cc:	dfc00a15 	stw	ra,40(sp)
    56d0:	ddc00815 	stw	r23,32(sp)
    56d4:	dd800715 	stw	r22,28(sp)
    56d8:	dcc00415 	stw	r19,16(sp)
    56dc:	dc400215 	stw	r17,8(sp)
    56e0:	84003fcc 	andi	r16,r16,255
    56e4:	9124703a 	and	r18,r18,r4
    56e8:	a829883a 	mov	r20,r21
    56ec:	af003fcc 	andi	fp,r21,255
    56f0:	80005426 	beq	r16,zero,5844 <__mulsf3+0x1a0>
    56f4:	00803fc4 	movi	r2,255
    56f8:	80802f26 	beq	r16,r2,57b8 <__mulsf3+0x114>
    56fc:	91002034 	orhi	r4,r18,128
    5700:	202490fa 	slli	r18,r4,3
    5704:	843fe044 	addi	r16,r16,-127
    5708:	0023883a 	mov	r17,zero
    570c:	002f883a 	mov	r23,zero
    5710:	2804d5fa 	srli	r2,r5,23
    5714:	282cd7fa 	srli	r22,r5,31
    5718:	01002034 	movhi	r4,128
    571c:	213fffc4 	addi	r4,r4,-1
    5720:	10803fcc 	andi	r2,r2,255
    5724:	2166703a 	and	r19,r4,r5
    5728:	b1803fcc 	andi	r6,r22,255
    572c:	10004c26 	beq	r2,zero,5860 <__mulsf3+0x1bc>
    5730:	00c03fc4 	movi	r3,255
    5734:	10c04726 	beq	r2,r3,5854 <__mulsf3+0x1b0>
    5738:	99002034 	orhi	r4,r19,128
    573c:	202690fa 	slli	r19,r4,3
    5740:	10bfe044 	addi	r2,r2,-127
    5744:	0007883a 	mov	r3,zero
    5748:	80a1883a 	add	r16,r16,r2
    574c:	010003c4 	movi	r4,15
    5750:	1c44b03a 	or	r2,r3,r17
    5754:	b56af03a 	xor	r21,r22,r21
    5758:	81c00044 	addi	r7,r16,1
    575c:	20806b36 	bltu	r4,r2,590c <__mulsf3+0x268>
    5760:	100490ba 	slli	r2,r2,2
    5764:	01000034 	movhi	r4,0
    5768:	2115de04 	addi	r4,r4,22392
    576c:	1105883a 	add	r2,r2,r4
    5770:	10800017 	ldw	r2,0(r2)
    5774:	1000683a 	jmp	r2
    5778:	0000590c 	andi	zero,zero,356
    577c:	000057cc 	andi	zero,zero,351
    5780:	000057cc 	andi	zero,zero,351
    5784:	000057c8 	cmpgei	zero,zero,351
    5788:	000058f0 	cmpltui	zero,zero,355
    578c:	000058f0 	cmpltui	zero,zero,355
    5790:	000058dc 	xori	zero,zero,355
    5794:	000057c8 	cmpgei	zero,zero,351
    5798:	000058f0 	cmpltui	zero,zero,355
    579c:	000058dc 	xori	zero,zero,355
    57a0:	000058f0 	cmpltui	zero,zero,355
    57a4:	000057c8 	cmpgei	zero,zero,351
    57a8:	000058fc 	xorhi	zero,zero,355
    57ac:	000058fc 	xorhi	zero,zero,355
    57b0:	000058fc 	xorhi	zero,zero,355
    57b4:	00005a0c 	andi	zero,zero,360
    57b8:	90003b1e 	bne	r18,zero,58a8 <__mulsf3+0x204>
    57bc:	04400204 	movi	r17,8
    57c0:	05c00084 	movi	r23,2
    57c4:	003fd206 	br	5710 <__ram_exceptions_end+0xfe0036f0>
    57c8:	302b883a 	mov	r21,r6
    57cc:	00800084 	movi	r2,2
    57d0:	18802626 	beq	r3,r2,586c <__mulsf3+0x1c8>
    57d4:	008000c4 	movi	r2,3
    57d8:	1880b826 	beq	r3,r2,5abc <__mulsf3+0x418>
    57dc:	00800044 	movi	r2,1
    57e0:	1880af1e 	bne	r3,r2,5aa0 <__mulsf3+0x3fc>
    57e4:	a829883a 	mov	r20,r21
    57e8:	0007883a 	mov	r3,zero
    57ec:	0009883a 	mov	r4,zero
    57f0:	18803fcc 	andi	r2,r3,255
    57f4:	100695fa 	slli	r3,r2,23
    57f8:	a0803fcc 	andi	r2,r20,255
    57fc:	100a97fa 	slli	r5,r2,31
    5800:	00802034 	movhi	r2,128
    5804:	10bfffc4 	addi	r2,r2,-1
    5808:	2084703a 	and	r2,r4,r2
    580c:	10c4b03a 	or	r2,r2,r3
    5810:	1144b03a 	or	r2,r2,r5
    5814:	dfc00a17 	ldw	ra,40(sp)
    5818:	df000917 	ldw	fp,36(sp)
    581c:	ddc00817 	ldw	r23,32(sp)
    5820:	dd800717 	ldw	r22,28(sp)
    5824:	dd400617 	ldw	r21,24(sp)
    5828:	dd000517 	ldw	r20,20(sp)
    582c:	dcc00417 	ldw	r19,16(sp)
    5830:	dc800317 	ldw	r18,12(sp)
    5834:	dc400217 	ldw	r17,8(sp)
    5838:	dc000117 	ldw	r16,4(sp)
    583c:	dec00b04 	addi	sp,sp,44
    5840:	f800283a 	ret
    5844:	90000d1e 	bne	r18,zero,587c <__mulsf3+0x1d8>
    5848:	04400104 	movi	r17,4
    584c:	05c00044 	movi	r23,1
    5850:	003faf06 	br	5710 <__ram_exceptions_end+0xfe0036f0>
    5854:	9806c03a 	cmpne	r3,r19,zero
    5858:	18c00084 	addi	r3,r3,2
    585c:	003fba06 	br	5748 <__ram_exceptions_end+0xfe003728>
    5860:	9800141e 	bne	r19,zero,58b4 <__mulsf3+0x210>
    5864:	00c00044 	movi	r3,1
    5868:	003fb706 	br	5748 <__ram_exceptions_end+0xfe003728>
    586c:	a829883a 	mov	r20,r21
    5870:	00ffffc4 	movi	r3,-1
    5874:	0009883a 	mov	r4,zero
    5878:	003fdd06 	br	57f0 <__ram_exceptions_end+0xfe0037d0>
    587c:	9009883a 	mov	r4,r18
    5880:	d9400015 	stw	r5,0(sp)
    5884:	0008d340 	call	8d34 <__clzsi2>
    5888:	10fffec4 	addi	r3,r2,-5
    588c:	10801d84 	addi	r2,r2,118
    5890:	90e4983a 	sll	r18,r18,r3
    5894:	00a1c83a 	sub	r16,zero,r2
    5898:	0023883a 	mov	r17,zero
    589c:	002f883a 	mov	r23,zero
    58a0:	d9400017 	ldw	r5,0(sp)
    58a4:	003f9a06 	br	5710 <__ram_exceptions_end+0xfe0036f0>
    58a8:	04400304 	movi	r17,12
    58ac:	05c000c4 	movi	r23,3
    58b0:	003f9706 	br	5710 <__ram_exceptions_end+0xfe0036f0>
    58b4:	9809883a 	mov	r4,r19
    58b8:	d9800015 	stw	r6,0(sp)
    58bc:	0008d340 	call	8d34 <__clzsi2>
    58c0:	10fffec4 	addi	r3,r2,-5
    58c4:	10801d84 	addi	r2,r2,118
    58c8:	98e6983a 	sll	r19,r19,r3
    58cc:	0085c83a 	sub	r2,zero,r2
    58d0:	0007883a 	mov	r3,zero
    58d4:	d9800017 	ldw	r6,0(sp)
    58d8:	003f9b06 	br	5748 <__ram_exceptions_end+0xfe003728>
    58dc:	01002034 	movhi	r4,128
    58e0:	0029883a 	mov	r20,zero
    58e4:	213fffc4 	addi	r4,r4,-1
    58e8:	00ffffc4 	movi	r3,-1
    58ec:	003fc006 	br	57f0 <__ram_exceptions_end+0xfe0037d0>
    58f0:	9027883a 	mov	r19,r18
    58f4:	b807883a 	mov	r3,r23
    58f8:	003fb406 	br	57cc <__ram_exceptions_end+0xfe0037ac>
    58fc:	9027883a 	mov	r19,r18
    5900:	e02b883a 	mov	r21,fp
    5904:	b807883a 	mov	r3,r23
    5908:	003fb006 	br	57cc <__ram_exceptions_end+0xfe0037ac>
    590c:	9028d43a 	srli	r20,r18,16
    5910:	982cd43a 	srli	r22,r19,16
    5914:	94bfffcc 	andi	r18,r18,65535
    5918:	9cffffcc 	andi	r19,r19,65535
    591c:	980b883a 	mov	r5,r19
    5920:	9009883a 	mov	r4,r18
    5924:	d9c00015 	stw	r7,0(sp)
    5928:	0004b780 	call	4b78 <__mulsi3>
    592c:	a00b883a 	mov	r5,r20
    5930:	9809883a 	mov	r4,r19
    5934:	1023883a 	mov	r17,r2
    5938:	0004b780 	call	4b78 <__mulsi3>
    593c:	a009883a 	mov	r4,r20
    5940:	b00b883a 	mov	r5,r22
    5944:	1027883a 	mov	r19,r2
    5948:	0004b780 	call	4b78 <__mulsi3>
    594c:	b00b883a 	mov	r5,r22
    5950:	9009883a 	mov	r4,r18
    5954:	1029883a 	mov	r20,r2
    5958:	0004b780 	call	4b78 <__mulsi3>
    595c:	8806d43a 	srli	r3,r17,16
    5960:	14c5883a 	add	r2,r2,r19
    5964:	d9c00017 	ldw	r7,0(sp)
    5968:	1885883a 	add	r2,r3,r2
    596c:	14c0022e 	bgeu	r2,r19,5978 <__mulsf3+0x2d4>
    5970:	00c00074 	movhi	r3,1
    5974:	a0e9883a 	add	r20,r20,r3
    5978:	1026943a 	slli	r19,r2,16
    597c:	8c7fffcc 	andi	r17,r17,65535
    5980:	1004d43a 	srli	r2,r2,16
    5984:	9c63883a 	add	r17,r19,r17
    5988:	882691ba 	slli	r19,r17,6
    598c:	1505883a 	add	r2,r2,r20
    5990:	8822d6ba 	srli	r17,r17,26
    5994:	100891ba 	slli	r4,r2,6
    5998:	9826c03a 	cmpne	r19,r19,zero
    599c:	9c62b03a 	or	r17,r19,r17
    59a0:	8926b03a 	or	r19,r17,r4
    59a4:	9882002c 	andhi	r2,r19,2048
    59a8:	10000426 	beq	r2,zero,59bc <__mulsf3+0x318>
    59ac:	9804d07a 	srli	r2,r19,1
    59b0:	9900004c 	andi	r4,r19,1
    59b4:	3821883a 	mov	r16,r7
    59b8:	1126b03a 	or	r19,r2,r4
    59bc:	80c01fc4 	addi	r3,r16,127
    59c0:	00c0210e 	bge	zero,r3,5a48 <__mulsf3+0x3a4>
    59c4:	988001cc 	andi	r2,r19,7
    59c8:	10000426 	beq	r2,zero,59dc <__mulsf3+0x338>
    59cc:	988003cc 	andi	r2,r19,15
    59d0:	01000104 	movi	r4,4
    59d4:	11000126 	beq	r2,r4,59dc <__mulsf3+0x338>
    59d8:	9927883a 	add	r19,r19,r4
    59dc:	9882002c 	andhi	r2,r19,2048
    59e0:	10000426 	beq	r2,zero,59f4 <__mulsf3+0x350>
    59e4:	00be0034 	movhi	r2,63488
    59e8:	10bfffc4 	addi	r2,r2,-1
    59ec:	80c02004 	addi	r3,r16,128
    59f0:	98a6703a 	and	r19,r19,r2
    59f4:	00803f84 	movi	r2,254
    59f8:	10ff9c16 	blt	r2,r3,586c <__ram_exceptions_end+0xfe00384c>
    59fc:	980891ba 	slli	r4,r19,6
    5a00:	a829883a 	mov	r20,r21
    5a04:	2008d27a 	srli	r4,r4,9
    5a08:	003f7906 	br	57f0 <__ram_exceptions_end+0xfe0037d0>
    5a0c:	9080102c 	andhi	r2,r18,64
    5a10:	10000826 	beq	r2,zero,5a34 <__mulsf3+0x390>
    5a14:	9880102c 	andhi	r2,r19,64
    5a18:	1000061e 	bne	r2,zero,5a34 <__mulsf3+0x390>
    5a1c:	00802034 	movhi	r2,128
    5a20:	99001034 	orhi	r4,r19,64
    5a24:	10bfffc4 	addi	r2,r2,-1
    5a28:	b029883a 	mov	r20,r22
    5a2c:	2088703a 	and	r4,r4,r2
    5a30:	003fad06 	br	58e8 <__ram_exceptions_end+0xfe0038c8>
    5a34:	00802034 	movhi	r2,128
    5a38:	91001034 	orhi	r4,r18,64
    5a3c:	10bfffc4 	addi	r2,r2,-1
    5a40:	2088703a 	and	r4,r4,r2
    5a44:	003fa806 	br	58e8 <__ram_exceptions_end+0xfe0038c8>
    5a48:	00800044 	movi	r2,1
    5a4c:	10c7c83a 	sub	r3,r2,r3
    5a50:	008006c4 	movi	r2,27
    5a54:	10ff6316 	blt	r2,r3,57e4 <__ram_exceptions_end+0xfe0037c4>
    5a58:	00800804 	movi	r2,32
    5a5c:	10c5c83a 	sub	r2,r2,r3
    5a60:	9884983a 	sll	r2,r19,r2
    5a64:	98c6d83a 	srl	r3,r19,r3
    5a68:	1004c03a 	cmpne	r2,r2,zero
    5a6c:	1884b03a 	or	r2,r3,r2
    5a70:	10c001cc 	andi	r3,r2,7
    5a74:	18000426 	beq	r3,zero,5a88 <__mulsf3+0x3e4>
    5a78:	10c003cc 	andi	r3,r2,15
    5a7c:	01000104 	movi	r4,4
    5a80:	19000126 	beq	r3,r4,5a88 <__mulsf3+0x3e4>
    5a84:	1105883a 	add	r2,r2,r4
    5a88:	10c1002c 	andhi	r3,r2,1024
    5a8c:	18000626 	beq	r3,zero,5aa8 <__mulsf3+0x404>
    5a90:	a829883a 	mov	r20,r21
    5a94:	00c00044 	movi	r3,1
    5a98:	0009883a 	mov	r4,zero
    5a9c:	003f5406 	br	57f0 <__ram_exceptions_end+0xfe0037d0>
    5aa0:	3821883a 	mov	r16,r7
    5aa4:	003fc506 	br	59bc <__ram_exceptions_end+0xfe00399c>
    5aa8:	100491ba 	slli	r2,r2,6
    5aac:	a829883a 	mov	r20,r21
    5ab0:	0007883a 	mov	r3,zero
    5ab4:	1008d27a 	srli	r4,r2,9
    5ab8:	003f4d06 	br	57f0 <__ram_exceptions_end+0xfe0037d0>
    5abc:	00802034 	movhi	r2,128
    5ac0:	99001034 	orhi	r4,r19,64
    5ac4:	10bfffc4 	addi	r2,r2,-1
    5ac8:	a829883a 	mov	r20,r21
    5acc:	2088703a 	and	r4,r4,r2
    5ad0:	003f8506 	br	58e8 <__ram_exceptions_end+0xfe0038c8>

00005ad4 <__subsf3>:
    5ad4:	defffc04 	addi	sp,sp,-16
    5ad8:	280cd5fa 	srli	r6,r5,23
    5adc:	dc000015 	stw	r16,0(sp)
    5ae0:	01c02034 	movhi	r7,128
    5ae4:	2020d5fa 	srli	r16,r4,23
    5ae8:	39ffffc4 	addi	r7,r7,-1
    5aec:	3906703a 	and	r3,r7,r4
    5af0:	dc400115 	stw	r17,4(sp)
    5af4:	394e703a 	and	r7,r7,r5
    5af8:	2022d7fa 	srli	r17,r4,31
    5afc:	dfc00315 	stw	ra,12(sp)
    5b00:	dc800215 	stw	r18,8(sp)
    5b04:	31803fcc 	andi	r6,r6,255
    5b08:	01003fc4 	movi	r4,255
    5b0c:	84003fcc 	andi	r16,r16,255
    5b10:	180690fa 	slli	r3,r3,3
    5b14:	2804d7fa 	srli	r2,r5,31
    5b18:	380e90fa 	slli	r7,r7,3
    5b1c:	31006d26 	beq	r6,r4,5cd4 <__subsf3+0x200>
    5b20:	1080005c 	xori	r2,r2,1
    5b24:	8189c83a 	sub	r4,r16,r6
    5b28:	14404f26 	beq	r2,r17,5c68 <__subsf3+0x194>
    5b2c:	0100770e 	bge	zero,r4,5d0c <__subsf3+0x238>
    5b30:	30001e1e 	bne	r6,zero,5bac <__subsf3+0xd8>
    5b34:	38006a1e 	bne	r7,zero,5ce0 <__subsf3+0x20c>
    5b38:	188001cc 	andi	r2,r3,7
    5b3c:	10000426 	beq	r2,zero,5b50 <__subsf3+0x7c>
    5b40:	188003cc 	andi	r2,r3,15
    5b44:	01000104 	movi	r4,4
    5b48:	11000126 	beq	r2,r4,5b50 <__subsf3+0x7c>
    5b4c:	1907883a 	add	r3,r3,r4
    5b50:	1881002c 	andhi	r2,r3,1024
    5b54:	10003926 	beq	r2,zero,5c3c <__subsf3+0x168>
    5b58:	84000044 	addi	r16,r16,1
    5b5c:	00803fc4 	movi	r2,255
    5b60:	80807526 	beq	r16,r2,5d38 <__subsf3+0x264>
    5b64:	180691ba 	slli	r3,r3,6
    5b68:	8880004c 	andi	r2,r17,1
    5b6c:	180ad27a 	srli	r5,r3,9
    5b70:	84003fcc 	andi	r16,r16,255
    5b74:	800695fa 	slli	r3,r16,23
    5b78:	10803fcc 	andi	r2,r2,255
    5b7c:	01002034 	movhi	r4,128
    5b80:	213fffc4 	addi	r4,r4,-1
    5b84:	100497fa 	slli	r2,r2,31
    5b88:	2920703a 	and	r16,r5,r4
    5b8c:	80e0b03a 	or	r16,r16,r3
    5b90:	8084b03a 	or	r2,r16,r2
    5b94:	dfc00317 	ldw	ra,12(sp)
    5b98:	dc800217 	ldw	r18,8(sp)
    5b9c:	dc400117 	ldw	r17,4(sp)
    5ba0:	dc000017 	ldw	r16,0(sp)
    5ba4:	dec00404 	addi	sp,sp,16
    5ba8:	f800283a 	ret
    5bac:	00803fc4 	movi	r2,255
    5bb0:	80bfe126 	beq	r16,r2,5b38 <__ram_exceptions_end+0xfe003b18>
    5bb4:	39c10034 	orhi	r7,r7,1024
    5bb8:	008006c4 	movi	r2,27
    5bbc:	11007416 	blt	r2,r4,5d90 <__subsf3+0x2bc>
    5bc0:	00800804 	movi	r2,32
    5bc4:	1105c83a 	sub	r2,r2,r4
    5bc8:	3884983a 	sll	r2,r7,r2
    5bcc:	390ed83a 	srl	r7,r7,r4
    5bd0:	1008c03a 	cmpne	r4,r2,zero
    5bd4:	390eb03a 	or	r7,r7,r4
    5bd8:	19c7c83a 	sub	r3,r3,r7
    5bdc:	1881002c 	andhi	r2,r3,1024
    5be0:	10001426 	beq	r2,zero,5c34 <__subsf3+0x160>
    5be4:	04810034 	movhi	r18,1024
    5be8:	94bfffc4 	addi	r18,r18,-1
    5bec:	1ca4703a 	and	r18,r3,r18
    5bf0:	9009883a 	mov	r4,r18
    5bf4:	0008d340 	call	8d34 <__clzsi2>
    5bf8:	10bffec4 	addi	r2,r2,-5
    5bfc:	90a4983a 	sll	r18,r18,r2
    5c00:	14005116 	blt	r2,r16,5d48 <__subsf3+0x274>
    5c04:	1405c83a 	sub	r2,r2,r16
    5c08:	10c00044 	addi	r3,r2,1
    5c0c:	00800804 	movi	r2,32
    5c10:	10c5c83a 	sub	r2,r2,r3
    5c14:	9084983a 	sll	r2,r18,r2
    5c18:	90e4d83a 	srl	r18,r18,r3
    5c1c:	0021883a 	mov	r16,zero
    5c20:	1006c03a 	cmpne	r3,r2,zero
    5c24:	90c6b03a 	or	r3,r18,r3
    5c28:	003fc306 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5c2c:	2000e026 	beq	r4,zero,5fb0 <__subsf3+0x4dc>
    5c30:	2007883a 	mov	r3,r4
    5c34:	188001cc 	andi	r2,r3,7
    5c38:	103fc11e 	bne	r2,zero,5b40 <__ram_exceptions_end+0xfe003b20>
    5c3c:	180ad0fa 	srli	r5,r3,3
    5c40:	00c03fc4 	movi	r3,255
    5c44:	8880004c 	andi	r2,r17,1
    5c48:	80c0031e 	bne	r16,r3,5c58 <__subsf3+0x184>
    5c4c:	28006d26 	beq	r5,zero,5e04 <__subsf3+0x330>
    5c50:	29401034 	orhi	r5,r5,64
    5c54:	043fffc4 	movi	r16,-1
    5c58:	00c02034 	movhi	r3,128
    5c5c:	18ffffc4 	addi	r3,r3,-1
    5c60:	28ca703a 	and	r5,r5,r3
    5c64:	003fc206 	br	5b70 <__ram_exceptions_end+0xfe003b50>
    5c68:	01003c0e 	bge	zero,r4,5d5c <__subsf3+0x288>
    5c6c:	30002126 	beq	r6,zero,5cf4 <__subsf3+0x220>
    5c70:	01403fc4 	movi	r5,255
    5c74:	817fb026 	beq	r16,r5,5b38 <__ram_exceptions_end+0xfe003b18>
    5c78:	39c10034 	orhi	r7,r7,1024
    5c7c:	014006c4 	movi	r5,27
    5c80:	29007416 	blt	r5,r4,5e54 <__subsf3+0x380>
    5c84:	01400804 	movi	r5,32
    5c88:	290bc83a 	sub	r5,r5,r4
    5c8c:	394a983a 	sll	r5,r7,r5
    5c90:	390ed83a 	srl	r7,r7,r4
    5c94:	2808c03a 	cmpne	r4,r5,zero
    5c98:	390eb03a 	or	r7,r7,r4
    5c9c:	19c7883a 	add	r3,r3,r7
    5ca0:	1901002c 	andhi	r4,r3,1024
    5ca4:	20003826 	beq	r4,zero,5d88 <__subsf3+0x2b4>
    5ca8:	84000044 	addi	r16,r16,1
    5cac:	01003fc4 	movi	r4,255
    5cb0:	81005426 	beq	r16,r4,5e04 <__subsf3+0x330>
    5cb4:	1023883a 	mov	r17,r2
    5cb8:	00bf0034 	movhi	r2,64512
    5cbc:	10bfffc4 	addi	r2,r2,-1
    5cc0:	1900004c 	andi	r4,r3,1
    5cc4:	1886703a 	and	r3,r3,r2
    5cc8:	1806d07a 	srli	r3,r3,1
    5ccc:	1906b03a 	or	r3,r3,r4
    5cd0:	003f9906 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5cd4:	383f9226 	beq	r7,zero,5b20 <__ram_exceptions_end+0xfe003b00>
    5cd8:	10803fcc 	andi	r2,r2,255
    5cdc:	003f9106 	br	5b24 <__ram_exceptions_end+0xfe003b04>
    5ce0:	213fffc4 	addi	r4,r4,-1
    5ce4:	203fbc26 	beq	r4,zero,5bd8 <__ram_exceptions_end+0xfe003bb8>
    5ce8:	00803fc4 	movi	r2,255
    5cec:	80bfb21e 	bne	r16,r2,5bb8 <__ram_exceptions_end+0xfe003b98>
    5cf0:	003f9106 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5cf4:	383f9026 	beq	r7,zero,5b38 <__ram_exceptions_end+0xfe003b18>
    5cf8:	213fffc4 	addi	r4,r4,-1
    5cfc:	203fe726 	beq	r4,zero,5c9c <__ram_exceptions_end+0xfe003c7c>
    5d00:	01403fc4 	movi	r5,255
    5d04:	817fdd1e 	bne	r16,r5,5c7c <__ram_exceptions_end+0xfe003c5c>
    5d08:	003f8b06 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5d0c:	2000221e 	bne	r4,zero,5d98 <__subsf3+0x2c4>
    5d10:	81000044 	addi	r4,r16,1
    5d14:	21003fcc 	andi	r4,r4,255
    5d18:	01400044 	movi	r5,1
    5d1c:	2900470e 	bge	r5,r4,5e3c <__subsf3+0x368>
    5d20:	19e5c83a 	sub	r18,r3,r7
    5d24:	9141002c 	andhi	r5,r18,1024
    5d28:	28002d26 	beq	r5,zero,5de0 <__subsf3+0x30c>
    5d2c:	38e5c83a 	sub	r18,r7,r3
    5d30:	1023883a 	mov	r17,r2
    5d34:	003fae06 	br	5bf0 <__ram_exceptions_end+0xfe003bd0>
    5d38:	8880004c 	andi	r2,r17,1
    5d3c:	043fffc4 	movi	r16,-1
    5d40:	000b883a 	mov	r5,zero
    5d44:	003f8a06 	br	5b70 <__ram_exceptions_end+0xfe003b50>
    5d48:	00ff0034 	movhi	r3,64512
    5d4c:	18ffffc4 	addi	r3,r3,-1
    5d50:	80a1c83a 	sub	r16,r16,r2
    5d54:	90c6703a 	and	r3,r18,r3
    5d58:	003f7706 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5d5c:	2000431e 	bne	r4,zero,5e6c <__subsf3+0x398>
    5d60:	81000044 	addi	r4,r16,1
    5d64:	21803fcc 	andi	r6,r4,255
    5d68:	01400044 	movi	r5,1
    5d6c:	2980280e 	bge	r5,r6,5e10 <__subsf3+0x33c>
    5d70:	01403fc4 	movi	r5,255
    5d74:	21402326 	beq	r4,r5,5e04 <__subsf3+0x330>
    5d78:	19c7883a 	add	r3,r3,r7
    5d7c:	1806d07a 	srli	r3,r3,1
    5d80:	2021883a 	mov	r16,r4
    5d84:	003f6c06 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5d88:	1023883a 	mov	r17,r2
    5d8c:	003fa906 	br	5c34 <__ram_exceptions_end+0xfe003c14>
    5d90:	01c00044 	movi	r7,1
    5d94:	003f9006 	br	5bd8 <__ram_exceptions_end+0xfe003bb8>
    5d98:	8000151e 	bne	r16,zero,5df0 <__subsf3+0x31c>
    5d9c:	18002f26 	beq	r3,zero,5e5c <__subsf3+0x388>
    5da0:	0108303a 	nor	r4,zero,r4
    5da4:	20000a26 	beq	r4,zero,5dd0 <__subsf3+0x2fc>
    5da8:	01403fc4 	movi	r5,255
    5dac:	31402b26 	beq	r6,r5,5e5c <__subsf3+0x388>
    5db0:	014006c4 	movi	r5,27
    5db4:	29006e16 	blt	r5,r4,5f70 <__subsf3+0x49c>
    5db8:	01400804 	movi	r5,32
    5dbc:	290bc83a 	sub	r5,r5,r4
    5dc0:	194a983a 	sll	r5,r3,r5
    5dc4:	1908d83a 	srl	r4,r3,r4
    5dc8:	2806c03a 	cmpne	r3,r5,zero
    5dcc:	20c6b03a 	or	r3,r4,r3
    5dd0:	38c7c83a 	sub	r3,r7,r3
    5dd4:	3021883a 	mov	r16,r6
    5dd8:	1023883a 	mov	r17,r2
    5ddc:	003f7f06 	br	5bdc <__ram_exceptions_end+0xfe003bbc>
    5de0:	903f831e 	bne	r18,zero,5bf0 <__ram_exceptions_end+0xfe003bd0>
    5de4:	0005883a 	mov	r2,zero
    5de8:	0021883a 	mov	r16,zero
    5dec:	003f9a06 	br	5c58 <__ram_exceptions_end+0xfe003c38>
    5df0:	01403fc4 	movi	r5,255
    5df4:	31401926 	beq	r6,r5,5e5c <__subsf3+0x388>
    5df8:	0109c83a 	sub	r4,zero,r4
    5dfc:	18c10034 	orhi	r3,r3,1024
    5e00:	003feb06 	br	5db0 <__ram_exceptions_end+0xfe003d90>
    5e04:	043fffc4 	movi	r16,-1
    5e08:	000b883a 	mov	r5,zero
    5e0c:	003f5806 	br	5b70 <__ram_exceptions_end+0xfe003b50>
    5e10:	8000481e 	bne	r16,zero,5f34 <__subsf3+0x460>
    5e14:	18006226 	beq	r3,zero,5fa0 <__subsf3+0x4cc>
    5e18:	383f4726 	beq	r7,zero,5b38 <__ram_exceptions_end+0xfe003b18>
    5e1c:	19c7883a 	add	r3,r3,r7
    5e20:	1881002c 	andhi	r2,r3,1024
    5e24:	103f8326 	beq	r2,zero,5c34 <__ram_exceptions_end+0xfe003c14>
    5e28:	00bf0034 	movhi	r2,64512
    5e2c:	10bfffc4 	addi	r2,r2,-1
    5e30:	2821883a 	mov	r16,r5
    5e34:	1886703a 	and	r3,r3,r2
    5e38:	003f3f06 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5e3c:	80001c1e 	bne	r16,zero,5eb0 <__subsf3+0x3dc>
    5e40:	1800261e 	bne	r3,zero,5edc <__subsf3+0x408>
    5e44:	38004c26 	beq	r7,zero,5f78 <__subsf3+0x4a4>
    5e48:	3807883a 	mov	r3,r7
    5e4c:	1023883a 	mov	r17,r2
    5e50:	003f3906 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5e54:	01c00044 	movi	r7,1
    5e58:	003f9006 	br	5c9c <__ram_exceptions_end+0xfe003c7c>
    5e5c:	3807883a 	mov	r3,r7
    5e60:	3021883a 	mov	r16,r6
    5e64:	1023883a 	mov	r17,r2
    5e68:	003f3306 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5e6c:	8000161e 	bne	r16,zero,5ec8 <__subsf3+0x3f4>
    5e70:	18002d26 	beq	r3,zero,5f28 <__subsf3+0x454>
    5e74:	0108303a 	nor	r4,zero,r4
    5e78:	20000a26 	beq	r4,zero,5ea4 <__subsf3+0x3d0>
    5e7c:	01403fc4 	movi	r5,255
    5e80:	31402926 	beq	r6,r5,5f28 <__subsf3+0x454>
    5e84:	014006c4 	movi	r5,27
    5e88:	29004716 	blt	r5,r4,5fa8 <__subsf3+0x4d4>
    5e8c:	01400804 	movi	r5,32
    5e90:	290bc83a 	sub	r5,r5,r4
    5e94:	194a983a 	sll	r5,r3,r5
    5e98:	1908d83a 	srl	r4,r3,r4
    5e9c:	2806c03a 	cmpne	r3,r5,zero
    5ea0:	20c6b03a 	or	r3,r4,r3
    5ea4:	19c7883a 	add	r3,r3,r7
    5ea8:	3021883a 	mov	r16,r6
    5eac:	003f7c06 	br	5ca0 <__ram_exceptions_end+0xfe003c80>
    5eb0:	1800111e 	bne	r3,zero,5ef8 <__subsf3+0x424>
    5eb4:	38003326 	beq	r7,zero,5f84 <__subsf3+0x4b0>
    5eb8:	3807883a 	mov	r3,r7
    5ebc:	1023883a 	mov	r17,r2
    5ec0:	04003fc4 	movi	r16,255
    5ec4:	003f1c06 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5ec8:	01403fc4 	movi	r5,255
    5ecc:	31401626 	beq	r6,r5,5f28 <__subsf3+0x454>
    5ed0:	0109c83a 	sub	r4,zero,r4
    5ed4:	18c10034 	orhi	r3,r3,1024
    5ed8:	003fea06 	br	5e84 <__ram_exceptions_end+0xfe003e64>
    5edc:	383f1626 	beq	r7,zero,5b38 <__ram_exceptions_end+0xfe003b18>
    5ee0:	19c9c83a 	sub	r4,r3,r7
    5ee4:	2141002c 	andhi	r5,r4,1024
    5ee8:	283f5026 	beq	r5,zero,5c2c <__ram_exceptions_end+0xfe003c0c>
    5eec:	38c7c83a 	sub	r3,r7,r3
    5ef0:	1023883a 	mov	r17,r2
    5ef4:	003f1006 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5ef8:	38001b26 	beq	r7,zero,5f68 <__subsf3+0x494>
    5efc:	1806d0fa 	srli	r3,r3,3
    5f00:	1900102c 	andhi	r4,r3,64
    5f04:	20000526 	beq	r4,zero,5f1c <__subsf3+0x448>
    5f08:	380ed0fa 	srli	r7,r7,3
    5f0c:	3900102c 	andhi	r4,r7,64
    5f10:	2000021e 	bne	r4,zero,5f1c <__subsf3+0x448>
    5f14:	3807883a 	mov	r3,r7
    5f18:	1023883a 	mov	r17,r2
    5f1c:	180690fa 	slli	r3,r3,3
    5f20:	04003fc4 	movi	r16,255
    5f24:	003f0406 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5f28:	3807883a 	mov	r3,r7
    5f2c:	3021883a 	mov	r16,r6
    5f30:	003f0106 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5f34:	18001726 	beq	r3,zero,5f94 <__subsf3+0x4c0>
    5f38:	38000b26 	beq	r7,zero,5f68 <__subsf3+0x494>
    5f3c:	1806d0fa 	srli	r3,r3,3
    5f40:	1900102c 	andhi	r4,r3,64
    5f44:	20000426 	beq	r4,zero,5f58 <__subsf3+0x484>
    5f48:	380ed0fa 	srli	r7,r7,3
    5f4c:	3900102c 	andhi	r4,r7,64
    5f50:	2000011e 	bne	r4,zero,5f58 <__subsf3+0x484>
    5f54:	3807883a 	mov	r3,r7
    5f58:	180690fa 	slli	r3,r3,3
    5f5c:	1023883a 	mov	r17,r2
    5f60:	04003fc4 	movi	r16,255
    5f64:	003ef406 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5f68:	04003fc4 	movi	r16,255
    5f6c:	003ef206 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5f70:	00c00044 	movi	r3,1
    5f74:	003f9606 	br	5dd0 <__ram_exceptions_end+0xfe003db0>
    5f78:	000b883a 	mov	r5,zero
    5f7c:	0005883a 	mov	r2,zero
    5f80:	003f3506 	br	5c58 <__ram_exceptions_end+0xfe003c38>
    5f84:	01402034 	movhi	r5,128
    5f88:	297fffc4 	addi	r5,r5,-1
    5f8c:	0005883a 	mov	r2,zero
    5f90:	003f2f06 	br	5c50 <__ram_exceptions_end+0xfe003c30>
    5f94:	3807883a 	mov	r3,r7
    5f98:	04003fc4 	movi	r16,255
    5f9c:	003ee606 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5fa0:	3807883a 	mov	r3,r7
    5fa4:	003ee406 	br	5b38 <__ram_exceptions_end+0xfe003b18>
    5fa8:	00c00044 	movi	r3,1
    5fac:	003fbd06 	br	5ea4 <__ram_exceptions_end+0xfe003e84>
    5fb0:	0005883a 	mov	r2,zero
    5fb4:	003f2806 	br	5c58 <__ram_exceptions_end+0xfe003c38>

00005fb8 <__fixsfsi>:
    5fb8:	200ad5fa 	srli	r5,r4,23
    5fbc:	00c02034 	movhi	r3,128
    5fc0:	18ffffc4 	addi	r3,r3,-1
    5fc4:	29403fcc 	andi	r5,r5,255
    5fc8:	00801f84 	movi	r2,126
    5fcc:	1906703a 	and	r3,r3,r4
    5fd0:	2008d7fa 	srli	r4,r4,31
    5fd4:	11400e0e 	bge	r2,r5,6010 <__fixsfsi+0x58>
    5fd8:	00802744 	movi	r2,157
    5fdc:	11400816 	blt	r2,r5,6000 <__fixsfsi+0x48>
    5fe0:	00802544 	movi	r2,149
    5fe4:	18c02034 	orhi	r3,r3,128
    5fe8:	11400b0e 	bge	r2,r5,6018 <__fixsfsi+0x60>
    5fec:	28bfda84 	addi	r2,r5,-150
    5ff0:	1884983a 	sll	r2,r3,r2
    5ff4:	20000726 	beq	r4,zero,6014 <__fixsfsi+0x5c>
    5ff8:	0085c83a 	sub	r2,zero,r2
    5ffc:	f800283a 	ret
    6000:	00a00034 	movhi	r2,32768
    6004:	10bfffc4 	addi	r2,r2,-1
    6008:	2085883a 	add	r2,r4,r2
    600c:	f800283a 	ret
    6010:	0005883a 	mov	r2,zero
    6014:	f800283a 	ret
    6018:	00802584 	movi	r2,150
    601c:	1145c83a 	sub	r2,r2,r5
    6020:	1884d83a 	srl	r2,r3,r2
    6024:	003ff306 	br	5ff4 <__ram_exceptions_end+0xfe003fd4>

00006028 <__floatsisf>:
    6028:	defffd04 	addi	sp,sp,-12
    602c:	dfc00215 	stw	ra,8(sp)
    6030:	dc400115 	stw	r17,4(sp)
    6034:	dc000015 	stw	r16,0(sp)
    6038:	20003526 	beq	r4,zero,6110 <__floatsisf+0xe8>
    603c:	2021883a 	mov	r16,r4
    6040:	2022d7fa 	srli	r17,r4,31
    6044:	20003616 	blt	r4,zero,6120 <__floatsisf+0xf8>
    6048:	8009883a 	mov	r4,r16
    604c:	0008d340 	call	8d34 <__clzsi2>
    6050:	00c02784 	movi	r3,158
    6054:	1887c83a 	sub	r3,r3,r2
    6058:	01002584 	movi	r4,150
    605c:	20c01416 	blt	r4,r3,60b0 <__floatsisf+0x88>
    6060:	20c9c83a 	sub	r4,r4,r3
    6064:	8120983a 	sll	r16,r16,r4
    6068:	00802034 	movhi	r2,128
    606c:	10bfffc4 	addi	r2,r2,-1
    6070:	8809883a 	mov	r4,r17
    6074:	80a0703a 	and	r16,r16,r2
    6078:	18803fcc 	andi	r2,r3,255
    607c:	100695fa 	slli	r3,r2,23
    6080:	20803fcc 	andi	r2,r4,255
    6084:	100897fa 	slli	r4,r2,31
    6088:	00802034 	movhi	r2,128
    608c:	10bfffc4 	addi	r2,r2,-1
    6090:	8084703a 	and	r2,r16,r2
    6094:	10c4b03a 	or	r2,r2,r3
    6098:	1104b03a 	or	r2,r2,r4
    609c:	dfc00217 	ldw	ra,8(sp)
    60a0:	dc400117 	ldw	r17,4(sp)
    60a4:	dc000017 	ldw	r16,0(sp)
    60a8:	dec00304 	addi	sp,sp,12
    60ac:	f800283a 	ret
    60b0:	01002644 	movi	r4,153
    60b4:	20c01c16 	blt	r4,r3,6128 <__floatsisf+0x100>
    60b8:	20c9c83a 	sub	r4,r4,r3
    60bc:	8120983a 	sll	r16,r16,r4
    60c0:	013f0034 	movhi	r4,64512
    60c4:	213fffc4 	addi	r4,r4,-1
    60c8:	814001cc 	andi	r5,r16,7
    60cc:	8108703a 	and	r4,r16,r4
    60d0:	28000426 	beq	r5,zero,60e4 <__floatsisf+0xbc>
    60d4:	840003cc 	andi	r16,r16,15
    60d8:	01400104 	movi	r5,4
    60dc:	81400126 	beq	r16,r5,60e4 <__floatsisf+0xbc>
    60e0:	2149883a 	add	r4,r4,r5
    60e4:	2141002c 	andhi	r5,r4,1024
    60e8:	28000526 	beq	r5,zero,6100 <__floatsisf+0xd8>
    60ec:	00c027c4 	movi	r3,159
    60f0:	1887c83a 	sub	r3,r3,r2
    60f4:	00bf0034 	movhi	r2,64512
    60f8:	10bfffc4 	addi	r2,r2,-1
    60fc:	2088703a 	and	r4,r4,r2
    6100:	202091ba 	slli	r16,r4,6
    6104:	8809883a 	mov	r4,r17
    6108:	8020d27a 	srli	r16,r16,9
    610c:	003fda06 	br	6078 <__ram_exceptions_end+0xfe004058>
    6110:	0009883a 	mov	r4,zero
    6114:	0007883a 	mov	r3,zero
    6118:	0021883a 	mov	r16,zero
    611c:	003fd606 	br	6078 <__ram_exceptions_end+0xfe004058>
    6120:	0121c83a 	sub	r16,zero,r4
    6124:	003fc806 	br	6048 <__ram_exceptions_end+0xfe004028>
    6128:	01002e44 	movi	r4,185
    612c:	20c9c83a 	sub	r4,r4,r3
    6130:	01400144 	movi	r5,5
    6134:	8108983a 	sll	r4,r16,r4
    6138:	288bc83a 	sub	r5,r5,r2
    613c:	8160d83a 	srl	r16,r16,r5
    6140:	2008c03a 	cmpne	r4,r4,zero
    6144:	8120b03a 	or	r16,r16,r4
    6148:	003fdd06 	br	60c0 <__ram_exceptions_end+0xfe0040a0>

0000614c <__floatunsisf>:
    614c:	defffe04 	addi	sp,sp,-8
    6150:	dfc00115 	stw	ra,4(sp)
    6154:	dc000015 	stw	r16,0(sp)
    6158:	20002c26 	beq	r4,zero,620c <__floatunsisf+0xc0>
    615c:	2021883a 	mov	r16,r4
    6160:	0008d340 	call	8d34 <__clzsi2>
    6164:	00c02784 	movi	r3,158
    6168:	1887c83a 	sub	r3,r3,r2
    616c:	01002584 	movi	r4,150
    6170:	20c00f16 	blt	r4,r3,61b0 <__floatunsisf+0x64>
    6174:	20c9c83a 	sub	r4,r4,r3
    6178:	8108983a 	sll	r4,r16,r4
    617c:	00802034 	movhi	r2,128
    6180:	10bfffc4 	addi	r2,r2,-1
    6184:	2088703a 	and	r4,r4,r2
    6188:	18803fcc 	andi	r2,r3,255
    618c:	100695fa 	slli	r3,r2,23
    6190:	00802034 	movhi	r2,128
    6194:	10bfffc4 	addi	r2,r2,-1
    6198:	2084703a 	and	r2,r4,r2
    619c:	10c4b03a 	or	r2,r2,r3
    61a0:	dfc00117 	ldw	ra,4(sp)
    61a4:	dc000017 	ldw	r16,0(sp)
    61a8:	dec00204 	addi	sp,sp,8
    61ac:	f800283a 	ret
    61b0:	01002644 	movi	r4,153
    61b4:	20c01816 	blt	r4,r3,6218 <__floatunsisf+0xcc>
    61b8:	20c9c83a 	sub	r4,r4,r3
    61bc:	8108983a 	sll	r4,r16,r4
    61c0:	017f0034 	movhi	r5,64512
    61c4:	297fffc4 	addi	r5,r5,-1
    61c8:	218001cc 	andi	r6,r4,7
    61cc:	214a703a 	and	r5,r4,r5
    61d0:	30000426 	beq	r6,zero,61e4 <__floatunsisf+0x98>
    61d4:	210003cc 	andi	r4,r4,15
    61d8:	01800104 	movi	r6,4
    61dc:	21800126 	beq	r4,r6,61e4 <__floatunsisf+0x98>
    61e0:	298b883a 	add	r5,r5,r6
    61e4:	2901002c 	andhi	r4,r5,1024
    61e8:	20000526 	beq	r4,zero,6200 <__floatunsisf+0xb4>
    61ec:	00c027c4 	movi	r3,159
    61f0:	1887c83a 	sub	r3,r3,r2
    61f4:	00bf0034 	movhi	r2,64512
    61f8:	10bfffc4 	addi	r2,r2,-1
    61fc:	288a703a 	and	r5,r5,r2
    6200:	280891ba 	slli	r4,r5,6
    6204:	2008d27a 	srli	r4,r4,9
    6208:	003fdf06 	br	6188 <__ram_exceptions_end+0xfe004168>
    620c:	0007883a 	mov	r3,zero
    6210:	0009883a 	mov	r4,zero
    6214:	003fdc06 	br	6188 <__ram_exceptions_end+0xfe004168>
    6218:	01402e44 	movi	r5,185
    621c:	28cbc83a 	sub	r5,r5,r3
    6220:	01000144 	movi	r4,5
    6224:	2089c83a 	sub	r4,r4,r2
    6228:	814a983a 	sll	r5,r16,r5
    622c:	8108d83a 	srl	r4,r16,r4
    6230:	2820c03a 	cmpne	r16,r5,zero
    6234:	2408b03a 	or	r4,r4,r16
    6238:	003fe106 	br	61c0 <__ram_exceptions_end+0xfe0041a0>

0000623c <__adddf3>:
    623c:	02c00434 	movhi	r11,16
    6240:	5affffc4 	addi	r11,r11,-1
    6244:	2806d7fa 	srli	r3,r5,31
    6248:	2ad4703a 	and	r10,r5,r11
    624c:	3ad2703a 	and	r9,r7,r11
    6250:	3804d53a 	srli	r2,r7,20
    6254:	3018d77a 	srli	r12,r6,29
    6258:	280ad53a 	srli	r5,r5,20
    625c:	501490fa 	slli	r10,r10,3
    6260:	2010d77a 	srli	r8,r4,29
    6264:	481290fa 	slli	r9,r9,3
    6268:	380ed7fa 	srli	r7,r7,31
    626c:	defffb04 	addi	sp,sp,-20
    6270:	dc800215 	stw	r18,8(sp)
    6274:	dc400115 	stw	r17,4(sp)
    6278:	dc000015 	stw	r16,0(sp)
    627c:	dfc00415 	stw	ra,16(sp)
    6280:	dcc00315 	stw	r19,12(sp)
    6284:	1c803fcc 	andi	r18,r3,255
    6288:	2c01ffcc 	andi	r16,r5,2047
    628c:	5210b03a 	or	r8,r10,r8
    6290:	202290fa 	slli	r17,r4,3
    6294:	1081ffcc 	andi	r2,r2,2047
    6298:	4b12b03a 	or	r9,r9,r12
    629c:	300c90fa 	slli	r6,r6,3
    62a0:	91c07526 	beq	r18,r7,6478 <__adddf3+0x23c>
    62a4:	8087c83a 	sub	r3,r16,r2
    62a8:	00c0ab0e 	bge	zero,r3,6558 <__adddf3+0x31c>
    62ac:	10002a1e 	bne	r2,zero,6358 <__adddf3+0x11c>
    62b0:	4984b03a 	or	r2,r9,r6
    62b4:	1000961e 	bne	r2,zero,6510 <__adddf3+0x2d4>
    62b8:	888001cc 	andi	r2,r17,7
    62bc:	10000726 	beq	r2,zero,62dc <__adddf3+0xa0>
    62c0:	888003cc 	andi	r2,r17,15
    62c4:	00c00104 	movi	r3,4
    62c8:	10c00426 	beq	r2,r3,62dc <__adddf3+0xa0>
    62cc:	88c7883a 	add	r3,r17,r3
    62d0:	1c63803a 	cmpltu	r17,r3,r17
    62d4:	4451883a 	add	r8,r8,r17
    62d8:	1823883a 	mov	r17,r3
    62dc:	4080202c 	andhi	r2,r8,128
    62e0:	10005926 	beq	r2,zero,6448 <__adddf3+0x20c>
    62e4:	84000044 	addi	r16,r16,1
    62e8:	0081ffc4 	movi	r2,2047
    62ec:	8080ba26 	beq	r16,r2,65d8 <__adddf3+0x39c>
    62f0:	00bfe034 	movhi	r2,65408
    62f4:	10bfffc4 	addi	r2,r2,-1
    62f8:	4090703a 	and	r8,r8,r2
    62fc:	4004977a 	slli	r2,r8,29
    6300:	4010927a 	slli	r8,r8,9
    6304:	8822d0fa 	srli	r17,r17,3
    6308:	8401ffcc 	andi	r16,r16,2047
    630c:	4010d33a 	srli	r8,r8,12
    6310:	9007883a 	mov	r3,r18
    6314:	1444b03a 	or	r2,r2,r17
    6318:	8401ffcc 	andi	r16,r16,2047
    631c:	8020953a 	slli	r16,r16,20
    6320:	18c03fcc 	andi	r3,r3,255
    6324:	01000434 	movhi	r4,16
    6328:	213fffc4 	addi	r4,r4,-1
    632c:	180697fa 	slli	r3,r3,31
    6330:	4110703a 	and	r8,r8,r4
    6334:	4410b03a 	or	r8,r8,r16
    6338:	40c6b03a 	or	r3,r8,r3
    633c:	dfc00417 	ldw	ra,16(sp)
    6340:	dcc00317 	ldw	r19,12(sp)
    6344:	dc800217 	ldw	r18,8(sp)
    6348:	dc400117 	ldw	r17,4(sp)
    634c:	dc000017 	ldw	r16,0(sp)
    6350:	dec00504 	addi	sp,sp,20
    6354:	f800283a 	ret
    6358:	0081ffc4 	movi	r2,2047
    635c:	80bfd626 	beq	r16,r2,62b8 <__ram_exceptions_end+0xfe004298>
    6360:	4a402034 	orhi	r9,r9,128
    6364:	00800e04 	movi	r2,56
    6368:	10c09f16 	blt	r2,r3,65e8 <__adddf3+0x3ac>
    636c:	008007c4 	movi	r2,31
    6370:	10c0c216 	blt	r2,r3,667c <__adddf3+0x440>
    6374:	00800804 	movi	r2,32
    6378:	10c5c83a 	sub	r2,r2,r3
    637c:	488a983a 	sll	r5,r9,r2
    6380:	30c8d83a 	srl	r4,r6,r3
    6384:	3084983a 	sll	r2,r6,r2
    6388:	48c6d83a 	srl	r3,r9,r3
    638c:	290cb03a 	or	r6,r5,r4
    6390:	1004c03a 	cmpne	r2,r2,zero
    6394:	308cb03a 	or	r6,r6,r2
    6398:	898dc83a 	sub	r6,r17,r6
    639c:	89a3803a 	cmpltu	r17,r17,r6
    63a0:	40d1c83a 	sub	r8,r8,r3
    63a4:	4451c83a 	sub	r8,r8,r17
    63a8:	3023883a 	mov	r17,r6
    63ac:	4080202c 	andhi	r2,r8,128
    63b0:	10002326 	beq	r2,zero,6440 <__adddf3+0x204>
    63b4:	04c02034 	movhi	r19,128
    63b8:	9cffffc4 	addi	r19,r19,-1
    63bc:	44e6703a 	and	r19,r8,r19
    63c0:	98007626 	beq	r19,zero,659c <__adddf3+0x360>
    63c4:	9809883a 	mov	r4,r19
    63c8:	0008d340 	call	8d34 <__clzsi2>
    63cc:	10fffe04 	addi	r3,r2,-8
    63d0:	010007c4 	movi	r4,31
    63d4:	20c07716 	blt	r4,r3,65b4 <__adddf3+0x378>
    63d8:	00800804 	movi	r2,32
    63dc:	10c5c83a 	sub	r2,r2,r3
    63e0:	8884d83a 	srl	r2,r17,r2
    63e4:	98d0983a 	sll	r8,r19,r3
    63e8:	88e2983a 	sll	r17,r17,r3
    63ec:	1204b03a 	or	r2,r2,r8
    63f0:	1c007416 	blt	r3,r16,65c4 <__adddf3+0x388>
    63f4:	1c21c83a 	sub	r16,r3,r16
    63f8:	82000044 	addi	r8,r16,1
    63fc:	00c007c4 	movi	r3,31
    6400:	1a009116 	blt	r3,r8,6648 <__adddf3+0x40c>
    6404:	00c00804 	movi	r3,32
    6408:	1a07c83a 	sub	r3,r3,r8
    640c:	8a08d83a 	srl	r4,r17,r8
    6410:	88e2983a 	sll	r17,r17,r3
    6414:	10c6983a 	sll	r3,r2,r3
    6418:	1210d83a 	srl	r8,r2,r8
    641c:	8804c03a 	cmpne	r2,r17,zero
    6420:	1906b03a 	or	r3,r3,r4
    6424:	18a2b03a 	or	r17,r3,r2
    6428:	0021883a 	mov	r16,zero
    642c:	003fa206 	br	62b8 <__ram_exceptions_end+0xfe004298>
    6430:	1890b03a 	or	r8,r3,r2
    6434:	40017d26 	beq	r8,zero,6a2c <__adddf3+0x7f0>
    6438:	1011883a 	mov	r8,r2
    643c:	1823883a 	mov	r17,r3
    6440:	888001cc 	andi	r2,r17,7
    6444:	103f9e1e 	bne	r2,zero,62c0 <__ram_exceptions_end+0xfe0042a0>
    6448:	4004977a 	slli	r2,r8,29
    644c:	8822d0fa 	srli	r17,r17,3
    6450:	4010d0fa 	srli	r8,r8,3
    6454:	9007883a 	mov	r3,r18
    6458:	1444b03a 	or	r2,r2,r17
    645c:	0101ffc4 	movi	r4,2047
    6460:	81002426 	beq	r16,r4,64f4 <__adddf3+0x2b8>
    6464:	8120703a 	and	r16,r16,r4
    6468:	01000434 	movhi	r4,16
    646c:	213fffc4 	addi	r4,r4,-1
    6470:	4110703a 	and	r8,r8,r4
    6474:	003fa806 	br	6318 <__ram_exceptions_end+0xfe0042f8>
    6478:	8089c83a 	sub	r4,r16,r2
    647c:	01005e0e 	bge	zero,r4,65f8 <__adddf3+0x3bc>
    6480:	10002b26 	beq	r2,zero,6530 <__adddf3+0x2f4>
    6484:	0081ffc4 	movi	r2,2047
    6488:	80bf8b26 	beq	r16,r2,62b8 <__ram_exceptions_end+0xfe004298>
    648c:	4a402034 	orhi	r9,r9,128
    6490:	00800e04 	movi	r2,56
    6494:	1100a40e 	bge	r2,r4,6728 <__adddf3+0x4ec>
    6498:	498cb03a 	or	r6,r9,r6
    649c:	300ac03a 	cmpne	r5,r6,zero
    64a0:	0013883a 	mov	r9,zero
    64a4:	2c4b883a 	add	r5,r5,r17
    64a8:	2c63803a 	cmpltu	r17,r5,r17
    64ac:	4a11883a 	add	r8,r9,r8
    64b0:	8a11883a 	add	r8,r17,r8
    64b4:	2823883a 	mov	r17,r5
    64b8:	4080202c 	andhi	r2,r8,128
    64bc:	103fe026 	beq	r2,zero,6440 <__ram_exceptions_end+0xfe004420>
    64c0:	84000044 	addi	r16,r16,1
    64c4:	0081ffc4 	movi	r2,2047
    64c8:	8080d226 	beq	r16,r2,6814 <__adddf3+0x5d8>
    64cc:	00bfe034 	movhi	r2,65408
    64d0:	10bfffc4 	addi	r2,r2,-1
    64d4:	4090703a 	and	r8,r8,r2
    64d8:	880ad07a 	srli	r5,r17,1
    64dc:	400897fa 	slli	r4,r8,31
    64e0:	88c0004c 	andi	r3,r17,1
    64e4:	28e2b03a 	or	r17,r5,r3
    64e8:	4010d07a 	srli	r8,r8,1
    64ec:	2462b03a 	or	r17,r4,r17
    64f0:	003f7106 	br	62b8 <__ram_exceptions_end+0xfe004298>
    64f4:	4088b03a 	or	r4,r8,r2
    64f8:	20014526 	beq	r4,zero,6a10 <__adddf3+0x7d4>
    64fc:	01000434 	movhi	r4,16
    6500:	42000234 	orhi	r8,r8,8
    6504:	213fffc4 	addi	r4,r4,-1
    6508:	4110703a 	and	r8,r8,r4
    650c:	003f8206 	br	6318 <__ram_exceptions_end+0xfe0042f8>
    6510:	18ffffc4 	addi	r3,r3,-1
    6514:	1800491e 	bne	r3,zero,663c <__adddf3+0x400>
    6518:	898bc83a 	sub	r5,r17,r6
    651c:	8963803a 	cmpltu	r17,r17,r5
    6520:	4251c83a 	sub	r8,r8,r9
    6524:	4451c83a 	sub	r8,r8,r17
    6528:	2823883a 	mov	r17,r5
    652c:	003f9f06 	br	63ac <__ram_exceptions_end+0xfe00438c>
    6530:	4984b03a 	or	r2,r9,r6
    6534:	103f6026 	beq	r2,zero,62b8 <__ram_exceptions_end+0xfe004298>
    6538:	213fffc4 	addi	r4,r4,-1
    653c:	2000931e 	bne	r4,zero,678c <__adddf3+0x550>
    6540:	898d883a 	add	r6,r17,r6
    6544:	3463803a 	cmpltu	r17,r6,r17
    6548:	4251883a 	add	r8,r8,r9
    654c:	8a11883a 	add	r8,r17,r8
    6550:	3023883a 	mov	r17,r6
    6554:	003fd806 	br	64b8 <__ram_exceptions_end+0xfe004498>
    6558:	1800541e 	bne	r3,zero,66ac <__adddf3+0x470>
    655c:	80800044 	addi	r2,r16,1
    6560:	1081ffcc 	andi	r2,r2,2047
    6564:	00c00044 	movi	r3,1
    6568:	1880a00e 	bge	r3,r2,67ec <__adddf3+0x5b0>
    656c:	8989c83a 	sub	r4,r17,r6
    6570:	8905803a 	cmpltu	r2,r17,r4
    6574:	4267c83a 	sub	r19,r8,r9
    6578:	98a7c83a 	sub	r19,r19,r2
    657c:	9880202c 	andhi	r2,r19,128
    6580:	10006326 	beq	r2,zero,6710 <__adddf3+0x4d4>
    6584:	3463c83a 	sub	r17,r6,r17
    6588:	4a07c83a 	sub	r3,r9,r8
    658c:	344d803a 	cmpltu	r6,r6,r17
    6590:	19a7c83a 	sub	r19,r3,r6
    6594:	3825883a 	mov	r18,r7
    6598:	983f8a1e 	bne	r19,zero,63c4 <__ram_exceptions_end+0xfe0043a4>
    659c:	8809883a 	mov	r4,r17
    65a0:	0008d340 	call	8d34 <__clzsi2>
    65a4:	10800804 	addi	r2,r2,32
    65a8:	10fffe04 	addi	r3,r2,-8
    65ac:	010007c4 	movi	r4,31
    65b0:	20ff890e 	bge	r4,r3,63d8 <__ram_exceptions_end+0xfe0043b8>
    65b4:	10bff604 	addi	r2,r2,-40
    65b8:	8884983a 	sll	r2,r17,r2
    65bc:	0023883a 	mov	r17,zero
    65c0:	1c3f8c0e 	bge	r3,r16,63f4 <__ram_exceptions_end+0xfe0043d4>
    65c4:	023fe034 	movhi	r8,65408
    65c8:	423fffc4 	addi	r8,r8,-1
    65cc:	80e1c83a 	sub	r16,r16,r3
    65d0:	1210703a 	and	r8,r2,r8
    65d4:	003f3806 	br	62b8 <__ram_exceptions_end+0xfe004298>
    65d8:	9007883a 	mov	r3,r18
    65dc:	0011883a 	mov	r8,zero
    65e0:	0005883a 	mov	r2,zero
    65e4:	003f4c06 	br	6318 <__ram_exceptions_end+0xfe0042f8>
    65e8:	498cb03a 	or	r6,r9,r6
    65ec:	300cc03a 	cmpne	r6,r6,zero
    65f0:	0007883a 	mov	r3,zero
    65f4:	003f6806 	br	6398 <__ram_exceptions_end+0xfe004378>
    65f8:	20009c1e 	bne	r4,zero,686c <__adddf3+0x630>
    65fc:	80800044 	addi	r2,r16,1
    6600:	1141ffcc 	andi	r5,r2,2047
    6604:	01000044 	movi	r4,1
    6608:	2140670e 	bge	r4,r5,67a8 <__adddf3+0x56c>
    660c:	0101ffc4 	movi	r4,2047
    6610:	11007f26 	beq	r2,r4,6810 <__adddf3+0x5d4>
    6614:	898d883a 	add	r6,r17,r6
    6618:	4247883a 	add	r3,r8,r9
    661c:	3451803a 	cmpltu	r8,r6,r17
    6620:	40d1883a 	add	r8,r8,r3
    6624:	402297fa 	slli	r17,r8,31
    6628:	300cd07a 	srli	r6,r6,1
    662c:	4010d07a 	srli	r8,r8,1
    6630:	1021883a 	mov	r16,r2
    6634:	89a2b03a 	or	r17,r17,r6
    6638:	003f1f06 	br	62b8 <__ram_exceptions_end+0xfe004298>
    663c:	0081ffc4 	movi	r2,2047
    6640:	80bf481e 	bne	r16,r2,6364 <__ram_exceptions_end+0xfe004344>
    6644:	003f1c06 	br	62b8 <__ram_exceptions_end+0xfe004298>
    6648:	843ff844 	addi	r16,r16,-31
    664c:	01000804 	movi	r4,32
    6650:	1406d83a 	srl	r3,r2,r16
    6654:	41005026 	beq	r8,r4,6798 <__adddf3+0x55c>
    6658:	01001004 	movi	r4,64
    665c:	2211c83a 	sub	r8,r4,r8
    6660:	1204983a 	sll	r2,r2,r8
    6664:	88a2b03a 	or	r17,r17,r2
    6668:	8822c03a 	cmpne	r17,r17,zero
    666c:	1c62b03a 	or	r17,r3,r17
    6670:	0011883a 	mov	r8,zero
    6674:	0021883a 	mov	r16,zero
    6678:	003f7106 	br	6440 <__ram_exceptions_end+0xfe004420>
    667c:	193ff804 	addi	r4,r3,-32
    6680:	00800804 	movi	r2,32
    6684:	4908d83a 	srl	r4,r9,r4
    6688:	18804526 	beq	r3,r2,67a0 <__adddf3+0x564>
    668c:	00801004 	movi	r2,64
    6690:	10c5c83a 	sub	r2,r2,r3
    6694:	4886983a 	sll	r3,r9,r2
    6698:	198cb03a 	or	r6,r3,r6
    669c:	300cc03a 	cmpne	r6,r6,zero
    66a0:	218cb03a 	or	r6,r4,r6
    66a4:	0007883a 	mov	r3,zero
    66a8:	003f3b06 	br	6398 <__ram_exceptions_end+0xfe004378>
    66ac:	80002a26 	beq	r16,zero,6758 <__adddf3+0x51c>
    66b0:	0101ffc4 	movi	r4,2047
    66b4:	11006826 	beq	r2,r4,6858 <__adddf3+0x61c>
    66b8:	00c7c83a 	sub	r3,zero,r3
    66bc:	42002034 	orhi	r8,r8,128
    66c0:	01000e04 	movi	r4,56
    66c4:	20c07c16 	blt	r4,r3,68b8 <__adddf3+0x67c>
    66c8:	010007c4 	movi	r4,31
    66cc:	20c0da16 	blt	r4,r3,6a38 <__adddf3+0x7fc>
    66d0:	01000804 	movi	r4,32
    66d4:	20c9c83a 	sub	r4,r4,r3
    66d8:	4114983a 	sll	r10,r8,r4
    66dc:	88cad83a 	srl	r5,r17,r3
    66e0:	8908983a 	sll	r4,r17,r4
    66e4:	40c6d83a 	srl	r3,r8,r3
    66e8:	5162b03a 	or	r17,r10,r5
    66ec:	2008c03a 	cmpne	r4,r4,zero
    66f0:	8922b03a 	or	r17,r17,r4
    66f4:	3463c83a 	sub	r17,r6,r17
    66f8:	48c7c83a 	sub	r3,r9,r3
    66fc:	344d803a 	cmpltu	r6,r6,r17
    6700:	1991c83a 	sub	r8,r3,r6
    6704:	1021883a 	mov	r16,r2
    6708:	3825883a 	mov	r18,r7
    670c:	003f2706 	br	63ac <__ram_exceptions_end+0xfe00438c>
    6710:	24d0b03a 	or	r8,r4,r19
    6714:	40001b1e 	bne	r8,zero,6784 <__adddf3+0x548>
    6718:	0005883a 	mov	r2,zero
    671c:	0007883a 	mov	r3,zero
    6720:	0021883a 	mov	r16,zero
    6724:	003f4d06 	br	645c <__ram_exceptions_end+0xfe00443c>
    6728:	008007c4 	movi	r2,31
    672c:	11003c16 	blt	r2,r4,6820 <__adddf3+0x5e4>
    6730:	00800804 	movi	r2,32
    6734:	1105c83a 	sub	r2,r2,r4
    6738:	488e983a 	sll	r7,r9,r2
    673c:	310ad83a 	srl	r5,r6,r4
    6740:	3084983a 	sll	r2,r6,r2
    6744:	4912d83a 	srl	r9,r9,r4
    6748:	394ab03a 	or	r5,r7,r5
    674c:	1004c03a 	cmpne	r2,r2,zero
    6750:	288ab03a 	or	r5,r5,r2
    6754:	003f5306 	br	64a4 <__ram_exceptions_end+0xfe004484>
    6758:	4448b03a 	or	r4,r8,r17
    675c:	20003e26 	beq	r4,zero,6858 <__adddf3+0x61c>
    6760:	00c6303a 	nor	r3,zero,r3
    6764:	18003a1e 	bne	r3,zero,6850 <__adddf3+0x614>
    6768:	3463c83a 	sub	r17,r6,r17
    676c:	4a07c83a 	sub	r3,r9,r8
    6770:	344d803a 	cmpltu	r6,r6,r17
    6774:	1991c83a 	sub	r8,r3,r6
    6778:	1021883a 	mov	r16,r2
    677c:	3825883a 	mov	r18,r7
    6780:	003f0a06 	br	63ac <__ram_exceptions_end+0xfe00438c>
    6784:	2023883a 	mov	r17,r4
    6788:	003f0d06 	br	63c0 <__ram_exceptions_end+0xfe0043a0>
    678c:	0081ffc4 	movi	r2,2047
    6790:	80bf3f1e 	bne	r16,r2,6490 <__ram_exceptions_end+0xfe004470>
    6794:	003ec806 	br	62b8 <__ram_exceptions_end+0xfe004298>
    6798:	0005883a 	mov	r2,zero
    679c:	003fb106 	br	6664 <__ram_exceptions_end+0xfe004644>
    67a0:	0007883a 	mov	r3,zero
    67a4:	003fbc06 	br	6698 <__ram_exceptions_end+0xfe004678>
    67a8:	4444b03a 	or	r2,r8,r17
    67ac:	8000871e 	bne	r16,zero,69cc <__adddf3+0x790>
    67b0:	1000ba26 	beq	r2,zero,6a9c <__adddf3+0x860>
    67b4:	4984b03a 	or	r2,r9,r6
    67b8:	103ebf26 	beq	r2,zero,62b8 <__ram_exceptions_end+0xfe004298>
    67bc:	8985883a 	add	r2,r17,r6
    67c0:	4247883a 	add	r3,r8,r9
    67c4:	1451803a 	cmpltu	r8,r2,r17
    67c8:	40d1883a 	add	r8,r8,r3
    67cc:	40c0202c 	andhi	r3,r8,128
    67d0:	1023883a 	mov	r17,r2
    67d4:	183f1a26 	beq	r3,zero,6440 <__ram_exceptions_end+0xfe004420>
    67d8:	00bfe034 	movhi	r2,65408
    67dc:	10bfffc4 	addi	r2,r2,-1
    67e0:	2021883a 	mov	r16,r4
    67e4:	4090703a 	and	r8,r8,r2
    67e8:	003eb306 	br	62b8 <__ram_exceptions_end+0xfe004298>
    67ec:	4444b03a 	or	r2,r8,r17
    67f0:	8000291e 	bne	r16,zero,6898 <__adddf3+0x65c>
    67f4:	10004b1e 	bne	r2,zero,6924 <__adddf3+0x6e8>
    67f8:	4990b03a 	or	r8,r9,r6
    67fc:	40008b26 	beq	r8,zero,6a2c <__adddf3+0x7f0>
    6800:	4811883a 	mov	r8,r9
    6804:	3023883a 	mov	r17,r6
    6808:	3825883a 	mov	r18,r7
    680c:	003eaa06 	br	62b8 <__ram_exceptions_end+0xfe004298>
    6810:	1021883a 	mov	r16,r2
    6814:	0011883a 	mov	r8,zero
    6818:	0005883a 	mov	r2,zero
    681c:	003f0f06 	br	645c <__ram_exceptions_end+0xfe00443c>
    6820:	217ff804 	addi	r5,r4,-32
    6824:	00800804 	movi	r2,32
    6828:	494ad83a 	srl	r5,r9,r5
    682c:	20807d26 	beq	r4,r2,6a24 <__adddf3+0x7e8>
    6830:	00801004 	movi	r2,64
    6834:	1109c83a 	sub	r4,r2,r4
    6838:	4912983a 	sll	r9,r9,r4
    683c:	498cb03a 	or	r6,r9,r6
    6840:	300cc03a 	cmpne	r6,r6,zero
    6844:	298ab03a 	or	r5,r5,r6
    6848:	0013883a 	mov	r9,zero
    684c:	003f1506 	br	64a4 <__ram_exceptions_end+0xfe004484>
    6850:	0101ffc4 	movi	r4,2047
    6854:	113f9a1e 	bne	r2,r4,66c0 <__ram_exceptions_end+0xfe0046a0>
    6858:	4811883a 	mov	r8,r9
    685c:	3023883a 	mov	r17,r6
    6860:	1021883a 	mov	r16,r2
    6864:	3825883a 	mov	r18,r7
    6868:	003e9306 	br	62b8 <__ram_exceptions_end+0xfe004298>
    686c:	8000161e 	bne	r16,zero,68c8 <__adddf3+0x68c>
    6870:	444ab03a 	or	r5,r8,r17
    6874:	28005126 	beq	r5,zero,69bc <__adddf3+0x780>
    6878:	0108303a 	nor	r4,zero,r4
    687c:	20004d1e 	bne	r4,zero,69b4 <__adddf3+0x778>
    6880:	89a3883a 	add	r17,r17,r6
    6884:	4253883a 	add	r9,r8,r9
    6888:	898d803a 	cmpltu	r6,r17,r6
    688c:	3251883a 	add	r8,r6,r9
    6890:	1021883a 	mov	r16,r2
    6894:	003f0806 	br	64b8 <__ram_exceptions_end+0xfe004498>
    6898:	1000301e 	bne	r2,zero,695c <__adddf3+0x720>
    689c:	4984b03a 	or	r2,r9,r6
    68a0:	10007126 	beq	r2,zero,6a68 <__adddf3+0x82c>
    68a4:	4811883a 	mov	r8,r9
    68a8:	3023883a 	mov	r17,r6
    68ac:	3825883a 	mov	r18,r7
    68b0:	0401ffc4 	movi	r16,2047
    68b4:	003e8006 	br	62b8 <__ram_exceptions_end+0xfe004298>
    68b8:	4462b03a 	or	r17,r8,r17
    68bc:	8822c03a 	cmpne	r17,r17,zero
    68c0:	0007883a 	mov	r3,zero
    68c4:	003f8b06 	br	66f4 <__ram_exceptions_end+0xfe0046d4>
    68c8:	0141ffc4 	movi	r5,2047
    68cc:	11403b26 	beq	r2,r5,69bc <__adddf3+0x780>
    68d0:	0109c83a 	sub	r4,zero,r4
    68d4:	42002034 	orhi	r8,r8,128
    68d8:	01400e04 	movi	r5,56
    68dc:	29006716 	blt	r5,r4,6a7c <__adddf3+0x840>
    68e0:	014007c4 	movi	r5,31
    68e4:	29007016 	blt	r5,r4,6aa8 <__adddf3+0x86c>
    68e8:	01400804 	movi	r5,32
    68ec:	290bc83a 	sub	r5,r5,r4
    68f0:	4154983a 	sll	r10,r8,r5
    68f4:	890ed83a 	srl	r7,r17,r4
    68f8:	894a983a 	sll	r5,r17,r5
    68fc:	4108d83a 	srl	r4,r8,r4
    6900:	51e2b03a 	or	r17,r10,r7
    6904:	280ac03a 	cmpne	r5,r5,zero
    6908:	8962b03a 	or	r17,r17,r5
    690c:	89a3883a 	add	r17,r17,r6
    6910:	2253883a 	add	r9,r4,r9
    6914:	898d803a 	cmpltu	r6,r17,r6
    6918:	3251883a 	add	r8,r6,r9
    691c:	1021883a 	mov	r16,r2
    6920:	003ee506 	br	64b8 <__ram_exceptions_end+0xfe004498>
    6924:	4984b03a 	or	r2,r9,r6
    6928:	103e6326 	beq	r2,zero,62b8 <__ram_exceptions_end+0xfe004298>
    692c:	8987c83a 	sub	r3,r17,r6
    6930:	88c9803a 	cmpltu	r4,r17,r3
    6934:	4245c83a 	sub	r2,r8,r9
    6938:	1105c83a 	sub	r2,r2,r4
    693c:	1100202c 	andhi	r4,r2,128
    6940:	203ebb26 	beq	r4,zero,6430 <__ram_exceptions_end+0xfe004410>
    6944:	3463c83a 	sub	r17,r6,r17
    6948:	4a07c83a 	sub	r3,r9,r8
    694c:	344d803a 	cmpltu	r6,r6,r17
    6950:	1991c83a 	sub	r8,r3,r6
    6954:	3825883a 	mov	r18,r7
    6958:	003e5706 	br	62b8 <__ram_exceptions_end+0xfe004298>
    695c:	4984b03a 	or	r2,r9,r6
    6960:	10002e26 	beq	r2,zero,6a1c <__adddf3+0x7e0>
    6964:	4004d0fa 	srli	r2,r8,3
    6968:	8822d0fa 	srli	r17,r17,3
    696c:	4010977a 	slli	r8,r8,29
    6970:	10c0022c 	andhi	r3,r2,8
    6974:	4462b03a 	or	r17,r8,r17
    6978:	18000826 	beq	r3,zero,699c <__adddf3+0x760>
    697c:	4808d0fa 	srli	r4,r9,3
    6980:	20c0022c 	andhi	r3,r4,8
    6984:	1800051e 	bne	r3,zero,699c <__adddf3+0x760>
    6988:	300cd0fa 	srli	r6,r6,3
    698c:	4806977a 	slli	r3,r9,29
    6990:	2005883a 	mov	r2,r4
    6994:	3825883a 	mov	r18,r7
    6998:	19a2b03a 	or	r17,r3,r6
    699c:	8810d77a 	srli	r8,r17,29
    69a0:	100490fa 	slli	r2,r2,3
    69a4:	882290fa 	slli	r17,r17,3
    69a8:	0401ffc4 	movi	r16,2047
    69ac:	4090b03a 	or	r8,r8,r2
    69b0:	003e4106 	br	62b8 <__ram_exceptions_end+0xfe004298>
    69b4:	0141ffc4 	movi	r5,2047
    69b8:	117fc71e 	bne	r2,r5,68d8 <__ram_exceptions_end+0xfe0048b8>
    69bc:	4811883a 	mov	r8,r9
    69c0:	3023883a 	mov	r17,r6
    69c4:	1021883a 	mov	r16,r2
    69c8:	003e3b06 	br	62b8 <__ram_exceptions_end+0xfe004298>
    69cc:	10002f26 	beq	r2,zero,6a8c <__adddf3+0x850>
    69d0:	4984b03a 	or	r2,r9,r6
    69d4:	10001126 	beq	r2,zero,6a1c <__adddf3+0x7e0>
    69d8:	4004d0fa 	srli	r2,r8,3
    69dc:	8822d0fa 	srli	r17,r17,3
    69e0:	4010977a 	slli	r8,r8,29
    69e4:	10c0022c 	andhi	r3,r2,8
    69e8:	4462b03a 	or	r17,r8,r17
    69ec:	183feb26 	beq	r3,zero,699c <__ram_exceptions_end+0xfe00497c>
    69f0:	4808d0fa 	srli	r4,r9,3
    69f4:	20c0022c 	andhi	r3,r4,8
    69f8:	183fe81e 	bne	r3,zero,699c <__ram_exceptions_end+0xfe00497c>
    69fc:	300cd0fa 	srli	r6,r6,3
    6a00:	4806977a 	slli	r3,r9,29
    6a04:	2005883a 	mov	r2,r4
    6a08:	19a2b03a 	or	r17,r3,r6
    6a0c:	003fe306 	br	699c <__ram_exceptions_end+0xfe00497c>
    6a10:	0011883a 	mov	r8,zero
    6a14:	0005883a 	mov	r2,zero
    6a18:	003e3f06 	br	6318 <__ram_exceptions_end+0xfe0042f8>
    6a1c:	0401ffc4 	movi	r16,2047
    6a20:	003e2506 	br	62b8 <__ram_exceptions_end+0xfe004298>
    6a24:	0013883a 	mov	r9,zero
    6a28:	003f8406 	br	683c <__ram_exceptions_end+0xfe00481c>
    6a2c:	0005883a 	mov	r2,zero
    6a30:	0007883a 	mov	r3,zero
    6a34:	003e8906 	br	645c <__ram_exceptions_end+0xfe00443c>
    6a38:	197ff804 	addi	r5,r3,-32
    6a3c:	01000804 	movi	r4,32
    6a40:	414ad83a 	srl	r5,r8,r5
    6a44:	19002426 	beq	r3,r4,6ad8 <__adddf3+0x89c>
    6a48:	01001004 	movi	r4,64
    6a4c:	20c7c83a 	sub	r3,r4,r3
    6a50:	40c6983a 	sll	r3,r8,r3
    6a54:	1c46b03a 	or	r3,r3,r17
    6a58:	1806c03a 	cmpne	r3,r3,zero
    6a5c:	28e2b03a 	or	r17,r5,r3
    6a60:	0007883a 	mov	r3,zero
    6a64:	003f2306 	br	66f4 <__ram_exceptions_end+0xfe0046d4>
    6a68:	0007883a 	mov	r3,zero
    6a6c:	5811883a 	mov	r8,r11
    6a70:	00bfffc4 	movi	r2,-1
    6a74:	0401ffc4 	movi	r16,2047
    6a78:	003e7806 	br	645c <__ram_exceptions_end+0xfe00443c>
    6a7c:	4462b03a 	or	r17,r8,r17
    6a80:	8822c03a 	cmpne	r17,r17,zero
    6a84:	0009883a 	mov	r4,zero
    6a88:	003fa006 	br	690c <__ram_exceptions_end+0xfe0048ec>
    6a8c:	4811883a 	mov	r8,r9
    6a90:	3023883a 	mov	r17,r6
    6a94:	0401ffc4 	movi	r16,2047
    6a98:	003e0706 	br	62b8 <__ram_exceptions_end+0xfe004298>
    6a9c:	4811883a 	mov	r8,r9
    6aa0:	3023883a 	mov	r17,r6
    6aa4:	003e0406 	br	62b8 <__ram_exceptions_end+0xfe004298>
    6aa8:	21fff804 	addi	r7,r4,-32
    6aac:	01400804 	movi	r5,32
    6ab0:	41ced83a 	srl	r7,r8,r7
    6ab4:	21400a26 	beq	r4,r5,6ae0 <__adddf3+0x8a4>
    6ab8:	01401004 	movi	r5,64
    6abc:	2909c83a 	sub	r4,r5,r4
    6ac0:	4108983a 	sll	r4,r8,r4
    6ac4:	2448b03a 	or	r4,r4,r17
    6ac8:	2008c03a 	cmpne	r4,r4,zero
    6acc:	3922b03a 	or	r17,r7,r4
    6ad0:	0009883a 	mov	r4,zero
    6ad4:	003f8d06 	br	690c <__ram_exceptions_end+0xfe0048ec>
    6ad8:	0007883a 	mov	r3,zero
    6adc:	003fdd06 	br	6a54 <__ram_exceptions_end+0xfe004a34>
    6ae0:	0009883a 	mov	r4,zero
    6ae4:	003ff706 	br	6ac4 <__ram_exceptions_end+0xfe004aa4>

00006ae8 <__divdf3>:
    6ae8:	defff004 	addi	sp,sp,-64
    6aec:	dc800815 	stw	r18,32(sp)
    6af0:	2824d53a 	srli	r18,r5,20
    6af4:	dd800c15 	stw	r22,48(sp)
    6af8:	282cd7fa 	srli	r22,r5,31
    6afc:	dc000615 	stw	r16,24(sp)
    6b00:	04000434 	movhi	r16,16
    6b04:	843fffc4 	addi	r16,r16,-1
    6b08:	dfc00f15 	stw	ra,60(sp)
    6b0c:	df000e15 	stw	fp,56(sp)
    6b10:	ddc00d15 	stw	r23,52(sp)
    6b14:	dd400b15 	stw	r21,44(sp)
    6b18:	dd000a15 	stw	r20,40(sp)
    6b1c:	dcc00915 	stw	r19,36(sp)
    6b20:	dc400715 	stw	r17,28(sp)
    6b24:	9481ffcc 	andi	r18,r18,2047
    6b28:	2c20703a 	and	r16,r5,r16
    6b2c:	b2003fcc 	andi	r8,r22,255
    6b30:	90006126 	beq	r18,zero,6cb8 <__divdf3+0x1d0>
    6b34:	0081ffc4 	movi	r2,2047
    6b38:	202b883a 	mov	r21,r4
    6b3c:	90803726 	beq	r18,r2,6c1c <__divdf3+0x134>
    6b40:	80800434 	orhi	r2,r16,16
    6b44:	100490fa 	slli	r2,r2,3
    6b48:	2020d77a 	srli	r16,r4,29
    6b4c:	202a90fa 	slli	r21,r4,3
    6b50:	94bf0044 	addi	r18,r18,-1023
    6b54:	80a0b03a 	or	r16,r16,r2
    6b58:	0013883a 	mov	r9,zero
    6b5c:	000b883a 	mov	r5,zero
    6b60:	3806d53a 	srli	r3,r7,20
    6b64:	382ed7fa 	srli	r23,r7,31
    6b68:	04400434 	movhi	r17,16
    6b6c:	8c7fffc4 	addi	r17,r17,-1
    6b70:	18c1ffcc 	andi	r3,r3,2047
    6b74:	3029883a 	mov	r20,r6
    6b78:	3c62703a 	and	r17,r7,r17
    6b7c:	bf003fcc 	andi	fp,r23,255
    6b80:	18006e26 	beq	r3,zero,6d3c <__divdf3+0x254>
    6b84:	0081ffc4 	movi	r2,2047
    6b88:	18806626 	beq	r3,r2,6d24 <__divdf3+0x23c>
    6b8c:	88800434 	orhi	r2,r17,16
    6b90:	100490fa 	slli	r2,r2,3
    6b94:	3022d77a 	srli	r17,r6,29
    6b98:	302890fa 	slli	r20,r6,3
    6b9c:	18ff0044 	addi	r3,r3,-1023
    6ba0:	88a2b03a 	or	r17,r17,r2
    6ba4:	000f883a 	mov	r7,zero
    6ba8:	b5e6f03a 	xor	r19,r22,r23
    6bac:	3a4cb03a 	or	r6,r7,r9
    6bb0:	008003c4 	movi	r2,15
    6bb4:	9809883a 	mov	r4,r19
    6bb8:	90c7c83a 	sub	r3,r18,r3
    6bbc:	9cc03fcc 	andi	r19,r19,255
    6bc0:	11809636 	bltu	r2,r6,6e1c <__divdf3+0x334>
    6bc4:	300c90ba 	slli	r6,r6,2
    6bc8:	00800034 	movhi	r2,0
    6bcc:	109af704 	addi	r2,r2,27612
    6bd0:	308d883a 	add	r6,r6,r2
    6bd4:	30800017 	ldw	r2,0(r6)
    6bd8:	1000683a 	jmp	r2
    6bdc:	00006e1c 	xori	zero,zero,440
    6be0:	00006c54 	movui	zero,433
    6be4:	00006e0c 	andi	zero,zero,440
    6be8:	00006c48 	cmpgei	zero,zero,433
    6bec:	00006e0c 	andi	zero,zero,440
    6bf0:	00006de0 	cmpeqi	zero,zero,439
    6bf4:	00006e0c 	andi	zero,zero,440
    6bf8:	00006c48 	cmpgei	zero,zero,433
    6bfc:	00006c54 	movui	zero,433
    6c00:	00006c54 	movui	zero,433
    6c04:	00006de0 	cmpeqi	zero,zero,439
    6c08:	00006c48 	cmpgei	zero,zero,433
    6c0c:	00006c38 	rdprs	zero,zero,432
    6c10:	00006c38 	rdprs	zero,zero,432
    6c14:	00006c38 	rdprs	zero,zero,432
    6c18:	000071a4 	muli	zero,zero,454
    6c1c:	2404b03a 	or	r2,r4,r16
    6c20:	10006c1e 	bne	r2,zero,6dd4 <__divdf3+0x2ec>
    6c24:	02400204 	movi	r9,8
    6c28:	0021883a 	mov	r16,zero
    6c2c:	002b883a 	mov	r21,zero
    6c30:	01400084 	movi	r5,2
    6c34:	003fca06 	br	6b60 <__ram_exceptions_end+0xfe004b40>
    6c38:	8023883a 	mov	r17,r16
    6c3c:	a829883a 	mov	r20,r21
    6c40:	4039883a 	mov	fp,r8
    6c44:	280f883a 	mov	r7,r5
    6c48:	00800084 	movi	r2,2
    6c4c:	3881601e 	bne	r7,r2,71d0 <__divdf3+0x6e8>
    6c50:	e027883a 	mov	r19,fp
    6c54:	9900004c 	andi	r4,r19,1
    6c58:	0081ffc4 	movi	r2,2047
    6c5c:	0021883a 	mov	r16,zero
    6c60:	002b883a 	mov	r21,zero
    6c64:	1004953a 	slli	r2,r2,20
    6c68:	20c03fcc 	andi	r3,r4,255
    6c6c:	01400434 	movhi	r5,16
    6c70:	297fffc4 	addi	r5,r5,-1
    6c74:	180697fa 	slli	r3,r3,31
    6c78:	8160703a 	and	r16,r16,r5
    6c7c:	80a0b03a 	or	r16,r16,r2
    6c80:	80c6b03a 	or	r3,r16,r3
    6c84:	a805883a 	mov	r2,r21
    6c88:	dfc00f17 	ldw	ra,60(sp)
    6c8c:	df000e17 	ldw	fp,56(sp)
    6c90:	ddc00d17 	ldw	r23,52(sp)
    6c94:	dd800c17 	ldw	r22,48(sp)
    6c98:	dd400b17 	ldw	r21,44(sp)
    6c9c:	dd000a17 	ldw	r20,40(sp)
    6ca0:	dcc00917 	ldw	r19,36(sp)
    6ca4:	dc800817 	ldw	r18,32(sp)
    6ca8:	dc400717 	ldw	r17,28(sp)
    6cac:	dc000617 	ldw	r16,24(sp)
    6cb0:	dec01004 	addi	sp,sp,64
    6cb4:	f800283a 	ret
    6cb8:	2404b03a 	or	r2,r4,r16
    6cbc:	2023883a 	mov	r17,r4
    6cc0:	10003f26 	beq	r2,zero,6dc0 <__divdf3+0x2d8>
    6cc4:	80015e26 	beq	r16,zero,7240 <__divdf3+0x758>
    6cc8:	8009883a 	mov	r4,r16
    6ccc:	d9800215 	stw	r6,8(sp)
    6cd0:	d9c00515 	stw	r7,20(sp)
    6cd4:	da000415 	stw	r8,16(sp)
    6cd8:	0008d340 	call	8d34 <__clzsi2>
    6cdc:	d9800217 	ldw	r6,8(sp)
    6ce0:	d9c00517 	ldw	r7,20(sp)
    6ce4:	da000417 	ldw	r8,16(sp)
    6ce8:	113ffd44 	addi	r4,r2,-11
    6cec:	00c00704 	movi	r3,28
    6cf0:	19014f16 	blt	r3,r4,7230 <__divdf3+0x748>
    6cf4:	00c00744 	movi	r3,29
    6cf8:	157ffe04 	addi	r21,r2,-8
    6cfc:	1907c83a 	sub	r3,r3,r4
    6d00:	8560983a 	sll	r16,r16,r21
    6d04:	88c6d83a 	srl	r3,r17,r3
    6d08:	8d6a983a 	sll	r21,r17,r21
    6d0c:	1c20b03a 	or	r16,r3,r16
    6d10:	1080fcc4 	addi	r2,r2,1011
    6d14:	00a5c83a 	sub	r18,zero,r2
    6d18:	0013883a 	mov	r9,zero
    6d1c:	000b883a 	mov	r5,zero
    6d20:	003f8f06 	br	6b60 <__ram_exceptions_end+0xfe004b40>
    6d24:	3444b03a 	or	r2,r6,r17
    6d28:	1000231e 	bne	r2,zero,6db8 <__divdf3+0x2d0>
    6d2c:	0023883a 	mov	r17,zero
    6d30:	0029883a 	mov	r20,zero
    6d34:	01c00084 	movi	r7,2
    6d38:	003f9b06 	br	6ba8 <__ram_exceptions_end+0xfe004b88>
    6d3c:	3444b03a 	or	r2,r6,r17
    6d40:	10001926 	beq	r2,zero,6da8 <__divdf3+0x2c0>
    6d44:	88014b26 	beq	r17,zero,7274 <__divdf3+0x78c>
    6d48:	8809883a 	mov	r4,r17
    6d4c:	d9400115 	stw	r5,4(sp)
    6d50:	d9800215 	stw	r6,8(sp)
    6d54:	da000415 	stw	r8,16(sp)
    6d58:	da400315 	stw	r9,12(sp)
    6d5c:	0008d340 	call	8d34 <__clzsi2>
    6d60:	d9400117 	ldw	r5,4(sp)
    6d64:	d9800217 	ldw	r6,8(sp)
    6d68:	da000417 	ldw	r8,16(sp)
    6d6c:	da400317 	ldw	r9,12(sp)
    6d70:	113ffd44 	addi	r4,r2,-11
    6d74:	00c00704 	movi	r3,28
    6d78:	19013a16 	blt	r3,r4,7264 <__divdf3+0x77c>
    6d7c:	00c00744 	movi	r3,29
    6d80:	153ffe04 	addi	r20,r2,-8
    6d84:	1907c83a 	sub	r3,r3,r4
    6d88:	8d22983a 	sll	r17,r17,r20
    6d8c:	30c6d83a 	srl	r3,r6,r3
    6d90:	3528983a 	sll	r20,r6,r20
    6d94:	1c62b03a 	or	r17,r3,r17
    6d98:	1080fcc4 	addi	r2,r2,1011
    6d9c:	0087c83a 	sub	r3,zero,r2
    6da0:	000f883a 	mov	r7,zero
    6da4:	003f8006 	br	6ba8 <__ram_exceptions_end+0xfe004b88>
    6da8:	0023883a 	mov	r17,zero
    6dac:	0029883a 	mov	r20,zero
    6db0:	01c00044 	movi	r7,1
    6db4:	003f7c06 	br	6ba8 <__ram_exceptions_end+0xfe004b88>
    6db8:	01c000c4 	movi	r7,3
    6dbc:	003f7a06 	br	6ba8 <__ram_exceptions_end+0xfe004b88>
    6dc0:	02400104 	movi	r9,4
    6dc4:	0021883a 	mov	r16,zero
    6dc8:	002b883a 	mov	r21,zero
    6dcc:	01400044 	movi	r5,1
    6dd0:	003f6306 	br	6b60 <__ram_exceptions_end+0xfe004b40>
    6dd4:	02400304 	movi	r9,12
    6dd8:	014000c4 	movi	r5,3
    6ddc:	003f6006 	br	6b60 <__ram_exceptions_end+0xfe004b40>
    6de0:	04000434 	movhi	r16,16
    6de4:	0009883a 	mov	r4,zero
    6de8:	843fffc4 	addi	r16,r16,-1
    6dec:	057fffc4 	movi	r21,-1
    6df0:	0081ffc4 	movi	r2,2047
    6df4:	003f9b06 	br	6c64 <__ram_exceptions_end+0xfe004c44>
    6df8:	00c00044 	movi	r3,1
    6dfc:	1887c83a 	sub	r3,r3,r2
    6e00:	01000e04 	movi	r4,56
    6e04:	20c1530e 	bge	r4,r3,7354 <__divdf3+0x86c>
    6e08:	9900004c 	andi	r4,r19,1
    6e0c:	0005883a 	mov	r2,zero
    6e10:	0021883a 	mov	r16,zero
    6e14:	002b883a 	mov	r21,zero
    6e18:	003f9206 	br	6c64 <__ram_exceptions_end+0xfe004c44>
    6e1c:	8c012e36 	bltu	r17,r16,72d8 <__divdf3+0x7f0>
    6e20:	84412c26 	beq	r16,r17,72d4 <__divdf3+0x7ec>
    6e24:	a82f883a 	mov	r23,r21
    6e28:	18ffffc4 	addi	r3,r3,-1
    6e2c:	002b883a 	mov	r21,zero
    6e30:	a004d63a 	srli	r2,r20,24
    6e34:	8822923a 	slli	r17,r17,8
    6e38:	a028923a 	slli	r20,r20,8
    6e3c:	8009883a 	mov	r4,r16
    6e40:	88acb03a 	or	r22,r17,r2
    6e44:	dd000015 	stw	r20,0(sp)
    6e48:	b028d43a 	srli	r20,r22,16
    6e4c:	d8c00215 	stw	r3,8(sp)
    6e50:	b4bfffcc 	andi	r18,r22,65535
    6e54:	a00b883a 	mov	r5,r20
    6e58:	0004abc0 	call	4abc <__udivsi3>
    6e5c:	100b883a 	mov	r5,r2
    6e60:	9009883a 	mov	r4,r18
    6e64:	1023883a 	mov	r17,r2
    6e68:	0004b780 	call	4b78 <__mulsi3>
    6e6c:	8009883a 	mov	r4,r16
    6e70:	a00b883a 	mov	r5,r20
    6e74:	1039883a 	mov	fp,r2
    6e78:	0004b200 	call	4b20 <__umodsi3>
    6e7c:	1004943a 	slli	r2,r2,16
    6e80:	b808d43a 	srli	r4,r23,16
    6e84:	d8c00217 	ldw	r3,8(sp)
    6e88:	2084b03a 	or	r2,r4,r2
    6e8c:	1700062e 	bgeu	r2,fp,6ea8 <__divdf3+0x3c0>
    6e90:	1585883a 	add	r2,r2,r22
    6e94:	893fffc4 	addi	r4,r17,-1
    6e98:	15811d36 	bltu	r2,r22,7310 <__divdf3+0x828>
    6e9c:	17011c2e 	bgeu	r2,fp,7310 <__divdf3+0x828>
    6ea0:	8c7fff84 	addi	r17,r17,-2
    6ea4:	1585883a 	add	r2,r2,r22
    6ea8:	1739c83a 	sub	fp,r2,fp
    6eac:	a00b883a 	mov	r5,r20
    6eb0:	e009883a 	mov	r4,fp
    6eb4:	d8c00215 	stw	r3,8(sp)
    6eb8:	0004abc0 	call	4abc <__udivsi3>
    6ebc:	100b883a 	mov	r5,r2
    6ec0:	9009883a 	mov	r4,r18
    6ec4:	1021883a 	mov	r16,r2
    6ec8:	0004b780 	call	4b78 <__mulsi3>
    6ecc:	a00b883a 	mov	r5,r20
    6ed0:	e009883a 	mov	r4,fp
    6ed4:	d8800415 	stw	r2,16(sp)
    6ed8:	0004b200 	call	4b20 <__umodsi3>
    6edc:	1004943a 	slli	r2,r2,16
    6ee0:	da000417 	ldw	r8,16(sp)
    6ee4:	bdffffcc 	andi	r23,r23,65535
    6ee8:	b884b03a 	or	r2,r23,r2
    6eec:	d8c00217 	ldw	r3,8(sp)
    6ef0:	1200062e 	bgeu	r2,r8,6f0c <__divdf3+0x424>
    6ef4:	1585883a 	add	r2,r2,r22
    6ef8:	813fffc4 	addi	r4,r16,-1
    6efc:	15810236 	bltu	r2,r22,7308 <__divdf3+0x820>
    6f00:	1201012e 	bgeu	r2,r8,7308 <__divdf3+0x820>
    6f04:	843fff84 	addi	r16,r16,-2
    6f08:	1585883a 	add	r2,r2,r22
    6f0c:	8822943a 	slli	r17,r17,16
    6f10:	d9800017 	ldw	r6,0(sp)
    6f14:	1211c83a 	sub	r8,r2,r8
    6f18:	8c22b03a 	or	r17,r17,r16
    6f1c:	373fffcc 	andi	fp,r6,65535
    6f20:	8abfffcc 	andi	r10,r17,65535
    6f24:	8820d43a 	srli	r16,r17,16
    6f28:	5009883a 	mov	r4,r10
    6f2c:	e00b883a 	mov	r5,fp
    6f30:	302ed43a 	srli	r23,r6,16
    6f34:	d8c00215 	stw	r3,8(sp)
    6f38:	da000415 	stw	r8,16(sp)
    6f3c:	da800115 	stw	r10,4(sp)
    6f40:	0004b780 	call	4b78 <__mulsi3>
    6f44:	800b883a 	mov	r5,r16
    6f48:	e009883a 	mov	r4,fp
    6f4c:	d8800515 	stw	r2,20(sp)
    6f50:	0004b780 	call	4b78 <__mulsi3>
    6f54:	8009883a 	mov	r4,r16
    6f58:	b80b883a 	mov	r5,r23
    6f5c:	d8800315 	stw	r2,12(sp)
    6f60:	0004b780 	call	4b78 <__mulsi3>
    6f64:	da800117 	ldw	r10,4(sp)
    6f68:	b80b883a 	mov	r5,r23
    6f6c:	1021883a 	mov	r16,r2
    6f70:	5009883a 	mov	r4,r10
    6f74:	0004b780 	call	4b78 <__mulsi3>
    6f78:	d9c00517 	ldw	r7,20(sp)
    6f7c:	da400317 	ldw	r9,12(sp)
    6f80:	d8c00217 	ldw	r3,8(sp)
    6f84:	3808d43a 	srli	r4,r7,16
    6f88:	1245883a 	add	r2,r2,r9
    6f8c:	da000417 	ldw	r8,16(sp)
    6f90:	2085883a 	add	r2,r4,r2
    6f94:	1240022e 	bgeu	r2,r9,6fa0 <__divdf3+0x4b8>
    6f98:	01000074 	movhi	r4,1
    6f9c:	8121883a 	add	r16,r16,r4
    6fa0:	1008d43a 	srli	r4,r2,16
    6fa4:	1004943a 	slli	r2,r2,16
    6fa8:	39ffffcc 	andi	r7,r7,65535
    6fac:	2409883a 	add	r4,r4,r16
    6fb0:	11c5883a 	add	r2,r2,r7
    6fb4:	4100bb36 	bltu	r8,r4,72a4 <__divdf3+0x7bc>
    6fb8:	4100d726 	beq	r8,r4,7318 <__divdf3+0x830>
    6fbc:	4109c83a 	sub	r4,r8,r4
    6fc0:	a8a1c83a 	sub	r16,r21,r2
    6fc4:	ac2b803a 	cmpltu	r21,r21,r16
    6fc8:	256bc83a 	sub	r21,r4,r21
    6fcc:	b540d926 	beq	r22,r21,7334 <__divdf3+0x84c>
    6fd0:	a00b883a 	mov	r5,r20
    6fd4:	a809883a 	mov	r4,r21
    6fd8:	d8c00215 	stw	r3,8(sp)
    6fdc:	0004abc0 	call	4abc <__udivsi3>
    6fe0:	100b883a 	mov	r5,r2
    6fe4:	9009883a 	mov	r4,r18
    6fe8:	d8800515 	stw	r2,20(sp)
    6fec:	0004b780 	call	4b78 <__mulsi3>
    6ff0:	a809883a 	mov	r4,r21
    6ff4:	a00b883a 	mov	r5,r20
    6ff8:	d8800415 	stw	r2,16(sp)
    6ffc:	0004b200 	call	4b20 <__umodsi3>
    7000:	1004943a 	slli	r2,r2,16
    7004:	8008d43a 	srli	r4,r16,16
    7008:	da000417 	ldw	r8,16(sp)
    700c:	d8c00217 	ldw	r3,8(sp)
    7010:	2084b03a 	or	r2,r4,r2
    7014:	d9c00517 	ldw	r7,20(sp)
    7018:	1200062e 	bgeu	r2,r8,7034 <__divdf3+0x54c>
    701c:	1585883a 	add	r2,r2,r22
    7020:	393fffc4 	addi	r4,r7,-1
    7024:	1580c536 	bltu	r2,r22,733c <__divdf3+0x854>
    7028:	1200c42e 	bgeu	r2,r8,733c <__divdf3+0x854>
    702c:	39ffff84 	addi	r7,r7,-2
    7030:	1585883a 	add	r2,r2,r22
    7034:	122bc83a 	sub	r21,r2,r8
    7038:	a00b883a 	mov	r5,r20
    703c:	a809883a 	mov	r4,r21
    7040:	d8c00215 	stw	r3,8(sp)
    7044:	d9c00515 	stw	r7,20(sp)
    7048:	0004abc0 	call	4abc <__udivsi3>
    704c:	9009883a 	mov	r4,r18
    7050:	100b883a 	mov	r5,r2
    7054:	d8800415 	stw	r2,16(sp)
    7058:	0004b780 	call	4b78 <__mulsi3>
    705c:	a809883a 	mov	r4,r21
    7060:	a00b883a 	mov	r5,r20
    7064:	1025883a 	mov	r18,r2
    7068:	0004b200 	call	4b20 <__umodsi3>
    706c:	1004943a 	slli	r2,r2,16
    7070:	813fffcc 	andi	r4,r16,65535
    7074:	d8c00217 	ldw	r3,8(sp)
    7078:	20a0b03a 	or	r16,r4,r2
    707c:	d9c00517 	ldw	r7,20(sp)
    7080:	da000417 	ldw	r8,16(sp)
    7084:	8480062e 	bgeu	r16,r18,70a0 <__divdf3+0x5b8>
    7088:	85a1883a 	add	r16,r16,r22
    708c:	40bfffc4 	addi	r2,r8,-1
    7090:	8580ac36 	bltu	r16,r22,7344 <__divdf3+0x85c>
    7094:	8480ab2e 	bgeu	r16,r18,7344 <__divdf3+0x85c>
    7098:	423fff84 	addi	r8,r8,-2
    709c:	85a1883a 	add	r16,r16,r22
    70a0:	3804943a 	slli	r2,r7,16
    70a4:	84a1c83a 	sub	r16,r16,r18
    70a8:	e009883a 	mov	r4,fp
    70ac:	1228b03a 	or	r20,r2,r8
    70b0:	a1ffffcc 	andi	r7,r20,65535
    70b4:	a024d43a 	srli	r18,r20,16
    70b8:	380b883a 	mov	r5,r7
    70bc:	d8c00215 	stw	r3,8(sp)
    70c0:	d9c00515 	stw	r7,20(sp)
    70c4:	0004b780 	call	4b78 <__mulsi3>
    70c8:	900b883a 	mov	r5,r18
    70cc:	e009883a 	mov	r4,fp
    70d0:	102b883a 	mov	r21,r2
    70d4:	0004b780 	call	4b78 <__mulsi3>
    70d8:	900b883a 	mov	r5,r18
    70dc:	b809883a 	mov	r4,r23
    70e0:	1039883a 	mov	fp,r2
    70e4:	0004b780 	call	4b78 <__mulsi3>
    70e8:	d9c00517 	ldw	r7,20(sp)
    70ec:	b80b883a 	mov	r5,r23
    70f0:	1025883a 	mov	r18,r2
    70f4:	3809883a 	mov	r4,r7
    70f8:	0004b780 	call	4b78 <__mulsi3>
    70fc:	a808d43a 	srli	r4,r21,16
    7100:	1705883a 	add	r2,r2,fp
    7104:	d8c00217 	ldw	r3,8(sp)
    7108:	2085883a 	add	r2,r4,r2
    710c:	1700022e 	bgeu	r2,fp,7118 <__divdf3+0x630>
    7110:	01000074 	movhi	r4,1
    7114:	9125883a 	add	r18,r18,r4
    7118:	1008d43a 	srli	r4,r2,16
    711c:	1004943a 	slli	r2,r2,16
    7120:	ad7fffcc 	andi	r21,r21,65535
    7124:	2489883a 	add	r4,r4,r18
    7128:	1545883a 	add	r2,r2,r21
    712c:	81003836 	bltu	r16,r4,7210 <__divdf3+0x728>
    7130:	81003626 	beq	r16,r4,720c <__divdf3+0x724>
    7134:	a5000054 	ori	r20,r20,1
    7138:	1880ffc4 	addi	r2,r3,1023
    713c:	00bf2e0e 	bge	zero,r2,6df8 <__ram_exceptions_end+0xfe004dd8>
    7140:	a10001cc 	andi	r4,r20,7
    7144:	20000726 	beq	r4,zero,7164 <__divdf3+0x67c>
    7148:	a10003cc 	andi	r4,r20,15
    714c:	01400104 	movi	r5,4
    7150:	21400426 	beq	r4,r5,7164 <__divdf3+0x67c>
    7154:	a149883a 	add	r4,r20,r5
    7158:	2529803a 	cmpltu	r20,r4,r20
    715c:	8d23883a 	add	r17,r17,r20
    7160:	2029883a 	mov	r20,r4
    7164:	8900402c 	andhi	r4,r17,256
    7168:	20000426 	beq	r4,zero,717c <__divdf3+0x694>
    716c:	18810004 	addi	r2,r3,1024
    7170:	00ffc034 	movhi	r3,65280
    7174:	18ffffc4 	addi	r3,r3,-1
    7178:	88e2703a 	and	r17,r17,r3
    717c:	00c1ff84 	movi	r3,2046
    7180:	18beb416 	blt	r3,r2,6c54 <__ram_exceptions_end+0xfe004c34>
    7184:	a028d0fa 	srli	r20,r20,3
    7188:	882a977a 	slli	r21,r17,29
    718c:	8820927a 	slli	r16,r17,9
    7190:	1081ffcc 	andi	r2,r2,2047
    7194:	ad2ab03a 	or	r21,r21,r20
    7198:	8020d33a 	srli	r16,r16,12
    719c:	9900004c 	andi	r4,r19,1
    71a0:	003eb006 	br	6c64 <__ram_exceptions_end+0xfe004c44>
    71a4:	8080022c 	andhi	r2,r16,8
    71a8:	10001226 	beq	r2,zero,71f4 <__divdf3+0x70c>
    71ac:	8880022c 	andhi	r2,r17,8
    71b0:	1000101e 	bne	r2,zero,71f4 <__divdf3+0x70c>
    71b4:	00800434 	movhi	r2,16
    71b8:	8c000234 	orhi	r16,r17,8
    71bc:	10bfffc4 	addi	r2,r2,-1
    71c0:	b809883a 	mov	r4,r23
    71c4:	80a0703a 	and	r16,r16,r2
    71c8:	a02b883a 	mov	r21,r20
    71cc:	003f0806 	br	6df0 <__ram_exceptions_end+0xfe004dd0>
    71d0:	008000c4 	movi	r2,3
    71d4:	3880b126 	beq	r7,r2,749c <__divdf3+0x9b4>
    71d8:	00800044 	movi	r2,1
    71dc:	38805b1e 	bne	r7,r2,734c <__divdf3+0x864>
    71e0:	e009883a 	mov	r4,fp
    71e4:	0005883a 	mov	r2,zero
    71e8:	0021883a 	mov	r16,zero
    71ec:	002b883a 	mov	r21,zero
    71f0:	003e9c06 	br	6c64 <__ram_exceptions_end+0xfe004c44>
    71f4:	00800434 	movhi	r2,16
    71f8:	84000234 	orhi	r16,r16,8
    71fc:	10bfffc4 	addi	r2,r2,-1
    7200:	b009883a 	mov	r4,r22
    7204:	80a0703a 	and	r16,r16,r2
    7208:	003ef906 	br	6df0 <__ram_exceptions_end+0xfe004dd0>
    720c:	103fca26 	beq	r2,zero,7138 <__ram_exceptions_end+0xfe005118>
    7210:	b421883a 	add	r16,r22,r16
    7214:	a17fffc4 	addi	r5,r20,-1
    7218:	8580422e 	bgeu	r16,r22,7324 <__divdf3+0x83c>
    721c:	2829883a 	mov	r20,r5
    7220:	813fc41e 	bne	r16,r4,7134 <__ram_exceptions_end+0xfe005114>
    7224:	d9800017 	ldw	r6,0(sp)
    7228:	30bfc21e 	bne	r6,r2,7134 <__ram_exceptions_end+0xfe005114>
    722c:	003fc206 	br	7138 <__ram_exceptions_end+0xfe005118>
    7230:	143ff604 	addi	r16,r2,-40
    7234:	8c20983a 	sll	r16,r17,r16
    7238:	002b883a 	mov	r21,zero
    723c:	003eb406 	br	6d10 <__ram_exceptions_end+0xfe004cf0>
    7240:	d9800215 	stw	r6,8(sp)
    7244:	d9c00515 	stw	r7,20(sp)
    7248:	da000415 	stw	r8,16(sp)
    724c:	0008d340 	call	8d34 <__clzsi2>
    7250:	10800804 	addi	r2,r2,32
    7254:	da000417 	ldw	r8,16(sp)
    7258:	d9c00517 	ldw	r7,20(sp)
    725c:	d9800217 	ldw	r6,8(sp)
    7260:	003ea106 	br	6ce8 <__ram_exceptions_end+0xfe004cc8>
    7264:	147ff604 	addi	r17,r2,-40
    7268:	3462983a 	sll	r17,r6,r17
    726c:	0029883a 	mov	r20,zero
    7270:	003ec906 	br	6d98 <__ram_exceptions_end+0xfe004d78>
    7274:	3009883a 	mov	r4,r6
    7278:	d9400115 	stw	r5,4(sp)
    727c:	d9800215 	stw	r6,8(sp)
    7280:	da000415 	stw	r8,16(sp)
    7284:	da400315 	stw	r9,12(sp)
    7288:	0008d340 	call	8d34 <__clzsi2>
    728c:	10800804 	addi	r2,r2,32
    7290:	da400317 	ldw	r9,12(sp)
    7294:	da000417 	ldw	r8,16(sp)
    7298:	d9800217 	ldw	r6,8(sp)
    729c:	d9400117 	ldw	r5,4(sp)
    72a0:	003eb306 	br	6d70 <__ram_exceptions_end+0xfe004d50>
    72a4:	d9800017 	ldw	r6,0(sp)
    72a8:	a9ab883a 	add	r21,r21,r6
    72ac:	a98b803a 	cmpltu	r5,r21,r6
    72b0:	2d8b883a 	add	r5,r5,r22
    72b4:	2a11883a 	add	r8,r5,r8
    72b8:	897fffc4 	addi	r5,r17,-1
    72bc:	b2000c2e 	bgeu	r22,r8,72f0 <__divdf3+0x808>
    72c0:	41003f36 	bltu	r8,r4,73c0 <__divdf3+0x8d8>
    72c4:	22006c26 	beq	r4,r8,7478 <__divdf3+0x990>
    72c8:	4109c83a 	sub	r4,r8,r4
    72cc:	2823883a 	mov	r17,r5
    72d0:	003f3b06 	br	6fc0 <__ram_exceptions_end+0xfe004fa0>
    72d4:	ad3ed336 	bltu	r21,r20,6e24 <__ram_exceptions_end+0xfe004e04>
    72d8:	a804d07a 	srli	r2,r21,1
    72dc:	802e97fa 	slli	r23,r16,31
    72e0:	a82a97fa 	slli	r21,r21,31
    72e4:	8020d07a 	srli	r16,r16,1
    72e8:	b8aeb03a 	or	r23,r23,r2
    72ec:	003ed006 	br	6e30 <__ram_exceptions_end+0xfe004e10>
    72f0:	b23ff51e 	bne	r22,r8,72c8 <__ram_exceptions_end+0xfe0052a8>
    72f4:	d9800017 	ldw	r6,0(sp)
    72f8:	a9bff12e 	bgeu	r21,r6,72c0 <__ram_exceptions_end+0xfe0052a0>
    72fc:	b109c83a 	sub	r4,r22,r4
    7300:	2823883a 	mov	r17,r5
    7304:	003f2e06 	br	6fc0 <__ram_exceptions_end+0xfe004fa0>
    7308:	2021883a 	mov	r16,r4
    730c:	003eff06 	br	6f0c <__ram_exceptions_end+0xfe004eec>
    7310:	2023883a 	mov	r17,r4
    7314:	003ee406 	br	6ea8 <__ram_exceptions_end+0xfe004e88>
    7318:	a8bfe236 	bltu	r21,r2,72a4 <__ram_exceptions_end+0xfe005284>
    731c:	0009883a 	mov	r4,zero
    7320:	003f2706 	br	6fc0 <__ram_exceptions_end+0xfe004fa0>
    7324:	81002d36 	bltu	r16,r4,73dc <__divdf3+0x8f4>
    7328:	24005626 	beq	r4,r16,7484 <__divdf3+0x99c>
    732c:	2829883a 	mov	r20,r5
    7330:	003f8006 	br	7134 <__ram_exceptions_end+0xfe005114>
    7334:	053fffc4 	movi	r20,-1
    7338:	003f7f06 	br	7138 <__ram_exceptions_end+0xfe005118>
    733c:	200f883a 	mov	r7,r4
    7340:	003f3c06 	br	7034 <__ram_exceptions_end+0xfe005014>
    7344:	1011883a 	mov	r8,r2
    7348:	003f5506 	br	70a0 <__ram_exceptions_end+0xfe005080>
    734c:	e027883a 	mov	r19,fp
    7350:	003f7906 	br	7138 <__ram_exceptions_end+0xfe005118>
    7354:	010007c4 	movi	r4,31
    7358:	20c02816 	blt	r4,r3,73fc <__divdf3+0x914>
    735c:	00800804 	movi	r2,32
    7360:	10c5c83a 	sub	r2,r2,r3
    7364:	888a983a 	sll	r5,r17,r2
    7368:	a0c8d83a 	srl	r4,r20,r3
    736c:	a084983a 	sll	r2,r20,r2
    7370:	88e2d83a 	srl	r17,r17,r3
    7374:	2906b03a 	or	r3,r5,r4
    7378:	1004c03a 	cmpne	r2,r2,zero
    737c:	1886b03a 	or	r3,r3,r2
    7380:	188001cc 	andi	r2,r3,7
    7384:	10000726 	beq	r2,zero,73a4 <__divdf3+0x8bc>
    7388:	188003cc 	andi	r2,r3,15
    738c:	01000104 	movi	r4,4
    7390:	11000426 	beq	r2,r4,73a4 <__divdf3+0x8bc>
    7394:	1805883a 	mov	r2,r3
    7398:	10c00104 	addi	r3,r2,4
    739c:	1885803a 	cmpltu	r2,r3,r2
    73a0:	88a3883a 	add	r17,r17,r2
    73a4:	8880202c 	andhi	r2,r17,128
    73a8:	10002926 	beq	r2,zero,7450 <__divdf3+0x968>
    73ac:	9900004c 	andi	r4,r19,1
    73b0:	00800044 	movi	r2,1
    73b4:	0021883a 	mov	r16,zero
    73b8:	002b883a 	mov	r21,zero
    73bc:	003e2906 	br	6c64 <__ram_exceptions_end+0xfe004c44>
    73c0:	d9800017 	ldw	r6,0(sp)
    73c4:	8c7fff84 	addi	r17,r17,-2
    73c8:	a9ab883a 	add	r21,r21,r6
    73cc:	a98b803a 	cmpltu	r5,r21,r6
    73d0:	2d8b883a 	add	r5,r5,r22
    73d4:	2a11883a 	add	r8,r5,r8
    73d8:	003ef806 	br	6fbc <__ram_exceptions_end+0xfe004f9c>
    73dc:	d9800017 	ldw	r6,0(sp)
    73e0:	318f883a 	add	r7,r6,r6
    73e4:	398b803a 	cmpltu	r5,r7,r6
    73e8:	2d8d883a 	add	r6,r5,r22
    73ec:	81a1883a 	add	r16,r16,r6
    73f0:	a17fff84 	addi	r5,r20,-2
    73f4:	d9c00015 	stw	r7,0(sp)
    73f8:	003f8806 	br	721c <__ram_exceptions_end+0xfe0051fc>
    73fc:	013ff844 	movi	r4,-31
    7400:	2085c83a 	sub	r2,r4,r2
    7404:	8888d83a 	srl	r4,r17,r2
    7408:	00800804 	movi	r2,32
    740c:	18802126 	beq	r3,r2,7494 <__divdf3+0x9ac>
    7410:	04001004 	movi	r16,64
    7414:	80c7c83a 	sub	r3,r16,r3
    7418:	88e0983a 	sll	r16,r17,r3
    741c:	8504b03a 	or	r2,r16,r20
    7420:	1004c03a 	cmpne	r2,r2,zero
    7424:	2084b03a 	or	r2,r4,r2
    7428:	144001cc 	andi	r17,r2,7
    742c:	88000d1e 	bne	r17,zero,7464 <__divdf3+0x97c>
    7430:	0021883a 	mov	r16,zero
    7434:	102ad0fa 	srli	r21,r2,3
    7438:	9900004c 	andi	r4,r19,1
    743c:	0005883a 	mov	r2,zero
    7440:	ac6ab03a 	or	r21,r21,r17
    7444:	003e0706 	br	6c64 <__ram_exceptions_end+0xfe004c44>
    7448:	1007883a 	mov	r3,r2
    744c:	0023883a 	mov	r17,zero
    7450:	8820927a 	slli	r16,r17,9
    7454:	1805883a 	mov	r2,r3
    7458:	8822977a 	slli	r17,r17,29
    745c:	8020d33a 	srli	r16,r16,12
    7460:	003ff406 	br	7434 <__ram_exceptions_end+0xfe005414>
    7464:	10c003cc 	andi	r3,r2,15
    7468:	01000104 	movi	r4,4
    746c:	193ff626 	beq	r3,r4,7448 <__ram_exceptions_end+0xfe005428>
    7470:	0023883a 	mov	r17,zero
    7474:	003fc806 	br	7398 <__ram_exceptions_end+0xfe005378>
    7478:	a8bfd136 	bltu	r21,r2,73c0 <__ram_exceptions_end+0xfe0053a0>
    747c:	2823883a 	mov	r17,r5
    7480:	003fa606 	br	731c <__ram_exceptions_end+0xfe0052fc>
    7484:	d9800017 	ldw	r6,0(sp)
    7488:	30bfd436 	bltu	r6,r2,73dc <__ram_exceptions_end+0xfe0053bc>
    748c:	2829883a 	mov	r20,r5
    7490:	003f6406 	br	7224 <__ram_exceptions_end+0xfe005204>
    7494:	0021883a 	mov	r16,zero
    7498:	003fe006 	br	741c <__ram_exceptions_end+0xfe0053fc>
    749c:	00800434 	movhi	r2,16
    74a0:	8c000234 	orhi	r16,r17,8
    74a4:	10bfffc4 	addi	r2,r2,-1
    74a8:	e009883a 	mov	r4,fp
    74ac:	80a0703a 	and	r16,r16,r2
    74b0:	a02b883a 	mov	r21,r20
    74b4:	003e4e06 	br	6df0 <__ram_exceptions_end+0xfe004dd0>

000074b8 <__eqdf2>:
    74b8:	2804d53a 	srli	r2,r5,20
    74bc:	3806d53a 	srli	r3,r7,20
    74c0:	02000434 	movhi	r8,16
    74c4:	423fffc4 	addi	r8,r8,-1
    74c8:	1081ffcc 	andi	r2,r2,2047
    74cc:	0281ffc4 	movi	r10,2047
    74d0:	2a12703a 	and	r9,r5,r8
    74d4:	18c1ffcc 	andi	r3,r3,2047
    74d8:	3a10703a 	and	r8,r7,r8
    74dc:	280ad7fa 	srli	r5,r5,31
    74e0:	380ed7fa 	srli	r7,r7,31
    74e4:	12801026 	beq	r2,r10,7528 <__eqdf2+0x70>
    74e8:	0281ffc4 	movi	r10,2047
    74ec:	1a800a26 	beq	r3,r10,7518 <__eqdf2+0x60>
    74f0:	10c00226 	beq	r2,r3,74fc <__eqdf2+0x44>
    74f4:	00800044 	movi	r2,1
    74f8:	f800283a 	ret
    74fc:	4a3ffd1e 	bne	r9,r8,74f4 <__ram_exceptions_end+0xfe0054d4>
    7500:	21bffc1e 	bne	r4,r6,74f4 <__ram_exceptions_end+0xfe0054d4>
    7504:	29c00c26 	beq	r5,r7,7538 <__eqdf2+0x80>
    7508:	103ffa1e 	bne	r2,zero,74f4 <__ram_exceptions_end+0xfe0054d4>
    750c:	2244b03a 	or	r2,r4,r9
    7510:	1004c03a 	cmpne	r2,r2,zero
    7514:	f800283a 	ret
    7518:	3214b03a 	or	r10,r6,r8
    751c:	503ff426 	beq	r10,zero,74f0 <__ram_exceptions_end+0xfe0054d0>
    7520:	00800044 	movi	r2,1
    7524:	f800283a 	ret
    7528:	2254b03a 	or	r10,r4,r9
    752c:	503fee26 	beq	r10,zero,74e8 <__ram_exceptions_end+0xfe0054c8>
    7530:	00800044 	movi	r2,1
    7534:	f800283a 	ret
    7538:	0005883a 	mov	r2,zero
    753c:	f800283a 	ret

00007540 <__gedf2>:
    7540:	2804d53a 	srli	r2,r5,20
    7544:	3806d53a 	srli	r3,r7,20
    7548:	02000434 	movhi	r8,16
    754c:	423fffc4 	addi	r8,r8,-1
    7550:	1081ffcc 	andi	r2,r2,2047
    7554:	0241ffc4 	movi	r9,2047
    7558:	2a14703a 	and	r10,r5,r8
    755c:	18c1ffcc 	andi	r3,r3,2047
    7560:	3a10703a 	and	r8,r7,r8
    7564:	280ad7fa 	srli	r5,r5,31
    7568:	380ed7fa 	srli	r7,r7,31
    756c:	12401d26 	beq	r2,r9,75e4 <__gedf2+0xa4>
    7570:	0241ffc4 	movi	r9,2047
    7574:	1a401226 	beq	r3,r9,75c0 <__gedf2+0x80>
    7578:	1000081e 	bne	r2,zero,759c <__gedf2+0x5c>
    757c:	2296b03a 	or	r11,r4,r10
    7580:	5813003a 	cmpeq	r9,r11,zero
    7584:	1800091e 	bne	r3,zero,75ac <__gedf2+0x6c>
    7588:	3218b03a 	or	r12,r6,r8
    758c:	6000071e 	bne	r12,zero,75ac <__gedf2+0x6c>
    7590:	0005883a 	mov	r2,zero
    7594:	5800101e 	bne	r11,zero,75d8 <__gedf2+0x98>
    7598:	f800283a 	ret
    759c:	18000c1e 	bne	r3,zero,75d0 <__gedf2+0x90>
    75a0:	3212b03a 	or	r9,r6,r8
    75a4:	48000c26 	beq	r9,zero,75d8 <__gedf2+0x98>
    75a8:	0013883a 	mov	r9,zero
    75ac:	39c03fcc 	andi	r7,r7,255
    75b0:	48000826 	beq	r9,zero,75d4 <__gedf2+0x94>
    75b4:	38000926 	beq	r7,zero,75dc <__gedf2+0x9c>
    75b8:	00800044 	movi	r2,1
    75bc:	f800283a 	ret
    75c0:	3212b03a 	or	r9,r6,r8
    75c4:	483fec26 	beq	r9,zero,7578 <__ram_exceptions_end+0xfe005558>
    75c8:	00bfff84 	movi	r2,-2
    75cc:	f800283a 	ret
    75d0:	39c03fcc 	andi	r7,r7,255
    75d4:	29c00626 	beq	r5,r7,75f0 <__gedf2+0xb0>
    75d8:	283ff726 	beq	r5,zero,75b8 <__ram_exceptions_end+0xfe005598>
    75dc:	00bfffc4 	movi	r2,-1
    75e0:	f800283a 	ret
    75e4:	2292b03a 	or	r9,r4,r10
    75e8:	483fe126 	beq	r9,zero,7570 <__ram_exceptions_end+0xfe005550>
    75ec:	003ff606 	br	75c8 <__ram_exceptions_end+0xfe0055a8>
    75f0:	18bff916 	blt	r3,r2,75d8 <__ram_exceptions_end+0xfe0055b8>
    75f4:	10c00316 	blt	r2,r3,7604 <__gedf2+0xc4>
    75f8:	42bff736 	bltu	r8,r10,75d8 <__ram_exceptions_end+0xfe0055b8>
    75fc:	52000326 	beq	r10,r8,760c <__gedf2+0xcc>
    7600:	5200042e 	bgeu	r10,r8,7614 <__gedf2+0xd4>
    7604:	283fec1e 	bne	r5,zero,75b8 <__ram_exceptions_end+0xfe005598>
    7608:	003ff406 	br	75dc <__ram_exceptions_end+0xfe0055bc>
    760c:	313ff236 	bltu	r6,r4,75d8 <__ram_exceptions_end+0xfe0055b8>
    7610:	21bffc36 	bltu	r4,r6,7604 <__ram_exceptions_end+0xfe0055e4>
    7614:	0005883a 	mov	r2,zero
    7618:	f800283a 	ret

0000761c <__ledf2>:
    761c:	2804d53a 	srli	r2,r5,20
    7620:	3810d53a 	srli	r8,r7,20
    7624:	00c00434 	movhi	r3,16
    7628:	18ffffc4 	addi	r3,r3,-1
    762c:	1081ffcc 	andi	r2,r2,2047
    7630:	0241ffc4 	movi	r9,2047
    7634:	28d4703a 	and	r10,r5,r3
    7638:	4201ffcc 	andi	r8,r8,2047
    763c:	38c6703a 	and	r3,r7,r3
    7640:	280ad7fa 	srli	r5,r5,31
    7644:	380ed7fa 	srli	r7,r7,31
    7648:	12401f26 	beq	r2,r9,76c8 <__ledf2+0xac>
    764c:	0241ffc4 	movi	r9,2047
    7650:	42401426 	beq	r8,r9,76a4 <__ledf2+0x88>
    7654:	1000091e 	bne	r2,zero,767c <__ledf2+0x60>
    7658:	2296b03a 	or	r11,r4,r10
    765c:	5813003a 	cmpeq	r9,r11,zero
    7660:	29403fcc 	andi	r5,r5,255
    7664:	40000a1e 	bne	r8,zero,7690 <__ledf2+0x74>
    7668:	30d8b03a 	or	r12,r6,r3
    766c:	6000081e 	bne	r12,zero,7690 <__ledf2+0x74>
    7670:	0005883a 	mov	r2,zero
    7674:	5800111e 	bne	r11,zero,76bc <__ledf2+0xa0>
    7678:	f800283a 	ret
    767c:	29403fcc 	andi	r5,r5,255
    7680:	40000c1e 	bne	r8,zero,76b4 <__ledf2+0x98>
    7684:	30d2b03a 	or	r9,r6,r3
    7688:	48000c26 	beq	r9,zero,76bc <__ledf2+0xa0>
    768c:	0013883a 	mov	r9,zero
    7690:	39c03fcc 	andi	r7,r7,255
    7694:	48000826 	beq	r9,zero,76b8 <__ledf2+0x9c>
    7698:	38001126 	beq	r7,zero,76e0 <__ledf2+0xc4>
    769c:	00800044 	movi	r2,1
    76a0:	f800283a 	ret
    76a4:	30d2b03a 	or	r9,r6,r3
    76a8:	483fea26 	beq	r9,zero,7654 <__ram_exceptions_end+0xfe005634>
    76ac:	00800084 	movi	r2,2
    76b0:	f800283a 	ret
    76b4:	39c03fcc 	andi	r7,r7,255
    76b8:	39400726 	beq	r7,r5,76d8 <__ledf2+0xbc>
    76bc:	2800081e 	bne	r5,zero,76e0 <__ledf2+0xc4>
    76c0:	00800044 	movi	r2,1
    76c4:	f800283a 	ret
    76c8:	2292b03a 	or	r9,r4,r10
    76cc:	483fdf26 	beq	r9,zero,764c <__ram_exceptions_end+0xfe00562c>
    76d0:	00800084 	movi	r2,2
    76d4:	f800283a 	ret
    76d8:	4080030e 	bge	r8,r2,76e8 <__ledf2+0xcc>
    76dc:	383fef26 	beq	r7,zero,769c <__ram_exceptions_end+0xfe00567c>
    76e0:	00bfffc4 	movi	r2,-1
    76e4:	f800283a 	ret
    76e8:	123feb16 	blt	r2,r8,7698 <__ram_exceptions_end+0xfe005678>
    76ec:	1abff336 	bltu	r3,r10,76bc <__ram_exceptions_end+0xfe00569c>
    76f0:	50c00326 	beq	r10,r3,7700 <__ledf2+0xe4>
    76f4:	50c0042e 	bgeu	r10,r3,7708 <__ledf2+0xec>
    76f8:	283fe81e 	bne	r5,zero,769c <__ram_exceptions_end+0xfe00567c>
    76fc:	003ff806 	br	76e0 <__ram_exceptions_end+0xfe0056c0>
    7700:	313fee36 	bltu	r6,r4,76bc <__ram_exceptions_end+0xfe00569c>
    7704:	21bffc36 	bltu	r4,r6,76f8 <__ram_exceptions_end+0xfe0056d8>
    7708:	0005883a 	mov	r2,zero
    770c:	f800283a 	ret

00007710 <__muldf3>:
    7710:	deffee04 	addi	sp,sp,-72
    7714:	dd000c15 	stw	r20,48(sp)
    7718:	2828d53a 	srli	r20,r5,20
    771c:	ddc00f15 	stw	r23,60(sp)
    7720:	282ed7fa 	srli	r23,r5,31
    7724:	dc000815 	stw	r16,32(sp)
    7728:	04000434 	movhi	r16,16
    772c:	dcc00b15 	stw	r19,44(sp)
    7730:	843fffc4 	addi	r16,r16,-1
    7734:	dfc01115 	stw	ra,68(sp)
    7738:	df001015 	stw	fp,64(sp)
    773c:	dd800e15 	stw	r22,56(sp)
    7740:	dd400d15 	stw	r21,52(sp)
    7744:	dc800a15 	stw	r18,40(sp)
    7748:	dc400915 	stw	r17,36(sp)
    774c:	a501ffcc 	andi	r20,r20,2047
    7750:	2c20703a 	and	r16,r5,r16
    7754:	b827883a 	mov	r19,r23
    7758:	ba403fcc 	andi	r9,r23,255
    775c:	a0006026 	beq	r20,zero,78e0 <__muldf3+0x1d0>
    7760:	0081ffc4 	movi	r2,2047
    7764:	202d883a 	mov	r22,r4
    7768:	a0803626 	beq	r20,r2,7844 <__muldf3+0x134>
    776c:	84000434 	orhi	r16,r16,16
    7770:	200ad77a 	srli	r5,r4,29
    7774:	800490fa 	slli	r2,r16,3
    7778:	202c90fa 	slli	r22,r4,3
    777c:	a53f0044 	addi	r20,r20,-1023
    7780:	28a0b03a 	or	r16,r5,r2
    7784:	002b883a 	mov	r21,zero
    7788:	000b883a 	mov	r5,zero
    778c:	3804d53a 	srli	r2,r7,20
    7790:	3838d7fa 	srli	fp,r7,31
    7794:	04400434 	movhi	r17,16
    7798:	8c7fffc4 	addi	r17,r17,-1
    779c:	1081ffcc 	andi	r2,r2,2047
    77a0:	3025883a 	mov	r18,r6
    77a4:	3c62703a 	and	r17,r7,r17
    77a8:	e2803fcc 	andi	r10,fp,255
    77ac:	10006d26 	beq	r2,zero,7964 <__muldf3+0x254>
    77b0:	00c1ffc4 	movi	r3,2047
    77b4:	10c06526 	beq	r2,r3,794c <__muldf3+0x23c>
    77b8:	8c400434 	orhi	r17,r17,16
    77bc:	300ed77a 	srli	r7,r6,29
    77c0:	880690fa 	slli	r3,r17,3
    77c4:	302490fa 	slli	r18,r6,3
    77c8:	10bf0044 	addi	r2,r2,-1023
    77cc:	38e2b03a 	or	r17,r7,r3
    77d0:	000f883a 	mov	r7,zero
    77d4:	a087883a 	add	r3,r20,r2
    77d8:	010003c4 	movi	r4,15
    77dc:	3d44b03a 	or	r2,r7,r21
    77e0:	e5ccf03a 	xor	r6,fp,r23
    77e4:	1a000044 	addi	r8,r3,1
    77e8:	20809b36 	bltu	r4,r2,7a58 <__muldf3+0x348>
    77ec:	100490ba 	slli	r2,r2,2
    77f0:	01000034 	movhi	r4,0
    77f4:	211e0104 	addi	r4,r4,30724
    77f8:	1105883a 	add	r2,r2,r4
    77fc:	10800017 	ldw	r2,0(r2)
    7800:	1000683a 	jmp	r2
    7804:	00007a58 	cmpnei	zero,zero,489
    7808:	00007864 	muli	zero,zero,481
    780c:	00007864 	muli	zero,zero,481
    7810:	00007860 	cmpeqi	zero,zero,481
    7814:	00007a34 	movhi	zero,488
    7818:	00007a34 	movhi	zero,488
    781c:	00007a1c 	xori	zero,zero,488
    7820:	00007860 	cmpeqi	zero,zero,481
    7824:	00007a34 	movhi	zero,488
    7828:	00007a1c 	xori	zero,zero,488
    782c:	00007a34 	movhi	zero,488
    7830:	00007860 	cmpeqi	zero,zero,481
    7834:	00007a44 	movi	zero,489
    7838:	00007a44 	movi	zero,489
    783c:	00007a44 	movi	zero,489
    7840:	00007da4 	muli	zero,zero,502
    7844:	2404b03a 	or	r2,r4,r16
    7848:	1000711e 	bne	r2,zero,7a10 <__muldf3+0x300>
    784c:	05400204 	movi	r21,8
    7850:	0021883a 	mov	r16,zero
    7854:	002d883a 	mov	r22,zero
    7858:	01400084 	movi	r5,2
    785c:	003fcb06 	br	778c <__ram_exceptions_end+0xfe00576c>
    7860:	500d883a 	mov	r6,r10
    7864:	00800084 	movi	r2,2
    7868:	38805926 	beq	r7,r2,79d0 <__muldf3+0x2c0>
    786c:	008000c4 	movi	r2,3
    7870:	3881bb26 	beq	r7,r2,7f60 <__muldf3+0x850>
    7874:	00800044 	movi	r2,1
    7878:	3881961e 	bne	r7,r2,7ed4 <__muldf3+0x7c4>
    787c:	3027883a 	mov	r19,r6
    7880:	0005883a 	mov	r2,zero
    7884:	0021883a 	mov	r16,zero
    7888:	002d883a 	mov	r22,zero
    788c:	1004953a 	slli	r2,r2,20
    7890:	98c03fcc 	andi	r3,r19,255
    7894:	04400434 	movhi	r17,16
    7898:	8c7fffc4 	addi	r17,r17,-1
    789c:	180697fa 	slli	r3,r3,31
    78a0:	8460703a 	and	r16,r16,r17
    78a4:	80a0b03a 	or	r16,r16,r2
    78a8:	80c6b03a 	or	r3,r16,r3
    78ac:	b005883a 	mov	r2,r22
    78b0:	dfc01117 	ldw	ra,68(sp)
    78b4:	df001017 	ldw	fp,64(sp)
    78b8:	ddc00f17 	ldw	r23,60(sp)
    78bc:	dd800e17 	ldw	r22,56(sp)
    78c0:	dd400d17 	ldw	r21,52(sp)
    78c4:	dd000c17 	ldw	r20,48(sp)
    78c8:	dcc00b17 	ldw	r19,44(sp)
    78cc:	dc800a17 	ldw	r18,40(sp)
    78d0:	dc400917 	ldw	r17,36(sp)
    78d4:	dc000817 	ldw	r16,32(sp)
    78d8:	dec01204 	addi	sp,sp,72
    78dc:	f800283a 	ret
    78e0:	2404b03a 	or	r2,r4,r16
    78e4:	202b883a 	mov	r21,r4
    78e8:	10004426 	beq	r2,zero,79fc <__muldf3+0x2ec>
    78ec:	80015126 	beq	r16,zero,7e34 <__muldf3+0x724>
    78f0:	8009883a 	mov	r4,r16
    78f4:	d9800715 	stw	r6,28(sp)
    78f8:	d9c00215 	stw	r7,8(sp)
    78fc:	da400415 	stw	r9,16(sp)
    7900:	0008d340 	call	8d34 <__clzsi2>
    7904:	d9800717 	ldw	r6,28(sp)
    7908:	d9c00217 	ldw	r7,8(sp)
    790c:	da400417 	ldw	r9,16(sp)
    7910:	113ffd44 	addi	r4,r2,-11
    7914:	00c00704 	movi	r3,28
    7918:	19014216 	blt	r3,r4,7e24 <__muldf3+0x714>
    791c:	00c00744 	movi	r3,29
    7920:	15bffe04 	addi	r22,r2,-8
    7924:	1907c83a 	sub	r3,r3,r4
    7928:	85a0983a 	sll	r16,r16,r22
    792c:	a8c6d83a 	srl	r3,r21,r3
    7930:	adac983a 	sll	r22,r21,r22
    7934:	1c20b03a 	or	r16,r3,r16
    7938:	1080fcc4 	addi	r2,r2,1011
    793c:	00a9c83a 	sub	r20,zero,r2
    7940:	002b883a 	mov	r21,zero
    7944:	000b883a 	mov	r5,zero
    7948:	003f9006 	br	778c <__ram_exceptions_end+0xfe00576c>
    794c:	3446b03a 	or	r3,r6,r17
    7950:	1800281e 	bne	r3,zero,79f4 <__muldf3+0x2e4>
    7954:	0023883a 	mov	r17,zero
    7958:	0025883a 	mov	r18,zero
    795c:	01c00084 	movi	r7,2
    7960:	003f9c06 	br	77d4 <__ram_exceptions_end+0xfe0057b4>
    7964:	3446b03a 	or	r3,r6,r17
    7968:	18001e26 	beq	r3,zero,79e4 <__muldf3+0x2d4>
    796c:	88012126 	beq	r17,zero,7df4 <__muldf3+0x6e4>
    7970:	8809883a 	mov	r4,r17
    7974:	d9400215 	stw	r5,8(sp)
    7978:	d9800715 	stw	r6,28(sp)
    797c:	da400415 	stw	r9,16(sp)
    7980:	da800315 	stw	r10,12(sp)
    7984:	0008d340 	call	8d34 <__clzsi2>
    7988:	d9400217 	ldw	r5,8(sp)
    798c:	d9800717 	ldw	r6,28(sp)
    7990:	da400417 	ldw	r9,16(sp)
    7994:	da800317 	ldw	r10,12(sp)
    7998:	113ffd44 	addi	r4,r2,-11
    799c:	00c00704 	movi	r3,28
    79a0:	19011016 	blt	r3,r4,7de4 <__muldf3+0x6d4>
    79a4:	00c00744 	movi	r3,29
    79a8:	14bffe04 	addi	r18,r2,-8
    79ac:	1907c83a 	sub	r3,r3,r4
    79b0:	8ca2983a 	sll	r17,r17,r18
    79b4:	30c6d83a 	srl	r3,r6,r3
    79b8:	34a4983a 	sll	r18,r6,r18
    79bc:	1c62b03a 	or	r17,r3,r17
    79c0:	1080fcc4 	addi	r2,r2,1011
    79c4:	0085c83a 	sub	r2,zero,r2
    79c8:	000f883a 	mov	r7,zero
    79cc:	003f8106 	br	77d4 <__ram_exceptions_end+0xfe0057b4>
    79d0:	3027883a 	mov	r19,r6
    79d4:	0081ffc4 	movi	r2,2047
    79d8:	0021883a 	mov	r16,zero
    79dc:	002d883a 	mov	r22,zero
    79e0:	003faa06 	br	788c <__ram_exceptions_end+0xfe00586c>
    79e4:	0023883a 	mov	r17,zero
    79e8:	0025883a 	mov	r18,zero
    79ec:	01c00044 	movi	r7,1
    79f0:	003f7806 	br	77d4 <__ram_exceptions_end+0xfe0057b4>
    79f4:	01c000c4 	movi	r7,3
    79f8:	003f7606 	br	77d4 <__ram_exceptions_end+0xfe0057b4>
    79fc:	05400104 	movi	r21,4
    7a00:	0021883a 	mov	r16,zero
    7a04:	002d883a 	mov	r22,zero
    7a08:	01400044 	movi	r5,1
    7a0c:	003f5f06 	br	778c <__ram_exceptions_end+0xfe00576c>
    7a10:	05400304 	movi	r21,12
    7a14:	014000c4 	movi	r5,3
    7a18:	003f5c06 	br	778c <__ram_exceptions_end+0xfe00576c>
    7a1c:	04000434 	movhi	r16,16
    7a20:	0027883a 	mov	r19,zero
    7a24:	843fffc4 	addi	r16,r16,-1
    7a28:	05bfffc4 	movi	r22,-1
    7a2c:	0081ffc4 	movi	r2,2047
    7a30:	003f9606 	br	788c <__ram_exceptions_end+0xfe00586c>
    7a34:	8023883a 	mov	r17,r16
    7a38:	b025883a 	mov	r18,r22
    7a3c:	280f883a 	mov	r7,r5
    7a40:	003f8806 	br	7864 <__ram_exceptions_end+0xfe005844>
    7a44:	8023883a 	mov	r17,r16
    7a48:	b025883a 	mov	r18,r22
    7a4c:	480d883a 	mov	r6,r9
    7a50:	280f883a 	mov	r7,r5
    7a54:	003f8306 	br	7864 <__ram_exceptions_end+0xfe005844>
    7a58:	b026d43a 	srli	r19,r22,16
    7a5c:	902ed43a 	srli	r23,r18,16
    7a60:	b5bfffcc 	andi	r22,r22,65535
    7a64:	94bfffcc 	andi	r18,r18,65535
    7a68:	b00b883a 	mov	r5,r22
    7a6c:	9009883a 	mov	r4,r18
    7a70:	d8c00515 	stw	r3,20(sp)
    7a74:	d9800715 	stw	r6,28(sp)
    7a78:	da000615 	stw	r8,24(sp)
    7a7c:	0004b780 	call	4b78 <__mulsi3>
    7a80:	980b883a 	mov	r5,r19
    7a84:	9009883a 	mov	r4,r18
    7a88:	1029883a 	mov	r20,r2
    7a8c:	0004b780 	call	4b78 <__mulsi3>
    7a90:	b80b883a 	mov	r5,r23
    7a94:	9809883a 	mov	r4,r19
    7a98:	102b883a 	mov	r21,r2
    7a9c:	0004b780 	call	4b78 <__mulsi3>
    7aa0:	b809883a 	mov	r4,r23
    7aa4:	b00b883a 	mov	r5,r22
    7aa8:	1039883a 	mov	fp,r2
    7aac:	0004b780 	call	4b78 <__mulsi3>
    7ab0:	a008d43a 	srli	r4,r20,16
    7ab4:	1545883a 	add	r2,r2,r21
    7ab8:	d8c00517 	ldw	r3,20(sp)
    7abc:	2085883a 	add	r2,r4,r2
    7ac0:	d9800717 	ldw	r6,28(sp)
    7ac4:	da000617 	ldw	r8,24(sp)
    7ac8:	1540022e 	bgeu	r2,r21,7ad4 <__muldf3+0x3c4>
    7acc:	01000074 	movhi	r4,1
    7ad0:	e139883a 	add	fp,fp,r4
    7ad4:	100e943a 	slli	r7,r2,16
    7ad8:	1004d43a 	srli	r2,r2,16
    7adc:	882ad43a 	srli	r21,r17,16
    7ae0:	a53fffcc 	andi	r20,r20,65535
    7ae4:	8c7fffcc 	andi	r17,r17,65535
    7ae8:	3d29883a 	add	r20,r7,r20
    7aec:	b00b883a 	mov	r5,r22
    7af0:	8809883a 	mov	r4,r17
    7af4:	d8c00515 	stw	r3,20(sp)
    7af8:	d9800715 	stw	r6,28(sp)
    7afc:	da000615 	stw	r8,24(sp)
    7b00:	dd000115 	stw	r20,4(sp)
    7b04:	d8800015 	stw	r2,0(sp)
    7b08:	0004b780 	call	4b78 <__mulsi3>
    7b0c:	980b883a 	mov	r5,r19
    7b10:	8809883a 	mov	r4,r17
    7b14:	d8800215 	stw	r2,8(sp)
    7b18:	0004b780 	call	4b78 <__mulsi3>
    7b1c:	9809883a 	mov	r4,r19
    7b20:	a80b883a 	mov	r5,r21
    7b24:	1029883a 	mov	r20,r2
    7b28:	0004b780 	call	4b78 <__mulsi3>
    7b2c:	b00b883a 	mov	r5,r22
    7b30:	a809883a 	mov	r4,r21
    7b34:	d8800415 	stw	r2,16(sp)
    7b38:	0004b780 	call	4b78 <__mulsi3>
    7b3c:	d9c00217 	ldw	r7,8(sp)
    7b40:	1505883a 	add	r2,r2,r20
    7b44:	d8c00517 	ldw	r3,20(sp)
    7b48:	3826d43a 	srli	r19,r7,16
    7b4c:	d9800717 	ldw	r6,28(sp)
    7b50:	da000617 	ldw	r8,24(sp)
    7b54:	9885883a 	add	r2,r19,r2
    7b58:	da400417 	ldw	r9,16(sp)
    7b5c:	1500022e 	bgeu	r2,r20,7b68 <__muldf3+0x458>
    7b60:	01000074 	movhi	r4,1
    7b64:	4913883a 	add	r9,r9,r4
    7b68:	1028d43a 	srli	r20,r2,16
    7b6c:	1004943a 	slli	r2,r2,16
    7b70:	802cd43a 	srli	r22,r16,16
    7b74:	843fffcc 	andi	r16,r16,65535
    7b78:	3cffffcc 	andi	r19,r7,65535
    7b7c:	9009883a 	mov	r4,r18
    7b80:	800b883a 	mov	r5,r16
    7b84:	a269883a 	add	r20,r20,r9
    7b88:	d8c00515 	stw	r3,20(sp)
    7b8c:	d9800715 	stw	r6,28(sp)
    7b90:	da000615 	stw	r8,24(sp)
    7b94:	14e7883a 	add	r19,r2,r19
    7b98:	0004b780 	call	4b78 <__mulsi3>
    7b9c:	9009883a 	mov	r4,r18
    7ba0:	b00b883a 	mov	r5,r22
    7ba4:	d8800315 	stw	r2,12(sp)
    7ba8:	0004b780 	call	4b78 <__mulsi3>
    7bac:	b809883a 	mov	r4,r23
    7bb0:	b00b883a 	mov	r5,r22
    7bb4:	d8800215 	stw	r2,8(sp)
    7bb8:	0004b780 	call	4b78 <__mulsi3>
    7bbc:	b80b883a 	mov	r5,r23
    7bc0:	8009883a 	mov	r4,r16
    7bc4:	d8800415 	stw	r2,16(sp)
    7bc8:	0004b780 	call	4b78 <__mulsi3>
    7bcc:	da800317 	ldw	r10,12(sp)
    7bd0:	d9c00217 	ldw	r7,8(sp)
    7bd4:	d9000017 	ldw	r4,0(sp)
    7bd8:	502ed43a 	srli	r23,r10,16
    7bdc:	11c5883a 	add	r2,r2,r7
    7be0:	24e5883a 	add	r18,r4,r19
    7be4:	b885883a 	add	r2,r23,r2
    7be8:	d8c00517 	ldw	r3,20(sp)
    7bec:	d9800717 	ldw	r6,28(sp)
    7bf0:	da000617 	ldw	r8,24(sp)
    7bf4:	da400417 	ldw	r9,16(sp)
    7bf8:	11c0022e 	bgeu	r2,r7,7c04 <__muldf3+0x4f4>
    7bfc:	01000074 	movhi	r4,1
    7c00:	4913883a 	add	r9,r9,r4
    7c04:	100ed43a 	srli	r7,r2,16
    7c08:	1004943a 	slli	r2,r2,16
    7c0c:	55ffffcc 	andi	r23,r10,65535
    7c10:	3a53883a 	add	r9,r7,r9
    7c14:	8809883a 	mov	r4,r17
    7c18:	800b883a 	mov	r5,r16
    7c1c:	d8c00515 	stw	r3,20(sp)
    7c20:	d9800715 	stw	r6,28(sp)
    7c24:	da000615 	stw	r8,24(sp)
    7c28:	da400415 	stw	r9,16(sp)
    7c2c:	15ef883a 	add	r23,r2,r23
    7c30:	0004b780 	call	4b78 <__mulsi3>
    7c34:	8809883a 	mov	r4,r17
    7c38:	b00b883a 	mov	r5,r22
    7c3c:	d8800215 	stw	r2,8(sp)
    7c40:	0004b780 	call	4b78 <__mulsi3>
    7c44:	b00b883a 	mov	r5,r22
    7c48:	a809883a 	mov	r4,r21
    7c4c:	d8800315 	stw	r2,12(sp)
    7c50:	0004b780 	call	4b78 <__mulsi3>
    7c54:	8009883a 	mov	r4,r16
    7c58:	a80b883a 	mov	r5,r21
    7c5c:	1023883a 	mov	r17,r2
    7c60:	0004b780 	call	4b78 <__mulsi3>
    7c64:	d9c00217 	ldw	r7,8(sp)
    7c68:	da800317 	ldw	r10,12(sp)
    7c6c:	d8c00517 	ldw	r3,20(sp)
    7c70:	3808d43a 	srli	r4,r7,16
    7c74:	1285883a 	add	r2,r2,r10
    7c78:	d9800717 	ldw	r6,28(sp)
    7c7c:	2085883a 	add	r2,r4,r2
    7c80:	da000617 	ldw	r8,24(sp)
    7c84:	da400417 	ldw	r9,16(sp)
    7c88:	1280022e 	bgeu	r2,r10,7c94 <__muldf3+0x584>
    7c8c:	01000074 	movhi	r4,1
    7c90:	8923883a 	add	r17,r17,r4
    7c94:	1008943a 	slli	r4,r2,16
    7c98:	39ffffcc 	andi	r7,r7,65535
    7c9c:	e4b9883a 	add	fp,fp,r18
    7ca0:	21cf883a 	add	r7,r4,r7
    7ca4:	e4e7803a 	cmpltu	r19,fp,r19
    7ca8:	3d0f883a 	add	r7,r7,r20
    7cac:	bf39883a 	add	fp,r23,fp
    7cb0:	99c9883a 	add	r4,r19,r7
    7cb4:	e5ef803a 	cmpltu	r23,fp,r23
    7cb8:	490b883a 	add	r5,r9,r4
    7cbc:	1004d43a 	srli	r2,r2,16
    7cc0:	b965883a 	add	r18,r23,r5
    7cc4:	24c9803a 	cmpltu	r4,r4,r19
    7cc8:	3d29803a 	cmpltu	r20,r7,r20
    7ccc:	a128b03a 	or	r20,r20,r4
    7cd0:	95ef803a 	cmpltu	r23,r18,r23
    7cd4:	2a53803a 	cmpltu	r9,r5,r9
    7cd8:	a0a9883a 	add	r20,r20,r2
    7cdc:	4deeb03a 	or	r23,r9,r23
    7ce0:	a5ef883a 	add	r23,r20,r23
    7ce4:	bc63883a 	add	r17,r23,r17
    7ce8:	e004927a 	slli	r2,fp,9
    7cec:	d9000117 	ldw	r4,4(sp)
    7cf0:	882e927a 	slli	r23,r17,9
    7cf4:	9022d5fa 	srli	r17,r18,23
    7cf8:	e038d5fa 	srli	fp,fp,23
    7cfc:	1104b03a 	or	r2,r2,r4
    7d00:	9024927a 	slli	r18,r18,9
    7d04:	1004c03a 	cmpne	r2,r2,zero
    7d08:	bc62b03a 	or	r17,r23,r17
    7d0c:	1738b03a 	or	fp,r2,fp
    7d10:	8880402c 	andhi	r2,r17,256
    7d14:	e4a4b03a 	or	r18,fp,r18
    7d18:	10000726 	beq	r2,zero,7d38 <__muldf3+0x628>
    7d1c:	9006d07a 	srli	r3,r18,1
    7d20:	880497fa 	slli	r2,r17,31
    7d24:	9480004c 	andi	r18,r18,1
    7d28:	8822d07a 	srli	r17,r17,1
    7d2c:	1ca4b03a 	or	r18,r3,r18
    7d30:	14a4b03a 	or	r18,r2,r18
    7d34:	4007883a 	mov	r3,r8
    7d38:	1880ffc4 	addi	r2,r3,1023
    7d3c:	0080460e 	bge	zero,r2,7e58 <__muldf3+0x748>
    7d40:	910001cc 	andi	r4,r18,7
    7d44:	20000726 	beq	r4,zero,7d64 <__muldf3+0x654>
    7d48:	910003cc 	andi	r4,r18,15
    7d4c:	01400104 	movi	r5,4
    7d50:	21400426 	beq	r4,r5,7d64 <__muldf3+0x654>
    7d54:	9149883a 	add	r4,r18,r5
    7d58:	24a5803a 	cmpltu	r18,r4,r18
    7d5c:	8ca3883a 	add	r17,r17,r18
    7d60:	2025883a 	mov	r18,r4
    7d64:	8900402c 	andhi	r4,r17,256
    7d68:	20000426 	beq	r4,zero,7d7c <__muldf3+0x66c>
    7d6c:	18810004 	addi	r2,r3,1024
    7d70:	00ffc034 	movhi	r3,65280
    7d74:	18ffffc4 	addi	r3,r3,-1
    7d78:	88e2703a 	and	r17,r17,r3
    7d7c:	00c1ff84 	movi	r3,2046
    7d80:	18bf1316 	blt	r3,r2,79d0 <__ram_exceptions_end+0xfe0059b0>
    7d84:	882c977a 	slli	r22,r17,29
    7d88:	9024d0fa 	srli	r18,r18,3
    7d8c:	8822927a 	slli	r17,r17,9
    7d90:	1081ffcc 	andi	r2,r2,2047
    7d94:	b4acb03a 	or	r22,r22,r18
    7d98:	8820d33a 	srli	r16,r17,12
    7d9c:	3027883a 	mov	r19,r6
    7da0:	003eba06 	br	788c <__ram_exceptions_end+0xfe00586c>
    7da4:	8080022c 	andhi	r2,r16,8
    7da8:	10000926 	beq	r2,zero,7dd0 <__muldf3+0x6c0>
    7dac:	8880022c 	andhi	r2,r17,8
    7db0:	1000071e 	bne	r2,zero,7dd0 <__muldf3+0x6c0>
    7db4:	00800434 	movhi	r2,16
    7db8:	8c000234 	orhi	r16,r17,8
    7dbc:	10bfffc4 	addi	r2,r2,-1
    7dc0:	e027883a 	mov	r19,fp
    7dc4:	80a0703a 	and	r16,r16,r2
    7dc8:	902d883a 	mov	r22,r18
    7dcc:	003f1706 	br	7a2c <__ram_exceptions_end+0xfe005a0c>
    7dd0:	00800434 	movhi	r2,16
    7dd4:	84000234 	orhi	r16,r16,8
    7dd8:	10bfffc4 	addi	r2,r2,-1
    7ddc:	80a0703a 	and	r16,r16,r2
    7de0:	003f1206 	br	7a2c <__ram_exceptions_end+0xfe005a0c>
    7de4:	147ff604 	addi	r17,r2,-40
    7de8:	3462983a 	sll	r17,r6,r17
    7dec:	0025883a 	mov	r18,zero
    7df0:	003ef306 	br	79c0 <__ram_exceptions_end+0xfe0059a0>
    7df4:	3009883a 	mov	r4,r6
    7df8:	d9400215 	stw	r5,8(sp)
    7dfc:	d9800715 	stw	r6,28(sp)
    7e00:	da400415 	stw	r9,16(sp)
    7e04:	da800315 	stw	r10,12(sp)
    7e08:	0008d340 	call	8d34 <__clzsi2>
    7e0c:	10800804 	addi	r2,r2,32
    7e10:	da800317 	ldw	r10,12(sp)
    7e14:	da400417 	ldw	r9,16(sp)
    7e18:	d9800717 	ldw	r6,28(sp)
    7e1c:	d9400217 	ldw	r5,8(sp)
    7e20:	003edd06 	br	7998 <__ram_exceptions_end+0xfe005978>
    7e24:	143ff604 	addi	r16,r2,-40
    7e28:	ac20983a 	sll	r16,r21,r16
    7e2c:	002d883a 	mov	r22,zero
    7e30:	003ec106 	br	7938 <__ram_exceptions_end+0xfe005918>
    7e34:	d9800715 	stw	r6,28(sp)
    7e38:	d9c00215 	stw	r7,8(sp)
    7e3c:	da400415 	stw	r9,16(sp)
    7e40:	0008d340 	call	8d34 <__clzsi2>
    7e44:	10800804 	addi	r2,r2,32
    7e48:	da400417 	ldw	r9,16(sp)
    7e4c:	d9c00217 	ldw	r7,8(sp)
    7e50:	d9800717 	ldw	r6,28(sp)
    7e54:	003eae06 	br	7910 <__ram_exceptions_end+0xfe0058f0>
    7e58:	00c00044 	movi	r3,1
    7e5c:	1887c83a 	sub	r3,r3,r2
    7e60:	01000e04 	movi	r4,56
    7e64:	20fe8516 	blt	r4,r3,787c <__ram_exceptions_end+0xfe00585c>
    7e68:	010007c4 	movi	r4,31
    7e6c:	20c01b16 	blt	r4,r3,7edc <__muldf3+0x7cc>
    7e70:	00800804 	movi	r2,32
    7e74:	10c5c83a 	sub	r2,r2,r3
    7e78:	888a983a 	sll	r5,r17,r2
    7e7c:	90c8d83a 	srl	r4,r18,r3
    7e80:	9084983a 	sll	r2,r18,r2
    7e84:	88e2d83a 	srl	r17,r17,r3
    7e88:	2906b03a 	or	r3,r5,r4
    7e8c:	1004c03a 	cmpne	r2,r2,zero
    7e90:	1886b03a 	or	r3,r3,r2
    7e94:	188001cc 	andi	r2,r3,7
    7e98:	10000726 	beq	r2,zero,7eb8 <__muldf3+0x7a8>
    7e9c:	188003cc 	andi	r2,r3,15
    7ea0:	01000104 	movi	r4,4
    7ea4:	11000426 	beq	r2,r4,7eb8 <__muldf3+0x7a8>
    7ea8:	1805883a 	mov	r2,r3
    7eac:	10c00104 	addi	r3,r2,4
    7eb0:	1885803a 	cmpltu	r2,r3,r2
    7eb4:	88a3883a 	add	r17,r17,r2
    7eb8:	8880202c 	andhi	r2,r17,128
    7ebc:	10001c26 	beq	r2,zero,7f30 <__muldf3+0x820>
    7ec0:	3027883a 	mov	r19,r6
    7ec4:	00800044 	movi	r2,1
    7ec8:	0021883a 	mov	r16,zero
    7ecc:	002d883a 	mov	r22,zero
    7ed0:	003e6e06 	br	788c <__ram_exceptions_end+0xfe00586c>
    7ed4:	4007883a 	mov	r3,r8
    7ed8:	003f9706 	br	7d38 <__ram_exceptions_end+0xfe005d18>
    7edc:	017ff844 	movi	r5,-31
    7ee0:	2885c83a 	sub	r2,r5,r2
    7ee4:	888ad83a 	srl	r5,r17,r2
    7ee8:	00800804 	movi	r2,32
    7eec:	18801a26 	beq	r3,r2,7f58 <__muldf3+0x848>
    7ef0:	01001004 	movi	r4,64
    7ef4:	20c7c83a 	sub	r3,r4,r3
    7ef8:	88e2983a 	sll	r17,r17,r3
    7efc:	8ca4b03a 	or	r18,r17,r18
    7f00:	9004c03a 	cmpne	r2,r18,zero
    7f04:	2884b03a 	or	r2,r5,r2
    7f08:	144001cc 	andi	r17,r2,7
    7f0c:	88000d1e 	bne	r17,zero,7f44 <__muldf3+0x834>
    7f10:	0021883a 	mov	r16,zero
    7f14:	102cd0fa 	srli	r22,r2,3
    7f18:	3027883a 	mov	r19,r6
    7f1c:	0005883a 	mov	r2,zero
    7f20:	b46cb03a 	or	r22,r22,r17
    7f24:	003e5906 	br	788c <__ram_exceptions_end+0xfe00586c>
    7f28:	1007883a 	mov	r3,r2
    7f2c:	0023883a 	mov	r17,zero
    7f30:	8820927a 	slli	r16,r17,9
    7f34:	1805883a 	mov	r2,r3
    7f38:	8822977a 	slli	r17,r17,29
    7f3c:	8020d33a 	srli	r16,r16,12
    7f40:	003ff406 	br	7f14 <__ram_exceptions_end+0xfe005ef4>
    7f44:	10c003cc 	andi	r3,r2,15
    7f48:	01000104 	movi	r4,4
    7f4c:	193ff626 	beq	r3,r4,7f28 <__ram_exceptions_end+0xfe005f08>
    7f50:	0023883a 	mov	r17,zero
    7f54:	003fd506 	br	7eac <__ram_exceptions_end+0xfe005e8c>
    7f58:	0023883a 	mov	r17,zero
    7f5c:	003fe706 	br	7efc <__ram_exceptions_end+0xfe005edc>
    7f60:	00800434 	movhi	r2,16
    7f64:	8c000234 	orhi	r16,r17,8
    7f68:	10bfffc4 	addi	r2,r2,-1
    7f6c:	3027883a 	mov	r19,r6
    7f70:	80a0703a 	and	r16,r16,r2
    7f74:	902d883a 	mov	r22,r18
    7f78:	003eac06 	br	7a2c <__ram_exceptions_end+0xfe005a0c>

00007f7c <__subdf3>:
    7f7c:	02000434 	movhi	r8,16
    7f80:	423fffc4 	addi	r8,r8,-1
    7f84:	defffb04 	addi	sp,sp,-20
    7f88:	2a14703a 	and	r10,r5,r8
    7f8c:	3812d53a 	srli	r9,r7,20
    7f90:	3a10703a 	and	r8,r7,r8
    7f94:	2006d77a 	srli	r3,r4,29
    7f98:	3004d77a 	srli	r2,r6,29
    7f9c:	dc000015 	stw	r16,0(sp)
    7fa0:	501490fa 	slli	r10,r10,3
    7fa4:	2820d53a 	srli	r16,r5,20
    7fa8:	401090fa 	slli	r8,r8,3
    7fac:	dc800215 	stw	r18,8(sp)
    7fb0:	dc400115 	stw	r17,4(sp)
    7fb4:	dfc00415 	stw	ra,16(sp)
    7fb8:	202290fa 	slli	r17,r4,3
    7fbc:	dcc00315 	stw	r19,12(sp)
    7fc0:	4a41ffcc 	andi	r9,r9,2047
    7fc4:	0101ffc4 	movi	r4,2047
    7fc8:	2824d7fa 	srli	r18,r5,31
    7fcc:	8401ffcc 	andi	r16,r16,2047
    7fd0:	50c6b03a 	or	r3,r10,r3
    7fd4:	380ed7fa 	srli	r7,r7,31
    7fd8:	408ab03a 	or	r5,r8,r2
    7fdc:	300c90fa 	slli	r6,r6,3
    7fe0:	49009626 	beq	r9,r4,823c <__subdf3+0x2c0>
    7fe4:	39c0005c 	xori	r7,r7,1
    7fe8:	8245c83a 	sub	r2,r16,r9
    7fec:	3c807426 	beq	r7,r18,81c0 <__subdf3+0x244>
    7ff0:	0080af0e 	bge	zero,r2,82b0 <__subdf3+0x334>
    7ff4:	48002a1e 	bne	r9,zero,80a0 <__subdf3+0x124>
    7ff8:	2988b03a 	or	r4,r5,r6
    7ffc:	20009a1e 	bne	r4,zero,8268 <__subdf3+0x2ec>
    8000:	888001cc 	andi	r2,r17,7
    8004:	10000726 	beq	r2,zero,8024 <__subdf3+0xa8>
    8008:	888003cc 	andi	r2,r17,15
    800c:	01000104 	movi	r4,4
    8010:	11000426 	beq	r2,r4,8024 <__subdf3+0xa8>
    8014:	890b883a 	add	r5,r17,r4
    8018:	2c63803a 	cmpltu	r17,r5,r17
    801c:	1c47883a 	add	r3,r3,r17
    8020:	2823883a 	mov	r17,r5
    8024:	1880202c 	andhi	r2,r3,128
    8028:	10005926 	beq	r2,zero,8190 <__subdf3+0x214>
    802c:	84000044 	addi	r16,r16,1
    8030:	0081ffc4 	movi	r2,2047
    8034:	8080be26 	beq	r16,r2,8330 <__subdf3+0x3b4>
    8038:	017fe034 	movhi	r5,65408
    803c:	297fffc4 	addi	r5,r5,-1
    8040:	1946703a 	and	r3,r3,r5
    8044:	1804977a 	slli	r2,r3,29
    8048:	1806927a 	slli	r3,r3,9
    804c:	8822d0fa 	srli	r17,r17,3
    8050:	8401ffcc 	andi	r16,r16,2047
    8054:	180ad33a 	srli	r5,r3,12
    8058:	9100004c 	andi	r4,r18,1
    805c:	1444b03a 	or	r2,r2,r17
    8060:	80c1ffcc 	andi	r3,r16,2047
    8064:	1820953a 	slli	r16,r3,20
    8068:	20c03fcc 	andi	r3,r4,255
    806c:	180897fa 	slli	r4,r3,31
    8070:	00c00434 	movhi	r3,16
    8074:	18ffffc4 	addi	r3,r3,-1
    8078:	28c6703a 	and	r3,r5,r3
    807c:	1c06b03a 	or	r3,r3,r16
    8080:	1906b03a 	or	r3,r3,r4
    8084:	dfc00417 	ldw	ra,16(sp)
    8088:	dcc00317 	ldw	r19,12(sp)
    808c:	dc800217 	ldw	r18,8(sp)
    8090:	dc400117 	ldw	r17,4(sp)
    8094:	dc000017 	ldw	r16,0(sp)
    8098:	dec00504 	addi	sp,sp,20
    809c:	f800283a 	ret
    80a0:	0101ffc4 	movi	r4,2047
    80a4:	813fd626 	beq	r16,r4,8000 <__ram_exceptions_end+0xfe005fe0>
    80a8:	29402034 	orhi	r5,r5,128
    80ac:	01000e04 	movi	r4,56
    80b0:	2080a316 	blt	r4,r2,8340 <__subdf3+0x3c4>
    80b4:	010007c4 	movi	r4,31
    80b8:	2080c616 	blt	r4,r2,83d4 <__subdf3+0x458>
    80bc:	01000804 	movi	r4,32
    80c0:	2089c83a 	sub	r4,r4,r2
    80c4:	2910983a 	sll	r8,r5,r4
    80c8:	308ed83a 	srl	r7,r6,r2
    80cc:	3108983a 	sll	r4,r6,r4
    80d0:	2884d83a 	srl	r2,r5,r2
    80d4:	41ccb03a 	or	r6,r8,r7
    80d8:	2008c03a 	cmpne	r4,r4,zero
    80dc:	310cb03a 	or	r6,r6,r4
    80e0:	898dc83a 	sub	r6,r17,r6
    80e4:	89a3803a 	cmpltu	r17,r17,r6
    80e8:	1887c83a 	sub	r3,r3,r2
    80ec:	1c47c83a 	sub	r3,r3,r17
    80f0:	3023883a 	mov	r17,r6
    80f4:	1880202c 	andhi	r2,r3,128
    80f8:	10002326 	beq	r2,zero,8188 <__subdf3+0x20c>
    80fc:	04c02034 	movhi	r19,128
    8100:	9cffffc4 	addi	r19,r19,-1
    8104:	1ce6703a 	and	r19,r3,r19
    8108:	98007a26 	beq	r19,zero,82f4 <__subdf3+0x378>
    810c:	9809883a 	mov	r4,r19
    8110:	0008d340 	call	8d34 <__clzsi2>
    8114:	113ffe04 	addi	r4,r2,-8
    8118:	00c007c4 	movi	r3,31
    811c:	19007b16 	blt	r3,r4,830c <__subdf3+0x390>
    8120:	00800804 	movi	r2,32
    8124:	1105c83a 	sub	r2,r2,r4
    8128:	8884d83a 	srl	r2,r17,r2
    812c:	9906983a 	sll	r3,r19,r4
    8130:	8922983a 	sll	r17,r17,r4
    8134:	10c4b03a 	or	r2,r2,r3
    8138:	24007816 	blt	r4,r16,831c <__subdf3+0x3a0>
    813c:	2421c83a 	sub	r16,r4,r16
    8140:	80c00044 	addi	r3,r16,1
    8144:	010007c4 	movi	r4,31
    8148:	20c09516 	blt	r4,r3,83a0 <__subdf3+0x424>
    814c:	01400804 	movi	r5,32
    8150:	28cbc83a 	sub	r5,r5,r3
    8154:	88c8d83a 	srl	r4,r17,r3
    8158:	8962983a 	sll	r17,r17,r5
    815c:	114a983a 	sll	r5,r2,r5
    8160:	10c6d83a 	srl	r3,r2,r3
    8164:	8804c03a 	cmpne	r2,r17,zero
    8168:	290ab03a 	or	r5,r5,r4
    816c:	28a2b03a 	or	r17,r5,r2
    8170:	0021883a 	mov	r16,zero
    8174:	003fa206 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    8178:	2090b03a 	or	r8,r4,r2
    817c:	40018e26 	beq	r8,zero,87b8 <__subdf3+0x83c>
    8180:	1007883a 	mov	r3,r2
    8184:	2023883a 	mov	r17,r4
    8188:	888001cc 	andi	r2,r17,7
    818c:	103f9e1e 	bne	r2,zero,8008 <__ram_exceptions_end+0xfe005fe8>
    8190:	1804977a 	slli	r2,r3,29
    8194:	8822d0fa 	srli	r17,r17,3
    8198:	1810d0fa 	srli	r8,r3,3
    819c:	9100004c 	andi	r4,r18,1
    81a0:	1444b03a 	or	r2,r2,r17
    81a4:	00c1ffc4 	movi	r3,2047
    81a8:	80c02826 	beq	r16,r3,824c <__subdf3+0x2d0>
    81ac:	01400434 	movhi	r5,16
    81b0:	297fffc4 	addi	r5,r5,-1
    81b4:	80e0703a 	and	r16,r16,r3
    81b8:	414a703a 	and	r5,r8,r5
    81bc:	003fa806 	br	8060 <__ram_exceptions_end+0xfe006040>
    81c0:	0080630e 	bge	zero,r2,8350 <__subdf3+0x3d4>
    81c4:	48003026 	beq	r9,zero,8288 <__subdf3+0x30c>
    81c8:	0101ffc4 	movi	r4,2047
    81cc:	813f8c26 	beq	r16,r4,8000 <__ram_exceptions_end+0xfe005fe0>
    81d0:	29402034 	orhi	r5,r5,128
    81d4:	01000e04 	movi	r4,56
    81d8:	2080a90e 	bge	r4,r2,8480 <__subdf3+0x504>
    81dc:	298cb03a 	or	r6,r5,r6
    81e0:	3012c03a 	cmpne	r9,r6,zero
    81e4:	0005883a 	mov	r2,zero
    81e8:	4c53883a 	add	r9,r9,r17
    81ec:	4c63803a 	cmpltu	r17,r9,r17
    81f0:	10c7883a 	add	r3,r2,r3
    81f4:	88c7883a 	add	r3,r17,r3
    81f8:	4823883a 	mov	r17,r9
    81fc:	1880202c 	andhi	r2,r3,128
    8200:	1000d026 	beq	r2,zero,8544 <__subdf3+0x5c8>
    8204:	84000044 	addi	r16,r16,1
    8208:	0081ffc4 	movi	r2,2047
    820c:	8080fe26 	beq	r16,r2,8608 <__subdf3+0x68c>
    8210:	00bfe034 	movhi	r2,65408
    8214:	10bfffc4 	addi	r2,r2,-1
    8218:	1886703a 	and	r3,r3,r2
    821c:	880ad07a 	srli	r5,r17,1
    8220:	180497fa 	slli	r2,r3,31
    8224:	8900004c 	andi	r4,r17,1
    8228:	2922b03a 	or	r17,r5,r4
    822c:	1806d07a 	srli	r3,r3,1
    8230:	1462b03a 	or	r17,r2,r17
    8234:	3825883a 	mov	r18,r7
    8238:	003f7106 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    823c:	2984b03a 	or	r2,r5,r6
    8240:	103f6826 	beq	r2,zero,7fe4 <__ram_exceptions_end+0xfe005fc4>
    8244:	39c03fcc 	andi	r7,r7,255
    8248:	003f6706 	br	7fe8 <__ram_exceptions_end+0xfe005fc8>
    824c:	4086b03a 	or	r3,r8,r2
    8250:	18015226 	beq	r3,zero,879c <__subdf3+0x820>
    8254:	00c00434 	movhi	r3,16
    8258:	41400234 	orhi	r5,r8,8
    825c:	18ffffc4 	addi	r3,r3,-1
    8260:	28ca703a 	and	r5,r5,r3
    8264:	003f7e06 	br	8060 <__ram_exceptions_end+0xfe006040>
    8268:	10bfffc4 	addi	r2,r2,-1
    826c:	1000491e 	bne	r2,zero,8394 <__subdf3+0x418>
    8270:	898fc83a 	sub	r7,r17,r6
    8274:	89e3803a 	cmpltu	r17,r17,r7
    8278:	1947c83a 	sub	r3,r3,r5
    827c:	1c47c83a 	sub	r3,r3,r17
    8280:	3823883a 	mov	r17,r7
    8284:	003f9b06 	br	80f4 <__ram_exceptions_end+0xfe0060d4>
    8288:	2988b03a 	or	r4,r5,r6
    828c:	203f5c26 	beq	r4,zero,8000 <__ram_exceptions_end+0xfe005fe0>
    8290:	10bfffc4 	addi	r2,r2,-1
    8294:	1000931e 	bne	r2,zero,84e4 <__subdf3+0x568>
    8298:	898d883a 	add	r6,r17,r6
    829c:	3463803a 	cmpltu	r17,r6,r17
    82a0:	1947883a 	add	r3,r3,r5
    82a4:	88c7883a 	add	r3,r17,r3
    82a8:	3023883a 	mov	r17,r6
    82ac:	003fd306 	br	81fc <__ram_exceptions_end+0xfe0061dc>
    82b0:	1000541e 	bne	r2,zero,8404 <__subdf3+0x488>
    82b4:	80800044 	addi	r2,r16,1
    82b8:	1081ffcc 	andi	r2,r2,2047
    82bc:	01000044 	movi	r4,1
    82c0:	2080a20e 	bge	r4,r2,854c <__subdf3+0x5d0>
    82c4:	8989c83a 	sub	r4,r17,r6
    82c8:	8905803a 	cmpltu	r2,r17,r4
    82cc:	1967c83a 	sub	r19,r3,r5
    82d0:	98a7c83a 	sub	r19,r19,r2
    82d4:	9880202c 	andhi	r2,r19,128
    82d8:	10006326 	beq	r2,zero,8468 <__subdf3+0x4ec>
    82dc:	3463c83a 	sub	r17,r6,r17
    82e0:	28c7c83a 	sub	r3,r5,r3
    82e4:	344d803a 	cmpltu	r6,r6,r17
    82e8:	19a7c83a 	sub	r19,r3,r6
    82ec:	3825883a 	mov	r18,r7
    82f0:	983f861e 	bne	r19,zero,810c <__ram_exceptions_end+0xfe0060ec>
    82f4:	8809883a 	mov	r4,r17
    82f8:	0008d340 	call	8d34 <__clzsi2>
    82fc:	10800804 	addi	r2,r2,32
    8300:	113ffe04 	addi	r4,r2,-8
    8304:	00c007c4 	movi	r3,31
    8308:	193f850e 	bge	r3,r4,8120 <__ram_exceptions_end+0xfe006100>
    830c:	10bff604 	addi	r2,r2,-40
    8310:	8884983a 	sll	r2,r17,r2
    8314:	0023883a 	mov	r17,zero
    8318:	243f880e 	bge	r4,r16,813c <__ram_exceptions_end+0xfe00611c>
    831c:	00ffe034 	movhi	r3,65408
    8320:	18ffffc4 	addi	r3,r3,-1
    8324:	8121c83a 	sub	r16,r16,r4
    8328:	10c6703a 	and	r3,r2,r3
    832c:	003f3406 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    8330:	9100004c 	andi	r4,r18,1
    8334:	000b883a 	mov	r5,zero
    8338:	0005883a 	mov	r2,zero
    833c:	003f4806 	br	8060 <__ram_exceptions_end+0xfe006040>
    8340:	298cb03a 	or	r6,r5,r6
    8344:	300cc03a 	cmpne	r6,r6,zero
    8348:	0005883a 	mov	r2,zero
    834c:	003f6406 	br	80e0 <__ram_exceptions_end+0xfe0060c0>
    8350:	10009a1e 	bne	r2,zero,85bc <__subdf3+0x640>
    8354:	82400044 	addi	r9,r16,1
    8358:	4881ffcc 	andi	r2,r9,2047
    835c:	02800044 	movi	r10,1
    8360:	5080670e 	bge	r10,r2,8500 <__subdf3+0x584>
    8364:	0081ffc4 	movi	r2,2047
    8368:	4880af26 	beq	r9,r2,8628 <__subdf3+0x6ac>
    836c:	898d883a 	add	r6,r17,r6
    8370:	1945883a 	add	r2,r3,r5
    8374:	3447803a 	cmpltu	r3,r6,r17
    8378:	1887883a 	add	r3,r3,r2
    837c:	182297fa 	slli	r17,r3,31
    8380:	300cd07a 	srli	r6,r6,1
    8384:	1806d07a 	srli	r3,r3,1
    8388:	4821883a 	mov	r16,r9
    838c:	89a2b03a 	or	r17,r17,r6
    8390:	003f1b06 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    8394:	0101ffc4 	movi	r4,2047
    8398:	813f441e 	bne	r16,r4,80ac <__ram_exceptions_end+0xfe00608c>
    839c:	003f1806 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    83a0:	843ff844 	addi	r16,r16,-31
    83a4:	01400804 	movi	r5,32
    83a8:	1408d83a 	srl	r4,r2,r16
    83ac:	19405026 	beq	r3,r5,84f0 <__subdf3+0x574>
    83b0:	01401004 	movi	r5,64
    83b4:	28c7c83a 	sub	r3,r5,r3
    83b8:	10c4983a 	sll	r2,r2,r3
    83bc:	88a2b03a 	or	r17,r17,r2
    83c0:	8822c03a 	cmpne	r17,r17,zero
    83c4:	2462b03a 	or	r17,r4,r17
    83c8:	0007883a 	mov	r3,zero
    83cc:	0021883a 	mov	r16,zero
    83d0:	003f6d06 	br	8188 <__ram_exceptions_end+0xfe006168>
    83d4:	11fff804 	addi	r7,r2,-32
    83d8:	01000804 	movi	r4,32
    83dc:	29ced83a 	srl	r7,r5,r7
    83e0:	11004526 	beq	r2,r4,84f8 <__subdf3+0x57c>
    83e4:	01001004 	movi	r4,64
    83e8:	2089c83a 	sub	r4,r4,r2
    83ec:	2904983a 	sll	r2,r5,r4
    83f0:	118cb03a 	or	r6,r2,r6
    83f4:	300cc03a 	cmpne	r6,r6,zero
    83f8:	398cb03a 	or	r6,r7,r6
    83fc:	0005883a 	mov	r2,zero
    8400:	003f3706 	br	80e0 <__ram_exceptions_end+0xfe0060c0>
    8404:	80002a26 	beq	r16,zero,84b0 <__subdf3+0x534>
    8408:	0101ffc4 	movi	r4,2047
    840c:	49006626 	beq	r9,r4,85a8 <__subdf3+0x62c>
    8410:	0085c83a 	sub	r2,zero,r2
    8414:	18c02034 	orhi	r3,r3,128
    8418:	01000e04 	movi	r4,56
    841c:	20807e16 	blt	r4,r2,8618 <__subdf3+0x69c>
    8420:	010007c4 	movi	r4,31
    8424:	2080e716 	blt	r4,r2,87c4 <__subdf3+0x848>
    8428:	01000804 	movi	r4,32
    842c:	2089c83a 	sub	r4,r4,r2
    8430:	1914983a 	sll	r10,r3,r4
    8434:	8890d83a 	srl	r8,r17,r2
    8438:	8908983a 	sll	r4,r17,r4
    843c:	1884d83a 	srl	r2,r3,r2
    8440:	5222b03a 	or	r17,r10,r8
    8444:	2006c03a 	cmpne	r3,r4,zero
    8448:	88e2b03a 	or	r17,r17,r3
    844c:	3463c83a 	sub	r17,r6,r17
    8450:	2885c83a 	sub	r2,r5,r2
    8454:	344d803a 	cmpltu	r6,r6,r17
    8458:	1187c83a 	sub	r3,r2,r6
    845c:	4821883a 	mov	r16,r9
    8460:	3825883a 	mov	r18,r7
    8464:	003f2306 	br	80f4 <__ram_exceptions_end+0xfe0060d4>
    8468:	24d0b03a 	or	r8,r4,r19
    846c:	40001b1e 	bne	r8,zero,84dc <__subdf3+0x560>
    8470:	0005883a 	mov	r2,zero
    8474:	0009883a 	mov	r4,zero
    8478:	0021883a 	mov	r16,zero
    847c:	003f4906 	br	81a4 <__ram_exceptions_end+0xfe006184>
    8480:	010007c4 	movi	r4,31
    8484:	20803a16 	blt	r4,r2,8570 <__subdf3+0x5f4>
    8488:	01000804 	movi	r4,32
    848c:	2089c83a 	sub	r4,r4,r2
    8490:	2912983a 	sll	r9,r5,r4
    8494:	3090d83a 	srl	r8,r6,r2
    8498:	3108983a 	sll	r4,r6,r4
    849c:	2884d83a 	srl	r2,r5,r2
    84a0:	4a12b03a 	or	r9,r9,r8
    84a4:	2008c03a 	cmpne	r4,r4,zero
    84a8:	4912b03a 	or	r9,r9,r4
    84ac:	003f4e06 	br	81e8 <__ram_exceptions_end+0xfe0061c8>
    84b0:	1c48b03a 	or	r4,r3,r17
    84b4:	20003c26 	beq	r4,zero,85a8 <__subdf3+0x62c>
    84b8:	0084303a 	nor	r2,zero,r2
    84bc:	1000381e 	bne	r2,zero,85a0 <__subdf3+0x624>
    84c0:	3463c83a 	sub	r17,r6,r17
    84c4:	28c5c83a 	sub	r2,r5,r3
    84c8:	344d803a 	cmpltu	r6,r6,r17
    84cc:	1187c83a 	sub	r3,r2,r6
    84d0:	4821883a 	mov	r16,r9
    84d4:	3825883a 	mov	r18,r7
    84d8:	003f0606 	br	80f4 <__ram_exceptions_end+0xfe0060d4>
    84dc:	2023883a 	mov	r17,r4
    84e0:	003f0906 	br	8108 <__ram_exceptions_end+0xfe0060e8>
    84e4:	0101ffc4 	movi	r4,2047
    84e8:	813f3a1e 	bne	r16,r4,81d4 <__ram_exceptions_end+0xfe0061b4>
    84ec:	003ec406 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    84f0:	0005883a 	mov	r2,zero
    84f4:	003fb106 	br	83bc <__ram_exceptions_end+0xfe00639c>
    84f8:	0005883a 	mov	r2,zero
    84fc:	003fbc06 	br	83f0 <__ram_exceptions_end+0xfe0063d0>
    8500:	1c44b03a 	or	r2,r3,r17
    8504:	80008e1e 	bne	r16,zero,8740 <__subdf3+0x7c4>
    8508:	1000c826 	beq	r2,zero,882c <__subdf3+0x8b0>
    850c:	2984b03a 	or	r2,r5,r6
    8510:	103ebb26 	beq	r2,zero,8000 <__ram_exceptions_end+0xfe005fe0>
    8514:	8989883a 	add	r4,r17,r6
    8518:	1945883a 	add	r2,r3,r5
    851c:	2447803a 	cmpltu	r3,r4,r17
    8520:	1887883a 	add	r3,r3,r2
    8524:	1880202c 	andhi	r2,r3,128
    8528:	2023883a 	mov	r17,r4
    852c:	103f1626 	beq	r2,zero,8188 <__ram_exceptions_end+0xfe006168>
    8530:	00bfe034 	movhi	r2,65408
    8534:	10bfffc4 	addi	r2,r2,-1
    8538:	5021883a 	mov	r16,r10
    853c:	1886703a 	and	r3,r3,r2
    8540:	003eaf06 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    8544:	3825883a 	mov	r18,r7
    8548:	003f0f06 	br	8188 <__ram_exceptions_end+0xfe006168>
    854c:	1c44b03a 	or	r2,r3,r17
    8550:	8000251e 	bne	r16,zero,85e8 <__subdf3+0x66c>
    8554:	1000661e 	bne	r2,zero,86f0 <__subdf3+0x774>
    8558:	2990b03a 	or	r8,r5,r6
    855c:	40009626 	beq	r8,zero,87b8 <__subdf3+0x83c>
    8560:	2807883a 	mov	r3,r5
    8564:	3023883a 	mov	r17,r6
    8568:	3825883a 	mov	r18,r7
    856c:	003ea406 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    8570:	127ff804 	addi	r9,r2,-32
    8574:	01000804 	movi	r4,32
    8578:	2a52d83a 	srl	r9,r5,r9
    857c:	11008c26 	beq	r2,r4,87b0 <__subdf3+0x834>
    8580:	01001004 	movi	r4,64
    8584:	2085c83a 	sub	r2,r4,r2
    8588:	2884983a 	sll	r2,r5,r2
    858c:	118cb03a 	or	r6,r2,r6
    8590:	300cc03a 	cmpne	r6,r6,zero
    8594:	4992b03a 	or	r9,r9,r6
    8598:	0005883a 	mov	r2,zero
    859c:	003f1206 	br	81e8 <__ram_exceptions_end+0xfe0061c8>
    85a0:	0101ffc4 	movi	r4,2047
    85a4:	493f9c1e 	bne	r9,r4,8418 <__ram_exceptions_end+0xfe0063f8>
    85a8:	2807883a 	mov	r3,r5
    85ac:	3023883a 	mov	r17,r6
    85b0:	4821883a 	mov	r16,r9
    85b4:	3825883a 	mov	r18,r7
    85b8:	003e9106 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    85bc:	80001f1e 	bne	r16,zero,863c <__subdf3+0x6c0>
    85c0:	1c48b03a 	or	r4,r3,r17
    85c4:	20005a26 	beq	r4,zero,8730 <__subdf3+0x7b4>
    85c8:	0084303a 	nor	r2,zero,r2
    85cc:	1000561e 	bne	r2,zero,8728 <__subdf3+0x7ac>
    85d0:	89a3883a 	add	r17,r17,r6
    85d4:	1945883a 	add	r2,r3,r5
    85d8:	898d803a 	cmpltu	r6,r17,r6
    85dc:	3087883a 	add	r3,r6,r2
    85e0:	4821883a 	mov	r16,r9
    85e4:	003f0506 	br	81fc <__ram_exceptions_end+0xfe0061dc>
    85e8:	10002b1e 	bne	r2,zero,8698 <__subdf3+0x71c>
    85ec:	2984b03a 	or	r2,r5,r6
    85f0:	10008026 	beq	r2,zero,87f4 <__subdf3+0x878>
    85f4:	2807883a 	mov	r3,r5
    85f8:	3023883a 	mov	r17,r6
    85fc:	3825883a 	mov	r18,r7
    8600:	0401ffc4 	movi	r16,2047
    8604:	003e7e06 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    8608:	3809883a 	mov	r4,r7
    860c:	0011883a 	mov	r8,zero
    8610:	0005883a 	mov	r2,zero
    8614:	003ee306 	br	81a4 <__ram_exceptions_end+0xfe006184>
    8618:	1c62b03a 	or	r17,r3,r17
    861c:	8822c03a 	cmpne	r17,r17,zero
    8620:	0005883a 	mov	r2,zero
    8624:	003f8906 	br	844c <__ram_exceptions_end+0xfe00642c>
    8628:	3809883a 	mov	r4,r7
    862c:	4821883a 	mov	r16,r9
    8630:	0011883a 	mov	r8,zero
    8634:	0005883a 	mov	r2,zero
    8638:	003eda06 	br	81a4 <__ram_exceptions_end+0xfe006184>
    863c:	0101ffc4 	movi	r4,2047
    8640:	49003b26 	beq	r9,r4,8730 <__subdf3+0x7b4>
    8644:	0085c83a 	sub	r2,zero,r2
    8648:	18c02034 	orhi	r3,r3,128
    864c:	01000e04 	movi	r4,56
    8650:	20806e16 	blt	r4,r2,880c <__subdf3+0x890>
    8654:	010007c4 	movi	r4,31
    8658:	20807716 	blt	r4,r2,8838 <__subdf3+0x8bc>
    865c:	01000804 	movi	r4,32
    8660:	2089c83a 	sub	r4,r4,r2
    8664:	1914983a 	sll	r10,r3,r4
    8668:	8890d83a 	srl	r8,r17,r2
    866c:	8908983a 	sll	r4,r17,r4
    8670:	1884d83a 	srl	r2,r3,r2
    8674:	5222b03a 	or	r17,r10,r8
    8678:	2006c03a 	cmpne	r3,r4,zero
    867c:	88e2b03a 	or	r17,r17,r3
    8680:	89a3883a 	add	r17,r17,r6
    8684:	1145883a 	add	r2,r2,r5
    8688:	898d803a 	cmpltu	r6,r17,r6
    868c:	3087883a 	add	r3,r6,r2
    8690:	4821883a 	mov	r16,r9
    8694:	003ed906 	br	81fc <__ram_exceptions_end+0xfe0061dc>
    8698:	2984b03a 	or	r2,r5,r6
    869c:	10004226 	beq	r2,zero,87a8 <__subdf3+0x82c>
    86a0:	1808d0fa 	srli	r4,r3,3
    86a4:	8822d0fa 	srli	r17,r17,3
    86a8:	1806977a 	slli	r3,r3,29
    86ac:	2080022c 	andhi	r2,r4,8
    86b0:	1c62b03a 	or	r17,r3,r17
    86b4:	10000826 	beq	r2,zero,86d8 <__subdf3+0x75c>
    86b8:	2812d0fa 	srli	r9,r5,3
    86bc:	4880022c 	andhi	r2,r9,8
    86c0:	1000051e 	bne	r2,zero,86d8 <__subdf3+0x75c>
    86c4:	300cd0fa 	srli	r6,r6,3
    86c8:	2804977a 	slli	r2,r5,29
    86cc:	4809883a 	mov	r4,r9
    86d0:	3825883a 	mov	r18,r7
    86d4:	11a2b03a 	or	r17,r2,r6
    86d8:	8806d77a 	srli	r3,r17,29
    86dc:	200890fa 	slli	r4,r4,3
    86e0:	882290fa 	slli	r17,r17,3
    86e4:	0401ffc4 	movi	r16,2047
    86e8:	1906b03a 	or	r3,r3,r4
    86ec:	003e4406 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    86f0:	2984b03a 	or	r2,r5,r6
    86f4:	103e4226 	beq	r2,zero,8000 <__ram_exceptions_end+0xfe005fe0>
    86f8:	8989c83a 	sub	r4,r17,r6
    86fc:	8911803a 	cmpltu	r8,r17,r4
    8700:	1945c83a 	sub	r2,r3,r5
    8704:	1205c83a 	sub	r2,r2,r8
    8708:	1200202c 	andhi	r8,r2,128
    870c:	403e9a26 	beq	r8,zero,8178 <__ram_exceptions_end+0xfe006158>
    8710:	3463c83a 	sub	r17,r6,r17
    8714:	28c5c83a 	sub	r2,r5,r3
    8718:	344d803a 	cmpltu	r6,r6,r17
    871c:	1187c83a 	sub	r3,r2,r6
    8720:	3825883a 	mov	r18,r7
    8724:	003e3606 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    8728:	0101ffc4 	movi	r4,2047
    872c:	493fc71e 	bne	r9,r4,864c <__ram_exceptions_end+0xfe00662c>
    8730:	2807883a 	mov	r3,r5
    8734:	3023883a 	mov	r17,r6
    8738:	4821883a 	mov	r16,r9
    873c:	003e3006 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    8740:	10003626 	beq	r2,zero,881c <__subdf3+0x8a0>
    8744:	2984b03a 	or	r2,r5,r6
    8748:	10001726 	beq	r2,zero,87a8 <__subdf3+0x82c>
    874c:	1808d0fa 	srli	r4,r3,3
    8750:	8822d0fa 	srli	r17,r17,3
    8754:	1806977a 	slli	r3,r3,29
    8758:	2080022c 	andhi	r2,r4,8
    875c:	1c62b03a 	or	r17,r3,r17
    8760:	10000726 	beq	r2,zero,8780 <__subdf3+0x804>
    8764:	2812d0fa 	srli	r9,r5,3
    8768:	4880022c 	andhi	r2,r9,8
    876c:	1000041e 	bne	r2,zero,8780 <__subdf3+0x804>
    8770:	300cd0fa 	srli	r6,r6,3
    8774:	2804977a 	slli	r2,r5,29
    8778:	4809883a 	mov	r4,r9
    877c:	11a2b03a 	or	r17,r2,r6
    8780:	8806d77a 	srli	r3,r17,29
    8784:	200890fa 	slli	r4,r4,3
    8788:	882290fa 	slli	r17,r17,3
    878c:	3825883a 	mov	r18,r7
    8790:	1906b03a 	or	r3,r3,r4
    8794:	0401ffc4 	movi	r16,2047
    8798:	003e1906 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    879c:	000b883a 	mov	r5,zero
    87a0:	0005883a 	mov	r2,zero
    87a4:	003e2e06 	br	8060 <__ram_exceptions_end+0xfe006040>
    87a8:	0401ffc4 	movi	r16,2047
    87ac:	003e1406 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    87b0:	0005883a 	mov	r2,zero
    87b4:	003f7506 	br	858c <__ram_exceptions_end+0xfe00656c>
    87b8:	0005883a 	mov	r2,zero
    87bc:	0009883a 	mov	r4,zero
    87c0:	003e7806 	br	81a4 <__ram_exceptions_end+0xfe006184>
    87c4:	123ff804 	addi	r8,r2,-32
    87c8:	01000804 	movi	r4,32
    87cc:	1a10d83a 	srl	r8,r3,r8
    87d0:	11002526 	beq	r2,r4,8868 <__subdf3+0x8ec>
    87d4:	01001004 	movi	r4,64
    87d8:	2085c83a 	sub	r2,r4,r2
    87dc:	1884983a 	sll	r2,r3,r2
    87e0:	1444b03a 	or	r2,r2,r17
    87e4:	1004c03a 	cmpne	r2,r2,zero
    87e8:	40a2b03a 	or	r17,r8,r2
    87ec:	0005883a 	mov	r2,zero
    87f0:	003f1606 	br	844c <__ram_exceptions_end+0xfe00642c>
    87f4:	02000434 	movhi	r8,16
    87f8:	0009883a 	mov	r4,zero
    87fc:	423fffc4 	addi	r8,r8,-1
    8800:	00bfffc4 	movi	r2,-1
    8804:	0401ffc4 	movi	r16,2047
    8808:	003e6606 	br	81a4 <__ram_exceptions_end+0xfe006184>
    880c:	1c62b03a 	or	r17,r3,r17
    8810:	8822c03a 	cmpne	r17,r17,zero
    8814:	0005883a 	mov	r2,zero
    8818:	003f9906 	br	8680 <__ram_exceptions_end+0xfe006660>
    881c:	2807883a 	mov	r3,r5
    8820:	3023883a 	mov	r17,r6
    8824:	0401ffc4 	movi	r16,2047
    8828:	003df506 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    882c:	2807883a 	mov	r3,r5
    8830:	3023883a 	mov	r17,r6
    8834:	003df206 	br	8000 <__ram_exceptions_end+0xfe005fe0>
    8838:	123ff804 	addi	r8,r2,-32
    883c:	01000804 	movi	r4,32
    8840:	1a10d83a 	srl	r8,r3,r8
    8844:	11000a26 	beq	r2,r4,8870 <__subdf3+0x8f4>
    8848:	01001004 	movi	r4,64
    884c:	2085c83a 	sub	r2,r4,r2
    8850:	1884983a 	sll	r2,r3,r2
    8854:	1444b03a 	or	r2,r2,r17
    8858:	1004c03a 	cmpne	r2,r2,zero
    885c:	40a2b03a 	or	r17,r8,r2
    8860:	0005883a 	mov	r2,zero
    8864:	003f8606 	br	8680 <__ram_exceptions_end+0xfe006660>
    8868:	0005883a 	mov	r2,zero
    886c:	003fdc06 	br	87e0 <__ram_exceptions_end+0xfe0067c0>
    8870:	0005883a 	mov	r2,zero
    8874:	003ff706 	br	8854 <__ram_exceptions_end+0xfe006834>

00008878 <__fixdfsi>:
    8878:	280cd53a 	srli	r6,r5,20
    887c:	00c00434 	movhi	r3,16
    8880:	18ffffc4 	addi	r3,r3,-1
    8884:	3181ffcc 	andi	r6,r6,2047
    8888:	01c0ff84 	movi	r7,1022
    888c:	28c6703a 	and	r3,r5,r3
    8890:	280ad7fa 	srli	r5,r5,31
    8894:	3980120e 	bge	r7,r6,88e0 <__fixdfsi+0x68>
    8898:	00810744 	movi	r2,1053
    889c:	11800c16 	blt	r2,r6,88d0 <__fixdfsi+0x58>
    88a0:	00810cc4 	movi	r2,1075
    88a4:	1185c83a 	sub	r2,r2,r6
    88a8:	01c007c4 	movi	r7,31
    88ac:	18c00434 	orhi	r3,r3,16
    88b0:	38800d16 	blt	r7,r2,88e8 <__fixdfsi+0x70>
    88b4:	31befb44 	addi	r6,r6,-1043
    88b8:	2084d83a 	srl	r2,r4,r2
    88bc:	1986983a 	sll	r3,r3,r6
    88c0:	1884b03a 	or	r2,r3,r2
    88c4:	28000726 	beq	r5,zero,88e4 <__fixdfsi+0x6c>
    88c8:	0085c83a 	sub	r2,zero,r2
    88cc:	f800283a 	ret
    88d0:	00a00034 	movhi	r2,32768
    88d4:	10bfffc4 	addi	r2,r2,-1
    88d8:	2885883a 	add	r2,r5,r2
    88dc:	f800283a 	ret
    88e0:	0005883a 	mov	r2,zero
    88e4:	f800283a 	ret
    88e8:	008104c4 	movi	r2,1043
    88ec:	1185c83a 	sub	r2,r2,r6
    88f0:	1884d83a 	srl	r2,r3,r2
    88f4:	003ff306 	br	88c4 <__ram_exceptions_end+0xfe0068a4>

000088f8 <__floatsidf>:
    88f8:	defffd04 	addi	sp,sp,-12
    88fc:	dfc00215 	stw	ra,8(sp)
    8900:	dc400115 	stw	r17,4(sp)
    8904:	dc000015 	stw	r16,0(sp)
    8908:	20002b26 	beq	r4,zero,89b8 <__floatsidf+0xc0>
    890c:	2023883a 	mov	r17,r4
    8910:	2020d7fa 	srli	r16,r4,31
    8914:	20002d16 	blt	r4,zero,89cc <__floatsidf+0xd4>
    8918:	8809883a 	mov	r4,r17
    891c:	0008d340 	call	8d34 <__clzsi2>
    8920:	01410784 	movi	r5,1054
    8924:	288bc83a 	sub	r5,r5,r2
    8928:	01010cc4 	movi	r4,1075
    892c:	2149c83a 	sub	r4,r4,r5
    8930:	00c007c4 	movi	r3,31
    8934:	1900160e 	bge	r3,r4,8990 <__floatsidf+0x98>
    8938:	00c104c4 	movi	r3,1043
    893c:	1947c83a 	sub	r3,r3,r5
    8940:	88c6983a 	sll	r3,r17,r3
    8944:	00800434 	movhi	r2,16
    8948:	10bfffc4 	addi	r2,r2,-1
    894c:	1886703a 	and	r3,r3,r2
    8950:	2941ffcc 	andi	r5,r5,2047
    8954:	800d883a 	mov	r6,r16
    8958:	0005883a 	mov	r2,zero
    895c:	280a953a 	slli	r5,r5,20
    8960:	31803fcc 	andi	r6,r6,255
    8964:	01000434 	movhi	r4,16
    8968:	300c97fa 	slli	r6,r6,31
    896c:	213fffc4 	addi	r4,r4,-1
    8970:	1906703a 	and	r3,r3,r4
    8974:	1946b03a 	or	r3,r3,r5
    8978:	1986b03a 	or	r3,r3,r6
    897c:	dfc00217 	ldw	ra,8(sp)
    8980:	dc400117 	ldw	r17,4(sp)
    8984:	dc000017 	ldw	r16,0(sp)
    8988:	dec00304 	addi	sp,sp,12
    898c:	f800283a 	ret
    8990:	00c002c4 	movi	r3,11
    8994:	1887c83a 	sub	r3,r3,r2
    8998:	88c6d83a 	srl	r3,r17,r3
    899c:	8904983a 	sll	r2,r17,r4
    89a0:	01000434 	movhi	r4,16
    89a4:	213fffc4 	addi	r4,r4,-1
    89a8:	2941ffcc 	andi	r5,r5,2047
    89ac:	1906703a 	and	r3,r3,r4
    89b0:	800d883a 	mov	r6,r16
    89b4:	003fe906 	br	895c <__ram_exceptions_end+0xfe00693c>
    89b8:	000d883a 	mov	r6,zero
    89bc:	000b883a 	mov	r5,zero
    89c0:	0007883a 	mov	r3,zero
    89c4:	0005883a 	mov	r2,zero
    89c8:	003fe406 	br	895c <__ram_exceptions_end+0xfe00693c>
    89cc:	0123c83a 	sub	r17,zero,r4
    89d0:	003fd106 	br	8918 <__ram_exceptions_end+0xfe0068f8>

000089d4 <__floatunsidf>:
    89d4:	defffe04 	addi	sp,sp,-8
    89d8:	dc000015 	stw	r16,0(sp)
    89dc:	dfc00115 	stw	ra,4(sp)
    89e0:	2021883a 	mov	r16,r4
    89e4:	20002226 	beq	r4,zero,8a70 <__floatunsidf+0x9c>
    89e8:	0008d340 	call	8d34 <__clzsi2>
    89ec:	01010784 	movi	r4,1054
    89f0:	2089c83a 	sub	r4,r4,r2
    89f4:	01810cc4 	movi	r6,1075
    89f8:	310dc83a 	sub	r6,r6,r4
    89fc:	00c007c4 	movi	r3,31
    8a00:	1980120e 	bge	r3,r6,8a4c <__floatunsidf+0x78>
    8a04:	00c104c4 	movi	r3,1043
    8a08:	1907c83a 	sub	r3,r3,r4
    8a0c:	80ca983a 	sll	r5,r16,r3
    8a10:	00800434 	movhi	r2,16
    8a14:	10bfffc4 	addi	r2,r2,-1
    8a18:	2101ffcc 	andi	r4,r4,2047
    8a1c:	0021883a 	mov	r16,zero
    8a20:	288a703a 	and	r5,r5,r2
    8a24:	2008953a 	slli	r4,r4,20
    8a28:	00c00434 	movhi	r3,16
    8a2c:	18ffffc4 	addi	r3,r3,-1
    8a30:	28c6703a 	and	r3,r5,r3
    8a34:	8005883a 	mov	r2,r16
    8a38:	1906b03a 	or	r3,r3,r4
    8a3c:	dfc00117 	ldw	ra,4(sp)
    8a40:	dc000017 	ldw	r16,0(sp)
    8a44:	dec00204 	addi	sp,sp,8
    8a48:	f800283a 	ret
    8a4c:	00c002c4 	movi	r3,11
    8a50:	188bc83a 	sub	r5,r3,r2
    8a54:	814ad83a 	srl	r5,r16,r5
    8a58:	00c00434 	movhi	r3,16
    8a5c:	18ffffc4 	addi	r3,r3,-1
    8a60:	81a0983a 	sll	r16,r16,r6
    8a64:	2101ffcc 	andi	r4,r4,2047
    8a68:	28ca703a 	and	r5,r5,r3
    8a6c:	003fed06 	br	8a24 <__ram_exceptions_end+0xfe006a04>
    8a70:	0009883a 	mov	r4,zero
    8a74:	000b883a 	mov	r5,zero
    8a78:	003fea06 	br	8a24 <__ram_exceptions_end+0xfe006a04>

00008a7c <__extendsfdf2>:
    8a7c:	200ad5fa 	srli	r5,r4,23
    8a80:	defffd04 	addi	sp,sp,-12
    8a84:	dc400115 	stw	r17,4(sp)
    8a88:	29403fcc 	andi	r5,r5,255
    8a8c:	29800044 	addi	r6,r5,1
    8a90:	04402034 	movhi	r17,128
    8a94:	dc000015 	stw	r16,0(sp)
    8a98:	8c7fffc4 	addi	r17,r17,-1
    8a9c:	dfc00215 	stw	ra,8(sp)
    8aa0:	31803fcc 	andi	r6,r6,255
    8aa4:	00800044 	movi	r2,1
    8aa8:	8922703a 	and	r17,r17,r4
    8aac:	2020d7fa 	srli	r16,r4,31
    8ab0:	1180110e 	bge	r2,r6,8af8 <__extendsfdf2+0x7c>
    8ab4:	880cd0fa 	srli	r6,r17,3
    8ab8:	8822977a 	slli	r17,r17,29
    8abc:	2940e004 	addi	r5,r5,896
    8ac0:	2941ffcc 	andi	r5,r5,2047
    8ac4:	2804953a 	slli	r2,r5,20
    8ac8:	01400434 	movhi	r5,16
    8acc:	800697fa 	slli	r3,r16,31
    8ad0:	297fffc4 	addi	r5,r5,-1
    8ad4:	314a703a 	and	r5,r6,r5
    8ad8:	288ab03a 	or	r5,r5,r2
    8adc:	28c6b03a 	or	r3,r5,r3
    8ae0:	8805883a 	mov	r2,r17
    8ae4:	dfc00217 	ldw	ra,8(sp)
    8ae8:	dc400117 	ldw	r17,4(sp)
    8aec:	dc000017 	ldw	r16,0(sp)
    8af0:	dec00304 	addi	sp,sp,12
    8af4:	f800283a 	ret
    8af8:	2800111e 	bne	r5,zero,8b40 <__extendsfdf2+0xc4>
    8afc:	88001c26 	beq	r17,zero,8b70 <__extendsfdf2+0xf4>
    8b00:	8809883a 	mov	r4,r17
    8b04:	0008d340 	call	8d34 <__clzsi2>
    8b08:	00c00284 	movi	r3,10
    8b0c:	18801b16 	blt	r3,r2,8b7c <__extendsfdf2+0x100>
    8b10:	018002c4 	movi	r6,11
    8b14:	308dc83a 	sub	r6,r6,r2
    8b18:	11000544 	addi	r4,r2,21
    8b1c:	8986d83a 	srl	r3,r17,r6
    8b20:	8922983a 	sll	r17,r17,r4
    8b24:	0180e244 	movi	r6,905
    8b28:	01400434 	movhi	r5,16
    8b2c:	3085c83a 	sub	r2,r6,r2
    8b30:	297fffc4 	addi	r5,r5,-1
    8b34:	194c703a 	and	r6,r3,r5
    8b38:	1141ffcc 	andi	r5,r2,2047
    8b3c:	003fe006 	br	8ac0 <__ram_exceptions_end+0xfe006aa0>
    8b40:	88000826 	beq	r17,zero,8b64 <__extendsfdf2+0xe8>
    8b44:	880cd0fa 	srli	r6,r17,3
    8b48:	00800434 	movhi	r2,16
    8b4c:	10bfffc4 	addi	r2,r2,-1
    8b50:	31800234 	orhi	r6,r6,8
    8b54:	8822977a 	slli	r17,r17,29
    8b58:	308c703a 	and	r6,r6,r2
    8b5c:	0141ffc4 	movi	r5,2047
    8b60:	003fd706 	br	8ac0 <__ram_exceptions_end+0xfe006aa0>
    8b64:	0141ffc4 	movi	r5,2047
    8b68:	000d883a 	mov	r6,zero
    8b6c:	003fd406 	br	8ac0 <__ram_exceptions_end+0xfe006aa0>
    8b70:	000b883a 	mov	r5,zero
    8b74:	000d883a 	mov	r6,zero
    8b78:	003fd106 	br	8ac0 <__ram_exceptions_end+0xfe006aa0>
    8b7c:	11bffd44 	addi	r6,r2,-11
    8b80:	8986983a 	sll	r3,r17,r6
    8b84:	0023883a 	mov	r17,zero
    8b88:	003fe606 	br	8b24 <__ram_exceptions_end+0xfe006b04>

00008b8c <__truncdfsf2>:
    8b8c:	2810d53a 	srli	r8,r5,20
    8b90:	01c00434 	movhi	r7,16
    8b94:	39ffffc4 	addi	r7,r7,-1
    8b98:	29ce703a 	and	r7,r5,r7
    8b9c:	4201ffcc 	andi	r8,r8,2047
    8ba0:	380e90fa 	slli	r7,r7,3
    8ba4:	200cd77a 	srli	r6,r4,29
    8ba8:	42400044 	addi	r9,r8,1
    8bac:	4a41ffcc 	andi	r9,r9,2047
    8bb0:	00c00044 	movi	r3,1
    8bb4:	280ad7fa 	srli	r5,r5,31
    8bb8:	31ceb03a 	or	r7,r6,r7
    8bbc:	200490fa 	slli	r2,r4,3
    8bc0:	1a40230e 	bge	r3,r9,8c50 <__truncdfsf2+0xc4>
    8bc4:	40ff2004 	addi	r3,r8,-896
    8bc8:	01803f84 	movi	r6,254
    8bcc:	30c01516 	blt	r6,r3,8c24 <__truncdfsf2+0x98>
    8bd0:	00c0380e 	bge	zero,r3,8cb4 <__truncdfsf2+0x128>
    8bd4:	200c91ba 	slli	r6,r4,6
    8bd8:	380e90fa 	slli	r7,r7,3
    8bdc:	1004d77a 	srli	r2,r2,29
    8be0:	300cc03a 	cmpne	r6,r6,zero
    8be4:	31ccb03a 	or	r6,r6,r7
    8be8:	308cb03a 	or	r6,r6,r2
    8bec:	308001cc 	andi	r2,r6,7
    8bf0:	10000426 	beq	r2,zero,8c04 <__truncdfsf2+0x78>
    8bf4:	308003cc 	andi	r2,r6,15
    8bf8:	01000104 	movi	r4,4
    8bfc:	11000126 	beq	r2,r4,8c04 <__truncdfsf2+0x78>
    8c00:	31800104 	addi	r6,r6,4
    8c04:	3081002c 	andhi	r2,r6,1024
    8c08:	10001626 	beq	r2,zero,8c64 <__truncdfsf2+0xd8>
    8c0c:	18c00044 	addi	r3,r3,1
    8c10:	00803fc4 	movi	r2,255
    8c14:	18800326 	beq	r3,r2,8c24 <__truncdfsf2+0x98>
    8c18:	300c91ba 	slli	r6,r6,6
    8c1c:	300cd27a 	srli	r6,r6,9
    8c20:	00000206 	br	8c2c <__truncdfsf2+0xa0>
    8c24:	00ffffc4 	movi	r3,-1
    8c28:	000d883a 	mov	r6,zero
    8c2c:	18c03fcc 	andi	r3,r3,255
    8c30:	180895fa 	slli	r4,r3,23
    8c34:	00c02034 	movhi	r3,128
    8c38:	280a97fa 	slli	r5,r5,31
    8c3c:	18ffffc4 	addi	r3,r3,-1
    8c40:	30c6703a 	and	r3,r6,r3
    8c44:	1906b03a 	or	r3,r3,r4
    8c48:	1944b03a 	or	r2,r3,r5
    8c4c:	f800283a 	ret
    8c50:	40000b1e 	bne	r8,zero,8c80 <__truncdfsf2+0xf4>
    8c54:	388cb03a 	or	r6,r7,r2
    8c58:	0007883a 	mov	r3,zero
    8c5c:	30000426 	beq	r6,zero,8c70 <__truncdfsf2+0xe4>
    8c60:	01800144 	movi	r6,5
    8c64:	00803fc4 	movi	r2,255
    8c68:	300cd0fa 	srli	r6,r6,3
    8c6c:	18800a26 	beq	r3,r2,8c98 <__truncdfsf2+0x10c>
    8c70:	00802034 	movhi	r2,128
    8c74:	10bfffc4 	addi	r2,r2,-1
    8c78:	308c703a 	and	r6,r6,r2
    8c7c:	003feb06 	br	8c2c <__ram_exceptions_end+0xfe006c0c>
    8c80:	3888b03a 	or	r4,r7,r2
    8c84:	203fe726 	beq	r4,zero,8c24 <__ram_exceptions_end+0xfe006c04>
    8c88:	380c90fa 	slli	r6,r7,3
    8c8c:	00c03fc4 	movi	r3,255
    8c90:	31808034 	orhi	r6,r6,512
    8c94:	003fd506 	br	8bec <__ram_exceptions_end+0xfe006bcc>
    8c98:	303fe226 	beq	r6,zero,8c24 <__ram_exceptions_end+0xfe006c04>
    8c9c:	00802034 	movhi	r2,128
    8ca0:	31801034 	orhi	r6,r6,64
    8ca4:	10bfffc4 	addi	r2,r2,-1
    8ca8:	00ffffc4 	movi	r3,-1
    8cac:	308c703a 	and	r6,r6,r2
    8cb0:	003fde06 	br	8c2c <__ram_exceptions_end+0xfe006c0c>
    8cb4:	013ffa44 	movi	r4,-23
    8cb8:	19000e16 	blt	r3,r4,8cf4 <__truncdfsf2+0x168>
    8cbc:	01000784 	movi	r4,30
    8cc0:	20c9c83a 	sub	r4,r4,r3
    8cc4:	018007c4 	movi	r6,31
    8cc8:	39c02034 	orhi	r7,r7,128
    8ccc:	31000b16 	blt	r6,r4,8cfc <__truncdfsf2+0x170>
    8cd0:	423f2084 	addi	r8,r8,-894
    8cd4:	120c983a 	sll	r6,r2,r8
    8cd8:	3a0e983a 	sll	r7,r7,r8
    8cdc:	1104d83a 	srl	r2,r2,r4
    8ce0:	300cc03a 	cmpne	r6,r6,zero
    8ce4:	31ceb03a 	or	r7,r6,r7
    8ce8:	388cb03a 	or	r6,r7,r2
    8cec:	0007883a 	mov	r3,zero
    8cf0:	003fbe06 	br	8bec <__ram_exceptions_end+0xfe006bcc>
    8cf4:	0007883a 	mov	r3,zero
    8cf8:	003fd906 	br	8c60 <__ram_exceptions_end+0xfe006c40>
    8cfc:	01bfff84 	movi	r6,-2
    8d00:	30cdc83a 	sub	r6,r6,r3
    8d04:	00c00804 	movi	r3,32
    8d08:	398cd83a 	srl	r6,r7,r6
    8d0c:	20c00726 	beq	r4,r3,8d2c <__truncdfsf2+0x1a0>
    8d10:	423f2884 	addi	r8,r8,-862
    8d14:	3a0e983a 	sll	r7,r7,r8
    8d18:	3884b03a 	or	r2,r7,r2
    8d1c:	1004c03a 	cmpne	r2,r2,zero
    8d20:	118cb03a 	or	r6,r2,r6
    8d24:	0007883a 	mov	r3,zero
    8d28:	003fb006 	br	8bec <__ram_exceptions_end+0xfe006bcc>
    8d2c:	000f883a 	mov	r7,zero
    8d30:	003ff906 	br	8d18 <__ram_exceptions_end+0xfe006cf8>

00008d34 <__clzsi2>:
    8d34:	00bfffd4 	movui	r2,65535
    8d38:	11000536 	bltu	r2,r4,8d50 <__clzsi2+0x1c>
    8d3c:	00803fc4 	movi	r2,255
    8d40:	11000f36 	bltu	r2,r4,8d80 <__clzsi2+0x4c>
    8d44:	00800804 	movi	r2,32
    8d48:	0007883a 	mov	r3,zero
    8d4c:	00000506 	br	8d64 <__clzsi2+0x30>
    8d50:	00804034 	movhi	r2,256
    8d54:	10bfffc4 	addi	r2,r2,-1
    8d58:	11000c2e 	bgeu	r2,r4,8d8c <__clzsi2+0x58>
    8d5c:	00800204 	movi	r2,8
    8d60:	00c00604 	movi	r3,24
    8d64:	20c8d83a 	srl	r4,r4,r3
    8d68:	00c00074 	movhi	r3,1
    8d6c:	18e4a904 	addi	r3,r3,-27996
    8d70:	1909883a 	add	r4,r3,r4
    8d74:	20c00003 	ldbu	r3,0(r4)
    8d78:	10c5c83a 	sub	r2,r2,r3
    8d7c:	f800283a 	ret
    8d80:	00800604 	movi	r2,24
    8d84:	00c00204 	movi	r3,8
    8d88:	003ff606 	br	8d64 <__ram_exceptions_end+0xfe006d44>
    8d8c:	00800404 	movi	r2,16
    8d90:	1007883a 	mov	r3,r2
    8d94:	003ff306 	br	8d64 <__ram_exceptions_end+0xfe006d44>

00008d98 <__errno>:
    8d98:	00800074 	movhi	r2,1
    8d9c:	10ad2904 	addi	r2,r2,-19292
    8da0:	10800017 	ldw	r2,0(r2)
    8da4:	f800283a 	ret

00008da8 <memcpy>:
    8da8:	2005883a 	mov	r2,r4
    8dac:	2007883a 	mov	r3,r4
    8db0:	218d883a 	add	r6,r4,r6
    8db4:	19800526 	beq	r3,r6,8dcc <memcpy+0x24>
    8db8:	29000003 	ldbu	r4,0(r5)
    8dbc:	18c00044 	addi	r3,r3,1
    8dc0:	29400044 	addi	r5,r5,1
    8dc4:	193fffc5 	stb	r4,-1(r3)
    8dc8:	003ffa06 	br	8db4 <__ram_exceptions_end+0xfe006d94>
    8dcc:	f800283a 	ret

00008dd0 <memset>:
    8dd0:	2005883a 	mov	r2,r4
    8dd4:	2007883a 	mov	r3,r4
    8dd8:	218d883a 	add	r6,r4,r6
    8ddc:	19800326 	beq	r3,r6,8dec <memset+0x1c>
    8de0:	19400005 	stb	r5,0(r3)
    8de4:	18c00044 	addi	r3,r3,1
    8de8:	003ffc06 	br	8ddc <__ram_exceptions_end+0xfe006dbc>
    8dec:	f800283a 	ret

00008df0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8df0:	deffff04 	addi	sp,sp,-4
    8df4:	01000074 	movhi	r4,1
    8df8:	01400074 	movhi	r5,1
    8dfc:	dfc00015 	stw	ra,0(sp)
    8e00:	2124e904 	addi	r4,r4,-27740
    8e04:	296d2b04 	addi	r5,r5,-19284

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8e08:	2140061e 	bne	r4,r5,8e24 <alt_load+0x34>
    8e0c:	01008034 	movhi	r4,512
    8e10:	01400034 	movhi	r5,0
    8e14:	21080804 	addi	r4,r4,8224
    8e18:	29400004 	addi	r5,r5,0
    8e1c:	2140121e 	bne	r4,r5,8e68 <alt_load+0x78>
    8e20:	00000b06 	br	8e50 <alt_load+0x60>
    8e24:	00c00074 	movhi	r3,1
    8e28:	18ed2b04 	addi	r3,r3,-19284
    8e2c:	1907c83a 	sub	r3,r3,r4
    8e30:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8e34:	10fff526 	beq	r2,r3,8e0c <__ram_exceptions_end+0xfe006dec>
    {
      *to++ = *from++;
    8e38:	114f883a 	add	r7,r2,r5
    8e3c:	39c00017 	ldw	r7,0(r7)
    8e40:	110d883a 	add	r6,r2,r4
    8e44:	10800104 	addi	r2,r2,4
    8e48:	31c00015 	stw	r7,0(r6)
    8e4c:	003ff906 	br	8e34 <__ram_exceptions_end+0xfe006e14>
    8e50:	01000074 	movhi	r4,1
    8e54:	01400074 	movhi	r5,1
    8e58:	21244704 	addi	r4,r4,-28388
    8e5c:	29644704 	addi	r5,r5,-28388

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8e60:	2140101e 	bne	r4,r5,8ea4 <alt_load+0xb4>
    8e64:	00000b06 	br	8e94 <alt_load+0xa4>
    8e68:	00c08034 	movhi	r3,512
    8e6c:	18c80804 	addi	r3,r3,8224
    8e70:	1907c83a 	sub	r3,r3,r4
    8e74:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8e78:	10fff526 	beq	r2,r3,8e50 <__ram_exceptions_end+0xfe006e30>
    {
      *to++ = *from++;
    8e7c:	114f883a 	add	r7,r2,r5
    8e80:	39c00017 	ldw	r7,0(r7)
    8e84:	110d883a 	add	r6,r2,r4
    8e88:	10800104 	addi	r2,r2,4
    8e8c:	31c00015 	stw	r7,0(r6)
    8e90:	003ff906 	br	8e78 <__ram_exceptions_end+0xfe006e58>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8e94:	000910c0 	call	910c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8e98:	dfc00017 	ldw	ra,0(sp)
    8e9c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8ea0:	00091101 	jmpi	9110 <alt_icache_flush_all>
    8ea4:	00c00074 	movhi	r3,1
    8ea8:	18e4e904 	addi	r3,r3,-27740
    8eac:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8eb0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8eb4:	18bff726 	beq	r3,r2,8e94 <__ram_exceptions_end+0xfe006e74>
    {
      *to++ = *from++;
    8eb8:	114f883a 	add	r7,r2,r5
    8ebc:	39c00017 	ldw	r7,0(r7)
    8ec0:	110d883a 	add	r6,r2,r4
    8ec4:	10800104 	addi	r2,r2,4
    8ec8:	31c00015 	stw	r7,0(r6)
    8ecc:	003ff906 	br	8eb4 <__ram_exceptions_end+0xfe006e94>

00008ed0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8ed0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8ed4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8ed8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8edc:	00090b40 	call	90b4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8ee0:	00090d40 	call	90d4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8ee4:	d1a84c17 	ldw	r6,-24272(gp)
    8ee8:	d1684d17 	ldw	r5,-24268(gp)
    8eec:	d1284e17 	ldw	r4,-24264(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8ef0:	dfc00017 	ldw	ra,0(sp)
    8ef4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8ef8:	00016681 	jmpi	1668 <main>

00008efc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    8efc:	defff204 	addi	sp,sp,-56
    8f00:	2005883a 	mov	r2,r4
    8f04:	dfc00a15 	stw	ra,40(sp)
    8f08:	df000915 	stw	fp,36(sp)
    8f0c:	ddc00815 	stw	r23,32(sp)
    8f10:	dd800715 	stw	r22,28(sp)
    8f14:	dd400615 	stw	r21,24(sp)
    8f18:	dd000515 	stw	r20,20(sp)
    8f1c:	dcc00415 	stw	r19,16(sp)
    8f20:	dc800315 	stw	r18,12(sp)
    8f24:	dc400215 	stw	r17,8(sp)
    8f28:	dc000115 	stw	r16,4(sp)
    8f2c:	d9400b15 	stw	r5,44(sp)
    8f30:	d9800c15 	stw	r6,48(sp)
    8f34:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    8f38:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
    8f3c:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    8f40:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    8f44:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    8f48:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    8f4c:	11000007 	ldb	r4,0(r2)
    8f50:	20003a26 	beq	r4,zero,903c <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    8f54:	24000226 	beq	r4,r16,8f60 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    8f58:	14400044 	addi	r17,r2,1
    8f5c:	00001406 	br	8fb0 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    8f60:	14400084 	addi	r17,r2,2
    8f64:	10800047 	ldb	r2,1(r2)
    8f68:	10003426 	beq	r2,zero,903c <alt_printf+0x140>
            {
                if (c == '%')
    8f6c:	1400021e 	bne	r2,r16,8f78 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    8f70:	8009883a 	mov	r4,r16
    8f74:	00000e06 	br	8fb0 <alt_printf+0xb4>
                } 
                else if (c == 'c')
    8f78:	1480051e 	bne	r2,r18,8f90 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    8f7c:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    8f80:	ad800104 	addi	r22,r21,4
    8f84:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    8f88:	000906c0 	call	906c <alt_putchar>
    8f8c:	00002906 	br	9034 <alt_printf+0x138>
                }
                else if (c == 'x')
    8f90:	14c0201e 	bne	r2,r19,9014 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    8f94:	adc00017 	ldw	r23,0(r21)
    8f98:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    8f9c:	b8000326 	beq	r23,zero,8fac <alt_printf+0xb0>
    8fa0:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    8fa4:	00c003c4 	movi	r3,15
    8fa8:	00000306 	br	8fb8 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    8fac:	01000c04 	movi	r4,48
    8fb0:	000906c0 	call	906c <alt_putchar>
                        continue;
    8fb4:	00001f06 	br	9034 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    8fb8:	1d84983a 	sll	r2,r3,r22
    8fbc:	15c4703a 	and	r2,r2,r23
    8fc0:	1000021e 	bne	r2,zero,8fcc <alt_printf+0xd0>
                        digit_shift -= 4;
    8fc4:	b5bfff04 	addi	r22,r22,-4
    8fc8:	003ffb06 	br	8fb8 <__ram_exceptions_end+0xfe006f98>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    8fcc:	070003c4 	movi	fp,15
                        if (digit <= 9)
    8fd0:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    8fd4:	b0001716 	blt	r22,zero,9034 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    8fd8:	e588983a 	sll	r4,fp,r22
    8fdc:	25c8703a 	and	r4,r4,r23
    8fe0:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
    8fe4:	19000236 	bltu	r3,r4,8ff0 <alt_printf+0xf4>
                            c = '0' + digit;
    8fe8:	21000c04 	addi	r4,r4,48
    8fec:	00000106 	br	8ff4 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
    8ff0:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
    8ff4:	21003fcc 	andi	r4,r4,255
    8ff8:	2100201c 	xori	r4,r4,128
    8ffc:	213fe004 	addi	r4,r4,-128
    9000:	d8c00015 	stw	r3,0(sp)
    9004:	000906c0 	call	906c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    9008:	b5bfff04 	addi	r22,r22,-4
    900c:	d8c00017 	ldw	r3,0(sp)
    9010:	003ff006 	br	8fd4 <__ram_exceptions_end+0xfe006fb4>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    9014:	1500071e 	bne	r2,r20,9034 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    9018:	ad800017 	ldw	r22,0(r21)
    901c:	ad400104 	addi	r21,r21,4

                    while(*s)
    9020:	b1000007 	ldb	r4,0(r22)
    9024:	20000326 	beq	r4,zero,9034 <alt_printf+0x138>
                      alt_putchar(*s++);
    9028:	b5800044 	addi	r22,r22,1
    902c:	000906c0 	call	906c <alt_putchar>
    9030:	003ffb06 	br	9020 <__ram_exceptions_end+0xfe007000>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    9034:	8805883a 	mov	r2,r17
    9038:	003fc406 	br	8f4c <__ram_exceptions_end+0xfe006f2c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    903c:	dfc00a17 	ldw	ra,40(sp)
    9040:	df000917 	ldw	fp,36(sp)
    9044:	ddc00817 	ldw	r23,32(sp)
    9048:	dd800717 	ldw	r22,28(sp)
    904c:	dd400617 	ldw	r21,24(sp)
    9050:	dd000517 	ldw	r20,20(sp)
    9054:	dcc00417 	ldw	r19,16(sp)
    9058:	dc800317 	ldw	r18,12(sp)
    905c:	dc400217 	ldw	r17,8(sp)
    9060:	dc000117 	ldw	r16,4(sp)
    9064:	dec00e04 	addi	sp,sp,56
    9068:	f800283a 	ret

0000906c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    906c:	defffd04 	addi	sp,sp,-12
    9070:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    9074:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    9078:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    907c:	01000074 	movhi	r4,1
    9080:	000f883a 	mov	r7,zero
    9084:	01800044 	movi	r6,1
    9088:	d80b883a 	mov	r5,sp
    908c:	212d2a04 	addi	r4,r4,-19288
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    9090:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    9094:	00090d80 	call	90d8 <altera_avalon_jtag_uart_write>
    9098:	00ffffc4 	movi	r3,-1
    909c:	10c00126 	beq	r2,r3,90a4 <alt_putchar+0x38>
        return -1;
    }
    return c;
    90a0:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    90a4:	dfc00217 	ldw	ra,8(sp)
    90a8:	dc000117 	ldw	r16,4(sp)
    90ac:	dec00304 	addi	sp,sp,12
    90b0:	f800283a 	ret

000090b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    90b4:	deffff04 	addi	sp,sp,-4
    90b8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2E, nios2e);
    90bc:	00091140 	call	9114 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    90c0:	00800044 	movi	r2,1
    90c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    90c8:	dfc00017 	ldw	ra,0(sp)
    90cc:	dec00104 	addi	sp,sp,4
    90d0:	f800283a 	ret

000090d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    90d4:	f800283a 	ret

000090d8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    90d8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    90dc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    90e0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    90e4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    90e8:	2980072e 	bgeu	r5,r6,9108 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    90ec:	38c00037 	ldwio	r3,0(r7)
    90f0:	18ffffec 	andhi	r3,r3,65535
    90f4:	183ffc26 	beq	r3,zero,90e8 <__ram_exceptions_end+0xfe0070c8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    90f8:	28c00007 	ldb	r3,0(r5)
    90fc:	20c00035 	stwio	r3,0(r4)
    9100:	29400044 	addi	r5,r5,1
    9104:	003ff806 	br	90e8 <__ram_exceptions_end+0xfe0070c8>

  return count;
}
    9108:	f800283a 	ret

0000910c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    910c:	f800283a 	ret

00009110 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9110:	f800283a 	ret

00009114 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    9114:	000170fa 	wrctl	ienable,zero
    9118:	f800283a 	ret
