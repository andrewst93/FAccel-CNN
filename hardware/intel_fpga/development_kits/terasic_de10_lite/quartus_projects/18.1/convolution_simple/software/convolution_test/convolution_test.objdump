
convolution_test.elf:     file format elf32-littlenios2
convolution_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000066d4 memsz 0x000066d4 flags r-x
    LOAD off    0x000076f4 vaddr 0x000066f4 paddr 0x000066fc align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x00007704 vaddr 0x00006704 paddr 0x00006704 align 2**12
         filesz 0x00000000 memsz 0x00000114 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000063b8  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001bc  00006538  00006538  00007538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  000066f4  000066fc  000076f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000114  00006704  00006704  00007704  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  00006818  00006818  000076fc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000076fc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000530  00000000  00000000  00007720  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007037  00000000  00000000  00007c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027ad  00000000  00000000  0000ec87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002c8d  00000000  00000000  00011434  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000adc  00000000  00000000  000140c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001817  00000000  00000000  00014ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c7a4  00000000  00000000  000163b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00022b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001130  00000000  00000000  00022ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002548a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  0002548d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00025491  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00025492  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00025493  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0002549c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000254a5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000017  00000000  00000000  000254ae  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000074  00000000  00000000  000254c5  2**0
                  CONTENTS, READONLY
 26 .jdi          00006a0e  00000000  00000000  00025539  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00034567  00000000  00000000  0002bf47  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00006538 l    d  .rodata	00000000 .rodata
000066f4 l    d  .rwdata	00000000 .rwdata
00006704 l    d  .bss	00000000 .bss
00006818 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../convolution_test_bsp//obj/HAL/src/crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 convolution_test.c
000001bc l     F .text	00000018 handle_conv_irq
00000000 l    df *ABS*	00000000 printf.c
00000550 l     F .text	00000010 _out_buffer
00000560 l     F .text	00000004 _out_null
00000564 l     F .text	00000114 _out_rev
00000678 l     F .text	0000019c _ntoa_format
00000814 l     F .text	00000174 _ntoa_long
00000988 l     F .text	000001a0 _ntoa_long_long
00000b28 l     F .text	00000018 _out_char
00000b40 l     F .text	00000020 _out_fct
00000b60 l     F .text	00000534 _ftoa
00001094 l     F .text	00000608 _etoa
000065a4 l     O .rodata	00000050 pow10.1806
0000169c l     F .text	000008fc _vsnprintf
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00006714 g     O .bss	00000004 alt_instruction_exception_handler
0000635c g     F .text	0000002c alt_main
000001ec g     F .text	00000008 f2bf
000001d4 g     F .text	00000010 _putchar
00006718 g     O .bss	00000100 alt_irq
000066fc g       *ABS*	00000000 __flash_rwdata_start
00004b60 g     F .text	00000088 .hidden __eqdf2
0000204c g     F .text	00000030 vprintf_
000002d0 g     F .text	000000a4 show_featuremap
00004be8 g     F .text	000000dc .hidden __gtdf2
000066f8 g     O .rwdata	00000004 jtag_uart
00006530 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000670c g     O .bss	00000004 alt_argv
0000e6f4 g       *ABS*	00000000 _gp
000063d0 g     F .text	00000004 usleep
00005fa0 g     F .text	000000dc .hidden __floatsidf
00004cc4 g     F .text	000000f4 .hidden __ltdf2
000064bc g     F .text	00000074 alt_exception_cause_generated_bad_addr
00002e18 g     F .text	00000064 .hidden __udivsi3
00001fd8 g     F .text	0000003c sprintf_
000020ec g     F .text	00000074 .hidden __fixunsdfsi
000038e4 g     F .text	000008ac .hidden __adddf3
0000275c g     F .text	000005c4 .hidden __umoddi3
00006818 g       *ABS*	00000000 __bss_end
00006214 g     F .text	00000068 alt_iic_isr_register
00002160 g     F .text	000005fc .hidden __udivdi3
0000607c g     F .text	000000a8 .hidden __floatunsidf
0000207c g     F .text	00000030 vsnprintf_
000061fc g     F .text	00000018 alt_ic_irq_enabled
00006704 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
000064b4 g     F .text	00000004 alt_dcache_flush_all
00005f20 g     F .text	00000080 .hidden __fixdfsi
000066fc g       *ABS*	00000000 __ram_rwdata_end
000020ac g     F .text	00000040 fctprintf
000066f4 g       *ABS*	00000000 __ram_rodata_end
00004cc4 g     F .text	000000f4 .hidden __ledf2
00002e7c g     F .text	00000058 .hidden __umodsi3
00006818 g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00008000 g       *ABS*	00000000 __alt_stack_pointer
00006124 g     F .text	00000064 .hidden __clzsi2
000063f8 g     F .text	00000034 altera_avalon_jtag_uart_write
0000021c g     F .text	00000028 bf_add
00000180 g     F .text	0000003c _start
000063f4 g     F .text	00000004 alt_sys_init
00002ed4 g     F .text	00000028 .hidden __mulsi3
000066f4 g       *ABS*	00000000 __ram_rwdata_start
00006538 g       *ABS*	00000000 __ram_rodata_start
000001f4 g     F .text	00000028 bf_mult
00000244 g     F .text	00000048 put_pixel
0000642c g     F .text	00000088 alt_busy_sleep
00006818 g       *ABS*	00000000 __alt_stack_base
00004190 g     F .text	000009d0 .hidden __divdf3
00004db8 g     F .text	0000086c .hidden __muldf3
00000374 g     F .text	00000034 convolution
00006704 g       *ABS*	00000000 __bss_start
000003a8 g     F .text	000001a8 main
00006708 g     O .bss	00000004 alt_envp
00002d20 g     F .text	00000084 .hidden __divsi3
000033c4 g     F .text	00000430 .hidden __mulsf3
00006538 g       *ABS*	00000000 __flash_rodata_start
00004b60 g     F .text	00000088 .hidden __nedf2
000063d4 g     F .text	00000020 alt_irq_init
000065f4 g     O .rodata	00000100 .hidden __clz_tab
00002014 g     F .text	00000038 snprintf_
00006710 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
0000028c g     F .text	00000044 get_pixel
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001f98 g     F .text	00000040 printf_
00006188 g     F .text	00000004 alt_ic_isr_register
000066fc g       *ABS*	00000000 _edata
00006818 g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
000001e4 g     F .text	00000008 bf2f
000061c4 g     F .text	00000038 alt_ic_irq_disable
000037f4 g     F .text	000000f0 .hidden __floatunsisf
00002da4 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_onchip_ram
0000000c g       .entry	00000000 _exit
00004be8 g     F .text	000000dc .hidden __gedf2
00006388 g     F .text	00000048 alt_putchar
000064b8 g     F .text	00000004 alt_icache_flush_all
000066f4 g     O .rwdata	00000004 alt_priority_mask
0000618c g     F .text	00000038 alt_ic_irq_enable
00005624 g     F .text	000008fc .hidden __subdf3
00002efc g     F .text	000004c8 .hidden __addsf3
0000627c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	04000034 	movhi	r16,0
 110:	8419c604 	addi	r16,r16,26392

  active = alt_irq_pending ();

  do
  {
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <_gp+0xffff1a20>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 150:	18c7883a 	add	r3,r3,r3
      i++;
 154:	10800044 	addi	r2,r2,1

    } while (1);
 158:	003ff006 	br	11c <_gp+0xffff1a28>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a00817 	ldw	r2,-32736(gp)
 160:	10000426 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 164:	200b883a 	mov	r5,r4
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     184:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
     188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     18c:	d6b9bd14 	ori	gp,gp,59124
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     194:	1099c114 	ori	r2,r2,26372

    movhi r3, %hi(__bss_end)
     198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     19c:	18da0614 	ori	r3,r3,26648

    beq r2, r3, 1f
     1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
     1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1ac:	10fffd36 	bltu	r2,r3,1a4 <_gp+0xffff1ab0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1b0:	000627c0 	call	627c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1b4:	000635c0 	call	635c <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1b8:	003fff06 	br	1b8 <_gp+0xffff1ac4>

000001bc <handle_conv_irq>:
//////////////////////////////////////////////////////////////////////////////
// Setup and handle IRQ events
// #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void handle_conv_irq(void* context)
{
	IOWR(CONVOLUTION_BASE, 0, IORD(CONVOLUTION_BASE, 0) | 0x8);	// clear irq
     1bc:	00e40014 	movui	r3,36864
     1c0:	18800037 	ldwio	r2,0(r3)
     1c4:	10800214 	ori	r2,r2,8
     1c8:	18800035 	stwio	r2,0(r3)
	alt_putchar(0x41);
     1cc:	01001044 	movi	r4,65
     1d0:	00063881 	jmpi	6388 <alt_putchar>

000001d4 <_putchar>:
}
//////////////////////////////////////////////////////////////////////////////

void _putchar(char character)
{
	alt_putchar(character);	// printf_ character output
     1d4:	21003fcc 	andi	r4,r4,255
     1d8:	2100201c 	xori	r4,r4,128
     1dc:	213fe004 	addi	r4,r4,-128
     1e0:	00063881 	jmpi	6388 <alt_putchar>

000001e4 <bf2f>:

float bf2f(bfloat16 x) { // bfloat_to_float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     return f.f;
}
     1e4:	2004943a 	slli	r2,r4,16
     1e8:	f800283a 	ret

000001ec <f2bf>:

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
}
     1ec:	2004d43a 	srli	r2,r4,16
     1f0:	f800283a 	ret

000001f4 <bf_mult>:
	alt_putchar(character);	// printf_ character output
}

float bf2f(bfloat16 x) { // bfloat_to_float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     1f4:	2804943a 	slli	r2,r5,16
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     1f8:	200a943a 	slli	r5,r4,16
}

bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     1fc:	deffff04 	addi	sp,sp,-4
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     200:	1009883a 	mov	r4,r2
}

bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     204:	dfc00015 	stw	ra,0(sp)
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     208:	00033c40 	call	33c4 <__mulsf3>
}

bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}
     20c:	1004d43a 	srli	r2,r2,16
     210:	dfc00017 	ldw	ra,0(sp)
     214:	dec00104 	addi	sp,sp,4
     218:	f800283a 	ret

0000021c <bf_add>:
	alt_putchar(character);	// printf_ character output
}

float bf2f(bfloat16 x) { // bfloat_to_float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     21c:	2804943a 	slli	r2,r5,16
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     220:	200a943a 	slli	r5,r4,16

bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}

bfloat16 bf_add(bfloat16 a, bfloat16 b) {
     224:	deffff04 	addi	sp,sp,-4
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     228:	1009883a 	mov	r4,r2

bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}

bfloat16 bf_add(bfloat16 a, bfloat16 b) {
     22c:	dfc00015 	stw	ra,0(sp)
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     230:	0002efc0 	call	2efc <__addsf3>
     return f2bf(bf2f(a) * bf2f(b));
}

bfloat16 bf_add(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) + bf2f(b));
}
     234:	1004d43a 	srli	r2,r2,16
     238:	dfc00017 	ldw	ra,0(sp)
     23c:	dec00104 	addi	sp,sp,4
     240:	f800283a 	ret

00000244 <put_pixel>:

void put_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y, alt_u32 data) {
     244:	defffd04 	addi	sp,sp,-12
     248:	dc400115 	stw	r17,4(sp)
     24c:	2023883a 	mov	r17,r4
	IOWR_16DIRECT(base, (x + (y * xres)) * 2, (data & 0xffff));
     250:	3809883a 	mov	r4,r7

bfloat16 bf_add(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) + bf2f(b));
}

void put_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y, alt_u32 data) {
     254:	dc000015 	stw	r16,0(sp)
     258:	dfc00215 	stw	ra,8(sp)
     25c:	3021883a 	mov	r16,r6
	IOWR_16DIRECT(base, (x + (y * xres)) * 2, (data & 0xffff));
     260:	0002ed40 	call	2ed4 <__mulsi3>
     264:	1405883a 	add	r2,r2,r16
     268:	d8c00317 	ldw	r3,12(sp)
     26c:	1085883a 	add	r2,r2,r2
     270:	8885883a 	add	r2,r17,r2
     274:	10c0002d 	sthio	r3,0(r2)
}
     278:	dfc00217 	ldw	ra,8(sp)
     27c:	dc400117 	ldw	r17,4(sp)
     280:	dc000017 	ldw	r16,0(sp)
     284:	dec00304 	addi	sp,sp,12
     288:	f800283a 	ret

0000028c <get_pixel>:

alt_u16 get_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y) {
     28c:	defffd04 	addi	sp,sp,-12
     290:	dc400115 	stw	r17,4(sp)
     294:	2023883a 	mov	r17,r4
	return IORD_16DIRECT(base, (x + (y * xres)) * 2);
     298:	3809883a 	mov	r4,r7

void put_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y, alt_u32 data) {
	IOWR_16DIRECT(base, (x + (y * xres)) * 2, (data & 0xffff));
}

alt_u16 get_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y) {
     29c:	dc000015 	stw	r16,0(sp)
     2a0:	dfc00215 	stw	ra,8(sp)
     2a4:	3021883a 	mov	r16,r6
	return IORD_16DIRECT(base, (x + (y * xres)) * 2);
     2a8:	0002ed40 	call	2ed4 <__mulsi3>
     2ac:	1405883a 	add	r2,r2,r16
     2b0:	1085883a 	add	r2,r2,r2
     2b4:	8885883a 	add	r2,r17,r2
}
     2b8:	1080002b 	ldhuio	r2,0(r2)
     2bc:	dfc00217 	ldw	ra,8(sp)
     2c0:	dc400117 	ldw	r17,4(sp)
     2c4:	dc000017 	ldw	r16,0(sp)
     2c8:	dec00304 	addi	sp,sp,12
     2cc:	f800283a 	ret

000002d0 <show_featuremap>:

void show_featuremap(alt_u16* base, alt_u32 xres, alt_u32 yres) {
     2d0:	defff904 	addi	sp,sp,-28
     2d4:	dd400515 	stw	r21,20(sp)
     2d8:	dd000415 	stw	r20,16(sp)
     2dc:	dcc00315 	stw	r19,12(sp)
     2e0:	dc800215 	stw	r18,8(sp)
     2e4:	dc400115 	stw	r17,4(sp)
     2e8:	dfc00615 	stw	ra,24(sp)
     2ec:	dc000015 	stw	r16,0(sp)
     2f0:	202b883a 	mov	r21,r4
     2f4:	2827883a 	mov	r19,r5
     2f8:	3029883a 	mov	r20,r6
	alt_u32 x, y;
	for (y=0; y<yres; y++) {
     2fc:	0025883a 	mov	r18,zero
     300:	0023883a 	mov	r17,zero
     304:	8d001226 	beq	r17,r20,350 <show_featuremap+0x80>
     308:	0021883a 	mov	r16,zero
		for (x=0; x<xres; x++) {
     30c:	84c00a26 	beq	r16,r19,338 <show_featuremap+0x68>
void put_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y, alt_u32 data) {
	IOWR_16DIRECT(base, (x + (y * xres)) * 2, (data & 0xffff));
}

alt_u16 get_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y) {
	return IORD_16DIRECT(base, (x + (y * xres)) * 2);
     310:	8485883a 	add	r2,r16,r18
     314:	1085883a 	add	r2,r2,r2
     318:	a885883a 	add	r2,r21,r2
     31c:	1140002b 	ldhuio	r5,0(r2)

void show_featuremap(alt_u16* base, alt_u32 xres, alt_u32 yres) {
	alt_u32 x, y;
	for (y=0; y<yres; y++) {
		for (x=0; x<xres; x++) {
			printf_("%x ", get_pixel(base, xres, x, y));
     320:	01000034 	movhi	r4,0
     324:	297fffcc 	andi	r5,r5,65535
     328:	21194e04 	addi	r4,r4,25912
     32c:	0001f980 	call	1f98 <printf_>
}

void show_featuremap(alt_u16* base, alt_u32 xres, alt_u32 yres) {
	alt_u32 x, y;
	for (y=0; y<yres; y++) {
		for (x=0; x<xres; x++) {
     330:	84000044 	addi	r16,r16,1
     334:	003ff506 	br	30c <_gp+0xffff1c18>
			printf_("%x ", get_pixel(base, xres, x, y));
		}
		printf_("\n");
     338:	01000034 	movhi	r4,0
     33c:	21196104 	addi	r4,r4,25988
     340:	0001f980 	call	1f98 <printf_>
	return IORD_16DIRECT(base, (x + (y * xres)) * 2);
}

void show_featuremap(alt_u16* base, alt_u32 xres, alt_u32 yres) {
	alt_u32 x, y;
	for (y=0; y<yres; y++) {
     344:	8c400044 	addi	r17,r17,1
     348:	94e5883a 	add	r18,r18,r19
     34c:	003fed06 	br	304 <_gp+0xffff1c10>
		for (x=0; x<xres; x++) {
			printf_("%x ", get_pixel(base, xres, x, y));
		}
		printf_("\n");
	}
}
     350:	dfc00617 	ldw	ra,24(sp)
     354:	dd400517 	ldw	r21,20(sp)
     358:	dd000417 	ldw	r20,16(sp)
     35c:	dcc00317 	ldw	r19,12(sp)
     360:	dc800217 	ldw	r18,8(sp)
     364:	dc400117 	ldw	r17,4(sp)
     368:	dc000017 	ldw	r16,0(sp)
     36c:	dec00704 	addi	sp,sp,28
     370:	f800283a 	ret

00000374 <convolution>:

void convolution(alt_u32* base, alt_u32 xres, alt_u32 pad, bfloat16* kptr, bfloat16* src, bfloat16* dst) {
	while((IORD(base, 0) & 0x2) != 0);
     374:	20800037 	ldwio	r2,0(r4)
     378:	1080008c 	andi	r2,r2,2
     37c:	103ffd1e 	bne	r2,zero,374 <_gp+0xffff1c80>
	IOWR(base, 1, (alt_u32)xres);
     380:	21400135 	stwio	r5,4(r4)
	IOWR(base, 2, (alt_u32)pad);
     384:	21800235 	stwio	r6,8(r4)
	IOWR(base, 3, (alt_u32)kptr);
     388:	21c00335 	stwio	r7,12(r4)
	IOWR(base, 4, (alt_u32)src);
     38c:	d8800017 	ldw	r2,0(sp)
     390:	20800435 	stwio	r2,16(r4)
	IOWR(base, 5, (alt_u32)dst);
     394:	d8800117 	ldw	r2,4(sp)
     398:	20800535 	stwio	r2,20(r4)
	IOWR(base, 0, 1);
     39c:	00800044 	movi	r2,1
     3a0:	20800035 	stwio	r2,0(r4)
     3a4:	f800283a 	ret

000003a8 <main>:
}

int main()
{
     3a8:	deffb104 	addi	sp,sp,-316
	IOWR(CONVOLUTION_BASE, 0, IORD(CONVOLUTION_BASE, 0) | 0x8);	// clear irq
	alt_putchar(0x41);
}
static void init_conv_irq()
{
	IOWR(CONVOLUTION_BASE, 0, IORD(CONVOLUTION_BASE, 0) | 0x4);	// enable irq
     3ac:	00e40014 	movui	r3,36864
	IOWR(base, 5, (alt_u32)dst);
	IOWR(base, 0, 1);
}

int main()
{
     3b0:	dfc04e15 	stw	ra,312(sp)
     3b4:	ddc04d15 	stw	r23,308(sp)
     3b8:	dd804c15 	stw	r22,304(sp)
     3bc:	dd404b15 	stw	r21,300(sp)
     3c0:	dd004a15 	stw	r20,296(sp)
     3c4:	dcc04915 	stw	r19,292(sp)
     3c8:	dc804815 	stw	r18,288(sp)
     3cc:	dc404715 	stw	r17,284(sp)
     3d0:	dc004615 	stw	r16,280(sp)
	IOWR(CONVOLUTION_BASE, 0, IORD(CONVOLUTION_BASE, 0) | 0x8);	// clear irq
	alt_putchar(0x41);
}
static void init_conv_irq()
{
	IOWR(CONVOLUTION_BASE, 0, IORD(CONVOLUTION_BASE, 0) | 0x4);	// enable irq
     3d4:	18800037 	ldwio	r2,0(r3)
     3d8:	10800114 	ori	r2,r2,4
     3dc:	18800035 	stwio	r2,0(r3)
	alt_ic_isr_register(CONVOLUTION_IRQ_INTERRUPT_CONTROLLER_ID, CONVOLUTION_IRQ, handle_conv_irq, 0, 0);
     3e0:	01800034 	movhi	r6,0
     3e4:	000f883a 	mov	r7,zero
     3e8:	31806f04 	addi	r6,r6,444
     3ec:	01400044 	movi	r5,1
     3f0:	0009883a 	mov	r4,zero
     3f4:	d8000015 	stw	zero,0(sp)
     3f8:	00061880 	call	6188 <alt_ic_isr_register>
	alt_ic_irq_enable(CONVOLUTION_IRQ_INTERRUPT_CONTROLLER_ID, CONVOLUTION_IRQ);
     3fc:	01400044 	movi	r5,1
     400:	0009883a 	mov	r4,zero
     404:	000618c0 	call	618c <alt_ic_irq_enable>
	alt_u32 x, y, k;
	bfloat16 kernel[KX][KY], src[XRES][YRES], dst[XRES][YRES];

	init_conv_irq();

	printf_("Convolution Test\n");
     408:	01000034 	movhi	r4,0
     40c:	21194f04 	addi	r4,r4,25916
     410:	0001f980 	call	1f98 <printf_>
     414:	0007883a 	mov	r3,zero
bfloat16 bf_add(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) + bf2f(b));
}

void put_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y, alt_u32 data) {
	IOWR_16DIRECT(base, (x + (y * xres)) * 2, (data & 0xffff));
     418:	dd004104 	addi	r20,sp,260
     41c:	014fe004 	movi	r5,16256
	init_conv_irq();

	printf_("Convolution Test\n");

    for (y=0; y<KY; y++)
    	for (x=0; x<KX; x++)
     420:	01800184 	movi	r6,6

	init_conv_irq();

	printf_("Convolution Test\n");

    for (y=0; y<KY; y++)
     424:	01c00484 	movi	r7,18
	IOWR(base, 5, (alt_u32)dst);
	IOWR(base, 0, 1);
}

int main()
{
     428:	0005883a 	mov	r2,zero
bfloat16 bf_add(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) + bf2f(b));
}

void put_pixel(alt_u16* base, alt_u32 xres, alt_u32 x, alt_u32 y, alt_u32 data) {
	IOWR_16DIRECT(base, (x + (y * xres)) * 2, (data & 0xffff));
     42c:	1889883a 	add	r4,r3,r2
     430:	a109883a 	add	r4,r20,r4
     434:	2140002d 	sthio	r5,0(r4)
     438:	10800084 	addi	r2,r2,2
	init_conv_irq();

	printf_("Convolution Test\n");

    for (y=0; y<KY; y++)
    	for (x=0; x<KX; x++)
     43c:	11bffb1e 	bne	r2,r6,42c <_gp+0xffff1d38>
     440:	18c00184 	addi	r3,r3,6

	init_conv_irq();

	printf_("Convolution Test\n");

    for (y=0; y<KY; y++)
     444:	19fff81e 	bne	r3,r7,428 <_gp+0xffff1d34>
     448:	0025883a 	mov	r18,zero
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
    	for (x=0; x<XRES; x++) {
    		src[x][y] = f2bf((float)x);
     44c:	dcc02104 	addi	r19,sp,132
    for (y=0; y<KY; y++)
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
    	for (x=0; x<XRES; x++) {
     450:	05400204 	movi	r21,8

    for (y=0; y<KY; y++)
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
     454:	05800404 	movi	r22,16
	alt_u32 x, y, k;
	bfloat16 kernel[KX][KY], src[XRES][YRES], dst[XRES][YRES];

	init_conv_irq();

	printf_("Convolution Test\n");
     458:	0021883a 	mov	r16,zero
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     45c:	8009883a 	mov	r4,r16
     460:	8022913a 	slli	r17,r16,4
     464:	00037f40 	call	37f4 <__floatunsisf>
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
    	for (x=0; x<XRES; x++) {
    		src[x][y] = f2bf((float)x);
     468:	1004d43a 	srli	r2,r2,16
     46c:	8ca3883a 	add	r17,r17,r18
     470:	9c6f883a 	add	r23,r19,r17
     474:	b880000d 	sth	r2,0(r23)
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     478:	81001904 	addi	r4,r16,100
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
    	for (x=0; x<XRES; x++) {
    		src[x][y] = f2bf((float)x);
    		dst[x][y] = f2bf((float)(x+100));
     47c:	d8800104 	addi	r2,sp,4
     480:	1463883a 	add	r17,r2,r17
}

bfloat16 f2bf(float x) {
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     484:	00037f40 	call	37f4 <__floatunsisf>
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
    	for (x=0; x<XRES; x++) {
    		src[x][y] = f2bf((float)x);
    		dst[x][y] = f2bf((float)(x+100));
     488:	1004d43a 	srli	r2,r2,16
    for (y=0; y<KY; y++)
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
    	for (x=0; x<XRES; x++) {
     48c:	84000044 	addi	r16,r16,1
    		src[x][y] = f2bf((float)x);
    		dst[x][y] = f2bf((float)(x+100));
     490:	8880000d 	sth	r2,0(r17)
    for (y=0; y<KY; y++)
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
    	for (x=0; x<XRES; x++) {
     494:	857ff11e 	bne	r16,r21,45c <_gp+0xffff1d68>
     498:	94800084 	addi	r18,r18,2

    for (y=0; y<KY; y++)
    	for (x=0; x<KX; x++)
    		put_pixel((alt_u16*)kernel, KX, x, y, f2bf(1.0));

    for (y=0; y<YRES; y++)
     49c:	95bfee1e 	bne	r18,r22,458 <_gp+0xffff1d64>
    	for (x=0; x<XRES; x++) {
    		src[x][y] = f2bf((float)x);
    		dst[x][y] = f2bf((float)(x+100));
    	}
	IOWR(CONVOLUTION_BASE, 1, 2);
     4a0:	00a40114 	movui	r2,36868
     4a4:	00c00084 	movi	r3,2
     4a8:	10c00035 	stwio	r3,0(r2)
	IOWR(CONVOLUTION_BASE, 2, 1);
     4ac:	00a40214 	movui	r2,36872
     4b0:	00c00044 	movi	r3,1
     4b4:	10c00035 	stwio	r3,0(r2)
	IOWR(CONVOLUTION_BASE, 3, (alt_u32)kernel);
     4b8:	00a40314 	movui	r2,36876
     4bc:	15000035 	stwio	r20,0(r2)
	IOWR(CONVOLUTION_BASE, 4, (alt_u32)src);
     4c0:	00a40414 	movui	r2,36880
     4c4:	14c00035 	stwio	r19,0(r2)
	IOWR(CONVOLUTION_BASE, 5, (alt_u32)dst);
     4c8:	00a40514 	movui	r2,36884
     4cc:	d8c00104 	addi	r3,sp,4
     4d0:	10c00035 	stwio	r3,0(r2)
	IOWR(CONVOLUTION_BASE, 0, 5);
     4d4:	00a40014 	movui	r2,36864
     4d8:	00c00144 	movi	r3,5
     4dc:	10c00035 	stwio	r3,0(r2)

	while ((IORD(CONVOLUTION_BASE, 0) & 0x2) != 0);
     4e0:	10c00037 	ldwio	r3,0(r2)
     4e4:	18c0008c 	andi	r3,r3,2
     4e8:	183ffd1e 	bne	r3,zero,4e0 <_gp+0xffff1dec>

	printf_("Complete\n");
     4ec:	01000034 	movhi	r4,0
     4f0:	21195404 	addi	r4,r4,25936
     4f4:	0001f980 	call	1f98 <printf_>
    printf_("========================================\n");
     4f8:	01000034 	movhi	r4,0
     4fc:	21195704 	addi	r4,r4,25948
     500:	0001f980 	call	1f98 <printf_>
	show_featuremap((alt_u16*)dst, XRES, YRES);
     504:	01800204 	movi	r6,8
     508:	300b883a 	mov	r5,r6
     50c:	d9000104 	addi	r4,sp,4
     510:	00002d00 	call	2d0 <show_featuremap>

	k = 0;
     514:	0021883a 	mov	r16,zero
    while (1) {
        usleep(200000);
        k++;
        if (k>=50) {
     518:	04400c44 	movi	r17,49
    printf_("========================================\n");
	show_featuremap((alt_u16*)dst, XRES, YRES);

	k = 0;
    while (1) {
        usleep(200000);
     51c:	010000f4 	movhi	r4,3
     520:	21035004 	addi	r4,r4,3392
        k++;
     524:	84000044 	addi	r16,r16,1
    printf_("========================================\n");
	show_featuremap((alt_u16*)dst, XRES, YRES);

	k = 0;
    while (1) {
        usleep(200000);
     528:	00063d00 	call	63d0 <usleep>
        k++;
        if (k>=50) {
     52c:	8c00042e 	bgeu	r17,r16,540 <main+0x198>
        	printf_("\n");
     530:	01000034 	movhi	r4,0
     534:	21196104 	addi	r4,r4,25988
     538:	0001f980 	call	1f98 <printf_>
        	k = 0;
     53c:	0021883a 	mov	r16,zero
        }
		printf_("x");
     540:	01000034 	movhi	r4,0
     544:	21196204 	addi	r4,r4,25992
     548:	0001f980 	call	1f98 <printf_>

    }
     54c:	003ff306 	br	51c <_gp+0xffff1e28>

00000550 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
     550:	31c0022e 	bgeu	r6,r7,55c <_out_buffer+0xc>
    ((char*)buffer)[idx] = character;
     554:	298d883a 	add	r6,r5,r6
     558:	31000005 	stb	r4,0(r6)
     55c:	f800283a 	ret

00000560 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
     560:	f800283a 	ret

00000564 <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
     564:	defff604 	addi	sp,sp,-40
     568:	dc800215 	stw	r18,8(sp)
     56c:	dc800d17 	ldw	r18,52(sp)
     570:	dd800615 	stw	r22,24(sp)
     574:	dd400515 	stw	r21,20(sp)
     578:	dd000415 	stw	r20,16(sp)
     57c:	dcc00315 	stw	r19,12(sp)
     580:	dc400115 	stw	r17,4(sp)
     584:	dc000015 	stw	r16,0(sp)
     588:	dfc00915 	stw	ra,36(sp)
     58c:	df000815 	stw	fp,32(sp)
     590:	ddc00715 	stw	r23,28(sp)
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
     594:	908000cc 	andi	r2,r18,3
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
     598:	2027883a 	mov	r19,r4
     59c:	2829883a 	mov	r20,r5
     5a0:	3023883a 	mov	r17,r6
     5a4:	382b883a 	mov	r21,r7
     5a8:	dc000b17 	ldw	r16,44(sp)
     5ac:	dd800c17 	ldw	r22,48(sp)
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
     5b0:	1000021e 	bne	r2,zero,5bc <_out_rev+0x58>
     5b4:	81afc83a 	sub	r23,r16,r6
     5b8:	00000406 	br	5cc <_out_rev+0x68>
     5bc:	ddc00a17 	ldw	r23,40(sp)
     5c0:	bc2f883a 	add	r23,r23,r16
     5c4:	81a1883a 	add	r16,r16,r6
     5c8:	00000906 	br	5f0 <_out_rev+0x8c>
    for (size_t i = len; i < width; i++) {
     5cc:	35c5883a 	add	r2,r6,r23
     5d0:	15bffa2e 	bgeu	r2,r22,5bc <_gp+0xffff1ec8>
      out(' ', buffer, idx++, maxlen);
     5d4:	a80f883a 	mov	r7,r21
     5d8:	a00b883a 	mov	r5,r20
     5dc:	01000804 	movi	r4,32
     5e0:	37000044 	addi	fp,r6,1
     5e4:	983ee83a 	callr	r19
     5e8:	e00d883a 	mov	r6,fp
     5ec:	003ff706 	br	5cc <_gp+0xffff1ed8>
     5f0:	bdffffc4 	addi	r23,r23,-1
    }
  }

  // reverse string
  while (len) {
     5f4:	34000726 	beq	r6,r16,614 <_out_rev+0xb0>
    out(buf[--len], buffer, idx++, maxlen);
     5f8:	b9000007 	ldb	r4,0(r23)
     5fc:	a80f883a 	mov	r7,r21
     600:	a00b883a 	mov	r5,r20
     604:	37000044 	addi	fp,r6,1
     608:	983ee83a 	callr	r19
     60c:	e00d883a 	mov	r6,fp
     610:	003ff706 	br	5f0 <_gp+0xffff1efc>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
     614:	9480008c 	andi	r18,r18,2
     618:	90000a26 	beq	r18,zero,644 <_out_rev+0xe0>
    while (idx - start_idx < width) {
     61c:	8445c83a 	sub	r2,r16,r17
     620:	1580082e 	bgeu	r2,r22,644 <_out_rev+0xe0>
      out(' ', buffer, idx++, maxlen);
     624:	800d883a 	mov	r6,r16
     628:	84800044 	addi	r18,r16,1
     62c:	a80f883a 	mov	r7,r21
     630:	a00b883a 	mov	r5,r20
     634:	01000804 	movi	r4,32
     638:	983ee83a 	callr	r19
     63c:	9021883a 	mov	r16,r18
     640:	003ff606 	br	61c <_gp+0xffff1f28>
    }
  }

  return idx;
}
     644:	8005883a 	mov	r2,r16
     648:	dfc00917 	ldw	ra,36(sp)
     64c:	df000817 	ldw	fp,32(sp)
     650:	ddc00717 	ldw	r23,28(sp)
     654:	dd800617 	ldw	r22,24(sp)
     658:	dd400517 	ldw	r21,20(sp)
     65c:	dd000417 	ldw	r20,16(sp)
     660:	dcc00317 	ldw	r19,12(sp)
     664:	dc800217 	ldw	r18,8(sp)
     668:	dc400117 	ldw	r17,4(sp)
     66c:	dc000017 	ldw	r16,0(sp)
     670:	dec00a04 	addi	sp,sp,40
     674:	f800283a 	ret

00000678 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
     678:	deffff04 	addi	sp,sp,-4
     67c:	da000717 	ldw	r8,28(sp)
     680:	dfc00015 	stw	ra,0(sp)
     684:	d8c00117 	ldw	r3,4(sp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
     688:	4300008c 	andi	r12,r8,2
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
     68c:	d8800217 	ldw	r2,8(sp)
     690:	da800317 	ldw	r10,12(sp)
     694:	dac00417 	ldw	r11,16(sp)
     698:	db800517 	ldw	r14,20(sp)
     69c:	da400617 	ldw	r9,24(sp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
     6a0:	60001a1e 	bne	r12,zero,70c <_ntoa_format+0x94>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     6a4:	48000726 	beq	r9,zero,6c4 <_ntoa_format+0x4c>
     6a8:	4300004c 	andi	r12,r8,1
     6ac:	60000526 	beq	r12,zero,6c4 <_ntoa_format+0x4c>
     6b0:	53003fcc 	andi	r12,r10,255
     6b4:	6000021e 	bne	r12,zero,6c0 <_ntoa_format+0x48>
     6b8:	4300030c 	andi	r12,r8,12
     6bc:	60000126 	beq	r12,zero,6c4 <_ntoa_format+0x4c>
      width--;
     6c0:	4a7fffc4 	addi	r9,r9,-1
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     6c4:	030007c4 	movi	r12,31
      buf[len++] = '0';
     6c8:	03400c04 	movi	r13,48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     6cc:	13800436 	bltu	r2,r14,6e0 <_ntoa_format+0x68>
      buf[len++] = '0';
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     6d0:	4340004c 	andi	r13,r8,1
     6d4:	030007c4 	movi	r12,31
      buf[len++] = '0';
     6d8:	03c00c04 	movi	r15,48
     6dc:	00000a06 	br	708 <_ntoa_format+0x90>
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     6e0:	60bffb36 	bltu	r12,r2,6d0 <_gp+0xffff1fdc>
      buf[len++] = '0';
     6e4:	189f883a 	add	r15,r3,r2
     6e8:	7b400005 	stb	r13,0(r15)
     6ec:	10800044 	addi	r2,r2,1
     6f0:	003ff606 	br	6cc <_gp+0xffff1fd8>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     6f4:	1240052e 	bgeu	r2,r9,70c <_ntoa_format+0x94>
     6f8:	60800436 	bltu	r12,r2,70c <_ntoa_format+0x94>
      buf[len++] = '0';
     6fc:	18bf883a 	add	ra,r3,r2
     700:	fbc00005 	stb	r15,0(ra)
     704:	10800044 	addi	r2,r2,1
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     708:	683ffa1e 	bne	r13,zero,6f4 <_gp+0xffff2000>
      buf[len++] = '0';
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
     70c:	4300040c 	andi	r12,r8,16
     710:	60002726 	beq	r12,zero,7b0 <_ntoa_format+0x138>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
     714:	4301000c 	andi	r12,r8,1024
     718:	03400404 	movi	r13,16
     71c:	6000091e 	bne	r12,zero,744 <_ntoa_format+0xcc>
     720:	10000826 	beq	r2,zero,744 <_ntoa_format+0xcc>
     724:	13800126 	beq	r2,r14,72c <_ntoa_format+0xb4>
     728:	1240061e 	bne	r2,r9,744 <_ntoa_format+0xcc>
      len--;
     72c:	133fffc4 	addi	r12,r2,-1
      if (len && (base == 16U)) {
     730:	60000326 	beq	r12,zero,740 <_ntoa_format+0xc8>
     734:	5b400f1e 	bne	r11,r13,774 <_ntoa_format+0xfc>
        len--;
     738:	10bfff84 	addi	r2,r2,-2
     73c:	00000206 	br	748 <_ntoa_format+0xd0>
     740:	0005883a 	mov	r2,zero
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     744:	5b400c1e 	bne	r11,r13,778 <_ntoa_format+0x100>
     748:	42c0080c 	andi	r11,r8,32
     74c:	030007c4 	movi	r12,31
     750:	5800041e 	bne	r11,zero,764 <_ntoa_format+0xec>
     754:	60802836 	bltu	r12,r2,7f8 <_ntoa_format+0x180>
      buf[len++] = 'x';
     758:	1897883a 	add	r11,r3,r2
     75c:	03001e04 	movi	r12,120
     760:	00000b06 	br	790 <_ntoa_format+0x118>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     764:	60802436 	bltu	r12,r2,7f8 <_ntoa_format+0x180>
      buf[len++] = 'X';
     768:	1897883a 	add	r11,r3,r2
     76c:	03001604 	movi	r12,88
     770:	00000706 	br	790 <_ntoa_format+0x118>
     774:	6005883a 	mov	r2,r12
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     778:	03000084 	movi	r12,2
     77c:	5b00061e 	bne	r11,r12,798 <_ntoa_format+0x120>
     780:	02c007c4 	movi	r11,31
     784:	58801c36 	bltu	r11,r2,7f8 <_ntoa_format+0x180>
      buf[len++] = 'b';
     788:	1897883a 	add	r11,r3,r2
     78c:	03001884 	movi	r12,98
     790:	5b000005 	stb	r12,0(r11)
     794:	10800044 	addi	r2,r2,1
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
     798:	02c007c4 	movi	r11,31
     79c:	58801636 	bltu	r11,r2,7f8 <_ntoa_format+0x180>
      buf[len++] = '0';
     7a0:	1897883a 	add	r11,r3,r2
     7a4:	03000c04 	movi	r12,48
     7a8:	5b000005 	stb	r12,0(r11)
     7ac:	10800044 	addi	r2,r2,1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
     7b0:	02c007c4 	movi	r11,31
     7b4:	58801036 	bltu	r11,r2,7f8 <_ntoa_format+0x180>
    if (negative) {
     7b8:	52803fcc 	andi	r10,r10,255
     7bc:	50000326 	beq	r10,zero,7cc <_ntoa_format+0x154>
      buf[len++] = '-';
     7c0:	1895883a 	add	r10,r3,r2
     7c4:	02c00b44 	movi	r11,45
     7c8:	00000906 	br	7f0 <_ntoa_format+0x178>
    }
    else if (flags & FLAGS_PLUS) {
     7cc:	4280010c 	andi	r10,r8,4
     7d0:	50000326 	beq	r10,zero,7e0 <_ntoa_format+0x168>
      buf[len++] = '+';  // ignore the space if the '+' exists
     7d4:	1895883a 	add	r10,r3,r2
     7d8:	02c00ac4 	movi	r11,43
     7dc:	00000406 	br	7f0 <_ntoa_format+0x178>
    }
    else if (flags & FLAGS_SPACE) {
     7e0:	4280020c 	andi	r10,r8,8
     7e4:	50000426 	beq	r10,zero,7f8 <_ntoa_format+0x180>
      buf[len++] = ' ';
     7e8:	1895883a 	add	r10,r3,r2
     7ec:	02c00804 	movi	r11,32
     7f0:	52c00005 	stb	r11,0(r10)
     7f4:	10800044 	addi	r2,r2,1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
     7f8:	da000415 	stw	r8,16(sp)
     7fc:	da400315 	stw	r9,12(sp)
     800:	d8800215 	stw	r2,8(sp)
     804:	d8c00115 	stw	r3,4(sp)
}
     808:	dfc00017 	ldw	ra,0(sp)
     80c:	dec00104 	addi	sp,sp,4
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
     810:	00005641 	jmpi	564 <_out_rev>

00000814 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     814:	deffe404 	addi	sp,sp,-112
     818:	d8c01d17 	ldw	r3,116(sp)
     81c:	dc001215 	stw	r16,72(sp)
     820:	dc001c17 	ldw	r16,112(sp)
     824:	dd801815 	stw	r22,96(sp)
     828:	dd401715 	stw	r21,92(sp)
     82c:	dd001615 	stw	r20,88(sp)
     830:	dcc01515 	stw	r19,84(sp)
     834:	dc801415 	stw	r18,80(sp)
     838:	dfc01b15 	stw	ra,108(sp)
     83c:	df001a15 	stw	fp,104(sp)
     840:	ddc01915 	stw	r23,100(sp)
     844:	dc401315 	stw	r17,76(sp)
     848:	d8c00f15 	stw	r3,60(sp)
     84c:	2029883a 	mov	r20,r4
     850:	282b883a 	mov	r21,r5
     854:	302d883a 	mov	r22,r6
     858:	dcc01e17 	ldw	r19,120(sp)
     85c:	dc802117 	ldw	r18,132(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
     860:	8000021e 	bne	r16,zero,86c <_ntoa_long+0x58>
    flags &= ~FLAGS_HASH;
     864:	00bffbc4 	movi	r2,-17
     868:	90a4703a 	and	r18,r18,r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
     86c:	9081000c 	andi	r2,r18,1024
     870:	10000126 	beq	r2,zero,878 <_ntoa_long+0x64>
     874:	80002726 	beq	r16,zero,914 <_ntoa_long+0x100>
     878:	9080080c 	andi	r2,r18,32
     87c:	10000226 	beq	r2,zero,888 <_ntoa_long+0x74>
     880:	04401044 	movi	r17,65
     884:	00000106 	br	88c <_ntoa_long+0x78>
     888:	04401844 	movi	r17,97
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     88c:	000d883a 	mov	r6,zero
     890:	07000244 	movi	fp,9
     894:	8c7ffd84 	addi	r17,r17,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     898:	05c00804 	movi	r23,32
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
     89c:	8009883a 	mov	r4,r16
     8a0:	980b883a 	mov	r5,r19
     8a4:	d9801015 	stw	r6,64(sp)
     8a8:	d9c01115 	stw	r7,68(sp)
     8ac:	0002e7c0 	call	2e7c <__umodsi3>
     8b0:	d9801017 	ldw	r6,64(sp)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     8b4:	11003fcc 	andi	r4,r2,255
     8b8:	2100201c 	xori	r4,r4,128
     8bc:	213fe004 	addi	r4,r4,-128
     8c0:	32000044 	addi	r8,r6,1
     8c4:	d9c01117 	ldw	r7,68(sp)
     8c8:	e1000216 	blt	fp,r4,8d4 <_ntoa_long+0xc0>
     8cc:	10800c04 	addi	r2,r2,48
     8d0:	00000106 	br	8d8 <_ntoa_long+0xc4>
     8d4:	8885883a 	add	r2,r17,r2
     8d8:	d8c00704 	addi	r3,sp,28
     8dc:	198d883a 	add	r6,r3,r6
     8e0:	30800005 	stb	r2,0(r6)
      value /= base;
     8e4:	8009883a 	mov	r4,r16
     8e8:	980b883a 	mov	r5,r19
     8ec:	d9c01115 	stw	r7,68(sp)
     8f0:	da001015 	stw	r8,64(sp)
     8f4:	0002e180 	call	2e18 <__udivsi3>
     8f8:	1021883a 	mov	r16,r2
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     8fc:	d9c01117 	ldw	r7,68(sp)
     900:	da001017 	ldw	r8,64(sp)
     904:	10000426 	beq	r2,zero,918 <_ntoa_long+0x104>
     908:	400d883a 	mov	r6,r8
     90c:	45ffe31e 	bne	r8,r23,89c <_gp+0xffff21a8>
     910:	00000106 	br	918 <_ntoa_long+0x104>

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
     914:	0011883a 	mov	r8,zero
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
     918:	d8802017 	ldw	r2,128(sp)
     91c:	d8c00f17 	ldw	r3,60(sp)
     920:	dc800615 	stw	r18,24(sp)
     924:	d8800515 	stw	r2,20(sp)
     928:	d8801f17 	ldw	r2,124(sp)
     92c:	1c803fcc 	andi	r18,r3,255
     930:	dcc00315 	stw	r19,12(sp)
     934:	d8800415 	stw	r2,16(sp)
     938:	d8800704 	addi	r2,sp,28
     93c:	dc800215 	stw	r18,8(sp)
     940:	da000115 	stw	r8,4(sp)
     944:	d8800015 	stw	r2,0(sp)
     948:	b00d883a 	mov	r6,r22
     94c:	a80b883a 	mov	r5,r21
     950:	a009883a 	mov	r4,r20
     954:	00006780 	call	678 <_ntoa_format>
}
     958:	dfc01b17 	ldw	ra,108(sp)
     95c:	df001a17 	ldw	fp,104(sp)
     960:	ddc01917 	ldw	r23,100(sp)
     964:	dd801817 	ldw	r22,96(sp)
     968:	dd401717 	ldw	r21,92(sp)
     96c:	dd001617 	ldw	r20,88(sp)
     970:	dcc01517 	ldw	r19,84(sp)
     974:	dc801417 	ldw	r18,80(sp)
     978:	dc401317 	ldw	r17,76(sp)
     97c:	dc001217 	ldw	r16,72(sp)
     980:	dec01c04 	addi	sp,sp,112
     984:	f800283a 	ret

00000988 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     988:	deffe204 	addi	sp,sp,-120
     98c:	d8802017 	ldw	r2,128(sp)
     990:	da801e17 	ldw	r10,120(sp)
     994:	dac01f17 	ldw	r11,124(sp)
     998:	dd801a15 	stw	r22,104(sp)
     99c:	dd401915 	stw	r21,100(sp)
     9a0:	dd001815 	stw	r20,96(sp)
     9a4:	dcc01715 	stw	r19,92(sp)
     9a8:	dc801615 	stw	r18,88(sp)
     9ac:	dc401515 	stw	r17,84(sp)
     9b0:	d8801015 	stw	r2,64(sp)
     9b4:	dfc01d15 	stw	ra,116(sp)
     9b8:	df001c15 	stw	fp,112(sp)
     9bc:	ddc01b15 	stw	r23,108(sp)
     9c0:	dc001415 	stw	r16,80(sp)
     9c4:	d9000f15 	stw	r4,60(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
     9c8:	52c4b03a 	or	r2,r10,r11


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     9cc:	2829883a 	mov	r20,r5
     9d0:	302b883a 	mov	r21,r6
     9d4:	382d883a 	mov	r22,r7
     9d8:	dc402117 	ldw	r17,132(sp)
     9dc:	dc802217 	ldw	r18,136(sp)
     9e0:	dcc02517 	ldw	r19,148(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
     9e4:	1000021e 	bne	r2,zero,9f0 <_ntoa_long_long+0x68>
    flags &= ~FLAGS_HASH;
     9e8:	00fffbc4 	movi	r3,-17
     9ec:	98e6703a 	and	r19,r19,r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
     9f0:	98c1000c 	andi	r3,r19,1024
     9f4:	18000126 	beq	r3,zero,9fc <_ntoa_long_long+0x74>
     9f8:	10002d26 	beq	r2,zero,ab0 <_ntoa_long_long+0x128>
     9fc:	9880080c 	andi	r2,r19,32
     a00:	10000226 	beq	r2,zero,a0c <_ntoa_long_long+0x84>
     a04:	04001044 	movi	r16,65
     a08:	00000106 	br	a10 <_ntoa_long_long+0x88>
     a0c:	04001844 	movi	r16,97
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     a10:	0013883a 	mov	r9,zero
     a14:	07000244 	movi	fp,9
     a18:	843ffd84 	addi	r16,r16,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     a1c:	05c00804 	movi	r23,32
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
     a20:	5009883a 	mov	r4,r10
     a24:	580b883a 	mov	r5,r11
     a28:	880d883a 	mov	r6,r17
     a2c:	900f883a 	mov	r7,r18
     a30:	da401115 	stw	r9,68(sp)
     a34:	da801215 	stw	r10,72(sp)
     a38:	dac01315 	stw	r11,76(sp)
     a3c:	000275c0 	call	275c <__umoddi3>
     a40:	da401117 	ldw	r9,68(sp)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     a44:	10c03fcc 	andi	r3,r2,255
     a48:	18c0201c 	xori	r3,r3,128
     a4c:	18ffe004 	addi	r3,r3,-128
     a50:	4b000044 	addi	r12,r9,1
     a54:	da801217 	ldw	r10,72(sp)
     a58:	dac01317 	ldw	r11,76(sp)
     a5c:	e0c00216 	blt	fp,r3,a68 <_ntoa_long_long+0xe0>
     a60:	10800c04 	addi	r2,r2,48
     a64:	00000106 	br	a6c <_ntoa_long_long+0xe4>
     a68:	8085883a 	add	r2,r16,r2
     a6c:	d8c00704 	addi	r3,sp,28
     a70:	1a53883a 	add	r9,r3,r9
     a74:	48800005 	stb	r2,0(r9)
      value /= base;
     a78:	5009883a 	mov	r4,r10
     a7c:	580b883a 	mov	r5,r11
     a80:	880d883a 	mov	r6,r17
     a84:	900f883a 	mov	r7,r18
     a88:	db001115 	stw	r12,68(sp)
     a8c:	00021600 	call	2160 <__udivdi3>
     a90:	1015883a 	mov	r10,r2
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     a94:	10c4b03a 	or	r2,r2,r3
  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
     a98:	1817883a 	mov	r11,r3
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     a9c:	db001117 	ldw	r12,68(sp)
     aa0:	10000426 	beq	r2,zero,ab4 <_ntoa_long_long+0x12c>
     aa4:	6013883a 	mov	r9,r12
     aa8:	65ffdd1e 	bne	r12,r23,a20 <_gp+0xffff232c>
     aac:	00000106 	br	ab4 <_ntoa_long_long+0x12c>
// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
     ab0:	0019883a 	mov	r12,zero
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
     ab4:	d8802417 	ldw	r2,144(sp)
     ab8:	d9000f17 	ldw	r4,60(sp)
     abc:	dc400315 	stw	r17,12(sp)
     ac0:	d8800515 	stw	r2,20(sp)
     ac4:	d8802317 	ldw	r2,140(sp)
     ac8:	d8c00704 	addi	r3,sp,28
     acc:	dcc00615 	stw	r19,24(sp)
     ad0:	d8800415 	stw	r2,16(sp)
     ad4:	d8801017 	ldw	r2,64(sp)
     ad8:	db000115 	stw	r12,4(sp)
     adc:	d8c00015 	stw	r3,0(sp)
     ae0:	14403fcc 	andi	r17,r2,255
     ae4:	dc400215 	stw	r17,8(sp)
     ae8:	b00f883a 	mov	r7,r22
     aec:	a80d883a 	mov	r6,r21
     af0:	a00b883a 	mov	r5,r20
     af4:	00006780 	call	678 <_ntoa_format>
}
     af8:	dfc01d17 	ldw	ra,116(sp)
     afc:	df001c17 	ldw	fp,112(sp)
     b00:	ddc01b17 	ldw	r23,108(sp)
     b04:	dd801a17 	ldw	r22,104(sp)
     b08:	dd401917 	ldw	r21,100(sp)
     b0c:	dd001817 	ldw	r20,96(sp)
     b10:	dcc01717 	ldw	r19,92(sp)
     b14:	dc801617 	ldw	r18,88(sp)
     b18:	dc401517 	ldw	r17,84(sp)
     b1c:	dc001417 	ldw	r16,80(sp)
     b20:	dec01e04 	addi	sp,sp,120
     b24:	f800283a 	ret

00000b28 <_out_char>:

// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
     b28:	21003fcc 	andi	r4,r4,255
     b2c:	2100201c 	xori	r4,r4,128
     b30:	213fe004 	addi	r4,r4,-128
     b34:	20000126 	beq	r4,zero,b3c <_out_char+0x14>
    _putchar(character);
     b38:	00001d41 	jmpi	1d4 <_putchar>
     b3c:	f800283a 	ret

00000b40 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)idx; (void)maxlen;
  if (character) {
     b40:	21003fcc 	andi	r4,r4,255
     b44:	2100201c 	xori	r4,r4,128
     b48:	213fe004 	addi	r4,r4,-128
     b4c:	20000326 	beq	r4,zero,b5c <_out_fct+0x1c>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
     b50:	28800017 	ldw	r2,0(r5)
     b54:	29400117 	ldw	r5,4(r5)
     b58:	1000683a 	jmp	r2
     b5c:	f800283a 	ret

00000b60 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
     b60:	deffe104 	addi	sp,sp,-124
     b64:	dc401615 	stw	r17,88(sp)
     b68:	dc001515 	stw	r16,84(sp)
     b6c:	dc401f17 	ldw	r17,124(sp)
     b70:	dc002017 	ldw	r16,128(sp)
     b74:	df001d15 	stw	fp,116(sp)
     b78:	d9000d15 	stw	r4,52(sp)
     b7c:	d9400e15 	stw	r5,56(sp)
     b80:	d9800f15 	stw	r6,60(sp)
     b84:	3839883a 	mov	fp,r7

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
     b88:	880d883a 	mov	r6,r17
     b8c:	800f883a 	mov	r7,r16
     b90:	8809883a 	mov	r4,r17
     b94:	800b883a 	mov	r5,r16
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
     b98:	dd801b15 	stw	r22,108(sp)
     b9c:	dd001915 	stw	r20,100(sp)
     ba0:	dc801715 	stw	r18,92(sp)
     ba4:	dfc01e15 	stw	ra,120(sp)
     ba8:	ddc01c15 	stw	r23,112(sp)
     bac:	dd401a15 	stw	r21,104(sp)
     bb0:	dcc01815 	stw	r19,96(sp)
     bb4:	dc802117 	ldw	r18,132(sp)
     bb8:	dd802217 	ldw	r22,136(sp)
     bbc:	dd002317 	ldw	r20,140(sp)

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
     bc0:	0004b600 	call	4b60 <__eqdf2>
     bc4:	10000726 	beq	r2,zero,be4 <_ftoa+0x84>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
     bc8:	008000c4 	movi	r2,3
     bcc:	d8800115 	stw	r2,4(sp)
     bd0:	00800034 	movhi	r2,0
     bd4:	dd000315 	stw	r20,12(sp)
     bd8:	dd800215 	stw	r22,8(sp)
     bdc:	10996604 	addi	r2,r2,26008
     be0:	00002106 	br	c68 <_ftoa+0x108>
  if (value < -DBL_MAX)
     be4:	01bfffc4 	movi	r6,-1
     be8:	01fffc34 	movhi	r7,65520
     bec:	398f883a 	add	r7,r7,r6
     bf0:	8809883a 	mov	r4,r17
     bf4:	800b883a 	mov	r5,r16
     bf8:	0004cc40 	call	4cc4 <__ledf2>
     bfc:	1000070e 	bge	r2,zero,c1c <_ftoa+0xbc>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
     c00:	00800104 	movi	r2,4
     c04:	d8800115 	stw	r2,4(sp)
     c08:	00800034 	movhi	r2,0
     c0c:	dd000315 	stw	r20,12(sp)
     c10:	dd800215 	stw	r22,8(sp)
     c14:	10996704 	addi	r2,r2,26012
     c18:	00001306 	br	c68 <_ftoa+0x108>
  if (value > DBL_MAX)
     c1c:	01bfffc4 	movi	r6,-1
     c20:	01dffc34 	movhi	r7,32752
     c24:	398f883a 	add	r7,r7,r6
     c28:	8809883a 	mov	r4,r17
     c2c:	800b883a 	mov	r5,r16
     c30:	0004be80 	call	4be8 <__gedf2>
     c34:	00800e0e 	bge	zero,r2,c70 <_ftoa+0x110>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
     c38:	a080010c 	andi	r2,r20,4
     c3c:	10000426 	beq	r2,zero,c50 <_ftoa+0xf0>
     c40:	00800034 	movhi	r2,0
     c44:	10996304 	addi	r2,r2,25996
     c48:	00c00104 	movi	r3,4
     c4c:	00000306 	br	c5c <_ftoa+0xfc>
     c50:	00800034 	movhi	r2,0
     c54:	10996504 	addi	r2,r2,26004
     c58:	00c000c4 	movi	r3,3
     c5c:	dd000315 	stw	r20,12(sp)
     c60:	dd800215 	stw	r22,8(sp)
     c64:	d8c00115 	stw	r3,4(sp)
     c68:	d8800015 	stw	r2,0(sp)
     c6c:	0000f806 	br	1050 <_ftoa+0x4f0>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
     c70:	01d073b4 	movhi	r7,16846
     c74:	000d883a 	mov	r6,zero
     c78:	39f35944 	addi	r7,r7,-12955
     c7c:	8809883a 	mov	r4,r17
     c80:	800b883a 	mov	r5,r16
     c84:	0004be80 	call	4be8 <__gedf2>
     c88:	00800716 	blt	zero,r2,ca8 <_ftoa+0x148>
     c8c:	01f073b4 	movhi	r7,49614
     c90:	000d883a 	mov	r6,zero
     c94:	39f35944 	addi	r7,r7,-12955
     c98:	8809883a 	mov	r4,r17
     c9c:	800b883a 	mov	r5,r16
     ca0:	0004cc40 	call	4cc4 <__ledf2>
     ca4:	10000b0e 	bge	r2,zero,cd4 <_ftoa+0x174>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
     ca8:	d9800f17 	ldw	r6,60(sp)
     cac:	d9400e17 	ldw	r5,56(sp)
     cb0:	d9000d17 	ldw	r4,52(sp)
     cb4:	dd000415 	stw	r20,16(sp)
     cb8:	dd800315 	stw	r22,12(sp)
     cbc:	dc800215 	stw	r18,8(sp)
     cc0:	dc400015 	stw	r17,0(sp)
     cc4:	dc000115 	stw	r16,4(sp)
     cc8:	e00f883a 	mov	r7,fp
     ccc:	00010940 	call	1094 <_etoa>
     cd0:	0000e406 	br	1064 <_ftoa+0x504>
#endif
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
     cd4:	000d883a 	mov	r6,zero
     cd8:	000f883a 	mov	r7,zero
     cdc:	8809883a 	mov	r4,r17
     ce0:	800b883a 	mov	r5,r16
     ce4:	0004cc40 	call	4cc4 <__ledf2>
     ce8:	10000a0e 	bge	r2,zero,d14 <_ftoa+0x1b4>
    negative = true;
    value = 0 - value;
     cec:	880d883a 	mov	r6,r17
     cf0:	800f883a 	mov	r7,r16
     cf4:	0009883a 	mov	r4,zero
     cf8:	000b883a 	mov	r5,zero
     cfc:	00056240 	call	5624 <__subdf3>
     d00:	1023883a 	mov	r17,r2
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
    negative = true;
     d04:	00800044 	movi	r2,1
    value = 0 - value;
     d08:	1821883a 	mov	r16,r3
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
    negative = true;
     d0c:	d8801005 	stb	r2,64(sp)
     d10:	00000106 	br	d18 <_ftoa+0x1b8>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
     d14:	d8001005 	stb	zero,64(sp)
    negative = true;
    value = 0 - value;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
     d18:	a081000c 	andi	r2,r20,1024
     d1c:	1000011e 	bne	r2,zero,d24 <_ftoa+0x1c4>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
     d20:	04800184 	movi	r18,6
     d24:	002b883a 	mov	r21,zero
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     d28:	00800244 	movi	r2,9
    buf[len++] = '0';
     d2c:	00c00c04 	movi	r3,48
  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     d30:	01000804 	movi	r4,32
     d34:	1480062e 	bgeu	r2,r18,d50 <_ftoa+0x1f0>
    buf[len++] = '0';
     d38:	d9800504 	addi	r6,sp,20
     d3c:	354b883a 	add	r5,r6,r21
     d40:	28c00005 	stb	r3,0(r5)
     d44:	ad400044 	addi	r21,r21,1
    prec--;
     d48:	94bfffc4 	addi	r18,r18,-1
  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     d4c:	a93ff91e 	bne	r21,r4,d34 <_gp+0xffff2640>
    buf[len++] = '0';
    prec--;
  }

  int whole = (int)value;
     d50:	800b883a 	mov	r5,r16
     d54:	8809883a 	mov	r4,r17
     d58:	0005f200 	call	5f20 <__fixdfsi>
     d5c:	1027883a 	mov	r19,r2
  double tmp = (value - whole) * pow10[prec];
     d60:	900490fa 	slli	r2,r18,3
     d64:	00c00034 	movhi	r3,0
     d68:	18d96904 	addi	r3,r3,26020
     d6c:	1885883a 	add	r2,r3,r2
     d70:	10c00017 	ldw	r3,0(r2)
     d74:	10800117 	ldw	r2,4(r2)
     d78:	9809883a 	mov	r4,r19
     d7c:	d8c01115 	stw	r3,68(sp)
     d80:	d8801215 	stw	r2,72(sp)
     d84:	0005fa00 	call	5fa0 <__floatsidf>
     d88:	100d883a 	mov	r6,r2
     d8c:	180f883a 	mov	r7,r3
     d90:	8809883a 	mov	r4,r17
     d94:	800b883a 	mov	r5,r16
     d98:	00056240 	call	5624 <__subdf3>
     d9c:	d9801117 	ldw	r6,68(sp)
     da0:	d9c01217 	ldw	r7,72(sp)
     da4:	1009883a 	mov	r4,r2
     da8:	180b883a 	mov	r5,r3
     dac:	0004db80 	call	4db8 <__muldf3>
  unsigned long frac = (unsigned long)tmp;
     db0:	180b883a 	mov	r5,r3
     db4:	1009883a 	mov	r4,r2
     db8:	d8c01415 	stw	r3,80(sp)
     dbc:	d8801315 	stw	r2,76(sp)
     dc0:	00020ec0 	call	20ec <__fixunsdfsi>
  diff = tmp - frac;
     dc4:	1009883a 	mov	r4,r2
    prec--;
  }

  int whole = (int)value;
  double tmp = (value - whole) * pow10[prec];
  unsigned long frac = (unsigned long)tmp;
     dc8:	102f883a 	mov	r23,r2
  diff = tmp - frac;
     dcc:	000607c0 	call	607c <__floatunsidf>
     dd0:	da401417 	ldw	r9,80(sp)
     dd4:	da801317 	ldw	r10,76(sp)
     dd8:	100d883a 	mov	r6,r2
     ddc:	480b883a 	mov	r5,r9
     de0:	5009883a 	mov	r4,r10
     de4:	180f883a 	mov	r7,r3
     de8:	00056240 	call	5624 <__subdf3>

  if (diff > 0.5) {
     dec:	180b883a 	mov	r5,r3
     df0:	000d883a 	mov	r6,zero
     df4:	01cff834 	movhi	r7,16352
     df8:	1009883a 	mov	r4,r2
     dfc:	d8c01315 	stw	r3,76(sp)
     e00:	d8801415 	stw	r2,80(sp)
     e04:	0004be80 	call	4be8 <__gedf2>
     e08:	d8c01317 	ldw	r3,76(sp)
     e0c:	da401417 	ldw	r9,80(sp)
     e10:	00800c0e 	bge	zero,r2,e44 <_ftoa+0x2e4>
    ++frac;
     e14:	bdc00044 	addi	r23,r23,1
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
     e18:	b809883a 	mov	r4,r23
     e1c:	000607c0 	call	607c <__floatunsidf>
     e20:	d9001117 	ldw	r4,68(sp)
     e24:	d9401217 	ldw	r5,72(sp)
     e28:	100d883a 	mov	r6,r2
     e2c:	180f883a 	mov	r7,r3
     e30:	0004cc40 	call	4cc4 <__ledf2>
     e34:	00800d16 	blt	zero,r2,e6c <_ftoa+0x30c>
      frac = 0;
      ++whole;
     e38:	9cc00044 	addi	r19,r19,1

  if (diff > 0.5) {
    ++frac;
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
      frac = 0;
     e3c:	002f883a 	mov	r23,zero
     e40:	00000a06 	br	e6c <_ftoa+0x30c>
      ++whole;
    }
  }
  else if (diff < 0.5) {
     e44:	000d883a 	mov	r6,zero
     e48:	01cff834 	movhi	r7,16352
     e4c:	4809883a 	mov	r4,r9
     e50:	180b883a 	mov	r5,r3
     e54:	0004cc40 	call	4cc4 <__ledf2>
     e58:	10000416 	blt	r2,zero,e6c <_ftoa+0x30c>
  }
  else if ((frac == 0U) || (frac & 1U)) {
     e5c:	b8000226 	beq	r23,zero,e68 <_ftoa+0x308>
     e60:	b880004c 	andi	r2,r23,1
     e64:	10000126 	beq	r2,zero,e6c <_ftoa+0x30c>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
     e68:	bdc00044 	addi	r23,r23,1
  }

  if (prec == 0U) {
     e6c:	9000191e 	bne	r18,zero,ed4 <_ftoa+0x374>
    diff = value - (double)whole;
     e70:	9809883a 	mov	r4,r19
     e74:	0005fa00 	call	5fa0 <__floatsidf>
     e78:	8809883a 	mov	r4,r17
     e7c:	800b883a 	mov	r5,r16
     e80:	100d883a 	mov	r6,r2
     e84:	180f883a 	mov	r7,r3
     e88:	00056240 	call	5624 <__subdf3>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
     e8c:	000d883a 	mov	r6,zero
     e90:	01cff834 	movhi	r7,16352
     e94:	1009883a 	mov	r4,r2
     e98:	180b883a 	mov	r5,r3
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
  }

  if (prec == 0U) {
    diff = value - (double)whole;
     e9c:	1023883a 	mov	r17,r2
     ea0:	1821883a 	mov	r16,r3
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
     ea4:	0004cc40 	call	4cc4 <__ledf2>
     ea8:	1000060e 	bge	r2,zero,ec4 <_ftoa+0x364>
     eac:	000d883a 	mov	r6,zero
     eb0:	01cff834 	movhi	r7,16352
     eb4:	8809883a 	mov	r4,r17
     eb8:	800b883a 	mov	r5,r16
     ebc:	0004be80 	call	4be8 <__gedf2>
     ec0:	0080240e 	bge	zero,r2,f54 <_ftoa+0x3f4>
     ec4:	9880004c 	andi	r2,r19,1
     ec8:	10002226 	beq	r2,zero,f54 <_ftoa+0x3f4>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
     ecc:	9cc00044 	addi	r19,r19,1
     ed0:	00002006 	br	f54 <_ftoa+0x3f4>
  else if ((frac == 0U) || (frac & 1U)) {
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
  }

  if (prec == 0U) {
     ed4:	a805883a 	mov	r2,r21
    }
  }
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
     ed8:	04400804 	movi	r17,32
     edc:	14402f26 	beq	r2,r17,f9c <_ftoa+0x43c>
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
     ee0:	d9000504 	addi	r4,sp,20
     ee4:	20a1883a 	add	r16,r4,r2
     ee8:	01400284 	movi	r5,10
     eec:	b809883a 	mov	r4,r23
     ef0:	15400044 	addi	r21,r2,1
     ef4:	0002e7c0 	call	2e7c <__umodsi3>
     ef8:	10800c04 	addi	r2,r2,48
      if (!(frac /= 10U)) {
     efc:	b809883a 	mov	r4,r23
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
     f00:	80800005 	stb	r2,0(r16)
      if (!(frac /= 10U)) {
     f04:	01400284 	movi	r5,10
     f08:	0002e180 	call	2e18 <__udivsi3>
     f0c:	102f883a 	mov	r23,r2
  }
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
     f10:	94bfffc4 	addi	r18,r18,-1
      buf[len++] = (char)(48U + (frac % 10U));
     f14:	a805883a 	mov	r2,r21
      if (!(frac /= 10U)) {
     f18:	b83ff01e 	bne	r23,zero,edc <_gp+0xffff27e8>
     f1c:	9565883a 	add	r18,r18,r21
        break;
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
     f20:	01400804 	movi	r5,32
      buf[len++] = '0';
     f24:	01800c04 	movi	r6,48
      if (!(frac /= 10U)) {
        break;
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
     f28:	11401c26 	beq	r2,r5,f9c <_ftoa+0x43c>
     f2c:	d9000504 	addi	r4,sp,20
     f30:	2087883a 	add	r3,r4,r2
     f34:	11000044 	addi	r4,r2,1
     f38:	14800326 	beq	r2,r18,f48 <_ftoa+0x3e8>
      buf[len++] = '0';
     f3c:	19800005 	stb	r6,0(r3)
     f40:	2005883a 	mov	r2,r4
     f44:	003ff806 	br	f28 <_gp+0xffff2834>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
      // add decimal
      buf[len++] = '.';
     f48:	00800b84 	movi	r2,46
     f4c:	202b883a 	mov	r21,r4
     f50:	18800005 	stb	r2,0(r3)
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
     f54:	a805883a 	mov	r2,r21
      buf[len++] = '.';
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
     f58:	04800804 	movi	r18,32
     f5c:	14800f26 	beq	r2,r18,f9c <_ftoa+0x43c>
    buf[len++] = (char)(48 + (whole % 10));
     f60:	d9400504 	addi	r5,sp,20
     f64:	28a3883a 	add	r17,r5,r2
     f68:	9809883a 	mov	r4,r19
     f6c:	01400284 	movi	r5,10
     f70:	14000044 	addi	r16,r2,1
     f74:	0002da40 	call	2da4 <__modsi3>
     f78:	10800c04 	addi	r2,r2,48
    if (!(whole /= 10)) {
     f7c:	9809883a 	mov	r4,r19
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    buf[len++] = (char)(48 + (whole % 10));
     f80:	88800005 	stb	r2,0(r17)
    if (!(whole /= 10)) {
     f84:	01400284 	movi	r5,10
     f88:	0002d200 	call	2d20 <__divsi3>
     f8c:	1027883a 	mov	r19,r2
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    buf[len++] = (char)(48 + (whole % 10));
     f90:	8005883a 	mov	r2,r16
    if (!(whole /= 10)) {
     f94:	983ff11e 	bne	r19,zero,f5c <_gp+0xffff2868>
     f98:	00000106 	br	fa0 <_ftoa+0x440>
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
     f9c:	04000804 	movi	r16,32
      break;
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
     fa0:	a0c000cc 	andi	r3,r20,3
     fa4:	00800044 	movi	r2,1
     fa8:	18800f1e 	bne	r3,r2,fe8 <_ftoa+0x488>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     fac:	b0000e26 	beq	r22,zero,fe8 <_ftoa+0x488>
     fb0:	d8801003 	ldbu	r2,64(sp)
     fb4:	1000021e 	bne	r2,zero,fc0 <_ftoa+0x460>
     fb8:	a080030c 	andi	r2,r20,12
     fbc:	10000126 	beq	r2,zero,fc4 <_ftoa+0x464>
      width--;
     fc0:	b5bfffc4 	addi	r22,r22,-1
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     fc4:	00800804 	movi	r2,32
      buf[len++] = '0';
     fc8:	00c00c04 	movi	r3,48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     fcc:	8580062e 	bgeu	r16,r22,fe8 <_ftoa+0x488>
     fd0:	80801a26 	beq	r16,r2,103c <_ftoa+0x4dc>
      buf[len++] = '0';
     fd4:	d9800504 	addi	r6,sp,20
     fd8:	3409883a 	add	r4,r6,r16
     fdc:	20c00005 	stb	r3,0(r4)
     fe0:	84000044 	addi	r16,r16,1
     fe4:	003ff906 	br	fcc <_gp+0xffff28d8>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
     fe8:	008007c4 	movi	r2,31
     fec:	14001336 	bltu	r2,r16,103c <_ftoa+0x4dc>
    if (negative) {
     ff0:	d8801003 	ldbu	r2,64(sp)
     ff4:	10000426 	beq	r2,zero,1008 <_ftoa+0x4a8>
      buf[len++] = '-';
     ff8:	d8c00504 	addi	r3,sp,20
     ffc:	1c05883a 	add	r2,r3,r16
    1000:	00c00b44 	movi	r3,45
    1004:	00000b06 	br	1034 <_ftoa+0x4d4>
    }
    else if (flags & FLAGS_PLUS) {
    1008:	a080010c 	andi	r2,r20,4
    100c:	10000426 	beq	r2,zero,1020 <_ftoa+0x4c0>
      buf[len++] = '+';  // ignore the space if the '+' exists
    1010:	d9000504 	addi	r4,sp,20
    1014:	2405883a 	add	r2,r4,r16
    1018:	00c00ac4 	movi	r3,43
    101c:	00000506 	br	1034 <_ftoa+0x4d4>
    }
    else if (flags & FLAGS_SPACE) {
    1020:	a080020c 	andi	r2,r20,8
    1024:	10000526 	beq	r2,zero,103c <_ftoa+0x4dc>
      buf[len++] = ' ';
    1028:	d9400504 	addi	r5,sp,20
    102c:	2c05883a 	add	r2,r5,r16
    1030:	00c00804 	movi	r3,32
    1034:	10c00005 	stb	r3,0(r2)
    1038:	84000044 	addi	r16,r16,1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    103c:	d9800504 	addi	r6,sp,20
    1040:	dd000315 	stw	r20,12(sp)
    1044:	dd800215 	stw	r22,8(sp)
    1048:	dc000115 	stw	r16,4(sp)
    104c:	d9800015 	stw	r6,0(sp)
    1050:	d9800f17 	ldw	r6,60(sp)
    1054:	d9400e17 	ldw	r5,56(sp)
    1058:	d9000d17 	ldw	r4,52(sp)
    105c:	e00f883a 	mov	r7,fp
    1060:	00005640 	call	564 <_out_rev>
}
    1064:	dfc01e17 	ldw	ra,120(sp)
    1068:	df001d17 	ldw	fp,116(sp)
    106c:	ddc01c17 	ldw	r23,112(sp)
    1070:	dd801b17 	ldw	r22,108(sp)
    1074:	dd401a17 	ldw	r21,104(sp)
    1078:	dd001917 	ldw	r20,100(sp)
    107c:	dcc01817 	ldw	r19,96(sp)
    1080:	dc801717 	ldw	r18,92(sp)
    1084:	dc401617 	ldw	r17,88(sp)
    1088:	dc001517 	ldw	r16,84(sp)
    108c:	dec01f04 	addi	sp,sp,124
    1090:	f800283a 	ret

00001094 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    1094:	deffe504 	addi	sp,sp,-108
    1098:	dd401615 	stw	r21,88(sp)
    109c:	dc401215 	stw	r17,72(sp)
    10a0:	dd401c17 	ldw	r21,112(sp)
    10a4:	dc401b17 	ldw	r17,108(sp)
    10a8:	d8801e17 	ldw	r2,120(sp)
    10ac:	d9000615 	stw	r4,24(sp)
    10b0:	d9400715 	stw	r5,28(sp)
    10b4:	d9800b15 	stw	r6,44(sp)
    10b8:	d9c00815 	stw	r7,32(sp)
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    10bc:	880d883a 	mov	r6,r17
    10c0:	a80f883a 	mov	r7,r21
    10c4:	8809883a 	mov	r4,r17
    10c8:	a80b883a 	mov	r5,r21


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    10cc:	dd801715 	stw	r22,92(sp)
    10d0:	dd001515 	stw	r20,84(sp)
    10d4:	dfc01a15 	stw	ra,104(sp)
    10d8:	df001915 	stw	fp,100(sp)
    10dc:	ddc01815 	stw	r23,96(sp)
    10e0:	dcc01415 	stw	r19,80(sp)
    10e4:	dc801315 	stw	r18,76(sp)
    10e8:	dc001115 	stw	r16,68(sp)
    10ec:	dd001d17 	ldw	r20,116(sp)
    10f0:	d8800a15 	stw	r2,40(sp)
    10f4:	dd801f17 	ldw	r22,124(sp)
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    10f8:	0004b600 	call	4b60 <__eqdf2>
    10fc:	10000e1e 	bne	r2,zero,1138 <_etoa+0xa4>
    1100:	01bfffc4 	movi	r6,-1
    1104:	01dffc34 	movhi	r7,32752
    1108:	398f883a 	add	r7,r7,r6
    110c:	8809883a 	mov	r4,r17
    1110:	a80b883a 	mov	r5,r21
    1114:	0004be80 	call	4be8 <__gedf2>
    1118:	00800716 	blt	zero,r2,1138 <_etoa+0xa4>
    111c:	01bfffc4 	movi	r6,-1
    1120:	01fffc34 	movhi	r7,65520
    1124:	398f883a 	add	r7,r7,r6
    1128:	8809883a 	mov	r4,r17
    112c:	a80b883a 	mov	r5,r21
    1130:	0004cc40 	call	4cc4 <__ledf2>
    1134:	1000160e 	bge	r2,zero,1190 <_etoa+0xfc>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1138:	d8c00a17 	ldw	r3,40(sp)
    113c:	d9c00817 	ldw	r7,32(sp)
    1140:	d9800b17 	ldw	r6,44(sp)
    1144:	d9400717 	ldw	r5,28(sp)
    1148:	d9000617 	ldw	r4,24(sp)
    114c:	dd801f15 	stw	r22,124(sp)
    1150:	d8c01e15 	stw	r3,120(sp)
    1154:	dd001d15 	stw	r20,116(sp)
    1158:	dc401b15 	stw	r17,108(sp)
    115c:	dd401c15 	stw	r21,112(sp)
    if (flags & FLAGS_LEFT) {
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
    1160:	dfc01a17 	ldw	ra,104(sp)
    1164:	df001917 	ldw	fp,100(sp)
    1168:	ddc01817 	ldw	r23,96(sp)
    116c:	dd801717 	ldw	r22,92(sp)
    1170:	dd401617 	ldw	r21,88(sp)
    1174:	dd001517 	ldw	r20,84(sp)
    1178:	dcc01417 	ldw	r19,80(sp)
    117c:	dc801317 	ldw	r18,76(sp)
    1180:	dc401217 	ldw	r17,72(sp)
    1184:	dc001117 	ldw	r16,68(sp)
    1188:	dec01b04 	addi	sp,sp,108
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    118c:	0000b601 	jmpi	b60 <_ftoa>
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
    1190:	000d883a 	mov	r6,zero
    1194:	000f883a 	mov	r7,zero
    1198:	8809883a 	mov	r4,r17
    119c:	a80b883a 	mov	r5,r21
    11a0:	0004cc40 	call	4cc4 <__ledf2>
    value = -value;
    11a4:	dc400c15 	stw	r17,48(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
    11a8:	1000020e 	bge	r2,zero,11b4 <_etoa+0x120>
    value = -value;
    11ac:	aca0003c 	xorhi	r18,r21,32768
    11b0:	00000106 	br	11b8 <_etoa+0x124>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
    11b4:	a825883a 	mov	r18,r21
    value = -value;
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
    11b8:	b101000c 	andi	r4,r22,1024
    11bc:	d9000915 	stw	r4,36(sp)
    11c0:	2000011e 	bne	r4,zero,11c8 <_etoa+0x134>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    11c4:	05000184 	movi	r20,6

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    11c8:	9008d53a 	srli	r4,r18,20
    11cc:	2101ffcc 	andi	r4,r4,2047
    11d0:	213f0044 	addi	r4,r4,-1023
    11d4:	0005fa00 	call	5fa0 <__floatsidf>
    11d8:	019427f4 	movhi	r6,20639
    11dc:	01cff4f4 	movhi	r7,16339
    11e0:	319e7ec4 	addi	r6,r6,31227
    11e4:	39d104c4 	addi	r7,r7,17427
    11e8:	1009883a 	mov	r4,r2
    11ec:	180b883a 	mov	r5,r3
    11f0:	0004db80 	call	4db8 <__muldf3>
    11f4:	01a2d874 	movhi	r6,35681
    11f8:	01cff1f4 	movhi	r7,16327
    11fc:	31b22cc4 	addi	r6,r6,-14157
    1200:	39e28a04 	addi	r7,r7,-30168
    1204:	1009883a 	mov	r4,r2
    1208:	180b883a 	mov	r5,r3
    120c:	00038e40 	call	38e4 <__adddf3>
    double   F;
  } conv;

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    1210:	01400434 	movhi	r5,16
    1214:	297fffc4 	addi	r5,r5,-1
    1218:	914a703a 	and	r5,r18,r5
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    121c:	000d883a 	mov	r6,zero
    1220:	01cffe34 	movhi	r7,16376
    1224:	8809883a 	mov	r4,r17
    1228:	294ffc34 	orhi	r5,r5,16368
    122c:	1027883a 	mov	r19,r2
    1230:	1821883a 	mov	r16,r3
    1234:	00056240 	call	5624 <__subdf3>
    1238:	0198dbf4 	movhi	r6,25455
    123c:	01cff4f4 	movhi	r7,16339
    1240:	3190d844 	addi	r6,r6,17249
    1244:	39e1e9c4 	addi	r7,r7,-30809
    1248:	1009883a 	mov	r4,r2
    124c:	180b883a 	mov	r5,r3
    1250:	0004db80 	call	4db8 <__muldf3>
    1254:	100d883a 	mov	r6,r2
    1258:	180f883a 	mov	r7,r3
    125c:	9809883a 	mov	r4,r19
    1260:	800b883a 	mov	r5,r16
    1264:	00038e40 	call	38e4 <__adddf3>
    1268:	180b883a 	mov	r5,r3
    126c:	1009883a 	mov	r4,r2
    1270:	0005f200 	call	5f20 <__fixdfsi>
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    1274:	1009883a 	mov	r4,r2

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    1278:	1021883a 	mov	r16,r2
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    127c:	0005fa00 	call	5fa0 <__floatsidf>
    1280:	01825eb4 	movhi	r6,2426
    1284:	01d002f4 	movhi	r7,16395
    1288:	31a8dc44 	addi	r6,r6,-23695
    128c:	39e4d3c4 	addi	r7,r7,-27825
    1290:	1009883a 	mov	r4,r2
    1294:	180b883a 	mov	r5,r3
    1298:	102f883a 	mov	r23,r2
    129c:	1827883a 	mov	r19,r3
    12a0:	0004db80 	call	4db8 <__muldf3>
    12a4:	000d883a 	mov	r6,zero
    12a8:	01cff834 	movhi	r7,16352
    12ac:	1009883a 	mov	r4,r2
    12b0:	180b883a 	mov	r5,r3
    12b4:	00038e40 	call	38e4 <__adddf3>
    12b8:	180b883a 	mov	r5,r3
    12bc:	1009883a 	mov	r4,r2
    12c0:	0005f200 	call	5f20 <__fixdfsi>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    12c4:	01aeed74 	movhi	r6,48053
    12c8:	01d000b4 	movhi	r7,16386
    12cc:	980b883a 	mov	r5,r19
    12d0:	31954584 	addi	r6,r6,21782
    12d4:	39daec44 	addi	r7,r7,27569
    12d8:	b809883a 	mov	r4,r23
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    12dc:	d8800d15 	stw	r2,52(sp)
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    12e0:	0004db80 	call	4db8 <__muldf3>
    12e4:	d9000d17 	ldw	r4,52(sp)
    12e8:	102f883a 	mov	r23,r2
    12ec:	1827883a 	mov	r19,r3
    12f0:	0005fa00 	call	5fa0 <__floatsidf>
    12f4:	01bfbeb4 	movhi	r6,65274
    12f8:	01cff9b4 	movhi	r7,16358
    12fc:	318e7bc4 	addi	r6,r6,14831
    1300:	39cb9084 	addi	r7,r7,11842
    1304:	1009883a 	mov	r4,r2
    1308:	180b883a 	mov	r5,r3
    130c:	0004db80 	call	4db8 <__muldf3>
    1310:	b809883a 	mov	r4,r23
    1314:	980b883a 	mov	r5,r19
    1318:	100d883a 	mov	r6,r2
    131c:	180f883a 	mov	r7,r3
    1320:	00056240 	call	5624 <__subdf3>
  const double z2 = z * z;
    1324:	100d883a 	mov	r6,r2
    1328:	180f883a 	mov	r7,r3
    132c:	1009883a 	mov	r4,r2
    1330:	180b883a 	mov	r5,r3
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    1334:	1839883a 	mov	fp,r3
  const double z2 = z * z;
    1338:	d8800e15 	stw	r2,56(sp)
    133c:	0004db80 	call	4db8 <__muldf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    1340:	da400e17 	ldw	r9,56(sp)
    1344:	e00f883a 	mov	r7,fp
    1348:	e00b883a 	mov	r5,fp
    134c:	480d883a 	mov	r6,r9
    1350:	4809883a 	mov	r4,r9
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
    1354:	1027883a 	mov	r19,r2
    1358:	182f883a 	mov	r23,r3
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    135c:	00038e40 	call	38e4 <__adddf3>
    1360:	9809883a 	mov	r4,r19
    1364:	b80b883a 	mov	r5,r23
    1368:	000d883a 	mov	r6,zero
    136c:	01d00b34 	movhi	r7,16428
    1370:	d8c01015 	stw	r3,64(sp)
    1374:	d8800f15 	stw	r2,60(sp)
    1378:	00041900 	call	4190 <__divdf3>
    137c:	000d883a 	mov	r6,zero
    1380:	01d00934 	movhi	r7,16420
    1384:	1009883a 	mov	r4,r2
    1388:	180b883a 	mov	r5,r3
    138c:	00038e40 	call	38e4 <__adddf3>
    1390:	9809883a 	mov	r4,r19
    1394:	b80b883a 	mov	r5,r23
    1398:	100d883a 	mov	r6,r2
    139c:	180f883a 	mov	r7,r3
    13a0:	00041900 	call	4190 <__divdf3>
    13a4:	000d883a 	mov	r6,zero
    13a8:	01d00634 	movhi	r7,16408
    13ac:	1009883a 	mov	r4,r2
    13b0:	180b883a 	mov	r5,r3
    13b4:	00038e40 	call	38e4 <__adddf3>
    13b8:	9809883a 	mov	r4,r19
    13bc:	b80b883a 	mov	r5,r23
    13c0:	100d883a 	mov	r6,r2
    13c4:	180f883a 	mov	r7,r3
    13c8:	00041900 	call	4190 <__divdf3>
    13cc:	da400e17 	ldw	r9,56(sp)
    13d0:	e00f883a 	mov	r7,fp
    13d4:	0009883a 	mov	r4,zero
    13d8:	480d883a 	mov	r6,r9
    13dc:	01500034 	movhi	r5,16384
    13e0:	102f883a 	mov	r23,r2
    13e4:	1827883a 	mov	r19,r3
    13e8:	00056240 	call	5624 <__subdf3>
    13ec:	b809883a 	mov	r4,r23
    13f0:	100d883a 	mov	r6,r2
    13f4:	180f883a 	mov	r7,r3
    13f8:	980b883a 	mov	r5,r19
    13fc:	00038e40 	call	38e4 <__adddf3>
    1400:	dac00f17 	ldw	r11,60(sp)
    1404:	da801017 	ldw	r10,64(sp)
    1408:	100d883a 	mov	r6,r2
    140c:	5809883a 	mov	r4,r11
    1410:	500b883a 	mov	r5,r10
    1414:	180f883a 	mov	r7,r3
    1418:	00041900 	call	4190 <__divdf3>
    141c:	000d883a 	mov	r6,zero
    1420:	01cffc34 	movhi	r7,16368
    1424:	1009883a 	mov	r4,r2
    1428:	180b883a 	mov	r5,r3
    142c:	00038e40 	call	38e4 <__adddf3>
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
    1430:	d9000d17 	ldw	r4,52(sp)
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    1434:	000d883a 	mov	r6,zero
    1438:	180b883a 	mov	r5,r3
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
    143c:	21c0ffc4 	addi	r7,r4,1023
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    1440:	380e953a 	slli	r7,r7,20
    1444:	1009883a 	mov	r4,r2
    1448:	0004db80 	call	4db8 <__muldf3>
  // correct for rounding errors
  if (value < conv.F) {
    144c:	180f883a 	mov	r7,r3
    1450:	100d883a 	mov	r6,r2
    1454:	8809883a 	mov	r4,r17
    1458:	900b883a 	mov	r5,r18
    145c:	d8c00e15 	stw	r3,56(sp)
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    1460:	102f883a 	mov	r23,r2
  // correct for rounding errors
  if (value < conv.F) {
    1464:	0004cc40 	call	4cc4 <__ledf2>
    1468:	d8c00e17 	ldw	r3,56(sp)
    146c:	1000070e 	bge	r2,zero,148c <_etoa+0x3f8>
    expval--;
    conv.F /= 10;
    1470:	b809883a 	mov	r4,r23
    1474:	000d883a 	mov	r6,zero
    1478:	01d00934 	movhi	r7,16420
    147c:	180b883a 	mov	r5,r3
    1480:	00041900 	call	4190 <__divdf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
  // correct for rounding errors
  if (value < conv.F) {
    expval--;
    1484:	843fffc4 	addi	r16,r16,-1
    conv.F /= 10;
    1488:	102f883a 	mov	r23,r2
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    148c:	808018c4 	addi	r2,r16,99
    1490:	04c03184 	movi	r19,198
    1494:	98a7403a 	cmpgeu	r19,r19,r2
    1498:	00800144 	movi	r2,5
    149c:	14e7c83a 	sub	r19,r2,r19

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
    14a0:	b082000c 	andi	r2,r22,2048
    14a4:	10001f26 	beq	r2,zero,1524 <_etoa+0x490>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
    14a8:	01bac734 	movhi	r6,60188
    14ac:	01cfc6b4 	movhi	r7,16154
    14b0:	3190cb44 	addi	r6,r6,17197
    14b4:	39cdb884 	addi	r7,r7,14050
    14b8:	8809883a 	mov	r4,r17
    14bc:	900b883a 	mov	r5,r18
    14c0:	d8c00e15 	stw	r3,56(sp)
    14c4:	0004be80 	call	4be8 <__gedf2>
    14c8:	d8c00e17 	ldw	r3,56(sp)
    14cc:	10001116 	blt	r2,zero,1514 <_etoa+0x480>
    14d0:	01d04bf4 	movhi	r7,16687
    14d4:	000d883a 	mov	r6,zero
    14d8:	39e12004 	addi	r7,r7,-31616
    14dc:	8809883a 	mov	r4,r17
    14e0:	900b883a 	mov	r5,r18
    14e4:	0004cc40 	call	4cc4 <__ledf2>
    14e8:	d8c00e17 	ldw	r3,56(sp)
    14ec:	1000090e 	bge	r2,zero,1514 <_etoa+0x480>
      if ((int)prec > expval) {
    14f0:	8500030e 	bge	r16,r20,1500 <_etoa+0x46c>
        prec = (unsigned)((int)prec - expval - 1);
    14f4:	a429c83a 	sub	r20,r20,r16
    14f8:	a53fffc4 	addi	r20,r20,-1
    14fc:	00000106 	br	1504 <_etoa+0x470>
      }
      else {
        prec = 0;
    1500:	0029883a 	mov	r20,zero
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
    1504:	b5810014 	ori	r22,r22,1024
      // no characters in exponent
      minwidth = 0U;
    1508:	0027883a 	mov	r19,zero
      expval   = 0;
    150c:	0021883a 	mov	r16,zero
    1510:	00000406 	br	1524 <_etoa+0x490>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
    1514:	a0000326 	beq	r20,zero,1524 <_etoa+0x490>
    1518:	d8800917 	ldw	r2,36(sp)
    151c:	10000126 	beq	r2,zero,1524 <_etoa+0x490>
        --prec;
    1520:	a53fffc4 	addi	r20,r20,-1
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
  if (width > minwidth) {
    1524:	d9000a17 	ldw	r4,40(sp)
    1528:	9900022e 	bgeu	r19,r4,1534 <_etoa+0x4a0>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
    152c:	24f9c83a 	sub	fp,r4,r19
    1530:	00000106 	br	1538 <_etoa+0x4a4>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
    1534:	0039883a 	mov	fp,zero
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
    1538:	b080008c 	andi	r2,r22,2
    153c:	d8800915 	stw	r2,36(sp)
    1540:	10000226 	beq	r2,zero,154c <_etoa+0x4b8>
    1544:	98000126 	beq	r19,zero,154c <_etoa+0x4b8>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
    1548:	0039883a 	mov	fp,zero
  }

  // rescale the float value
  if (expval) {
    154c:	80000726 	beq	r16,zero,156c <_etoa+0x4d8>
    value /= conv.F;
    1550:	900b883a 	mov	r5,r18
    1554:	b80d883a 	mov	r6,r23
    1558:	180f883a 	mov	r7,r3
    155c:	8809883a 	mov	r4,r17
    1560:	00041900 	call	4190 <__divdf3>
    1564:	d8800c15 	stw	r2,48(sp)
    1568:	1825883a 	mov	r18,r3
  }

  // output the floating part
  const size_t start_idx = idx;
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
    156c:	000d883a 	mov	r6,zero
    1570:	000f883a 	mov	r7,zero
    1574:	8809883a 	mov	r4,r17
    1578:	a80b883a 	mov	r5,r21
    157c:	0004cc40 	call	4cc4 <__ledf2>
    1580:	1000010e 	bge	r2,zero,1588 <_etoa+0x4f4>
    1584:	94a0003c 	xorhi	r18,r18,32768
    1588:	d8c00c17 	ldw	r3,48(sp)
    158c:	00bdffc4 	movi	r2,-2049
    1590:	d9c00817 	ldw	r7,32(sp)
    1594:	d9800b17 	ldw	r6,44(sp)
    1598:	d9400717 	ldw	r5,28(sp)
    159c:	d9000617 	ldw	r4,24(sp)
    15a0:	b084703a 	and	r2,r22,r2
    15a4:	d8800415 	stw	r2,16(sp)
    15a8:	df000315 	stw	fp,12(sp)
    15ac:	dd000215 	stw	r20,8(sp)
    15b0:	d8c00015 	stw	r3,0(sp)
    15b4:	dc800115 	stw	r18,4(sp)
    15b8:	0000b600 	call	b60 <_ftoa>

  // output the exponent part
  if (minwidth) {
    15bc:	98002b26 	beq	r19,zero,166c <_etoa+0x5d8>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    15c0:	b0c0080c 	andi	r3,r22,32
    15c4:	1800021e 	bne	r3,zero,15d0 <_etoa+0x53c>
    15c8:	01001944 	movi	r4,101
    15cc:	00000106 	br	15d4 <_etoa+0x540>
    15d0:	01001144 	movi	r4,69
    15d4:	100d883a 	mov	r6,r2
    15d8:	14400044 	addi	r17,r2,1
    15dc:	d9c00817 	ldw	r7,32(sp)
    15e0:	d8800617 	ldw	r2,24(sp)
    15e4:	d9400717 	ldw	r5,28(sp)
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    15e8:	9cffffc4 	addi	r19,r19,-1
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);

  // output the exponent part
  if (minwidth) {
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    15ec:	103ee83a 	callr	r2
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    15f0:	00800144 	movi	r2,5
    15f4:	d8800515 	stw	r2,20(sp)
    15f8:	00800284 	movi	r2,10
    15fc:	d8800215 	stw	r2,8(sp)
    1600:	8004d7fa 	srli	r2,r16,31
    1604:	dcc00415 	stw	r19,16(sp)
    1608:	d8000315 	stw	zero,12(sp)
    160c:	d8800115 	stw	r2,4(sp)
    1610:	8000010e 	bge	r16,zero,1618 <_etoa+0x584>
    1614:	0421c83a 	sub	r16,zero,r16
    1618:	d9c00817 	ldw	r7,32(sp)
    161c:	d9400717 	ldw	r5,28(sp)
    1620:	d9000617 	ldw	r4,24(sp)
    1624:	dc000015 	stw	r16,0(sp)
    1628:	880d883a 	mov	r6,r17
    162c:	00008140 	call	814 <_ntoa_long>
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
    1630:	d8c00917 	ldw	r3,36(sp)
    1634:	18000d26 	beq	r3,zero,166c <_etoa+0x5d8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    1638:	d9000b17 	ldw	r4,44(sp)
    163c:	1107c83a 	sub	r3,r2,r4
    1640:	d9000a17 	ldw	r4,40(sp)
    1644:	1900092e 	bgeu	r3,r4,166c <_etoa+0x5d8>
    1648:	14000044 	addi	r16,r2,1
    164c:	100d883a 	mov	r6,r2
    1650:	d9c00817 	ldw	r7,32(sp)
    1654:	d8800617 	ldw	r2,24(sp)
    1658:	d9400717 	ldw	r5,28(sp)
    165c:	01000804 	movi	r4,32
    1660:	103ee83a 	callr	r2
    1664:	8005883a 	mov	r2,r16
    1668:	003ff306 	br	1638 <_gp+0xffff2f44>
    }
  }
  return idx;
}
    166c:	dfc01a17 	ldw	ra,104(sp)
    1670:	df001917 	ldw	fp,100(sp)
    1674:	ddc01817 	ldw	r23,96(sp)
    1678:	dd801717 	ldw	r22,92(sp)
    167c:	dd401617 	ldw	r21,88(sp)
    1680:	dd001517 	ldw	r20,84(sp)
    1684:	dcc01417 	ldw	r19,80(sp)
    1688:	dc801317 	ldw	r18,76(sp)
    168c:	dc401217 	ldw	r17,72(sp)
    1690:	dc001117 	ldw	r16,68(sp)
    1694:	dec01b04 	addi	sp,sp,108
    1698:	f800283a 	ret

0000169c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    169c:	deffeb04 	addi	sp,sp,-84
    16a0:	df001315 	stw	fp,76(sp)
    16a4:	dd000f15 	stw	r20,60(sp)
    16a8:	dc800d15 	stw	r18,52(sp)
    16ac:	dfc01415 	stw	ra,80(sp)
    16b0:	ddc01215 	stw	r23,72(sp)
    16b4:	dd801115 	stw	r22,68(sp)
    16b8:	dd401015 	stw	r21,64(sp)
    16bc:	dcc00e15 	stw	r19,56(sp)
    16c0:	dc400c15 	stw	r17,48(sp)
    16c4:	dc000b15 	stw	r16,44(sp)
    16c8:	2829883a 	mov	r20,r5
    16cc:	3025883a 	mov	r18,r6
    16d0:	df001517 	ldw	fp,84(sp)
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    16d4:	2800031e 	bne	r5,zero,16e4 <_vsnprintf+0x48>
    // use null output function
    out = _out_null;
    16d8:	04c00034 	movhi	r19,0
    16dc:	9cc15804 	addi	r19,r19,1376
    16e0:	00000106 	br	16e8 <_vsnprintf+0x4c>
    16e4:	2027883a 	mov	r19,r4
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    16e8:	002d883a 	mov	r22,zero
  if (!buffer) {
    // use null output function
    out = _out_null;
  }

  while (*format)
    16ec:	39000007 	ldb	r4,0(r7)
    16f0:	20005126 	beq	r4,zero,1838 <_vsnprintf+0x19c>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    16f4:	00800944 	movi	r2,37
    16f8:	3c400044 	addi	r17,r7,1
    16fc:	20800726 	beq	r4,r2,171c <_vsnprintf+0x80>
      // no
      out(*format, buffer, idx++, maxlen);
    1700:	900f883a 	mov	r7,r18
    1704:	b00d883a 	mov	r6,r22
    1708:	a00b883a 	mov	r5,r20
    170c:	983ee83a 	callr	r19
    1710:	b4000044 	addi	r16,r22,1
      format++;
    1714:	880f883a 	mov	r7,r17
    1718:	00004506 	br	1830 <_vsnprintf+0x194>
    171c:	880f883a 	mov	r7,r17
      // yes, evaluate it
      format++;
    }

    // evaluate flags
    flags = 0U;
    1720:	0021883a 	mov	r16,zero
    do {
      switch (*format) {
    1724:	01400804 	movi	r5,32
    1728:	018008c4 	movi	r6,35
    172c:	39000003 	ldbu	r4,0(r7)
    1730:	00c00ac4 	movi	r3,43
    1734:	382f883a 	mov	r23,r7
    1738:	20803fcc 	andi	r2,r4,255
    173c:	1080201c 	xori	r2,r2,128
    1740:	10bfe004 	addi	r2,r2,-128
    1744:	10c00d26 	beq	r2,r3,177c <_vsnprintf+0xe0>
    1748:	18800416 	blt	r3,r2,175c <_vsnprintf+0xc0>
    174c:	11400d26 	beq	r2,r5,1784 <_vsnprintf+0xe8>
    1750:	1180401e 	bne	r2,r6,1854 <_vsnprintf+0x1b8>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    1754:	84000414 	ori	r16,r16,16
    1758:	00003c06 	br	184c <_vsnprintf+0x1b0>
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    175c:	00c00b44 	movi	r3,45
    1760:	10c00426 	beq	r2,r3,1774 <_vsnprintf+0xd8>
    1764:	00c00c04 	movi	r3,48
    1768:	10c03a1e 	bne	r2,r3,1854 <_vsnprintf+0x1b8>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    176c:	84000054 	ori	r16,r16,1
    1770:	00003606 	br	184c <_vsnprintf+0x1b0>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    1774:	84000094 	ori	r16,r16,2
    1778:	00003406 	br	184c <_vsnprintf+0x1b0>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    177c:	84000114 	ori	r16,r16,4
    1780:	00003206 	br	184c <_vsnprintf+0x1b0>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    1784:	84000214 	ori	r16,r16,8
    1788:	00003006 	br	184c <_vsnprintf+0x1b0>
      flags |= FLAGS_PRECISION;
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
    178c:	10803fcc 	andi	r2,r2,255
    1790:	1080201c 	xori	r2,r2,128
    1794:	10bfe004 	addi	r2,r2,-128
    1798:	01000a84 	movi	r4,42
    179c:	11005b1e 	bne	r2,r4,190c <_vsnprintf+0x270>
        const int prec = (int)va_arg(va, int);
        precision = prec > 0 ? (unsigned int)prec : 0U;
    17a0:	e0800017 	ldw	r2,0(fp)
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
        const int prec = (int)va_arg(va, int);
    17a4:	e1000104 	addi	r4,fp,4
        precision = prec > 0 ? (unsigned int)prec : 0U;
    17a8:	1000010e 	bge	r2,zero,17b0 <_vsnprintf+0x114>
    17ac:	0005883a 	mov	r2,zero
        format++;
    17b0:	bc400084 	addi	r17,r23,2
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
        const int prec = (int)va_arg(va, int);
    17b4:	2039883a 	mov	fp,r4
        format++;
      }
    }

    // evaluate length field
    switch (*format) {
    17b8:	89000007 	ldb	r4,0(r17)
    17bc:	01401b04 	movi	r5,108
    17c0:	21405a26 	beq	r4,r5,192c <_vsnprintf+0x290>
    17c4:	2900530e 	bge	r5,r4,1914 <_vsnprintf+0x278>
    17c8:	01401d04 	movi	r5,116
    17cc:	21406226 	beq	r4,r5,1958 <_vsnprintf+0x2bc>
    17d0:	01401e84 	movi	r5,122
    17d4:	21406026 	beq	r4,r5,1958 <_vsnprintf+0x2bc>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    17d8:	89c00003 	ldbu	r7,0(r17)
    17dc:	01401944 	movi	r5,101
    17e0:	39003fcc 	andi	r4,r7,255
    17e4:	2100201c 	xori	r4,r4,128
    17e8:	213fe004 	addi	r4,r4,-128
    17ec:	21412a26 	beq	r4,r5,1c98 <_vsnprintf+0x5fc>
    17f0:	29006516 	blt	r5,r4,1988 <_vsnprintf+0x2ec>
    17f4:	014011c4 	movi	r5,71
    17f8:	21412726 	beq	r4,r5,1c98 <_vsnprintf+0x5fc>
    17fc:	29005916 	blt	r5,r4,1964 <_vsnprintf+0x2c8>
    1800:	01401144 	movi	r5,69
    1804:	21412426 	beq	r4,r5,1c98 <_vsnprintf+0x5fc>
    1808:	29011216 	blt	r5,r4,1c54 <_vsnprintf+0x5b8>
    180c:	00800944 	movi	r2,37
    1810:	2081b51e 	bne	r4,r2,1ee8 <_vsnprintf+0x84c>
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    1814:	b4000044 	addi	r16,r22,1
    1818:	900f883a 	mov	r7,r18
    181c:	b00d883a 	mov	r6,r22
    1820:	a00b883a 	mov	r5,r20
    1824:	01000944 	movi	r4,37
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    1828:	983ee83a 	callr	r19
        format++;
    182c:	89c00044 	addi	r7,r17,1
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    1830:	802d883a 	mov	r22,r16
        format++;
        break;
    1834:	003fad06 	br	16ec <_gp+0xffff2ff8>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    1838:	b4800236 	bltu	r22,r18,1844 <_vsnprintf+0x1a8>
    183c:	91bfffc4 	addi	r6,r18,-1
    1840:	0001c406 	br	1f54 <_vsnprintf+0x8b8>
    1844:	b00d883a 	mov	r6,r22
    1848:	0001c206 	br	1f54 <_vsnprintf+0x8b8>
    184c:	39c00044 	addi	r7,r7,1
    1850:	003fb606 	br	172c <_gp+0xffff3038>
      }
    } while (n);

    // evaluate width field
    width = 0U;
    if (_is_digit(*format)) {
    1854:	213ff404 	addi	r4,r4,-48
    1858:	21003fcc 	andi	r4,r4,255
    185c:	01400244 	movi	r5,9
    1860:	2901a62e 	bgeu	r5,r4,1efc <_vsnprintf+0x860>
      width = _atoi(&format);
    }
    else if (*format == '*') {
    1864:	01000a84 	movi	r4,42
    1868:	11000a1e 	bne	r2,r4,1894 <_vsnprintf+0x1f8>
      const int w = va_arg(va, int);
    186c:	e2400017 	ldw	r9,0(fp)
    1870:	e0800104 	addi	r2,fp,4
      if (w < 0) {
    1874:	4800030e 	bge	r9,zero,1884 <_vsnprintf+0x1e8>
        flags |= FLAGS_LEFT;    // reverse padding
    1878:	84000094 	ori	r16,r16,2
        width = (unsigned int)-w;
    187c:	026bc83a 	sub	r21,zero,r9
    1880:	00000106 	br	1888 <_vsnprintf+0x1ec>
      }
      else {
        width = (unsigned int)w;
    1884:	482b883a 	mov	r21,r9
      }
      format++;
    1888:	3dc00044 	addi	r23,r7,1
    width = 0U;
    if (_is_digit(*format)) {
      width = _atoi(&format);
    }
    else if (*format == '*') {
      const int w = va_arg(va, int);
    188c:	1039883a 	mov	fp,r2
    1890:	00000106 	br	1898 <_vsnprintf+0x1fc>
        default :                                   n = 0U; break;
      }
    } while (n);

    // evaluate width field
    width = 0U;
    1894:	002b883a 	mov	r21,zero
      format++;
    }

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
    1898:	b9000007 	ldb	r4,0(r23)
    189c:	00800b84 	movi	r2,46
    18a0:	2080191e 	bne	r4,r2,1908 <_vsnprintf+0x26c>
      flags |= FLAGS_PRECISION;
      format++;
      if (_is_digit(*format)) {
    18a4:	b8800043 	ldbu	r2,1(r23)
    18a8:	01000244 	movi	r4,9
    }

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
      flags |= FLAGS_PRECISION;
    18ac:	84010014 	ori	r16,r16,1024
      format++;
      if (_is_digit(*format)) {
    18b0:	117ff404 	addi	r5,r2,-48
    18b4:	29403fcc 	andi	r5,r5,255

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
      flags |= FLAGS_PRECISION;
      format++;
    18b8:	bc400044 	addi	r17,r23,1
      if (_is_digit(*format)) {
    18bc:	217fb336 	bltu	r4,r5,178c <_gp+0xffff3098>
    18c0:	0005883a 	mov	r2,zero

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
  while (_is_digit(**str)) {
    18c4:	202f883a 	mov	r23,r4
    18c8:	88c00003 	ldbu	r3,0(r17)
    18cc:	193ff404 	addi	r4,r3,-48
    18d0:	21003fcc 	andi	r4,r4,255
    18d4:	b93fb836 	bltu	r23,r4,17b8 <_gp+0xffff30c4>
    18d8:	01400284 	movi	r5,10
    18dc:	1009883a 	mov	r4,r2
    18e0:	d8c00915 	stw	r3,36(sp)
    18e4:	0002ed40 	call	2ed4 <__mulsi3>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    18e8:	d8c00917 	ldw	r3,36(sp)
    18ec:	10bff404 	addi	r2,r2,-48
    18f0:	8c400044 	addi	r17,r17,1
    18f4:	18c03fcc 	andi	r3,r3,255
    18f8:	18c0201c 	xori	r3,r3,128
    18fc:	18ffe004 	addi	r3,r3,-128
    1900:	1885883a 	add	r2,r3,r2
    1904:	003ff006 	br	18c8 <_gp+0xffff31d4>
    1908:	b823883a 	mov	r17,r23
      }
      format++;
    }

    // evaluate precision field
    precision = 0U;
    190c:	0005883a 	mov	r2,zero
    1910:	003fa906 	br	17b8 <_gp+0xffff30c4>
        format++;
      }
    }

    // evaluate length field
    switch (*format) {
    1914:	01401a04 	movi	r5,104
    1918:	21400826 	beq	r4,r5,193c <_vsnprintf+0x2a0>
    191c:	01401a84 	movi	r5,106
    1920:	217fad1e 	bne	r4,r5,17d8 <_gp+0xffff30e4>
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    1924:	84008014 	ori	r16,r16,512
    1928:	00000c06 	br	195c <_vsnprintf+0x2c0>
    // evaluate length field
    switch (*format) {
      case 'l' :
        flags |= FLAGS_LONG;
        format++;
        if (*format == 'l') {
    192c:	89400047 	ldb	r5,1(r17)
    1930:	2900091e 	bne	r5,r4,1958 <_vsnprintf+0x2bc>
          flags |= FLAGS_LONG_LONG;
    1934:	8400c014 	ori	r16,r16,768
    1938:	00000506 	br	1950 <_vsnprintf+0x2b4>
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
        format++;
        if (*format == 'h') {
    193c:	89400047 	ldb	r5,1(r17)
    1940:	29000226 	beq	r5,r4,194c <_vsnprintf+0x2b0>
          flags |= FLAGS_LONG_LONG;
          format++;
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
    1944:	84002014 	ori	r16,r16,128
    1948:	00000406 	br	195c <_vsnprintf+0x2c0>
        format++;
        if (*format == 'h') {
          flags |= FLAGS_CHAR;
    194c:	84003014 	ori	r16,r16,192
          format++;
    1950:	8c400084 	addi	r17,r17,2
    1954:	003fa006 	br	17d8 <_gp+0xffff30e4>
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    1958:	84004014 	ori	r16,r16,256
        format++;
    195c:	8c400044 	addi	r17,r17,1
        break;
    1960:	003f9d06 	br	17d8 <_gp+0xffff30e4>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    1964:	01401884 	movi	r5,98
    1968:	21402926 	beq	r4,r5,1a10 <_vsnprintf+0x374>
    196c:	29000216 	blt	r5,r4,1978 <_vsnprintf+0x2dc>
    1970:	01401604 	movi	r5,88
    1974:	00002506 	br	1a0c <_vsnprintf+0x370>
    1978:	014018c4 	movi	r5,99
    197c:	2140e426 	beq	r4,r5,1d10 <_vsnprintf+0x674>
    1980:	01401904 	movi	r5,100
    1984:	00002106 	br	1a0c <_vsnprintf+0x370>
    1988:	01401bc4 	movi	r5,111
    198c:	21402026 	beq	r4,r5,1a10 <_vsnprintf+0x374>
    1990:	29000516 	blt	r5,r4,19a8 <_vsnprintf+0x30c>
    1994:	014019c4 	movi	r5,103
    1998:	2140bf26 	beq	r4,r5,1c98 <_vsnprintf+0x5fc>
    199c:	2140ad16 	blt	r4,r5,1c54 <_vsnprintf+0x5b8>
    19a0:	01401a44 	movi	r5,105
    19a4:	00001906 	br	1a0c <_vsnprintf+0x370>
    19a8:	01401cc4 	movi	r5,115
    19ac:	21410226 	beq	r4,r5,1db8 <_vsnprintf+0x71c>
    19b0:	29001316 	blt	r5,r4,1a00 <_vsnprintf+0x364>
    19b4:	01401c04 	movi	r5,112
    19b8:	21414b1e 	bne	r4,r5,1ee8 <_vsnprintf+0x84c>
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    19bc:	d8800315 	stw	r2,12(sp)
    19c0:	84000854 	ori	r16,r16,33
    19c4:	01000204 	movi	r4,8
    19c8:	00800404 	movi	r2,16
    19cc:	d9000415 	stw	r4,16(sp)
    19d0:	dc000515 	stw	r16,20(sp)
    19d4:	d8800215 	stw	r2,8(sp)
    19d8:	d8000115 	stw	zero,4(sp)
    19dc:	e0800017 	ldw	r2,0(fp)
    19e0:	900f883a 	mov	r7,r18
    19e4:	b00d883a 	mov	r6,r22
    19e8:	d8800015 	stw	r2,0(sp)
    19ec:	a00b883a 	mov	r5,r20
    19f0:	9809883a 	mov	r4,r19
    19f4:	e5c00104 	addi	r23,fp,4
    19f8:	00008140 	call	814 <_ntoa_long>
    19fc:	00013606 	br	1ed8 <_vsnprintf+0x83c>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    1a00:	01401d44 	movi	r5,117
    1a04:	21400226 	beq	r4,r5,1a10 <_vsnprintf+0x374>
    1a08:	01401e04 	movi	r5,120
    1a0c:	2141361e 	bne	r4,r5,1ee8 <_vsnprintf+0x84c>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    1a10:	01401e04 	movi	r5,120
    1a14:	21400f26 	beq	r4,r5,1a54 <_vsnprintf+0x3b8>
    1a18:	01401604 	movi	r5,88
    1a1c:	21400c26 	beq	r4,r5,1a50 <_vsnprintf+0x3b4>
          base = 16U;
        }
        else if (*format == 'o') {
    1a20:	01401bc4 	movi	r5,111
    1a24:	21414726 	beq	r4,r5,1f44 <_vsnprintf+0x8a8>
          base =  8U;
        }
        else if (*format == 'b') {
    1a28:	01401884 	movi	r5,98
    1a2c:	21414726 	beq	r4,r5,1f4c <_vsnprintf+0x8b0>
          base =  2U;
        }
        else {
          base = 10U;
          flags &= ~FLAGS_HASH;   // no hash for dec format
    1a30:	017ffbc4 	movi	r5,-17
    1a34:	8160703a 	and	r16,r16,r5
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    1a38:	01401a44 	movi	r5,105
        }
        else if (*format == 'b') {
          base =  2U;
        }
        else {
          base = 10U;
    1a3c:	01800284 	movi	r6,10
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    1a40:	21400726 	beq	r4,r5,1a60 <_vsnprintf+0x3c4>
    1a44:	01401904 	movi	r5,100
    1a48:	21400526 	beq	r4,r5,1a60 <_vsnprintf+0x3c4>
    1a4c:	00000206 	br	1a58 <_vsnprintf+0x3bc>
          base = 10U;
          flags &= ~FLAGS_HASH;   // no hash for dec format
        }
        // uppercase
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
    1a50:	84000814 	ori	r16,r16,32
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
          base = 16U;
    1a54:	01800404 	movi	r6,16
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    1a58:	017ffcc4 	movi	r5,-13
    1a5c:	8160703a 	and	r16,r16,r5
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    1a60:	8141000c 	andi	r5,r16,1024
    1a64:	28000226 	beq	r5,zero,1a70 <_vsnprintf+0x3d4>
          flags &= ~FLAGS_ZEROPAD;
    1a68:	017fff84 	movi	r5,-2
    1a6c:	8160703a 	and	r16,r16,r5
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    1a70:	01c01a44 	movi	r7,105
    1a74:	8140800c 	andi	r5,r16,512
    1a78:	21c00226 	beq	r4,r7,1a84 <_vsnprintf+0x3e8>
    1a7c:	01c01904 	movi	r7,100
    1a80:	21c0391e 	bne	r4,r7,1b68 <_vsnprintf+0x4cc>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    1a84:	28001226 	beq	r5,zero,1ad0 <_vsnprintf+0x434>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    1a88:	e1000117 	ldw	r4,4(fp)
    1a8c:	e1400017 	ldw	r5,0(fp)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1a90:	d8800515 	stw	r2,20(sp)
    1a94:	2004d7fa 	srli	r2,r4,31
    1a98:	dc000715 	stw	r16,28(sp)
    1a9c:	dd400615 	stw	r21,24(sp)
    1aa0:	d8800215 	stw	r2,8(sp)
    1aa4:	d9800315 	stw	r6,12(sp)
    1aa8:	d8000415 	stw	zero,16(sp)
        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
          // signed
          if (flags & FLAGS_LONG_LONG) {
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    1aac:	e5c00204 	addi	r23,fp,8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1ab0:	2005883a 	mov	r2,r4
    1ab4:	2000040e 	bge	r4,zero,1ac8 <_vsnprintf+0x42c>
    1ab8:	014bc83a 	sub	r5,zero,r5
    1abc:	2808c03a 	cmpne	r4,r5,zero
    1ac0:	0085c83a 	sub	r2,zero,r2
    1ac4:	1105c83a 	sub	r2,r2,r4
    1ac8:	d9400015 	stw	r5,0(sp)
    1acc:	00003106 	br	1b94 <_vsnprintf+0x4f8>
#endif
          }
          else if (flags & FLAGS_LONG) {
    1ad0:	8100400c 	andi	r4,r16,256
    1ad4:	e5c00104 	addi	r23,fp,4
    1ad8:	20000b26 	beq	r4,zero,1b08 <_vsnprintf+0x46c>
            const long value = va_arg(va, long);
    1adc:	e1000017 	ldw	r4,0(fp)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1ae0:	d8800315 	stw	r2,12(sp)
    1ae4:	dc000515 	stw	r16,20(sp)
    1ae8:	2004d7fa 	srli	r2,r4,31
    1aec:	dd400415 	stw	r21,16(sp)
    1af0:	d9800215 	stw	r6,8(sp)
    1af4:	d8800115 	stw	r2,4(sp)
    1af8:	2005883a 	mov	r2,r4
    1afc:	2000370e 	bge	r4,zero,1bdc <_vsnprintf+0x540>
    1b00:	0105c83a 	sub	r2,zero,r4
    1b04:	00003506 	br	1bdc <_vsnprintf+0x540>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    1b08:	8140100c 	andi	r5,r16,64
    1b0c:	e1000017 	ldw	r4,0(fp)
    1b10:	28000426 	beq	r5,zero,1b24 <_vsnprintf+0x488>
    1b14:	21003fcc 	andi	r4,r4,255
    1b18:	2100201c 	xori	r4,r4,128
    1b1c:	213fe004 	addi	r4,r4,-128
    1b20:	00000506 	br	1b38 <_vsnprintf+0x49c>
    1b24:	8140200c 	andi	r5,r16,128
    1b28:	28000326 	beq	r5,zero,1b38 <_vsnprintf+0x49c>
    1b2c:	213fffcc 	andi	r4,r4,65535
    1b30:	2120001c 	xori	r4,r4,32768
    1b34:	21200004 	addi	r4,r4,-32768
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1b38:	d8800315 	stw	r2,12(sp)
    1b3c:	2004d7fa 	srli	r2,r4,31
    1b40:	dc000515 	stw	r16,20(sp)
    1b44:	dd400415 	stw	r21,16(sp)
    1b48:	d8800115 	stw	r2,4(sp)
    1b4c:	d9800215 	stw	r6,8(sp)
          else if (flags & FLAGS_LONG) {
            const long value = va_arg(va, long);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    1b50:	b839883a 	mov	fp,r23
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1b54:	2005883a 	mov	r2,r4
    1b58:	2000010e 	bge	r4,zero,1b60 <_vsnprintf+0x4c4>
    1b5c:	0105c83a 	sub	r2,zero,r4
    1b60:	d8800015 	stw	r2,0(sp)
    1b64:	00003306 	br	1c34 <_vsnprintf+0x598>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    1b68:	28001326 	beq	r5,zero,1bb8 <_vsnprintf+0x51c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    1b6c:	dc000715 	stw	r16,28(sp)
    1b70:	dd400615 	stw	r21,24(sp)
    1b74:	d8800515 	stw	r2,20(sp)
    1b78:	d9800315 	stw	r6,12(sp)
    1b7c:	d8000415 	stw	zero,16(sp)
    1b80:	d8000215 	stw	zero,8(sp)
    1b84:	e0800017 	ldw	r2,0(fp)
    1b88:	e5c00204 	addi	r23,fp,8
    1b8c:	d8800015 	stw	r2,0(sp)
    1b90:	e0800117 	ldw	r2,4(fp)
    1b94:	d8800115 	stw	r2,4(sp)
    1b98:	900f883a 	mov	r7,r18
    1b9c:	b00d883a 	mov	r6,r22
    1ba0:	a00b883a 	mov	r5,r20
    1ba4:	9809883a 	mov	r4,r19
    1ba8:	00009880 	call	988 <_ntoa_long_long>
    1bac:	102d883a 	mov	r22,r2
    1bb0:	b839883a 	mov	fp,r23
    1bb4:	00002506 	br	1c4c <_vsnprintf+0x5b0>
#endif
          }
          else if (flags & FLAGS_LONG) {
    1bb8:	8100400c 	andi	r4,r16,256
    1bbc:	e5c00104 	addi	r23,fp,4
    1bc0:	20000d26 	beq	r4,zero,1bf8 <_vsnprintf+0x55c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    1bc4:	dc000515 	stw	r16,20(sp)
    1bc8:	dd400415 	stw	r21,16(sp)
    1bcc:	d8800315 	stw	r2,12(sp)
    1bd0:	d9800215 	stw	r6,8(sp)
    1bd4:	d8000115 	stw	zero,4(sp)
    1bd8:	e0800017 	ldw	r2,0(fp)
    1bdc:	d8800015 	stw	r2,0(sp)
    1be0:	900f883a 	mov	r7,r18
    1be4:	b00d883a 	mov	r6,r22
    1be8:	a00b883a 	mov	r5,r20
    1bec:	9809883a 	mov	r4,r19
    1bf0:	00008140 	call	814 <_ntoa_long>
    1bf4:	003fed06 	br	1bac <_gp+0xffff34b8>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    1bf8:	8140100c 	andi	r5,r16,64
    1bfc:	e1000017 	ldw	r4,0(fp)
    1c00:	28000226 	beq	r5,zero,1c0c <_vsnprintf+0x570>
    1c04:	21003fcc 	andi	r4,r4,255
    1c08:	00000306 	br	1c18 <_vsnprintf+0x57c>
    1c0c:	8140200c 	andi	r5,r16,128
    1c10:	28000126 	beq	r5,zero,1c18 <_vsnprintf+0x57c>
    1c14:	213fffcc 	andi	r4,r4,65535
    1c18:	b839883a 	mov	fp,r23
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    1c1c:	dc000515 	stw	r16,20(sp)
    1c20:	dd400415 	stw	r21,16(sp)
    1c24:	d8800315 	stw	r2,12(sp)
    1c28:	d9800215 	stw	r6,8(sp)
    1c2c:	d8000115 	stw	zero,4(sp)
    1c30:	d9000015 	stw	r4,0(sp)
    1c34:	b00d883a 	mov	r6,r22
    1c38:	900f883a 	mov	r7,r18
    1c3c:	a00b883a 	mov	r5,r20
    1c40:	9809883a 	mov	r4,r19
    1c44:	00008140 	call	814 <_ntoa_long>
    1c48:	102d883a 	mov	r22,r2
          }
        }
        format++;
    1c4c:	89c00044 	addi	r7,r17,1
        break;
    1c50:	003ea606 	br	16ec <_gp+0xffff2ff8>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    1c54:	01401184 	movi	r5,70
    1c58:	2140011e 	bne	r4,r5,1c60 <_vsnprintf+0x5c4>
    1c5c:	84000814 	ori	r16,r16,32
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    1c60:	dc000415 	stw	r16,16(sp)
    1c64:	dd400315 	stw	r21,12(sp)
    1c68:	d8800215 	stw	r2,8(sp)
    1c6c:	e0800017 	ldw	r2,0(fp)
    1c70:	900f883a 	mov	r7,r18
    1c74:	b00d883a 	mov	r6,r22
    1c78:	d8800015 	stw	r2,0(sp)
    1c7c:	e0800117 	ldw	r2,4(fp)
    1c80:	a00b883a 	mov	r5,r20
    1c84:	9809883a 	mov	r4,r19
    1c88:	d8800115 	stw	r2,4(sp)
    1c8c:	e5c00204 	addi	r23,fp,8
    1c90:	0000b600 	call	b60 <_ftoa>
    1c94:	00009006 	br	1ed8 <_vsnprintf+0x83c>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1c98:	017ff7c4 	movi	r5,-33
    1c9c:	394a703a 	and	r5,r7,r5
    1ca0:	29403fcc 	andi	r5,r5,255
    1ca4:	2940201c 	xori	r5,r5,128
    1ca8:	297fe004 	addi	r5,r5,-128
    1cac:	028011c4 	movi	r10,71
    1cb0:	01801144 	movi	r6,69
    1cb4:	2a80061e 	bne	r5,r10,1cd0 <_vsnprintf+0x634>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1cb8:	013fff44 	movi	r4,-3
    1cbc:	3908703a 	and	r4,r7,r4
    1cc0:	21003fcc 	andi	r4,r4,255
    1cc4:	2100201c 	xori	r4,r4,128
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1cc8:	84020014 	ori	r16,r16,2048
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1ccc:	213fe004 	addi	r4,r4,-128
    1cd0:	2180011e 	bne	r4,r6,1cd8 <_vsnprintf+0x63c>
    1cd4:	84000814 	ori	r16,r16,32
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    1cd8:	dc000415 	stw	r16,16(sp)
    1cdc:	dd400315 	stw	r21,12(sp)
    1ce0:	d8800215 	stw	r2,8(sp)
    1ce4:	e0800017 	ldw	r2,0(fp)
    1ce8:	900f883a 	mov	r7,r18
    1cec:	b00d883a 	mov	r6,r22
    1cf0:	d8800015 	stw	r2,0(sp)
    1cf4:	e0800117 	ldw	r2,4(fp)
    1cf8:	a00b883a 	mov	r5,r20
    1cfc:	9809883a 	mov	r4,r19
    1d00:	d8800115 	stw	r2,4(sp)
    1d04:	e5c00204 	addi	r23,fp,8
    1d08:	00010940 	call	1094 <_etoa>
    1d0c:	00007206 	br	1ed8 <_vsnprintf+0x83c>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    1d10:	8400008c 	andi	r16,r16,2
    1d14:	80000c1e 	bne	r16,zero,1d48 <_vsnprintf+0x6ac>
    1d18:	002f883a 	mov	r23,zero
    1d1c:	b5cd883a 	add	r6,r22,r23
    1d20:	b8c00084 	addi	r3,r23,2
    1d24:	bdc00044 	addi	r23,r23,1
          while (l++ < width) {
    1d28:	bd40052e 	bgeu	r23,r21,1d40 <_vsnprintf+0x6a4>
            out(' ', buffer, idx++, maxlen);
    1d2c:	900f883a 	mov	r7,r18
    1d30:	a00b883a 	mov	r5,r20
    1d34:	01000804 	movi	r4,32
    1d38:	983ee83a 	callr	r19
    1d3c:	003ff706 	br	1d1c <_gp+0xffff3628>
    1d40:	302d883a 	mov	r22,r6
    1d44:	00000106 	br	1d4c <_vsnprintf+0x6b0>
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    1d48:	00c00044 	movi	r3,1
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    1d4c:	e1000007 	ldb	r4,0(fp)
    1d50:	b0800044 	addi	r2,r22,1
    1d54:	d8800a15 	stw	r2,40(sp)
    1d58:	d8c00915 	stw	r3,36(sp)
    1d5c:	900f883a 	mov	r7,r18
    1d60:	b00d883a 	mov	r6,r22
    1d64:	a00b883a 	mov	r5,r20
    1d68:	983ee83a 	callr	r19
    1d6c:	e5c00104 	addi	r23,fp,4
        // post padding
        if (flags & FLAGS_LEFT) {
    1d70:	d8800a17 	ldw	r2,40(sp)
    1d74:	d8c00917 	ldw	r3,36(sp)
    1d78:	80000c26 	beq	r16,zero,1dac <_vsnprintf+0x710>
    1d7c:	1f3fffc4 	addi	fp,r3,-1
    1d80:	e5b9c83a 	sub	fp,fp,r22
          while (l++ < width) {
    1d84:	1707883a 	add	r3,r2,fp
    1d88:	1d40082e 	bgeu	r3,r21,1dac <_vsnprintf+0x710>
            out(' ', buffer, idx++, maxlen);
    1d8c:	100d883a 	mov	r6,r2
    1d90:	900f883a 	mov	r7,r18
    1d94:	a00b883a 	mov	r5,r20
    1d98:	01000804 	movi	r4,32
    1d9c:	14000044 	addi	r16,r2,1
    1da0:	983ee83a 	callr	r19
    1da4:	8005883a 	mov	r2,r16
    1da8:	003ff606 	br	1d84 <_gp+0xffff3690>
          }
        }
        format++;
    1dac:	89c00044 	addi	r7,r17,1
        break;
    1db0:	102d883a 	mov	r22,r2
    1db4:	00004a06 	br	1ee0 <_vsnprintf+0x844>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    1db8:	e0c00104 	addi	r3,fp,4
    1dbc:	d8c00815 	stw	r3,32(sp)
    1dc0:	e2800017 	ldw	r10,0(fp)
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    1dc4:	1000021e 	bne	r2,zero,1dd0 <_vsnprintf+0x734>
    1dc8:	013fffc4 	movi	r4,-1
    1dcc:	00000106 	br	1dd4 <_vsnprintf+0x738>
    1dd0:	1009883a 	mov	r4,r2
    1dd4:	5109883a 	add	r4,r10,r4
    1dd8:	5011883a 	mov	r8,r10
// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
  const char* s;
  for (s = str; *s && maxsize--; ++s);
    1ddc:	41400007 	ldb	r5,0(r8)
    1de0:	28000326 	beq	r5,zero,1df0 <_vsnprintf+0x754>
    1de4:	41000226 	beq	r8,r4,1df0 <_vsnprintf+0x754>
    1de8:	42000044 	addi	r8,r8,1
    1dec:	003ffb06 	br	1ddc <_gp+0xffff36e8>

      case 's' : {
        const char* p = va_arg(va, char*);
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
        // pre padding
        if (flags & FLAGS_PRECISION) {
    1df0:	85c1000c 	andi	r23,r16,1024
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
  const char* s;
  for (s = str; *s && maxsize--; ++s);
  return (unsigned int)(s - str);
    1df4:	42b9c83a 	sub	fp,r8,r10

      case 's' : {
        const char* p = va_arg(va, char*);
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
        // pre padding
        if (flags & FLAGS_PRECISION) {
    1df8:	b8000226 	beq	r23,zero,1e04 <_vsnprintf+0x768>
          l = (l < precision ? l : precision);
    1dfc:	1700012e 	bgeu	r2,fp,1e04 <_vsnprintf+0x768>
    1e00:	1039883a 	mov	fp,r2
        }
        if (!(flags & FLAGS_LEFT)) {
    1e04:	8400008c 	andi	r16,r16,2
    1e08:	8000111e 	bne	r16,zero,1e50 <_vsnprintf+0x7b4>
    1e0c:	e009883a 	mov	r4,fp
    1e10:	b739c83a 	sub	fp,r22,fp
    1e14:	270d883a 	add	r6,r4,fp
          while (l++ < width) {
    1e18:	25800044 	addi	r22,r4,1
    1e1c:	25400a2e 	bgeu	r4,r21,1e48 <_vsnprintf+0x7ac>
            out(' ', buffer, idx++, maxlen);
    1e20:	01000804 	movi	r4,32
    1e24:	d8800a15 	stw	r2,40(sp)
    1e28:	da800915 	stw	r10,36(sp)
    1e2c:	900f883a 	mov	r7,r18
    1e30:	a00b883a 	mov	r5,r20
    1e34:	983ee83a 	callr	r19
        // pre padding
        if (flags & FLAGS_PRECISION) {
          l = (l < precision ? l : precision);
        }
        if (!(flags & FLAGS_LEFT)) {
          while (l++ < width) {
    1e38:	b009883a 	mov	r4,r22
    1e3c:	da800917 	ldw	r10,36(sp)
    1e40:	d8800a17 	ldw	r2,40(sp)
    1e44:	003ff306 	br	1e14 <_gp+0xffff3720>
    1e48:	b039883a 	mov	fp,r22
    1e4c:	302d883a 	mov	r22,r6
    1e50:	b2adc83a 	sub	r22,r22,r10
            out(' ', buffer, idx++, maxlen);
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1e54:	51000007 	ldb	r4,0(r10)
    1e58:	558d883a 	add	r6,r10,r22
    1e5c:	20000e26 	beq	r4,zero,1e98 <_vsnprintf+0x7fc>
    1e60:	b800091e 	bne	r23,zero,1e88 <_vsnprintf+0x7ec>
          out(*(p++), buffer, idx++, maxlen);
    1e64:	52800044 	addi	r10,r10,1
    1e68:	d8800a15 	stw	r2,40(sp)
    1e6c:	da800915 	stw	r10,36(sp)
    1e70:	900f883a 	mov	r7,r18
    1e74:	a00b883a 	mov	r5,r20
    1e78:	983ee83a 	callr	r19
    1e7c:	da800917 	ldw	r10,36(sp)
    1e80:	d8800a17 	ldw	r2,40(sp)
    1e84:	003ff306 	br	1e54 <_gp+0xffff3760>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1e88:	117fffc4 	addi	r5,r2,-1
    1e8c:	10000226 	beq	r2,zero,1e98 <_vsnprintf+0x7fc>
    1e90:	2805883a 	mov	r2,r5
    1e94:	003ff306 	br	1e64 <_gp+0xffff3770>
    1e98:	302d883a 	mov	r22,r6
          out(*(p++), buffer, idx++, maxlen);
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    1e9c:	80000b26 	beq	r16,zero,1ecc <_vsnprintf+0x830>
    1ea0:	e1a1c83a 	sub	r16,fp,r6
          while (l++ < width) {
    1ea4:	b405883a 	add	r2,r22,r16
    1ea8:	1540082e 	bgeu	r2,r21,1ecc <_vsnprintf+0x830>
            out(' ', buffer, idx++, maxlen);
    1eac:	b00d883a 	mov	r6,r22
    1eb0:	b5c00044 	addi	r23,r22,1
    1eb4:	900f883a 	mov	r7,r18
    1eb8:	a00b883a 	mov	r5,r20
    1ebc:	01000804 	movi	r4,32
    1ec0:	983ee83a 	callr	r19
    1ec4:	b82d883a 	mov	r22,r23
    1ec8:	003ff606 	br	1ea4 <_gp+0xffff37b0>
          }
        }
        format++;
    1ecc:	89c00044 	addi	r7,r17,1
        format++;
        break;
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    1ed0:	df000817 	ldw	fp,32(sp)
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
        break;
    1ed4:	003e0506 	br	16ec <_gp+0xffff2ff8>
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    1ed8:	102d883a 	mov	r22,r2
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    1edc:	89c00044 	addi	r7,r17,1
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    1ee0:	b839883a 	mov	fp,r23
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
        break;
    1ee4:	003e0106 	br	16ec <_gp+0xffff2ff8>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    1ee8:	b4000044 	addi	r16,r22,1
    1eec:	900f883a 	mov	r7,r18
    1ef0:	b00d883a 	mov	r6,r22
    1ef4:	a00b883a 	mov	r5,r20
    1ef8:	003e4b06 	br	1828 <_gp+0xffff3134>
    1efc:	002b883a 	mov	r21,zero

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
  while (_is_digit(**str)) {
    1f00:	2823883a 	mov	r17,r5
    1f04:	b8c00003 	ldbu	r3,0(r23)
    1f08:	18bff404 	addi	r2,r3,-48
    1f0c:	10803fcc 	andi	r2,r2,255
    1f10:	88be6136 	bltu	r17,r2,1898 <_gp+0xffff31a4>
    1f14:	a809883a 	mov	r4,r21
    1f18:	01400284 	movi	r5,10
    1f1c:	d8c00915 	stw	r3,36(sp)
    1f20:	0002ed40 	call	2ed4 <__mulsi3>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1f24:	d8c00917 	ldw	r3,36(sp)
    1f28:	10bff404 	addi	r2,r2,-48
    1f2c:	bdc00044 	addi	r23,r23,1
    1f30:	18c03fcc 	andi	r3,r3,255
    1f34:	18c0201c 	xori	r3,r3,128
    1f38:	18ffe004 	addi	r3,r3,-128
    1f3c:	18ab883a 	add	r21,r3,r2
    1f40:	003ff006 	br	1f04 <_gp+0xffff3810>
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
          base = 16U;
        }
        else if (*format == 'o') {
          base =  8U;
    1f44:	01800204 	movi	r6,8
    1f48:	003ebe06 	br	1a44 <_gp+0xffff3350>
        }
        else if (*format == 'b') {
          base =  2U;
    1f4c:	01800084 	movi	r6,2
    1f50:	003ebc06 	br	1a44 <_gp+0xffff3350>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    1f54:	900f883a 	mov	r7,r18
    1f58:	a00b883a 	mov	r5,r20
    1f5c:	0009883a 	mov	r4,zero
    1f60:	983ee83a 	callr	r19

  // return written chars without terminating \0
  return (int)idx;
}
    1f64:	b005883a 	mov	r2,r22
    1f68:	dfc01417 	ldw	ra,80(sp)
    1f6c:	df001317 	ldw	fp,76(sp)
    1f70:	ddc01217 	ldw	r23,72(sp)
    1f74:	dd801117 	ldw	r22,68(sp)
    1f78:	dd401017 	ldw	r21,64(sp)
    1f7c:	dd000f17 	ldw	r20,60(sp)
    1f80:	dcc00e17 	ldw	r19,56(sp)
    1f84:	dc800d17 	ldw	r18,52(sp)
    1f88:	dc400c17 	ldw	r17,48(sp)
    1f8c:	dc000b17 	ldw	r16,44(sp)
    1f90:	dec01504 	addi	sp,sp,84
    1f94:	f800283a 	ret

00001f98 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    1f98:	defffa04 	addi	sp,sp,-24
    1f9c:	dfc00215 	stw	ra,8(sp)
    1fa0:	d9400315 	stw	r5,12(sp)
    1fa4:	d9800415 	stw	r6,16(sp)
    1fa8:	d9c00515 	stw	r7,20(sp)
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    1fac:	d8800304 	addi	r2,sp,12
    1fb0:	200f883a 	mov	r7,r4
    1fb4:	01000034 	movhi	r4,0
    1fb8:	d8800015 	stw	r2,0(sp)
    1fbc:	01bfffc4 	movi	r6,-1
    1fc0:	d9400104 	addi	r5,sp,4
    1fc4:	2102ca04 	addi	r4,r4,2856
    1fc8:	000169c0 	call	169c <_vsnprintf>
  va_end(va);
  return ret;
}
    1fcc:	dfc00217 	ldw	ra,8(sp)
    1fd0:	dec00604 	addi	sp,sp,24
    1fd4:	f800283a 	ret

00001fd8 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
    1fd8:	defffc04 	addi	sp,sp,-16
    1fdc:	dfc00115 	stw	ra,4(sp)
    1fe0:	d9800215 	stw	r6,8(sp)
    1fe4:	d9c00315 	stw	r7,12(sp)
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    1fe8:	d8800204 	addi	r2,sp,8
    1fec:	280f883a 	mov	r7,r5
    1ff0:	200b883a 	mov	r5,r4
    1ff4:	01000034 	movhi	r4,0
    1ff8:	d8800015 	stw	r2,0(sp)
    1ffc:	01bfffc4 	movi	r6,-1
    2000:	21015404 	addi	r4,r4,1360
    2004:	000169c0 	call	169c <_vsnprintf>
  va_end(va);
  return ret;
}
    2008:	dfc00117 	ldw	ra,4(sp)
    200c:	dec00404 	addi	sp,sp,16
    2010:	f800283a 	ret

00002014 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
    2014:	defffd04 	addi	sp,sp,-12
    2018:	dfc00115 	stw	ra,4(sp)
    201c:	d9c00215 	stw	r7,8(sp)
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    2020:	d8800204 	addi	r2,sp,8
    2024:	300f883a 	mov	r7,r6
    2028:	280d883a 	mov	r6,r5
    202c:	200b883a 	mov	r5,r4
    2030:	01000034 	movhi	r4,0
    2034:	d8800015 	stw	r2,0(sp)
    2038:	21015404 	addi	r4,r4,1360
    203c:	000169c0 	call	169c <_vsnprintf>
  va_end(va);
  return ret;
}
    2040:	dfc00117 	ldw	ra,4(sp)
    2044:	dec00304 	addi	sp,sp,12
    2048:	f800283a 	ret

0000204c <vprintf_>:


int vprintf_(const char* format, va_list va)
{
    204c:	defffd04 	addi	sp,sp,-12
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    2050:	200f883a 	mov	r7,r4
    2054:	01000034 	movhi	r4,0
    2058:	d9400015 	stw	r5,0(sp)
    205c:	01bfffc4 	movi	r6,-1
    2060:	d9400104 	addi	r5,sp,4
    2064:	2102ca04 	addi	r4,r4,2856
  return ret;
}


int vprintf_(const char* format, va_list va)
{
    2068:	dfc00215 	stw	ra,8(sp)
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    206c:	000169c0 	call	169c <_vsnprintf>
}
    2070:	dfc00217 	ldw	ra,8(sp)
    2074:	dec00304 	addi	sp,sp,12
    2078:	f800283a 	ret

0000207c <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
    207c:	defffe04 	addi	sp,sp,-8
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    2080:	d9c00015 	stw	r7,0(sp)
    2084:	300f883a 	mov	r7,r6
    2088:	280d883a 	mov	r6,r5
    208c:	200b883a 	mov	r5,r4
    2090:	01000034 	movhi	r4,0
    2094:	21015404 	addi	r4,r4,1360
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
    2098:	dfc00115 	stw	ra,4(sp)
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    209c:	000169c0 	call	169c <_vsnprintf>
}
    20a0:	dfc00117 	ldw	ra,4(sp)
    20a4:	dec00204 	addi	sp,sp,8
    20a8:	f800283a 	ret

000020ac <fctprintf>:


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
    20ac:	defffb04 	addi	sp,sp,-20
    20b0:	dfc00315 	stw	ra,12(sp)
    20b4:	d9c00415 	stw	r7,16(sp)
  va_list va;
  va_start(va, format);
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    20b8:	d9000115 	stw	r4,4(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    20bc:	d8800404 	addi	r2,sp,16
    20c0:	01000034 	movhi	r4,0

int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
  va_list va;
  va_start(va, format);
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    20c4:	d9400215 	stw	r5,8(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    20c8:	300f883a 	mov	r7,r6
    20cc:	d8800015 	stw	r2,0(sp)
    20d0:	01bfffc4 	movi	r6,-1
    20d4:	d9400104 	addi	r5,sp,4
    20d8:	2102d004 	addi	r4,r4,2880
    20dc:	000169c0 	call	169c <_vsnprintf>
  va_end(va);
  return ret;
}
    20e0:	dfc00317 	ldw	ra,12(sp)
    20e4:	dec00504 	addi	sp,sp,20
    20e8:	f800283a 	ret

000020ec <__fixunsdfsi>:
    20ec:	defffd04 	addi	sp,sp,-12
    20f0:	000d883a 	mov	r6,zero
    20f4:	01d07834 	movhi	r7,16864
    20f8:	dc400115 	stw	r17,4(sp)
    20fc:	dc000015 	stw	r16,0(sp)
    2100:	dfc00215 	stw	ra,8(sp)
    2104:	2023883a 	mov	r17,r4
    2108:	2821883a 	mov	r16,r5
    210c:	0004be80 	call	4be8 <__gedf2>
    2110:	1000080e 	bge	r2,zero,2134 <__fixunsdfsi+0x48>
    2114:	8809883a 	mov	r4,r17
    2118:	800b883a 	mov	r5,r16
    211c:	0005f200 	call	5f20 <__fixdfsi>
    2120:	dfc00217 	ldw	ra,8(sp)
    2124:	dc400117 	ldw	r17,4(sp)
    2128:	dc000017 	ldw	r16,0(sp)
    212c:	dec00304 	addi	sp,sp,12
    2130:	f800283a 	ret
    2134:	000d883a 	mov	r6,zero
    2138:	01d07834 	movhi	r7,16864
    213c:	8809883a 	mov	r4,r17
    2140:	800b883a 	mov	r5,r16
    2144:	00056240 	call	5624 <__subdf3>
    2148:	180b883a 	mov	r5,r3
    214c:	1009883a 	mov	r4,r2
    2150:	0005f200 	call	5f20 <__fixdfsi>
    2154:	00e00034 	movhi	r3,32768
    2158:	10c5883a 	add	r2,r2,r3
    215c:	003ff006 	br	2120 <_gp+0xffff3a2c>

00002160 <__udivdi3>:
    2160:	defff404 	addi	sp,sp,-48
    2164:	dcc00515 	stw	r19,20(sp)
    2168:	dc000215 	stw	r16,8(sp)
    216c:	dfc00b15 	stw	ra,44(sp)
    2170:	df000a15 	stw	fp,40(sp)
    2174:	ddc00915 	stw	r23,36(sp)
    2178:	dd800815 	stw	r22,32(sp)
    217c:	dd400715 	stw	r21,28(sp)
    2180:	dd000615 	stw	r20,24(sp)
    2184:	dc800415 	stw	r18,16(sp)
    2188:	dc400315 	stw	r17,12(sp)
    218c:	2027883a 	mov	r19,r4
    2190:	2821883a 	mov	r16,r5
    2194:	3800461e 	bne	r7,zero,22b0 <__udivdi3+0x150>
    2198:	3023883a 	mov	r17,r6
    219c:	2025883a 	mov	r18,r4
    21a0:	2980572e 	bgeu	r5,r6,2300 <__udivdi3+0x1a0>
    21a4:	00bfffd4 	movui	r2,65535
    21a8:	282d883a 	mov	r22,r5
    21ac:	1180b236 	bltu	r2,r6,2478 <__udivdi3+0x318>
    21b0:	00803fc4 	movi	r2,255
    21b4:	1185803a 	cmpltu	r2,r2,r6
    21b8:	100490fa 	slli	r2,r2,3
    21bc:	3086d83a 	srl	r3,r6,r2
    21c0:	01000034 	movhi	r4,0
    21c4:	21197d04 	addi	r4,r4,26100
    21c8:	20c7883a 	add	r3,r4,r3
    21cc:	18c00003 	ldbu	r3,0(r3)
    21d0:	1885883a 	add	r2,r3,r2
    21d4:	00c00804 	movi	r3,32
    21d8:	1887c83a 	sub	r3,r3,r2
    21dc:	18000526 	beq	r3,zero,21f4 <__udivdi3+0x94>
    21e0:	80e0983a 	sll	r16,r16,r3
    21e4:	9884d83a 	srl	r2,r19,r2
    21e8:	30e2983a 	sll	r17,r6,r3
    21ec:	98e4983a 	sll	r18,r19,r3
    21f0:	142cb03a 	or	r22,r2,r16
    21f4:	882ad43a 	srli	r21,r17,16
    21f8:	b009883a 	mov	r4,r22
    21fc:	8d3fffcc 	andi	r20,r17,65535
    2200:	a80b883a 	mov	r5,r21
    2204:	0002e7c0 	call	2e7c <__umodsi3>
    2208:	b009883a 	mov	r4,r22
    220c:	a80b883a 	mov	r5,r21
    2210:	1027883a 	mov	r19,r2
    2214:	0002e180 	call	2e18 <__udivsi3>
    2218:	100b883a 	mov	r5,r2
    221c:	a009883a 	mov	r4,r20
    2220:	102d883a 	mov	r22,r2
    2224:	0002ed40 	call	2ed4 <__mulsi3>
    2228:	9826943a 	slli	r19,r19,16
    222c:	9006d43a 	srli	r3,r18,16
    2230:	1cc6b03a 	or	r3,r3,r19
    2234:	1880052e 	bgeu	r3,r2,224c <__udivdi3+0xec>
    2238:	1c47883a 	add	r3,r3,r17
    223c:	b13fffc4 	addi	r4,r22,-1
    2240:	1c400136 	bltu	r3,r17,2248 <__udivdi3+0xe8>
    2244:	18814236 	bltu	r3,r2,2750 <__udivdi3+0x5f0>
    2248:	202d883a 	mov	r22,r4
    224c:	18a1c83a 	sub	r16,r3,r2
    2250:	8009883a 	mov	r4,r16
    2254:	a80b883a 	mov	r5,r21
    2258:	0002e7c0 	call	2e7c <__umodsi3>
    225c:	1027883a 	mov	r19,r2
    2260:	8009883a 	mov	r4,r16
    2264:	a80b883a 	mov	r5,r21
    2268:	9826943a 	slli	r19,r19,16
    226c:	0002e180 	call	2e18 <__udivsi3>
    2270:	100b883a 	mov	r5,r2
    2274:	a009883a 	mov	r4,r20
    2278:	94bfffcc 	andi	r18,r18,65535
    227c:	1021883a 	mov	r16,r2
    2280:	94e4b03a 	or	r18,r18,r19
    2284:	0002ed40 	call	2ed4 <__mulsi3>
    2288:	9080052e 	bgeu	r18,r2,22a0 <__udivdi3+0x140>
    228c:	8ca5883a 	add	r18,r17,r18
    2290:	80ffffc4 	addi	r3,r16,-1
    2294:	94410c36 	bltu	r18,r17,26c8 <__udivdi3+0x568>
    2298:	90810b2e 	bgeu	r18,r2,26c8 <__udivdi3+0x568>
    229c:	843fff84 	addi	r16,r16,-2
    22a0:	b004943a 	slli	r2,r22,16
    22a4:	0007883a 	mov	r3,zero
    22a8:	1404b03a 	or	r2,r2,r16
    22ac:	00005e06 	br	2428 <__udivdi3+0x2c8>
    22b0:	29c05b36 	bltu	r5,r7,2420 <__udivdi3+0x2c0>
    22b4:	00bfffd4 	movui	r2,65535
    22b8:	11c0672e 	bgeu	r2,r7,2458 <__udivdi3+0x2f8>
    22bc:	00804034 	movhi	r2,256
    22c0:	10bfffc4 	addi	r2,r2,-1
    22c4:	11c10a36 	bltu	r2,r7,26f0 <__udivdi3+0x590>
    22c8:	00800404 	movi	r2,16
    22cc:	3886d83a 	srl	r3,r7,r2
    22d0:	01000034 	movhi	r4,0
    22d4:	21197d04 	addi	r4,r4,26100
    22d8:	20c7883a 	add	r3,r4,r3
    22dc:	18c00003 	ldbu	r3,0(r3)
    22e0:	05c00804 	movi	r23,32
    22e4:	1885883a 	add	r2,r3,r2
    22e8:	b8afc83a 	sub	r23,r23,r2
    22ec:	b800671e 	bne	r23,zero,248c <__udivdi3+0x32c>
    22f0:	3c010536 	bltu	r7,r16,2708 <__udivdi3+0x5a8>
    22f4:	9985403a 	cmpgeu	r2,r19,r6
    22f8:	0007883a 	mov	r3,zero
    22fc:	00004a06 	br	2428 <__udivdi3+0x2c8>
    2300:	3000041e 	bne	r6,zero,2314 <__udivdi3+0x1b4>
    2304:	000b883a 	mov	r5,zero
    2308:	01000044 	movi	r4,1
    230c:	0002e180 	call	2e18 <__udivsi3>
    2310:	1023883a 	mov	r17,r2
    2314:	00bfffd4 	movui	r2,65535
    2318:	1440532e 	bgeu	r2,r17,2468 <__udivdi3+0x308>
    231c:	00804034 	movhi	r2,256
    2320:	10bfffc4 	addi	r2,r2,-1
    2324:	1440f436 	bltu	r2,r17,26f8 <__udivdi3+0x598>
    2328:	00800404 	movi	r2,16
    232c:	8886d83a 	srl	r3,r17,r2
    2330:	01000034 	movhi	r4,0
    2334:	21197d04 	addi	r4,r4,26100
    2338:	20c7883a 	add	r3,r4,r3
    233c:	18c00003 	ldbu	r3,0(r3)
    2340:	1885883a 	add	r2,r3,r2
    2344:	00c00804 	movi	r3,32
    2348:	1887c83a 	sub	r3,r3,r2
    234c:	1800a51e 	bne	r3,zero,25e4 <__udivdi3+0x484>
    2350:	882ad43a 	srli	r21,r17,16
    2354:	8461c83a 	sub	r16,r16,r17
    2358:	8d3fffcc 	andi	r20,r17,65535
    235c:	00c00044 	movi	r3,1
    2360:	a80b883a 	mov	r5,r21
    2364:	8009883a 	mov	r4,r16
    2368:	d8c00115 	stw	r3,4(sp)
    236c:	0002e7c0 	call	2e7c <__umodsi3>
    2370:	a80b883a 	mov	r5,r21
    2374:	8009883a 	mov	r4,r16
    2378:	1027883a 	mov	r19,r2
    237c:	0002e180 	call	2e18 <__udivsi3>
    2380:	a00b883a 	mov	r5,r20
    2384:	1009883a 	mov	r4,r2
    2388:	102d883a 	mov	r22,r2
    238c:	0002ed40 	call	2ed4 <__mulsi3>
    2390:	9826943a 	slli	r19,r19,16
    2394:	900ed43a 	srli	r7,r18,16
    2398:	d8c00117 	ldw	r3,4(sp)
    239c:	3cceb03a 	or	r7,r7,r19
    23a0:	3880052e 	bgeu	r7,r2,23b8 <__udivdi3+0x258>
    23a4:	3c4f883a 	add	r7,r7,r17
    23a8:	b13fffc4 	addi	r4,r22,-1
    23ac:	3c400136 	bltu	r7,r17,23b4 <__udivdi3+0x254>
    23b0:	3880e436 	bltu	r7,r2,2744 <__udivdi3+0x5e4>
    23b4:	202d883a 	mov	r22,r4
    23b8:	38a1c83a 	sub	r16,r7,r2
    23bc:	8009883a 	mov	r4,r16
    23c0:	a80b883a 	mov	r5,r21
    23c4:	d8c00115 	stw	r3,4(sp)
    23c8:	0002e7c0 	call	2e7c <__umodsi3>
    23cc:	1027883a 	mov	r19,r2
    23d0:	8009883a 	mov	r4,r16
    23d4:	a80b883a 	mov	r5,r21
    23d8:	9826943a 	slli	r19,r19,16
    23dc:	0002e180 	call	2e18 <__udivsi3>
    23e0:	a00b883a 	mov	r5,r20
    23e4:	1009883a 	mov	r4,r2
    23e8:	94bfffcc 	andi	r18,r18,65535
    23ec:	1021883a 	mov	r16,r2
    23f0:	94e4b03a 	or	r18,r18,r19
    23f4:	0002ed40 	call	2ed4 <__mulsi3>
    23f8:	d8c00117 	ldw	r3,4(sp)
    23fc:	9080052e 	bgeu	r18,r2,2414 <__udivdi3+0x2b4>
    2400:	8ca5883a 	add	r18,r17,r18
    2404:	813fffc4 	addi	r4,r16,-1
    2408:	9440ad36 	bltu	r18,r17,26c0 <__udivdi3+0x560>
    240c:	9080ac2e 	bgeu	r18,r2,26c0 <__udivdi3+0x560>
    2410:	843fff84 	addi	r16,r16,-2
    2414:	b004943a 	slli	r2,r22,16
    2418:	1404b03a 	or	r2,r2,r16
    241c:	00000206 	br	2428 <__udivdi3+0x2c8>
    2420:	0007883a 	mov	r3,zero
    2424:	0005883a 	mov	r2,zero
    2428:	dfc00b17 	ldw	ra,44(sp)
    242c:	df000a17 	ldw	fp,40(sp)
    2430:	ddc00917 	ldw	r23,36(sp)
    2434:	dd800817 	ldw	r22,32(sp)
    2438:	dd400717 	ldw	r21,28(sp)
    243c:	dd000617 	ldw	r20,24(sp)
    2440:	dcc00517 	ldw	r19,20(sp)
    2444:	dc800417 	ldw	r18,16(sp)
    2448:	dc400317 	ldw	r17,12(sp)
    244c:	dc000217 	ldw	r16,8(sp)
    2450:	dec00c04 	addi	sp,sp,48
    2454:	f800283a 	ret
    2458:	00803fc4 	movi	r2,255
    245c:	11c5803a 	cmpltu	r2,r2,r7
    2460:	100490fa 	slli	r2,r2,3
    2464:	003f9906 	br	22cc <_gp+0xffff3bd8>
    2468:	00803fc4 	movi	r2,255
    246c:	1445803a 	cmpltu	r2,r2,r17
    2470:	100490fa 	slli	r2,r2,3
    2474:	003fad06 	br	232c <_gp+0xffff3c38>
    2478:	00804034 	movhi	r2,256
    247c:	10bfffc4 	addi	r2,r2,-1
    2480:	11809f36 	bltu	r2,r6,2700 <__udivdi3+0x5a0>
    2484:	00800404 	movi	r2,16
    2488:	003f4c06 	br	21bc <_gp+0xffff3ac8>
    248c:	3dce983a 	sll	r7,r7,r23
    2490:	30b8d83a 	srl	fp,r6,r2
    2494:	80a2d83a 	srl	r17,r16,r2
    2498:	35cc983a 	sll	r6,r6,r23
    249c:	3f38b03a 	or	fp,r7,fp
    24a0:	e024d43a 	srli	r18,fp,16
    24a4:	9884d83a 	srl	r2,r19,r2
    24a8:	85e0983a 	sll	r16,r16,r23
    24ac:	8809883a 	mov	r4,r17
    24b0:	900b883a 	mov	r5,r18
    24b4:	d9800015 	stw	r6,0(sp)
    24b8:	1420b03a 	or	r16,r2,r16
    24bc:	0002e7c0 	call	2e7c <__umodsi3>
    24c0:	900b883a 	mov	r5,r18
    24c4:	8809883a 	mov	r4,r17
    24c8:	1029883a 	mov	r20,r2
    24cc:	e5bfffcc 	andi	r22,fp,65535
    24d0:	0002e180 	call	2e18 <__udivsi3>
    24d4:	100b883a 	mov	r5,r2
    24d8:	b009883a 	mov	r4,r22
    24dc:	102b883a 	mov	r21,r2
    24e0:	0002ed40 	call	2ed4 <__mulsi3>
    24e4:	a028943a 	slli	r20,r20,16
    24e8:	8006d43a 	srli	r3,r16,16
    24ec:	1d06b03a 	or	r3,r3,r20
    24f0:	1880042e 	bgeu	r3,r2,2504 <__udivdi3+0x3a4>
    24f4:	1f07883a 	add	r3,r3,fp
    24f8:	a93fffc4 	addi	r4,r21,-1
    24fc:	1f00892e 	bgeu	r3,fp,2724 <__udivdi3+0x5c4>
    2500:	202b883a 	mov	r21,r4
    2504:	18a3c83a 	sub	r17,r3,r2
    2508:	8809883a 	mov	r4,r17
    250c:	900b883a 	mov	r5,r18
    2510:	0002e7c0 	call	2e7c <__umodsi3>
    2514:	1029883a 	mov	r20,r2
    2518:	8809883a 	mov	r4,r17
    251c:	900b883a 	mov	r5,r18
    2520:	a028943a 	slli	r20,r20,16
    2524:	0002e180 	call	2e18 <__udivsi3>
    2528:	100b883a 	mov	r5,r2
    252c:	b009883a 	mov	r4,r22
    2530:	843fffcc 	andi	r16,r16,65535
    2534:	1023883a 	mov	r17,r2
    2538:	8520b03a 	or	r16,r16,r20
    253c:	0002ed40 	call	2ed4 <__mulsi3>
    2540:	8080042e 	bgeu	r16,r2,2554 <__udivdi3+0x3f4>
    2544:	8721883a 	add	r16,r16,fp
    2548:	88ffffc4 	addi	r3,r17,-1
    254c:	8700712e 	bgeu	r16,fp,2714 <__udivdi3+0x5b4>
    2550:	1823883a 	mov	r17,r3
    2554:	a80e943a 	slli	r7,r21,16
    2558:	d8c00017 	ldw	r3,0(sp)
    255c:	80a1c83a 	sub	r16,r16,r2
    2560:	3c64b03a 	or	r18,r7,r17
    2564:	1d3fffcc 	andi	r20,r3,65535
    2568:	9022d43a 	srli	r17,r18,16
    256c:	95bfffcc 	andi	r22,r18,65535
    2570:	a00b883a 	mov	r5,r20
    2574:	b009883a 	mov	r4,r22
    2578:	182ad43a 	srli	r21,r3,16
    257c:	0002ed40 	call	2ed4 <__mulsi3>
    2580:	a00b883a 	mov	r5,r20
    2584:	8809883a 	mov	r4,r17
    2588:	1039883a 	mov	fp,r2
    258c:	0002ed40 	call	2ed4 <__mulsi3>
    2590:	8809883a 	mov	r4,r17
    2594:	a80b883a 	mov	r5,r21
    2598:	1029883a 	mov	r20,r2
    259c:	0002ed40 	call	2ed4 <__mulsi3>
    25a0:	a80b883a 	mov	r5,r21
    25a4:	b009883a 	mov	r4,r22
    25a8:	1023883a 	mov	r17,r2
    25ac:	0002ed40 	call	2ed4 <__mulsi3>
    25b0:	e006d43a 	srli	r3,fp,16
    25b4:	1505883a 	add	r2,r2,r20
    25b8:	1887883a 	add	r3,r3,r2
    25bc:	1d00022e 	bgeu	r3,r20,25c8 <__udivdi3+0x468>
    25c0:	00800074 	movhi	r2,1
    25c4:	88a3883a 	add	r17,r17,r2
    25c8:	1804d43a 	srli	r2,r3,16
    25cc:	1463883a 	add	r17,r2,r17
    25d0:	84404436 	bltu	r16,r17,26e4 <__udivdi3+0x584>
    25d4:	84403e26 	beq	r16,r17,26d0 <__udivdi3+0x570>
    25d8:	9005883a 	mov	r2,r18
    25dc:	0007883a 	mov	r3,zero
    25e0:	003f9106 	br	2428 <_gp+0xffff3d34>
    25e4:	88e2983a 	sll	r17,r17,r3
    25e8:	80aed83a 	srl	r23,r16,r2
    25ec:	80e0983a 	sll	r16,r16,r3
    25f0:	882ad43a 	srli	r21,r17,16
    25f4:	9884d83a 	srl	r2,r19,r2
    25f8:	b809883a 	mov	r4,r23
    25fc:	a80b883a 	mov	r5,r21
    2600:	98e4983a 	sll	r18,r19,r3
    2604:	142cb03a 	or	r22,r2,r16
    2608:	0002e7c0 	call	2e7c <__umodsi3>
    260c:	b809883a 	mov	r4,r23
    2610:	a80b883a 	mov	r5,r21
    2614:	1027883a 	mov	r19,r2
    2618:	8d3fffcc 	andi	r20,r17,65535
    261c:	0002e180 	call	2e18 <__udivsi3>
    2620:	a009883a 	mov	r4,r20
    2624:	100b883a 	mov	r5,r2
    2628:	102f883a 	mov	r23,r2
    262c:	0002ed40 	call	2ed4 <__mulsi3>
    2630:	9826943a 	slli	r19,r19,16
    2634:	b008d43a 	srli	r4,r22,16
    2638:	24c8b03a 	or	r4,r4,r19
    263c:	2080062e 	bgeu	r4,r2,2658 <__udivdi3+0x4f8>
    2640:	2449883a 	add	r4,r4,r17
    2644:	b8ffffc4 	addi	r3,r23,-1
    2648:	24403c36 	bltu	r4,r17,273c <__udivdi3+0x5dc>
    264c:	20803b2e 	bgeu	r4,r2,273c <__udivdi3+0x5dc>
    2650:	bdffff84 	addi	r23,r23,-2
    2654:	2449883a 	add	r4,r4,r17
    2658:	20a1c83a 	sub	r16,r4,r2
    265c:	a80b883a 	mov	r5,r21
    2660:	8009883a 	mov	r4,r16
    2664:	0002e7c0 	call	2e7c <__umodsi3>
    2668:	a80b883a 	mov	r5,r21
    266c:	8009883a 	mov	r4,r16
    2670:	1027883a 	mov	r19,r2
    2674:	0002e180 	call	2e18 <__udivsi3>
    2678:	a009883a 	mov	r4,r20
    267c:	100b883a 	mov	r5,r2
    2680:	9826943a 	slli	r19,r19,16
    2684:	1039883a 	mov	fp,r2
    2688:	0002ed40 	call	2ed4 <__mulsi3>
    268c:	b13fffcc 	andi	r4,r22,65535
    2690:	24c8b03a 	or	r4,r4,r19
    2694:	2080062e 	bgeu	r4,r2,26b0 <__udivdi3+0x550>
    2698:	2449883a 	add	r4,r4,r17
    269c:	e0ffffc4 	addi	r3,fp,-1
    26a0:	24402436 	bltu	r4,r17,2734 <__udivdi3+0x5d4>
    26a4:	2080232e 	bgeu	r4,r2,2734 <__udivdi3+0x5d4>
    26a8:	e73fff84 	addi	fp,fp,-2
    26ac:	2449883a 	add	r4,r4,r17
    26b0:	b82e943a 	slli	r23,r23,16
    26b4:	20a1c83a 	sub	r16,r4,r2
    26b8:	bf06b03a 	or	r3,r23,fp
    26bc:	003f2806 	br	2360 <_gp+0xffff3c6c>
    26c0:	2021883a 	mov	r16,r4
    26c4:	003f5306 	br	2414 <_gp+0xffff3d20>
    26c8:	1821883a 	mov	r16,r3
    26cc:	003ef406 	br	22a0 <_gp+0xffff3bac>
    26d0:	1806943a 	slli	r3,r3,16
    26d4:	9de6983a 	sll	r19,r19,r23
    26d8:	e73fffcc 	andi	fp,fp,65535
    26dc:	1f07883a 	add	r3,r3,fp
    26e0:	98ffbd2e 	bgeu	r19,r3,25d8 <_gp+0xffff3ee4>
    26e4:	90bfffc4 	addi	r2,r18,-1
    26e8:	0007883a 	mov	r3,zero
    26ec:	003f4e06 	br	2428 <_gp+0xffff3d34>
    26f0:	00800604 	movi	r2,24
    26f4:	003ef506 	br	22cc <_gp+0xffff3bd8>
    26f8:	00800604 	movi	r2,24
    26fc:	003f0b06 	br	232c <_gp+0xffff3c38>
    2700:	00800604 	movi	r2,24
    2704:	003ead06 	br	21bc <_gp+0xffff3ac8>
    2708:	0007883a 	mov	r3,zero
    270c:	00800044 	movi	r2,1
    2710:	003f4506 	br	2428 <_gp+0xffff3d34>
    2714:	80bf8e2e 	bgeu	r16,r2,2550 <_gp+0xffff3e5c>
    2718:	8c7fff84 	addi	r17,r17,-2
    271c:	8721883a 	add	r16,r16,fp
    2720:	003f8c06 	br	2554 <_gp+0xffff3e60>
    2724:	18bf762e 	bgeu	r3,r2,2500 <_gp+0xffff3e0c>
    2728:	ad7fff84 	addi	r21,r21,-2
    272c:	1f07883a 	add	r3,r3,fp
    2730:	003f7406 	br	2504 <_gp+0xffff3e10>
    2734:	1839883a 	mov	fp,r3
    2738:	003fdd06 	br	26b0 <_gp+0xffff3fbc>
    273c:	182f883a 	mov	r23,r3
    2740:	003fc506 	br	2658 <_gp+0xffff3f64>
    2744:	b5bfff84 	addi	r22,r22,-2
    2748:	3c4f883a 	add	r7,r7,r17
    274c:	003f1a06 	br	23b8 <_gp+0xffff3cc4>
    2750:	b5bfff84 	addi	r22,r22,-2
    2754:	1c47883a 	add	r3,r3,r17
    2758:	003ebc06 	br	224c <_gp+0xffff3b58>

0000275c <__umoddi3>:
    275c:	defff304 	addi	sp,sp,-52
    2760:	df000b15 	stw	fp,44(sp)
    2764:	dc400415 	stw	r17,16(sp)
    2768:	dc000315 	stw	r16,12(sp)
    276c:	dfc00c15 	stw	ra,48(sp)
    2770:	ddc00a15 	stw	r23,40(sp)
    2774:	dd800915 	stw	r22,36(sp)
    2778:	dd400815 	stw	r21,32(sp)
    277c:	dd000715 	stw	r20,28(sp)
    2780:	dcc00615 	stw	r19,24(sp)
    2784:	dc800515 	stw	r18,20(sp)
    2788:	2021883a 	mov	r16,r4
    278c:	2823883a 	mov	r17,r5
    2790:	2839883a 	mov	fp,r5
    2794:	3800401e 	bne	r7,zero,2898 <__umoddi3+0x13c>
    2798:	3027883a 	mov	r19,r6
    279c:	2029883a 	mov	r20,r4
    27a0:	2980552e 	bgeu	r5,r6,28f8 <__umoddi3+0x19c>
    27a4:	00bfffd4 	movui	r2,65535
    27a8:	1180a236 	bltu	r2,r6,2a34 <__umoddi3+0x2d8>
    27ac:	01003fc4 	movi	r4,255
    27b0:	2189803a 	cmpltu	r4,r4,r6
    27b4:	200890fa 	slli	r4,r4,3
    27b8:	3104d83a 	srl	r2,r6,r4
    27bc:	00c00034 	movhi	r3,0
    27c0:	18d97d04 	addi	r3,r3,26100
    27c4:	1885883a 	add	r2,r3,r2
    27c8:	10c00003 	ldbu	r3,0(r2)
    27cc:	00800804 	movi	r2,32
    27d0:	1909883a 	add	r4,r3,r4
    27d4:	1125c83a 	sub	r18,r2,r4
    27d8:	90000526 	beq	r18,zero,27f0 <__umoddi3+0x94>
    27dc:	8ca2983a 	sll	r17,r17,r18
    27e0:	8108d83a 	srl	r4,r16,r4
    27e4:	34a6983a 	sll	r19,r6,r18
    27e8:	84a8983a 	sll	r20,r16,r18
    27ec:	2478b03a 	or	fp,r4,r17
    27f0:	982cd43a 	srli	r22,r19,16
    27f4:	e009883a 	mov	r4,fp
    27f8:	9dffffcc 	andi	r23,r19,65535
    27fc:	b00b883a 	mov	r5,r22
    2800:	0002e7c0 	call	2e7c <__umodsi3>
    2804:	b00b883a 	mov	r5,r22
    2808:	e009883a 	mov	r4,fp
    280c:	102b883a 	mov	r21,r2
    2810:	0002e180 	call	2e18 <__udivsi3>
    2814:	100b883a 	mov	r5,r2
    2818:	b809883a 	mov	r4,r23
    281c:	0002ed40 	call	2ed4 <__mulsi3>
    2820:	a82a943a 	slli	r21,r21,16
    2824:	a006d43a 	srli	r3,r20,16
    2828:	1d46b03a 	or	r3,r3,r21
    282c:	1880032e 	bgeu	r3,r2,283c <__umoddi3+0xe0>
    2830:	1cc7883a 	add	r3,r3,r19
    2834:	1cc00136 	bltu	r3,r19,283c <__umoddi3+0xe0>
    2838:	18813136 	bltu	r3,r2,2d00 <__umoddi3+0x5a4>
    283c:	18a1c83a 	sub	r16,r3,r2
    2840:	b00b883a 	mov	r5,r22
    2844:	8009883a 	mov	r4,r16
    2848:	0002e7c0 	call	2e7c <__umodsi3>
    284c:	b00b883a 	mov	r5,r22
    2850:	8009883a 	mov	r4,r16
    2854:	1023883a 	mov	r17,r2
    2858:	0002e180 	call	2e18 <__udivsi3>
    285c:	100b883a 	mov	r5,r2
    2860:	b809883a 	mov	r4,r23
    2864:	8822943a 	slli	r17,r17,16
    2868:	0002ed40 	call	2ed4 <__mulsi3>
    286c:	a0ffffcc 	andi	r3,r20,65535
    2870:	1c46b03a 	or	r3,r3,r17
    2874:	1880042e 	bgeu	r3,r2,2888 <__umoddi3+0x12c>
    2878:	1cc7883a 	add	r3,r3,r19
    287c:	1cc00236 	bltu	r3,r19,2888 <__umoddi3+0x12c>
    2880:	1880012e 	bgeu	r3,r2,2888 <__umoddi3+0x12c>
    2884:	1cc7883a 	add	r3,r3,r19
    2888:	1885c83a 	sub	r2,r3,r2
    288c:	1484d83a 	srl	r2,r2,r18
    2890:	0007883a 	mov	r3,zero
    2894:	00005306 	br	29e4 <__umoddi3+0x288>
    2898:	29c05036 	bltu	r5,r7,29dc <__umoddi3+0x280>
    289c:	00bfffd4 	movui	r2,65535
    28a0:	11c05c2e 	bgeu	r2,r7,2a14 <__umoddi3+0x2b8>
    28a4:	00804034 	movhi	r2,256
    28a8:	10bfffc4 	addi	r2,r2,-1
    28ac:	11c10636 	bltu	r2,r7,2cc8 <__umoddi3+0x56c>
    28b0:	01000404 	movi	r4,16
    28b4:	3904d83a 	srl	r2,r7,r4
    28b8:	00c00034 	movhi	r3,0
    28bc:	18d97d04 	addi	r3,r3,26100
    28c0:	1885883a 	add	r2,r3,r2
    28c4:	14c00003 	ldbu	r19,0(r2)
    28c8:	00c00804 	movi	r3,32
    28cc:	9927883a 	add	r19,r19,r4
    28d0:	1ce9c83a 	sub	r20,r3,r19
    28d4:	a0005c1e 	bne	r20,zero,2a48 <__umoddi3+0x2ec>
    28d8:	3c400136 	bltu	r7,r17,28e0 <__umoddi3+0x184>
    28dc:	81810a36 	bltu	r16,r6,2d08 <__umoddi3+0x5ac>
    28e0:	8185c83a 	sub	r2,r16,r6
    28e4:	89e3c83a 	sub	r17,r17,r7
    28e8:	8089803a 	cmpltu	r4,r16,r2
    28ec:	8939c83a 	sub	fp,r17,r4
    28f0:	e007883a 	mov	r3,fp
    28f4:	00003b06 	br	29e4 <__umoddi3+0x288>
    28f8:	3000041e 	bne	r6,zero,290c <__umoddi3+0x1b0>
    28fc:	000b883a 	mov	r5,zero
    2900:	01000044 	movi	r4,1
    2904:	0002e180 	call	2e18 <__udivsi3>
    2908:	1027883a 	mov	r19,r2
    290c:	00bfffd4 	movui	r2,65535
    2910:	14c0442e 	bgeu	r2,r19,2a24 <__umoddi3+0x2c8>
    2914:	00804034 	movhi	r2,256
    2918:	10bfffc4 	addi	r2,r2,-1
    291c:	14c0ec36 	bltu	r2,r19,2cd0 <__umoddi3+0x574>
    2920:	00800404 	movi	r2,16
    2924:	9886d83a 	srl	r3,r19,r2
    2928:	01000034 	movhi	r4,0
    292c:	21197d04 	addi	r4,r4,26100
    2930:	20c7883a 	add	r3,r4,r3
    2934:	18c00003 	ldbu	r3,0(r3)
    2938:	1887883a 	add	r3,r3,r2
    293c:	00800804 	movi	r2,32
    2940:	10e5c83a 	sub	r18,r2,r3
    2944:	9000ab1e 	bne	r18,zero,2bf4 <__umoddi3+0x498>
    2948:	982cd43a 	srli	r22,r19,16
    294c:	8ce3c83a 	sub	r17,r17,r19
    2950:	9dffffcc 	andi	r23,r19,65535
    2954:	b00b883a 	mov	r5,r22
    2958:	8809883a 	mov	r4,r17
    295c:	0002e7c0 	call	2e7c <__umodsi3>
    2960:	b00b883a 	mov	r5,r22
    2964:	8809883a 	mov	r4,r17
    2968:	102b883a 	mov	r21,r2
    296c:	0002e180 	call	2e18 <__udivsi3>
    2970:	b80b883a 	mov	r5,r23
    2974:	1009883a 	mov	r4,r2
    2978:	0002ed40 	call	2ed4 <__mulsi3>
    297c:	a82a943a 	slli	r21,r21,16
    2980:	a006d43a 	srli	r3,r20,16
    2984:	1d46b03a 	or	r3,r3,r21
    2988:	1880042e 	bgeu	r3,r2,299c <__umoddi3+0x240>
    298c:	1cc7883a 	add	r3,r3,r19
    2990:	1cc00236 	bltu	r3,r19,299c <__umoddi3+0x240>
    2994:	1880012e 	bgeu	r3,r2,299c <__umoddi3+0x240>
    2998:	1cc7883a 	add	r3,r3,r19
    299c:	18a1c83a 	sub	r16,r3,r2
    29a0:	b00b883a 	mov	r5,r22
    29a4:	8009883a 	mov	r4,r16
    29a8:	0002e7c0 	call	2e7c <__umodsi3>
    29ac:	1023883a 	mov	r17,r2
    29b0:	b00b883a 	mov	r5,r22
    29b4:	8009883a 	mov	r4,r16
    29b8:	0002e180 	call	2e18 <__udivsi3>
    29bc:	8822943a 	slli	r17,r17,16
    29c0:	b80b883a 	mov	r5,r23
    29c4:	1009883a 	mov	r4,r2
    29c8:	0002ed40 	call	2ed4 <__mulsi3>
    29cc:	a53fffcc 	andi	r20,r20,65535
    29d0:	a446b03a 	or	r3,r20,r17
    29d4:	18bfac2e 	bgeu	r3,r2,2888 <_gp+0xffff4194>
    29d8:	003fa706 	br	2878 <_gp+0xffff4184>
    29dc:	2005883a 	mov	r2,r4
    29e0:	2807883a 	mov	r3,r5
    29e4:	dfc00c17 	ldw	ra,48(sp)
    29e8:	df000b17 	ldw	fp,44(sp)
    29ec:	ddc00a17 	ldw	r23,40(sp)
    29f0:	dd800917 	ldw	r22,36(sp)
    29f4:	dd400817 	ldw	r21,32(sp)
    29f8:	dd000717 	ldw	r20,28(sp)
    29fc:	dcc00617 	ldw	r19,24(sp)
    2a00:	dc800517 	ldw	r18,20(sp)
    2a04:	dc400417 	ldw	r17,16(sp)
    2a08:	dc000317 	ldw	r16,12(sp)
    2a0c:	dec00d04 	addi	sp,sp,52
    2a10:	f800283a 	ret
    2a14:	04c03fc4 	movi	r19,255
    2a18:	99c9803a 	cmpltu	r4,r19,r7
    2a1c:	200890fa 	slli	r4,r4,3
    2a20:	003fa406 	br	28b4 <_gp+0xffff41c0>
    2a24:	00803fc4 	movi	r2,255
    2a28:	14c5803a 	cmpltu	r2,r2,r19
    2a2c:	100490fa 	slli	r2,r2,3
    2a30:	003fbc06 	br	2924 <_gp+0xffff4230>
    2a34:	00804034 	movhi	r2,256
    2a38:	10bfffc4 	addi	r2,r2,-1
    2a3c:	1180a636 	bltu	r2,r6,2cd8 <__umoddi3+0x57c>
    2a40:	01000404 	movi	r4,16
    2a44:	003f5c06 	br	27b8 <_gp+0xffff40c4>
    2a48:	3d0e983a 	sll	r7,r7,r20
    2a4c:	34ead83a 	srl	r21,r6,r19
    2a50:	8cc6d83a 	srl	r3,r17,r19
    2a54:	8d10983a 	sll	r8,r17,r20
    2a58:	3d6ab03a 	or	r21,r7,r21
    2a5c:	a82cd43a 	srli	r22,r21,16
    2a60:	84e2d83a 	srl	r17,r16,r19
    2a64:	1809883a 	mov	r4,r3
    2a68:	b00b883a 	mov	r5,r22
    2a6c:	8a22b03a 	or	r17,r17,r8
    2a70:	3524983a 	sll	r18,r6,r20
    2a74:	dc400015 	stw	r17,0(sp)
    2a78:	d8c00115 	stw	r3,4(sp)
    2a7c:	0002e7c0 	call	2e7c <__umodsi3>
    2a80:	d8c00117 	ldw	r3,4(sp)
    2a84:	b00b883a 	mov	r5,r22
    2a88:	1039883a 	mov	fp,r2
    2a8c:	1809883a 	mov	r4,r3
    2a90:	0002e180 	call	2e18 <__udivsi3>
    2a94:	adffffcc 	andi	r23,r21,65535
    2a98:	100b883a 	mov	r5,r2
    2a9c:	b809883a 	mov	r4,r23
    2aa0:	1023883a 	mov	r17,r2
    2aa4:	0002ed40 	call	2ed4 <__mulsi3>
    2aa8:	d9400017 	ldw	r5,0(sp)
    2aac:	e008943a 	slli	r4,fp,16
    2ab0:	8520983a 	sll	r16,r16,r20
    2ab4:	2806d43a 	srli	r3,r5,16
    2ab8:	1906b03a 	or	r3,r3,r4
    2abc:	1880042e 	bgeu	r3,r2,2ad0 <__umoddi3+0x374>
    2ac0:	1d47883a 	add	r3,r3,r21
    2ac4:	893fffc4 	addi	r4,r17,-1
    2ac8:	1d40892e 	bgeu	r3,r21,2cf0 <__umoddi3+0x594>
    2acc:	2023883a 	mov	r17,r4
    2ad0:	18b9c83a 	sub	fp,r3,r2
    2ad4:	b00b883a 	mov	r5,r22
    2ad8:	e009883a 	mov	r4,fp
    2adc:	0002e7c0 	call	2e7c <__umodsi3>
    2ae0:	b00b883a 	mov	r5,r22
    2ae4:	e009883a 	mov	r4,fp
    2ae8:	d8800215 	stw	r2,8(sp)
    2aec:	0002e180 	call	2e18 <__udivsi3>
    2af0:	100b883a 	mov	r5,r2
    2af4:	b809883a 	mov	r4,r23
    2af8:	102d883a 	mov	r22,r2
    2afc:	0002ed40 	call	2ed4 <__mulsi3>
    2b00:	d9800217 	ldw	r6,8(sp)
    2b04:	d8c00017 	ldw	r3,0(sp)
    2b08:	300c943a 	slli	r6,r6,16
    2b0c:	1a3fffcc 	andi	r8,r3,65535
    2b10:	4190b03a 	or	r8,r8,r6
    2b14:	4080042e 	bgeu	r8,r2,2b28 <__umoddi3+0x3cc>
    2b18:	4551883a 	add	r8,r8,r21
    2b1c:	b0ffffc4 	addi	r3,r22,-1
    2b20:	45406f2e 	bgeu	r8,r21,2ce0 <__umoddi3+0x584>
    2b24:	182d883a 	mov	r22,r3
    2b28:	880e943a 	slli	r7,r17,16
    2b2c:	9006d43a 	srli	r3,r18,16
    2b30:	91bfffcc 	andi	r6,r18,65535
    2b34:	3dacb03a 	or	r22,r7,r22
    2b38:	b02ed43a 	srli	r23,r22,16
    2b3c:	b5bfffcc 	andi	r22,r22,65535
    2b40:	300b883a 	mov	r5,r6
    2b44:	b009883a 	mov	r4,r22
    2b48:	40a3c83a 	sub	r17,r8,r2
    2b4c:	d8c00115 	stw	r3,4(sp)
    2b50:	d9800215 	stw	r6,8(sp)
    2b54:	0002ed40 	call	2ed4 <__mulsi3>
    2b58:	d9800217 	ldw	r6,8(sp)
    2b5c:	b809883a 	mov	r4,r23
    2b60:	1039883a 	mov	fp,r2
    2b64:	300b883a 	mov	r5,r6
    2b68:	0002ed40 	call	2ed4 <__mulsi3>
    2b6c:	d8c00117 	ldw	r3,4(sp)
    2b70:	b809883a 	mov	r4,r23
    2b74:	d8800215 	stw	r2,8(sp)
    2b78:	180b883a 	mov	r5,r3
    2b7c:	0002ed40 	call	2ed4 <__mulsi3>
    2b80:	d8c00117 	ldw	r3,4(sp)
    2b84:	b009883a 	mov	r4,r22
    2b88:	102f883a 	mov	r23,r2
    2b8c:	180b883a 	mov	r5,r3
    2b90:	0002ed40 	call	2ed4 <__mulsi3>
    2b94:	d9800217 	ldw	r6,8(sp)
    2b98:	e006d43a 	srli	r3,fp,16
    2b9c:	1185883a 	add	r2,r2,r6
    2ba0:	1885883a 	add	r2,r3,r2
    2ba4:	1180022e 	bgeu	r2,r6,2bb0 <__umoddi3+0x454>
    2ba8:	00c00074 	movhi	r3,1
    2bac:	b8ef883a 	add	r23,r23,r3
    2bb0:	1006d43a 	srli	r3,r2,16
    2bb4:	1004943a 	slli	r2,r2,16
    2bb8:	e73fffcc 	andi	fp,fp,65535
    2bbc:	1dc7883a 	add	r3,r3,r23
    2bc0:	1739883a 	add	fp,r2,fp
    2bc4:	88c03a36 	bltu	r17,r3,2cb0 <__umoddi3+0x554>
    2bc8:	88c05126 	beq	r17,r3,2d10 <__umoddi3+0x5b4>
    2bcc:	88c9c83a 	sub	r4,r17,r3
    2bd0:	e00f883a 	mov	r7,fp
    2bd4:	81cfc83a 	sub	r7,r16,r7
    2bd8:	81c7803a 	cmpltu	r3,r16,r7
    2bdc:	20c7c83a 	sub	r3,r4,r3
    2be0:	1cc4983a 	sll	r2,r3,r19
    2be4:	3d0ed83a 	srl	r7,r7,r20
    2be8:	1d06d83a 	srl	r3,r3,r20
    2bec:	11c4b03a 	or	r2,r2,r7
    2bf0:	003f7c06 	br	29e4 <_gp+0xffff42f0>
    2bf4:	9ca6983a 	sll	r19,r19,r18
    2bf8:	88f8d83a 	srl	fp,r17,r3
    2bfc:	80c4d83a 	srl	r2,r16,r3
    2c00:	982cd43a 	srli	r22,r19,16
    2c04:	8ca2983a 	sll	r17,r17,r18
    2c08:	e009883a 	mov	r4,fp
    2c0c:	b00b883a 	mov	r5,r22
    2c10:	146ab03a 	or	r21,r2,r17
    2c14:	0002e7c0 	call	2e7c <__umodsi3>
    2c18:	b00b883a 	mov	r5,r22
    2c1c:	e009883a 	mov	r4,fp
    2c20:	1029883a 	mov	r20,r2
    2c24:	9dffffcc 	andi	r23,r19,65535
    2c28:	0002e180 	call	2e18 <__udivsi3>
    2c2c:	b809883a 	mov	r4,r23
    2c30:	100b883a 	mov	r5,r2
    2c34:	0002ed40 	call	2ed4 <__mulsi3>
    2c38:	a008943a 	slli	r4,r20,16
    2c3c:	a806d43a 	srli	r3,r21,16
    2c40:	84a8983a 	sll	r20,r16,r18
    2c44:	1906b03a 	or	r3,r3,r4
    2c48:	1880042e 	bgeu	r3,r2,2c5c <__umoddi3+0x500>
    2c4c:	1cc7883a 	add	r3,r3,r19
    2c50:	1cc00236 	bltu	r3,r19,2c5c <__umoddi3+0x500>
    2c54:	1880012e 	bgeu	r3,r2,2c5c <__umoddi3+0x500>
    2c58:	1cc7883a 	add	r3,r3,r19
    2c5c:	18a3c83a 	sub	r17,r3,r2
    2c60:	b00b883a 	mov	r5,r22
    2c64:	8809883a 	mov	r4,r17
    2c68:	0002e7c0 	call	2e7c <__umodsi3>
    2c6c:	b00b883a 	mov	r5,r22
    2c70:	8809883a 	mov	r4,r17
    2c74:	1021883a 	mov	r16,r2
    2c78:	0002e180 	call	2e18 <__udivsi3>
    2c7c:	100b883a 	mov	r5,r2
    2c80:	b809883a 	mov	r4,r23
    2c84:	8020943a 	slli	r16,r16,16
    2c88:	0002ed40 	call	2ed4 <__mulsi3>
    2c8c:	a8ffffcc 	andi	r3,r21,65535
    2c90:	1c06b03a 	or	r3,r3,r16
    2c94:	1880042e 	bgeu	r3,r2,2ca8 <__umoddi3+0x54c>
    2c98:	1cc7883a 	add	r3,r3,r19
    2c9c:	1cc00236 	bltu	r3,r19,2ca8 <__umoddi3+0x54c>
    2ca0:	1880012e 	bgeu	r3,r2,2ca8 <__umoddi3+0x54c>
    2ca4:	1cc7883a 	add	r3,r3,r19
    2ca8:	18a3c83a 	sub	r17,r3,r2
    2cac:	003f2906 	br	2954 <_gp+0xffff4260>
    2cb0:	e48fc83a 	sub	r7,fp,r18
    2cb4:	1d49c83a 	sub	r4,r3,r21
    2cb8:	e1f9803a 	cmpltu	fp,fp,r7
    2cbc:	2739c83a 	sub	fp,r4,fp
    2cc0:	8f09c83a 	sub	r4,r17,fp
    2cc4:	003fc306 	br	2bd4 <_gp+0xffff44e0>
    2cc8:	01000604 	movi	r4,24
    2ccc:	003ef906 	br	28b4 <_gp+0xffff41c0>
    2cd0:	00800604 	movi	r2,24
    2cd4:	003f1306 	br	2924 <_gp+0xffff4230>
    2cd8:	01000604 	movi	r4,24
    2cdc:	003eb606 	br	27b8 <_gp+0xffff40c4>
    2ce0:	40bf902e 	bgeu	r8,r2,2b24 <_gp+0xffff4430>
    2ce4:	b5bfff84 	addi	r22,r22,-2
    2ce8:	4551883a 	add	r8,r8,r21
    2cec:	003f8e06 	br	2b28 <_gp+0xffff4434>
    2cf0:	18bf762e 	bgeu	r3,r2,2acc <_gp+0xffff43d8>
    2cf4:	8c7fff84 	addi	r17,r17,-2
    2cf8:	1d47883a 	add	r3,r3,r21
    2cfc:	003f7406 	br	2ad0 <_gp+0xffff43dc>
    2d00:	1cc7883a 	add	r3,r3,r19
    2d04:	003ecd06 	br	283c <_gp+0xffff4148>
    2d08:	8005883a 	mov	r2,r16
    2d0c:	003ef806 	br	28f0 <_gp+0xffff41fc>
    2d10:	873fe736 	bltu	r16,fp,2cb0 <_gp+0xffff45bc>
    2d14:	e00f883a 	mov	r7,fp
    2d18:	0009883a 	mov	r4,zero
    2d1c:	003fad06 	br	2bd4 <_gp+0xffff44e0>

00002d20 <__divsi3>:
    2d20:	20001b16 	blt	r4,zero,2d90 <__divsi3+0x70>
    2d24:	000f883a 	mov	r7,zero
    2d28:	28001616 	blt	r5,zero,2d84 <__divsi3+0x64>
    2d2c:	200d883a 	mov	r6,r4
    2d30:	29001a2e 	bgeu	r5,r4,2d9c <__divsi3+0x7c>
    2d34:	00800804 	movi	r2,32
    2d38:	00c00044 	movi	r3,1
    2d3c:	00000106 	br	2d44 <__divsi3+0x24>
    2d40:	10000d26 	beq	r2,zero,2d78 <__divsi3+0x58>
    2d44:	294b883a 	add	r5,r5,r5
    2d48:	10bfffc4 	addi	r2,r2,-1
    2d4c:	18c7883a 	add	r3,r3,r3
    2d50:	293ffb36 	bltu	r5,r4,2d40 <_gp+0xffff464c>
    2d54:	0005883a 	mov	r2,zero
    2d58:	18000726 	beq	r3,zero,2d78 <__divsi3+0x58>
    2d5c:	0005883a 	mov	r2,zero
    2d60:	31400236 	bltu	r6,r5,2d6c <__divsi3+0x4c>
    2d64:	314dc83a 	sub	r6,r6,r5
    2d68:	10c4b03a 	or	r2,r2,r3
    2d6c:	1806d07a 	srli	r3,r3,1
    2d70:	280ad07a 	srli	r5,r5,1
    2d74:	183ffa1e 	bne	r3,zero,2d60 <_gp+0xffff466c>
    2d78:	38000126 	beq	r7,zero,2d80 <__divsi3+0x60>
    2d7c:	0085c83a 	sub	r2,zero,r2
    2d80:	f800283a 	ret
    2d84:	014bc83a 	sub	r5,zero,r5
    2d88:	39c0005c 	xori	r7,r7,1
    2d8c:	003fe706 	br	2d2c <_gp+0xffff4638>
    2d90:	0109c83a 	sub	r4,zero,r4
    2d94:	01c00044 	movi	r7,1
    2d98:	003fe306 	br	2d28 <_gp+0xffff4634>
    2d9c:	00c00044 	movi	r3,1
    2da0:	003fee06 	br	2d5c <_gp+0xffff4668>

00002da4 <__modsi3>:
    2da4:	20001716 	blt	r4,zero,2e04 <__modsi3+0x60>
    2da8:	000f883a 	mov	r7,zero
    2dac:	2005883a 	mov	r2,r4
    2db0:	28001216 	blt	r5,zero,2dfc <__modsi3+0x58>
    2db4:	2900162e 	bgeu	r5,r4,2e10 <__modsi3+0x6c>
    2db8:	01800804 	movi	r6,32
    2dbc:	00c00044 	movi	r3,1
    2dc0:	00000106 	br	2dc8 <__modsi3+0x24>
    2dc4:	30000a26 	beq	r6,zero,2df0 <__modsi3+0x4c>
    2dc8:	294b883a 	add	r5,r5,r5
    2dcc:	31bfffc4 	addi	r6,r6,-1
    2dd0:	18c7883a 	add	r3,r3,r3
    2dd4:	293ffb36 	bltu	r5,r4,2dc4 <_gp+0xffff46d0>
    2dd8:	18000526 	beq	r3,zero,2df0 <__modsi3+0x4c>
    2ddc:	1806d07a 	srli	r3,r3,1
    2de0:	11400136 	bltu	r2,r5,2de8 <__modsi3+0x44>
    2de4:	1145c83a 	sub	r2,r2,r5
    2de8:	280ad07a 	srli	r5,r5,1
    2dec:	183ffb1e 	bne	r3,zero,2ddc <_gp+0xffff46e8>
    2df0:	38000126 	beq	r7,zero,2df8 <__modsi3+0x54>
    2df4:	0085c83a 	sub	r2,zero,r2
    2df8:	f800283a 	ret
    2dfc:	014bc83a 	sub	r5,zero,r5
    2e00:	003fec06 	br	2db4 <_gp+0xffff46c0>
    2e04:	0109c83a 	sub	r4,zero,r4
    2e08:	01c00044 	movi	r7,1
    2e0c:	003fe706 	br	2dac <_gp+0xffff46b8>
    2e10:	00c00044 	movi	r3,1
    2e14:	003ff106 	br	2ddc <_gp+0xffff46e8>

00002e18 <__udivsi3>:
    2e18:	200d883a 	mov	r6,r4
    2e1c:	2900152e 	bgeu	r5,r4,2e74 <__udivsi3+0x5c>
    2e20:	28001416 	blt	r5,zero,2e74 <__udivsi3+0x5c>
    2e24:	00800804 	movi	r2,32
    2e28:	00c00044 	movi	r3,1
    2e2c:	00000206 	br	2e38 <__udivsi3+0x20>
    2e30:	10000e26 	beq	r2,zero,2e6c <__udivsi3+0x54>
    2e34:	28000516 	blt	r5,zero,2e4c <__udivsi3+0x34>
    2e38:	294b883a 	add	r5,r5,r5
    2e3c:	10bfffc4 	addi	r2,r2,-1
    2e40:	18c7883a 	add	r3,r3,r3
    2e44:	293ffa36 	bltu	r5,r4,2e30 <_gp+0xffff473c>
    2e48:	18000826 	beq	r3,zero,2e6c <__udivsi3+0x54>
    2e4c:	0005883a 	mov	r2,zero
    2e50:	31400236 	bltu	r6,r5,2e5c <__udivsi3+0x44>
    2e54:	314dc83a 	sub	r6,r6,r5
    2e58:	10c4b03a 	or	r2,r2,r3
    2e5c:	1806d07a 	srli	r3,r3,1
    2e60:	280ad07a 	srli	r5,r5,1
    2e64:	183ffa1e 	bne	r3,zero,2e50 <_gp+0xffff475c>
    2e68:	f800283a 	ret
    2e6c:	0005883a 	mov	r2,zero
    2e70:	f800283a 	ret
    2e74:	00c00044 	movi	r3,1
    2e78:	003ff406 	br	2e4c <_gp+0xffff4758>

00002e7c <__umodsi3>:
    2e7c:	2005883a 	mov	r2,r4
    2e80:	2900122e 	bgeu	r5,r4,2ecc <__umodsi3+0x50>
    2e84:	28001116 	blt	r5,zero,2ecc <__umodsi3+0x50>
    2e88:	01800804 	movi	r6,32
    2e8c:	00c00044 	movi	r3,1
    2e90:	00000206 	br	2e9c <__umodsi3+0x20>
    2e94:	30000c26 	beq	r6,zero,2ec8 <__umodsi3+0x4c>
    2e98:	28000516 	blt	r5,zero,2eb0 <__umodsi3+0x34>
    2e9c:	294b883a 	add	r5,r5,r5
    2ea0:	31bfffc4 	addi	r6,r6,-1
    2ea4:	18c7883a 	add	r3,r3,r3
    2ea8:	293ffa36 	bltu	r5,r4,2e94 <_gp+0xffff47a0>
    2eac:	18000626 	beq	r3,zero,2ec8 <__umodsi3+0x4c>
    2eb0:	1806d07a 	srli	r3,r3,1
    2eb4:	11400136 	bltu	r2,r5,2ebc <__umodsi3+0x40>
    2eb8:	1145c83a 	sub	r2,r2,r5
    2ebc:	280ad07a 	srli	r5,r5,1
    2ec0:	183ffb1e 	bne	r3,zero,2eb0 <_gp+0xffff47bc>
    2ec4:	f800283a 	ret
    2ec8:	f800283a 	ret
    2ecc:	00c00044 	movi	r3,1
    2ed0:	003ff706 	br	2eb0 <_gp+0xffff47bc>

00002ed4 <__mulsi3>:
    2ed4:	0005883a 	mov	r2,zero
    2ed8:	20000726 	beq	r4,zero,2ef8 <__mulsi3+0x24>
    2edc:	20c0004c 	andi	r3,r4,1
    2ee0:	2008d07a 	srli	r4,r4,1
    2ee4:	18000126 	beq	r3,zero,2eec <__mulsi3+0x18>
    2ee8:	1145883a 	add	r2,r2,r5
    2eec:	294b883a 	add	r5,r5,r5
    2ef0:	203ffa1e 	bne	r4,zero,2edc <_gp+0xffff47e8>
    2ef4:	f800283a 	ret
    2ef8:	f800283a 	ret

00002efc <__addsf3>:
    2efc:	defffc04 	addi	sp,sp,-16
    2f00:	2004d7fa 	srli	r2,r4,31
    2f04:	280cd5fa 	srli	r6,r5,23
    2f08:	dc000015 	stw	r16,0(sp)
    2f0c:	00c02034 	movhi	r3,128
    2f10:	2020d5fa 	srli	r16,r4,23
    2f14:	280ed7fa 	srli	r7,r5,31
    2f18:	18ffffc4 	addi	r3,r3,-1
    2f1c:	dc400115 	stw	r17,4(sp)
    2f20:	1908703a 	and	r4,r3,r4
    2f24:	194a703a 	and	r5,r3,r5
    2f28:	dfc00315 	stw	ra,12(sp)
    2f2c:	dc800215 	stw	r18,8(sp)
    2f30:	14403fcc 	andi	r17,r2,255
    2f34:	84003fcc 	andi	r16,r16,255
    2f38:	200890fa 	slli	r4,r4,3
    2f3c:	31803fcc 	andi	r6,r6,255
    2f40:	280a90fa 	slli	r5,r5,3
    2f44:	89c05026 	beq	r17,r7,3088 <__addsf3+0x18c>
    2f48:	8185c83a 	sub	r2,r16,r6
    2f4c:	00807a0e 	bge	zero,r2,3138 <__addsf3+0x23c>
    2f50:	30001e1e 	bne	r6,zero,2fcc <__addsf3+0xd0>
    2f54:	28006d1e 	bne	r5,zero,310c <__addsf3+0x210>
    2f58:	208001cc 	andi	r2,r4,7
    2f5c:	10000426 	beq	r2,zero,2f70 <__addsf3+0x74>
    2f60:	208003cc 	andi	r2,r4,15
    2f64:	00c00104 	movi	r3,4
    2f68:	10c00126 	beq	r2,r3,2f70 <__addsf3+0x74>
    2f6c:	20c9883a 	add	r4,r4,r3
    2f70:	2081002c 	andhi	r2,r4,1024
    2f74:	10003926 	beq	r2,zero,305c <__addsf3+0x160>
    2f78:	84000044 	addi	r16,r16,1
    2f7c:	00803fc4 	movi	r2,255
    2f80:	80807826 	beq	r16,r2,3164 <__addsf3+0x268>
    2f84:	200891ba 	slli	r4,r4,6
    2f88:	8805883a 	mov	r2,r17
    2f8c:	2008d27a 	srli	r4,r4,9
    2f90:	84003fcc 	andi	r16,r16,255
    2f94:	800695fa 	slli	r3,r16,23
    2f98:	10803fcc 	andi	r2,r2,255
    2f9c:	04002034 	movhi	r16,128
    2fa0:	843fffc4 	addi	r16,r16,-1
    2fa4:	100497fa 	slli	r2,r2,31
    2fa8:	2408703a 	and	r4,r4,r16
    2fac:	20e0b03a 	or	r16,r4,r3
    2fb0:	8084b03a 	or	r2,r16,r2
    2fb4:	dfc00317 	ldw	ra,12(sp)
    2fb8:	dc800217 	ldw	r18,8(sp)
    2fbc:	dc400117 	ldw	r17,4(sp)
    2fc0:	dc000017 	ldw	r16,0(sp)
    2fc4:	dec00404 	addi	sp,sp,16
    2fc8:	f800283a 	ret
    2fcc:	00c03fc4 	movi	r3,255
    2fd0:	80ffe126 	beq	r16,r3,2f58 <_gp+0xffff4864>
    2fd4:	29410034 	orhi	r5,r5,1024
    2fd8:	00c006c4 	movi	r3,27
    2fdc:	18807516 	blt	r3,r2,31b4 <__addsf3+0x2b8>
    2fe0:	00c00804 	movi	r3,32
    2fe4:	1887c83a 	sub	r3,r3,r2
    2fe8:	28c6983a 	sll	r3,r5,r3
    2fec:	288ad83a 	srl	r5,r5,r2
    2ff0:	1804c03a 	cmpne	r2,r3,zero
    2ff4:	288ab03a 	or	r5,r5,r2
    2ff8:	2149c83a 	sub	r4,r4,r5
    2ffc:	2081002c 	andhi	r2,r4,1024
    3000:	10001426 	beq	r2,zero,3054 <__addsf3+0x158>
    3004:	04810034 	movhi	r18,1024
    3008:	94bfffc4 	addi	r18,r18,-1
    300c:	24a4703a 	and	r18,r4,r18
    3010:	9009883a 	mov	r4,r18
    3014:	00061240 	call	6124 <__clzsi2>
    3018:	10bffec4 	addi	r2,r2,-5
    301c:	90a4983a 	sll	r18,r18,r2
    3020:	14005416 	blt	r2,r16,3174 <__addsf3+0x278>
    3024:	1405c83a 	sub	r2,r2,r16
    3028:	11000044 	addi	r4,r2,1
    302c:	00800804 	movi	r2,32
    3030:	1105c83a 	sub	r2,r2,r4
    3034:	9084983a 	sll	r2,r18,r2
    3038:	9124d83a 	srl	r18,r18,r4
    303c:	0021883a 	mov	r16,zero
    3040:	1008c03a 	cmpne	r4,r2,zero
    3044:	9108b03a 	or	r4,r18,r4
    3048:	003fc306 	br	2f58 <_gp+0xffff4864>
    304c:	1000db26 	beq	r2,zero,33bc <__addsf3+0x4c0>
    3050:	1009883a 	mov	r4,r2
    3054:	208001cc 	andi	r2,r4,7
    3058:	103fc11e 	bne	r2,zero,2f60 <_gp+0xffff486c>
    305c:	2006d0fa 	srli	r3,r4,3
    3060:	01003fc4 	movi	r4,255
    3064:	8805883a 	mov	r2,r17
    3068:	8100241e 	bne	r16,r4,30fc <__addsf3+0x200>
    306c:	18006e26 	beq	r3,zero,3228 <__addsf3+0x32c>
    3070:	19001034 	orhi	r4,r3,64
    3074:	00c02034 	movhi	r3,128
    3078:	18ffffc4 	addi	r3,r3,-1
    307c:	043fffc4 	movi	r16,-1
    3080:	20c8703a 	and	r4,r4,r3
    3084:	003fc206 	br	2f90 <_gp+0xffff489c>
    3088:	8187c83a 	sub	r3,r16,r6
    308c:	00c03e0e 	bge	zero,r3,3188 <__addsf3+0x28c>
    3090:	30002326 	beq	r6,zero,3120 <__addsf3+0x224>
    3094:	01803fc4 	movi	r6,255
    3098:	81bfaf26 	beq	r16,r6,2f58 <_gp+0xffff4864>
    309c:	29410034 	orhi	r5,r5,1024
    30a0:	018006c4 	movi	r6,27
    30a4:	30c07416 	blt	r6,r3,3278 <__addsf3+0x37c>
    30a8:	01800804 	movi	r6,32
    30ac:	30cdc83a 	sub	r6,r6,r3
    30b0:	298c983a 	sll	r6,r5,r6
    30b4:	28cad83a 	srl	r5,r5,r3
    30b8:	3006c03a 	cmpne	r3,r6,zero
    30bc:	28cab03a 	or	r5,r5,r3
    30c0:	2149883a 	add	r4,r4,r5
    30c4:	20c1002c 	andhi	r3,r4,1024
    30c8:	183fe226 	beq	r3,zero,3054 <_gp+0xffff4960>
    30cc:	84000044 	addi	r16,r16,1
    30d0:	00c03fc4 	movi	r3,255
    30d4:	80c05426 	beq	r16,r3,3228 <__addsf3+0x32c>
    30d8:	00bf0034 	movhi	r2,64512
    30dc:	10bfffc4 	addi	r2,r2,-1
    30e0:	20c0004c 	andi	r3,r4,1
    30e4:	2088703a 	and	r4,r4,r2
    30e8:	2008d07a 	srli	r4,r4,1
    30ec:	20c8b03a 	or	r4,r4,r3
    30f0:	003f9906 	br	2f58 <_gp+0xffff4864>
    30f4:	0007883a 	mov	r3,zero
    30f8:	0005883a 	mov	r2,zero
    30fc:	01002034 	movhi	r4,128
    3100:	213fffc4 	addi	r4,r4,-1
    3104:	1908703a 	and	r4,r3,r4
    3108:	003fa106 	br	2f90 <_gp+0xffff489c>
    310c:	10bfffc4 	addi	r2,r2,-1
    3110:	103fb926 	beq	r2,zero,2ff8 <_gp+0xffff4904>
    3114:	00c03fc4 	movi	r3,255
    3118:	80ffaf1e 	bne	r16,r3,2fd8 <_gp+0xffff48e4>
    311c:	003f8e06 	br	2f58 <_gp+0xffff4864>
    3120:	283f8d26 	beq	r5,zero,2f58 <_gp+0xffff4864>
    3124:	18ffffc4 	addi	r3,r3,-1
    3128:	183fe526 	beq	r3,zero,30c0 <_gp+0xffff49cc>
    312c:	01803fc4 	movi	r6,255
    3130:	81bfdb1e 	bne	r16,r6,30a0 <_gp+0xffff49ac>
    3134:	003f8806 	br	2f58 <_gp+0xffff4864>
    3138:	1000201e 	bne	r2,zero,31bc <__addsf3+0x2c0>
    313c:	80800044 	addi	r2,r16,1
    3140:	10803fcc 	andi	r2,r2,255
    3144:	01800044 	movi	r6,1
    3148:	3080450e 	bge	r6,r2,3260 <__addsf3+0x364>
    314c:	2165c83a 	sub	r18,r4,r5
    3150:	90c1002c 	andhi	r3,r18,1024
    3154:	18002b26 	beq	r3,zero,3204 <__addsf3+0x308>
    3158:	2925c83a 	sub	r18,r5,r4
    315c:	3823883a 	mov	r17,r7
    3160:	003fab06 	br	3010 <_gp+0xffff491c>
    3164:	8805883a 	mov	r2,r17
    3168:	043fffc4 	movi	r16,-1
    316c:	0009883a 	mov	r4,zero
    3170:	003f8706 	br	2f90 <_gp+0xffff489c>
    3174:	013f0034 	movhi	r4,64512
    3178:	213fffc4 	addi	r4,r4,-1
    317c:	80a1c83a 	sub	r16,r16,r2
    3180:	9108703a 	and	r4,r18,r4
    3184:	003f7406 	br	2f58 <_gp+0xffff4864>
    3188:	1800411e 	bne	r3,zero,3290 <__addsf3+0x394>
    318c:	80c00044 	addi	r3,r16,1
    3190:	19c03fcc 	andi	r7,r3,255
    3194:	01800044 	movi	r6,1
    3198:	31c0260e 	bge	r6,r7,3234 <__addsf3+0x338>
    319c:	01803fc4 	movi	r6,255
    31a0:	19802126 	beq	r3,r6,3228 <__addsf3+0x32c>
    31a4:	2149883a 	add	r4,r4,r5
    31a8:	2008d07a 	srli	r4,r4,1
    31ac:	1821883a 	mov	r16,r3
    31b0:	003f6906 	br	2f58 <_gp+0xffff4864>
    31b4:	01400044 	movi	r5,1
    31b8:	003f8f06 	br	2ff8 <_gp+0xffff4904>
    31bc:	8000151e 	bne	r16,zero,3214 <__addsf3+0x318>
    31c0:	20002f26 	beq	r4,zero,3280 <__addsf3+0x384>
    31c4:	0084303a 	nor	r2,zero,r2
    31c8:	10000a26 	beq	r2,zero,31f4 <__addsf3+0x2f8>
    31cc:	00c03fc4 	movi	r3,255
    31d0:	30c02b26 	beq	r6,r3,3280 <__addsf3+0x384>
    31d4:	00c006c4 	movi	r3,27
    31d8:	18806d16 	blt	r3,r2,3390 <__addsf3+0x494>
    31dc:	00c00804 	movi	r3,32
    31e0:	1887c83a 	sub	r3,r3,r2
    31e4:	20c6983a 	sll	r3,r4,r3
    31e8:	2084d83a 	srl	r2,r4,r2
    31ec:	1808c03a 	cmpne	r4,r3,zero
    31f0:	1108b03a 	or	r4,r2,r4
    31f4:	2909c83a 	sub	r4,r5,r4
    31f8:	3021883a 	mov	r16,r6
    31fc:	3823883a 	mov	r17,r7
    3200:	003f7e06 	br	2ffc <_gp+0xffff4908>
    3204:	903f821e 	bne	r18,zero,3010 <_gp+0xffff491c>
    3208:	0005883a 	mov	r2,zero
    320c:	0021883a 	mov	r16,zero
    3210:	003fba06 	br	30fc <_gp+0xffff4a08>
    3214:	00c03fc4 	movi	r3,255
    3218:	30c01926 	beq	r6,r3,3280 <__addsf3+0x384>
    321c:	0085c83a 	sub	r2,zero,r2
    3220:	21010034 	orhi	r4,r4,1024
    3224:	003feb06 	br	31d4 <_gp+0xffff4ae0>
    3228:	043fffc4 	movi	r16,-1
    322c:	0009883a 	mov	r4,zero
    3230:	003f5706 	br	2f90 <_gp+0xffff489c>
    3234:	80004a1e 	bne	r16,zero,3360 <__addsf3+0x464>
    3238:	20005926 	beq	r4,zero,33a0 <__addsf3+0x4a4>
    323c:	283f4626 	beq	r5,zero,2f58 <_gp+0xffff4864>
    3240:	2149883a 	add	r4,r4,r5
    3244:	2081002c 	andhi	r2,r4,1024
    3248:	103f8226 	beq	r2,zero,3054 <_gp+0xffff4960>
    324c:	00bf0034 	movhi	r2,64512
    3250:	10bfffc4 	addi	r2,r2,-1
    3254:	3021883a 	mov	r16,r6
    3258:	2088703a 	and	r4,r4,r2
    325c:	003f3e06 	br	2f58 <_gp+0xffff4864>
    3260:	8000121e 	bne	r16,zero,32ac <__addsf3+0x3b0>
    3264:	2000261e 	bne	r4,zero,3300 <__addsf3+0x404>
    3268:	283fa226 	beq	r5,zero,30f4 <_gp+0xffff4a00>
    326c:	2809883a 	mov	r4,r5
    3270:	3823883a 	mov	r17,r7
    3274:	003f3806 	br	2f58 <_gp+0xffff4864>
    3278:	01400044 	movi	r5,1
    327c:	003f9006 	br	30c0 <_gp+0xffff49cc>
    3280:	2809883a 	mov	r4,r5
    3284:	3021883a 	mov	r16,r6
    3288:	3823883a 	mov	r17,r7
    328c:	003f3206 	br	2f58 <_gp+0xffff4864>
    3290:	80000c1e 	bne	r16,zero,32c4 <__addsf3+0x3c8>
    3294:	20002f26 	beq	r4,zero,3354 <__addsf3+0x458>
    3298:	00c6303a 	nor	r3,zero,r3
    329c:	18002b1e 	bne	r3,zero,334c <__addsf3+0x450>
    32a0:	2149883a 	add	r4,r4,r5
    32a4:	3021883a 	mov	r16,r6
    32a8:	003f8606 	br	30c4 <_gp+0xffff49d0>
    32ac:	20001b1e 	bne	r4,zero,331c <__addsf3+0x420>
    32b0:	28003926 	beq	r5,zero,3398 <__addsf3+0x49c>
    32b4:	2809883a 	mov	r4,r5
    32b8:	3823883a 	mov	r17,r7
    32bc:	04003fc4 	movi	r16,255
    32c0:	003f2506 	br	2f58 <_gp+0xffff4864>
    32c4:	01c03fc4 	movi	r7,255
    32c8:	31c02226 	beq	r6,r7,3354 <__addsf3+0x458>
    32cc:	00c7c83a 	sub	r3,zero,r3
    32d0:	21010034 	orhi	r4,r4,1024
    32d4:	01c006c4 	movi	r7,27
    32d8:	38c03616 	blt	r7,r3,33b4 <__addsf3+0x4b8>
    32dc:	01c00804 	movi	r7,32
    32e0:	38cfc83a 	sub	r7,r7,r3
    32e4:	21ce983a 	sll	r7,r4,r7
    32e8:	20c6d83a 	srl	r3,r4,r3
    32ec:	3808c03a 	cmpne	r4,r7,zero
    32f0:	1906b03a 	or	r3,r3,r4
    32f4:	1949883a 	add	r4,r3,r5
    32f8:	3021883a 	mov	r16,r6
    32fc:	003f7106 	br	30c4 <_gp+0xffff49d0>
    3300:	283f1526 	beq	r5,zero,2f58 <_gp+0xffff4864>
    3304:	2145c83a 	sub	r2,r4,r5
    3308:	10c1002c 	andhi	r3,r2,1024
    330c:	183f4f26 	beq	r3,zero,304c <_gp+0xffff4958>
    3310:	2909c83a 	sub	r4,r5,r4
    3314:	3823883a 	mov	r17,r7
    3318:	003f0f06 	br	2f58 <_gp+0xffff4864>
    331c:	28001a26 	beq	r5,zero,3388 <__addsf3+0x48c>
    3320:	2008d0fa 	srli	r4,r4,3
    3324:	2080102c 	andhi	r2,r4,64
    3328:	10000526 	beq	r2,zero,3340 <__addsf3+0x444>
    332c:	280ad0fa 	srli	r5,r5,3
    3330:	2880102c 	andhi	r2,r5,64
    3334:	1000021e 	bne	r2,zero,3340 <__addsf3+0x444>
    3338:	2809883a 	mov	r4,r5
    333c:	3823883a 	mov	r17,r7
    3340:	200890fa 	slli	r4,r4,3
    3344:	04003fc4 	movi	r16,255
    3348:	003f0306 	br	2f58 <_gp+0xffff4864>
    334c:	01c03fc4 	movi	r7,255
    3350:	31ffe01e 	bne	r6,r7,32d4 <_gp+0xffff4be0>
    3354:	2809883a 	mov	r4,r5
    3358:	3021883a 	mov	r16,r6
    335c:	003efe06 	br	2f58 <_gp+0xffff4864>
    3360:	20001126 	beq	r4,zero,33a8 <__addsf3+0x4ac>
    3364:	28000826 	beq	r5,zero,3388 <__addsf3+0x48c>
    3368:	2008d0fa 	srli	r4,r4,3
    336c:	2080102c 	andhi	r2,r4,64
    3370:	103ff326 	beq	r2,zero,3340 <_gp+0xffff4c4c>
    3374:	280ad0fa 	srli	r5,r5,3
    3378:	2880102c 	andhi	r2,r5,64
    337c:	103ff01e 	bne	r2,zero,3340 <_gp+0xffff4c4c>
    3380:	2809883a 	mov	r4,r5
    3384:	003fee06 	br	3340 <_gp+0xffff4c4c>
    3388:	04003fc4 	movi	r16,255
    338c:	003ef206 	br	2f58 <_gp+0xffff4864>
    3390:	01000044 	movi	r4,1
    3394:	003f9706 	br	31f4 <_gp+0xffff4b00>
    3398:	0005883a 	mov	r2,zero
    339c:	003f3406 	br	3070 <_gp+0xffff497c>
    33a0:	2809883a 	mov	r4,r5
    33a4:	003eec06 	br	2f58 <_gp+0xffff4864>
    33a8:	2809883a 	mov	r4,r5
    33ac:	04003fc4 	movi	r16,255
    33b0:	003ee906 	br	2f58 <_gp+0xffff4864>
    33b4:	00c00044 	movi	r3,1
    33b8:	003fce06 	br	32f4 <_gp+0xffff4c00>
    33bc:	0005883a 	mov	r2,zero
    33c0:	003f4e06 	br	30fc <_gp+0xffff4a08>

000033c4 <__mulsf3>:
    33c4:	defff504 	addi	sp,sp,-44
    33c8:	dc000115 	stw	r16,4(sp)
    33cc:	2020d5fa 	srli	r16,r4,23
    33d0:	dd400615 	stw	r21,24(sp)
    33d4:	202ad7fa 	srli	r21,r4,31
    33d8:	dc800315 	stw	r18,12(sp)
    33dc:	04802034 	movhi	r18,128
    33e0:	df000915 	stw	fp,36(sp)
    33e4:	dd000515 	stw	r20,20(sp)
    33e8:	94bfffc4 	addi	r18,r18,-1
    33ec:	dfc00a15 	stw	ra,40(sp)
    33f0:	ddc00815 	stw	r23,32(sp)
    33f4:	dd800715 	stw	r22,28(sp)
    33f8:	dcc00415 	stw	r19,16(sp)
    33fc:	dc400215 	stw	r17,8(sp)
    3400:	84003fcc 	andi	r16,r16,255
    3404:	9124703a 	and	r18,r18,r4
    3408:	a829883a 	mov	r20,r21
    340c:	af003fcc 	andi	fp,r21,255
    3410:	80005426 	beq	r16,zero,3564 <__mulsf3+0x1a0>
    3414:	00803fc4 	movi	r2,255
    3418:	80802f26 	beq	r16,r2,34d8 <__mulsf3+0x114>
    341c:	91002034 	orhi	r4,r18,128
    3420:	202490fa 	slli	r18,r4,3
    3424:	843fe044 	addi	r16,r16,-127
    3428:	0023883a 	mov	r17,zero
    342c:	002f883a 	mov	r23,zero
    3430:	2804d5fa 	srli	r2,r5,23
    3434:	282cd7fa 	srli	r22,r5,31
    3438:	01002034 	movhi	r4,128
    343c:	213fffc4 	addi	r4,r4,-1
    3440:	10803fcc 	andi	r2,r2,255
    3444:	2166703a 	and	r19,r4,r5
    3448:	b1803fcc 	andi	r6,r22,255
    344c:	10004c26 	beq	r2,zero,3580 <__mulsf3+0x1bc>
    3450:	00c03fc4 	movi	r3,255
    3454:	10c04726 	beq	r2,r3,3574 <__mulsf3+0x1b0>
    3458:	99002034 	orhi	r4,r19,128
    345c:	202690fa 	slli	r19,r4,3
    3460:	10bfe044 	addi	r2,r2,-127
    3464:	0007883a 	mov	r3,zero
    3468:	80a1883a 	add	r16,r16,r2
    346c:	010003c4 	movi	r4,15
    3470:	1c44b03a 	or	r2,r3,r17
    3474:	b56af03a 	xor	r21,r22,r21
    3478:	81c00044 	addi	r7,r16,1
    347c:	20806b36 	bltu	r4,r2,362c <__mulsf3+0x268>
    3480:	100490ba 	slli	r2,r2,2
    3484:	01000034 	movhi	r4,0
    3488:	210d2604 	addi	r4,r4,13464
    348c:	1105883a 	add	r2,r2,r4
    3490:	10800017 	ldw	r2,0(r2)
    3494:	1000683a 	jmp	r2
    3498:	0000362c 	andhi	zero,zero,216
    349c:	000034ec 	andhi	zero,zero,211
    34a0:	000034ec 	andhi	zero,zero,211
    34a4:	000034e8 	cmpgeui	zero,zero,211
    34a8:	00003610 	cmplti	zero,zero,216
    34ac:	00003610 	cmplti	zero,zero,216
    34b0:	000035fc 	xorhi	zero,zero,215
    34b4:	000034e8 	cmpgeui	zero,zero,211
    34b8:	00003610 	cmplti	zero,zero,216
    34bc:	000035fc 	xorhi	zero,zero,215
    34c0:	00003610 	cmplti	zero,zero,216
    34c4:	000034e8 	cmpgeui	zero,zero,211
    34c8:	0000361c 	xori	zero,zero,216
    34cc:	0000361c 	xori	zero,zero,216
    34d0:	0000361c 	xori	zero,zero,216
    34d4:	0000372c 	andhi	zero,zero,220
    34d8:	90003b1e 	bne	r18,zero,35c8 <__mulsf3+0x204>
    34dc:	04400204 	movi	r17,8
    34e0:	05c00084 	movi	r23,2
    34e4:	003fd206 	br	3430 <_gp+0xffff4d3c>
    34e8:	302b883a 	mov	r21,r6
    34ec:	00800084 	movi	r2,2
    34f0:	18802626 	beq	r3,r2,358c <__mulsf3+0x1c8>
    34f4:	008000c4 	movi	r2,3
    34f8:	1880b826 	beq	r3,r2,37dc <__mulsf3+0x418>
    34fc:	00800044 	movi	r2,1
    3500:	1880af1e 	bne	r3,r2,37c0 <__mulsf3+0x3fc>
    3504:	a829883a 	mov	r20,r21
    3508:	0007883a 	mov	r3,zero
    350c:	0009883a 	mov	r4,zero
    3510:	18803fcc 	andi	r2,r3,255
    3514:	100695fa 	slli	r3,r2,23
    3518:	a0803fcc 	andi	r2,r20,255
    351c:	100a97fa 	slli	r5,r2,31
    3520:	00802034 	movhi	r2,128
    3524:	10bfffc4 	addi	r2,r2,-1
    3528:	2084703a 	and	r2,r4,r2
    352c:	10c4b03a 	or	r2,r2,r3
    3530:	1144b03a 	or	r2,r2,r5
    3534:	dfc00a17 	ldw	ra,40(sp)
    3538:	df000917 	ldw	fp,36(sp)
    353c:	ddc00817 	ldw	r23,32(sp)
    3540:	dd800717 	ldw	r22,28(sp)
    3544:	dd400617 	ldw	r21,24(sp)
    3548:	dd000517 	ldw	r20,20(sp)
    354c:	dcc00417 	ldw	r19,16(sp)
    3550:	dc800317 	ldw	r18,12(sp)
    3554:	dc400217 	ldw	r17,8(sp)
    3558:	dc000117 	ldw	r16,4(sp)
    355c:	dec00b04 	addi	sp,sp,44
    3560:	f800283a 	ret
    3564:	90000d1e 	bne	r18,zero,359c <__mulsf3+0x1d8>
    3568:	04400104 	movi	r17,4
    356c:	05c00044 	movi	r23,1
    3570:	003faf06 	br	3430 <_gp+0xffff4d3c>
    3574:	9806c03a 	cmpne	r3,r19,zero
    3578:	18c00084 	addi	r3,r3,2
    357c:	003fba06 	br	3468 <_gp+0xffff4d74>
    3580:	9800141e 	bne	r19,zero,35d4 <__mulsf3+0x210>
    3584:	00c00044 	movi	r3,1
    3588:	003fb706 	br	3468 <_gp+0xffff4d74>
    358c:	a829883a 	mov	r20,r21
    3590:	00ffffc4 	movi	r3,-1
    3594:	0009883a 	mov	r4,zero
    3598:	003fdd06 	br	3510 <_gp+0xffff4e1c>
    359c:	9009883a 	mov	r4,r18
    35a0:	d9400015 	stw	r5,0(sp)
    35a4:	00061240 	call	6124 <__clzsi2>
    35a8:	10fffec4 	addi	r3,r2,-5
    35ac:	10801d84 	addi	r2,r2,118
    35b0:	90e4983a 	sll	r18,r18,r3
    35b4:	00a1c83a 	sub	r16,zero,r2
    35b8:	0023883a 	mov	r17,zero
    35bc:	002f883a 	mov	r23,zero
    35c0:	d9400017 	ldw	r5,0(sp)
    35c4:	003f9a06 	br	3430 <_gp+0xffff4d3c>
    35c8:	04400304 	movi	r17,12
    35cc:	05c000c4 	movi	r23,3
    35d0:	003f9706 	br	3430 <_gp+0xffff4d3c>
    35d4:	9809883a 	mov	r4,r19
    35d8:	d9800015 	stw	r6,0(sp)
    35dc:	00061240 	call	6124 <__clzsi2>
    35e0:	10fffec4 	addi	r3,r2,-5
    35e4:	10801d84 	addi	r2,r2,118
    35e8:	98e6983a 	sll	r19,r19,r3
    35ec:	0085c83a 	sub	r2,zero,r2
    35f0:	0007883a 	mov	r3,zero
    35f4:	d9800017 	ldw	r6,0(sp)
    35f8:	003f9b06 	br	3468 <_gp+0xffff4d74>
    35fc:	01002034 	movhi	r4,128
    3600:	0029883a 	mov	r20,zero
    3604:	213fffc4 	addi	r4,r4,-1
    3608:	00ffffc4 	movi	r3,-1
    360c:	003fc006 	br	3510 <_gp+0xffff4e1c>
    3610:	9027883a 	mov	r19,r18
    3614:	b807883a 	mov	r3,r23
    3618:	003fb406 	br	34ec <_gp+0xffff4df8>
    361c:	9027883a 	mov	r19,r18
    3620:	e02b883a 	mov	r21,fp
    3624:	b807883a 	mov	r3,r23
    3628:	003fb006 	br	34ec <_gp+0xffff4df8>
    362c:	9028d43a 	srli	r20,r18,16
    3630:	982cd43a 	srli	r22,r19,16
    3634:	94bfffcc 	andi	r18,r18,65535
    3638:	9cffffcc 	andi	r19,r19,65535
    363c:	980b883a 	mov	r5,r19
    3640:	9009883a 	mov	r4,r18
    3644:	d9c00015 	stw	r7,0(sp)
    3648:	0002ed40 	call	2ed4 <__mulsi3>
    364c:	a00b883a 	mov	r5,r20
    3650:	9809883a 	mov	r4,r19
    3654:	1023883a 	mov	r17,r2
    3658:	0002ed40 	call	2ed4 <__mulsi3>
    365c:	a009883a 	mov	r4,r20
    3660:	b00b883a 	mov	r5,r22
    3664:	1027883a 	mov	r19,r2
    3668:	0002ed40 	call	2ed4 <__mulsi3>
    366c:	b00b883a 	mov	r5,r22
    3670:	9009883a 	mov	r4,r18
    3674:	1029883a 	mov	r20,r2
    3678:	0002ed40 	call	2ed4 <__mulsi3>
    367c:	8806d43a 	srli	r3,r17,16
    3680:	14c5883a 	add	r2,r2,r19
    3684:	d9c00017 	ldw	r7,0(sp)
    3688:	1885883a 	add	r2,r3,r2
    368c:	14c0022e 	bgeu	r2,r19,3698 <__mulsf3+0x2d4>
    3690:	00c00074 	movhi	r3,1
    3694:	a0e9883a 	add	r20,r20,r3
    3698:	1026943a 	slli	r19,r2,16
    369c:	8c7fffcc 	andi	r17,r17,65535
    36a0:	1004d43a 	srli	r2,r2,16
    36a4:	9c63883a 	add	r17,r19,r17
    36a8:	882691ba 	slli	r19,r17,6
    36ac:	1505883a 	add	r2,r2,r20
    36b0:	8822d6ba 	srli	r17,r17,26
    36b4:	100891ba 	slli	r4,r2,6
    36b8:	9826c03a 	cmpne	r19,r19,zero
    36bc:	9c62b03a 	or	r17,r19,r17
    36c0:	8926b03a 	or	r19,r17,r4
    36c4:	9882002c 	andhi	r2,r19,2048
    36c8:	10000426 	beq	r2,zero,36dc <__mulsf3+0x318>
    36cc:	9804d07a 	srli	r2,r19,1
    36d0:	9900004c 	andi	r4,r19,1
    36d4:	3821883a 	mov	r16,r7
    36d8:	1126b03a 	or	r19,r2,r4
    36dc:	80c01fc4 	addi	r3,r16,127
    36e0:	00c0210e 	bge	zero,r3,3768 <__mulsf3+0x3a4>
    36e4:	988001cc 	andi	r2,r19,7
    36e8:	10000426 	beq	r2,zero,36fc <__mulsf3+0x338>
    36ec:	988003cc 	andi	r2,r19,15
    36f0:	01000104 	movi	r4,4
    36f4:	11000126 	beq	r2,r4,36fc <__mulsf3+0x338>
    36f8:	9927883a 	add	r19,r19,r4
    36fc:	9882002c 	andhi	r2,r19,2048
    3700:	10000426 	beq	r2,zero,3714 <__mulsf3+0x350>
    3704:	00be0034 	movhi	r2,63488
    3708:	10bfffc4 	addi	r2,r2,-1
    370c:	80c02004 	addi	r3,r16,128
    3710:	98a6703a 	and	r19,r19,r2
    3714:	00803f84 	movi	r2,254
    3718:	10ff9c16 	blt	r2,r3,358c <_gp+0xffff4e98>
    371c:	980891ba 	slli	r4,r19,6
    3720:	a829883a 	mov	r20,r21
    3724:	2008d27a 	srli	r4,r4,9
    3728:	003f7906 	br	3510 <_gp+0xffff4e1c>
    372c:	9080102c 	andhi	r2,r18,64
    3730:	10000826 	beq	r2,zero,3754 <__mulsf3+0x390>
    3734:	9880102c 	andhi	r2,r19,64
    3738:	1000061e 	bne	r2,zero,3754 <__mulsf3+0x390>
    373c:	00802034 	movhi	r2,128
    3740:	99001034 	orhi	r4,r19,64
    3744:	10bfffc4 	addi	r2,r2,-1
    3748:	b029883a 	mov	r20,r22
    374c:	2088703a 	and	r4,r4,r2
    3750:	003fad06 	br	3608 <_gp+0xffff4f14>
    3754:	00802034 	movhi	r2,128
    3758:	91001034 	orhi	r4,r18,64
    375c:	10bfffc4 	addi	r2,r2,-1
    3760:	2088703a 	and	r4,r4,r2
    3764:	003fa806 	br	3608 <_gp+0xffff4f14>
    3768:	00800044 	movi	r2,1
    376c:	10c7c83a 	sub	r3,r2,r3
    3770:	008006c4 	movi	r2,27
    3774:	10ff6316 	blt	r2,r3,3504 <_gp+0xffff4e10>
    3778:	00800804 	movi	r2,32
    377c:	10c5c83a 	sub	r2,r2,r3
    3780:	9884983a 	sll	r2,r19,r2
    3784:	98c6d83a 	srl	r3,r19,r3
    3788:	1004c03a 	cmpne	r2,r2,zero
    378c:	1884b03a 	or	r2,r3,r2
    3790:	10c001cc 	andi	r3,r2,7
    3794:	18000426 	beq	r3,zero,37a8 <__mulsf3+0x3e4>
    3798:	10c003cc 	andi	r3,r2,15
    379c:	01000104 	movi	r4,4
    37a0:	19000126 	beq	r3,r4,37a8 <__mulsf3+0x3e4>
    37a4:	1105883a 	add	r2,r2,r4
    37a8:	10c1002c 	andhi	r3,r2,1024
    37ac:	18000626 	beq	r3,zero,37c8 <__mulsf3+0x404>
    37b0:	a829883a 	mov	r20,r21
    37b4:	00c00044 	movi	r3,1
    37b8:	0009883a 	mov	r4,zero
    37bc:	003f5406 	br	3510 <_gp+0xffff4e1c>
    37c0:	3821883a 	mov	r16,r7
    37c4:	003fc506 	br	36dc <_gp+0xffff4fe8>
    37c8:	100491ba 	slli	r2,r2,6
    37cc:	a829883a 	mov	r20,r21
    37d0:	0007883a 	mov	r3,zero
    37d4:	1008d27a 	srli	r4,r2,9
    37d8:	003f4d06 	br	3510 <_gp+0xffff4e1c>
    37dc:	00802034 	movhi	r2,128
    37e0:	99001034 	orhi	r4,r19,64
    37e4:	10bfffc4 	addi	r2,r2,-1
    37e8:	a829883a 	mov	r20,r21
    37ec:	2088703a 	and	r4,r4,r2
    37f0:	003f8506 	br	3608 <_gp+0xffff4f14>

000037f4 <__floatunsisf>:
    37f4:	defffe04 	addi	sp,sp,-8
    37f8:	dfc00115 	stw	ra,4(sp)
    37fc:	dc000015 	stw	r16,0(sp)
    3800:	20002c26 	beq	r4,zero,38b4 <__floatunsisf+0xc0>
    3804:	2021883a 	mov	r16,r4
    3808:	00061240 	call	6124 <__clzsi2>
    380c:	00c02784 	movi	r3,158
    3810:	1887c83a 	sub	r3,r3,r2
    3814:	01002584 	movi	r4,150
    3818:	20c00f16 	blt	r4,r3,3858 <__floatunsisf+0x64>
    381c:	20c9c83a 	sub	r4,r4,r3
    3820:	8108983a 	sll	r4,r16,r4
    3824:	00802034 	movhi	r2,128
    3828:	10bfffc4 	addi	r2,r2,-1
    382c:	2088703a 	and	r4,r4,r2
    3830:	18803fcc 	andi	r2,r3,255
    3834:	100695fa 	slli	r3,r2,23
    3838:	00802034 	movhi	r2,128
    383c:	10bfffc4 	addi	r2,r2,-1
    3840:	2084703a 	and	r2,r4,r2
    3844:	10c4b03a 	or	r2,r2,r3
    3848:	dfc00117 	ldw	ra,4(sp)
    384c:	dc000017 	ldw	r16,0(sp)
    3850:	dec00204 	addi	sp,sp,8
    3854:	f800283a 	ret
    3858:	01002644 	movi	r4,153
    385c:	20c01816 	blt	r4,r3,38c0 <__floatunsisf+0xcc>
    3860:	20c9c83a 	sub	r4,r4,r3
    3864:	8108983a 	sll	r4,r16,r4
    3868:	017f0034 	movhi	r5,64512
    386c:	297fffc4 	addi	r5,r5,-1
    3870:	218001cc 	andi	r6,r4,7
    3874:	214a703a 	and	r5,r4,r5
    3878:	30000426 	beq	r6,zero,388c <__floatunsisf+0x98>
    387c:	210003cc 	andi	r4,r4,15
    3880:	01800104 	movi	r6,4
    3884:	21800126 	beq	r4,r6,388c <__floatunsisf+0x98>
    3888:	298b883a 	add	r5,r5,r6
    388c:	2901002c 	andhi	r4,r5,1024
    3890:	20000526 	beq	r4,zero,38a8 <__floatunsisf+0xb4>
    3894:	00c027c4 	movi	r3,159
    3898:	1887c83a 	sub	r3,r3,r2
    389c:	00bf0034 	movhi	r2,64512
    38a0:	10bfffc4 	addi	r2,r2,-1
    38a4:	288a703a 	and	r5,r5,r2
    38a8:	280891ba 	slli	r4,r5,6
    38ac:	2008d27a 	srli	r4,r4,9
    38b0:	003fdf06 	br	3830 <_gp+0xffff513c>
    38b4:	0007883a 	mov	r3,zero
    38b8:	0009883a 	mov	r4,zero
    38bc:	003fdc06 	br	3830 <_gp+0xffff513c>
    38c0:	01402e44 	movi	r5,185
    38c4:	28cbc83a 	sub	r5,r5,r3
    38c8:	01000144 	movi	r4,5
    38cc:	2089c83a 	sub	r4,r4,r2
    38d0:	814a983a 	sll	r5,r16,r5
    38d4:	8108d83a 	srl	r4,r16,r4
    38d8:	2820c03a 	cmpne	r16,r5,zero
    38dc:	2408b03a 	or	r4,r4,r16
    38e0:	003fe106 	br	3868 <_gp+0xffff5174>

000038e4 <__adddf3>:
    38e4:	02c00434 	movhi	r11,16
    38e8:	5affffc4 	addi	r11,r11,-1
    38ec:	2806d7fa 	srli	r3,r5,31
    38f0:	2ad4703a 	and	r10,r5,r11
    38f4:	3ad2703a 	and	r9,r7,r11
    38f8:	3804d53a 	srli	r2,r7,20
    38fc:	3018d77a 	srli	r12,r6,29
    3900:	280ad53a 	srli	r5,r5,20
    3904:	501490fa 	slli	r10,r10,3
    3908:	2010d77a 	srli	r8,r4,29
    390c:	481290fa 	slli	r9,r9,3
    3910:	380ed7fa 	srli	r7,r7,31
    3914:	defffb04 	addi	sp,sp,-20
    3918:	dc800215 	stw	r18,8(sp)
    391c:	dc400115 	stw	r17,4(sp)
    3920:	dc000015 	stw	r16,0(sp)
    3924:	dfc00415 	stw	ra,16(sp)
    3928:	dcc00315 	stw	r19,12(sp)
    392c:	1c803fcc 	andi	r18,r3,255
    3930:	2c01ffcc 	andi	r16,r5,2047
    3934:	5210b03a 	or	r8,r10,r8
    3938:	202290fa 	slli	r17,r4,3
    393c:	1081ffcc 	andi	r2,r2,2047
    3940:	4b12b03a 	or	r9,r9,r12
    3944:	300c90fa 	slli	r6,r6,3
    3948:	91c07526 	beq	r18,r7,3b20 <__adddf3+0x23c>
    394c:	8087c83a 	sub	r3,r16,r2
    3950:	00c0ab0e 	bge	zero,r3,3c00 <__adddf3+0x31c>
    3954:	10002a1e 	bne	r2,zero,3a00 <__adddf3+0x11c>
    3958:	4984b03a 	or	r2,r9,r6
    395c:	1000961e 	bne	r2,zero,3bb8 <__adddf3+0x2d4>
    3960:	888001cc 	andi	r2,r17,7
    3964:	10000726 	beq	r2,zero,3984 <__adddf3+0xa0>
    3968:	888003cc 	andi	r2,r17,15
    396c:	00c00104 	movi	r3,4
    3970:	10c00426 	beq	r2,r3,3984 <__adddf3+0xa0>
    3974:	88c7883a 	add	r3,r17,r3
    3978:	1c63803a 	cmpltu	r17,r3,r17
    397c:	4451883a 	add	r8,r8,r17
    3980:	1823883a 	mov	r17,r3
    3984:	4080202c 	andhi	r2,r8,128
    3988:	10005926 	beq	r2,zero,3af0 <__adddf3+0x20c>
    398c:	84000044 	addi	r16,r16,1
    3990:	0081ffc4 	movi	r2,2047
    3994:	8080ba26 	beq	r16,r2,3c80 <__adddf3+0x39c>
    3998:	00bfe034 	movhi	r2,65408
    399c:	10bfffc4 	addi	r2,r2,-1
    39a0:	4090703a 	and	r8,r8,r2
    39a4:	4004977a 	slli	r2,r8,29
    39a8:	4010927a 	slli	r8,r8,9
    39ac:	8822d0fa 	srli	r17,r17,3
    39b0:	8401ffcc 	andi	r16,r16,2047
    39b4:	4010d33a 	srli	r8,r8,12
    39b8:	9007883a 	mov	r3,r18
    39bc:	1444b03a 	or	r2,r2,r17
    39c0:	8401ffcc 	andi	r16,r16,2047
    39c4:	8020953a 	slli	r16,r16,20
    39c8:	18c03fcc 	andi	r3,r3,255
    39cc:	01000434 	movhi	r4,16
    39d0:	213fffc4 	addi	r4,r4,-1
    39d4:	180697fa 	slli	r3,r3,31
    39d8:	4110703a 	and	r8,r8,r4
    39dc:	4410b03a 	or	r8,r8,r16
    39e0:	40c6b03a 	or	r3,r8,r3
    39e4:	dfc00417 	ldw	ra,16(sp)
    39e8:	dcc00317 	ldw	r19,12(sp)
    39ec:	dc800217 	ldw	r18,8(sp)
    39f0:	dc400117 	ldw	r17,4(sp)
    39f4:	dc000017 	ldw	r16,0(sp)
    39f8:	dec00504 	addi	sp,sp,20
    39fc:	f800283a 	ret
    3a00:	0081ffc4 	movi	r2,2047
    3a04:	80bfd626 	beq	r16,r2,3960 <_gp+0xffff526c>
    3a08:	4a402034 	orhi	r9,r9,128
    3a0c:	00800e04 	movi	r2,56
    3a10:	10c09f16 	blt	r2,r3,3c90 <__adddf3+0x3ac>
    3a14:	008007c4 	movi	r2,31
    3a18:	10c0c216 	blt	r2,r3,3d24 <__adddf3+0x440>
    3a1c:	00800804 	movi	r2,32
    3a20:	10c5c83a 	sub	r2,r2,r3
    3a24:	488a983a 	sll	r5,r9,r2
    3a28:	30c8d83a 	srl	r4,r6,r3
    3a2c:	3084983a 	sll	r2,r6,r2
    3a30:	48c6d83a 	srl	r3,r9,r3
    3a34:	290cb03a 	or	r6,r5,r4
    3a38:	1004c03a 	cmpne	r2,r2,zero
    3a3c:	308cb03a 	or	r6,r6,r2
    3a40:	898dc83a 	sub	r6,r17,r6
    3a44:	89a3803a 	cmpltu	r17,r17,r6
    3a48:	40d1c83a 	sub	r8,r8,r3
    3a4c:	4451c83a 	sub	r8,r8,r17
    3a50:	3023883a 	mov	r17,r6
    3a54:	4080202c 	andhi	r2,r8,128
    3a58:	10002326 	beq	r2,zero,3ae8 <__adddf3+0x204>
    3a5c:	04c02034 	movhi	r19,128
    3a60:	9cffffc4 	addi	r19,r19,-1
    3a64:	44e6703a 	and	r19,r8,r19
    3a68:	98007626 	beq	r19,zero,3c44 <__adddf3+0x360>
    3a6c:	9809883a 	mov	r4,r19
    3a70:	00061240 	call	6124 <__clzsi2>
    3a74:	10fffe04 	addi	r3,r2,-8
    3a78:	010007c4 	movi	r4,31
    3a7c:	20c07716 	blt	r4,r3,3c5c <__adddf3+0x378>
    3a80:	00800804 	movi	r2,32
    3a84:	10c5c83a 	sub	r2,r2,r3
    3a88:	8884d83a 	srl	r2,r17,r2
    3a8c:	98d0983a 	sll	r8,r19,r3
    3a90:	88e2983a 	sll	r17,r17,r3
    3a94:	1204b03a 	or	r2,r2,r8
    3a98:	1c007416 	blt	r3,r16,3c6c <__adddf3+0x388>
    3a9c:	1c21c83a 	sub	r16,r3,r16
    3aa0:	82000044 	addi	r8,r16,1
    3aa4:	00c007c4 	movi	r3,31
    3aa8:	1a009116 	blt	r3,r8,3cf0 <__adddf3+0x40c>
    3aac:	00c00804 	movi	r3,32
    3ab0:	1a07c83a 	sub	r3,r3,r8
    3ab4:	8a08d83a 	srl	r4,r17,r8
    3ab8:	88e2983a 	sll	r17,r17,r3
    3abc:	10c6983a 	sll	r3,r2,r3
    3ac0:	1210d83a 	srl	r8,r2,r8
    3ac4:	8804c03a 	cmpne	r2,r17,zero
    3ac8:	1906b03a 	or	r3,r3,r4
    3acc:	18a2b03a 	or	r17,r3,r2
    3ad0:	0021883a 	mov	r16,zero
    3ad4:	003fa206 	br	3960 <_gp+0xffff526c>
    3ad8:	1890b03a 	or	r8,r3,r2
    3adc:	40017d26 	beq	r8,zero,40d4 <__adddf3+0x7f0>
    3ae0:	1011883a 	mov	r8,r2
    3ae4:	1823883a 	mov	r17,r3
    3ae8:	888001cc 	andi	r2,r17,7
    3aec:	103f9e1e 	bne	r2,zero,3968 <_gp+0xffff5274>
    3af0:	4004977a 	slli	r2,r8,29
    3af4:	8822d0fa 	srli	r17,r17,3
    3af8:	4010d0fa 	srli	r8,r8,3
    3afc:	9007883a 	mov	r3,r18
    3b00:	1444b03a 	or	r2,r2,r17
    3b04:	0101ffc4 	movi	r4,2047
    3b08:	81002426 	beq	r16,r4,3b9c <__adddf3+0x2b8>
    3b0c:	8120703a 	and	r16,r16,r4
    3b10:	01000434 	movhi	r4,16
    3b14:	213fffc4 	addi	r4,r4,-1
    3b18:	4110703a 	and	r8,r8,r4
    3b1c:	003fa806 	br	39c0 <_gp+0xffff52cc>
    3b20:	8089c83a 	sub	r4,r16,r2
    3b24:	01005e0e 	bge	zero,r4,3ca0 <__adddf3+0x3bc>
    3b28:	10002b26 	beq	r2,zero,3bd8 <__adddf3+0x2f4>
    3b2c:	0081ffc4 	movi	r2,2047
    3b30:	80bf8b26 	beq	r16,r2,3960 <_gp+0xffff526c>
    3b34:	4a402034 	orhi	r9,r9,128
    3b38:	00800e04 	movi	r2,56
    3b3c:	1100a40e 	bge	r2,r4,3dd0 <__adddf3+0x4ec>
    3b40:	498cb03a 	or	r6,r9,r6
    3b44:	300ac03a 	cmpne	r5,r6,zero
    3b48:	0013883a 	mov	r9,zero
    3b4c:	2c4b883a 	add	r5,r5,r17
    3b50:	2c63803a 	cmpltu	r17,r5,r17
    3b54:	4a11883a 	add	r8,r9,r8
    3b58:	8a11883a 	add	r8,r17,r8
    3b5c:	2823883a 	mov	r17,r5
    3b60:	4080202c 	andhi	r2,r8,128
    3b64:	103fe026 	beq	r2,zero,3ae8 <_gp+0xffff53f4>
    3b68:	84000044 	addi	r16,r16,1
    3b6c:	0081ffc4 	movi	r2,2047
    3b70:	8080d226 	beq	r16,r2,3ebc <__adddf3+0x5d8>
    3b74:	00bfe034 	movhi	r2,65408
    3b78:	10bfffc4 	addi	r2,r2,-1
    3b7c:	4090703a 	and	r8,r8,r2
    3b80:	880ad07a 	srli	r5,r17,1
    3b84:	400897fa 	slli	r4,r8,31
    3b88:	88c0004c 	andi	r3,r17,1
    3b8c:	28e2b03a 	or	r17,r5,r3
    3b90:	4010d07a 	srli	r8,r8,1
    3b94:	2462b03a 	or	r17,r4,r17
    3b98:	003f7106 	br	3960 <_gp+0xffff526c>
    3b9c:	4088b03a 	or	r4,r8,r2
    3ba0:	20014526 	beq	r4,zero,40b8 <__adddf3+0x7d4>
    3ba4:	01000434 	movhi	r4,16
    3ba8:	42000234 	orhi	r8,r8,8
    3bac:	213fffc4 	addi	r4,r4,-1
    3bb0:	4110703a 	and	r8,r8,r4
    3bb4:	003f8206 	br	39c0 <_gp+0xffff52cc>
    3bb8:	18ffffc4 	addi	r3,r3,-1
    3bbc:	1800491e 	bne	r3,zero,3ce4 <__adddf3+0x400>
    3bc0:	898bc83a 	sub	r5,r17,r6
    3bc4:	8963803a 	cmpltu	r17,r17,r5
    3bc8:	4251c83a 	sub	r8,r8,r9
    3bcc:	4451c83a 	sub	r8,r8,r17
    3bd0:	2823883a 	mov	r17,r5
    3bd4:	003f9f06 	br	3a54 <_gp+0xffff5360>
    3bd8:	4984b03a 	or	r2,r9,r6
    3bdc:	103f6026 	beq	r2,zero,3960 <_gp+0xffff526c>
    3be0:	213fffc4 	addi	r4,r4,-1
    3be4:	2000931e 	bne	r4,zero,3e34 <__adddf3+0x550>
    3be8:	898d883a 	add	r6,r17,r6
    3bec:	3463803a 	cmpltu	r17,r6,r17
    3bf0:	4251883a 	add	r8,r8,r9
    3bf4:	8a11883a 	add	r8,r17,r8
    3bf8:	3023883a 	mov	r17,r6
    3bfc:	003fd806 	br	3b60 <_gp+0xffff546c>
    3c00:	1800541e 	bne	r3,zero,3d54 <__adddf3+0x470>
    3c04:	80800044 	addi	r2,r16,1
    3c08:	1081ffcc 	andi	r2,r2,2047
    3c0c:	00c00044 	movi	r3,1
    3c10:	1880a00e 	bge	r3,r2,3e94 <__adddf3+0x5b0>
    3c14:	8989c83a 	sub	r4,r17,r6
    3c18:	8905803a 	cmpltu	r2,r17,r4
    3c1c:	4267c83a 	sub	r19,r8,r9
    3c20:	98a7c83a 	sub	r19,r19,r2
    3c24:	9880202c 	andhi	r2,r19,128
    3c28:	10006326 	beq	r2,zero,3db8 <__adddf3+0x4d4>
    3c2c:	3463c83a 	sub	r17,r6,r17
    3c30:	4a07c83a 	sub	r3,r9,r8
    3c34:	344d803a 	cmpltu	r6,r6,r17
    3c38:	19a7c83a 	sub	r19,r3,r6
    3c3c:	3825883a 	mov	r18,r7
    3c40:	983f8a1e 	bne	r19,zero,3a6c <_gp+0xffff5378>
    3c44:	8809883a 	mov	r4,r17
    3c48:	00061240 	call	6124 <__clzsi2>
    3c4c:	10800804 	addi	r2,r2,32
    3c50:	10fffe04 	addi	r3,r2,-8
    3c54:	010007c4 	movi	r4,31
    3c58:	20ff890e 	bge	r4,r3,3a80 <_gp+0xffff538c>
    3c5c:	10bff604 	addi	r2,r2,-40
    3c60:	8884983a 	sll	r2,r17,r2
    3c64:	0023883a 	mov	r17,zero
    3c68:	1c3f8c0e 	bge	r3,r16,3a9c <_gp+0xffff53a8>
    3c6c:	023fe034 	movhi	r8,65408
    3c70:	423fffc4 	addi	r8,r8,-1
    3c74:	80e1c83a 	sub	r16,r16,r3
    3c78:	1210703a 	and	r8,r2,r8
    3c7c:	003f3806 	br	3960 <_gp+0xffff526c>
    3c80:	9007883a 	mov	r3,r18
    3c84:	0011883a 	mov	r8,zero
    3c88:	0005883a 	mov	r2,zero
    3c8c:	003f4c06 	br	39c0 <_gp+0xffff52cc>
    3c90:	498cb03a 	or	r6,r9,r6
    3c94:	300cc03a 	cmpne	r6,r6,zero
    3c98:	0007883a 	mov	r3,zero
    3c9c:	003f6806 	br	3a40 <_gp+0xffff534c>
    3ca0:	20009c1e 	bne	r4,zero,3f14 <__adddf3+0x630>
    3ca4:	80800044 	addi	r2,r16,1
    3ca8:	1141ffcc 	andi	r5,r2,2047
    3cac:	01000044 	movi	r4,1
    3cb0:	2140670e 	bge	r4,r5,3e50 <__adddf3+0x56c>
    3cb4:	0101ffc4 	movi	r4,2047
    3cb8:	11007f26 	beq	r2,r4,3eb8 <__adddf3+0x5d4>
    3cbc:	898d883a 	add	r6,r17,r6
    3cc0:	4247883a 	add	r3,r8,r9
    3cc4:	3451803a 	cmpltu	r8,r6,r17
    3cc8:	40d1883a 	add	r8,r8,r3
    3ccc:	402297fa 	slli	r17,r8,31
    3cd0:	300cd07a 	srli	r6,r6,1
    3cd4:	4010d07a 	srli	r8,r8,1
    3cd8:	1021883a 	mov	r16,r2
    3cdc:	89a2b03a 	or	r17,r17,r6
    3ce0:	003f1f06 	br	3960 <_gp+0xffff526c>
    3ce4:	0081ffc4 	movi	r2,2047
    3ce8:	80bf481e 	bne	r16,r2,3a0c <_gp+0xffff5318>
    3cec:	003f1c06 	br	3960 <_gp+0xffff526c>
    3cf0:	843ff844 	addi	r16,r16,-31
    3cf4:	01000804 	movi	r4,32
    3cf8:	1406d83a 	srl	r3,r2,r16
    3cfc:	41005026 	beq	r8,r4,3e40 <__adddf3+0x55c>
    3d00:	01001004 	movi	r4,64
    3d04:	2211c83a 	sub	r8,r4,r8
    3d08:	1204983a 	sll	r2,r2,r8
    3d0c:	88a2b03a 	or	r17,r17,r2
    3d10:	8822c03a 	cmpne	r17,r17,zero
    3d14:	1c62b03a 	or	r17,r3,r17
    3d18:	0011883a 	mov	r8,zero
    3d1c:	0021883a 	mov	r16,zero
    3d20:	003f7106 	br	3ae8 <_gp+0xffff53f4>
    3d24:	193ff804 	addi	r4,r3,-32
    3d28:	00800804 	movi	r2,32
    3d2c:	4908d83a 	srl	r4,r9,r4
    3d30:	18804526 	beq	r3,r2,3e48 <__adddf3+0x564>
    3d34:	00801004 	movi	r2,64
    3d38:	10c5c83a 	sub	r2,r2,r3
    3d3c:	4886983a 	sll	r3,r9,r2
    3d40:	198cb03a 	or	r6,r3,r6
    3d44:	300cc03a 	cmpne	r6,r6,zero
    3d48:	218cb03a 	or	r6,r4,r6
    3d4c:	0007883a 	mov	r3,zero
    3d50:	003f3b06 	br	3a40 <_gp+0xffff534c>
    3d54:	80002a26 	beq	r16,zero,3e00 <__adddf3+0x51c>
    3d58:	0101ffc4 	movi	r4,2047
    3d5c:	11006826 	beq	r2,r4,3f00 <__adddf3+0x61c>
    3d60:	00c7c83a 	sub	r3,zero,r3
    3d64:	42002034 	orhi	r8,r8,128
    3d68:	01000e04 	movi	r4,56
    3d6c:	20c07c16 	blt	r4,r3,3f60 <__adddf3+0x67c>
    3d70:	010007c4 	movi	r4,31
    3d74:	20c0da16 	blt	r4,r3,40e0 <__adddf3+0x7fc>
    3d78:	01000804 	movi	r4,32
    3d7c:	20c9c83a 	sub	r4,r4,r3
    3d80:	4114983a 	sll	r10,r8,r4
    3d84:	88cad83a 	srl	r5,r17,r3
    3d88:	8908983a 	sll	r4,r17,r4
    3d8c:	40c6d83a 	srl	r3,r8,r3
    3d90:	5162b03a 	or	r17,r10,r5
    3d94:	2008c03a 	cmpne	r4,r4,zero
    3d98:	8922b03a 	or	r17,r17,r4
    3d9c:	3463c83a 	sub	r17,r6,r17
    3da0:	48c7c83a 	sub	r3,r9,r3
    3da4:	344d803a 	cmpltu	r6,r6,r17
    3da8:	1991c83a 	sub	r8,r3,r6
    3dac:	1021883a 	mov	r16,r2
    3db0:	3825883a 	mov	r18,r7
    3db4:	003f2706 	br	3a54 <_gp+0xffff5360>
    3db8:	24d0b03a 	or	r8,r4,r19
    3dbc:	40001b1e 	bne	r8,zero,3e2c <__adddf3+0x548>
    3dc0:	0005883a 	mov	r2,zero
    3dc4:	0007883a 	mov	r3,zero
    3dc8:	0021883a 	mov	r16,zero
    3dcc:	003f4d06 	br	3b04 <_gp+0xffff5410>
    3dd0:	008007c4 	movi	r2,31
    3dd4:	11003c16 	blt	r2,r4,3ec8 <__adddf3+0x5e4>
    3dd8:	00800804 	movi	r2,32
    3ddc:	1105c83a 	sub	r2,r2,r4
    3de0:	488e983a 	sll	r7,r9,r2
    3de4:	310ad83a 	srl	r5,r6,r4
    3de8:	3084983a 	sll	r2,r6,r2
    3dec:	4912d83a 	srl	r9,r9,r4
    3df0:	394ab03a 	or	r5,r7,r5
    3df4:	1004c03a 	cmpne	r2,r2,zero
    3df8:	288ab03a 	or	r5,r5,r2
    3dfc:	003f5306 	br	3b4c <_gp+0xffff5458>
    3e00:	4448b03a 	or	r4,r8,r17
    3e04:	20003e26 	beq	r4,zero,3f00 <__adddf3+0x61c>
    3e08:	00c6303a 	nor	r3,zero,r3
    3e0c:	18003a1e 	bne	r3,zero,3ef8 <__adddf3+0x614>
    3e10:	3463c83a 	sub	r17,r6,r17
    3e14:	4a07c83a 	sub	r3,r9,r8
    3e18:	344d803a 	cmpltu	r6,r6,r17
    3e1c:	1991c83a 	sub	r8,r3,r6
    3e20:	1021883a 	mov	r16,r2
    3e24:	3825883a 	mov	r18,r7
    3e28:	003f0a06 	br	3a54 <_gp+0xffff5360>
    3e2c:	2023883a 	mov	r17,r4
    3e30:	003f0d06 	br	3a68 <_gp+0xffff5374>
    3e34:	0081ffc4 	movi	r2,2047
    3e38:	80bf3f1e 	bne	r16,r2,3b38 <_gp+0xffff5444>
    3e3c:	003ec806 	br	3960 <_gp+0xffff526c>
    3e40:	0005883a 	mov	r2,zero
    3e44:	003fb106 	br	3d0c <_gp+0xffff5618>
    3e48:	0007883a 	mov	r3,zero
    3e4c:	003fbc06 	br	3d40 <_gp+0xffff564c>
    3e50:	4444b03a 	or	r2,r8,r17
    3e54:	8000871e 	bne	r16,zero,4074 <__adddf3+0x790>
    3e58:	1000ba26 	beq	r2,zero,4144 <__adddf3+0x860>
    3e5c:	4984b03a 	or	r2,r9,r6
    3e60:	103ebf26 	beq	r2,zero,3960 <_gp+0xffff526c>
    3e64:	8985883a 	add	r2,r17,r6
    3e68:	4247883a 	add	r3,r8,r9
    3e6c:	1451803a 	cmpltu	r8,r2,r17
    3e70:	40d1883a 	add	r8,r8,r3
    3e74:	40c0202c 	andhi	r3,r8,128
    3e78:	1023883a 	mov	r17,r2
    3e7c:	183f1a26 	beq	r3,zero,3ae8 <_gp+0xffff53f4>
    3e80:	00bfe034 	movhi	r2,65408
    3e84:	10bfffc4 	addi	r2,r2,-1
    3e88:	2021883a 	mov	r16,r4
    3e8c:	4090703a 	and	r8,r8,r2
    3e90:	003eb306 	br	3960 <_gp+0xffff526c>
    3e94:	4444b03a 	or	r2,r8,r17
    3e98:	8000291e 	bne	r16,zero,3f40 <__adddf3+0x65c>
    3e9c:	10004b1e 	bne	r2,zero,3fcc <__adddf3+0x6e8>
    3ea0:	4990b03a 	or	r8,r9,r6
    3ea4:	40008b26 	beq	r8,zero,40d4 <__adddf3+0x7f0>
    3ea8:	4811883a 	mov	r8,r9
    3eac:	3023883a 	mov	r17,r6
    3eb0:	3825883a 	mov	r18,r7
    3eb4:	003eaa06 	br	3960 <_gp+0xffff526c>
    3eb8:	1021883a 	mov	r16,r2
    3ebc:	0011883a 	mov	r8,zero
    3ec0:	0005883a 	mov	r2,zero
    3ec4:	003f0f06 	br	3b04 <_gp+0xffff5410>
    3ec8:	217ff804 	addi	r5,r4,-32
    3ecc:	00800804 	movi	r2,32
    3ed0:	494ad83a 	srl	r5,r9,r5
    3ed4:	20807d26 	beq	r4,r2,40cc <__adddf3+0x7e8>
    3ed8:	00801004 	movi	r2,64
    3edc:	1109c83a 	sub	r4,r2,r4
    3ee0:	4912983a 	sll	r9,r9,r4
    3ee4:	498cb03a 	or	r6,r9,r6
    3ee8:	300cc03a 	cmpne	r6,r6,zero
    3eec:	298ab03a 	or	r5,r5,r6
    3ef0:	0013883a 	mov	r9,zero
    3ef4:	003f1506 	br	3b4c <_gp+0xffff5458>
    3ef8:	0101ffc4 	movi	r4,2047
    3efc:	113f9a1e 	bne	r2,r4,3d68 <_gp+0xffff5674>
    3f00:	4811883a 	mov	r8,r9
    3f04:	3023883a 	mov	r17,r6
    3f08:	1021883a 	mov	r16,r2
    3f0c:	3825883a 	mov	r18,r7
    3f10:	003e9306 	br	3960 <_gp+0xffff526c>
    3f14:	8000161e 	bne	r16,zero,3f70 <__adddf3+0x68c>
    3f18:	444ab03a 	or	r5,r8,r17
    3f1c:	28005126 	beq	r5,zero,4064 <__adddf3+0x780>
    3f20:	0108303a 	nor	r4,zero,r4
    3f24:	20004d1e 	bne	r4,zero,405c <__adddf3+0x778>
    3f28:	89a3883a 	add	r17,r17,r6
    3f2c:	4253883a 	add	r9,r8,r9
    3f30:	898d803a 	cmpltu	r6,r17,r6
    3f34:	3251883a 	add	r8,r6,r9
    3f38:	1021883a 	mov	r16,r2
    3f3c:	003f0806 	br	3b60 <_gp+0xffff546c>
    3f40:	1000301e 	bne	r2,zero,4004 <__adddf3+0x720>
    3f44:	4984b03a 	or	r2,r9,r6
    3f48:	10007126 	beq	r2,zero,4110 <__adddf3+0x82c>
    3f4c:	4811883a 	mov	r8,r9
    3f50:	3023883a 	mov	r17,r6
    3f54:	3825883a 	mov	r18,r7
    3f58:	0401ffc4 	movi	r16,2047
    3f5c:	003e8006 	br	3960 <_gp+0xffff526c>
    3f60:	4462b03a 	or	r17,r8,r17
    3f64:	8822c03a 	cmpne	r17,r17,zero
    3f68:	0007883a 	mov	r3,zero
    3f6c:	003f8b06 	br	3d9c <_gp+0xffff56a8>
    3f70:	0141ffc4 	movi	r5,2047
    3f74:	11403b26 	beq	r2,r5,4064 <__adddf3+0x780>
    3f78:	0109c83a 	sub	r4,zero,r4
    3f7c:	42002034 	orhi	r8,r8,128
    3f80:	01400e04 	movi	r5,56
    3f84:	29006716 	blt	r5,r4,4124 <__adddf3+0x840>
    3f88:	014007c4 	movi	r5,31
    3f8c:	29007016 	blt	r5,r4,4150 <__adddf3+0x86c>
    3f90:	01400804 	movi	r5,32
    3f94:	290bc83a 	sub	r5,r5,r4
    3f98:	4154983a 	sll	r10,r8,r5
    3f9c:	890ed83a 	srl	r7,r17,r4
    3fa0:	894a983a 	sll	r5,r17,r5
    3fa4:	4108d83a 	srl	r4,r8,r4
    3fa8:	51e2b03a 	or	r17,r10,r7
    3fac:	280ac03a 	cmpne	r5,r5,zero
    3fb0:	8962b03a 	or	r17,r17,r5
    3fb4:	89a3883a 	add	r17,r17,r6
    3fb8:	2253883a 	add	r9,r4,r9
    3fbc:	898d803a 	cmpltu	r6,r17,r6
    3fc0:	3251883a 	add	r8,r6,r9
    3fc4:	1021883a 	mov	r16,r2
    3fc8:	003ee506 	br	3b60 <_gp+0xffff546c>
    3fcc:	4984b03a 	or	r2,r9,r6
    3fd0:	103e6326 	beq	r2,zero,3960 <_gp+0xffff526c>
    3fd4:	8987c83a 	sub	r3,r17,r6
    3fd8:	88c9803a 	cmpltu	r4,r17,r3
    3fdc:	4245c83a 	sub	r2,r8,r9
    3fe0:	1105c83a 	sub	r2,r2,r4
    3fe4:	1100202c 	andhi	r4,r2,128
    3fe8:	203ebb26 	beq	r4,zero,3ad8 <_gp+0xffff53e4>
    3fec:	3463c83a 	sub	r17,r6,r17
    3ff0:	4a07c83a 	sub	r3,r9,r8
    3ff4:	344d803a 	cmpltu	r6,r6,r17
    3ff8:	1991c83a 	sub	r8,r3,r6
    3ffc:	3825883a 	mov	r18,r7
    4000:	003e5706 	br	3960 <_gp+0xffff526c>
    4004:	4984b03a 	or	r2,r9,r6
    4008:	10002e26 	beq	r2,zero,40c4 <__adddf3+0x7e0>
    400c:	4004d0fa 	srli	r2,r8,3
    4010:	8822d0fa 	srli	r17,r17,3
    4014:	4010977a 	slli	r8,r8,29
    4018:	10c0022c 	andhi	r3,r2,8
    401c:	4462b03a 	or	r17,r8,r17
    4020:	18000826 	beq	r3,zero,4044 <__adddf3+0x760>
    4024:	4808d0fa 	srli	r4,r9,3
    4028:	20c0022c 	andhi	r3,r4,8
    402c:	1800051e 	bne	r3,zero,4044 <__adddf3+0x760>
    4030:	300cd0fa 	srli	r6,r6,3
    4034:	4806977a 	slli	r3,r9,29
    4038:	2005883a 	mov	r2,r4
    403c:	3825883a 	mov	r18,r7
    4040:	19a2b03a 	or	r17,r3,r6
    4044:	8810d77a 	srli	r8,r17,29
    4048:	100490fa 	slli	r2,r2,3
    404c:	882290fa 	slli	r17,r17,3
    4050:	0401ffc4 	movi	r16,2047
    4054:	4090b03a 	or	r8,r8,r2
    4058:	003e4106 	br	3960 <_gp+0xffff526c>
    405c:	0141ffc4 	movi	r5,2047
    4060:	117fc71e 	bne	r2,r5,3f80 <_gp+0xffff588c>
    4064:	4811883a 	mov	r8,r9
    4068:	3023883a 	mov	r17,r6
    406c:	1021883a 	mov	r16,r2
    4070:	003e3b06 	br	3960 <_gp+0xffff526c>
    4074:	10002f26 	beq	r2,zero,4134 <__adddf3+0x850>
    4078:	4984b03a 	or	r2,r9,r6
    407c:	10001126 	beq	r2,zero,40c4 <__adddf3+0x7e0>
    4080:	4004d0fa 	srli	r2,r8,3
    4084:	8822d0fa 	srli	r17,r17,3
    4088:	4010977a 	slli	r8,r8,29
    408c:	10c0022c 	andhi	r3,r2,8
    4090:	4462b03a 	or	r17,r8,r17
    4094:	183feb26 	beq	r3,zero,4044 <_gp+0xffff5950>
    4098:	4808d0fa 	srli	r4,r9,3
    409c:	20c0022c 	andhi	r3,r4,8
    40a0:	183fe81e 	bne	r3,zero,4044 <_gp+0xffff5950>
    40a4:	300cd0fa 	srli	r6,r6,3
    40a8:	4806977a 	slli	r3,r9,29
    40ac:	2005883a 	mov	r2,r4
    40b0:	19a2b03a 	or	r17,r3,r6
    40b4:	003fe306 	br	4044 <_gp+0xffff5950>
    40b8:	0011883a 	mov	r8,zero
    40bc:	0005883a 	mov	r2,zero
    40c0:	003e3f06 	br	39c0 <_gp+0xffff52cc>
    40c4:	0401ffc4 	movi	r16,2047
    40c8:	003e2506 	br	3960 <_gp+0xffff526c>
    40cc:	0013883a 	mov	r9,zero
    40d0:	003f8406 	br	3ee4 <_gp+0xffff57f0>
    40d4:	0005883a 	mov	r2,zero
    40d8:	0007883a 	mov	r3,zero
    40dc:	003e8906 	br	3b04 <_gp+0xffff5410>
    40e0:	197ff804 	addi	r5,r3,-32
    40e4:	01000804 	movi	r4,32
    40e8:	414ad83a 	srl	r5,r8,r5
    40ec:	19002426 	beq	r3,r4,4180 <__adddf3+0x89c>
    40f0:	01001004 	movi	r4,64
    40f4:	20c7c83a 	sub	r3,r4,r3
    40f8:	40c6983a 	sll	r3,r8,r3
    40fc:	1c46b03a 	or	r3,r3,r17
    4100:	1806c03a 	cmpne	r3,r3,zero
    4104:	28e2b03a 	or	r17,r5,r3
    4108:	0007883a 	mov	r3,zero
    410c:	003f2306 	br	3d9c <_gp+0xffff56a8>
    4110:	0007883a 	mov	r3,zero
    4114:	5811883a 	mov	r8,r11
    4118:	00bfffc4 	movi	r2,-1
    411c:	0401ffc4 	movi	r16,2047
    4120:	003e7806 	br	3b04 <_gp+0xffff5410>
    4124:	4462b03a 	or	r17,r8,r17
    4128:	8822c03a 	cmpne	r17,r17,zero
    412c:	0009883a 	mov	r4,zero
    4130:	003fa006 	br	3fb4 <_gp+0xffff58c0>
    4134:	4811883a 	mov	r8,r9
    4138:	3023883a 	mov	r17,r6
    413c:	0401ffc4 	movi	r16,2047
    4140:	003e0706 	br	3960 <_gp+0xffff526c>
    4144:	4811883a 	mov	r8,r9
    4148:	3023883a 	mov	r17,r6
    414c:	003e0406 	br	3960 <_gp+0xffff526c>
    4150:	21fff804 	addi	r7,r4,-32
    4154:	01400804 	movi	r5,32
    4158:	41ced83a 	srl	r7,r8,r7
    415c:	21400a26 	beq	r4,r5,4188 <__adddf3+0x8a4>
    4160:	01401004 	movi	r5,64
    4164:	2909c83a 	sub	r4,r5,r4
    4168:	4108983a 	sll	r4,r8,r4
    416c:	2448b03a 	or	r4,r4,r17
    4170:	2008c03a 	cmpne	r4,r4,zero
    4174:	3922b03a 	or	r17,r7,r4
    4178:	0009883a 	mov	r4,zero
    417c:	003f8d06 	br	3fb4 <_gp+0xffff58c0>
    4180:	0007883a 	mov	r3,zero
    4184:	003fdd06 	br	40fc <_gp+0xffff5a08>
    4188:	0009883a 	mov	r4,zero
    418c:	003ff706 	br	416c <_gp+0xffff5a78>

00004190 <__divdf3>:
    4190:	defff004 	addi	sp,sp,-64
    4194:	dc800815 	stw	r18,32(sp)
    4198:	2824d53a 	srli	r18,r5,20
    419c:	dd800c15 	stw	r22,48(sp)
    41a0:	282cd7fa 	srli	r22,r5,31
    41a4:	dc000615 	stw	r16,24(sp)
    41a8:	04000434 	movhi	r16,16
    41ac:	843fffc4 	addi	r16,r16,-1
    41b0:	dfc00f15 	stw	ra,60(sp)
    41b4:	df000e15 	stw	fp,56(sp)
    41b8:	ddc00d15 	stw	r23,52(sp)
    41bc:	dd400b15 	stw	r21,44(sp)
    41c0:	dd000a15 	stw	r20,40(sp)
    41c4:	dcc00915 	stw	r19,36(sp)
    41c8:	dc400715 	stw	r17,28(sp)
    41cc:	9481ffcc 	andi	r18,r18,2047
    41d0:	2c20703a 	and	r16,r5,r16
    41d4:	b2003fcc 	andi	r8,r22,255
    41d8:	90006126 	beq	r18,zero,4360 <__divdf3+0x1d0>
    41dc:	0081ffc4 	movi	r2,2047
    41e0:	202b883a 	mov	r21,r4
    41e4:	90803726 	beq	r18,r2,42c4 <__divdf3+0x134>
    41e8:	80800434 	orhi	r2,r16,16
    41ec:	100490fa 	slli	r2,r2,3
    41f0:	2020d77a 	srli	r16,r4,29
    41f4:	202a90fa 	slli	r21,r4,3
    41f8:	94bf0044 	addi	r18,r18,-1023
    41fc:	80a0b03a 	or	r16,r16,r2
    4200:	0013883a 	mov	r9,zero
    4204:	000b883a 	mov	r5,zero
    4208:	3806d53a 	srli	r3,r7,20
    420c:	382ed7fa 	srli	r23,r7,31
    4210:	04400434 	movhi	r17,16
    4214:	8c7fffc4 	addi	r17,r17,-1
    4218:	18c1ffcc 	andi	r3,r3,2047
    421c:	3029883a 	mov	r20,r6
    4220:	3c62703a 	and	r17,r7,r17
    4224:	bf003fcc 	andi	fp,r23,255
    4228:	18006e26 	beq	r3,zero,43e4 <__divdf3+0x254>
    422c:	0081ffc4 	movi	r2,2047
    4230:	18806626 	beq	r3,r2,43cc <__divdf3+0x23c>
    4234:	88800434 	orhi	r2,r17,16
    4238:	100490fa 	slli	r2,r2,3
    423c:	3022d77a 	srli	r17,r6,29
    4240:	302890fa 	slli	r20,r6,3
    4244:	18ff0044 	addi	r3,r3,-1023
    4248:	88a2b03a 	or	r17,r17,r2
    424c:	000f883a 	mov	r7,zero
    4250:	b5e6f03a 	xor	r19,r22,r23
    4254:	3a4cb03a 	or	r6,r7,r9
    4258:	008003c4 	movi	r2,15
    425c:	9809883a 	mov	r4,r19
    4260:	90c7c83a 	sub	r3,r18,r3
    4264:	9cc03fcc 	andi	r19,r19,255
    4268:	11809636 	bltu	r2,r6,44c4 <__divdf3+0x334>
    426c:	300c90ba 	slli	r6,r6,2
    4270:	00800034 	movhi	r2,0
    4274:	1090a104 	addi	r2,r2,17028
    4278:	308d883a 	add	r6,r6,r2
    427c:	30800017 	ldw	r2,0(r6)
    4280:	1000683a 	jmp	r2
    4284:	000044c4 	movi	zero,275
    4288:	000042fc 	xorhi	zero,zero,267
    428c:	000044b4 	movhi	zero,274
    4290:	000042f0 	cmpltui	zero,zero,267
    4294:	000044b4 	movhi	zero,274
    4298:	00004488 	cmpgei	zero,zero,274
    429c:	000044b4 	movhi	zero,274
    42a0:	000042f0 	cmpltui	zero,zero,267
    42a4:	000042fc 	xorhi	zero,zero,267
    42a8:	000042fc 	xorhi	zero,zero,267
    42ac:	00004488 	cmpgei	zero,zero,274
    42b0:	000042f0 	cmpltui	zero,zero,267
    42b4:	000042e0 	cmpeqi	zero,zero,267
    42b8:	000042e0 	cmpeqi	zero,zero,267
    42bc:	000042e0 	cmpeqi	zero,zero,267
    42c0:	0000484c 	andi	zero,zero,289
    42c4:	2404b03a 	or	r2,r4,r16
    42c8:	10006c1e 	bne	r2,zero,447c <__divdf3+0x2ec>
    42cc:	02400204 	movi	r9,8
    42d0:	0021883a 	mov	r16,zero
    42d4:	002b883a 	mov	r21,zero
    42d8:	01400084 	movi	r5,2
    42dc:	003fca06 	br	4208 <_gp+0xffff5b14>
    42e0:	8023883a 	mov	r17,r16
    42e4:	a829883a 	mov	r20,r21
    42e8:	4039883a 	mov	fp,r8
    42ec:	280f883a 	mov	r7,r5
    42f0:	00800084 	movi	r2,2
    42f4:	3881601e 	bne	r7,r2,4878 <__divdf3+0x6e8>
    42f8:	e027883a 	mov	r19,fp
    42fc:	9900004c 	andi	r4,r19,1
    4300:	0081ffc4 	movi	r2,2047
    4304:	0021883a 	mov	r16,zero
    4308:	002b883a 	mov	r21,zero
    430c:	1004953a 	slli	r2,r2,20
    4310:	20c03fcc 	andi	r3,r4,255
    4314:	01400434 	movhi	r5,16
    4318:	297fffc4 	addi	r5,r5,-1
    431c:	180697fa 	slli	r3,r3,31
    4320:	8160703a 	and	r16,r16,r5
    4324:	80a0b03a 	or	r16,r16,r2
    4328:	80c6b03a 	or	r3,r16,r3
    432c:	a805883a 	mov	r2,r21
    4330:	dfc00f17 	ldw	ra,60(sp)
    4334:	df000e17 	ldw	fp,56(sp)
    4338:	ddc00d17 	ldw	r23,52(sp)
    433c:	dd800c17 	ldw	r22,48(sp)
    4340:	dd400b17 	ldw	r21,44(sp)
    4344:	dd000a17 	ldw	r20,40(sp)
    4348:	dcc00917 	ldw	r19,36(sp)
    434c:	dc800817 	ldw	r18,32(sp)
    4350:	dc400717 	ldw	r17,28(sp)
    4354:	dc000617 	ldw	r16,24(sp)
    4358:	dec01004 	addi	sp,sp,64
    435c:	f800283a 	ret
    4360:	2404b03a 	or	r2,r4,r16
    4364:	2023883a 	mov	r17,r4
    4368:	10003f26 	beq	r2,zero,4468 <__divdf3+0x2d8>
    436c:	80015e26 	beq	r16,zero,48e8 <__divdf3+0x758>
    4370:	8009883a 	mov	r4,r16
    4374:	d9800215 	stw	r6,8(sp)
    4378:	d9c00515 	stw	r7,20(sp)
    437c:	da000415 	stw	r8,16(sp)
    4380:	00061240 	call	6124 <__clzsi2>
    4384:	d9800217 	ldw	r6,8(sp)
    4388:	d9c00517 	ldw	r7,20(sp)
    438c:	da000417 	ldw	r8,16(sp)
    4390:	113ffd44 	addi	r4,r2,-11
    4394:	00c00704 	movi	r3,28
    4398:	19014f16 	blt	r3,r4,48d8 <__divdf3+0x748>
    439c:	00c00744 	movi	r3,29
    43a0:	157ffe04 	addi	r21,r2,-8
    43a4:	1907c83a 	sub	r3,r3,r4
    43a8:	8560983a 	sll	r16,r16,r21
    43ac:	88c6d83a 	srl	r3,r17,r3
    43b0:	8d6a983a 	sll	r21,r17,r21
    43b4:	1c20b03a 	or	r16,r3,r16
    43b8:	1080fcc4 	addi	r2,r2,1011
    43bc:	00a5c83a 	sub	r18,zero,r2
    43c0:	0013883a 	mov	r9,zero
    43c4:	000b883a 	mov	r5,zero
    43c8:	003f8f06 	br	4208 <_gp+0xffff5b14>
    43cc:	3444b03a 	or	r2,r6,r17
    43d0:	1000231e 	bne	r2,zero,4460 <__divdf3+0x2d0>
    43d4:	0023883a 	mov	r17,zero
    43d8:	0029883a 	mov	r20,zero
    43dc:	01c00084 	movi	r7,2
    43e0:	003f9b06 	br	4250 <_gp+0xffff5b5c>
    43e4:	3444b03a 	or	r2,r6,r17
    43e8:	10001926 	beq	r2,zero,4450 <__divdf3+0x2c0>
    43ec:	88014b26 	beq	r17,zero,491c <__divdf3+0x78c>
    43f0:	8809883a 	mov	r4,r17
    43f4:	d9400115 	stw	r5,4(sp)
    43f8:	d9800215 	stw	r6,8(sp)
    43fc:	da000415 	stw	r8,16(sp)
    4400:	da400315 	stw	r9,12(sp)
    4404:	00061240 	call	6124 <__clzsi2>
    4408:	d9400117 	ldw	r5,4(sp)
    440c:	d9800217 	ldw	r6,8(sp)
    4410:	da000417 	ldw	r8,16(sp)
    4414:	da400317 	ldw	r9,12(sp)
    4418:	113ffd44 	addi	r4,r2,-11
    441c:	00c00704 	movi	r3,28
    4420:	19013a16 	blt	r3,r4,490c <__divdf3+0x77c>
    4424:	00c00744 	movi	r3,29
    4428:	153ffe04 	addi	r20,r2,-8
    442c:	1907c83a 	sub	r3,r3,r4
    4430:	8d22983a 	sll	r17,r17,r20
    4434:	30c6d83a 	srl	r3,r6,r3
    4438:	3528983a 	sll	r20,r6,r20
    443c:	1c62b03a 	or	r17,r3,r17
    4440:	1080fcc4 	addi	r2,r2,1011
    4444:	0087c83a 	sub	r3,zero,r2
    4448:	000f883a 	mov	r7,zero
    444c:	003f8006 	br	4250 <_gp+0xffff5b5c>
    4450:	0023883a 	mov	r17,zero
    4454:	0029883a 	mov	r20,zero
    4458:	01c00044 	movi	r7,1
    445c:	003f7c06 	br	4250 <_gp+0xffff5b5c>
    4460:	01c000c4 	movi	r7,3
    4464:	003f7a06 	br	4250 <_gp+0xffff5b5c>
    4468:	02400104 	movi	r9,4
    446c:	0021883a 	mov	r16,zero
    4470:	002b883a 	mov	r21,zero
    4474:	01400044 	movi	r5,1
    4478:	003f6306 	br	4208 <_gp+0xffff5b14>
    447c:	02400304 	movi	r9,12
    4480:	014000c4 	movi	r5,3
    4484:	003f6006 	br	4208 <_gp+0xffff5b14>
    4488:	04000434 	movhi	r16,16
    448c:	0009883a 	mov	r4,zero
    4490:	843fffc4 	addi	r16,r16,-1
    4494:	057fffc4 	movi	r21,-1
    4498:	0081ffc4 	movi	r2,2047
    449c:	003f9b06 	br	430c <_gp+0xffff5c18>
    44a0:	00c00044 	movi	r3,1
    44a4:	1887c83a 	sub	r3,r3,r2
    44a8:	01000e04 	movi	r4,56
    44ac:	20c1530e 	bge	r4,r3,49fc <__divdf3+0x86c>
    44b0:	9900004c 	andi	r4,r19,1
    44b4:	0005883a 	mov	r2,zero
    44b8:	0021883a 	mov	r16,zero
    44bc:	002b883a 	mov	r21,zero
    44c0:	003f9206 	br	430c <_gp+0xffff5c18>
    44c4:	8c012e36 	bltu	r17,r16,4980 <__divdf3+0x7f0>
    44c8:	84412c26 	beq	r16,r17,497c <__divdf3+0x7ec>
    44cc:	a82f883a 	mov	r23,r21
    44d0:	18ffffc4 	addi	r3,r3,-1
    44d4:	002b883a 	mov	r21,zero
    44d8:	a004d63a 	srli	r2,r20,24
    44dc:	8822923a 	slli	r17,r17,8
    44e0:	a028923a 	slli	r20,r20,8
    44e4:	8009883a 	mov	r4,r16
    44e8:	88acb03a 	or	r22,r17,r2
    44ec:	dd000015 	stw	r20,0(sp)
    44f0:	b028d43a 	srli	r20,r22,16
    44f4:	d8c00215 	stw	r3,8(sp)
    44f8:	b4bfffcc 	andi	r18,r22,65535
    44fc:	a00b883a 	mov	r5,r20
    4500:	0002e180 	call	2e18 <__udivsi3>
    4504:	100b883a 	mov	r5,r2
    4508:	9009883a 	mov	r4,r18
    450c:	1023883a 	mov	r17,r2
    4510:	0002ed40 	call	2ed4 <__mulsi3>
    4514:	8009883a 	mov	r4,r16
    4518:	a00b883a 	mov	r5,r20
    451c:	1039883a 	mov	fp,r2
    4520:	0002e7c0 	call	2e7c <__umodsi3>
    4524:	1004943a 	slli	r2,r2,16
    4528:	b808d43a 	srli	r4,r23,16
    452c:	d8c00217 	ldw	r3,8(sp)
    4530:	2084b03a 	or	r2,r4,r2
    4534:	1700062e 	bgeu	r2,fp,4550 <__divdf3+0x3c0>
    4538:	1585883a 	add	r2,r2,r22
    453c:	893fffc4 	addi	r4,r17,-1
    4540:	15811d36 	bltu	r2,r22,49b8 <__divdf3+0x828>
    4544:	17011c2e 	bgeu	r2,fp,49b8 <__divdf3+0x828>
    4548:	8c7fff84 	addi	r17,r17,-2
    454c:	1585883a 	add	r2,r2,r22
    4550:	1739c83a 	sub	fp,r2,fp
    4554:	a00b883a 	mov	r5,r20
    4558:	e009883a 	mov	r4,fp
    455c:	d8c00215 	stw	r3,8(sp)
    4560:	0002e180 	call	2e18 <__udivsi3>
    4564:	100b883a 	mov	r5,r2
    4568:	9009883a 	mov	r4,r18
    456c:	1021883a 	mov	r16,r2
    4570:	0002ed40 	call	2ed4 <__mulsi3>
    4574:	a00b883a 	mov	r5,r20
    4578:	e009883a 	mov	r4,fp
    457c:	d8800415 	stw	r2,16(sp)
    4580:	0002e7c0 	call	2e7c <__umodsi3>
    4584:	1004943a 	slli	r2,r2,16
    4588:	da000417 	ldw	r8,16(sp)
    458c:	bdffffcc 	andi	r23,r23,65535
    4590:	b884b03a 	or	r2,r23,r2
    4594:	d8c00217 	ldw	r3,8(sp)
    4598:	1200062e 	bgeu	r2,r8,45b4 <__divdf3+0x424>
    459c:	1585883a 	add	r2,r2,r22
    45a0:	813fffc4 	addi	r4,r16,-1
    45a4:	15810236 	bltu	r2,r22,49b0 <__divdf3+0x820>
    45a8:	1201012e 	bgeu	r2,r8,49b0 <__divdf3+0x820>
    45ac:	843fff84 	addi	r16,r16,-2
    45b0:	1585883a 	add	r2,r2,r22
    45b4:	8822943a 	slli	r17,r17,16
    45b8:	d9800017 	ldw	r6,0(sp)
    45bc:	1211c83a 	sub	r8,r2,r8
    45c0:	8c22b03a 	or	r17,r17,r16
    45c4:	373fffcc 	andi	fp,r6,65535
    45c8:	8abfffcc 	andi	r10,r17,65535
    45cc:	8820d43a 	srli	r16,r17,16
    45d0:	5009883a 	mov	r4,r10
    45d4:	e00b883a 	mov	r5,fp
    45d8:	302ed43a 	srli	r23,r6,16
    45dc:	d8c00215 	stw	r3,8(sp)
    45e0:	da000415 	stw	r8,16(sp)
    45e4:	da800115 	stw	r10,4(sp)
    45e8:	0002ed40 	call	2ed4 <__mulsi3>
    45ec:	800b883a 	mov	r5,r16
    45f0:	e009883a 	mov	r4,fp
    45f4:	d8800515 	stw	r2,20(sp)
    45f8:	0002ed40 	call	2ed4 <__mulsi3>
    45fc:	8009883a 	mov	r4,r16
    4600:	b80b883a 	mov	r5,r23
    4604:	d8800315 	stw	r2,12(sp)
    4608:	0002ed40 	call	2ed4 <__mulsi3>
    460c:	da800117 	ldw	r10,4(sp)
    4610:	b80b883a 	mov	r5,r23
    4614:	1021883a 	mov	r16,r2
    4618:	5009883a 	mov	r4,r10
    461c:	0002ed40 	call	2ed4 <__mulsi3>
    4620:	d9c00517 	ldw	r7,20(sp)
    4624:	da400317 	ldw	r9,12(sp)
    4628:	d8c00217 	ldw	r3,8(sp)
    462c:	3808d43a 	srli	r4,r7,16
    4630:	1245883a 	add	r2,r2,r9
    4634:	da000417 	ldw	r8,16(sp)
    4638:	2085883a 	add	r2,r4,r2
    463c:	1240022e 	bgeu	r2,r9,4648 <__divdf3+0x4b8>
    4640:	01000074 	movhi	r4,1
    4644:	8121883a 	add	r16,r16,r4
    4648:	1008d43a 	srli	r4,r2,16
    464c:	1004943a 	slli	r2,r2,16
    4650:	39ffffcc 	andi	r7,r7,65535
    4654:	2409883a 	add	r4,r4,r16
    4658:	11c5883a 	add	r2,r2,r7
    465c:	4100bb36 	bltu	r8,r4,494c <__divdf3+0x7bc>
    4660:	4100d726 	beq	r8,r4,49c0 <__divdf3+0x830>
    4664:	4109c83a 	sub	r4,r8,r4
    4668:	a8a1c83a 	sub	r16,r21,r2
    466c:	ac2b803a 	cmpltu	r21,r21,r16
    4670:	256bc83a 	sub	r21,r4,r21
    4674:	b540d926 	beq	r22,r21,49dc <__divdf3+0x84c>
    4678:	a00b883a 	mov	r5,r20
    467c:	a809883a 	mov	r4,r21
    4680:	d8c00215 	stw	r3,8(sp)
    4684:	0002e180 	call	2e18 <__udivsi3>
    4688:	100b883a 	mov	r5,r2
    468c:	9009883a 	mov	r4,r18
    4690:	d8800515 	stw	r2,20(sp)
    4694:	0002ed40 	call	2ed4 <__mulsi3>
    4698:	a809883a 	mov	r4,r21
    469c:	a00b883a 	mov	r5,r20
    46a0:	d8800415 	stw	r2,16(sp)
    46a4:	0002e7c0 	call	2e7c <__umodsi3>
    46a8:	1004943a 	slli	r2,r2,16
    46ac:	8008d43a 	srli	r4,r16,16
    46b0:	da000417 	ldw	r8,16(sp)
    46b4:	d8c00217 	ldw	r3,8(sp)
    46b8:	2084b03a 	or	r2,r4,r2
    46bc:	d9c00517 	ldw	r7,20(sp)
    46c0:	1200062e 	bgeu	r2,r8,46dc <__divdf3+0x54c>
    46c4:	1585883a 	add	r2,r2,r22
    46c8:	393fffc4 	addi	r4,r7,-1
    46cc:	1580c536 	bltu	r2,r22,49e4 <__divdf3+0x854>
    46d0:	1200c42e 	bgeu	r2,r8,49e4 <__divdf3+0x854>
    46d4:	39ffff84 	addi	r7,r7,-2
    46d8:	1585883a 	add	r2,r2,r22
    46dc:	122bc83a 	sub	r21,r2,r8
    46e0:	a00b883a 	mov	r5,r20
    46e4:	a809883a 	mov	r4,r21
    46e8:	d8c00215 	stw	r3,8(sp)
    46ec:	d9c00515 	stw	r7,20(sp)
    46f0:	0002e180 	call	2e18 <__udivsi3>
    46f4:	9009883a 	mov	r4,r18
    46f8:	100b883a 	mov	r5,r2
    46fc:	d8800415 	stw	r2,16(sp)
    4700:	0002ed40 	call	2ed4 <__mulsi3>
    4704:	a809883a 	mov	r4,r21
    4708:	a00b883a 	mov	r5,r20
    470c:	1025883a 	mov	r18,r2
    4710:	0002e7c0 	call	2e7c <__umodsi3>
    4714:	1004943a 	slli	r2,r2,16
    4718:	813fffcc 	andi	r4,r16,65535
    471c:	d8c00217 	ldw	r3,8(sp)
    4720:	20a0b03a 	or	r16,r4,r2
    4724:	d9c00517 	ldw	r7,20(sp)
    4728:	da000417 	ldw	r8,16(sp)
    472c:	8480062e 	bgeu	r16,r18,4748 <__divdf3+0x5b8>
    4730:	85a1883a 	add	r16,r16,r22
    4734:	40bfffc4 	addi	r2,r8,-1
    4738:	8580ac36 	bltu	r16,r22,49ec <__divdf3+0x85c>
    473c:	8480ab2e 	bgeu	r16,r18,49ec <__divdf3+0x85c>
    4740:	423fff84 	addi	r8,r8,-2
    4744:	85a1883a 	add	r16,r16,r22
    4748:	3804943a 	slli	r2,r7,16
    474c:	84a1c83a 	sub	r16,r16,r18
    4750:	e009883a 	mov	r4,fp
    4754:	1228b03a 	or	r20,r2,r8
    4758:	a1ffffcc 	andi	r7,r20,65535
    475c:	a024d43a 	srli	r18,r20,16
    4760:	380b883a 	mov	r5,r7
    4764:	d8c00215 	stw	r3,8(sp)
    4768:	d9c00515 	stw	r7,20(sp)
    476c:	0002ed40 	call	2ed4 <__mulsi3>
    4770:	900b883a 	mov	r5,r18
    4774:	e009883a 	mov	r4,fp
    4778:	102b883a 	mov	r21,r2
    477c:	0002ed40 	call	2ed4 <__mulsi3>
    4780:	900b883a 	mov	r5,r18
    4784:	b809883a 	mov	r4,r23
    4788:	1039883a 	mov	fp,r2
    478c:	0002ed40 	call	2ed4 <__mulsi3>
    4790:	d9c00517 	ldw	r7,20(sp)
    4794:	b80b883a 	mov	r5,r23
    4798:	1025883a 	mov	r18,r2
    479c:	3809883a 	mov	r4,r7
    47a0:	0002ed40 	call	2ed4 <__mulsi3>
    47a4:	a808d43a 	srli	r4,r21,16
    47a8:	1705883a 	add	r2,r2,fp
    47ac:	d8c00217 	ldw	r3,8(sp)
    47b0:	2085883a 	add	r2,r4,r2
    47b4:	1700022e 	bgeu	r2,fp,47c0 <__divdf3+0x630>
    47b8:	01000074 	movhi	r4,1
    47bc:	9125883a 	add	r18,r18,r4
    47c0:	1008d43a 	srli	r4,r2,16
    47c4:	1004943a 	slli	r2,r2,16
    47c8:	ad7fffcc 	andi	r21,r21,65535
    47cc:	2489883a 	add	r4,r4,r18
    47d0:	1545883a 	add	r2,r2,r21
    47d4:	81003836 	bltu	r16,r4,48b8 <__divdf3+0x728>
    47d8:	81003626 	beq	r16,r4,48b4 <__divdf3+0x724>
    47dc:	a5000054 	ori	r20,r20,1
    47e0:	1880ffc4 	addi	r2,r3,1023
    47e4:	00bf2e0e 	bge	zero,r2,44a0 <_gp+0xffff5dac>
    47e8:	a10001cc 	andi	r4,r20,7
    47ec:	20000726 	beq	r4,zero,480c <__divdf3+0x67c>
    47f0:	a10003cc 	andi	r4,r20,15
    47f4:	01400104 	movi	r5,4
    47f8:	21400426 	beq	r4,r5,480c <__divdf3+0x67c>
    47fc:	a149883a 	add	r4,r20,r5
    4800:	2529803a 	cmpltu	r20,r4,r20
    4804:	8d23883a 	add	r17,r17,r20
    4808:	2029883a 	mov	r20,r4
    480c:	8900402c 	andhi	r4,r17,256
    4810:	20000426 	beq	r4,zero,4824 <__divdf3+0x694>
    4814:	18810004 	addi	r2,r3,1024
    4818:	00ffc034 	movhi	r3,65280
    481c:	18ffffc4 	addi	r3,r3,-1
    4820:	88e2703a 	and	r17,r17,r3
    4824:	00c1ff84 	movi	r3,2046
    4828:	18beb416 	blt	r3,r2,42fc <_gp+0xffff5c08>
    482c:	a028d0fa 	srli	r20,r20,3
    4830:	882a977a 	slli	r21,r17,29
    4834:	8820927a 	slli	r16,r17,9
    4838:	1081ffcc 	andi	r2,r2,2047
    483c:	ad2ab03a 	or	r21,r21,r20
    4840:	8020d33a 	srli	r16,r16,12
    4844:	9900004c 	andi	r4,r19,1
    4848:	003eb006 	br	430c <_gp+0xffff5c18>
    484c:	8080022c 	andhi	r2,r16,8
    4850:	10001226 	beq	r2,zero,489c <__divdf3+0x70c>
    4854:	8880022c 	andhi	r2,r17,8
    4858:	1000101e 	bne	r2,zero,489c <__divdf3+0x70c>
    485c:	00800434 	movhi	r2,16
    4860:	8c000234 	orhi	r16,r17,8
    4864:	10bfffc4 	addi	r2,r2,-1
    4868:	b809883a 	mov	r4,r23
    486c:	80a0703a 	and	r16,r16,r2
    4870:	a02b883a 	mov	r21,r20
    4874:	003f0806 	br	4498 <_gp+0xffff5da4>
    4878:	008000c4 	movi	r2,3
    487c:	3880b126 	beq	r7,r2,4b44 <__divdf3+0x9b4>
    4880:	00800044 	movi	r2,1
    4884:	38805b1e 	bne	r7,r2,49f4 <__divdf3+0x864>
    4888:	e009883a 	mov	r4,fp
    488c:	0005883a 	mov	r2,zero
    4890:	0021883a 	mov	r16,zero
    4894:	002b883a 	mov	r21,zero
    4898:	003e9c06 	br	430c <_gp+0xffff5c18>
    489c:	00800434 	movhi	r2,16
    48a0:	84000234 	orhi	r16,r16,8
    48a4:	10bfffc4 	addi	r2,r2,-1
    48a8:	b009883a 	mov	r4,r22
    48ac:	80a0703a 	and	r16,r16,r2
    48b0:	003ef906 	br	4498 <_gp+0xffff5da4>
    48b4:	103fca26 	beq	r2,zero,47e0 <_gp+0xffff60ec>
    48b8:	b421883a 	add	r16,r22,r16
    48bc:	a17fffc4 	addi	r5,r20,-1
    48c0:	8580422e 	bgeu	r16,r22,49cc <__divdf3+0x83c>
    48c4:	2829883a 	mov	r20,r5
    48c8:	813fc41e 	bne	r16,r4,47dc <_gp+0xffff60e8>
    48cc:	d9800017 	ldw	r6,0(sp)
    48d0:	30bfc21e 	bne	r6,r2,47dc <_gp+0xffff60e8>
    48d4:	003fc206 	br	47e0 <_gp+0xffff60ec>
    48d8:	143ff604 	addi	r16,r2,-40
    48dc:	8c20983a 	sll	r16,r17,r16
    48e0:	002b883a 	mov	r21,zero
    48e4:	003eb406 	br	43b8 <_gp+0xffff5cc4>
    48e8:	d9800215 	stw	r6,8(sp)
    48ec:	d9c00515 	stw	r7,20(sp)
    48f0:	da000415 	stw	r8,16(sp)
    48f4:	00061240 	call	6124 <__clzsi2>
    48f8:	10800804 	addi	r2,r2,32
    48fc:	da000417 	ldw	r8,16(sp)
    4900:	d9c00517 	ldw	r7,20(sp)
    4904:	d9800217 	ldw	r6,8(sp)
    4908:	003ea106 	br	4390 <_gp+0xffff5c9c>
    490c:	147ff604 	addi	r17,r2,-40
    4910:	3462983a 	sll	r17,r6,r17
    4914:	0029883a 	mov	r20,zero
    4918:	003ec906 	br	4440 <_gp+0xffff5d4c>
    491c:	3009883a 	mov	r4,r6
    4920:	d9400115 	stw	r5,4(sp)
    4924:	d9800215 	stw	r6,8(sp)
    4928:	da000415 	stw	r8,16(sp)
    492c:	da400315 	stw	r9,12(sp)
    4930:	00061240 	call	6124 <__clzsi2>
    4934:	10800804 	addi	r2,r2,32
    4938:	da400317 	ldw	r9,12(sp)
    493c:	da000417 	ldw	r8,16(sp)
    4940:	d9800217 	ldw	r6,8(sp)
    4944:	d9400117 	ldw	r5,4(sp)
    4948:	003eb306 	br	4418 <_gp+0xffff5d24>
    494c:	d9800017 	ldw	r6,0(sp)
    4950:	a9ab883a 	add	r21,r21,r6
    4954:	a98b803a 	cmpltu	r5,r21,r6
    4958:	2d8b883a 	add	r5,r5,r22
    495c:	2a11883a 	add	r8,r5,r8
    4960:	897fffc4 	addi	r5,r17,-1
    4964:	b2000c2e 	bgeu	r22,r8,4998 <__divdf3+0x808>
    4968:	41003f36 	bltu	r8,r4,4a68 <__divdf3+0x8d8>
    496c:	22006c26 	beq	r4,r8,4b20 <__divdf3+0x990>
    4970:	4109c83a 	sub	r4,r8,r4
    4974:	2823883a 	mov	r17,r5
    4978:	003f3b06 	br	4668 <_gp+0xffff5f74>
    497c:	ad3ed336 	bltu	r21,r20,44cc <_gp+0xffff5dd8>
    4980:	a804d07a 	srli	r2,r21,1
    4984:	802e97fa 	slli	r23,r16,31
    4988:	a82a97fa 	slli	r21,r21,31
    498c:	8020d07a 	srli	r16,r16,1
    4990:	b8aeb03a 	or	r23,r23,r2
    4994:	003ed006 	br	44d8 <_gp+0xffff5de4>
    4998:	b23ff51e 	bne	r22,r8,4970 <_gp+0xffff627c>
    499c:	d9800017 	ldw	r6,0(sp)
    49a0:	a9bff12e 	bgeu	r21,r6,4968 <_gp+0xffff6274>
    49a4:	b109c83a 	sub	r4,r22,r4
    49a8:	2823883a 	mov	r17,r5
    49ac:	003f2e06 	br	4668 <_gp+0xffff5f74>
    49b0:	2021883a 	mov	r16,r4
    49b4:	003eff06 	br	45b4 <_gp+0xffff5ec0>
    49b8:	2023883a 	mov	r17,r4
    49bc:	003ee406 	br	4550 <_gp+0xffff5e5c>
    49c0:	a8bfe236 	bltu	r21,r2,494c <_gp+0xffff6258>
    49c4:	0009883a 	mov	r4,zero
    49c8:	003f2706 	br	4668 <_gp+0xffff5f74>
    49cc:	81002d36 	bltu	r16,r4,4a84 <__divdf3+0x8f4>
    49d0:	24005626 	beq	r4,r16,4b2c <__divdf3+0x99c>
    49d4:	2829883a 	mov	r20,r5
    49d8:	003f8006 	br	47dc <_gp+0xffff60e8>
    49dc:	053fffc4 	movi	r20,-1
    49e0:	003f7f06 	br	47e0 <_gp+0xffff60ec>
    49e4:	200f883a 	mov	r7,r4
    49e8:	003f3c06 	br	46dc <_gp+0xffff5fe8>
    49ec:	1011883a 	mov	r8,r2
    49f0:	003f5506 	br	4748 <_gp+0xffff6054>
    49f4:	e027883a 	mov	r19,fp
    49f8:	003f7906 	br	47e0 <_gp+0xffff60ec>
    49fc:	010007c4 	movi	r4,31
    4a00:	20c02816 	blt	r4,r3,4aa4 <__divdf3+0x914>
    4a04:	00800804 	movi	r2,32
    4a08:	10c5c83a 	sub	r2,r2,r3
    4a0c:	888a983a 	sll	r5,r17,r2
    4a10:	a0c8d83a 	srl	r4,r20,r3
    4a14:	a084983a 	sll	r2,r20,r2
    4a18:	88e2d83a 	srl	r17,r17,r3
    4a1c:	2906b03a 	or	r3,r5,r4
    4a20:	1004c03a 	cmpne	r2,r2,zero
    4a24:	1886b03a 	or	r3,r3,r2
    4a28:	188001cc 	andi	r2,r3,7
    4a2c:	10000726 	beq	r2,zero,4a4c <__divdf3+0x8bc>
    4a30:	188003cc 	andi	r2,r3,15
    4a34:	01000104 	movi	r4,4
    4a38:	11000426 	beq	r2,r4,4a4c <__divdf3+0x8bc>
    4a3c:	1805883a 	mov	r2,r3
    4a40:	10c00104 	addi	r3,r2,4
    4a44:	1885803a 	cmpltu	r2,r3,r2
    4a48:	88a3883a 	add	r17,r17,r2
    4a4c:	8880202c 	andhi	r2,r17,128
    4a50:	10002926 	beq	r2,zero,4af8 <__divdf3+0x968>
    4a54:	9900004c 	andi	r4,r19,1
    4a58:	00800044 	movi	r2,1
    4a5c:	0021883a 	mov	r16,zero
    4a60:	002b883a 	mov	r21,zero
    4a64:	003e2906 	br	430c <_gp+0xffff5c18>
    4a68:	d9800017 	ldw	r6,0(sp)
    4a6c:	8c7fff84 	addi	r17,r17,-2
    4a70:	a9ab883a 	add	r21,r21,r6
    4a74:	a98b803a 	cmpltu	r5,r21,r6
    4a78:	2d8b883a 	add	r5,r5,r22
    4a7c:	2a11883a 	add	r8,r5,r8
    4a80:	003ef806 	br	4664 <_gp+0xffff5f70>
    4a84:	d9800017 	ldw	r6,0(sp)
    4a88:	318f883a 	add	r7,r6,r6
    4a8c:	398b803a 	cmpltu	r5,r7,r6
    4a90:	2d8d883a 	add	r6,r5,r22
    4a94:	81a1883a 	add	r16,r16,r6
    4a98:	a17fff84 	addi	r5,r20,-2
    4a9c:	d9c00015 	stw	r7,0(sp)
    4aa0:	003f8806 	br	48c4 <_gp+0xffff61d0>
    4aa4:	013ff844 	movi	r4,-31
    4aa8:	2085c83a 	sub	r2,r4,r2
    4aac:	8888d83a 	srl	r4,r17,r2
    4ab0:	00800804 	movi	r2,32
    4ab4:	18802126 	beq	r3,r2,4b3c <__divdf3+0x9ac>
    4ab8:	04001004 	movi	r16,64
    4abc:	80c7c83a 	sub	r3,r16,r3
    4ac0:	88e0983a 	sll	r16,r17,r3
    4ac4:	8504b03a 	or	r2,r16,r20
    4ac8:	1004c03a 	cmpne	r2,r2,zero
    4acc:	2084b03a 	or	r2,r4,r2
    4ad0:	144001cc 	andi	r17,r2,7
    4ad4:	88000d1e 	bne	r17,zero,4b0c <__divdf3+0x97c>
    4ad8:	0021883a 	mov	r16,zero
    4adc:	102ad0fa 	srli	r21,r2,3
    4ae0:	9900004c 	andi	r4,r19,1
    4ae4:	0005883a 	mov	r2,zero
    4ae8:	ac6ab03a 	or	r21,r21,r17
    4aec:	003e0706 	br	430c <_gp+0xffff5c18>
    4af0:	1007883a 	mov	r3,r2
    4af4:	0023883a 	mov	r17,zero
    4af8:	8820927a 	slli	r16,r17,9
    4afc:	1805883a 	mov	r2,r3
    4b00:	8822977a 	slli	r17,r17,29
    4b04:	8020d33a 	srli	r16,r16,12
    4b08:	003ff406 	br	4adc <_gp+0xffff63e8>
    4b0c:	10c003cc 	andi	r3,r2,15
    4b10:	01000104 	movi	r4,4
    4b14:	193ff626 	beq	r3,r4,4af0 <_gp+0xffff63fc>
    4b18:	0023883a 	mov	r17,zero
    4b1c:	003fc806 	br	4a40 <_gp+0xffff634c>
    4b20:	a8bfd136 	bltu	r21,r2,4a68 <_gp+0xffff6374>
    4b24:	2823883a 	mov	r17,r5
    4b28:	003fa606 	br	49c4 <_gp+0xffff62d0>
    4b2c:	d9800017 	ldw	r6,0(sp)
    4b30:	30bfd436 	bltu	r6,r2,4a84 <_gp+0xffff6390>
    4b34:	2829883a 	mov	r20,r5
    4b38:	003f6406 	br	48cc <_gp+0xffff61d8>
    4b3c:	0021883a 	mov	r16,zero
    4b40:	003fe006 	br	4ac4 <_gp+0xffff63d0>
    4b44:	00800434 	movhi	r2,16
    4b48:	8c000234 	orhi	r16,r17,8
    4b4c:	10bfffc4 	addi	r2,r2,-1
    4b50:	e009883a 	mov	r4,fp
    4b54:	80a0703a 	and	r16,r16,r2
    4b58:	a02b883a 	mov	r21,r20
    4b5c:	003e4e06 	br	4498 <_gp+0xffff5da4>

00004b60 <__eqdf2>:
    4b60:	2804d53a 	srli	r2,r5,20
    4b64:	3806d53a 	srli	r3,r7,20
    4b68:	02000434 	movhi	r8,16
    4b6c:	423fffc4 	addi	r8,r8,-1
    4b70:	1081ffcc 	andi	r2,r2,2047
    4b74:	0281ffc4 	movi	r10,2047
    4b78:	2a12703a 	and	r9,r5,r8
    4b7c:	18c1ffcc 	andi	r3,r3,2047
    4b80:	3a10703a 	and	r8,r7,r8
    4b84:	280ad7fa 	srli	r5,r5,31
    4b88:	380ed7fa 	srli	r7,r7,31
    4b8c:	12801026 	beq	r2,r10,4bd0 <__eqdf2+0x70>
    4b90:	0281ffc4 	movi	r10,2047
    4b94:	1a800a26 	beq	r3,r10,4bc0 <__eqdf2+0x60>
    4b98:	10c00226 	beq	r2,r3,4ba4 <__eqdf2+0x44>
    4b9c:	00800044 	movi	r2,1
    4ba0:	f800283a 	ret
    4ba4:	4a3ffd1e 	bne	r9,r8,4b9c <_gp+0xffff64a8>
    4ba8:	21bffc1e 	bne	r4,r6,4b9c <_gp+0xffff64a8>
    4bac:	29c00c26 	beq	r5,r7,4be0 <__eqdf2+0x80>
    4bb0:	103ffa1e 	bne	r2,zero,4b9c <_gp+0xffff64a8>
    4bb4:	2244b03a 	or	r2,r4,r9
    4bb8:	1004c03a 	cmpne	r2,r2,zero
    4bbc:	f800283a 	ret
    4bc0:	3214b03a 	or	r10,r6,r8
    4bc4:	503ff426 	beq	r10,zero,4b98 <_gp+0xffff64a4>
    4bc8:	00800044 	movi	r2,1
    4bcc:	f800283a 	ret
    4bd0:	2254b03a 	or	r10,r4,r9
    4bd4:	503fee26 	beq	r10,zero,4b90 <_gp+0xffff649c>
    4bd8:	00800044 	movi	r2,1
    4bdc:	f800283a 	ret
    4be0:	0005883a 	mov	r2,zero
    4be4:	f800283a 	ret

00004be8 <__gedf2>:
    4be8:	2804d53a 	srli	r2,r5,20
    4bec:	3806d53a 	srli	r3,r7,20
    4bf0:	02000434 	movhi	r8,16
    4bf4:	423fffc4 	addi	r8,r8,-1
    4bf8:	1081ffcc 	andi	r2,r2,2047
    4bfc:	0241ffc4 	movi	r9,2047
    4c00:	2a14703a 	and	r10,r5,r8
    4c04:	18c1ffcc 	andi	r3,r3,2047
    4c08:	3a10703a 	and	r8,r7,r8
    4c0c:	280ad7fa 	srli	r5,r5,31
    4c10:	380ed7fa 	srli	r7,r7,31
    4c14:	12401d26 	beq	r2,r9,4c8c <__gedf2+0xa4>
    4c18:	0241ffc4 	movi	r9,2047
    4c1c:	1a401226 	beq	r3,r9,4c68 <__gedf2+0x80>
    4c20:	1000081e 	bne	r2,zero,4c44 <__gedf2+0x5c>
    4c24:	2296b03a 	or	r11,r4,r10
    4c28:	5813003a 	cmpeq	r9,r11,zero
    4c2c:	1800091e 	bne	r3,zero,4c54 <__gedf2+0x6c>
    4c30:	3218b03a 	or	r12,r6,r8
    4c34:	6000071e 	bne	r12,zero,4c54 <__gedf2+0x6c>
    4c38:	0005883a 	mov	r2,zero
    4c3c:	5800101e 	bne	r11,zero,4c80 <__gedf2+0x98>
    4c40:	f800283a 	ret
    4c44:	18000c1e 	bne	r3,zero,4c78 <__gedf2+0x90>
    4c48:	3212b03a 	or	r9,r6,r8
    4c4c:	48000c26 	beq	r9,zero,4c80 <__gedf2+0x98>
    4c50:	0013883a 	mov	r9,zero
    4c54:	39c03fcc 	andi	r7,r7,255
    4c58:	48000826 	beq	r9,zero,4c7c <__gedf2+0x94>
    4c5c:	38000926 	beq	r7,zero,4c84 <__gedf2+0x9c>
    4c60:	00800044 	movi	r2,1
    4c64:	f800283a 	ret
    4c68:	3212b03a 	or	r9,r6,r8
    4c6c:	483fec26 	beq	r9,zero,4c20 <_gp+0xffff652c>
    4c70:	00bfff84 	movi	r2,-2
    4c74:	f800283a 	ret
    4c78:	39c03fcc 	andi	r7,r7,255
    4c7c:	29c00626 	beq	r5,r7,4c98 <__gedf2+0xb0>
    4c80:	283ff726 	beq	r5,zero,4c60 <_gp+0xffff656c>
    4c84:	00bfffc4 	movi	r2,-1
    4c88:	f800283a 	ret
    4c8c:	2292b03a 	or	r9,r4,r10
    4c90:	483fe126 	beq	r9,zero,4c18 <_gp+0xffff6524>
    4c94:	003ff606 	br	4c70 <_gp+0xffff657c>
    4c98:	18bff916 	blt	r3,r2,4c80 <_gp+0xffff658c>
    4c9c:	10c00316 	blt	r2,r3,4cac <__gedf2+0xc4>
    4ca0:	42bff736 	bltu	r8,r10,4c80 <_gp+0xffff658c>
    4ca4:	52000326 	beq	r10,r8,4cb4 <__gedf2+0xcc>
    4ca8:	5200042e 	bgeu	r10,r8,4cbc <__gedf2+0xd4>
    4cac:	283fec1e 	bne	r5,zero,4c60 <_gp+0xffff656c>
    4cb0:	003ff406 	br	4c84 <_gp+0xffff6590>
    4cb4:	313ff236 	bltu	r6,r4,4c80 <_gp+0xffff658c>
    4cb8:	21bffc36 	bltu	r4,r6,4cac <_gp+0xffff65b8>
    4cbc:	0005883a 	mov	r2,zero
    4cc0:	f800283a 	ret

00004cc4 <__ledf2>:
    4cc4:	2804d53a 	srli	r2,r5,20
    4cc8:	3810d53a 	srli	r8,r7,20
    4ccc:	00c00434 	movhi	r3,16
    4cd0:	18ffffc4 	addi	r3,r3,-1
    4cd4:	1081ffcc 	andi	r2,r2,2047
    4cd8:	0241ffc4 	movi	r9,2047
    4cdc:	28d4703a 	and	r10,r5,r3
    4ce0:	4201ffcc 	andi	r8,r8,2047
    4ce4:	38c6703a 	and	r3,r7,r3
    4ce8:	280ad7fa 	srli	r5,r5,31
    4cec:	380ed7fa 	srli	r7,r7,31
    4cf0:	12401f26 	beq	r2,r9,4d70 <__ledf2+0xac>
    4cf4:	0241ffc4 	movi	r9,2047
    4cf8:	42401426 	beq	r8,r9,4d4c <__ledf2+0x88>
    4cfc:	1000091e 	bne	r2,zero,4d24 <__ledf2+0x60>
    4d00:	2296b03a 	or	r11,r4,r10
    4d04:	5813003a 	cmpeq	r9,r11,zero
    4d08:	29403fcc 	andi	r5,r5,255
    4d0c:	40000a1e 	bne	r8,zero,4d38 <__ledf2+0x74>
    4d10:	30d8b03a 	or	r12,r6,r3
    4d14:	6000081e 	bne	r12,zero,4d38 <__ledf2+0x74>
    4d18:	0005883a 	mov	r2,zero
    4d1c:	5800111e 	bne	r11,zero,4d64 <__ledf2+0xa0>
    4d20:	f800283a 	ret
    4d24:	29403fcc 	andi	r5,r5,255
    4d28:	40000c1e 	bne	r8,zero,4d5c <__ledf2+0x98>
    4d2c:	30d2b03a 	or	r9,r6,r3
    4d30:	48000c26 	beq	r9,zero,4d64 <__ledf2+0xa0>
    4d34:	0013883a 	mov	r9,zero
    4d38:	39c03fcc 	andi	r7,r7,255
    4d3c:	48000826 	beq	r9,zero,4d60 <__ledf2+0x9c>
    4d40:	38001126 	beq	r7,zero,4d88 <__ledf2+0xc4>
    4d44:	00800044 	movi	r2,1
    4d48:	f800283a 	ret
    4d4c:	30d2b03a 	or	r9,r6,r3
    4d50:	483fea26 	beq	r9,zero,4cfc <_gp+0xffff6608>
    4d54:	00800084 	movi	r2,2
    4d58:	f800283a 	ret
    4d5c:	39c03fcc 	andi	r7,r7,255
    4d60:	39400726 	beq	r7,r5,4d80 <__ledf2+0xbc>
    4d64:	2800081e 	bne	r5,zero,4d88 <__ledf2+0xc4>
    4d68:	00800044 	movi	r2,1
    4d6c:	f800283a 	ret
    4d70:	2292b03a 	or	r9,r4,r10
    4d74:	483fdf26 	beq	r9,zero,4cf4 <_gp+0xffff6600>
    4d78:	00800084 	movi	r2,2
    4d7c:	f800283a 	ret
    4d80:	4080030e 	bge	r8,r2,4d90 <__ledf2+0xcc>
    4d84:	383fef26 	beq	r7,zero,4d44 <_gp+0xffff6650>
    4d88:	00bfffc4 	movi	r2,-1
    4d8c:	f800283a 	ret
    4d90:	123feb16 	blt	r2,r8,4d40 <_gp+0xffff664c>
    4d94:	1abff336 	bltu	r3,r10,4d64 <_gp+0xffff6670>
    4d98:	50c00326 	beq	r10,r3,4da8 <__ledf2+0xe4>
    4d9c:	50c0042e 	bgeu	r10,r3,4db0 <__ledf2+0xec>
    4da0:	283fe81e 	bne	r5,zero,4d44 <_gp+0xffff6650>
    4da4:	003ff806 	br	4d88 <_gp+0xffff6694>
    4da8:	313fee36 	bltu	r6,r4,4d64 <_gp+0xffff6670>
    4dac:	21bffc36 	bltu	r4,r6,4da0 <_gp+0xffff66ac>
    4db0:	0005883a 	mov	r2,zero
    4db4:	f800283a 	ret

00004db8 <__muldf3>:
    4db8:	deffee04 	addi	sp,sp,-72
    4dbc:	dd000c15 	stw	r20,48(sp)
    4dc0:	2828d53a 	srli	r20,r5,20
    4dc4:	ddc00f15 	stw	r23,60(sp)
    4dc8:	282ed7fa 	srli	r23,r5,31
    4dcc:	dc000815 	stw	r16,32(sp)
    4dd0:	04000434 	movhi	r16,16
    4dd4:	dcc00b15 	stw	r19,44(sp)
    4dd8:	843fffc4 	addi	r16,r16,-1
    4ddc:	dfc01115 	stw	ra,68(sp)
    4de0:	df001015 	stw	fp,64(sp)
    4de4:	dd800e15 	stw	r22,56(sp)
    4de8:	dd400d15 	stw	r21,52(sp)
    4dec:	dc800a15 	stw	r18,40(sp)
    4df0:	dc400915 	stw	r17,36(sp)
    4df4:	a501ffcc 	andi	r20,r20,2047
    4df8:	2c20703a 	and	r16,r5,r16
    4dfc:	b827883a 	mov	r19,r23
    4e00:	ba403fcc 	andi	r9,r23,255
    4e04:	a0006026 	beq	r20,zero,4f88 <__muldf3+0x1d0>
    4e08:	0081ffc4 	movi	r2,2047
    4e0c:	202d883a 	mov	r22,r4
    4e10:	a0803626 	beq	r20,r2,4eec <__muldf3+0x134>
    4e14:	84000434 	orhi	r16,r16,16
    4e18:	200ad77a 	srli	r5,r4,29
    4e1c:	800490fa 	slli	r2,r16,3
    4e20:	202c90fa 	slli	r22,r4,3
    4e24:	a53f0044 	addi	r20,r20,-1023
    4e28:	28a0b03a 	or	r16,r5,r2
    4e2c:	002b883a 	mov	r21,zero
    4e30:	000b883a 	mov	r5,zero
    4e34:	3804d53a 	srli	r2,r7,20
    4e38:	3838d7fa 	srli	fp,r7,31
    4e3c:	04400434 	movhi	r17,16
    4e40:	8c7fffc4 	addi	r17,r17,-1
    4e44:	1081ffcc 	andi	r2,r2,2047
    4e48:	3025883a 	mov	r18,r6
    4e4c:	3c62703a 	and	r17,r7,r17
    4e50:	e2803fcc 	andi	r10,fp,255
    4e54:	10006d26 	beq	r2,zero,500c <__muldf3+0x254>
    4e58:	00c1ffc4 	movi	r3,2047
    4e5c:	10c06526 	beq	r2,r3,4ff4 <__muldf3+0x23c>
    4e60:	8c400434 	orhi	r17,r17,16
    4e64:	300ed77a 	srli	r7,r6,29
    4e68:	880690fa 	slli	r3,r17,3
    4e6c:	302490fa 	slli	r18,r6,3
    4e70:	10bf0044 	addi	r2,r2,-1023
    4e74:	38e2b03a 	or	r17,r7,r3
    4e78:	000f883a 	mov	r7,zero
    4e7c:	a087883a 	add	r3,r20,r2
    4e80:	010003c4 	movi	r4,15
    4e84:	3d44b03a 	or	r2,r7,r21
    4e88:	e5ccf03a 	xor	r6,fp,r23
    4e8c:	1a000044 	addi	r8,r3,1
    4e90:	20809b36 	bltu	r4,r2,5100 <__muldf3+0x348>
    4e94:	100490ba 	slli	r2,r2,2
    4e98:	01000034 	movhi	r4,0
    4e9c:	2113ab04 	addi	r4,r4,20140
    4ea0:	1105883a 	add	r2,r2,r4
    4ea4:	10800017 	ldw	r2,0(r2)
    4ea8:	1000683a 	jmp	r2
    4eac:	00005100 	call	510 <main+0x168>
    4eb0:	00004f0c 	andi	zero,zero,316
    4eb4:	00004f0c 	andi	zero,zero,316
    4eb8:	00004f08 	cmpgei	zero,zero,316
    4ebc:	000050dc 	xori	zero,zero,323
    4ec0:	000050dc 	xori	zero,zero,323
    4ec4:	000050c4 	movi	zero,323
    4ec8:	00004f08 	cmpgei	zero,zero,316
    4ecc:	000050dc 	xori	zero,zero,323
    4ed0:	000050c4 	movi	zero,323
    4ed4:	000050dc 	xori	zero,zero,323
    4ed8:	00004f08 	cmpgei	zero,zero,316
    4edc:	000050ec 	andhi	zero,zero,323
    4ee0:	000050ec 	andhi	zero,zero,323
    4ee4:	000050ec 	andhi	zero,zero,323
    4ee8:	0000544c 	andi	zero,zero,337
    4eec:	2404b03a 	or	r2,r4,r16
    4ef0:	1000711e 	bne	r2,zero,50b8 <__muldf3+0x300>
    4ef4:	05400204 	movi	r21,8
    4ef8:	0021883a 	mov	r16,zero
    4efc:	002d883a 	mov	r22,zero
    4f00:	01400084 	movi	r5,2
    4f04:	003fcb06 	br	4e34 <_gp+0xffff6740>
    4f08:	500d883a 	mov	r6,r10
    4f0c:	00800084 	movi	r2,2
    4f10:	38805926 	beq	r7,r2,5078 <__muldf3+0x2c0>
    4f14:	008000c4 	movi	r2,3
    4f18:	3881bb26 	beq	r7,r2,5608 <__muldf3+0x850>
    4f1c:	00800044 	movi	r2,1
    4f20:	3881961e 	bne	r7,r2,557c <__muldf3+0x7c4>
    4f24:	3027883a 	mov	r19,r6
    4f28:	0005883a 	mov	r2,zero
    4f2c:	0021883a 	mov	r16,zero
    4f30:	002d883a 	mov	r22,zero
    4f34:	1004953a 	slli	r2,r2,20
    4f38:	98c03fcc 	andi	r3,r19,255
    4f3c:	04400434 	movhi	r17,16
    4f40:	8c7fffc4 	addi	r17,r17,-1
    4f44:	180697fa 	slli	r3,r3,31
    4f48:	8460703a 	and	r16,r16,r17
    4f4c:	80a0b03a 	or	r16,r16,r2
    4f50:	80c6b03a 	or	r3,r16,r3
    4f54:	b005883a 	mov	r2,r22
    4f58:	dfc01117 	ldw	ra,68(sp)
    4f5c:	df001017 	ldw	fp,64(sp)
    4f60:	ddc00f17 	ldw	r23,60(sp)
    4f64:	dd800e17 	ldw	r22,56(sp)
    4f68:	dd400d17 	ldw	r21,52(sp)
    4f6c:	dd000c17 	ldw	r20,48(sp)
    4f70:	dcc00b17 	ldw	r19,44(sp)
    4f74:	dc800a17 	ldw	r18,40(sp)
    4f78:	dc400917 	ldw	r17,36(sp)
    4f7c:	dc000817 	ldw	r16,32(sp)
    4f80:	dec01204 	addi	sp,sp,72
    4f84:	f800283a 	ret
    4f88:	2404b03a 	or	r2,r4,r16
    4f8c:	202b883a 	mov	r21,r4
    4f90:	10004426 	beq	r2,zero,50a4 <__muldf3+0x2ec>
    4f94:	80015126 	beq	r16,zero,54dc <__muldf3+0x724>
    4f98:	8009883a 	mov	r4,r16
    4f9c:	d9800715 	stw	r6,28(sp)
    4fa0:	d9c00215 	stw	r7,8(sp)
    4fa4:	da400415 	stw	r9,16(sp)
    4fa8:	00061240 	call	6124 <__clzsi2>
    4fac:	d9800717 	ldw	r6,28(sp)
    4fb0:	d9c00217 	ldw	r7,8(sp)
    4fb4:	da400417 	ldw	r9,16(sp)
    4fb8:	113ffd44 	addi	r4,r2,-11
    4fbc:	00c00704 	movi	r3,28
    4fc0:	19014216 	blt	r3,r4,54cc <__muldf3+0x714>
    4fc4:	00c00744 	movi	r3,29
    4fc8:	15bffe04 	addi	r22,r2,-8
    4fcc:	1907c83a 	sub	r3,r3,r4
    4fd0:	85a0983a 	sll	r16,r16,r22
    4fd4:	a8c6d83a 	srl	r3,r21,r3
    4fd8:	adac983a 	sll	r22,r21,r22
    4fdc:	1c20b03a 	or	r16,r3,r16
    4fe0:	1080fcc4 	addi	r2,r2,1011
    4fe4:	00a9c83a 	sub	r20,zero,r2
    4fe8:	002b883a 	mov	r21,zero
    4fec:	000b883a 	mov	r5,zero
    4ff0:	003f9006 	br	4e34 <_gp+0xffff6740>
    4ff4:	3446b03a 	or	r3,r6,r17
    4ff8:	1800281e 	bne	r3,zero,509c <__muldf3+0x2e4>
    4ffc:	0023883a 	mov	r17,zero
    5000:	0025883a 	mov	r18,zero
    5004:	01c00084 	movi	r7,2
    5008:	003f9c06 	br	4e7c <_gp+0xffff6788>
    500c:	3446b03a 	or	r3,r6,r17
    5010:	18001e26 	beq	r3,zero,508c <__muldf3+0x2d4>
    5014:	88012126 	beq	r17,zero,549c <__muldf3+0x6e4>
    5018:	8809883a 	mov	r4,r17
    501c:	d9400215 	stw	r5,8(sp)
    5020:	d9800715 	stw	r6,28(sp)
    5024:	da400415 	stw	r9,16(sp)
    5028:	da800315 	stw	r10,12(sp)
    502c:	00061240 	call	6124 <__clzsi2>
    5030:	d9400217 	ldw	r5,8(sp)
    5034:	d9800717 	ldw	r6,28(sp)
    5038:	da400417 	ldw	r9,16(sp)
    503c:	da800317 	ldw	r10,12(sp)
    5040:	113ffd44 	addi	r4,r2,-11
    5044:	00c00704 	movi	r3,28
    5048:	19011016 	blt	r3,r4,548c <__muldf3+0x6d4>
    504c:	00c00744 	movi	r3,29
    5050:	14bffe04 	addi	r18,r2,-8
    5054:	1907c83a 	sub	r3,r3,r4
    5058:	8ca2983a 	sll	r17,r17,r18
    505c:	30c6d83a 	srl	r3,r6,r3
    5060:	34a4983a 	sll	r18,r6,r18
    5064:	1c62b03a 	or	r17,r3,r17
    5068:	1080fcc4 	addi	r2,r2,1011
    506c:	0085c83a 	sub	r2,zero,r2
    5070:	000f883a 	mov	r7,zero
    5074:	003f8106 	br	4e7c <_gp+0xffff6788>
    5078:	3027883a 	mov	r19,r6
    507c:	0081ffc4 	movi	r2,2047
    5080:	0021883a 	mov	r16,zero
    5084:	002d883a 	mov	r22,zero
    5088:	003faa06 	br	4f34 <_gp+0xffff6840>
    508c:	0023883a 	mov	r17,zero
    5090:	0025883a 	mov	r18,zero
    5094:	01c00044 	movi	r7,1
    5098:	003f7806 	br	4e7c <_gp+0xffff6788>
    509c:	01c000c4 	movi	r7,3
    50a0:	003f7606 	br	4e7c <_gp+0xffff6788>
    50a4:	05400104 	movi	r21,4
    50a8:	0021883a 	mov	r16,zero
    50ac:	002d883a 	mov	r22,zero
    50b0:	01400044 	movi	r5,1
    50b4:	003f5f06 	br	4e34 <_gp+0xffff6740>
    50b8:	05400304 	movi	r21,12
    50bc:	014000c4 	movi	r5,3
    50c0:	003f5c06 	br	4e34 <_gp+0xffff6740>
    50c4:	04000434 	movhi	r16,16
    50c8:	0027883a 	mov	r19,zero
    50cc:	843fffc4 	addi	r16,r16,-1
    50d0:	05bfffc4 	movi	r22,-1
    50d4:	0081ffc4 	movi	r2,2047
    50d8:	003f9606 	br	4f34 <_gp+0xffff6840>
    50dc:	8023883a 	mov	r17,r16
    50e0:	b025883a 	mov	r18,r22
    50e4:	280f883a 	mov	r7,r5
    50e8:	003f8806 	br	4f0c <_gp+0xffff6818>
    50ec:	8023883a 	mov	r17,r16
    50f0:	b025883a 	mov	r18,r22
    50f4:	480d883a 	mov	r6,r9
    50f8:	280f883a 	mov	r7,r5
    50fc:	003f8306 	br	4f0c <_gp+0xffff6818>
    5100:	b026d43a 	srli	r19,r22,16
    5104:	902ed43a 	srli	r23,r18,16
    5108:	b5bfffcc 	andi	r22,r22,65535
    510c:	94bfffcc 	andi	r18,r18,65535
    5110:	b00b883a 	mov	r5,r22
    5114:	9009883a 	mov	r4,r18
    5118:	d8c00515 	stw	r3,20(sp)
    511c:	d9800715 	stw	r6,28(sp)
    5120:	da000615 	stw	r8,24(sp)
    5124:	0002ed40 	call	2ed4 <__mulsi3>
    5128:	980b883a 	mov	r5,r19
    512c:	9009883a 	mov	r4,r18
    5130:	1029883a 	mov	r20,r2
    5134:	0002ed40 	call	2ed4 <__mulsi3>
    5138:	b80b883a 	mov	r5,r23
    513c:	9809883a 	mov	r4,r19
    5140:	102b883a 	mov	r21,r2
    5144:	0002ed40 	call	2ed4 <__mulsi3>
    5148:	b809883a 	mov	r4,r23
    514c:	b00b883a 	mov	r5,r22
    5150:	1039883a 	mov	fp,r2
    5154:	0002ed40 	call	2ed4 <__mulsi3>
    5158:	a008d43a 	srli	r4,r20,16
    515c:	1545883a 	add	r2,r2,r21
    5160:	d8c00517 	ldw	r3,20(sp)
    5164:	2085883a 	add	r2,r4,r2
    5168:	d9800717 	ldw	r6,28(sp)
    516c:	da000617 	ldw	r8,24(sp)
    5170:	1540022e 	bgeu	r2,r21,517c <__muldf3+0x3c4>
    5174:	01000074 	movhi	r4,1
    5178:	e139883a 	add	fp,fp,r4
    517c:	100e943a 	slli	r7,r2,16
    5180:	1004d43a 	srli	r2,r2,16
    5184:	882ad43a 	srli	r21,r17,16
    5188:	a53fffcc 	andi	r20,r20,65535
    518c:	8c7fffcc 	andi	r17,r17,65535
    5190:	3d29883a 	add	r20,r7,r20
    5194:	b00b883a 	mov	r5,r22
    5198:	8809883a 	mov	r4,r17
    519c:	d8c00515 	stw	r3,20(sp)
    51a0:	d9800715 	stw	r6,28(sp)
    51a4:	da000615 	stw	r8,24(sp)
    51a8:	dd000115 	stw	r20,4(sp)
    51ac:	d8800015 	stw	r2,0(sp)
    51b0:	0002ed40 	call	2ed4 <__mulsi3>
    51b4:	980b883a 	mov	r5,r19
    51b8:	8809883a 	mov	r4,r17
    51bc:	d8800215 	stw	r2,8(sp)
    51c0:	0002ed40 	call	2ed4 <__mulsi3>
    51c4:	9809883a 	mov	r4,r19
    51c8:	a80b883a 	mov	r5,r21
    51cc:	1029883a 	mov	r20,r2
    51d0:	0002ed40 	call	2ed4 <__mulsi3>
    51d4:	b00b883a 	mov	r5,r22
    51d8:	a809883a 	mov	r4,r21
    51dc:	d8800415 	stw	r2,16(sp)
    51e0:	0002ed40 	call	2ed4 <__mulsi3>
    51e4:	d9c00217 	ldw	r7,8(sp)
    51e8:	1505883a 	add	r2,r2,r20
    51ec:	d8c00517 	ldw	r3,20(sp)
    51f0:	3826d43a 	srli	r19,r7,16
    51f4:	d9800717 	ldw	r6,28(sp)
    51f8:	da000617 	ldw	r8,24(sp)
    51fc:	9885883a 	add	r2,r19,r2
    5200:	da400417 	ldw	r9,16(sp)
    5204:	1500022e 	bgeu	r2,r20,5210 <__muldf3+0x458>
    5208:	01000074 	movhi	r4,1
    520c:	4913883a 	add	r9,r9,r4
    5210:	1028d43a 	srli	r20,r2,16
    5214:	1004943a 	slli	r2,r2,16
    5218:	802cd43a 	srli	r22,r16,16
    521c:	843fffcc 	andi	r16,r16,65535
    5220:	3cffffcc 	andi	r19,r7,65535
    5224:	9009883a 	mov	r4,r18
    5228:	800b883a 	mov	r5,r16
    522c:	a269883a 	add	r20,r20,r9
    5230:	d8c00515 	stw	r3,20(sp)
    5234:	d9800715 	stw	r6,28(sp)
    5238:	da000615 	stw	r8,24(sp)
    523c:	14e7883a 	add	r19,r2,r19
    5240:	0002ed40 	call	2ed4 <__mulsi3>
    5244:	9009883a 	mov	r4,r18
    5248:	b00b883a 	mov	r5,r22
    524c:	d8800315 	stw	r2,12(sp)
    5250:	0002ed40 	call	2ed4 <__mulsi3>
    5254:	b809883a 	mov	r4,r23
    5258:	b00b883a 	mov	r5,r22
    525c:	d8800215 	stw	r2,8(sp)
    5260:	0002ed40 	call	2ed4 <__mulsi3>
    5264:	b80b883a 	mov	r5,r23
    5268:	8009883a 	mov	r4,r16
    526c:	d8800415 	stw	r2,16(sp)
    5270:	0002ed40 	call	2ed4 <__mulsi3>
    5274:	da800317 	ldw	r10,12(sp)
    5278:	d9c00217 	ldw	r7,8(sp)
    527c:	d9000017 	ldw	r4,0(sp)
    5280:	502ed43a 	srli	r23,r10,16
    5284:	11c5883a 	add	r2,r2,r7
    5288:	24e5883a 	add	r18,r4,r19
    528c:	b885883a 	add	r2,r23,r2
    5290:	d8c00517 	ldw	r3,20(sp)
    5294:	d9800717 	ldw	r6,28(sp)
    5298:	da000617 	ldw	r8,24(sp)
    529c:	da400417 	ldw	r9,16(sp)
    52a0:	11c0022e 	bgeu	r2,r7,52ac <__muldf3+0x4f4>
    52a4:	01000074 	movhi	r4,1
    52a8:	4913883a 	add	r9,r9,r4
    52ac:	100ed43a 	srli	r7,r2,16
    52b0:	1004943a 	slli	r2,r2,16
    52b4:	55ffffcc 	andi	r23,r10,65535
    52b8:	3a53883a 	add	r9,r7,r9
    52bc:	8809883a 	mov	r4,r17
    52c0:	800b883a 	mov	r5,r16
    52c4:	d8c00515 	stw	r3,20(sp)
    52c8:	d9800715 	stw	r6,28(sp)
    52cc:	da000615 	stw	r8,24(sp)
    52d0:	da400415 	stw	r9,16(sp)
    52d4:	15ef883a 	add	r23,r2,r23
    52d8:	0002ed40 	call	2ed4 <__mulsi3>
    52dc:	8809883a 	mov	r4,r17
    52e0:	b00b883a 	mov	r5,r22
    52e4:	d8800215 	stw	r2,8(sp)
    52e8:	0002ed40 	call	2ed4 <__mulsi3>
    52ec:	b00b883a 	mov	r5,r22
    52f0:	a809883a 	mov	r4,r21
    52f4:	d8800315 	stw	r2,12(sp)
    52f8:	0002ed40 	call	2ed4 <__mulsi3>
    52fc:	8009883a 	mov	r4,r16
    5300:	a80b883a 	mov	r5,r21
    5304:	1023883a 	mov	r17,r2
    5308:	0002ed40 	call	2ed4 <__mulsi3>
    530c:	d9c00217 	ldw	r7,8(sp)
    5310:	da800317 	ldw	r10,12(sp)
    5314:	d8c00517 	ldw	r3,20(sp)
    5318:	3808d43a 	srli	r4,r7,16
    531c:	1285883a 	add	r2,r2,r10
    5320:	d9800717 	ldw	r6,28(sp)
    5324:	2085883a 	add	r2,r4,r2
    5328:	da000617 	ldw	r8,24(sp)
    532c:	da400417 	ldw	r9,16(sp)
    5330:	1280022e 	bgeu	r2,r10,533c <__muldf3+0x584>
    5334:	01000074 	movhi	r4,1
    5338:	8923883a 	add	r17,r17,r4
    533c:	1008943a 	slli	r4,r2,16
    5340:	39ffffcc 	andi	r7,r7,65535
    5344:	e4b9883a 	add	fp,fp,r18
    5348:	21cf883a 	add	r7,r4,r7
    534c:	e4e7803a 	cmpltu	r19,fp,r19
    5350:	3d0f883a 	add	r7,r7,r20
    5354:	bf39883a 	add	fp,r23,fp
    5358:	99c9883a 	add	r4,r19,r7
    535c:	e5ef803a 	cmpltu	r23,fp,r23
    5360:	490b883a 	add	r5,r9,r4
    5364:	1004d43a 	srli	r2,r2,16
    5368:	b965883a 	add	r18,r23,r5
    536c:	24c9803a 	cmpltu	r4,r4,r19
    5370:	3d29803a 	cmpltu	r20,r7,r20
    5374:	a128b03a 	or	r20,r20,r4
    5378:	95ef803a 	cmpltu	r23,r18,r23
    537c:	2a53803a 	cmpltu	r9,r5,r9
    5380:	a0a9883a 	add	r20,r20,r2
    5384:	4deeb03a 	or	r23,r9,r23
    5388:	a5ef883a 	add	r23,r20,r23
    538c:	bc63883a 	add	r17,r23,r17
    5390:	e004927a 	slli	r2,fp,9
    5394:	d9000117 	ldw	r4,4(sp)
    5398:	882e927a 	slli	r23,r17,9
    539c:	9022d5fa 	srli	r17,r18,23
    53a0:	e038d5fa 	srli	fp,fp,23
    53a4:	1104b03a 	or	r2,r2,r4
    53a8:	9024927a 	slli	r18,r18,9
    53ac:	1004c03a 	cmpne	r2,r2,zero
    53b0:	bc62b03a 	or	r17,r23,r17
    53b4:	1738b03a 	or	fp,r2,fp
    53b8:	8880402c 	andhi	r2,r17,256
    53bc:	e4a4b03a 	or	r18,fp,r18
    53c0:	10000726 	beq	r2,zero,53e0 <__muldf3+0x628>
    53c4:	9006d07a 	srli	r3,r18,1
    53c8:	880497fa 	slli	r2,r17,31
    53cc:	9480004c 	andi	r18,r18,1
    53d0:	8822d07a 	srli	r17,r17,1
    53d4:	1ca4b03a 	or	r18,r3,r18
    53d8:	14a4b03a 	or	r18,r2,r18
    53dc:	4007883a 	mov	r3,r8
    53e0:	1880ffc4 	addi	r2,r3,1023
    53e4:	0080460e 	bge	zero,r2,5500 <__muldf3+0x748>
    53e8:	910001cc 	andi	r4,r18,7
    53ec:	20000726 	beq	r4,zero,540c <__muldf3+0x654>
    53f0:	910003cc 	andi	r4,r18,15
    53f4:	01400104 	movi	r5,4
    53f8:	21400426 	beq	r4,r5,540c <__muldf3+0x654>
    53fc:	9149883a 	add	r4,r18,r5
    5400:	24a5803a 	cmpltu	r18,r4,r18
    5404:	8ca3883a 	add	r17,r17,r18
    5408:	2025883a 	mov	r18,r4
    540c:	8900402c 	andhi	r4,r17,256
    5410:	20000426 	beq	r4,zero,5424 <__muldf3+0x66c>
    5414:	18810004 	addi	r2,r3,1024
    5418:	00ffc034 	movhi	r3,65280
    541c:	18ffffc4 	addi	r3,r3,-1
    5420:	88e2703a 	and	r17,r17,r3
    5424:	00c1ff84 	movi	r3,2046
    5428:	18bf1316 	blt	r3,r2,5078 <_gp+0xffff6984>
    542c:	882c977a 	slli	r22,r17,29
    5430:	9024d0fa 	srli	r18,r18,3
    5434:	8822927a 	slli	r17,r17,9
    5438:	1081ffcc 	andi	r2,r2,2047
    543c:	b4acb03a 	or	r22,r22,r18
    5440:	8820d33a 	srli	r16,r17,12
    5444:	3027883a 	mov	r19,r6
    5448:	003eba06 	br	4f34 <_gp+0xffff6840>
    544c:	8080022c 	andhi	r2,r16,8
    5450:	10000926 	beq	r2,zero,5478 <__muldf3+0x6c0>
    5454:	8880022c 	andhi	r2,r17,8
    5458:	1000071e 	bne	r2,zero,5478 <__muldf3+0x6c0>
    545c:	00800434 	movhi	r2,16
    5460:	8c000234 	orhi	r16,r17,8
    5464:	10bfffc4 	addi	r2,r2,-1
    5468:	e027883a 	mov	r19,fp
    546c:	80a0703a 	and	r16,r16,r2
    5470:	902d883a 	mov	r22,r18
    5474:	003f1706 	br	50d4 <_gp+0xffff69e0>
    5478:	00800434 	movhi	r2,16
    547c:	84000234 	orhi	r16,r16,8
    5480:	10bfffc4 	addi	r2,r2,-1
    5484:	80a0703a 	and	r16,r16,r2
    5488:	003f1206 	br	50d4 <_gp+0xffff69e0>
    548c:	147ff604 	addi	r17,r2,-40
    5490:	3462983a 	sll	r17,r6,r17
    5494:	0025883a 	mov	r18,zero
    5498:	003ef306 	br	5068 <_gp+0xffff6974>
    549c:	3009883a 	mov	r4,r6
    54a0:	d9400215 	stw	r5,8(sp)
    54a4:	d9800715 	stw	r6,28(sp)
    54a8:	da400415 	stw	r9,16(sp)
    54ac:	da800315 	stw	r10,12(sp)
    54b0:	00061240 	call	6124 <__clzsi2>
    54b4:	10800804 	addi	r2,r2,32
    54b8:	da800317 	ldw	r10,12(sp)
    54bc:	da400417 	ldw	r9,16(sp)
    54c0:	d9800717 	ldw	r6,28(sp)
    54c4:	d9400217 	ldw	r5,8(sp)
    54c8:	003edd06 	br	5040 <_gp+0xffff694c>
    54cc:	143ff604 	addi	r16,r2,-40
    54d0:	ac20983a 	sll	r16,r21,r16
    54d4:	002d883a 	mov	r22,zero
    54d8:	003ec106 	br	4fe0 <_gp+0xffff68ec>
    54dc:	d9800715 	stw	r6,28(sp)
    54e0:	d9c00215 	stw	r7,8(sp)
    54e4:	da400415 	stw	r9,16(sp)
    54e8:	00061240 	call	6124 <__clzsi2>
    54ec:	10800804 	addi	r2,r2,32
    54f0:	da400417 	ldw	r9,16(sp)
    54f4:	d9c00217 	ldw	r7,8(sp)
    54f8:	d9800717 	ldw	r6,28(sp)
    54fc:	003eae06 	br	4fb8 <_gp+0xffff68c4>
    5500:	00c00044 	movi	r3,1
    5504:	1887c83a 	sub	r3,r3,r2
    5508:	01000e04 	movi	r4,56
    550c:	20fe8516 	blt	r4,r3,4f24 <_gp+0xffff6830>
    5510:	010007c4 	movi	r4,31
    5514:	20c01b16 	blt	r4,r3,5584 <__muldf3+0x7cc>
    5518:	00800804 	movi	r2,32
    551c:	10c5c83a 	sub	r2,r2,r3
    5520:	888a983a 	sll	r5,r17,r2
    5524:	90c8d83a 	srl	r4,r18,r3
    5528:	9084983a 	sll	r2,r18,r2
    552c:	88e2d83a 	srl	r17,r17,r3
    5530:	2906b03a 	or	r3,r5,r4
    5534:	1004c03a 	cmpne	r2,r2,zero
    5538:	1886b03a 	or	r3,r3,r2
    553c:	188001cc 	andi	r2,r3,7
    5540:	10000726 	beq	r2,zero,5560 <__muldf3+0x7a8>
    5544:	188003cc 	andi	r2,r3,15
    5548:	01000104 	movi	r4,4
    554c:	11000426 	beq	r2,r4,5560 <__muldf3+0x7a8>
    5550:	1805883a 	mov	r2,r3
    5554:	10c00104 	addi	r3,r2,4
    5558:	1885803a 	cmpltu	r2,r3,r2
    555c:	88a3883a 	add	r17,r17,r2
    5560:	8880202c 	andhi	r2,r17,128
    5564:	10001c26 	beq	r2,zero,55d8 <__muldf3+0x820>
    5568:	3027883a 	mov	r19,r6
    556c:	00800044 	movi	r2,1
    5570:	0021883a 	mov	r16,zero
    5574:	002d883a 	mov	r22,zero
    5578:	003e6e06 	br	4f34 <_gp+0xffff6840>
    557c:	4007883a 	mov	r3,r8
    5580:	003f9706 	br	53e0 <_gp+0xffff6cec>
    5584:	017ff844 	movi	r5,-31
    5588:	2885c83a 	sub	r2,r5,r2
    558c:	888ad83a 	srl	r5,r17,r2
    5590:	00800804 	movi	r2,32
    5594:	18801a26 	beq	r3,r2,5600 <__muldf3+0x848>
    5598:	01001004 	movi	r4,64
    559c:	20c7c83a 	sub	r3,r4,r3
    55a0:	88e2983a 	sll	r17,r17,r3
    55a4:	8ca4b03a 	or	r18,r17,r18
    55a8:	9004c03a 	cmpne	r2,r18,zero
    55ac:	2884b03a 	or	r2,r5,r2
    55b0:	144001cc 	andi	r17,r2,7
    55b4:	88000d1e 	bne	r17,zero,55ec <__muldf3+0x834>
    55b8:	0021883a 	mov	r16,zero
    55bc:	102cd0fa 	srli	r22,r2,3
    55c0:	3027883a 	mov	r19,r6
    55c4:	0005883a 	mov	r2,zero
    55c8:	b46cb03a 	or	r22,r22,r17
    55cc:	003e5906 	br	4f34 <_gp+0xffff6840>
    55d0:	1007883a 	mov	r3,r2
    55d4:	0023883a 	mov	r17,zero
    55d8:	8820927a 	slli	r16,r17,9
    55dc:	1805883a 	mov	r2,r3
    55e0:	8822977a 	slli	r17,r17,29
    55e4:	8020d33a 	srli	r16,r16,12
    55e8:	003ff406 	br	55bc <_gp+0xffff6ec8>
    55ec:	10c003cc 	andi	r3,r2,15
    55f0:	01000104 	movi	r4,4
    55f4:	193ff626 	beq	r3,r4,55d0 <_gp+0xffff6edc>
    55f8:	0023883a 	mov	r17,zero
    55fc:	003fd506 	br	5554 <_gp+0xffff6e60>
    5600:	0023883a 	mov	r17,zero
    5604:	003fe706 	br	55a4 <_gp+0xffff6eb0>
    5608:	00800434 	movhi	r2,16
    560c:	8c000234 	orhi	r16,r17,8
    5610:	10bfffc4 	addi	r2,r2,-1
    5614:	3027883a 	mov	r19,r6
    5618:	80a0703a 	and	r16,r16,r2
    561c:	902d883a 	mov	r22,r18
    5620:	003eac06 	br	50d4 <_gp+0xffff69e0>

00005624 <__subdf3>:
    5624:	02000434 	movhi	r8,16
    5628:	423fffc4 	addi	r8,r8,-1
    562c:	defffb04 	addi	sp,sp,-20
    5630:	2a14703a 	and	r10,r5,r8
    5634:	3812d53a 	srli	r9,r7,20
    5638:	3a10703a 	and	r8,r7,r8
    563c:	2006d77a 	srli	r3,r4,29
    5640:	3004d77a 	srli	r2,r6,29
    5644:	dc000015 	stw	r16,0(sp)
    5648:	501490fa 	slli	r10,r10,3
    564c:	2820d53a 	srli	r16,r5,20
    5650:	401090fa 	slli	r8,r8,3
    5654:	dc800215 	stw	r18,8(sp)
    5658:	dc400115 	stw	r17,4(sp)
    565c:	dfc00415 	stw	ra,16(sp)
    5660:	202290fa 	slli	r17,r4,3
    5664:	dcc00315 	stw	r19,12(sp)
    5668:	4a41ffcc 	andi	r9,r9,2047
    566c:	0101ffc4 	movi	r4,2047
    5670:	2824d7fa 	srli	r18,r5,31
    5674:	8401ffcc 	andi	r16,r16,2047
    5678:	50c6b03a 	or	r3,r10,r3
    567c:	380ed7fa 	srli	r7,r7,31
    5680:	408ab03a 	or	r5,r8,r2
    5684:	300c90fa 	slli	r6,r6,3
    5688:	49009626 	beq	r9,r4,58e4 <__subdf3+0x2c0>
    568c:	39c0005c 	xori	r7,r7,1
    5690:	8245c83a 	sub	r2,r16,r9
    5694:	3c807426 	beq	r7,r18,5868 <__subdf3+0x244>
    5698:	0080af0e 	bge	zero,r2,5958 <__subdf3+0x334>
    569c:	48002a1e 	bne	r9,zero,5748 <__subdf3+0x124>
    56a0:	2988b03a 	or	r4,r5,r6
    56a4:	20009a1e 	bne	r4,zero,5910 <__subdf3+0x2ec>
    56a8:	888001cc 	andi	r2,r17,7
    56ac:	10000726 	beq	r2,zero,56cc <__subdf3+0xa8>
    56b0:	888003cc 	andi	r2,r17,15
    56b4:	01000104 	movi	r4,4
    56b8:	11000426 	beq	r2,r4,56cc <__subdf3+0xa8>
    56bc:	890b883a 	add	r5,r17,r4
    56c0:	2c63803a 	cmpltu	r17,r5,r17
    56c4:	1c47883a 	add	r3,r3,r17
    56c8:	2823883a 	mov	r17,r5
    56cc:	1880202c 	andhi	r2,r3,128
    56d0:	10005926 	beq	r2,zero,5838 <__subdf3+0x214>
    56d4:	84000044 	addi	r16,r16,1
    56d8:	0081ffc4 	movi	r2,2047
    56dc:	8080be26 	beq	r16,r2,59d8 <__subdf3+0x3b4>
    56e0:	017fe034 	movhi	r5,65408
    56e4:	297fffc4 	addi	r5,r5,-1
    56e8:	1946703a 	and	r3,r3,r5
    56ec:	1804977a 	slli	r2,r3,29
    56f0:	1806927a 	slli	r3,r3,9
    56f4:	8822d0fa 	srli	r17,r17,3
    56f8:	8401ffcc 	andi	r16,r16,2047
    56fc:	180ad33a 	srli	r5,r3,12
    5700:	9100004c 	andi	r4,r18,1
    5704:	1444b03a 	or	r2,r2,r17
    5708:	80c1ffcc 	andi	r3,r16,2047
    570c:	1820953a 	slli	r16,r3,20
    5710:	20c03fcc 	andi	r3,r4,255
    5714:	180897fa 	slli	r4,r3,31
    5718:	00c00434 	movhi	r3,16
    571c:	18ffffc4 	addi	r3,r3,-1
    5720:	28c6703a 	and	r3,r5,r3
    5724:	1c06b03a 	or	r3,r3,r16
    5728:	1906b03a 	or	r3,r3,r4
    572c:	dfc00417 	ldw	ra,16(sp)
    5730:	dcc00317 	ldw	r19,12(sp)
    5734:	dc800217 	ldw	r18,8(sp)
    5738:	dc400117 	ldw	r17,4(sp)
    573c:	dc000017 	ldw	r16,0(sp)
    5740:	dec00504 	addi	sp,sp,20
    5744:	f800283a 	ret
    5748:	0101ffc4 	movi	r4,2047
    574c:	813fd626 	beq	r16,r4,56a8 <_gp+0xffff6fb4>
    5750:	29402034 	orhi	r5,r5,128
    5754:	01000e04 	movi	r4,56
    5758:	2080a316 	blt	r4,r2,59e8 <__subdf3+0x3c4>
    575c:	010007c4 	movi	r4,31
    5760:	2080c616 	blt	r4,r2,5a7c <__subdf3+0x458>
    5764:	01000804 	movi	r4,32
    5768:	2089c83a 	sub	r4,r4,r2
    576c:	2910983a 	sll	r8,r5,r4
    5770:	308ed83a 	srl	r7,r6,r2
    5774:	3108983a 	sll	r4,r6,r4
    5778:	2884d83a 	srl	r2,r5,r2
    577c:	41ccb03a 	or	r6,r8,r7
    5780:	2008c03a 	cmpne	r4,r4,zero
    5784:	310cb03a 	or	r6,r6,r4
    5788:	898dc83a 	sub	r6,r17,r6
    578c:	89a3803a 	cmpltu	r17,r17,r6
    5790:	1887c83a 	sub	r3,r3,r2
    5794:	1c47c83a 	sub	r3,r3,r17
    5798:	3023883a 	mov	r17,r6
    579c:	1880202c 	andhi	r2,r3,128
    57a0:	10002326 	beq	r2,zero,5830 <__subdf3+0x20c>
    57a4:	04c02034 	movhi	r19,128
    57a8:	9cffffc4 	addi	r19,r19,-1
    57ac:	1ce6703a 	and	r19,r3,r19
    57b0:	98007a26 	beq	r19,zero,599c <__subdf3+0x378>
    57b4:	9809883a 	mov	r4,r19
    57b8:	00061240 	call	6124 <__clzsi2>
    57bc:	113ffe04 	addi	r4,r2,-8
    57c0:	00c007c4 	movi	r3,31
    57c4:	19007b16 	blt	r3,r4,59b4 <__subdf3+0x390>
    57c8:	00800804 	movi	r2,32
    57cc:	1105c83a 	sub	r2,r2,r4
    57d0:	8884d83a 	srl	r2,r17,r2
    57d4:	9906983a 	sll	r3,r19,r4
    57d8:	8922983a 	sll	r17,r17,r4
    57dc:	10c4b03a 	or	r2,r2,r3
    57e0:	24007816 	blt	r4,r16,59c4 <__subdf3+0x3a0>
    57e4:	2421c83a 	sub	r16,r4,r16
    57e8:	80c00044 	addi	r3,r16,1
    57ec:	010007c4 	movi	r4,31
    57f0:	20c09516 	blt	r4,r3,5a48 <__subdf3+0x424>
    57f4:	01400804 	movi	r5,32
    57f8:	28cbc83a 	sub	r5,r5,r3
    57fc:	88c8d83a 	srl	r4,r17,r3
    5800:	8962983a 	sll	r17,r17,r5
    5804:	114a983a 	sll	r5,r2,r5
    5808:	10c6d83a 	srl	r3,r2,r3
    580c:	8804c03a 	cmpne	r2,r17,zero
    5810:	290ab03a 	or	r5,r5,r4
    5814:	28a2b03a 	or	r17,r5,r2
    5818:	0021883a 	mov	r16,zero
    581c:	003fa206 	br	56a8 <_gp+0xffff6fb4>
    5820:	2090b03a 	or	r8,r4,r2
    5824:	40018e26 	beq	r8,zero,5e60 <__subdf3+0x83c>
    5828:	1007883a 	mov	r3,r2
    582c:	2023883a 	mov	r17,r4
    5830:	888001cc 	andi	r2,r17,7
    5834:	103f9e1e 	bne	r2,zero,56b0 <_gp+0xffff6fbc>
    5838:	1804977a 	slli	r2,r3,29
    583c:	8822d0fa 	srli	r17,r17,3
    5840:	1810d0fa 	srli	r8,r3,3
    5844:	9100004c 	andi	r4,r18,1
    5848:	1444b03a 	or	r2,r2,r17
    584c:	00c1ffc4 	movi	r3,2047
    5850:	80c02826 	beq	r16,r3,58f4 <__subdf3+0x2d0>
    5854:	01400434 	movhi	r5,16
    5858:	297fffc4 	addi	r5,r5,-1
    585c:	80e0703a 	and	r16,r16,r3
    5860:	414a703a 	and	r5,r8,r5
    5864:	003fa806 	br	5708 <_gp+0xffff7014>
    5868:	0080630e 	bge	zero,r2,59f8 <__subdf3+0x3d4>
    586c:	48003026 	beq	r9,zero,5930 <__subdf3+0x30c>
    5870:	0101ffc4 	movi	r4,2047
    5874:	813f8c26 	beq	r16,r4,56a8 <_gp+0xffff6fb4>
    5878:	29402034 	orhi	r5,r5,128
    587c:	01000e04 	movi	r4,56
    5880:	2080a90e 	bge	r4,r2,5b28 <__subdf3+0x504>
    5884:	298cb03a 	or	r6,r5,r6
    5888:	3012c03a 	cmpne	r9,r6,zero
    588c:	0005883a 	mov	r2,zero
    5890:	4c53883a 	add	r9,r9,r17
    5894:	4c63803a 	cmpltu	r17,r9,r17
    5898:	10c7883a 	add	r3,r2,r3
    589c:	88c7883a 	add	r3,r17,r3
    58a0:	4823883a 	mov	r17,r9
    58a4:	1880202c 	andhi	r2,r3,128
    58a8:	1000d026 	beq	r2,zero,5bec <__subdf3+0x5c8>
    58ac:	84000044 	addi	r16,r16,1
    58b0:	0081ffc4 	movi	r2,2047
    58b4:	8080fe26 	beq	r16,r2,5cb0 <__subdf3+0x68c>
    58b8:	00bfe034 	movhi	r2,65408
    58bc:	10bfffc4 	addi	r2,r2,-1
    58c0:	1886703a 	and	r3,r3,r2
    58c4:	880ad07a 	srli	r5,r17,1
    58c8:	180497fa 	slli	r2,r3,31
    58cc:	8900004c 	andi	r4,r17,1
    58d0:	2922b03a 	or	r17,r5,r4
    58d4:	1806d07a 	srli	r3,r3,1
    58d8:	1462b03a 	or	r17,r2,r17
    58dc:	3825883a 	mov	r18,r7
    58e0:	003f7106 	br	56a8 <_gp+0xffff6fb4>
    58e4:	2984b03a 	or	r2,r5,r6
    58e8:	103f6826 	beq	r2,zero,568c <_gp+0xffff6f98>
    58ec:	39c03fcc 	andi	r7,r7,255
    58f0:	003f6706 	br	5690 <_gp+0xffff6f9c>
    58f4:	4086b03a 	or	r3,r8,r2
    58f8:	18015226 	beq	r3,zero,5e44 <__subdf3+0x820>
    58fc:	00c00434 	movhi	r3,16
    5900:	41400234 	orhi	r5,r8,8
    5904:	18ffffc4 	addi	r3,r3,-1
    5908:	28ca703a 	and	r5,r5,r3
    590c:	003f7e06 	br	5708 <_gp+0xffff7014>
    5910:	10bfffc4 	addi	r2,r2,-1
    5914:	1000491e 	bne	r2,zero,5a3c <__subdf3+0x418>
    5918:	898fc83a 	sub	r7,r17,r6
    591c:	89e3803a 	cmpltu	r17,r17,r7
    5920:	1947c83a 	sub	r3,r3,r5
    5924:	1c47c83a 	sub	r3,r3,r17
    5928:	3823883a 	mov	r17,r7
    592c:	003f9b06 	br	579c <_gp+0xffff70a8>
    5930:	2988b03a 	or	r4,r5,r6
    5934:	203f5c26 	beq	r4,zero,56a8 <_gp+0xffff6fb4>
    5938:	10bfffc4 	addi	r2,r2,-1
    593c:	1000931e 	bne	r2,zero,5b8c <__subdf3+0x568>
    5940:	898d883a 	add	r6,r17,r6
    5944:	3463803a 	cmpltu	r17,r6,r17
    5948:	1947883a 	add	r3,r3,r5
    594c:	88c7883a 	add	r3,r17,r3
    5950:	3023883a 	mov	r17,r6
    5954:	003fd306 	br	58a4 <_gp+0xffff71b0>
    5958:	1000541e 	bne	r2,zero,5aac <__subdf3+0x488>
    595c:	80800044 	addi	r2,r16,1
    5960:	1081ffcc 	andi	r2,r2,2047
    5964:	01000044 	movi	r4,1
    5968:	2080a20e 	bge	r4,r2,5bf4 <__subdf3+0x5d0>
    596c:	8989c83a 	sub	r4,r17,r6
    5970:	8905803a 	cmpltu	r2,r17,r4
    5974:	1967c83a 	sub	r19,r3,r5
    5978:	98a7c83a 	sub	r19,r19,r2
    597c:	9880202c 	andhi	r2,r19,128
    5980:	10006326 	beq	r2,zero,5b10 <__subdf3+0x4ec>
    5984:	3463c83a 	sub	r17,r6,r17
    5988:	28c7c83a 	sub	r3,r5,r3
    598c:	344d803a 	cmpltu	r6,r6,r17
    5990:	19a7c83a 	sub	r19,r3,r6
    5994:	3825883a 	mov	r18,r7
    5998:	983f861e 	bne	r19,zero,57b4 <_gp+0xffff70c0>
    599c:	8809883a 	mov	r4,r17
    59a0:	00061240 	call	6124 <__clzsi2>
    59a4:	10800804 	addi	r2,r2,32
    59a8:	113ffe04 	addi	r4,r2,-8
    59ac:	00c007c4 	movi	r3,31
    59b0:	193f850e 	bge	r3,r4,57c8 <_gp+0xffff70d4>
    59b4:	10bff604 	addi	r2,r2,-40
    59b8:	8884983a 	sll	r2,r17,r2
    59bc:	0023883a 	mov	r17,zero
    59c0:	243f880e 	bge	r4,r16,57e4 <_gp+0xffff70f0>
    59c4:	00ffe034 	movhi	r3,65408
    59c8:	18ffffc4 	addi	r3,r3,-1
    59cc:	8121c83a 	sub	r16,r16,r4
    59d0:	10c6703a 	and	r3,r2,r3
    59d4:	003f3406 	br	56a8 <_gp+0xffff6fb4>
    59d8:	9100004c 	andi	r4,r18,1
    59dc:	000b883a 	mov	r5,zero
    59e0:	0005883a 	mov	r2,zero
    59e4:	003f4806 	br	5708 <_gp+0xffff7014>
    59e8:	298cb03a 	or	r6,r5,r6
    59ec:	300cc03a 	cmpne	r6,r6,zero
    59f0:	0005883a 	mov	r2,zero
    59f4:	003f6406 	br	5788 <_gp+0xffff7094>
    59f8:	10009a1e 	bne	r2,zero,5c64 <__subdf3+0x640>
    59fc:	82400044 	addi	r9,r16,1
    5a00:	4881ffcc 	andi	r2,r9,2047
    5a04:	02800044 	movi	r10,1
    5a08:	5080670e 	bge	r10,r2,5ba8 <__subdf3+0x584>
    5a0c:	0081ffc4 	movi	r2,2047
    5a10:	4880af26 	beq	r9,r2,5cd0 <__subdf3+0x6ac>
    5a14:	898d883a 	add	r6,r17,r6
    5a18:	1945883a 	add	r2,r3,r5
    5a1c:	3447803a 	cmpltu	r3,r6,r17
    5a20:	1887883a 	add	r3,r3,r2
    5a24:	182297fa 	slli	r17,r3,31
    5a28:	300cd07a 	srli	r6,r6,1
    5a2c:	1806d07a 	srli	r3,r3,1
    5a30:	4821883a 	mov	r16,r9
    5a34:	89a2b03a 	or	r17,r17,r6
    5a38:	003f1b06 	br	56a8 <_gp+0xffff6fb4>
    5a3c:	0101ffc4 	movi	r4,2047
    5a40:	813f441e 	bne	r16,r4,5754 <_gp+0xffff7060>
    5a44:	003f1806 	br	56a8 <_gp+0xffff6fb4>
    5a48:	843ff844 	addi	r16,r16,-31
    5a4c:	01400804 	movi	r5,32
    5a50:	1408d83a 	srl	r4,r2,r16
    5a54:	19405026 	beq	r3,r5,5b98 <__subdf3+0x574>
    5a58:	01401004 	movi	r5,64
    5a5c:	28c7c83a 	sub	r3,r5,r3
    5a60:	10c4983a 	sll	r2,r2,r3
    5a64:	88a2b03a 	or	r17,r17,r2
    5a68:	8822c03a 	cmpne	r17,r17,zero
    5a6c:	2462b03a 	or	r17,r4,r17
    5a70:	0007883a 	mov	r3,zero
    5a74:	0021883a 	mov	r16,zero
    5a78:	003f6d06 	br	5830 <_gp+0xffff713c>
    5a7c:	11fff804 	addi	r7,r2,-32
    5a80:	01000804 	movi	r4,32
    5a84:	29ced83a 	srl	r7,r5,r7
    5a88:	11004526 	beq	r2,r4,5ba0 <__subdf3+0x57c>
    5a8c:	01001004 	movi	r4,64
    5a90:	2089c83a 	sub	r4,r4,r2
    5a94:	2904983a 	sll	r2,r5,r4
    5a98:	118cb03a 	or	r6,r2,r6
    5a9c:	300cc03a 	cmpne	r6,r6,zero
    5aa0:	398cb03a 	or	r6,r7,r6
    5aa4:	0005883a 	mov	r2,zero
    5aa8:	003f3706 	br	5788 <_gp+0xffff7094>
    5aac:	80002a26 	beq	r16,zero,5b58 <__subdf3+0x534>
    5ab0:	0101ffc4 	movi	r4,2047
    5ab4:	49006626 	beq	r9,r4,5c50 <__subdf3+0x62c>
    5ab8:	0085c83a 	sub	r2,zero,r2
    5abc:	18c02034 	orhi	r3,r3,128
    5ac0:	01000e04 	movi	r4,56
    5ac4:	20807e16 	blt	r4,r2,5cc0 <__subdf3+0x69c>
    5ac8:	010007c4 	movi	r4,31
    5acc:	2080e716 	blt	r4,r2,5e6c <__subdf3+0x848>
    5ad0:	01000804 	movi	r4,32
    5ad4:	2089c83a 	sub	r4,r4,r2
    5ad8:	1914983a 	sll	r10,r3,r4
    5adc:	8890d83a 	srl	r8,r17,r2
    5ae0:	8908983a 	sll	r4,r17,r4
    5ae4:	1884d83a 	srl	r2,r3,r2
    5ae8:	5222b03a 	or	r17,r10,r8
    5aec:	2006c03a 	cmpne	r3,r4,zero
    5af0:	88e2b03a 	or	r17,r17,r3
    5af4:	3463c83a 	sub	r17,r6,r17
    5af8:	2885c83a 	sub	r2,r5,r2
    5afc:	344d803a 	cmpltu	r6,r6,r17
    5b00:	1187c83a 	sub	r3,r2,r6
    5b04:	4821883a 	mov	r16,r9
    5b08:	3825883a 	mov	r18,r7
    5b0c:	003f2306 	br	579c <_gp+0xffff70a8>
    5b10:	24d0b03a 	or	r8,r4,r19
    5b14:	40001b1e 	bne	r8,zero,5b84 <__subdf3+0x560>
    5b18:	0005883a 	mov	r2,zero
    5b1c:	0009883a 	mov	r4,zero
    5b20:	0021883a 	mov	r16,zero
    5b24:	003f4906 	br	584c <_gp+0xffff7158>
    5b28:	010007c4 	movi	r4,31
    5b2c:	20803a16 	blt	r4,r2,5c18 <__subdf3+0x5f4>
    5b30:	01000804 	movi	r4,32
    5b34:	2089c83a 	sub	r4,r4,r2
    5b38:	2912983a 	sll	r9,r5,r4
    5b3c:	3090d83a 	srl	r8,r6,r2
    5b40:	3108983a 	sll	r4,r6,r4
    5b44:	2884d83a 	srl	r2,r5,r2
    5b48:	4a12b03a 	or	r9,r9,r8
    5b4c:	2008c03a 	cmpne	r4,r4,zero
    5b50:	4912b03a 	or	r9,r9,r4
    5b54:	003f4e06 	br	5890 <_gp+0xffff719c>
    5b58:	1c48b03a 	or	r4,r3,r17
    5b5c:	20003c26 	beq	r4,zero,5c50 <__subdf3+0x62c>
    5b60:	0084303a 	nor	r2,zero,r2
    5b64:	1000381e 	bne	r2,zero,5c48 <__subdf3+0x624>
    5b68:	3463c83a 	sub	r17,r6,r17
    5b6c:	28c5c83a 	sub	r2,r5,r3
    5b70:	344d803a 	cmpltu	r6,r6,r17
    5b74:	1187c83a 	sub	r3,r2,r6
    5b78:	4821883a 	mov	r16,r9
    5b7c:	3825883a 	mov	r18,r7
    5b80:	003f0606 	br	579c <_gp+0xffff70a8>
    5b84:	2023883a 	mov	r17,r4
    5b88:	003f0906 	br	57b0 <_gp+0xffff70bc>
    5b8c:	0101ffc4 	movi	r4,2047
    5b90:	813f3a1e 	bne	r16,r4,587c <_gp+0xffff7188>
    5b94:	003ec406 	br	56a8 <_gp+0xffff6fb4>
    5b98:	0005883a 	mov	r2,zero
    5b9c:	003fb106 	br	5a64 <_gp+0xffff7370>
    5ba0:	0005883a 	mov	r2,zero
    5ba4:	003fbc06 	br	5a98 <_gp+0xffff73a4>
    5ba8:	1c44b03a 	or	r2,r3,r17
    5bac:	80008e1e 	bne	r16,zero,5de8 <__subdf3+0x7c4>
    5bb0:	1000c826 	beq	r2,zero,5ed4 <__subdf3+0x8b0>
    5bb4:	2984b03a 	or	r2,r5,r6
    5bb8:	103ebb26 	beq	r2,zero,56a8 <_gp+0xffff6fb4>
    5bbc:	8989883a 	add	r4,r17,r6
    5bc0:	1945883a 	add	r2,r3,r5
    5bc4:	2447803a 	cmpltu	r3,r4,r17
    5bc8:	1887883a 	add	r3,r3,r2
    5bcc:	1880202c 	andhi	r2,r3,128
    5bd0:	2023883a 	mov	r17,r4
    5bd4:	103f1626 	beq	r2,zero,5830 <_gp+0xffff713c>
    5bd8:	00bfe034 	movhi	r2,65408
    5bdc:	10bfffc4 	addi	r2,r2,-1
    5be0:	5021883a 	mov	r16,r10
    5be4:	1886703a 	and	r3,r3,r2
    5be8:	003eaf06 	br	56a8 <_gp+0xffff6fb4>
    5bec:	3825883a 	mov	r18,r7
    5bf0:	003f0f06 	br	5830 <_gp+0xffff713c>
    5bf4:	1c44b03a 	or	r2,r3,r17
    5bf8:	8000251e 	bne	r16,zero,5c90 <__subdf3+0x66c>
    5bfc:	1000661e 	bne	r2,zero,5d98 <__subdf3+0x774>
    5c00:	2990b03a 	or	r8,r5,r6
    5c04:	40009626 	beq	r8,zero,5e60 <__subdf3+0x83c>
    5c08:	2807883a 	mov	r3,r5
    5c0c:	3023883a 	mov	r17,r6
    5c10:	3825883a 	mov	r18,r7
    5c14:	003ea406 	br	56a8 <_gp+0xffff6fb4>
    5c18:	127ff804 	addi	r9,r2,-32
    5c1c:	01000804 	movi	r4,32
    5c20:	2a52d83a 	srl	r9,r5,r9
    5c24:	11008c26 	beq	r2,r4,5e58 <__subdf3+0x834>
    5c28:	01001004 	movi	r4,64
    5c2c:	2085c83a 	sub	r2,r4,r2
    5c30:	2884983a 	sll	r2,r5,r2
    5c34:	118cb03a 	or	r6,r2,r6
    5c38:	300cc03a 	cmpne	r6,r6,zero
    5c3c:	4992b03a 	or	r9,r9,r6
    5c40:	0005883a 	mov	r2,zero
    5c44:	003f1206 	br	5890 <_gp+0xffff719c>
    5c48:	0101ffc4 	movi	r4,2047
    5c4c:	493f9c1e 	bne	r9,r4,5ac0 <_gp+0xffff73cc>
    5c50:	2807883a 	mov	r3,r5
    5c54:	3023883a 	mov	r17,r6
    5c58:	4821883a 	mov	r16,r9
    5c5c:	3825883a 	mov	r18,r7
    5c60:	003e9106 	br	56a8 <_gp+0xffff6fb4>
    5c64:	80001f1e 	bne	r16,zero,5ce4 <__subdf3+0x6c0>
    5c68:	1c48b03a 	or	r4,r3,r17
    5c6c:	20005a26 	beq	r4,zero,5dd8 <__subdf3+0x7b4>
    5c70:	0084303a 	nor	r2,zero,r2
    5c74:	1000561e 	bne	r2,zero,5dd0 <__subdf3+0x7ac>
    5c78:	89a3883a 	add	r17,r17,r6
    5c7c:	1945883a 	add	r2,r3,r5
    5c80:	898d803a 	cmpltu	r6,r17,r6
    5c84:	3087883a 	add	r3,r6,r2
    5c88:	4821883a 	mov	r16,r9
    5c8c:	003f0506 	br	58a4 <_gp+0xffff71b0>
    5c90:	10002b1e 	bne	r2,zero,5d40 <__subdf3+0x71c>
    5c94:	2984b03a 	or	r2,r5,r6
    5c98:	10008026 	beq	r2,zero,5e9c <__subdf3+0x878>
    5c9c:	2807883a 	mov	r3,r5
    5ca0:	3023883a 	mov	r17,r6
    5ca4:	3825883a 	mov	r18,r7
    5ca8:	0401ffc4 	movi	r16,2047
    5cac:	003e7e06 	br	56a8 <_gp+0xffff6fb4>
    5cb0:	3809883a 	mov	r4,r7
    5cb4:	0011883a 	mov	r8,zero
    5cb8:	0005883a 	mov	r2,zero
    5cbc:	003ee306 	br	584c <_gp+0xffff7158>
    5cc0:	1c62b03a 	or	r17,r3,r17
    5cc4:	8822c03a 	cmpne	r17,r17,zero
    5cc8:	0005883a 	mov	r2,zero
    5ccc:	003f8906 	br	5af4 <_gp+0xffff7400>
    5cd0:	3809883a 	mov	r4,r7
    5cd4:	4821883a 	mov	r16,r9
    5cd8:	0011883a 	mov	r8,zero
    5cdc:	0005883a 	mov	r2,zero
    5ce0:	003eda06 	br	584c <_gp+0xffff7158>
    5ce4:	0101ffc4 	movi	r4,2047
    5ce8:	49003b26 	beq	r9,r4,5dd8 <__subdf3+0x7b4>
    5cec:	0085c83a 	sub	r2,zero,r2
    5cf0:	18c02034 	orhi	r3,r3,128
    5cf4:	01000e04 	movi	r4,56
    5cf8:	20806e16 	blt	r4,r2,5eb4 <__subdf3+0x890>
    5cfc:	010007c4 	movi	r4,31
    5d00:	20807716 	blt	r4,r2,5ee0 <__subdf3+0x8bc>
    5d04:	01000804 	movi	r4,32
    5d08:	2089c83a 	sub	r4,r4,r2
    5d0c:	1914983a 	sll	r10,r3,r4
    5d10:	8890d83a 	srl	r8,r17,r2
    5d14:	8908983a 	sll	r4,r17,r4
    5d18:	1884d83a 	srl	r2,r3,r2
    5d1c:	5222b03a 	or	r17,r10,r8
    5d20:	2006c03a 	cmpne	r3,r4,zero
    5d24:	88e2b03a 	or	r17,r17,r3
    5d28:	89a3883a 	add	r17,r17,r6
    5d2c:	1145883a 	add	r2,r2,r5
    5d30:	898d803a 	cmpltu	r6,r17,r6
    5d34:	3087883a 	add	r3,r6,r2
    5d38:	4821883a 	mov	r16,r9
    5d3c:	003ed906 	br	58a4 <_gp+0xffff71b0>
    5d40:	2984b03a 	or	r2,r5,r6
    5d44:	10004226 	beq	r2,zero,5e50 <__subdf3+0x82c>
    5d48:	1808d0fa 	srli	r4,r3,3
    5d4c:	8822d0fa 	srli	r17,r17,3
    5d50:	1806977a 	slli	r3,r3,29
    5d54:	2080022c 	andhi	r2,r4,8
    5d58:	1c62b03a 	or	r17,r3,r17
    5d5c:	10000826 	beq	r2,zero,5d80 <__subdf3+0x75c>
    5d60:	2812d0fa 	srli	r9,r5,3
    5d64:	4880022c 	andhi	r2,r9,8
    5d68:	1000051e 	bne	r2,zero,5d80 <__subdf3+0x75c>
    5d6c:	300cd0fa 	srli	r6,r6,3
    5d70:	2804977a 	slli	r2,r5,29
    5d74:	4809883a 	mov	r4,r9
    5d78:	3825883a 	mov	r18,r7
    5d7c:	11a2b03a 	or	r17,r2,r6
    5d80:	8806d77a 	srli	r3,r17,29
    5d84:	200890fa 	slli	r4,r4,3
    5d88:	882290fa 	slli	r17,r17,3
    5d8c:	0401ffc4 	movi	r16,2047
    5d90:	1906b03a 	or	r3,r3,r4
    5d94:	003e4406 	br	56a8 <_gp+0xffff6fb4>
    5d98:	2984b03a 	or	r2,r5,r6
    5d9c:	103e4226 	beq	r2,zero,56a8 <_gp+0xffff6fb4>
    5da0:	8989c83a 	sub	r4,r17,r6
    5da4:	8911803a 	cmpltu	r8,r17,r4
    5da8:	1945c83a 	sub	r2,r3,r5
    5dac:	1205c83a 	sub	r2,r2,r8
    5db0:	1200202c 	andhi	r8,r2,128
    5db4:	403e9a26 	beq	r8,zero,5820 <_gp+0xffff712c>
    5db8:	3463c83a 	sub	r17,r6,r17
    5dbc:	28c5c83a 	sub	r2,r5,r3
    5dc0:	344d803a 	cmpltu	r6,r6,r17
    5dc4:	1187c83a 	sub	r3,r2,r6
    5dc8:	3825883a 	mov	r18,r7
    5dcc:	003e3606 	br	56a8 <_gp+0xffff6fb4>
    5dd0:	0101ffc4 	movi	r4,2047
    5dd4:	493fc71e 	bne	r9,r4,5cf4 <_gp+0xffff7600>
    5dd8:	2807883a 	mov	r3,r5
    5ddc:	3023883a 	mov	r17,r6
    5de0:	4821883a 	mov	r16,r9
    5de4:	003e3006 	br	56a8 <_gp+0xffff6fb4>
    5de8:	10003626 	beq	r2,zero,5ec4 <__subdf3+0x8a0>
    5dec:	2984b03a 	or	r2,r5,r6
    5df0:	10001726 	beq	r2,zero,5e50 <__subdf3+0x82c>
    5df4:	1808d0fa 	srli	r4,r3,3
    5df8:	8822d0fa 	srli	r17,r17,3
    5dfc:	1806977a 	slli	r3,r3,29
    5e00:	2080022c 	andhi	r2,r4,8
    5e04:	1c62b03a 	or	r17,r3,r17
    5e08:	10000726 	beq	r2,zero,5e28 <__subdf3+0x804>
    5e0c:	2812d0fa 	srli	r9,r5,3
    5e10:	4880022c 	andhi	r2,r9,8
    5e14:	1000041e 	bne	r2,zero,5e28 <__subdf3+0x804>
    5e18:	300cd0fa 	srli	r6,r6,3
    5e1c:	2804977a 	slli	r2,r5,29
    5e20:	4809883a 	mov	r4,r9
    5e24:	11a2b03a 	or	r17,r2,r6
    5e28:	8806d77a 	srli	r3,r17,29
    5e2c:	200890fa 	slli	r4,r4,3
    5e30:	882290fa 	slli	r17,r17,3
    5e34:	3825883a 	mov	r18,r7
    5e38:	1906b03a 	or	r3,r3,r4
    5e3c:	0401ffc4 	movi	r16,2047
    5e40:	003e1906 	br	56a8 <_gp+0xffff6fb4>
    5e44:	000b883a 	mov	r5,zero
    5e48:	0005883a 	mov	r2,zero
    5e4c:	003e2e06 	br	5708 <_gp+0xffff7014>
    5e50:	0401ffc4 	movi	r16,2047
    5e54:	003e1406 	br	56a8 <_gp+0xffff6fb4>
    5e58:	0005883a 	mov	r2,zero
    5e5c:	003f7506 	br	5c34 <_gp+0xffff7540>
    5e60:	0005883a 	mov	r2,zero
    5e64:	0009883a 	mov	r4,zero
    5e68:	003e7806 	br	584c <_gp+0xffff7158>
    5e6c:	123ff804 	addi	r8,r2,-32
    5e70:	01000804 	movi	r4,32
    5e74:	1a10d83a 	srl	r8,r3,r8
    5e78:	11002526 	beq	r2,r4,5f10 <__subdf3+0x8ec>
    5e7c:	01001004 	movi	r4,64
    5e80:	2085c83a 	sub	r2,r4,r2
    5e84:	1884983a 	sll	r2,r3,r2
    5e88:	1444b03a 	or	r2,r2,r17
    5e8c:	1004c03a 	cmpne	r2,r2,zero
    5e90:	40a2b03a 	or	r17,r8,r2
    5e94:	0005883a 	mov	r2,zero
    5e98:	003f1606 	br	5af4 <_gp+0xffff7400>
    5e9c:	02000434 	movhi	r8,16
    5ea0:	0009883a 	mov	r4,zero
    5ea4:	423fffc4 	addi	r8,r8,-1
    5ea8:	00bfffc4 	movi	r2,-1
    5eac:	0401ffc4 	movi	r16,2047
    5eb0:	003e6606 	br	584c <_gp+0xffff7158>
    5eb4:	1c62b03a 	or	r17,r3,r17
    5eb8:	8822c03a 	cmpne	r17,r17,zero
    5ebc:	0005883a 	mov	r2,zero
    5ec0:	003f9906 	br	5d28 <_gp+0xffff7634>
    5ec4:	2807883a 	mov	r3,r5
    5ec8:	3023883a 	mov	r17,r6
    5ecc:	0401ffc4 	movi	r16,2047
    5ed0:	003df506 	br	56a8 <_gp+0xffff6fb4>
    5ed4:	2807883a 	mov	r3,r5
    5ed8:	3023883a 	mov	r17,r6
    5edc:	003df206 	br	56a8 <_gp+0xffff6fb4>
    5ee0:	123ff804 	addi	r8,r2,-32
    5ee4:	01000804 	movi	r4,32
    5ee8:	1a10d83a 	srl	r8,r3,r8
    5eec:	11000a26 	beq	r2,r4,5f18 <__subdf3+0x8f4>
    5ef0:	01001004 	movi	r4,64
    5ef4:	2085c83a 	sub	r2,r4,r2
    5ef8:	1884983a 	sll	r2,r3,r2
    5efc:	1444b03a 	or	r2,r2,r17
    5f00:	1004c03a 	cmpne	r2,r2,zero
    5f04:	40a2b03a 	or	r17,r8,r2
    5f08:	0005883a 	mov	r2,zero
    5f0c:	003f8606 	br	5d28 <_gp+0xffff7634>
    5f10:	0005883a 	mov	r2,zero
    5f14:	003fdc06 	br	5e88 <_gp+0xffff7794>
    5f18:	0005883a 	mov	r2,zero
    5f1c:	003ff706 	br	5efc <_gp+0xffff7808>

00005f20 <__fixdfsi>:
    5f20:	280cd53a 	srli	r6,r5,20
    5f24:	00c00434 	movhi	r3,16
    5f28:	18ffffc4 	addi	r3,r3,-1
    5f2c:	3181ffcc 	andi	r6,r6,2047
    5f30:	01c0ff84 	movi	r7,1022
    5f34:	28c6703a 	and	r3,r5,r3
    5f38:	280ad7fa 	srli	r5,r5,31
    5f3c:	3980120e 	bge	r7,r6,5f88 <__fixdfsi+0x68>
    5f40:	00810744 	movi	r2,1053
    5f44:	11800c16 	blt	r2,r6,5f78 <__fixdfsi+0x58>
    5f48:	00810cc4 	movi	r2,1075
    5f4c:	1185c83a 	sub	r2,r2,r6
    5f50:	01c007c4 	movi	r7,31
    5f54:	18c00434 	orhi	r3,r3,16
    5f58:	38800d16 	blt	r7,r2,5f90 <__fixdfsi+0x70>
    5f5c:	31befb44 	addi	r6,r6,-1043
    5f60:	2084d83a 	srl	r2,r4,r2
    5f64:	1986983a 	sll	r3,r3,r6
    5f68:	1884b03a 	or	r2,r3,r2
    5f6c:	28000726 	beq	r5,zero,5f8c <__fixdfsi+0x6c>
    5f70:	0085c83a 	sub	r2,zero,r2
    5f74:	f800283a 	ret
    5f78:	00a00034 	movhi	r2,32768
    5f7c:	10bfffc4 	addi	r2,r2,-1
    5f80:	2885883a 	add	r2,r5,r2
    5f84:	f800283a 	ret
    5f88:	0005883a 	mov	r2,zero
    5f8c:	f800283a 	ret
    5f90:	008104c4 	movi	r2,1043
    5f94:	1185c83a 	sub	r2,r2,r6
    5f98:	1884d83a 	srl	r2,r3,r2
    5f9c:	003ff306 	br	5f6c <_gp+0xffff7878>

00005fa0 <__floatsidf>:
    5fa0:	defffd04 	addi	sp,sp,-12
    5fa4:	dfc00215 	stw	ra,8(sp)
    5fa8:	dc400115 	stw	r17,4(sp)
    5fac:	dc000015 	stw	r16,0(sp)
    5fb0:	20002b26 	beq	r4,zero,6060 <__floatsidf+0xc0>
    5fb4:	2023883a 	mov	r17,r4
    5fb8:	2020d7fa 	srli	r16,r4,31
    5fbc:	20002d16 	blt	r4,zero,6074 <__floatsidf+0xd4>
    5fc0:	8809883a 	mov	r4,r17
    5fc4:	00061240 	call	6124 <__clzsi2>
    5fc8:	01410784 	movi	r5,1054
    5fcc:	288bc83a 	sub	r5,r5,r2
    5fd0:	01010cc4 	movi	r4,1075
    5fd4:	2149c83a 	sub	r4,r4,r5
    5fd8:	00c007c4 	movi	r3,31
    5fdc:	1900160e 	bge	r3,r4,6038 <__floatsidf+0x98>
    5fe0:	00c104c4 	movi	r3,1043
    5fe4:	1947c83a 	sub	r3,r3,r5
    5fe8:	88c6983a 	sll	r3,r17,r3
    5fec:	00800434 	movhi	r2,16
    5ff0:	10bfffc4 	addi	r2,r2,-1
    5ff4:	1886703a 	and	r3,r3,r2
    5ff8:	2941ffcc 	andi	r5,r5,2047
    5ffc:	800d883a 	mov	r6,r16
    6000:	0005883a 	mov	r2,zero
    6004:	280a953a 	slli	r5,r5,20
    6008:	31803fcc 	andi	r6,r6,255
    600c:	01000434 	movhi	r4,16
    6010:	300c97fa 	slli	r6,r6,31
    6014:	213fffc4 	addi	r4,r4,-1
    6018:	1906703a 	and	r3,r3,r4
    601c:	1946b03a 	or	r3,r3,r5
    6020:	1986b03a 	or	r3,r3,r6
    6024:	dfc00217 	ldw	ra,8(sp)
    6028:	dc400117 	ldw	r17,4(sp)
    602c:	dc000017 	ldw	r16,0(sp)
    6030:	dec00304 	addi	sp,sp,12
    6034:	f800283a 	ret
    6038:	00c002c4 	movi	r3,11
    603c:	1887c83a 	sub	r3,r3,r2
    6040:	88c6d83a 	srl	r3,r17,r3
    6044:	8904983a 	sll	r2,r17,r4
    6048:	01000434 	movhi	r4,16
    604c:	213fffc4 	addi	r4,r4,-1
    6050:	2941ffcc 	andi	r5,r5,2047
    6054:	1906703a 	and	r3,r3,r4
    6058:	800d883a 	mov	r6,r16
    605c:	003fe906 	br	6004 <_gp+0xffff7910>
    6060:	000d883a 	mov	r6,zero
    6064:	000b883a 	mov	r5,zero
    6068:	0007883a 	mov	r3,zero
    606c:	0005883a 	mov	r2,zero
    6070:	003fe406 	br	6004 <_gp+0xffff7910>
    6074:	0123c83a 	sub	r17,zero,r4
    6078:	003fd106 	br	5fc0 <_gp+0xffff78cc>

0000607c <__floatunsidf>:
    607c:	defffe04 	addi	sp,sp,-8
    6080:	dc000015 	stw	r16,0(sp)
    6084:	dfc00115 	stw	ra,4(sp)
    6088:	2021883a 	mov	r16,r4
    608c:	20002226 	beq	r4,zero,6118 <__floatunsidf+0x9c>
    6090:	00061240 	call	6124 <__clzsi2>
    6094:	01010784 	movi	r4,1054
    6098:	2089c83a 	sub	r4,r4,r2
    609c:	01810cc4 	movi	r6,1075
    60a0:	310dc83a 	sub	r6,r6,r4
    60a4:	00c007c4 	movi	r3,31
    60a8:	1980120e 	bge	r3,r6,60f4 <__floatunsidf+0x78>
    60ac:	00c104c4 	movi	r3,1043
    60b0:	1907c83a 	sub	r3,r3,r4
    60b4:	80ca983a 	sll	r5,r16,r3
    60b8:	00800434 	movhi	r2,16
    60bc:	10bfffc4 	addi	r2,r2,-1
    60c0:	2101ffcc 	andi	r4,r4,2047
    60c4:	0021883a 	mov	r16,zero
    60c8:	288a703a 	and	r5,r5,r2
    60cc:	2008953a 	slli	r4,r4,20
    60d0:	00c00434 	movhi	r3,16
    60d4:	18ffffc4 	addi	r3,r3,-1
    60d8:	28c6703a 	and	r3,r5,r3
    60dc:	8005883a 	mov	r2,r16
    60e0:	1906b03a 	or	r3,r3,r4
    60e4:	dfc00117 	ldw	ra,4(sp)
    60e8:	dc000017 	ldw	r16,0(sp)
    60ec:	dec00204 	addi	sp,sp,8
    60f0:	f800283a 	ret
    60f4:	00c002c4 	movi	r3,11
    60f8:	188bc83a 	sub	r5,r3,r2
    60fc:	814ad83a 	srl	r5,r16,r5
    6100:	00c00434 	movhi	r3,16
    6104:	18ffffc4 	addi	r3,r3,-1
    6108:	81a0983a 	sll	r16,r16,r6
    610c:	2101ffcc 	andi	r4,r4,2047
    6110:	28ca703a 	and	r5,r5,r3
    6114:	003fed06 	br	60cc <_gp+0xffff79d8>
    6118:	0009883a 	mov	r4,zero
    611c:	000b883a 	mov	r5,zero
    6120:	003fea06 	br	60cc <_gp+0xffff79d8>

00006124 <__clzsi2>:
    6124:	00bfffd4 	movui	r2,65535
    6128:	11000536 	bltu	r2,r4,6140 <__clzsi2+0x1c>
    612c:	00803fc4 	movi	r2,255
    6130:	11000f36 	bltu	r2,r4,6170 <__clzsi2+0x4c>
    6134:	00800804 	movi	r2,32
    6138:	0007883a 	mov	r3,zero
    613c:	00000506 	br	6154 <__clzsi2+0x30>
    6140:	00804034 	movhi	r2,256
    6144:	10bfffc4 	addi	r2,r2,-1
    6148:	11000c2e 	bgeu	r2,r4,617c <__clzsi2+0x58>
    614c:	00800204 	movi	r2,8
    6150:	00c00604 	movi	r3,24
    6154:	20c8d83a 	srl	r4,r4,r3
    6158:	00c00034 	movhi	r3,0
    615c:	18d97d04 	addi	r3,r3,26100
    6160:	1909883a 	add	r4,r3,r4
    6164:	20c00003 	ldbu	r3,0(r4)
    6168:	10c5c83a 	sub	r2,r2,r3
    616c:	f800283a 	ret
    6170:	00800604 	movi	r2,24
    6174:	00c00204 	movi	r3,8
    6178:	003ff606 	br	6154 <_gp+0xffff7a60>
    617c:	00800404 	movi	r2,16
    6180:	1007883a 	mov	r3,r2
    6184:	003ff306 	br	6154 <_gp+0xffff7a60>

00006188 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    6188:	00062141 	jmpi	6214 <alt_iic_isr_register>

0000618c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    618c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6190:	00bfff84 	movi	r2,-2
    6194:	2084703a 	and	r2,r4,r2
    6198:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    619c:	00c00044 	movi	r3,1
    61a0:	d0a00417 	ldw	r2,-32752(gp)
    61a4:	194a983a 	sll	r5,r3,r5
    61a8:	288ab03a 	or	r5,r5,r2
    61ac:	d1600415 	stw	r5,-32752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    61b0:	d0a00417 	ldw	r2,-32752(gp)
    61b4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    61b8:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    61bc:	0005883a 	mov	r2,zero
    61c0:	f800283a 	ret

000061c4 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    61c4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    61c8:	00bfff84 	movi	r2,-2
    61cc:	2084703a 	and	r2,r4,r2
    61d0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    61d4:	00ffff84 	movi	r3,-2
    61d8:	d0a00417 	ldw	r2,-32752(gp)
    61dc:	194a183a 	rol	r5,r3,r5
    61e0:	288a703a 	and	r5,r5,r2
    61e4:	d1600415 	stw	r5,-32752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    61e8:	d0a00417 	ldw	r2,-32752(gp)
    61ec:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    61f0:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    61f4:	0005883a 	mov	r2,zero
    61f8:	f800283a 	ret

000061fc <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    61fc:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    6200:	00800044 	movi	r2,1
    6204:	1144983a 	sll	r2,r2,r5
    6208:	10c4703a 	and	r2,r2,r3
}
    620c:	1004c03a 	cmpne	r2,r2,zero
    6210:	f800283a 	ret

00006214 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    6214:	00c007c4 	movi	r3,31
    6218:	19401616 	blt	r3,r5,6274 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    621c:	defffe04 	addi	sp,sp,-8
    6220:	dfc00115 	stw	ra,4(sp)
    6224:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6228:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    622c:	00ffff84 	movi	r3,-2
    6230:	80c6703a 	and	r3,r16,r3
    6234:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    6238:	280490fa 	slli	r2,r5,3
    623c:	00c00034 	movhi	r3,0
    6240:	18d9c604 	addi	r3,r3,26392
    6244:	1885883a 	add	r2,r3,r2
    6248:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    624c:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    6250:	30000226 	beq	r6,zero,625c <alt_iic_isr_register+0x48>
    6254:	000618c0 	call	618c <alt_ic_irq_enable>
    6258:	00000106 	br	6260 <alt_iic_isr_register+0x4c>
    625c:	00061c40 	call	61c4 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6260:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    6264:	dfc00117 	ldw	ra,4(sp)
    6268:	dc000017 	ldw	r16,0(sp)
    626c:	dec00204 	addi	sp,sp,8
    6270:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    6274:	00bffa84 	movi	r2,-22
    6278:	f800283a 	ret

0000627c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    627c:	deffff04 	addi	sp,sp,-4
    6280:	01000034 	movhi	r4,0
    6284:	01400034 	movhi	r5,0
    6288:	dfc00015 	stw	ra,0(sp)
    628c:	2119bd04 	addi	r4,r4,26356
    6290:	2959bf04 	addi	r5,r5,26364

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    6294:	2140061e 	bne	r4,r5,62b0 <alt_load+0x34>
    6298:	01000034 	movhi	r4,0
    629c:	01400034 	movhi	r5,0
    62a0:	21000804 	addi	r4,r4,32
    62a4:	29400804 	addi	r5,r5,32
    62a8:	2140121e 	bne	r4,r5,62f4 <alt_load+0x78>
    62ac:	00000b06 	br	62dc <alt_load+0x60>
    62b0:	00c00034 	movhi	r3,0
    62b4:	18d9bf04 	addi	r3,r3,26364
    62b8:	1907c83a 	sub	r3,r3,r4
    62bc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    62c0:	10fff526 	beq	r2,r3,6298 <_gp+0xffff7ba4>
    {
      *to++ = *from++;
    62c4:	114f883a 	add	r7,r2,r5
    62c8:	39c00017 	ldw	r7,0(r7)
    62cc:	110d883a 	add	r6,r2,r4
    62d0:	10800104 	addi	r2,r2,4
    62d4:	31c00015 	stw	r7,0(r6)
    62d8:	003ff906 	br	62c0 <_gp+0xffff7bcc>
    62dc:	01000034 	movhi	r4,0
    62e0:	01400034 	movhi	r5,0
    62e4:	21194e04 	addi	r4,r4,25912
    62e8:	29594e04 	addi	r5,r5,25912

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    62ec:	2140101e 	bne	r4,r5,6330 <alt_load+0xb4>
    62f0:	00000b06 	br	6320 <alt_load+0xa4>
    62f4:	00c00034 	movhi	r3,0
    62f8:	18c06004 	addi	r3,r3,384
    62fc:	1907c83a 	sub	r3,r3,r4
    6300:	0005883a 	mov	r2,zero
  {
    while( to != end )
    6304:	10fff526 	beq	r2,r3,62dc <_gp+0xffff7be8>
    {
      *to++ = *from++;
    6308:	114f883a 	add	r7,r2,r5
    630c:	39c00017 	ldw	r7,0(r7)
    6310:	110d883a 	add	r6,r2,r4
    6314:	10800104 	addi	r2,r2,4
    6318:	31c00015 	stw	r7,0(r6)
    631c:	003ff906 	br	6304 <_gp+0xffff7c10>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    6320:	00064b40 	call	64b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    6324:	dfc00017 	ldw	ra,0(sp)
    6328:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    632c:	00064b81 	jmpi	64b8 <alt_icache_flush_all>
    6330:	00c00034 	movhi	r3,0
    6334:	18d9bd04 	addi	r3,r3,26356
    6338:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    633c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    6340:	18bff726 	beq	r3,r2,6320 <_gp+0xffff7c2c>
    {
      *to++ = *from++;
    6344:	114f883a 	add	r7,r2,r5
    6348:	39c00017 	ldw	r7,0(r7)
    634c:	110d883a 	add	r6,r2,r4
    6350:	10800104 	addi	r2,r2,4
    6354:	31c00015 	stw	r7,0(r6)
    6358:	003ff906 	br	6340 <_gp+0xffff7c4c>

0000635c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    635c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    6360:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    6364:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    6368:	00063d40 	call	63d4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    636c:	00063f40 	call	63f4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    6370:	d1a00517 	ldw	r6,-32748(gp)
    6374:	d1600617 	ldw	r5,-32744(gp)
    6378:	d1200717 	ldw	r4,-32740(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    637c:	dfc00017 	ldw	ra,0(sp)
    6380:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    6384:	00003a81 	jmpi	3a8 <main>

00006388 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    6388:	defffd04 	addi	sp,sp,-12
    638c:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    6390:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    6394:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    6398:	01000034 	movhi	r4,0
    639c:	000f883a 	mov	r7,zero
    63a0:	01800044 	movi	r6,1
    63a4:	d80b883a 	mov	r5,sp
    63a8:	2119be04 	addi	r4,r4,26360
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    63ac:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    63b0:	00063f80 	call	63f8 <altera_avalon_jtag_uart_write>
    63b4:	00ffffc4 	movi	r3,-1
    63b8:	10c00126 	beq	r2,r3,63c0 <alt_putchar+0x38>
        return -1;
    }
    return c;
    63bc:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    63c0:	dfc00217 	ldw	ra,8(sp)
    63c4:	dc000117 	ldw	r16,4(sp)
    63c8:	dec00304 	addi	sp,sp,12
    63cc:	f800283a 	ret

000063d0 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    63d0:	000642c1 	jmpi	642c <alt_busy_sleep>

000063d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    63d4:	deffff04 	addi	sp,sp,-4
    63d8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, nios);
    63dc:	00065300 	call	6530 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    63e0:	00800044 	movi	r2,1
    63e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    63e8:	dfc00017 	ldw	ra,0(sp)
    63ec:	dec00104 	addi	sp,sp,4
    63f0:	f800283a 	ret

000063f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    63f4:	f800283a 	ret

000063f8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    63f8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    63fc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    6400:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    6404:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    6408:	2980072e 	bgeu	r5,r6,6428 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    640c:	38c00037 	ldwio	r3,0(r7)
    6410:	18ffffec 	andhi	r3,r3,65535
    6414:	183ffc26 	beq	r3,zero,6408 <_gp+0xffff7d14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    6418:	28c00007 	ldb	r3,0(r5)
    641c:	20c00035 	stwio	r3,0(r4)
    6420:	29400044 	addi	r5,r5,1
    6424:	003ff806 	br	6408 <_gp+0xffff7d14>

  return count;
}
    6428:	f800283a 	ret

0000642c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    642c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    6430:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    6434:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    6438:	dc000015 	stw	r16,0(sp)
    643c:	dfc00115 	stw	ra,4(sp)
    6440:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    6444:	0002e180 	call	2e18 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    6448:	10001026 	beq	r2,zero,648c <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    644c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    6450:	013999b4 	movhi	r4,58982
    6454:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    6458:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    645c:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    6460:	297fffc4 	addi	r5,r5,-1
    6464:	283ffe1e 	bne	r5,zero,6460 <_gp+0xffff7d6c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    6468:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    646c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    6470:	18bffb16 	blt	r3,r2,6460 <_gp+0xffff7d6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    6474:	01400144 	movi	r5,5
    6478:	8009883a 	mov	r4,r16
    647c:	0002ed40 	call	2ed4 <__mulsi3>
    6480:	10bfffc4 	addi	r2,r2,-1
    6484:	103ffe1e 	bne	r2,zero,6480 <_gp+0xffff7d8c>
    6488:	00000506 	br	64a0 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    648c:	01400144 	movi	r5,5
    6490:	8009883a 	mov	r4,r16
    6494:	0002ed40 	call	2ed4 <__mulsi3>
    6498:	10bfffc4 	addi	r2,r2,-1
    649c:	00bffe16 	blt	zero,r2,6498 <_gp+0xffff7da4>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    64a0:	0005883a 	mov	r2,zero
    64a4:	dfc00117 	ldw	ra,4(sp)
    64a8:	dc000017 	ldw	r16,0(sp)
    64ac:	dec00204 	addi	sp,sp,8
    64b0:	f800283a 	ret

000064b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    64b4:	f800283a 	ret

000064b8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    64b8:	f800283a 	ret

000064bc <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    64bc:	213ffe84 	addi	r4,r4,-6
    64c0:	008003c4 	movi	r2,15
    64c4:	11001636 	bltu	r2,r4,6520 <alt_exception_cause_generated_bad_addr+0x64>
    64c8:	200890ba 	slli	r4,r4,2
    64cc:	00800034 	movhi	r2,0
    64d0:	10993804 	addi	r2,r2,25824
    64d4:	2089883a 	add	r4,r4,r2
    64d8:	20800017 	ldw	r2,0(r4)
    64dc:	1000683a 	jmp	r2
    64e0:	00006528 	cmpgeui	zero,zero,404
    64e4:	00006528 	cmpgeui	zero,zero,404
    64e8:	00006520 	cmpeqi	zero,zero,404
    64ec:	00006520 	cmpeqi	zero,zero,404
    64f0:	00006520 	cmpeqi	zero,zero,404
    64f4:	00006528 	cmpgeui	zero,zero,404
    64f8:	00006520 	cmpeqi	zero,zero,404
    64fc:	00006520 	cmpeqi	zero,zero,404
    6500:	00006528 	cmpgeui	zero,zero,404
    6504:	00006528 	cmpgeui	zero,zero,404
    6508:	00006520 	cmpeqi	zero,zero,404
    650c:	00006528 	cmpgeui	zero,zero,404
    6510:	00006520 	cmpeqi	zero,zero,404
    6514:	00006520 	cmpeqi	zero,zero,404
    6518:	00006520 	cmpeqi	zero,zero,404
    651c:	00006528 	cmpgeui	zero,zero,404
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    6520:	0005883a 	mov	r2,zero
    6524:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    6528:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    652c:	f800283a 	ret

00006530 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    6530:	000170fa 	wrctl	ienable,zero
    6534:	f800283a 	ret
