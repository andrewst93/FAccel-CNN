
bringup_test.elf:     file format elf32-littlenios2
bringup_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00008d3c memsz 0x00008d3c flags r-x
    LOAD off    0x00009d3c vaddr 0x00008d3c paddr 0x0000ae44 align 2**12
         filesz 0x00002108 memsz 0x00002108 flags rw-
    LOAD off    0x0000bf4c vaddr 0x0000cf4c paddr 0x0000cf4c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x0000c000 vaddr 0x02002000 paddr 0x02002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02002000  02002000  0000c000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  02002020  02002020  0000c020  2**0
                  CONTENTS
  2 .text         00008bb8  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000184  00008bb8  00008bb8  00009bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002108  00008d3c  0000ae44  00009d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0000cf4c  0000cf4c  0000bf4c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0000cf58  0000cf58  0000c020  2**0
                  CONTENTS
  7 .onchip_ram   00000000  02002020  02002020  0000c020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000c020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000678  00000000  00000000  0000c048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00009879  00000000  00000000  0000c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003607  00000000  00000000  00015f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000434c  00000000  00000000  00019540  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000fac  00000000  00000000  0001d88c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001fc3  00000000  00000000  0001e838  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000fabd  00000000  00000000  000207fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000302b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001620  00000000  00000000  000302c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00033402  2**0
                  CONTENTS, READONLY
 19 .cpu          00000006  00000000  00000000  00033405  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003340b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003340c  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0003340d  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00033416  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0003341f  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  00033428  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000006f  00000000  00000000  00033432  2**0
                  CONTENTS, READONLY
 27 .jdi          00004b97  00000000  00000000  000334a1  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000394a7  00000000  00000000  00038038  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02002000 l    d  .entry	00000000 .entry
02002020 l    d  .exceptions	00000000 .exceptions
00000000 l    d  .text	00000000 .text
00008bb8 l    d  .rodata	00000000 .rodata
00008d3c l    d  .rwdata	00000000 .rwdata
0000cf4c l    d  .bss	00000000 .bss
0000cf58 l    d  .sdram	00000000 .sdram
02002020 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../bringup_test_bsp//obj/HAL/src/crt0.o
00000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 bringup_test.c
00000000 l    df *ABS*	00000000 printf.c
000012f8 l     F .text	00000010 _out_buffer
00001308 l     F .text	00000004 _out_null
0000130c l     F .text	00000114 _out_rev
00001420 l     F .text	0000019c _ntoa_format
000015bc l     F .text	00000174 _ntoa_long
00001730 l     F .text	000001a0 _ntoa_long_long
000018d0 l     F .text	00000018 _out_char
000018e8 l     F .text	00000020 _out_fct
00001908 l     F .text	00000534 _ftoa
00001e3c l     F .text	00000608 _etoa
00008bdc l     O .rodata	00000050 pow10.1806
00002444 l     F .text	000008fc _vsnprintf
00000000 l    df *ABS*	00000000 wf_exp.c
00000000 l    df *ABS*	00000000 wf_log.c
00000000 l    df *ABS*	00000000 ef_exp.c
0000ae24 l     O .rwdata	00000008 ln2HI
0000ae1c l     O .rwdata	00000008 ln2LO
0000ae2c l     O .rwdata	00000008 halF
00000000 l    df *ABS*	00000000 ef_log.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_fpclassify.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0000ad3c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008adc g     F .text	0000002c alt_main
00000054 g     F .text	00000008 f2bf
0000003c g     F .text	00000010 _putchar
0000ae44 g       *ABS*	00000000 __flash_rwdata_start
000070ec g     F .text	00000088 .hidden __eqdf2
00004c9c g     F .text	00000440 .hidden __divsf3
000000b8 g     F .text	00000040 bf_gt
00002df4 g     F .text	00000030 vprintf_
000001dc g     F .text	0000009c show_featuremap
00005bec g     F .text	00000070 .hidden __fixsfsi
00007174 g     F .text	000000dc .hidden __gtdf2
0000ae40 g     O .rwdata	00000004 jtag_uart
00008bb0 g     F .text	00000008 altera_nios2_gen2_irq_init
000089cc g     F .text	00000010 __errno
02002000 g     F .entry	0000000c __reset
00000684 g     F .text	00000184 maxpool
00003000 g     F .text	00000178 logf
00000000 g       *ABS*	00000000 __flash_exceptions_start
0000cf50 g     O .bss	00000004 alt_argv
00012e1c g       *ABS*	00000000 _gp
00005708 g     F .text	000004e4 .hidden __subsf3
0000852c g     F .text	000000dc .hidden __floatsidf
00007250 g     F .text	000000f4 .hidden __ltdf2
00000808 g     F .text	00000090 global_average_pooling
000034a8 g     F .text	00000498 __ieee754_logf
000046f0 g     F .text	00000064 .hidden __udivsi3
00002d80 g     F .text	0000003c sprintf_
00005210 g     F .text	000000c8 .hidden __lesf2
000039c4 g     F .text	00000074 .hidden __fixunsdfsi
0000396c g     F .text	00000058 __fpclassifyf
00003954 g     F .text	00000018 finitef
000086b0 g     F .text	00000110 .hidden __extendsfdf2
00005e70 g     F .text	000008ac .hidden __adddf3
000050dc g     F .text	00000078 .hidden __nesf2
00004034 g     F .text	000005c4 .hidden __umoddi3
0000ae34 g     O .rwdata	00000004 __fdlib_version
0000ae38 g     O .rwdata	00000004 _global_impure_ptr
0000cf58 g       *ABS*	00000000 __bss_end
00008d3c g     O .rwdata	00002000 image64by64
00003a38 g     F .text	000005fc .hidden __udivdi3
00008608 g     F .text	000000a8 .hidden __floatunsidf
00002e24 g     F .text	00000030 vsnprintf_
00003178 g     F .text	00000330 __ieee754_expf
00008ba8 g     F .text	00000004 alt_dcache_flush_all
000084ac g     F .text	00000080 .hidden __fixdfsi
0000ae44 g       *ABS*	00000000 __ram_rwdata_end
00002e54 g     F .text	00000040 fctprintf
00005154 g     F .text	000000bc .hidden __gtsf2
000000ac g     F .text	0000000c bf_neg
00008d3c g       *ABS*	00000000 __ram_rodata_end
00000d68 g     F .text	00000454 featuremap_txt
00007250 g     F .text	000000f4 .hidden __ledf2
00004754 g     F .text	00000058 .hidden __umodsi3
0000cf58 g       *ABS*	00000000 end
000002cc g     F .text	000001a4 padding
02000000 g       *ABS*	00000000 __alt_stack_pointer
00008968 g     F .text	00000064 .hidden __clzsi2
00008b74 g     F .text	00000034 altera_avalon_jtag_uart_write
00000084 g     F .text	00000028 bf_add
00000000 g     F .text	0000003c _start
00008b70 g     F .text	00000004 alt_sys_init
00005c5c g     F .text	00000124 .hidden __floatsisf
000047ac g     F .text	00000028 .hidden __mulsi3
00008d3c g       *ABS*	00000000 __ram_rwdata_start
00008bb8 g       *ABS*	00000000 __ram_rodata_start
0000005c g     F .text	00000028 bf_mult
000050dc g     F .text	00000078 .hidden __eqsf2
00000138 g     F .text	00000058 put_pixel
0000cf58 g       *ABS*	00000000 __alt_stack_base
0000671c g     F .text	000009d0 .hidden __divdf3
00007344 g     F .text	0000086c .hidden __muldf3
00000470 g     F .text	00000214 convolution
0000cf4c g       *ABS*	00000000 __bss_start
000089dc g     F .text	00000020 memset
000011bc g     F .text	0000013c main
0000cf4c g     O .bss	00000004 alt_envp
00000b60 g     F .text	00000120 rgb565_to_feature
00005210 g     F .text	000000c8 .hidden __ltsf2
00003940 g     F .text	00000008 matherr
000087c0 g     F .text	000001a8 .hidden __truncdfsf2
00000278 g     F .text	00000054 relu
00000c80 g     F .text	000000e8 rgb_to_grey
000045f8 g     F .text	00000084 .hidden __divsi3
000052d8 g     F .text	00000430 .hidden __mulsf3
00008bb8 g       *ABS*	00000000 __flash_rodata_start
000070ec g     F .text	00000088 .hidden __nedf2
00008b50 g     F .text	00000020 alt_irq_init
00008c3c g     O .rodata	00000100 .hidden __clz_tab
00005154 g     F .text	000000bc .hidden __gesf2
00002dbc g     F .text	00000038 snprintf_
0000ae3c g     O .rwdata	00000004 _impure_ptr
0000cf54 g     O .bss	00000004 alt_argc
00000190 g     F .text	0000004c get_pixel
00003948 g     F .text	0000000c nan
02002020 g       *ABS*	00000000 __ram_exceptions_start
00002d40 g     F .text	00000040 printf_
00000898 g     F .text	0000012c softmax
0000ae44 g       *ABS*	00000000 _edata
0000cf58 g       *ABS*	00000000 _end
02002020 g       *ABS*	00000000 __ram_exceptions_end
0000004c g     F .text	00000008 bf2f
00005d80 g     F .text	000000f0 .hidden __floatunsisf
000000f8 g     F .text	00000040 bf_lt
0000467c g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000000 g       *ABS*	00000000 __alt_mem_sdram
02002000 g       *ABS*	00000000 __alt_mem_onchip_ram
0200200c g       .entry	00000000 _exit
00002e94 g     F .text	0000016c expf
000009c4 g     F .text	0000019c scale
00007174 g     F .text	000000dc .hidden __gedf2
00008b08 g     F .text	00000048 alt_putchar
00008bac g     F .text	00000004 alt_icache_flush_all
00007bb0 g     F .text	000008fc .hidden __subdf3
000047d4 g     F .text	000004c8 .hidden __addsf3
000089fc g     F .text	000000e0 alt_load



Disassembly of section .entry:

02002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2002000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 2002004:	08400014 	ori	at,at,0
    jmp r1
 2002008:	0800683a 	jmp	at

0200200c <_exit>:
	...

Disassembly of section .text:

00000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
       0:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
       4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
       8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
       c:	d68b8714 	ori	gp,gp,11804
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      10:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      14:	10b3d314 	ori	r2,r2,53068

    movhi r3, %hi(__bss_end)
      18:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      1c:	18f3d614 	ori	r3,r3,53080

    beq r2, r3, 1f
      20:	10c00326 	beq	r2,r3,30 <_start+0x30>

0:
    stw zero, (r2)
      24:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      28:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      2c:	10fffd36 	bltu	r2,r3,24 <__ram_exceptions_end+0xfdffe004>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      30:	00089fc0 	call	89fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      34:	0008adc0 	call	8adc <alt_main>

00000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      38:	003fff06 	br	38 <__ram_exceptions_end+0xfdffe018>

0000003c <_putchar>:
typedef alt_u16 bfloat16;

//////////////////////////////////////////////////////////////////////////////
void _putchar(char character)
{
	alt_putchar((int)character);	// printf_ character output
      3c:	21003fcc 	andi	r4,r4,255
      40:	2100201c 	xori	r4,r4,128
      44:	213fe004 	addi	r4,r4,-128
      48:	0008b081 	jmpi	8b08 <alt_putchar>

0000004c <bf2f>:
//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     return f.f;
}
      4c:	2004943a 	slli	r2,r4,16
      50:	f800283a 	ret

00000054 <f2bf>:
//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
}
      54:	2004d43a 	srli	r2,r4,16
      58:	f800283a 	ret

0000005c <bf_mult>:
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
      5c:	2804943a 	slli	r2,r5,16

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      60:	200a943a 	slli	r5,r4,16
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
      64:	deffff04 	addi	sp,sp,-4

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      68:	1009883a 	mov	r4,r2
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
      6c:	dfc00015 	stw	ra,0(sp)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      70:	00052d80 	call	52d8 <__mulsf3>
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}
      74:	1004d43a 	srli	r2,r2,16
      78:	dfc00017 	ldw	ra,0(sp)
      7c:	dec00104 	addi	sp,sp,4
      80:	f800283a 	ret

00000084 <bf_add>:
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
      84:	2804943a 	slli	r2,r5,16

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      88:	200a943a 	slli	r5,r4,16
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_add(bfloat16 a, bfloat16 b) {
      8c:	deffff04 	addi	sp,sp,-4

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      90:	1009883a 	mov	r4,r2
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_add(bfloat16 a, bfloat16 b) {
      94:	dfc00015 	stw	ra,0(sp)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      98:	00047d40 	call	47d4 <__addsf3>
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_add(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) + bf2f(b));
}
      9c:	1004d43a 	srli	r2,r2,16
      a0:	dfc00017 	ldw	ra,0(sp)
      a4:	dec00104 	addi	sp,sp,4
      a8:	f800283a 	ret

000000ac <bf_neg>:

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      ac:	213fffcc 	andi	r4,r4,65535
     return f2bf(bf2f(a) + bf2f(b));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_neg(bfloat16 a) {
     return f2bf(-bf2f(a));
      b0:	20a0001c 	xori	r2,r4,32768
}
      b4:	f800283a 	ret

000000b8 <bf_gt>:
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
      b8:	2804943a 	slli	r2,r5,16
     return f2bf(-bf2f(a));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
     return bf2f(a) > bf2f(b);
      bc:	200a943a 	slli	r5,r4,16
bfloat16 bf_neg(bfloat16 a) {
     return f2bf(-bf2f(a));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
      c0:	defffe04 	addi	sp,sp,-8
     return bf2f(a) > bf2f(b);
      c4:	1009883a 	mov	r4,r2
bfloat16 bf_neg(bfloat16 a) {
     return f2bf(-bf2f(a));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
      c8:	dfc00115 	stw	ra,4(sp)
      cc:	dc000015 	stw	r16,0(sp)
     return bf2f(a) > bf2f(b);
      d0:	00052100 	call	5210 <__lesf2>
      d4:	10000216 	blt	r2,zero,e0 <bf_gt+0x28>
      d8:	0021883a 	mov	r16,zero
      dc:	00000106 	br	e4 <bf_gt+0x2c>
      e0:	04000044 	movi	r16,1
}
      e4:	8005883a 	mov	r2,r16
      e8:	dfc00117 	ldw	ra,4(sp)
      ec:	dc000017 	ldw	r16,0(sp)
      f0:	dec00204 	addi	sp,sp,8
      f4:	f800283a 	ret

000000f8 <bf_lt>:
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
      f8:	2804943a 	slli	r2,r5,16
     return bf2f(a) > bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     return bf2f(a) < bf2f(b);
      fc:	200a943a 	slli	r5,r4,16
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
     return bf2f(a) > bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     100:	defffe04 	addi	sp,sp,-8
     return bf2f(a) < bf2f(b);
     104:	1009883a 	mov	r4,r2
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
     return bf2f(a) > bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     108:	dfc00115 	stw	ra,4(sp)
     10c:	dc000015 	stw	r16,0(sp)
     return bf2f(a) < bf2f(b);
     110:	00051540 	call	5154 <__gesf2>
     114:	00800216 	blt	zero,r2,120 <bf_lt+0x28>
     118:	0021883a 	mov	r16,zero
     11c:	00000106 	br	124 <bf_lt+0x2c>
     120:	04000044 	movi	r16,1
}
     124:	8005883a 	mov	r2,r16
     128:	dfc00117 	ldw	ra,4(sp)
     12c:	dc000017 	ldw	r16,0(sp)
     130:	dec00204 	addi	sp,sp,8
     134:	f800283a 	ret

00000138 <put_pixel>:

//////////////////////////////////////////////////////////////////////////////
void put_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y, alt_u16 data) {
     138:	defffc04 	addi	sp,sp,-16
     13c:	dc800215 	stw	r18,8(sp)
     140:	dc000015 	stw	r16,0(sp)
     144:	2025883a 	mov	r18,r4
     148:	3021883a 	mov	r16,r6
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
     14c:	297fffcc 	andi	r5,r5,65535
     150:	393fffcc 	andi	r4,r7,65535
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     return bf2f(a) < bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
void put_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y, alt_u16 data) {
     154:	dc400115 	stw	r17,4(sp)
     158:	dfc00315 	stw	ra,12(sp)
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
     15c:	843fffcc 	andi	r16,r16,65535
     160:	00047ac0 	call	47ac <__mulsi3>
     164:	1405883a 	add	r2,r2,r16
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     return bf2f(a) < bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
void put_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y, alt_u16 data) {
     168:	dc400417 	ldw	r17,16(sp)
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
     16c:	1085883a 	add	r2,r2,r2
     170:	9085883a 	add	r2,r18,r2
     174:	1440002d 	sthio	r17,0(r2)
}
     178:	dfc00317 	ldw	ra,12(sp)
     17c:	dc800217 	ldw	r18,8(sp)
     180:	dc400117 	ldw	r17,4(sp)
     184:	dc000017 	ldw	r16,0(sp)
     188:	dec00404 	addi	sp,sp,16
     18c:	f800283a 	ret

00000190 <get_pixel>:

//////////////////////////////////////////////////////////////////////////////
alt_u16 get_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y) {
     190:	defffd04 	addi	sp,sp,-12
     194:	dc400115 	stw	r17,4(sp)
     198:	dc000015 	stw	r16,0(sp)
     19c:	2023883a 	mov	r17,r4
     1a0:	3021883a 	mov	r16,r6
	return IORD_16DIRECT(base, (x + (y * res)) << 1);
     1a4:	297fffcc 	andi	r5,r5,65535
     1a8:	393fffcc 	andi	r4,r7,65535
void put_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y, alt_u16 data) {
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
}

//////////////////////////////////////////////////////////////////////////////
alt_u16 get_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y) {
     1ac:	dfc00215 	stw	ra,8(sp)
	return IORD_16DIRECT(base, (x + (y * res)) << 1);
     1b0:	843fffcc 	andi	r16,r16,65535
     1b4:	00047ac0 	call	47ac <__mulsi3>
     1b8:	1405883a 	add	r2,r2,r16
     1bc:	1085883a 	add	r2,r2,r2
     1c0:	8885883a 	add	r2,r17,r2
}
     1c4:	1080002b 	ldhuio	r2,0(r2)
     1c8:	dfc00217 	ldw	ra,8(sp)
     1cc:	dc400117 	ldw	r17,4(sp)
     1d0:	dc000017 	ldw	r16,0(sp)
     1d4:	dec00304 	addi	sp,sp,12
     1d8:	f800283a 	ret

000001dc <show_featuremap>:

//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
     1dc:	defffa04 	addi	sp,sp,-24
     1e0:	dd000415 	stw	r20,16(sp)
     1e4:	dc800215 	stw	r18,8(sp)
     1e8:	dc400115 	stw	r17,4(sp)
     1ec:	dfc00515 	stw	ra,20(sp)
     1f0:	dcc00315 	stw	r19,12(sp)
     1f4:	dc000015 	stw	r16,0(sp)
     1f8:	2029883a 	mov	r20,r4
	alt_u32 x, y;
	for (y=0; y<res; y++) {
     1fc:	0023883a 	mov	r17,zero
     200:	2cbfffcc 	andi	r18,r5,65535
     204:	8c80142e 	bgeu	r17,r18,258 <show_featuremap+0x7c>
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
}

//////////////////////////////////////////////////////////////////////////////
alt_u16 get_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y) {
	return IORD_16DIRECT(base, (x + (y * res)) << 1);
     208:	900b883a 	mov	r5,r18
     20c:	8809883a 	mov	r4,r17
     210:	00047ac0 	call	47ac <__mulsi3>
     214:	1027883a 	mov	r19,r2
     218:	0021883a 	mov	r16,zero
     21c:	84c5883a 	add	r2,r16,r19
     220:	1085883a 	add	r2,r2,r2
     224:	a085883a 	add	r2,r20,r2
     228:	1140002b 	ldhuio	r5,0(r2)
//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
	alt_u32 x, y;
	for (y=0; y<res; y++) {
		for (x=0; x<res; x++) {
			printf_("%x ", get_pixel(base, res, x, y));
     22c:	01000074 	movhi	r4,1
     230:	297fffcc 	andi	r5,r5,65535
     234:	2122ee04 	addi	r4,r4,-29768

//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
	alt_u32 x, y;
	for (y=0; y<res; y++) {
		for (x=0; x<res; x++) {
     238:	84000044 	addi	r16,r16,1
			printf_("%x ", get_pixel(base, res, x, y));
     23c:	0002d400 	call	2d40 <printf_>

//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
	alt_u32 x, y;
	for (y=0; y<res; y++) {
		for (x=0; x<res; x++) {
     240:	84bff636 	bltu	r16,r18,21c <__ram_exceptions_end+0xfdffe1fc>
			printf_("%x ", get_pixel(base, res, x, y));
		}
		printf_("\n");
     244:	01000074 	movhi	r4,1
     248:	2122ef04 	addi	r4,r4,-29764
     24c:	0002d400 	call	2d40 <printf_>
}

//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
	alt_u32 x, y;
	for (y=0; y<res; y++) {
     250:	8c400044 	addi	r17,r17,1
     254:	003feb06 	br	204 <__ram_exceptions_end+0xfdffe1e4>
		for (x=0; x<res; x++) {
			printf_("%x ", get_pixel(base, res, x, y));
		}
		printf_("\n");
	}
}
     258:	dfc00517 	ldw	ra,20(sp)
     25c:	dd000417 	ldw	r20,16(sp)
     260:	dcc00317 	ldw	r19,12(sp)
     264:	dc800217 	ldw	r18,8(sp)
     268:	dc400117 	ldw	r17,4(sp)
     26c:	dc000017 	ldw	r16,0(sp)
     270:	dec00604 	addi	sp,sp,24
     274:	f800283a 	ret

00000278 <relu>:

//////////////////////////////////////////////////////////////////////////////
void relu (alt_u16* featuremap, alt_u16 res) {
     278:	defffe04 	addi	sp,sp,-8
	alt_u32 x, i;

	x = res * res;
     27c:	297fffcc 	andi	r5,r5,65535
		printf_("\n");
	}
}

//////////////////////////////////////////////////////////////////////////////
void relu (alt_u16* featuremap, alt_u16 res) {
     280:	dc000015 	stw	r16,0(sp)
     284:	2021883a 	mov	r16,r4
	alt_u32 x, i;

	x = res * res;
     288:	2809883a 	mov	r4,r5
		printf_("\n");
	}
}

//////////////////////////////////////////////////////////////////////////////
void relu (alt_u16* featuremap, alt_u16 res) {
     28c:	dfc00115 	stw	ra,4(sp)
	alt_u32 x, i;

	x = res * res;
     290:	00047ac0 	call	47ac <__mulsi3>
	for (i=0; i<x; i++) {
     294:	0007883a 	mov	r3,zero
     298:	18800826 	beq	r3,r2,2bc <relu+0x44>
		if (IORD_16DIRECT(featuremap, (i << 1)) & 0x8000) { // test sign bit
     29c:	18c9883a 	add	r4,r3,r3
     2a0:	8109883a 	add	r4,r16,r4
     2a4:	2140002b 	ldhuio	r5,0(r4)
     2a8:	2960000c 	andi	r5,r5,32768
     2ac:	28000126 	beq	r5,zero,2b4 <relu+0x3c>
			IOWR_16DIRECT(featuremap, (i << 1), 0x0);
     2b0:	2000002d 	sthio	zero,0(r4)
//////////////////////////////////////////////////////////////////////////////
void relu (alt_u16* featuremap, alt_u16 res) {
	alt_u32 x, i;

	x = res * res;
	for (i=0; i<x; i++) {
     2b4:	18c00044 	addi	r3,r3,1
     2b8:	003ff706 	br	298 <__ram_exceptions_end+0xfdffe278>
		if (IORD_16DIRECT(featuremap, (i << 1)) & 0x8000) { // test sign bit
			IOWR_16DIRECT(featuremap, (i << 1), 0x0);
		}
	}
}
     2bc:	dfc00117 	ldw	ra,4(sp)
     2c0:	dc000017 	ldw	r16,0(sp)
     2c4:	dec00204 	addi	sp,sp,8
     2c8:	f800283a 	ret

000002cc <padding>:

//////////////////////////////////////////////////////////////////////////////
void padding (alt_u16* src_map, alt_u16* dst_map, alt_u16 res, alt_u16 pad) {
     2cc:	defff704 	addi	sp,sp,-36
     2d0:	dc000015 	stw	r16,0(sp)
	alt_u32 src, dst;

	dst = 0;
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
		for (i=0; i<(res + (pad << 1)); i++) {
     2d4:	3c3fffcc 	andi	r16,r7,65535
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void padding (alt_u16* src_map, alt_u16* dst_map, alt_u16 res, alt_u16 pad) {
     2d8:	dc800215 	stw	r18,8(sp)
	alt_u32 src, dst;

	dst = 0;
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
		for (i=0; i<(res + (pad << 1)); i++) {
     2dc:	8421883a 	add	r16,r16,r16
     2e0:	34bfffcc 	andi	r18,r6,65535
     2e4:	84a1883a 	add	r16,r16,r18
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void padding (alt_u16* src_map, alt_u16* dst_map, alt_u16 res, alt_u16 pad) {
     2e8:	dd800615 	stw	r22,24(sp)
     2ec:	dd400515 	stw	r21,20(sp)
     2f0:	dd000415 	stw	r20,16(sp)
     2f4:	dc400115 	stw	r17,4(sp)
     2f8:	202d883a 	mov	r22,r4
     2fc:	282b883a 	mov	r21,r5
     300:	dfc00815 	stw	ra,32(sp)
     304:	ddc00715 	stw	r23,28(sp)
     308:	dcc00315 	stw	r19,12(sp)
     30c:	8429883a 	add	r20,r16,r16
	alt_u32 i, j, pixel;
	alt_u32 src, dst;

	dst = 0;
     310:	000b883a 	mov	r5,zero
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
     314:	0009883a 	mov	r4,zero
     318:	3c7fffcc 	andi	r17,r7,65535
     31c:	24400b2e 	bgeu	r4,r17,34c <padding+0x80>
     320:	0005883a 	mov	r2,zero
		for (i=0; i<(res + (pad << 1)); i++) {
     324:	14000626 	beq	r2,r16,340 <padding+0x74>
			IOWR_16DIRECT(dst_map, (dst), 0);
     328:	1087883a 	add	r3,r2,r2
     32c:	1947883a 	add	r3,r3,r5
     330:	a8c7883a 	add	r3,r21,r3
     334:	1800002d 	sthio	zero,0(r3)
	alt_u32 src, dst;

	dst = 0;
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
		for (i=0; i<(res + (pad << 1)); i++) {
     338:	10800044 	addi	r2,r2,1
     33c:	003ff906 	br	324 <__ram_exceptions_end+0xfdffe304>
     340:	2d0b883a 	add	r5,r5,r20
	alt_u32 i, j, pixel;
	alt_u32 src, dst;

	dst = 0;
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
     344:	21000044 	addi	r4,r4,1
     348:	003ff406 	br	31c <__ram_exceptions_end+0xfdffe2fc>
     34c:	8c6f883a 	add	r23,r17,r17
     350:	b80b883a 	mov	r5,r23
     354:	8009883a 	mov	r4,r16
     358:	00047ac0 	call	47ac <__mulsi3>
     35c:	1027883a 	mov	r19,r2
     360:	8c85883a 	add	r2,r17,r18
     364:	1085883a 	add	r2,r2,r2
     368:	95cf883a 	add	r7,r18,r23
     36c:	948b883a 	add	r5,r18,r18
     370:	39cf883a 	add	r7,r7,r7
     374:	980d883a 	mov	r6,r19
     378:	0013883a 	mov	r9,zero
     37c:	0011883a 	mov	r8,zero
     380:	113fff84 	addi	r4,r2,-2
		for (i=0; i<(res + (pad << 1)); i++) {
			IOWR_16DIRECT(dst_map, (dst), 0);
			dst += 2;
		}
	}
	for (j=0; j<res; j++) {
     384:	44801f2e 	bgeu	r8,r18,404 <padding+0x138>
     388:	0005883a 	mov	r2,zero
		for (i=0; i<pad; i++) {
     38c:	1440062e 	bgeu	r2,r17,3a8 <padding+0xdc>
			IOWR_16DIRECT(dst_map, (dst), 0); // pad LHS
     390:	1087883a 	add	r3,r2,r2
     394:	1987883a 	add	r3,r3,r6
     398:	a8c7883a 	add	r3,r21,r3
     39c:	1800002d 	sthio	zero,0(r3)
			IOWR_16DIRECT(dst_map, (dst), 0);
			dst += 2;
		}
	}
	for (j=0; j<res; j++) {
		for (i=0; i<pad; i++) {
     3a0:	10800044 	addi	r2,r2,1
     3a4:	003ff906 	br	38c <__ram_exceptions_end+0xfdffe36c>
     3a8:	35d7883a 	add	r11,r6,r23
     3ac:	0007883a 	mov	r3,zero
     3b0:	18c5883a 	add	r2,r3,r3
			IOWR_16DIRECT(dst_map, (dst), 0); // pad LHS
			dst += 2;
		}
		for (i=0; i<res; i++) {
			pixel = IORD_16DIRECT(src_map, src++);
     3b4:	4895883a 	add	r10,r9,r2
     3b8:	b295883a 	add	r10,r22,r10
     3bc:	5280002b 	ldhuio	r10,0(r10)
			src++;
			IOWR_16DIRECT(dst_map, (dst), pixel);
     3c0:	12c5883a 	add	r2,r2,r11
     3c4:	a885883a 	add	r2,r21,r2
     3c8:	1280002d 	sthio	r10,0(r2)
	for (j=0; j<res; j++) {
		for (i=0; i<pad; i++) {
			IOWR_16DIRECT(dst_map, (dst), 0); // pad LHS
			dst += 2;
		}
		for (i=0; i<res; i++) {
     3cc:	18c00044 	addi	r3,r3,1
     3d0:	1cbff736 	bltu	r3,r18,3b0 <__ram_exceptions_end+0xfdffe390>
     3d4:	2185883a 	add	r2,r4,r6
     3d8:	4953883a 	add	r9,r9,r5
     3dc:	a885883a 	add	r2,r21,r2
     3e0:	0007883a 	mov	r3,zero
     3e4:	10800084 	addi	r2,r2,2
			pixel = IORD_16DIRECT(src_map, src++);
			src++;
			IOWR_16DIRECT(dst_map, (dst), pixel);
			dst += 2;
		}
		for (i=0; i<pad; i++) {
     3e8:	1c40032e 	bgeu	r3,r17,3f8 <padding+0x12c>
			IOWR_16DIRECT(dst_map, (dst), 0); // pad RHS
     3ec:	1000002d 	sthio	zero,0(r2)
			pixel = IORD_16DIRECT(src_map, src++);
			src++;
			IOWR_16DIRECT(dst_map, (dst), pixel);
			dst += 2;
		}
		for (i=0; i<pad; i++) {
     3f0:	18c00044 	addi	r3,r3,1
     3f4:	003ffb06 	br	3e4 <__ram_exceptions_end+0xfdffe3c4>
     3f8:	31cd883a 	add	r6,r6,r7
		for (i=0; i<(res + (pad << 1)); i++) {
			IOWR_16DIRECT(dst_map, (dst), 0);
			dst += 2;
		}
	}
	for (j=0; j<res; j++) {
     3fc:	42000044 	addi	r8,r8,1
     400:	003fe006 	br	384 <__ram_exceptions_end+0xfdffe364>
     404:	bc89883a 	add	r4,r23,r18
     408:	00047ac0 	call	47ac <__mulsi3>
     40c:	14c5883a 	add	r2,r2,r19
     410:	000b883a 	mov	r5,zero
		for (i=0; i<pad; i++) {
			IOWR_16DIRECT(dst_map, (dst), 0); // pad RHS
			dst += 2;
		}
	}
	for (j=0; j<pad; j++) {	// pad BOTTOM pixels
     414:	2c400b2e 	bgeu	r5,r17,444 <padding+0x178>
     418:	0007883a 	mov	r3,zero
		for (i=0; i<(res + (pad << 1)); i++) {
     41c:	1c000626 	beq	r3,r16,438 <padding+0x16c>
			IOWR_16DIRECT(dst_map, (dst), 0);
     420:	18c9883a 	add	r4,r3,r3
     424:	2089883a 	add	r4,r4,r2
     428:	a909883a 	add	r4,r21,r4
     42c:	2000002d 	sthio	zero,0(r4)
			IOWR_16DIRECT(dst_map, (dst), 0); // pad RHS
			dst += 2;
		}
	}
	for (j=0; j<pad; j++) {	// pad BOTTOM pixels
		for (i=0; i<(res + (pad << 1)); i++) {
     430:	18c00044 	addi	r3,r3,1
     434:	003ff906 	br	41c <__ram_exceptions_end+0xfdffe3fc>
     438:	1505883a 	add	r2,r2,r20
		for (i=0; i<pad; i++) {
			IOWR_16DIRECT(dst_map, (dst), 0); // pad RHS
			dst += 2;
		}
	}
	for (j=0; j<pad; j++) {	// pad BOTTOM pixels
     43c:	29400044 	addi	r5,r5,1
     440:	003ff406 	br	414 <__ram_exceptions_end+0xfdffe3f4>
		for (i=0; i<(res + (pad << 1)); i++) {
			IOWR_16DIRECT(dst_map, (dst), 0);
			dst += 2;
		}
	}
}
     444:	dfc00817 	ldw	ra,32(sp)
     448:	ddc00717 	ldw	r23,28(sp)
     44c:	dd800617 	ldw	r22,24(sp)
     450:	dd400517 	ldw	r21,20(sp)
     454:	dd000417 	ldw	r20,16(sp)
     458:	dcc00317 	ldw	r19,12(sp)
     45c:	dc800217 	ldw	r18,8(sp)
     460:	dc400117 	ldw	r17,4(sp)
     464:	dc000017 	ldw	r16,0(sp)
     468:	dec00904 	addi	sp,sp,36
     46c:	f800283a 	ret

00000470 <convolution>:

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     470:	deffe604 	addi	sp,sp,-104
     474:	dd001415 	stw	r20,80(sp)
	alt_16 x, y, ks;
	alt_u32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
     478:	dd001a0b 	ldhu	r20,104(sp)
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     47c:	dc001015 	stw	r16,64(sp)
     480:	dcc01315 	stw	r19,76(sp)
	alt_16 x, y, ks;
	alt_u32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
     484:	a020d07a 	srli	r16,r20,1
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     488:	d9000515 	stw	r4,20(sp)
     48c:	d9c00615 	stw	r7,24(sp)
     490:	843fffcc 	andi	r16,r16,65535
	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
     494:	0427c83a 	sub	r19,zero,r16
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     498:	280f883a 	mov	r7,r5
     49c:	a009883a 	mov	r4,r20
     4a0:	980b883a 	mov	r5,r19
     4a4:	df001815 	stw	fp,96(sp)
     4a8:	ddc01715 	stw	r23,92(sp)
     4ac:	dd801615 	stw	r22,88(sp)
     4b0:	dd401515 	stw	r21,84(sp)
     4b4:	dc801215 	stw	r18,72(sp)
     4b8:	dc401115 	stw	r17,68(sp)
     4bc:	d9c00815 	stw	r7,32(sp)
     4c0:	dfc01915 	stw	ra,100(sp)
     4c4:	d9800115 	stw	r6,4(sp)
     4c8:	dc000015 	stw	r16,0(sp)
     4cc:	00047ac0 	call	47ac <__mulsi3>
     4d0:	dc401c17 	ldw	r17,112(sp)
     4d4:	df001b0b 	ldhu	fp,108(sp)
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
					sum = bf_add(sum, bf_mult(src_pix, k_pix)); // sum of products
				}
			}
			if (clr == 0)
     4d8:	d9c00817 	ldw	r7,32(sp)
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     4dc:	dd801d0b 	ldhu	r22,116(sp)
	alt_u32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     4e0:	882f883a 	mov	r23,r17
     4e4:	882b883a 	mov	r21,r17
     4e8:	e73fffcc 	andi	fp,fp,65535
     4ec:	8c7fffcc 	andi	r17,r17,65535
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
					sum = bf_add(sum, bf_mult(src_pix, k_pix)); // sum of products
				}
			}
			if (clr == 0)
     4f0:	39ffffcc 	andi	r7,r7,65535
     4f4:	d8800415 	stw	r2,16(sp)
	alt_16 x, y, ks;
	alt_u32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
     4f8:	000b883a 	mov	r5,zero
	for (y=pad; y<(res + pad); y=y+stride) {
     4fc:	e463883a 	add	r17,fp,r17
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
     500:	8025883a 	mov	r18,r16
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
					sum = bf_add(sum, bf_mult(src_pix, k_pix)); // sum of products
				}
			}
			if (clr == 0)
     504:	d9c00715 	stw	r7,28(sp)
	alt_u32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     508:	a93fffcc 	andi	r4,r21,65535
     50c:	2120001c 	xori	r4,r4,32768
     510:	21200004 	addi	r4,r4,-32768
     514:	24404f0e 	bge	r4,r17,654 <convolution+0x1e4>
     518:	d8c00117 	ldw	r3,4(sp)
     51c:	1961883a 	add	r16,r3,r5
     520:	d8c00017 	ldw	r3,0(sp)
     524:	e00b883a 	mov	r5,fp
     528:	20c9c83a 	sub	r4,r4,r3
     52c:	00047ac0 	call	47ac <__mulsi3>
     530:	101d883a 	mov	r14,r2
     534:	b815883a 	mov	r10,r23
     538:	d8c00117 	ldw	r3,4(sp)
		for (x=pad; x<(res + pad); x=x+stride) {
     53c:	50bfffcc 	andi	r2,r10,65535
     540:	10a0001c 	xori	r2,r2,32768
     544:	10a00004 	addi	r2,r2,-32768
     548:	80cbc83a 	sub	r5,r16,r3
     54c:	14403f0e 	bge	r2,r17,64c <convolution+0x1dc>
     550:	1385883a 	add	r2,r2,r14
     554:	d8800215 	stw	r2,8(sp)
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
     558:	9817883a 	mov	r11,r19
     55c:	001b883a 	mov	r13,zero
     560:	0019883a 	mov	r12,zero

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
     564:	0011883a 	mov	r8,zero
			for (ky=-ks; ky<ks; ky++) {
     568:	5c80302e 	bgeu	r11,r18,62c <convolution+0x1bc>
     56c:	d8c00217 	ldw	r3,8(sp)
				offset_s = (res * (y + ky)) + x;
				offset_d = (k * ky);
				for (kx=-ks; kx<ks; kx++) {
     570:	9813883a 	mov	r9,r19
     574:	60c7883a 	add	r3,r12,r3
     578:	d8c00315 	stw	r3,12(sp)
     57c:	d8c00417 	ldw	r3,16(sp)
     580:	68df883a 	add	r15,r13,r3
     584:	4c80252e 	bgeu	r9,r18,61c <convolution+0x1ac>
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
     588:	d8c00317 	ldw	r3,12(sp)
     58c:	48c5883a 	add	r2,r9,r3
     590:	d8c00517 	ldw	r3,20(sp)
     594:	1085883a 	add	r2,r2,r2
     598:	1885883a 	add	r2,r3,r2
     59c:	1100002b 	ldhuio	r4,0(r2)
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
     5a0:	d8c00617 	ldw	r3,24(sp)
     5a4:	4bc5883a 	add	r2,r9,r15
     5a8:	1085883a 	add	r2,r2,r2
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
				offset_s = (res * (y + ky)) + x;
				offset_d = (k * ky);
				for (kx=-ks; kx<ks; kx++) {
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
     5ac:	213fffcc 	andi	r4,r4,65535
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
     5b0:	1885883a 	add	r2,r3,r2
     5b4:	1140002b 	ldhuio	r5,0(r2)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     5b8:	280a943a 	slli	r5,r5,16
     5bc:	2008943a 	slli	r4,r4,16
     5c0:	da400a15 	stw	r9,40(sp)
     5c4:	da800915 	stw	r10,36(sp)
     5c8:	dac00b15 	stw	r11,44(sp)
     5cc:	db000c15 	stw	r12,48(sp)
     5d0:	db400d15 	stw	r13,52(sp)
     5d4:	db800e15 	stw	r14,56(sp)
     5d8:	dbc00f15 	stw	r15,60(sp)
     5dc:	da000815 	stw	r8,32(sp)
     5e0:	00052d80 	call	52d8 <__mulsf3>
     5e4:	da000817 	ldw	r8,32(sp)
     5e8:	113fffec 	andhi	r4,r2,65535
     5ec:	400a943a 	slli	r5,r8,16
     5f0:	00047d40 	call	47d4 <__addsf3>
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
				offset_s = (res * (y + ky)) + x;
				offset_d = (k * ky);
				for (kx=-ks; kx<ks; kx++) {
     5f4:	da400a17 	ldw	r9,40(sp)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     5f8:	1010d43a 	srli	r8,r2,16
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
				offset_s = (res * (y + ky)) + x;
				offset_d = (k * ky);
				for (kx=-ks; kx<ks; kx++) {
     5fc:	dbc00f17 	ldw	r15,60(sp)
     600:	4a400044 	addi	r9,r9,1
     604:	db800e17 	ldw	r14,56(sp)
     608:	db400d17 	ldw	r13,52(sp)
     60c:	db000c17 	ldw	r12,48(sp)
     610:	dac00b17 	ldw	r11,44(sp)
     614:	da800917 	ldw	r10,36(sp)
     618:	003fda06 	br	584 <__ram_exceptions_end+0xfdffe564>
	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
     61c:	5ac00044 	addi	r11,r11,1
     620:	6719883a 	add	r12,r12,fp
     624:	6d1b883a 	add	r13,r13,r20
     628:	003fcf06 	br	568 <__ram_exceptions_end+0xfdffe548>
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
					sum = bf_add(sum, bf_mult(src_pix, k_pix)); // sum of products
				}
			}
			if (clr == 0)
     62c:	d8c00717 	ldw	r3,28(sp)
     630:	1800021e 	bne	r3,zero,63c <convolution+0x1cc>
				sum += IORD_16DIRECT(dst, dst_ptr);
     634:	8080002b 	ldhuio	r2,0(r16)
     638:	1211883a 	add	r8,r2,r8
			IOWR_16DIRECT(dst, dst_ptr, sum);
     63c:	8200002d 	sthio	r8,0(r16)
     640:	5595883a 	add	r10,r10,r22
     644:	84000084 	addi	r16,r16,2
     648:	003fbb06 	br	538 <__ram_exceptions_end+0xfdffe518>
	alt_u32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     64c:	adab883a 	add	r21,r21,r22
     650:	003fad06 	br	508 <__ram_exceptions_end+0xfdffe4e8>
				sum += IORD_16DIRECT(dst, dst_ptr);
			IOWR_16DIRECT(dst, dst_ptr, sum);
			dst_ptr += 2;
		}
	}
}
     654:	dfc01917 	ldw	ra,100(sp)
     658:	df001817 	ldw	fp,96(sp)
     65c:	ddc01717 	ldw	r23,92(sp)
     660:	dd801617 	ldw	r22,88(sp)
     664:	dd401517 	ldw	r21,84(sp)
     668:	dd001417 	ldw	r20,80(sp)
     66c:	dcc01317 	ldw	r19,76(sp)
     670:	dc801217 	ldw	r18,72(sp)
     674:	dc401117 	ldw	r17,68(sp)
     678:	dc001017 	ldw	r16,64(sp)
     67c:	dec01a04 	addi	sp,sp,104
     680:	f800283a 	ret

00000684 <maxpool>:

//////////////////////////////////////////////////////////////////////////////
void maxpool(alt_u16* src, alt_u16* dst, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     684:	deffee04 	addi	sp,sp,-72
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     688:	d8801217 	ldw	r2,72(sp)
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void maxpool(alt_u16* src, alt_u16* dst, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     68c:	d8c0130b 	ldhu	r3,76(sp)
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     690:	39ffffcc 	andi	r7,r7,65535
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void maxpool(alt_u16* src, alt_u16* dst, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     694:	dc000815 	stw	r16,32(sp)
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     698:	143fffcc 	andi	r16,r2,65535
     69c:	3c21883a 	add	r16,r7,r16
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void maxpool(alt_u16* src, alt_u16* dst, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     6a0:	df001015 	stw	fp,64(sp)
     6a4:	dd400d15 	stw	r21,52(sp)
     6a8:	dcc00b15 	stw	r19,44(sp)
     6ac:	dc800a15 	stw	r18,40(sp)
     6b0:	dfc01115 	stw	ra,68(sp)
     6b4:	ddc00f15 	stw	r23,60(sp)
     6b8:	dd800e15 	stw	r22,56(sp)
     6bc:	dd000c15 	stw	r20,48(sp)
     6c0:	dc400915 	stw	r17,36(sp)
     6c4:	d9000415 	stw	r4,16(sp)
     6c8:	d9400515 	stw	r5,20(sp)
     6cc:	d8c0010d 	sth	r3,4(sp)
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     6d0:	1039883a 	mov	fp,r2
     6d4:	1027883a 	mov	r19,r2
	alt_16 x, y, kx, ky;
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
     6d8:	0025883a 	mov	r18,zero
	for (y=pad; y<(res + pad); y=y+stride) {
     6dc:	d9c00215 	stw	r7,8(sp)
     6e0:	dc000315 	stw	r16,12(sp)
		for (x=pad; x<(res + pad); x=x+stride) {
			max = f2bf(-10000.0); // negative enough?
			for (ky=0; ky<k; ky++) {
     6e4:	357fffcc 	andi	r21,r6,65535
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     6e8:	98ffffcc 	andi	r3,r19,65535
     6ec:	18e0001c 	xori	r3,r3,32768
     6f0:	d8800317 	ldw	r2,12(sp)
     6f4:	18e00004 	addi	r3,r3,-32768
     6f8:	d8c00015 	stw	r3,0(sp)
     6fc:	1880360e 	bge	r3,r2,7d8 <maxpool+0x154>
     700:	e02f883a 	mov	r23,fp
		for (x=pad; x<(res + pad); x=x+stride) {
     704:	bdbfffcc 	andi	r22,r23,65535
     708:	d8c00317 	ldw	r3,12(sp)
     70c:	b5a0001c 	xori	r22,r22,32768
     710:	b5a00004 	addi	r22,r22,-32768
     714:	b0c02d0e 	bge	r22,r3,7cc <maxpool+0x148>
     718:	05318704 	movi	r20,-14820
     71c:	0021883a 	mov	r16,zero
			max = f2bf(-10000.0); // negative enough?
			for (ky=0; ky<k; ky++) {
     720:	817fffcc 	andi	r5,r16,65535
     724:	2960001c 	xori	r5,r5,32768
     728:	29600004 	addi	r5,r5,-32768
     72c:	2d40200e 	bge	r5,r21,7b0 <maxpool+0x12c>
     730:	d8c00017 	ldw	r3,0(sp)
     734:	d9000217 	ldw	r4,8(sp)
     738:	194b883a 	add	r5,r3,r5
     73c:	00047ac0 	call	47ac <__mulsi3>
     740:	1017883a 	mov	r11,r2
				for (kx=0; kx<k; kx++) {
					src_pix = bf2f(IORD_16DIRECT(src, ((x + kx) + (res * (y + ky))) << 1));
     744:	0015883a 	mov	r10,zero
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
		for (x=pad; x<(res + pad); x=x+stride) {
			max = f2bf(-10000.0); // negative enough?
			for (ky=0; ky<k; ky++) {
				for (kx=0; kx<k; kx++) {
     748:	50bfffcc 	andi	r2,r10,65535
     74c:	10a0001c 	xori	r2,r2,32768
     750:	10a00004 	addi	r2,r2,-32768
     754:	1540140e 	bge	r2,r21,7a8 <maxpool+0x124>
					src_pix = bf2f(IORD_16DIRECT(src, ((x + kx) + (res * (y + ky))) << 1));
     758:	b085883a 	add	r2,r22,r2
     75c:	d8c00417 	ldw	r3,16(sp)
     760:	12c5883a 	add	r2,r2,r11
     764:	1085883a 	add	r2,r2,r2
     768:	1885883a 	add	r2,r3,r2
     76c:	1440002b 	ldhuio	r17,0(r2)
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     770:	8822943a 	slli	r17,r17,16
		for (x=pad; x<(res + pad); x=x+stride) {
			max = f2bf(-10000.0); // negative enough?
			for (ky=0; ky<k; ky++) {
				for (kx=0; kx<k; kx++) {
					src_pix = bf2f(IORD_16DIRECT(src, ((x + kx) + (res * (y + ky))) << 1));
					if (src_pix > max)
     774:	a13fffcc 	andi	r4,r20,65535
     778:	da800615 	stw	r10,24(sp)
     77c:	dac00715 	stw	r11,28(sp)
     780:	0005c5c0 	call	5c5c <__floatsisf>
     784:	880b883a 	mov	r5,r17
     788:	1009883a 	mov	r4,r2
     78c:	00052100 	call	5210 <__lesf2>
     790:	da800617 	ldw	r10,24(sp)
     794:	dac00717 	ldw	r11,28(sp)
     798:	1000010e 	bge	r2,zero,7a0 <maxpool+0x11c>

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     79c:	8828d43a 	srli	r20,r17,16
     7a0:	52800044 	addi	r10,r10,1
     7a4:	003fe806 	br	748 <__ram_exceptions_end+0xfdffe728>
     7a8:	84000044 	addi	r16,r16,1
     7ac:	003fdc06 	br	720 <__ram_exceptions_end+0xfdffe700>
					src_pix = bf2f(IORD_16DIRECT(src, ((x + kx) + (res * (y + ky))) << 1));
					if (src_pix > max)
						max = f2bf(src_pix);
				}
			}
			IOWR_16DIRECT(dst, dst_ptr, max);
     7b0:	d8c00517 	ldw	r3,20(sp)
     7b4:	1c85883a 	add	r2,r3,r18
     7b8:	1500002d 	sthio	r20,0(r2)
     7bc:	d8c0010b 	ldhu	r3,4(sp)
			dst_ptr += 2;
     7c0:	94800084 	addi	r18,r18,2
     7c4:	b8ef883a 	add	r23,r23,r3
     7c8:	003fce06 	br	704 <__ram_exceptions_end+0xfdffe6e4>
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     7cc:	d8c0010b 	ldhu	r3,4(sp)
     7d0:	98e7883a 	add	r19,r19,r3
     7d4:	003fc406 	br	6e8 <__ram_exceptions_end+0xfdffe6c8>
			}
			IOWR_16DIRECT(dst, dst_ptr, max);
			dst_ptr += 2;
		}
	}
}
     7d8:	dfc01117 	ldw	ra,68(sp)
     7dc:	df001017 	ldw	fp,64(sp)
     7e0:	ddc00f17 	ldw	r23,60(sp)
     7e4:	dd800e17 	ldw	r22,56(sp)
     7e8:	dd400d17 	ldw	r21,52(sp)
     7ec:	dd000c17 	ldw	r20,48(sp)
     7f0:	dcc00b17 	ldw	r19,44(sp)
     7f4:	dc800a17 	ldw	r18,40(sp)
     7f8:	dc400917 	ldw	r17,36(sp)
     7fc:	dc000817 	ldw	r16,32(sp)
     800:	dec01204 	addi	sp,sp,72
     804:	f800283a 	ret

00000808 <global_average_pooling>:

//////////////////////////////////////////////////////////////////////////////
bfloat16 global_average_pooling(alt_u16* src, alt_u16 res) {
     808:	defffc04 	addi	sp,sp,-16
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     80c:	297fffcc 	andi	r5,r5,65535
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 global_average_pooling(alt_u16* src, alt_u16 res) {
     810:	dc800215 	stw	r18,8(sp)
     814:	2025883a 	mov	r18,r4
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     818:	2809883a 	mov	r4,r5
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 global_average_pooling(alt_u16* src, alt_u16 res) {
     81c:	dc400115 	stw	r17,4(sp)
     820:	dc000015 	stw	r16,0(sp)
     824:	dfc00315 	stw	ra,12(sp)
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     828:	00047ac0 	call	47ac <__mulsi3>
     82c:	1021883a 	mov	r16,r2
     830:	0023883a 	mov	r17,zero
//////////////////////////////////////////////////////////////////////////////
bfloat16 global_average_pooling(alt_u16* src, alt_u16 res) {
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
     834:	0005883a 	mov	r2,zero
     838:	117fffcc 	andi	r5,r2,65535
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     83c:	8c000926 	beq	r17,r16,864 <global_average_pooling+0x5c>
		sum = bf_add(sum, IORD_16DIRECT(src, src_ptr));
     840:	8c45883a 	add	r2,r17,r17
     844:	9085883a 	add	r2,r18,r2
     848:	1100002b 	ldhuio	r4,0(r2)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     84c:	280a943a 	slli	r5,r5,16
     850:	2008943a 	slli	r4,r4,16
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     854:	8c400044 	addi	r17,r17,1

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     858:	00047d40 	call	47d4 <__addsf3>
     85c:	1004d43a 	srli	r2,r2,16
     860:	003ff506 	br	838 <__ram_exceptions_end+0xfdffe818>
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     864:	2820943a 	slli	r16,r5,16

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     868:	8809883a 	mov	r4,r17
     86c:	0005c5c0 	call	5c5c <__floatsisf>
     870:	100b883a 	mov	r5,r2
     874:	8009883a 	mov	r4,r16
     878:	0004c9c0 	call	4c9c <__divsf3>
	for (x=0; x<(res*res); x++) {
		sum = bf_add(sum, IORD_16DIRECT(src, src_ptr));
		src_ptr += 2;
	}
	return f2bf(bf2f(sum) / (float)(res * res));
}
     87c:	1004d43a 	srli	r2,r2,16
     880:	dfc00317 	ldw	ra,12(sp)
     884:	dc800217 	ldw	r18,8(sp)
     888:	dc400117 	ldw	r17,4(sp)
     88c:	dc000017 	ldw	r16,0(sp)
     890:	dec00404 	addi	sp,sp,16
     894:	f800283a 	ret

00000898 <softmax>:

//////////////////////////////////////////////////////////////////////////////
void softmax(alt_u16* src, alt_u16 input_len) {
     898:	defff804 	addi	sp,sp,-32
     89c:	dd800615 	stw	r22,24(sp)
     8a0:	dd400515 	stw	r21,20(sp)
     8a4:	dd000415 	stw	r20,16(sp)
     8a8:	dc800215 	stw	r18,8(sp)
     8ac:	dc400115 	stw	r17,4(sp)
     8b0:	dc000015 	stw	r16,0(sp)
     8b4:	dfc00715 	stw	ra,28(sp)
     8b8:	dcc00315 	stw	r19,12(sp)
     8bc:	2021883a 	mov	r16,r4
     8c0:	2023883a 	mov	r17,r4
	alt_u16 i;
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
     8c4:	202d883a 	mov	r22,r4
void softmax(alt_u16* src, alt_u16 input_len) {
	alt_u16 i;
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
     8c8:	04bfe034 	movhi	r18,65408
	for (i = 0; i < input_len; i++)
     8cc:	002b883a 	mov	r21,zero
     8d0:	2d3fffcc 	andi	r20,r5,65535
     8d4:	a8bfffcc 	andi	r2,r21,65535
     8d8:	15000a26 	beq	r2,r20,904 <softmax+0x6c>
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     8dc:	b4c0000b 	ldhu	r19,0(r22)
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
		if (bf2f(src[i]) > m)
     8e0:	9009883a 	mov	r4,r18
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     8e4:	9826943a 	slli	r19,r19,16
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
		if (bf2f(src[i]) > m)
     8e8:	980b883a 	mov	r5,r19
     8ec:	00052100 	call	5210 <__lesf2>
     8f0:	1000010e 	bge	r2,zero,8f8 <softmax+0x60>
			m = bf2f(src[i]);
     8f4:	9825883a 	mov	r18,r19
	alt_u16 i;
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
     8f8:	ad400044 	addi	r21,r21,1
     8fc:	b5800084 	addi	r22,r22,2
     900:	003ff406 	br	8d4 <__ram_exceptions_end+0xfdffe8b4>
     904:	0027883a 	mov	r19,zero
     908:	002b883a 	mov	r21,zero
		if (bf2f(src[i]) > m)
			m = bf2f(src[i]);
	for (i = 0; i < input_len; i++)
     90c:	a8bfffcc 	andi	r2,r21,65535
     910:	15000d26 	beq	r2,r20,948 <softmax+0xb0>
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     914:	8100000b 	ldhu	r4,0(r16)
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
		if (bf2f(src[i]) > m)
			m = bf2f(src[i]);
	for (i = 0; i < input_len; i++)
		sum += expf(bf2f(src[i]) - m);
     918:	900b883a 	mov	r5,r18
	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
		if (bf2f(src[i]) > m)
			m = bf2f(src[i]);
	for (i = 0; i < input_len; i++)
     91c:	ad400044 	addi	r21,r21,1
		sum += expf(bf2f(src[i]) - m);
     920:	2008943a 	slli	r4,r4,16
     924:	84000084 	addi	r16,r16,2
     928:	00057080 	call	5708 <__subsf3>
     92c:	1009883a 	mov	r4,r2
     930:	0002e940 	call	2e94 <expf>
     934:	9809883a 	mov	r4,r19
     938:	100b883a 	mov	r5,r2
     93c:	00047d40 	call	47d4 <__addsf3>
     940:	1027883a 	mov	r19,r2
     944:	003ff106 	br	90c <__ram_exceptions_end+0xfdffe8ec>
	offset = m + logf(sum);
     948:	9809883a 	mov	r4,r19
     94c:	00030000 	call	3000 <logf>
     950:	9009883a 	mov	r4,r18
     954:	100b883a 	mov	r5,r2
     958:	00047d40 	call	47d4 <__addsf3>
     95c:	1025883a 	mov	r18,r2
	for (alt_u16 i = 0; i < input_len; i++)
     960:	0021883a 	mov	r16,zero
     964:	80bfffcc 	andi	r2,r16,65535
     968:	15000c26 	beq	r2,r20,99c <softmax+0x104>
		src[i] = f2bf(expf(src[i] - offset));
     96c:	8900000b 	ldhu	r4,0(r17)
		if (bf2f(src[i]) > m)
			m = bf2f(src[i]);
	for (i = 0; i < input_len; i++)
		sum += expf(bf2f(src[i]) - m);
	offset = m + logf(sum);
	for (alt_u16 i = 0; i < input_len; i++)
     970:	84000044 	addi	r16,r16,1
     974:	8c400084 	addi	r17,r17,2
		src[i] = f2bf(expf(src[i] - offset));
     978:	0005c5c0 	call	5c5c <__floatsisf>
     97c:	900b883a 	mov	r5,r18
     980:	1009883a 	mov	r4,r2
     984:	00057080 	call	5708 <__subsf3>
     988:	1009883a 	mov	r4,r2
     98c:	0002e940 	call	2e94 <expf>
     990:	1004d43a 	srli	r2,r2,16
     994:	88bfff8d 	sth	r2,-2(r17)
     998:	003ff206 	br	964 <__ram_exceptions_end+0xfdffe944>
}
     99c:	dfc00717 	ldw	ra,28(sp)
     9a0:	dd800617 	ldw	r22,24(sp)
     9a4:	dd400517 	ldw	r21,20(sp)
     9a8:	dd000417 	ldw	r20,16(sp)
     9ac:	dcc00317 	ldw	r19,12(sp)
     9b0:	dc800217 	ldw	r18,8(sp)
     9b4:	dc400117 	ldw	r17,4(sp)
     9b8:	dc000017 	ldw	r16,0(sp)
     9bc:	dec00804 	addi	sp,sp,32
     9c0:	f800283a 	ret

000009c4 <scale>:

//////////////////////////////////////////////////////////////////////////////
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     9c4:	defff104 	addi	sp,sp,-60
     9c8:	dc400615 	stw	r17,24(sp)
     9cc:	dc400f17 	ldw	r17,60(sp)
     9d0:	ddc00c15 	stw	r23,48(sp)
     9d4:	202f883a 	mov	r23,r4
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
     9d8:	893fffcc 	andi	r4,r17,65535
	for (alt_u16 i = 0; i < input_len; i++)
		src[i] = f2bf(expf(src[i] - offset));
}

//////////////////////////////////////////////////////////////////////////////
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     9dc:	dfc00e15 	stw	ra,56(sp)
     9e0:	df000d15 	stw	fp,52(sp)
     9e4:	dd800b15 	stw	r22,44(sp)
     9e8:	2839883a 	mov	fp,r5
     9ec:	382d883a 	mov	r22,r7
     9f0:	dd400a15 	stw	r21,40(sp)
     9f4:	dd000915 	stw	r20,36(sp)
     9f8:	302b883a 	mov	r21,r6
     9fc:	dcc00815 	stw	r19,32(sp)
     a00:	dc800715 	stw	r18,28(sp)
     a04:	dc000515 	stw	r16,20(sp)
     a08:	3025883a 	mov	r18,r6
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
     a0c:	0005d800 	call	5d80 <__floatunsisf>
     a10:	a93fffcc 	andi	r4,r21,65535
     a14:	d8800415 	stw	r2,16(sp)
     a18:	0005d800 	call	5d80 <__floatunsisf>
     a1c:	d8c00417 	ldw	r3,16(sp)
	for (alt_u16 i = 0; i < input_len; i++)
		src[i] = f2bf(expf(src[i] - offset));
}

//////////////////////////////////////////////////////////////////////////////
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     a20:	dc001017 	ldw	r16,64(sp)
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
     a24:	100b883a 	mov	r5,r2
     a28:	1809883a 	mov	r4,r3
     a2c:	0004c9c0 	call	4c9c <__divsf3>
        scale_height = (float)new_height / (float)height;
     a30:	813fffcc 	andi	r4,r16,65535
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
     a34:	d8800015 	stw	r2,0(sp)
        scale_height = (float)new_height / (float)height;
     a38:	0005d800 	call	5d80 <__floatunsisf>
     a3c:	b13fffcc 	andi	r4,r22,65535
	for (alt_u16 i = 0; i < input_len; i++)
		src[i] = f2bf(expf(src[i] - offset));
}

//////////////////////////////////////////////////////////////////////////////
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     a40:	8027883a 	mov	r19,r16
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;
     a44:	1021883a 	mov	r16,r2
     a48:	0005d800 	call	5d80 <__floatunsisf>
     a4c:	100b883a 	mov	r5,r2
     a50:	8009883a 	mov	r4,r16
	for (alt_u16 i = 0; i < input_len; i++)
		src[i] = f2bf(expf(src[i] - offset));
}

//////////////////////////////////////////////////////////////////////////////
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     a54:	8829883a 	mov	r20,r17
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;
     a58:	0004c9c0 	call	4c9c <__divsf3>
     a5c:	8c63883a 	add	r17,r17,r17
     a60:	dc40010d 	sth	r17,4(sp)
     a64:	102d883a 	mov	r22,r2

        src_ptr = 0;
     a68:	002b883a 	mov	r21,zero
        for(cy = 0; cy < new_height; cy++) {
     a6c:	0023883a 	mov	r17,zero
     a70:	9cffffcc 	andi	r19,r19,65535
     a74:	94bfffcc 	andi	r18,r18,65535
            for(cx = 0; cx < new_width; cx++) {
     a78:	a53fffcc 	andi	r20,r20,65535

        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;

        src_ptr = 0;
        for(cy = 0; cy < new_height; cy++) {
     a7c:	897fffcc 	andi	r5,r17,65535
     a80:	2cc02b2e 	bgeu	r5,r19,b30 <scale+0x16c>
     a84:	9009883a 	mov	r4,r18
     a88:	00047ac0 	call	47ac <__mulsi3>
     a8c:	1013883a 	mov	r9,r2
            for(cx = 0; cx < new_width; cx++) {
                nearest =  (int)(((float)(cy * width) / scale_height) + ((float)cx / scale_width));
     a90:	0007883a 	mov	r3,zero
     a94:	18e1883a 	add	r16,r3,r3
        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;

        src_ptr = 0;
        for(cy = 0; cy < new_height; cy++) {
            for(cx = 0; cx < new_width; cx++) {
     a98:	1a3fffcc 	andi	r8,r3,65535
     a9c:	8561883a 	add	r16,r16,r21
     aa0:	45001f26 	beq	r8,r20,b20 <scale+0x15c>
                nearest =  (int)(((float)(cy * width) / scale_height) + ((float)cx / scale_width));
                pixel = IORD_16DIRECT(src, nearest << 1);
     aa4:	4809883a 	mov	r4,r9
     aa8:	d8c00415 	stw	r3,16(sp)
     aac:	da400315 	stw	r9,12(sp)
     ab0:	da000215 	stw	r8,8(sp)
     ab4:	0005c5c0 	call	5c5c <__floatsisf>
     ab8:	b00b883a 	mov	r5,r22
     abc:	1009883a 	mov	r4,r2
     ac0:	0004c9c0 	call	4c9c <__divsf3>
     ac4:	da000217 	ldw	r8,8(sp)
     ac8:	d8800215 	stw	r2,8(sp)
     acc:	4009883a 	mov	r4,r8
     ad0:	0005d800 	call	5d80 <__floatunsisf>
     ad4:	d9400017 	ldw	r5,0(sp)
     ad8:	1009883a 	mov	r4,r2
     adc:	0004c9c0 	call	4c9c <__divsf3>
     ae0:	da800217 	ldw	r10,8(sp)
     ae4:	100b883a 	mov	r5,r2
     ae8:	5009883a 	mov	r4,r10
     aec:	00047d40 	call	47d4 <__addsf3>
     af0:	1009883a 	mov	r4,r2
     af4:	0005bec0 	call	5bec <__fixsfsi>
     af8:	1085883a 	add	r2,r2,r2
     afc:	b885883a 	add	r2,r23,r2
     b00:	1080002b 	ldhuio	r2,0(r2)
                IOWR_16DIRECT(dst, src_ptr, pixel);
     b04:	843fffcc 	andi	r16,r16,65535
     b08:	e421883a 	add	r16,fp,r16
     b0c:	8080002d 	sthio	r2,0(r16)
        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;

        src_ptr = 0;
        for(cy = 0; cy < new_height; cy++) {
            for(cx = 0; cx < new_width; cx++) {
     b10:	d8c00417 	ldw	r3,16(sp)
     b14:	da400317 	ldw	r9,12(sp)
     b18:	18c00044 	addi	r3,r3,1
     b1c:	003fdd06 	br	a94 <__ram_exceptions_end+0xfdffea74>
     b20:	d880010b 	ldhu	r2,4(sp)

        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;

        src_ptr = 0;
        for(cy = 0; cy < new_height; cy++) {
     b24:	8c400044 	addi	r17,r17,1
     b28:	a8ab883a 	add	r21,r21,r2
     b2c:	003fd306 	br	a7c <__ram_exceptions_end+0xfdffea5c>
                pixel = IORD_16DIRECT(src, nearest << 1);
                IOWR_16DIRECT(dst, src_ptr, pixel);
                src_ptr += 2;
            }
        }
}
     b30:	dfc00e17 	ldw	ra,56(sp)
     b34:	df000d17 	ldw	fp,52(sp)
     b38:	ddc00c17 	ldw	r23,48(sp)
     b3c:	dd800b17 	ldw	r22,44(sp)
     b40:	dd400a17 	ldw	r21,40(sp)
     b44:	dd000917 	ldw	r20,36(sp)
     b48:	dcc00817 	ldw	r19,32(sp)
     b4c:	dc800717 	ldw	r18,28(sp)
     b50:	dc400617 	ldw	r17,24(sp)
     b54:	dc000517 	ldw	r16,20(sp)
     b58:	dec00f04 	addi	sp,sp,60
     b5c:	f800283a 	ret

00000b60 <rgb565_to_feature>:

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
     b60:	defff504 	addi	sp,sp,-44
     b64:	dd000515 	stw	r20,20(sp)
     b68:	2829883a 	mov	r20,r5
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     b6c:	d9400b0b 	ldhu	r5,44(sp)
            }
        }
}

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
     b70:	dcc00415 	stw	r19,16(sp)
     b74:	2027883a 	mov	r19,r4
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     b78:	2809883a 	mov	r4,r5
            }
        }
}

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
     b7c:	df000915 	stw	fp,36(sp)
     b80:	dd800715 	stw	r22,28(sp)
     b84:	dd400615 	stw	r21,24(sp)
     b88:	dc800315 	stw	r18,12(sp)
     b8c:	dc400215 	stw	r17,8(sp)
     b90:	dfc00a15 	stw	ra,40(sp)
     b94:	ddc00815 	stw	r23,32(sp)
     b98:	dc000115 	stw	r16,4(sp)
     b9c:	302b883a 	mov	r21,r6
     ba0:	382d883a 	mov	r22,r7
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     ba4:	00047ac0 	call	47ac <__mulsi3>
     ba8:	1039883a 	mov	fp,r2
//////////////////////////////////////////////////////////////////////////////
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
     bac:	0023883a 	mov	r17,zero
	for (i=0; i<(res*res); i++) {
     bb0:	0025883a 	mov	r18,zero
     bb4:	97002626 	beq	r18,fp,c50 <rgb565_to_feature+0xf0>
		pixel = IORD_16DIRECT(src, ptr);
     bb8:	9c45883a 	add	r2,r19,r17
     bbc:	1400002b 	ldhuio	r16,0(r2)
     bc0:	843fffcc 	andi	r16,r16,65535

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     bc4:	813e000c 	andi	r4,r16,63488
     bc8:	2008d23a 	srli	r4,r4,8
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
     bcc:	a447883a 	add	r3,r20,r17

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     bd0:	d8c00015 	stw	r3,0(sp)
     bd4:	0005c5c0 	call	5c5c <__floatsisf>
     bd8:	0150dff4 	movhi	r5,17279
     bdc:	1009883a 	mov	r4,r2
     be0:	0004c9c0 	call	4c9c <__divsf3>
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
     be4:	1004d43a 	srli	r2,r2,16
     be8:	d8c00017 	ldw	r3,0(sp)
     bec:	85ffffcc 	andi	r23,r16,65535
     bf0:	1880002d 	sthio	r2,0(r3)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     bf4:	8101f80c 	andi	r4,r16,2016
     bf8:	2008d0fa 	srli	r4,r4,3

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
     bfc:	ac47883a 	add	r3,r21,r17

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     c00:	d8c00015 	stw	r3,0(sp)
     c04:	0005c5c0 	call	5c5c <__floatsisf>
     c08:	0150dff4 	movhi	r5,17279
     c0c:	1009883a 	mov	r4,r2
     c10:	0004c9c0 	call	4c9c <__divsf3>

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
     c14:	1004d43a 	srli	r2,r2,16
     c18:	d8c00017 	ldw	r3,0(sp)
     c1c:	1880002d 	sthio	r2,0(r3)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     c20:	b80890fa 	slli	r4,r23,3
	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
		IOWR_16DIRECT(dst_b, ptr, f2bf((float)((pixel & 0x1f) << 3) / 255.0));
     c24:	b461883a 	add	r16,r22,r17

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     c28:	21003e0c 	andi	r4,r4,248
     c2c:	0005c5c0 	call	5c5c <__floatsisf>
     c30:	0150dff4 	movhi	r5,17279
     c34:	1009883a 	mov	r4,r2
     c38:	0004c9c0 	call	4c9c <__divsf3>
	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
		IOWR_16DIRECT(dst_b, ptr, f2bf((float)((pixel & 0x1f) << 3) / 255.0));
     c3c:	1004d43a 	srli	r2,r2,16
     c40:	8080002d 	sthio	r2,0(r16)
		ptr += 2;
     c44:	8c400084 	addi	r17,r17,2
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     c48:	94800044 	addi	r18,r18,1
     c4c:	003fd906 	br	bb4 <__ram_exceptions_end+0xfdffeb94>
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
		IOWR_16DIRECT(dst_b, ptr, f2bf((float)((pixel & 0x1f) << 3) / 255.0));
		ptr += 2;
	}
}
     c50:	dfc00a17 	ldw	ra,40(sp)
     c54:	df000917 	ldw	fp,36(sp)
     c58:	ddc00817 	ldw	r23,32(sp)
     c5c:	dd800717 	ldw	r22,28(sp)
     c60:	dd400617 	ldw	r21,24(sp)
     c64:	dd000517 	ldw	r20,20(sp)
     c68:	dcc00417 	ldw	r19,16(sp)
     c6c:	dc800317 	ldw	r18,12(sp)
     c70:	dc400217 	ldw	r17,8(sp)
     c74:	dc000117 	ldw	r16,4(sp)
     c78:	dec00b04 	addi	sp,sp,44
     c7c:	f800283a 	ret

00000c80 <rgb_to_grey>:

//////////////////////////////////////////////////////////////////////////////
alt_u16 rgb_to_grey(alt_u16 rgb565) {
     c80:	defffd04 	addi	sp,sp,-12
     c84:	dc000015 	stw	r16,0(sp)
     c88:	2021883a 	mov	r16,r4
	alt_u16 grey;

	grey = (alt_u16)((float)((rgb565 & 0xf800) >> 8) * 0.299);
     c8c:	213e000c 	andi	r4,r4,63488
     c90:	2008d23a 	srli	r4,r4,8
		ptr += 2;
	}
}

//////////////////////////////////////////////////////////////////////////////
alt_u16 rgb_to_grey(alt_u16 rgb565) {
     c94:	dfc00215 	stw	ra,8(sp)
     c98:	dc400115 	stw	r17,4(sp)
	alt_u16 grey;

	grey = (alt_u16)((float)((rgb565 & 0xf800) >> 8) * 0.299);
     c9c:	0005c5c0 	call	5c5c <__floatsisf>
     ca0:	1009883a 	mov	r4,r2
     ca4:	00086b00 	call	86b0 <__extendsfdf2>
     ca8:	01b95834 	movhi	r6,58720
     cac:	01cff4f4 	movhi	r7,16339
     cb0:	31906244 	addi	r6,r6,16777
     cb4:	39c8b404 	addi	r7,r7,8912
     cb8:	1009883a 	mov	r4,r2
     cbc:	180b883a 	mov	r5,r3
     cc0:	00073440 	call	7344 <__muldf3>
     cc4:	180b883a 	mov	r5,r3
     cc8:	1009883a 	mov	r4,r2
     ccc:	00039c40 	call	39c4 <__fixunsdfsi>
	grey += (alt_u16)((float)((rgb565 & 0x07e0) >> 3) * 0.587);
     cd0:	8101f80c 	andi	r4,r16,2016
     cd4:	2008d0fa 	srli	r4,r4,3

//////////////////////////////////////////////////////////////////////////////
alt_u16 rgb_to_grey(alt_u16 rgb565) {
	alt_u16 grey;

	grey = (alt_u16)((float)((rgb565 & 0xf800) >> 8) * 0.299);
     cd8:	1023883a 	mov	r17,r2
	grey += (alt_u16)((float)((rgb565 & 0x07e0) >> 3) * 0.587);
     cdc:	0005c5c0 	call	5c5c <__floatsisf>
     ce0:	1009883a 	mov	r4,r2
     ce4:	00086b00 	call	86b0 <__extendsfdf2>
     ce8:	018e5634 	movhi	r6,14680
     cec:	01cff8f4 	movhi	r7,16355
     cf0:	31841884 	addi	r6,r6,4194
     cf4:	39f22d04 	addi	r7,r7,-14156
     cf8:	1009883a 	mov	r4,r2
     cfc:	180b883a 	mov	r5,r3
     d00:	00073440 	call	7344 <__muldf3>
     d04:	180b883a 	mov	r5,r3
     d08:	1009883a 	mov	r4,r2
     d0c:	00039c40 	call	39c4 <__fixunsdfsi>
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
     d10:	800890fa 	slli	r4,r16,3
//////////////////////////////////////////////////////////////////////////////
alt_u16 rgb_to_grey(alt_u16 rgb565) {
	alt_u16 grey;

	grey = (alt_u16)((float)((rgb565 & 0xf800) >> 8) * 0.299);
	grey += (alt_u16)((float)((rgb565 & 0x07e0) >> 3) * 0.587);
     d14:	88a3883a 	add	r17,r17,r2
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
     d18:	21003e0c 	andi	r4,r4,248
     d1c:	0005c5c0 	call	5c5c <__floatsisf>
     d20:	1009883a 	mov	r4,r2
     d24:	00086b00 	call	86b0 <__extendsfdf2>
     d28:	01a7efb4 	movhi	r6,40894
     d2c:	01cfef74 	movhi	r7,16317
     d30:	319db244 	addi	r6,r6,30409
     d34:	39cbc684 	addi	r7,r7,12058
     d38:	1009883a 	mov	r4,r2
     d3c:	180b883a 	mov	r5,r3
     d40:	00073440 	call	7344 <__muldf3>
     d44:	1009883a 	mov	r4,r2
     d48:	180b883a 	mov	r5,r3
     d4c:	00039c40 	call	39c4 <__fixunsdfsi>
}
     d50:	8885883a 	add	r2,r17,r2
     d54:	dfc00217 	ldw	ra,8(sp)
     d58:	dc400117 	ldw	r17,4(sp)
     d5c:	dc000017 	ldw	r16,0(sp)
     d60:	dec00304 	addi	sp,sp,12
     d64:	f800283a 	ret

00000d68 <featuremap_txt>:

//////////////////////////////////////////////////////////////////////////////
void featuremap_txt(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
     d68:	deffdb04 	addi	sp,sp,-148
     d6c:	dc801d15 	stw	r18,116(sp)

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
     d70:	04801704 	movi	r18,92
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
}

//////////////////////////////////////////////////////////////////////////////
void featuremap_txt(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
     d74:	dd402015 	stw	r21,128(sp)
     d78:	dcc01e15 	stw	r19,120(sp)
     d7c:	dc401c15 	stw	r17,112(sp)
     d80:	dc001b15 	stw	r16,108(sp)
     d84:	2823883a 	mov	r17,r5
     d88:	3021883a 	mov	r16,r6

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
     d8c:	000b883a 	mov	r5,zero
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
}

//////////////////////////////////////////////////////////////////////////////
void featuremap_txt(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
     d90:	202b883a 	mov	r21,r4
     d94:	3027883a 	mov	r19,r6

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
     d98:	d809883a 	mov	r4,sp
     d9c:	900d883a 	mov	r6,r18
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
}

//////////////////////////////////////////////////////////////////////////////
void featuremap_txt(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
     da0:	dfc02415 	stw	ra,144(sp)
     da4:	df002315 	stw	fp,140(sp)
     da8:	ddc02215 	stw	r23,136(sp)
     dac:	dd802115 	stw	r22,132(sp)
     db0:	dd001f15 	stw	r20,124(sp)

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
     db4:	00089dc0 	call	89dc <memset>
     db8:	00800804 	movi	r2,32
     dbc:	d8800005 	stb	r2,0(sp)
     dc0:	00801804 	movi	r2,96
     dc4:	d8800045 	stb	r2,1(sp)
     dc8:	00800b44 	movi	r2,45
     dcc:	d8800085 	stb	r2,2(sp)
     dd0:	00800b84 	movi	r2,46
     dd4:	d88000c5 	stb	r2,3(sp)
     dd8:	008009c4 	movi	r2,39
     ddc:	d8800105 	stb	r2,4(sp)
     de0:	008017c4 	movi	r2,95
     de4:	d8800145 	stb	r2,5(sp)
     de8:	00800e84 	movi	r2,58
     dec:	d8800185 	stb	r2,6(sp)
     df0:	00800b04 	movi	r2,44
     df4:	d88001c5 	stb	r2,7(sp)
     df8:	00800884 	movi	r2,34
     dfc:	d8800205 	stb	r2,8(sp)
     e00:	00800f44 	movi	r2,61
     e04:	d8800245 	stb	r2,9(sp)
     e08:	00801784 	movi	r2,94
     e0c:	d8800285 	stb	r2,10(sp)
     e10:	00800ec4 	movi	r2,59
     e14:	d88002c5 	stb	r2,11(sp)
     e18:	00800f04 	movi	r2,60
     e1c:	d8800305 	stb	r2,12(sp)
     e20:	00800ac4 	movi	r2,43
     e24:	d8800345 	stb	r2,13(sp)
     e28:	00800844 	movi	r2,33
     e2c:	d8800385 	stb	r2,14(sp)
     e30:	00800a84 	movi	r2,42
     e34:	d88003c5 	stb	r2,15(sp)
     e38:	00800fc4 	movi	r2,63
     e3c:	d8800405 	stb	r2,16(sp)
     e40:	00800bc4 	movi	r2,47
     e44:	d8800445 	stb	r2,17(sp)
     e48:	008018c4 	movi	r2,99
     e4c:	d8800485 	stb	r2,18(sp)
     e50:	00801304 	movi	r2,76
     e54:	d88004c5 	stb	r2,19(sp)
     e58:	00801e84 	movi	r2,122
     e5c:	d8800545 	stb	r2,21(sp)
     e60:	00801c84 	movi	r2,114
     e64:	d8800585 	stb	r2,22(sp)
     e68:	00801cc4 	movi	r2,115
     e6c:	d88005c5 	stb	r2,23(sp)
     e70:	00800dc4 	movi	r2,55
     e74:	d8800605 	stb	r2,24(sp)
     e78:	00801504 	movi	r2,84
     e7c:	d8800645 	stb	r2,25(sp)
     e80:	00801a44 	movi	r2,105
     e84:	d8800685 	stb	r2,26(sp)
     e88:	00801d84 	movi	r2,118
     e8c:	d88006c5 	stb	r2,27(sp)
     e90:	00801284 	movi	r2,74
     e94:	d8800705 	stb	r2,28(sp)
     e98:	00801d04 	movi	r2,116
     e9c:	d8800745 	stb	r2,29(sp)
     ea0:	008010c4 	movi	r2,67
     ea4:	d8800785 	stb	r2,30(sp)
     ea8:	00801ec4 	movi	r2,123
     eac:	dc800505 	stb	r18,20(sp)
     eb0:	d88007c5 	stb	r2,31(sp)
     eb4:	00800cc4 	movi	r2,51
     eb8:	d8800805 	stb	r2,32(sp)
     ebc:	00801184 	movi	r2,70
     ec0:	d8800845 	stb	r2,33(sp)
     ec4:	00800a44 	movi	r2,41
     ec8:	d8800885 	stb	r2,34(sp)
     ecc:	00801244 	movi	r2,73
     ed0:	d88008c5 	stb	r2,35(sp)
     ed4:	00801b04 	movi	r2,108
     ed8:	d8800905 	stb	r2,36(sp)
     edc:	00800a04 	movi	r2,40
     ee0:	d8800945 	stb	r2,37(sp)
     ee4:	00801e04 	movi	r2,120
     ee8:	d8800985 	stb	r2,38(sp)
     eec:	00801684 	movi	r2,90
     ef0:	d88009c5 	stb	r2,39(sp)
     ef4:	00801984 	movi	r2,102
     ef8:	d8800a05 	stb	r2,40(sp)
     efc:	00801644 	movi	r2,89
     f00:	d8800a45 	stb	r2,41(sp)
     f04:	00800d44 	movi	r2,53
     f08:	d8800a85 	stb	r2,42(sp)
     f0c:	008014c4 	movi	r2,83
     f10:	d8800ac5 	stb	r2,43(sp)
     f14:	00800c84 	movi	r2,50
     f18:	d8800b05 	stb	r2,44(sp)
     f1c:	00801944 	movi	r2,101
     f20:	d8800b45 	stb	r2,45(sp)
     f24:	00801844 	movi	r2,97
     f28:	d8800b85 	stb	r2,46(sp)
     f2c:	00801a84 	movi	r2,106
     f30:	d8800bc5 	stb	r2,47(sp)
     f34:	00801bc4 	movi	r2,111
     f38:	d8800c05 	stb	r2,48(sp)
     f3c:	00800c44 	movi	r2,49
     f40:	d8800c45 	stb	r2,49(sp)
     f44:	00800d04 	movi	r2,52
     f48:	d8800c85 	stb	r2,50(sp)
     f4c:	008016c4 	movi	r2,91
     f50:	d8800cc5 	stb	r2,51(sp)
     f54:	00801b84 	movi	r2,110
     f58:	d8800d05 	stb	r2,52(sp)
     f5c:	00801d44 	movi	r2,117
     f60:	d8800d45 	stb	r2,53(sp)
     f64:	00801e44 	movi	r2,121
     f68:	d8800d85 	stb	r2,54(sp)
     f6c:	00801144 	movi	r2,69
     f70:	d8800dc5 	stb	r2,55(sp)
     f74:	00801744 	movi	r2,93
     f78:	d8800e05 	stb	r2,56(sp)
     f7c:	00801404 	movi	r2,80
     f80:	d8800e45 	stb	r2,57(sp)
     f84:	00800d84 	movi	r2,54
     f88:	d8800e85 	stb	r2,58(sp)
     f8c:	00801584 	movi	r2,86
     f90:	d8800ec5 	stb	r2,59(sp)
     f94:	00800e44 	movi	r2,57
     f98:	d8800f05 	stb	r2,60(sp)
     f9c:	00801ac4 	movi	r2,107
     fa0:	d8800f45 	stb	r2,61(sp)
     fa4:	00801604 	movi	r2,88
     fa8:	d8800f85 	stb	r2,62(sp)
     fac:	00801c04 	movi	r2,112
     fb0:	d8800fc5 	stb	r2,63(sp)
     fb4:	008012c4 	movi	r2,75
     fb8:	d8801005 	stb	r2,64(sp)
     fbc:	00801dc4 	movi	r2,119
     fc0:	d8801045 	stb	r2,65(sp)
     fc4:	008011c4 	movi	r2,71
     fc8:	d8801085 	stb	r2,66(sp)
     fcc:	00801a04 	movi	r2,104
     fd0:	d88010c5 	stb	r2,67(sp)
     fd4:	00801c44 	movi	r2,113
     fd8:	d8801105 	stb	r2,68(sp)
     fdc:	00801044 	movi	r2,65
     fe0:	d8801145 	stb	r2,69(sp)
     fe4:	00801544 	movi	r2,85
     fe8:	d8801185 	stb	r2,70(sp)
     fec:	00801884 	movi	r2,98
     ff0:	d88011c5 	stb	r2,71(sp)
     ff4:	008013c4 	movi	r2,79
     ff8:	d8801205 	stb	r2,72(sp)
     ffc:	00801904 	movi	r2,100
    1000:	d8801245 	stb	r2,73(sp)
    1004:	00800e04 	movi	r2,56
    1008:	d8801285 	stb	r2,74(sp)
    100c:	008008c4 	movi	r2,35
    1010:	d88012c5 	stb	r2,75(sp)
    1014:	00801204 	movi	r2,72
    1018:	d8801305 	stb	r2,76(sp)
    101c:	00801484 	movi	r2,82
    1020:	d8801345 	stb	r2,77(sp)
    1024:	00801104 	movi	r2,68
    1028:	d8801385 	stb	r2,78(sp)
    102c:	00801084 	movi	r2,66
    1030:	d88013c5 	stb	r2,79(sp)
    1034:	00800c04 	movi	r2,48
    1038:	d8801405 	stb	r2,80(sp)
    103c:	00800904 	movi	r2,36
    1040:	d8801445 	stb	r2,81(sp)
    1044:	00801b44 	movi	r2,109
    1048:	d8801485 	stb	r2,82(sp)
    104c:	008019c4 	movi	r2,103
    1050:	d88014c5 	stb	r2,83(sp)
    1054:	00801344 	movi	r2,77
    1058:	d8801505 	stb	r2,84(sp)
    105c:	008015c4 	movi	r2,87
    1060:	d8801545 	stb	r2,85(sp)
    1064:	00800984 	movi	r2,38
    1068:	d8801585 	stb	r2,86(sp)
    106c:	00801444 	movi	r2,81
    1070:	d88015c5 	stb	r2,87(sp)
    1074:	00800944 	movi	r2,37
    1078:	d8801605 	stb	r2,88(sp)
    107c:	817fffcc 	andi	r5,r16,65535
    1080:	00801384 	movi	r2,78
    1084:	d8801645 	stb	r2,89(sp)
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
				for (xx=0; xx<step; xx++)
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
			sum = (sum / (step * step));
    1088:	2809883a 	mov	r4,r5
//////////////////////////////////////////////////////////////////////////////
void featuremap_txt(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    108c:	00801004 	movi	r2,64
    1090:	d8801685 	stb	r2,90(sp)
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
				for (xx=0; xx<step; xx++)
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
			sum = (sum / (step * step));
    1094:	00047ac0 	call	47ac <__mulsi3>
    1098:	d8801715 	stw	r2,92(sp)
			47,99,76,92,122,114,115,55,84,105,118,74,116,67,123,51,70,41,73,108,
			40,120,90,102,89,53,83,50,101,97,106,111,49,52,91,110,117,121,69,93,
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
    109c:	0025883a 	mov	r18,zero
    10a0:	8c7fffcc 	andi	r17,r17,65535
    10a4:	913fffcc 	andi	r4,r18,65535
    10a8:	2440382e 	bgeu	r4,r17,118c <featuremap_txt+0x424>
		line = (y * res);
    10ac:	880b883a 	mov	r5,r17
    10b0:	00047ac0 	call	47ac <__mulsi3>
    10b4:	102d883a 	mov	r22,r2
		for (x=0; x<res; x+=step) {
    10b8:	0021883a 	mov	r16,zero
    10bc:	9d3fffcc 	andi	r20,r19,65535
    10c0:	80bfffcc 	andi	r2,r16,65535
    10c4:	14402c2e 	bgeu	r2,r17,1178 <featuremap_txt+0x410>
			sum = 0;
			src_ptr = (x + line) << 1;
    10c8:	1585883a 	add	r2,r2,r22
    10cc:	1087883a 	add	r3,r2,r2
			for (yy=0; yy<step; yy++)
    10d0:	a039883a 	mov	fp,r20
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
			sum = 0;
    10d4:	000f883a 	mov	r7,zero
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
    10d8:	000b883a 	mov	r5,zero
    10dc:	28bfffcc 	andi	r2,r5,65535
    10e0:	15001526 	beq	r2,r20,1138 <featuremap_txt+0x3d0>
    10e4:	e52fc83a 	sub	r23,fp,r20
				for (xx=0; xx<step; xx++)
    10e8:	e5c01026 	beq	fp,r23,112c <featuremap_txt+0x3c4>
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
    10ec:	bdc5883a 	add	r2,r23,r23
    10f0:	10c5883a 	add	r2,r2,r3
    10f4:	a885883a 	add	r2,r21,r2
    10f8:	1100002b 	ldhuio	r4,0(r2)
    10fc:	213fffcc 	andi	r4,r4,65535
    1100:	d8c01a15 	stw	r3,104(sp)
    1104:	d9401815 	stw	r5,96(sp)
    1108:	d9c01915 	stw	r7,100(sp)
    110c:	0000c800 	call	c80 <rgb_to_grey>
    1110:	d9c01917 	ldw	r7,100(sp)
    1114:	10bfffcc 	andi	r2,r2,65535
    1118:	bdc00044 	addi	r23,r23,1
    111c:	388f883a 	add	r7,r7,r2
    1120:	d9401817 	ldw	r5,96(sp)
    1124:	d8c01a17 	ldw	r3,104(sp)
    1128:	003fef06 	br	10e8 <__ram_exceptions_end+0xfdfff0c8>
	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
    112c:	29400044 	addi	r5,r5,1
    1130:	e479883a 	add	fp,fp,r17
    1134:	003fe906 	br	10dc <__ram_exceptions_end+0xfdfff0bc>
				for (xx=0; xx<step; xx++)
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
			sum = (sum / (step * step));
			sum = (sum * 92) / 255;		// scale grey count
    1138:	d9401717 	ldw	r5,92(sp)
    113c:	3809883a 	mov	r4,r7
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
    1140:	84e1883a 	add	r16,r16,r19
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
				for (xx=0; xx<step; xx++)
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
			sum = (sum / (step * step));
			sum = (sum * 92) / 255;		// scale grey count
    1144:	00046f00 	call	46f0 <__udivsi3>
    1148:	01401704 	movi	r5,92
    114c:	1009883a 	mov	r4,r2
    1150:	00047ac0 	call	47ac <__mulsi3>
			printf("%c", char_grey[sum]);
    1154:	01403fc4 	movi	r5,255
    1158:	1009883a 	mov	r4,r2
    115c:	00046f00 	call	46f0 <__udivsi3>
    1160:	d885883a 	add	r2,sp,r2
    1164:	11400003 	ldbu	r5,0(r2)
    1168:	01000074 	movhi	r4,1
    116c:	2122f004 	addi	r4,r4,-29760
    1170:	0002d400 	call	2d40 <printf_>
    1174:	003fd206 	br	10c0 <__ram_exceptions_end+0xfdfff0a0>
		}
		printf("\n");
    1178:	01000074 	movhi	r4,1
    117c:	2122ef04 	addi	r4,r4,-29764
    1180:	0002d400 	call	2d40 <printf_>
			47,99,76,92,122,114,115,55,84,105,118,74,116,67,123,51,70,41,73,108,
			40,120,90,102,89,53,83,50,101,97,106,111,49,52,91,110,117,121,69,93,
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
    1184:	94e5883a 	add	r18,r18,r19
    1188:	003fc606 	br	10a4 <__ram_exceptions_end+0xfdfff084>
			sum = (sum * 92) / 255;		// scale grey count
			printf("%c", char_grey[sum]);
		}
		printf("\n");
	}
}
    118c:	dfc02417 	ldw	ra,144(sp)
    1190:	df002317 	ldw	fp,140(sp)
    1194:	ddc02217 	ldw	r23,136(sp)
    1198:	dd802117 	ldw	r22,132(sp)
    119c:	dd402017 	ldw	r21,128(sp)
    11a0:	dd001f17 	ldw	r20,124(sp)
    11a4:	dcc01e17 	ldw	r19,120(sp)
    11a8:	dc801d17 	ldw	r18,116(sp)
    11ac:	dc401c17 	ldw	r17,112(sp)
    11b0:	dc001b17 	ldw	r16,108(sp)
    11b4:	dec02504 	addi	sp,sp,148
    11b8:	f800283a 	ret

000011bc <main>:

//////////////////////////////////////////////////////////////////////////////
int main()
{
    11bc:	defff704 	addi	sp,sp,-36
    11c0:	023fffb4 	movhi	r8,65534
    11c4:	dc000015 	stw	r16,0(sp)
    11c8:	422f6c04 	addi	r8,r8,-16976
			"R", 		// relu
			"M3S2", 	// max pool kernel 3 stride 2
			""
	};

	featuremap_txt(image64by64, 64, 2, 0);
    11cc:	04001004 	movi	r16,64
    11d0:	01000074 	movhi	r4,1
	}
}

//////////////////////////////////////////////////////////////////////////////
int main()
{
    11d4:	dfc00815 	stw	ra,32(sp)
    11d8:	dc800215 	stw	r18,8(sp)
    11dc:	dc400115 	stw	r17,4(sp)
    11e0:	ddc00715 	stw	r23,28(sp)
    11e4:	dd800615 	stw	r22,24(sp)
    11e8:	dd400515 	stw	r21,20(sp)
    11ec:	dd000415 	stw	r20,16(sp)
    11f0:	dcc00315 	stw	r19,12(sp)
			"R", 		// relu
			"M3S2", 	// max pool kernel 3 stride 2
			""
	};

	featuremap_txt(image64by64, 64, 2, 0);
    11f4:	000f883a 	mov	r7,zero
	}
}

//////////////////////////////////////////////////////////////////////////////
int main()
{
    11f8:	da37883a 	add	sp,sp,r8
			"R", 		// relu
			"M3S2", 	// max pool kernel 3 stride 2
			""
	};

	featuremap_txt(image64by64, 64, 2, 0);
    11fc:	01800084 	movi	r6,2
    1200:	800b883a 	mov	r5,r16
    1204:	21234f04 	addi	r4,r4,-29380
    1208:	0000d680 	call	d68 <featuremap_txt>

	bfloat16 L1_featuremap[64*64][2], L1_kernel[3*3][2][16];	// 16 is output L2_featuremap count
	bfloat16 L2_featuremap[64*64][16];	// 5 is output classes

	// create 3 feature map input bfloat16
	rgb565_to_feature(image64by64, L1_featuremap[0], L1_featuremap[1], L1_featuremap[2], 64);
    120c:	008000b4 	movhi	r2,2
    1210:	10800404 	addi	r2,r2,16
    1214:	16c5883a 	add	r2,r2,sp
    1218:	01000074 	movhi	r4,1
    121c:	dc000015 	stw	r16,0(sp)
    1220:	11c00204 	addi	r7,r2,8
    1224:	11800104 	addi	r6,r2,4
    1228:	100b883a 	mov	r5,r2
    122c:	21234f04 	addi	r4,r4,-29380
    1230:	0000b600 	call	b60 <rgb565_to_feature>
    1234:	0023883a 	mov	r17,zero
	for (i=0; i<16; i++) {
		for (j=0; j<3; j++) {
			convolution(L1_featuremap[j], (j == 0), L2_featuremap[i], L1_kernel[0][i], 3, 64, 1, 1);
    1238:	8025883a 	mov	r18,r16
    123c:	008000b4 	movhi	r2,2
    1240:	10900404 	addi	r2,r2,16400
    1244:	16c5883a 	add	r2,r2,sp
	}
}

//////////////////////////////////////////////////////////////////////////////
int main()
{
    1248:	0021883a 	mov	r16,zero

	// create 3 feature map input bfloat16
	rgb565_to_feature(image64by64, L1_featuremap[0], L1_featuremap[1], L1_featuremap[2], 64);
	for (i=0; i<16; i++) {
		for (j=0; j<3; j++) {
			convolution(L1_featuremap[j], (j == 0), L2_featuremap[i], L1_kernel[0][i], 3, 64, 1, 1);
    124c:	146f883a 	add	r23,r2,r17
    1250:	05000044 	movi	r20,1
    1254:	d8800404 	addi	r2,sp,16
    1258:	146b883a 	add	r21,r2,r17
    125c:	008000b4 	movhi	r2,2
    1260:	8409883a 	add	r4,r16,r16
    1264:	10800404 	addi	r2,r2,16
    1268:	817fffcc 	andi	r5,r16,65535
    126c:	16c5883a 	add	r2,r2,sp
    1270:	2109883a 	add	r4,r4,r4
    1274:	058000c4 	movi	r22,3
    1278:	dd000315 	stw	r20,12(sp)
    127c:	dd000215 	stw	r20,8(sp)
    1280:	dc800115 	stw	r18,4(sp)
    1284:	dd800015 	stw	r22,0(sp)
    1288:	b80f883a 	mov	r7,r23
    128c:	a80d883a 	mov	r6,r21
    1290:	280b003a 	cmpeq	r5,r5,zero
    1294:	1109883a 	add	r4,r2,r4
    1298:	84000044 	addi	r16,r16,1
    129c:	00004700 	call	470 <convolution>
	bfloat16 L2_featuremap[64*64][16];	// 5 is output classes

	// create 3 feature map input bfloat16
	rgb565_to_feature(image64by64, L1_featuremap[0], L1_featuremap[1], L1_featuremap[2], 64);
	for (i=0; i<16; i++) {
		for (j=0; j<3; j++) {
    12a0:	85bfec1e 	bne	r16,r22,1254 <__ram_exceptions_end+0xfdfff234>
			convolution(L1_featuremap[j], (j == 0), L2_featuremap[i], L1_kernel[0][i], 3, 64, 1, 1);
		}
		relu(L2_featuremap[i], 64);
    12a4:	01401004 	movi	r5,64
    12a8:	a809883a 	mov	r4,r21
    12ac:	00002780 	call	278 <relu>
    12b0:	8c400804 	addi	r17,r17,32
	bfloat16 L1_featuremap[64*64][2], L1_kernel[3*3][2][16];	// 16 is output L2_featuremap count
	bfloat16 L2_featuremap[64*64][16];	// 5 is output classes

	// create 3 feature map input bfloat16
	rgb565_to_feature(image64by64, L1_featuremap[0], L1_featuremap[1], L1_featuremap[2], 64);
	for (i=0; i<16; i++) {
    12b4:	00808004 	movi	r2,512
    12b8:	88bfe01e 	bne	r17,r2,123c <__ram_exceptions_end+0xfdfff21c>
			convolution(L1_featuremap[j], (j == 0), L2_featuremap[i], L1_kernel[0][i], 3, 64, 1, 1);
		}
		relu(L2_featuremap[i], 64);
	}
	return 0;
}
    12bc:	0005883a 	mov	r2,zero
    12c0:	020000b4 	movhi	r8,2
    12c4:	42109404 	addi	r8,r8,16976
    12c8:	da37883a 	add	sp,sp,r8
    12cc:	dfc00817 	ldw	ra,32(sp)
    12d0:	ddc00717 	ldw	r23,28(sp)
    12d4:	dd800617 	ldw	r22,24(sp)
    12d8:	dd400517 	ldw	r21,20(sp)
    12dc:	dd000417 	ldw	r20,16(sp)
    12e0:	dcc00317 	ldw	r19,12(sp)
    12e4:	dc800217 	ldw	r18,8(sp)
    12e8:	dc400117 	ldw	r17,4(sp)
    12ec:	dc000017 	ldw	r16,0(sp)
    12f0:	dec00904 	addi	sp,sp,36
    12f4:	f800283a 	ret

000012f8 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
    12f8:	31c0022e 	bgeu	r6,r7,1304 <_out_buffer+0xc>
    ((char*)buffer)[idx] = character;
    12fc:	298d883a 	add	r6,r5,r6
    1300:	31000005 	stb	r4,0(r6)
    1304:	f800283a 	ret

00001308 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    1308:	f800283a 	ret

0000130c <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
    130c:	defff604 	addi	sp,sp,-40
    1310:	dc800215 	stw	r18,8(sp)
    1314:	dc800d17 	ldw	r18,52(sp)
    1318:	dd800615 	stw	r22,24(sp)
    131c:	dd400515 	stw	r21,20(sp)
    1320:	dd000415 	stw	r20,16(sp)
    1324:	dcc00315 	stw	r19,12(sp)
    1328:	dc400115 	stw	r17,4(sp)
    132c:	dc000015 	stw	r16,0(sp)
    1330:	dfc00915 	stw	ra,36(sp)
    1334:	df000815 	stw	fp,32(sp)
    1338:	ddc00715 	stw	r23,28(sp)
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    133c:	908000cc 	andi	r2,r18,3
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
    1340:	2027883a 	mov	r19,r4
    1344:	2829883a 	mov	r20,r5
    1348:	3023883a 	mov	r17,r6
    134c:	382b883a 	mov	r21,r7
    1350:	dc000b17 	ldw	r16,44(sp)
    1354:	dd800c17 	ldw	r22,48(sp)
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    1358:	1000021e 	bne	r2,zero,1364 <_out_rev+0x58>
    135c:	81afc83a 	sub	r23,r16,r6
    1360:	00000406 	br	1374 <_out_rev+0x68>
    1364:	ddc00a17 	ldw	r23,40(sp)
    1368:	bc2f883a 	add	r23,r23,r16
    136c:	81a1883a 	add	r16,r16,r6
    1370:	00000906 	br	1398 <_out_rev+0x8c>
    for (size_t i = len; i < width; i++) {
    1374:	35c5883a 	add	r2,r6,r23
    1378:	15bffa2e 	bgeu	r2,r22,1364 <__ram_exceptions_end+0xfdfff344>
      out(' ', buffer, idx++, maxlen);
    137c:	a80f883a 	mov	r7,r21
    1380:	a00b883a 	mov	r5,r20
    1384:	01000804 	movi	r4,32
    1388:	37000044 	addi	fp,r6,1
    138c:	983ee83a 	callr	r19
    1390:	e00d883a 	mov	r6,fp
    1394:	003ff706 	br	1374 <__ram_exceptions_end+0xfdfff354>
    1398:	bdffffc4 	addi	r23,r23,-1
    }
  }

  // reverse string
  while (len) {
    139c:	34000726 	beq	r6,r16,13bc <_out_rev+0xb0>
    out(buf[--len], buffer, idx++, maxlen);
    13a0:	b9000007 	ldb	r4,0(r23)
    13a4:	a80f883a 	mov	r7,r21
    13a8:	a00b883a 	mov	r5,r20
    13ac:	37000044 	addi	fp,r6,1
    13b0:	983ee83a 	callr	r19
    13b4:	e00d883a 	mov	r6,fp
    13b8:	003ff706 	br	1398 <__ram_exceptions_end+0xfdfff378>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    13bc:	9480008c 	andi	r18,r18,2
    13c0:	90000a26 	beq	r18,zero,13ec <_out_rev+0xe0>
    while (idx - start_idx < width) {
    13c4:	8445c83a 	sub	r2,r16,r17
    13c8:	1580082e 	bgeu	r2,r22,13ec <_out_rev+0xe0>
      out(' ', buffer, idx++, maxlen);
    13cc:	800d883a 	mov	r6,r16
    13d0:	84800044 	addi	r18,r16,1
    13d4:	a80f883a 	mov	r7,r21
    13d8:	a00b883a 	mov	r5,r20
    13dc:	01000804 	movi	r4,32
    13e0:	983ee83a 	callr	r19
    13e4:	9021883a 	mov	r16,r18
    13e8:	003ff606 	br	13c4 <__ram_exceptions_end+0xfdfff3a4>
    }
  }

  return idx;
}
    13ec:	8005883a 	mov	r2,r16
    13f0:	dfc00917 	ldw	ra,36(sp)
    13f4:	df000817 	ldw	fp,32(sp)
    13f8:	ddc00717 	ldw	r23,28(sp)
    13fc:	dd800617 	ldw	r22,24(sp)
    1400:	dd400517 	ldw	r21,20(sp)
    1404:	dd000417 	ldw	r20,16(sp)
    1408:	dcc00317 	ldw	r19,12(sp)
    140c:	dc800217 	ldw	r18,8(sp)
    1410:	dc400117 	ldw	r17,4(sp)
    1414:	dc000017 	ldw	r16,0(sp)
    1418:	dec00a04 	addi	sp,sp,40
    141c:	f800283a 	ret

00001420 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1420:	deffff04 	addi	sp,sp,-4
    1424:	da000717 	ldw	r8,28(sp)
    1428:	dfc00015 	stw	ra,0(sp)
    142c:	d8c00117 	ldw	r3,4(sp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    1430:	4300008c 	andi	r12,r8,2
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1434:	d8800217 	ldw	r2,8(sp)
    1438:	da800317 	ldw	r10,12(sp)
    143c:	dac00417 	ldw	r11,16(sp)
    1440:	db800517 	ldw	r14,20(sp)
    1444:	da400617 	ldw	r9,24(sp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    1448:	60001a1e 	bne	r12,zero,14b4 <_ntoa_format+0x94>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    144c:	48000726 	beq	r9,zero,146c <_ntoa_format+0x4c>
    1450:	4300004c 	andi	r12,r8,1
    1454:	60000526 	beq	r12,zero,146c <_ntoa_format+0x4c>
    1458:	53003fcc 	andi	r12,r10,255
    145c:	6000021e 	bne	r12,zero,1468 <_ntoa_format+0x48>
    1460:	4300030c 	andi	r12,r8,12
    1464:	60000126 	beq	r12,zero,146c <_ntoa_format+0x4c>
      width--;
    1468:	4a7fffc4 	addi	r9,r9,-1
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    146c:	030007c4 	movi	r12,31
      buf[len++] = '0';
    1470:	03400c04 	movi	r13,48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1474:	13800436 	bltu	r2,r14,1488 <_ntoa_format+0x68>
      buf[len++] = '0';
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1478:	4340004c 	andi	r13,r8,1
    147c:	030007c4 	movi	r12,31
      buf[len++] = '0';
    1480:	03c00c04 	movi	r15,48
    1484:	00000a06 	br	14b0 <_ntoa_format+0x90>
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1488:	60bffb36 	bltu	r12,r2,1478 <__ram_exceptions_end+0xfdfff458>
      buf[len++] = '0';
    148c:	189f883a 	add	r15,r3,r2
    1490:	7b400005 	stb	r13,0(r15)
    1494:	10800044 	addi	r2,r2,1
    1498:	003ff606 	br	1474 <__ram_exceptions_end+0xfdfff454>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    149c:	1240052e 	bgeu	r2,r9,14b4 <_ntoa_format+0x94>
    14a0:	60800436 	bltu	r12,r2,14b4 <_ntoa_format+0x94>
      buf[len++] = '0';
    14a4:	18bf883a 	add	ra,r3,r2
    14a8:	fbc00005 	stb	r15,0(ra)
    14ac:	10800044 	addi	r2,r2,1
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    14b0:	683ffa1e 	bne	r13,zero,149c <__ram_exceptions_end+0xfdfff47c>
      buf[len++] = '0';
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    14b4:	4300040c 	andi	r12,r8,16
    14b8:	60002726 	beq	r12,zero,1558 <_ntoa_format+0x138>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    14bc:	4301000c 	andi	r12,r8,1024
    14c0:	03400404 	movi	r13,16
    14c4:	6000091e 	bne	r12,zero,14ec <_ntoa_format+0xcc>
    14c8:	10000826 	beq	r2,zero,14ec <_ntoa_format+0xcc>
    14cc:	13800126 	beq	r2,r14,14d4 <_ntoa_format+0xb4>
    14d0:	1240061e 	bne	r2,r9,14ec <_ntoa_format+0xcc>
      len--;
    14d4:	133fffc4 	addi	r12,r2,-1
      if (len && (base == 16U)) {
    14d8:	60000326 	beq	r12,zero,14e8 <_ntoa_format+0xc8>
    14dc:	5b400f1e 	bne	r11,r13,151c <_ntoa_format+0xfc>
        len--;
    14e0:	10bfff84 	addi	r2,r2,-2
    14e4:	00000206 	br	14f0 <_ntoa_format+0xd0>
    14e8:	0005883a 	mov	r2,zero
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    14ec:	5b400c1e 	bne	r11,r13,1520 <_ntoa_format+0x100>
    14f0:	42c0080c 	andi	r11,r8,32
    14f4:	030007c4 	movi	r12,31
    14f8:	5800041e 	bne	r11,zero,150c <_ntoa_format+0xec>
    14fc:	60802836 	bltu	r12,r2,15a0 <_ntoa_format+0x180>
      buf[len++] = 'x';
    1500:	1897883a 	add	r11,r3,r2
    1504:	03001e04 	movi	r12,120
    1508:	00000b06 	br	1538 <_ntoa_format+0x118>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    150c:	60802436 	bltu	r12,r2,15a0 <_ntoa_format+0x180>
      buf[len++] = 'X';
    1510:	1897883a 	add	r11,r3,r2
    1514:	03001604 	movi	r12,88
    1518:	00000706 	br	1538 <_ntoa_format+0x118>
    151c:	6005883a 	mov	r2,r12
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1520:	03000084 	movi	r12,2
    1524:	5b00061e 	bne	r11,r12,1540 <_ntoa_format+0x120>
    1528:	02c007c4 	movi	r11,31
    152c:	58801c36 	bltu	r11,r2,15a0 <_ntoa_format+0x180>
      buf[len++] = 'b';
    1530:	1897883a 	add	r11,r3,r2
    1534:	03001884 	movi	r12,98
    1538:	5b000005 	stb	r12,0(r11)
    153c:	10800044 	addi	r2,r2,1
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    1540:	02c007c4 	movi	r11,31
    1544:	58801636 	bltu	r11,r2,15a0 <_ntoa_format+0x180>
      buf[len++] = '0';
    1548:	1897883a 	add	r11,r3,r2
    154c:	03000c04 	movi	r12,48
    1550:	5b000005 	stb	r12,0(r11)
    1554:	10800044 	addi	r2,r2,1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    1558:	02c007c4 	movi	r11,31
    155c:	58801036 	bltu	r11,r2,15a0 <_ntoa_format+0x180>
    if (negative) {
    1560:	52803fcc 	andi	r10,r10,255
    1564:	50000326 	beq	r10,zero,1574 <_ntoa_format+0x154>
      buf[len++] = '-';
    1568:	1895883a 	add	r10,r3,r2
    156c:	02c00b44 	movi	r11,45
    1570:	00000906 	br	1598 <_ntoa_format+0x178>
    }
    else if (flags & FLAGS_PLUS) {
    1574:	4280010c 	andi	r10,r8,4
    1578:	50000326 	beq	r10,zero,1588 <_ntoa_format+0x168>
      buf[len++] = '+';  // ignore the space if the '+' exists
    157c:	1895883a 	add	r10,r3,r2
    1580:	02c00ac4 	movi	r11,43
    1584:	00000406 	br	1598 <_ntoa_format+0x178>
    }
    else if (flags & FLAGS_SPACE) {
    1588:	4280020c 	andi	r10,r8,8
    158c:	50000426 	beq	r10,zero,15a0 <_ntoa_format+0x180>
      buf[len++] = ' ';
    1590:	1895883a 	add	r10,r3,r2
    1594:	02c00804 	movi	r11,32
    1598:	52c00005 	stb	r11,0(r10)
    159c:	10800044 	addi	r2,r2,1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    15a0:	da000415 	stw	r8,16(sp)
    15a4:	da400315 	stw	r9,12(sp)
    15a8:	d8800215 	stw	r2,8(sp)
    15ac:	d8c00115 	stw	r3,4(sp)
}
    15b0:	dfc00017 	ldw	ra,0(sp)
    15b4:	dec00104 	addi	sp,sp,4
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    15b8:	000130c1 	jmpi	130c <_out_rev>

000015bc <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    15bc:	deffe404 	addi	sp,sp,-112
    15c0:	d8c01d17 	ldw	r3,116(sp)
    15c4:	dc001215 	stw	r16,72(sp)
    15c8:	dc001c17 	ldw	r16,112(sp)
    15cc:	dd801815 	stw	r22,96(sp)
    15d0:	dd401715 	stw	r21,92(sp)
    15d4:	dd001615 	stw	r20,88(sp)
    15d8:	dcc01515 	stw	r19,84(sp)
    15dc:	dc801415 	stw	r18,80(sp)
    15e0:	dfc01b15 	stw	ra,108(sp)
    15e4:	df001a15 	stw	fp,104(sp)
    15e8:	ddc01915 	stw	r23,100(sp)
    15ec:	dc401315 	stw	r17,76(sp)
    15f0:	d8c00f15 	stw	r3,60(sp)
    15f4:	2029883a 	mov	r20,r4
    15f8:	282b883a 	mov	r21,r5
    15fc:	302d883a 	mov	r22,r6
    1600:	dcc01e17 	ldw	r19,120(sp)
    1604:	dc802117 	ldw	r18,132(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
    1608:	8000021e 	bne	r16,zero,1614 <_ntoa_long+0x58>
    flags &= ~FLAGS_HASH;
    160c:	00bffbc4 	movi	r2,-17
    1610:	90a4703a 	and	r18,r18,r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    1614:	9081000c 	andi	r2,r18,1024
    1618:	10000126 	beq	r2,zero,1620 <_ntoa_long+0x64>
    161c:	80002726 	beq	r16,zero,16bc <_ntoa_long+0x100>
    1620:	9080080c 	andi	r2,r18,32
    1624:	10000226 	beq	r2,zero,1630 <_ntoa_long+0x74>
    1628:	04401044 	movi	r17,65
    162c:	00000106 	br	1634 <_ntoa_long+0x78>
    1630:	04401844 	movi	r17,97
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    1634:	000d883a 	mov	r6,zero
    1638:	07000244 	movi	fp,9
    163c:	8c7ffd84 	addi	r17,r17,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1640:	05c00804 	movi	r23,32
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
    1644:	8009883a 	mov	r4,r16
    1648:	980b883a 	mov	r5,r19
    164c:	d9801015 	stw	r6,64(sp)
    1650:	d9c01115 	stw	r7,68(sp)
    1654:	00047540 	call	4754 <__umodsi3>
    1658:	d9801017 	ldw	r6,64(sp)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    165c:	11003fcc 	andi	r4,r2,255
    1660:	2100201c 	xori	r4,r4,128
    1664:	213fe004 	addi	r4,r4,-128
    1668:	32000044 	addi	r8,r6,1
    166c:	d9c01117 	ldw	r7,68(sp)
    1670:	e1000216 	blt	fp,r4,167c <_ntoa_long+0xc0>
    1674:	10800c04 	addi	r2,r2,48
    1678:	00000106 	br	1680 <_ntoa_long+0xc4>
    167c:	8885883a 	add	r2,r17,r2
    1680:	d8c00704 	addi	r3,sp,28
    1684:	198d883a 	add	r6,r3,r6
    1688:	30800005 	stb	r2,0(r6)
      value /= base;
    168c:	8009883a 	mov	r4,r16
    1690:	980b883a 	mov	r5,r19
    1694:	d9c01115 	stw	r7,68(sp)
    1698:	da001015 	stw	r8,64(sp)
    169c:	00046f00 	call	46f0 <__udivsi3>
    16a0:	1021883a 	mov	r16,r2
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    16a4:	d9c01117 	ldw	r7,68(sp)
    16a8:	da001017 	ldw	r8,64(sp)
    16ac:	10000426 	beq	r2,zero,16c0 <_ntoa_long+0x104>
    16b0:	400d883a 	mov	r6,r8
    16b4:	45ffe31e 	bne	r8,r23,1644 <__ram_exceptions_end+0xfdfff624>
    16b8:	00000106 	br	16c0 <_ntoa_long+0x104>

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    16bc:	0011883a 	mov	r8,zero
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    16c0:	d8802017 	ldw	r2,128(sp)
    16c4:	d8c00f17 	ldw	r3,60(sp)
    16c8:	dc800615 	stw	r18,24(sp)
    16cc:	d8800515 	stw	r2,20(sp)
    16d0:	d8801f17 	ldw	r2,124(sp)
    16d4:	1c803fcc 	andi	r18,r3,255
    16d8:	dcc00315 	stw	r19,12(sp)
    16dc:	d8800415 	stw	r2,16(sp)
    16e0:	d8800704 	addi	r2,sp,28
    16e4:	dc800215 	stw	r18,8(sp)
    16e8:	da000115 	stw	r8,4(sp)
    16ec:	d8800015 	stw	r2,0(sp)
    16f0:	b00d883a 	mov	r6,r22
    16f4:	a80b883a 	mov	r5,r21
    16f8:	a009883a 	mov	r4,r20
    16fc:	00014200 	call	1420 <_ntoa_format>
}
    1700:	dfc01b17 	ldw	ra,108(sp)
    1704:	df001a17 	ldw	fp,104(sp)
    1708:	ddc01917 	ldw	r23,100(sp)
    170c:	dd801817 	ldw	r22,96(sp)
    1710:	dd401717 	ldw	r21,92(sp)
    1714:	dd001617 	ldw	r20,88(sp)
    1718:	dcc01517 	ldw	r19,84(sp)
    171c:	dc801417 	ldw	r18,80(sp)
    1720:	dc401317 	ldw	r17,76(sp)
    1724:	dc001217 	ldw	r16,72(sp)
    1728:	dec01c04 	addi	sp,sp,112
    172c:	f800283a 	ret

00001730 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1730:	deffe204 	addi	sp,sp,-120
    1734:	d8802017 	ldw	r2,128(sp)
    1738:	da801e17 	ldw	r10,120(sp)
    173c:	dac01f17 	ldw	r11,124(sp)
    1740:	dd801a15 	stw	r22,104(sp)
    1744:	dd401915 	stw	r21,100(sp)
    1748:	dd001815 	stw	r20,96(sp)
    174c:	dcc01715 	stw	r19,92(sp)
    1750:	dc801615 	stw	r18,88(sp)
    1754:	dc401515 	stw	r17,84(sp)
    1758:	d8801015 	stw	r2,64(sp)
    175c:	dfc01d15 	stw	ra,116(sp)
    1760:	df001c15 	stw	fp,112(sp)
    1764:	ddc01b15 	stw	r23,108(sp)
    1768:	dc001415 	stw	r16,80(sp)
    176c:	d9000f15 	stw	r4,60(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
    1770:	52c4b03a 	or	r2,r10,r11


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1774:	2829883a 	mov	r20,r5
    1778:	302b883a 	mov	r21,r6
    177c:	382d883a 	mov	r22,r7
    1780:	dc402117 	ldw	r17,132(sp)
    1784:	dc802217 	ldw	r18,136(sp)
    1788:	dcc02517 	ldw	r19,148(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
    178c:	1000021e 	bne	r2,zero,1798 <_ntoa_long_long+0x68>
    flags &= ~FLAGS_HASH;
    1790:	00fffbc4 	movi	r3,-17
    1794:	98e6703a 	and	r19,r19,r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    1798:	98c1000c 	andi	r3,r19,1024
    179c:	18000126 	beq	r3,zero,17a4 <_ntoa_long_long+0x74>
    17a0:	10002d26 	beq	r2,zero,1858 <_ntoa_long_long+0x128>
    17a4:	9880080c 	andi	r2,r19,32
    17a8:	10000226 	beq	r2,zero,17b4 <_ntoa_long_long+0x84>
    17ac:	04001044 	movi	r16,65
    17b0:	00000106 	br	17b8 <_ntoa_long_long+0x88>
    17b4:	04001844 	movi	r16,97
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    17b8:	0013883a 	mov	r9,zero
    17bc:	07000244 	movi	fp,9
    17c0:	843ffd84 	addi	r16,r16,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    17c4:	05c00804 	movi	r23,32
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
    17c8:	5009883a 	mov	r4,r10
    17cc:	580b883a 	mov	r5,r11
    17d0:	880d883a 	mov	r6,r17
    17d4:	900f883a 	mov	r7,r18
    17d8:	da401115 	stw	r9,68(sp)
    17dc:	da801215 	stw	r10,72(sp)
    17e0:	dac01315 	stw	r11,76(sp)
    17e4:	00040340 	call	4034 <__umoddi3>
    17e8:	da401117 	ldw	r9,68(sp)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    17ec:	10c03fcc 	andi	r3,r2,255
    17f0:	18c0201c 	xori	r3,r3,128
    17f4:	18ffe004 	addi	r3,r3,-128
    17f8:	4b000044 	addi	r12,r9,1
    17fc:	da801217 	ldw	r10,72(sp)
    1800:	dac01317 	ldw	r11,76(sp)
    1804:	e0c00216 	blt	fp,r3,1810 <_ntoa_long_long+0xe0>
    1808:	10800c04 	addi	r2,r2,48
    180c:	00000106 	br	1814 <_ntoa_long_long+0xe4>
    1810:	8085883a 	add	r2,r16,r2
    1814:	d8c00704 	addi	r3,sp,28
    1818:	1a53883a 	add	r9,r3,r9
    181c:	48800005 	stb	r2,0(r9)
      value /= base;
    1820:	5009883a 	mov	r4,r10
    1824:	580b883a 	mov	r5,r11
    1828:	880d883a 	mov	r6,r17
    182c:	900f883a 	mov	r7,r18
    1830:	db001115 	stw	r12,68(sp)
    1834:	0003a380 	call	3a38 <__udivdi3>
    1838:	1015883a 	mov	r10,r2
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    183c:	10c4b03a 	or	r2,r2,r3
  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    1840:	1817883a 	mov	r11,r3
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1844:	db001117 	ldw	r12,68(sp)
    1848:	10000426 	beq	r2,zero,185c <_ntoa_long_long+0x12c>
    184c:	6013883a 	mov	r9,r12
    1850:	65ffdd1e 	bne	r12,r23,17c8 <__ram_exceptions_end+0xfdfff7a8>
    1854:	00000106 	br	185c <_ntoa_long_long+0x12c>
// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    1858:	0019883a 	mov	r12,zero
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    185c:	d8802417 	ldw	r2,144(sp)
    1860:	d9000f17 	ldw	r4,60(sp)
    1864:	dc400315 	stw	r17,12(sp)
    1868:	d8800515 	stw	r2,20(sp)
    186c:	d8802317 	ldw	r2,140(sp)
    1870:	d8c00704 	addi	r3,sp,28
    1874:	dcc00615 	stw	r19,24(sp)
    1878:	d8800415 	stw	r2,16(sp)
    187c:	d8801017 	ldw	r2,64(sp)
    1880:	db000115 	stw	r12,4(sp)
    1884:	d8c00015 	stw	r3,0(sp)
    1888:	14403fcc 	andi	r17,r2,255
    188c:	dc400215 	stw	r17,8(sp)
    1890:	b00f883a 	mov	r7,r22
    1894:	a80d883a 	mov	r6,r21
    1898:	a00b883a 	mov	r5,r20
    189c:	00014200 	call	1420 <_ntoa_format>
}
    18a0:	dfc01d17 	ldw	ra,116(sp)
    18a4:	df001c17 	ldw	fp,112(sp)
    18a8:	ddc01b17 	ldw	r23,108(sp)
    18ac:	dd801a17 	ldw	r22,104(sp)
    18b0:	dd401917 	ldw	r21,100(sp)
    18b4:	dd001817 	ldw	r20,96(sp)
    18b8:	dcc01717 	ldw	r19,92(sp)
    18bc:	dc801617 	ldw	r18,88(sp)
    18c0:	dc401517 	ldw	r17,84(sp)
    18c4:	dc001417 	ldw	r16,80(sp)
    18c8:	dec01e04 	addi	sp,sp,120
    18cc:	f800283a 	ret

000018d0 <_out_char>:

// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
    18d0:	21003fcc 	andi	r4,r4,255
    18d4:	2100201c 	xori	r4,r4,128
    18d8:	213fe004 	addi	r4,r4,-128
    18dc:	20000126 	beq	r4,zero,18e4 <_out_char+0x14>
    _putchar(character);
    18e0:	000003c1 	jmpi	3c <_putchar>
    18e4:	f800283a 	ret

000018e8 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)idx; (void)maxlen;
  if (character) {
    18e8:	21003fcc 	andi	r4,r4,255
    18ec:	2100201c 	xori	r4,r4,128
    18f0:	213fe004 	addi	r4,r4,-128
    18f4:	20000326 	beq	r4,zero,1904 <_out_fct+0x1c>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
    18f8:	28800017 	ldw	r2,0(r5)
    18fc:	29400117 	ldw	r5,4(r5)
    1900:	1000683a 	jmp	r2
    1904:	f800283a 	ret

00001908 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    1908:	deffe104 	addi	sp,sp,-124
    190c:	dc401615 	stw	r17,88(sp)
    1910:	dc001515 	stw	r16,84(sp)
    1914:	dc401f17 	ldw	r17,124(sp)
    1918:	dc002017 	ldw	r16,128(sp)
    191c:	df001d15 	stw	fp,116(sp)
    1920:	d9000d15 	stw	r4,52(sp)
    1924:	d9400e15 	stw	r5,56(sp)
    1928:	d9800f15 	stw	r6,60(sp)
    192c:	3839883a 	mov	fp,r7

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
    1930:	880d883a 	mov	r6,r17
    1934:	800f883a 	mov	r7,r16
    1938:	8809883a 	mov	r4,r17
    193c:	800b883a 	mov	r5,r16
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    1940:	dd801b15 	stw	r22,108(sp)
    1944:	dd001915 	stw	r20,100(sp)
    1948:	dc801715 	stw	r18,92(sp)
    194c:	dfc01e15 	stw	ra,120(sp)
    1950:	ddc01c15 	stw	r23,112(sp)
    1954:	dd401a15 	stw	r21,104(sp)
    1958:	dcc01815 	stw	r19,96(sp)
    195c:	dc802117 	ldw	r18,132(sp)
    1960:	dd802217 	ldw	r22,136(sp)
    1964:	dd002317 	ldw	r20,140(sp)

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
    1968:	00070ec0 	call	70ec <__eqdf2>
    196c:	10000726 	beq	r2,zero,198c <_ftoa+0x84>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    1970:	008000c4 	movi	r2,3
    1974:	d8800115 	stw	r2,4(sp)
    1978:	00800074 	movhi	r2,1
    197c:	dd000315 	stw	r20,12(sp)
    1980:	dd800215 	stw	r22,8(sp)
    1984:	10a2f404 	addi	r2,r2,-29744
    1988:	00002106 	br	1a10 <_ftoa+0x108>
  if (value < -DBL_MAX)
    198c:	01bfffc4 	movi	r6,-1
    1990:	01fffc34 	movhi	r7,65520
    1994:	398f883a 	add	r7,r7,r6
    1998:	8809883a 	mov	r4,r17
    199c:	800b883a 	mov	r5,r16
    19a0:	00072500 	call	7250 <__ledf2>
    19a4:	1000070e 	bge	r2,zero,19c4 <_ftoa+0xbc>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    19a8:	00800104 	movi	r2,4
    19ac:	d8800115 	stw	r2,4(sp)
    19b0:	00800074 	movhi	r2,1
    19b4:	dd000315 	stw	r20,12(sp)
    19b8:	dd800215 	stw	r22,8(sp)
    19bc:	10a2f504 	addi	r2,r2,-29740
    19c0:	00001306 	br	1a10 <_ftoa+0x108>
  if (value > DBL_MAX)
    19c4:	01bfffc4 	movi	r6,-1
    19c8:	01dffc34 	movhi	r7,32752
    19cc:	398f883a 	add	r7,r7,r6
    19d0:	8809883a 	mov	r4,r17
    19d4:	800b883a 	mov	r5,r16
    19d8:	00071740 	call	7174 <__gedf2>
    19dc:	00800e0e 	bge	zero,r2,1a18 <_ftoa+0x110>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    19e0:	a080010c 	andi	r2,r20,4
    19e4:	10000426 	beq	r2,zero,19f8 <_ftoa+0xf0>
    19e8:	00800074 	movhi	r2,1
    19ec:	10a2f104 	addi	r2,r2,-29756
    19f0:	00c00104 	movi	r3,4
    19f4:	00000306 	br	1a04 <_ftoa+0xfc>
    19f8:	00800074 	movhi	r2,1
    19fc:	10a2f304 	addi	r2,r2,-29748
    1a00:	00c000c4 	movi	r3,3
    1a04:	dd000315 	stw	r20,12(sp)
    1a08:	dd800215 	stw	r22,8(sp)
    1a0c:	d8c00115 	stw	r3,4(sp)
    1a10:	d8800015 	stw	r2,0(sp)
    1a14:	0000f806 	br	1df8 <_ftoa+0x4f0>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
    1a18:	01d073b4 	movhi	r7,16846
    1a1c:	000d883a 	mov	r6,zero
    1a20:	39f35944 	addi	r7,r7,-12955
    1a24:	8809883a 	mov	r4,r17
    1a28:	800b883a 	mov	r5,r16
    1a2c:	00071740 	call	7174 <__gedf2>
    1a30:	00800716 	blt	zero,r2,1a50 <_ftoa+0x148>
    1a34:	01f073b4 	movhi	r7,49614
    1a38:	000d883a 	mov	r6,zero
    1a3c:	39f35944 	addi	r7,r7,-12955
    1a40:	8809883a 	mov	r4,r17
    1a44:	800b883a 	mov	r5,r16
    1a48:	00072500 	call	7250 <__ledf2>
    1a4c:	10000b0e 	bge	r2,zero,1a7c <_ftoa+0x174>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1a50:	d9800f17 	ldw	r6,60(sp)
    1a54:	d9400e17 	ldw	r5,56(sp)
    1a58:	d9000d17 	ldw	r4,52(sp)
    1a5c:	dd000415 	stw	r20,16(sp)
    1a60:	dd800315 	stw	r22,12(sp)
    1a64:	dc800215 	stw	r18,8(sp)
    1a68:	dc400015 	stw	r17,0(sp)
    1a6c:	dc000115 	stw	r16,4(sp)
    1a70:	e00f883a 	mov	r7,fp
    1a74:	0001e3c0 	call	1e3c <_etoa>
    1a78:	0000e406 	br	1e0c <_ftoa+0x504>
#endif
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
    1a7c:	000d883a 	mov	r6,zero
    1a80:	000f883a 	mov	r7,zero
    1a84:	8809883a 	mov	r4,r17
    1a88:	800b883a 	mov	r5,r16
    1a8c:	00072500 	call	7250 <__ledf2>
    1a90:	10000a0e 	bge	r2,zero,1abc <_ftoa+0x1b4>
    negative = true;
    value = 0 - value;
    1a94:	880d883a 	mov	r6,r17
    1a98:	800f883a 	mov	r7,r16
    1a9c:	0009883a 	mov	r4,zero
    1aa0:	000b883a 	mov	r5,zero
    1aa4:	0007bb00 	call	7bb0 <__subdf3>
    1aa8:	1023883a 	mov	r17,r2
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
    negative = true;
    1aac:	00800044 	movi	r2,1
    value = 0 - value;
    1ab0:	1821883a 	mov	r16,r3
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
    negative = true;
    1ab4:	d8801005 	stb	r2,64(sp)
    1ab8:	00000106 	br	1ac0 <_ftoa+0x1b8>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
    1abc:	d8001005 	stb	zero,64(sp)
    negative = true;
    value = 0 - value;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    1ac0:	a081000c 	andi	r2,r20,1024
    1ac4:	1000011e 	bne	r2,zero,1acc <_ftoa+0x1c4>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    1ac8:	04800184 	movi	r18,6
    1acc:	002b883a 	mov	r21,zero
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1ad0:	00800244 	movi	r2,9
    buf[len++] = '0';
    1ad4:	00c00c04 	movi	r3,48
  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1ad8:	01000804 	movi	r4,32
    1adc:	1480062e 	bgeu	r2,r18,1af8 <_ftoa+0x1f0>
    buf[len++] = '0';
    1ae0:	d9800504 	addi	r6,sp,20
    1ae4:	354b883a 	add	r5,r6,r21
    1ae8:	28c00005 	stb	r3,0(r5)
    1aec:	ad400044 	addi	r21,r21,1
    prec--;
    1af0:	94bfffc4 	addi	r18,r18,-1
  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1af4:	a93ff91e 	bne	r21,r4,1adc <__ram_exceptions_end+0xfdfffabc>
    buf[len++] = '0';
    prec--;
  }

  int whole = (int)value;
    1af8:	800b883a 	mov	r5,r16
    1afc:	8809883a 	mov	r4,r17
    1b00:	00084ac0 	call	84ac <__fixdfsi>
    1b04:	1027883a 	mov	r19,r2
  double tmp = (value - whole) * pow10[prec];
    1b08:	900490fa 	slli	r2,r18,3
    1b0c:	00c00074 	movhi	r3,1
    1b10:	18e2f704 	addi	r3,r3,-29732
    1b14:	1885883a 	add	r2,r3,r2
    1b18:	10c00017 	ldw	r3,0(r2)
    1b1c:	10800117 	ldw	r2,4(r2)
    1b20:	9809883a 	mov	r4,r19
    1b24:	d8c01115 	stw	r3,68(sp)
    1b28:	d8801215 	stw	r2,72(sp)
    1b2c:	000852c0 	call	852c <__floatsidf>
    1b30:	100d883a 	mov	r6,r2
    1b34:	180f883a 	mov	r7,r3
    1b38:	8809883a 	mov	r4,r17
    1b3c:	800b883a 	mov	r5,r16
    1b40:	0007bb00 	call	7bb0 <__subdf3>
    1b44:	d9801117 	ldw	r6,68(sp)
    1b48:	d9c01217 	ldw	r7,72(sp)
    1b4c:	1009883a 	mov	r4,r2
    1b50:	180b883a 	mov	r5,r3
    1b54:	00073440 	call	7344 <__muldf3>
  unsigned long frac = (unsigned long)tmp;
    1b58:	180b883a 	mov	r5,r3
    1b5c:	1009883a 	mov	r4,r2
    1b60:	d8c01415 	stw	r3,80(sp)
    1b64:	d8801315 	stw	r2,76(sp)
    1b68:	00039c40 	call	39c4 <__fixunsdfsi>
  diff = tmp - frac;
    1b6c:	1009883a 	mov	r4,r2
    prec--;
  }

  int whole = (int)value;
  double tmp = (value - whole) * pow10[prec];
  unsigned long frac = (unsigned long)tmp;
    1b70:	102f883a 	mov	r23,r2
  diff = tmp - frac;
    1b74:	00086080 	call	8608 <__floatunsidf>
    1b78:	da401417 	ldw	r9,80(sp)
    1b7c:	da801317 	ldw	r10,76(sp)
    1b80:	100d883a 	mov	r6,r2
    1b84:	480b883a 	mov	r5,r9
    1b88:	5009883a 	mov	r4,r10
    1b8c:	180f883a 	mov	r7,r3
    1b90:	0007bb00 	call	7bb0 <__subdf3>

  if (diff > 0.5) {
    1b94:	180b883a 	mov	r5,r3
    1b98:	000d883a 	mov	r6,zero
    1b9c:	01cff834 	movhi	r7,16352
    1ba0:	1009883a 	mov	r4,r2
    1ba4:	d8c01315 	stw	r3,76(sp)
    1ba8:	d8801415 	stw	r2,80(sp)
    1bac:	00071740 	call	7174 <__gedf2>
    1bb0:	d8c01317 	ldw	r3,76(sp)
    1bb4:	da401417 	ldw	r9,80(sp)
    1bb8:	00800c0e 	bge	zero,r2,1bec <_ftoa+0x2e4>
    ++frac;
    1bbc:	bdc00044 	addi	r23,r23,1
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    1bc0:	b809883a 	mov	r4,r23
    1bc4:	00086080 	call	8608 <__floatunsidf>
    1bc8:	d9001117 	ldw	r4,68(sp)
    1bcc:	d9401217 	ldw	r5,72(sp)
    1bd0:	100d883a 	mov	r6,r2
    1bd4:	180f883a 	mov	r7,r3
    1bd8:	00072500 	call	7250 <__ledf2>
    1bdc:	00800d16 	blt	zero,r2,1c14 <_ftoa+0x30c>
      frac = 0;
      ++whole;
    1be0:	9cc00044 	addi	r19,r19,1

  if (diff > 0.5) {
    ++frac;
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
      frac = 0;
    1be4:	002f883a 	mov	r23,zero
    1be8:	00000a06 	br	1c14 <_ftoa+0x30c>
      ++whole;
    }
  }
  else if (diff < 0.5) {
    1bec:	000d883a 	mov	r6,zero
    1bf0:	01cff834 	movhi	r7,16352
    1bf4:	4809883a 	mov	r4,r9
    1bf8:	180b883a 	mov	r5,r3
    1bfc:	00072500 	call	7250 <__ledf2>
    1c00:	10000416 	blt	r2,zero,1c14 <_ftoa+0x30c>
  }
  else if ((frac == 0U) || (frac & 1U)) {
    1c04:	b8000226 	beq	r23,zero,1c10 <_ftoa+0x308>
    1c08:	b880004c 	andi	r2,r23,1
    1c0c:	10000126 	beq	r2,zero,1c14 <_ftoa+0x30c>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
    1c10:	bdc00044 	addi	r23,r23,1
  }

  if (prec == 0U) {
    1c14:	9000191e 	bne	r18,zero,1c7c <_ftoa+0x374>
    diff = value - (double)whole;
    1c18:	9809883a 	mov	r4,r19
    1c1c:	000852c0 	call	852c <__floatsidf>
    1c20:	8809883a 	mov	r4,r17
    1c24:	800b883a 	mov	r5,r16
    1c28:	100d883a 	mov	r6,r2
    1c2c:	180f883a 	mov	r7,r3
    1c30:	0007bb00 	call	7bb0 <__subdf3>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    1c34:	000d883a 	mov	r6,zero
    1c38:	01cff834 	movhi	r7,16352
    1c3c:	1009883a 	mov	r4,r2
    1c40:	180b883a 	mov	r5,r3
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
  }

  if (prec == 0U) {
    diff = value - (double)whole;
    1c44:	1023883a 	mov	r17,r2
    1c48:	1821883a 	mov	r16,r3
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    1c4c:	00072500 	call	7250 <__ledf2>
    1c50:	1000060e 	bge	r2,zero,1c6c <_ftoa+0x364>
    1c54:	000d883a 	mov	r6,zero
    1c58:	01cff834 	movhi	r7,16352
    1c5c:	8809883a 	mov	r4,r17
    1c60:	800b883a 	mov	r5,r16
    1c64:	00071740 	call	7174 <__gedf2>
    1c68:	0080240e 	bge	zero,r2,1cfc <_ftoa+0x3f4>
    1c6c:	9880004c 	andi	r2,r19,1
    1c70:	10002226 	beq	r2,zero,1cfc <_ftoa+0x3f4>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    1c74:	9cc00044 	addi	r19,r19,1
    1c78:	00002006 	br	1cfc <_ftoa+0x3f4>
  else if ((frac == 0U) || (frac & 1U)) {
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
  }

  if (prec == 0U) {
    1c7c:	a805883a 	mov	r2,r21
    }
  }
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1c80:	04400804 	movi	r17,32
    1c84:	14402f26 	beq	r2,r17,1d44 <_ftoa+0x43c>
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
    1c88:	d9000504 	addi	r4,sp,20
    1c8c:	20a1883a 	add	r16,r4,r2
    1c90:	01400284 	movi	r5,10
    1c94:	b809883a 	mov	r4,r23
    1c98:	15400044 	addi	r21,r2,1
    1c9c:	00047540 	call	4754 <__umodsi3>
    1ca0:	10800c04 	addi	r2,r2,48
      if (!(frac /= 10U)) {
    1ca4:	b809883a 	mov	r4,r23
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
    1ca8:	80800005 	stb	r2,0(r16)
      if (!(frac /= 10U)) {
    1cac:	01400284 	movi	r5,10
    1cb0:	00046f00 	call	46f0 <__udivsi3>
    1cb4:	102f883a 	mov	r23,r2
  }
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
    1cb8:	94bfffc4 	addi	r18,r18,-1
      buf[len++] = (char)(48U + (frac % 10U));
    1cbc:	a805883a 	mov	r2,r21
      if (!(frac /= 10U)) {
    1cc0:	b83ff01e 	bne	r23,zero,1c84 <__ram_exceptions_end+0xfdfffc64>
    1cc4:	9565883a 	add	r18,r18,r21
        break;
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1cc8:	01400804 	movi	r5,32
      buf[len++] = '0';
    1ccc:	01800c04 	movi	r6,48
      if (!(frac /= 10U)) {
        break;
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1cd0:	11401c26 	beq	r2,r5,1d44 <_ftoa+0x43c>
    1cd4:	d9000504 	addi	r4,sp,20
    1cd8:	2087883a 	add	r3,r4,r2
    1cdc:	11000044 	addi	r4,r2,1
    1ce0:	14800326 	beq	r2,r18,1cf0 <_ftoa+0x3e8>
      buf[len++] = '0';
    1ce4:	19800005 	stb	r6,0(r3)
    1ce8:	2005883a 	mov	r2,r4
    1cec:	003ff806 	br	1cd0 <__ram_exceptions_end+0xfdfffcb0>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
      // add decimal
      buf[len++] = '.';
    1cf0:	00800b84 	movi	r2,46
    1cf4:	202b883a 	mov	r21,r4
    1cf8:	18800005 	stb	r2,0(r3)
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
    1cfc:	a805883a 	mov	r2,r21
      buf[len++] = '.';
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1d00:	04800804 	movi	r18,32
    1d04:	14800f26 	beq	r2,r18,1d44 <_ftoa+0x43c>
    buf[len++] = (char)(48 + (whole % 10));
    1d08:	d9400504 	addi	r5,sp,20
    1d0c:	28a3883a 	add	r17,r5,r2
    1d10:	9809883a 	mov	r4,r19
    1d14:	01400284 	movi	r5,10
    1d18:	14000044 	addi	r16,r2,1
    1d1c:	000467c0 	call	467c <__modsi3>
    1d20:	10800c04 	addi	r2,r2,48
    if (!(whole /= 10)) {
    1d24:	9809883a 	mov	r4,r19
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    buf[len++] = (char)(48 + (whole % 10));
    1d28:	88800005 	stb	r2,0(r17)
    if (!(whole /= 10)) {
    1d2c:	01400284 	movi	r5,10
    1d30:	00045f80 	call	45f8 <__divsi3>
    1d34:	1027883a 	mov	r19,r2
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    buf[len++] = (char)(48 + (whole % 10));
    1d38:	8005883a 	mov	r2,r16
    if (!(whole /= 10)) {
    1d3c:	983ff11e 	bne	r19,zero,1d04 <__ram_exceptions_end+0xfdfffce4>
    1d40:	00000106 	br	1d48 <_ftoa+0x440>
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
    1d44:	04000804 	movi	r16,32
      break;
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    1d48:	a0c000cc 	andi	r3,r20,3
    1d4c:	00800044 	movi	r2,1
    1d50:	18800f1e 	bne	r3,r2,1d90 <_ftoa+0x488>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    1d54:	b0000e26 	beq	r22,zero,1d90 <_ftoa+0x488>
    1d58:	d8801003 	ldbu	r2,64(sp)
    1d5c:	1000021e 	bne	r2,zero,1d68 <_ftoa+0x460>
    1d60:	a080030c 	andi	r2,r20,12
    1d64:	10000126 	beq	r2,zero,1d6c <_ftoa+0x464>
      width--;
    1d68:	b5bfffc4 	addi	r22,r22,-1
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    1d6c:	00800804 	movi	r2,32
      buf[len++] = '0';
    1d70:	00c00c04 	movi	r3,48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    1d74:	8580062e 	bgeu	r16,r22,1d90 <_ftoa+0x488>
    1d78:	80801a26 	beq	r16,r2,1de4 <_ftoa+0x4dc>
      buf[len++] = '0';
    1d7c:	d9800504 	addi	r6,sp,20
    1d80:	3409883a 	add	r4,r6,r16
    1d84:	20c00005 	stb	r3,0(r4)
    1d88:	84000044 	addi	r16,r16,1
    1d8c:	003ff906 	br	1d74 <__ram_exceptions_end+0xfdfffd54>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    1d90:	008007c4 	movi	r2,31
    1d94:	14001336 	bltu	r2,r16,1de4 <_ftoa+0x4dc>
    if (negative) {
    1d98:	d8801003 	ldbu	r2,64(sp)
    1d9c:	10000426 	beq	r2,zero,1db0 <_ftoa+0x4a8>
      buf[len++] = '-';
    1da0:	d8c00504 	addi	r3,sp,20
    1da4:	1c05883a 	add	r2,r3,r16
    1da8:	00c00b44 	movi	r3,45
    1dac:	00000b06 	br	1ddc <_ftoa+0x4d4>
    }
    else if (flags & FLAGS_PLUS) {
    1db0:	a080010c 	andi	r2,r20,4
    1db4:	10000426 	beq	r2,zero,1dc8 <_ftoa+0x4c0>
      buf[len++] = '+';  // ignore the space if the '+' exists
    1db8:	d9000504 	addi	r4,sp,20
    1dbc:	2405883a 	add	r2,r4,r16
    1dc0:	00c00ac4 	movi	r3,43
    1dc4:	00000506 	br	1ddc <_ftoa+0x4d4>
    }
    else if (flags & FLAGS_SPACE) {
    1dc8:	a080020c 	andi	r2,r20,8
    1dcc:	10000526 	beq	r2,zero,1de4 <_ftoa+0x4dc>
      buf[len++] = ' ';
    1dd0:	d9400504 	addi	r5,sp,20
    1dd4:	2c05883a 	add	r2,r5,r16
    1dd8:	00c00804 	movi	r3,32
    1ddc:	10c00005 	stb	r3,0(r2)
    1de0:	84000044 	addi	r16,r16,1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    1de4:	d9800504 	addi	r6,sp,20
    1de8:	dd000315 	stw	r20,12(sp)
    1dec:	dd800215 	stw	r22,8(sp)
    1df0:	dc000115 	stw	r16,4(sp)
    1df4:	d9800015 	stw	r6,0(sp)
    1df8:	d9800f17 	ldw	r6,60(sp)
    1dfc:	d9400e17 	ldw	r5,56(sp)
    1e00:	d9000d17 	ldw	r4,52(sp)
    1e04:	e00f883a 	mov	r7,fp
    1e08:	000130c0 	call	130c <_out_rev>
}
    1e0c:	dfc01e17 	ldw	ra,120(sp)
    1e10:	df001d17 	ldw	fp,116(sp)
    1e14:	ddc01c17 	ldw	r23,112(sp)
    1e18:	dd801b17 	ldw	r22,108(sp)
    1e1c:	dd401a17 	ldw	r21,104(sp)
    1e20:	dd001917 	ldw	r20,100(sp)
    1e24:	dcc01817 	ldw	r19,96(sp)
    1e28:	dc801717 	ldw	r18,92(sp)
    1e2c:	dc401617 	ldw	r17,88(sp)
    1e30:	dc001517 	ldw	r16,84(sp)
    1e34:	dec01f04 	addi	sp,sp,124
    1e38:	f800283a 	ret

00001e3c <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    1e3c:	deffe504 	addi	sp,sp,-108
    1e40:	dd401615 	stw	r21,88(sp)
    1e44:	dc401215 	stw	r17,72(sp)
    1e48:	dd401c17 	ldw	r21,112(sp)
    1e4c:	dc401b17 	ldw	r17,108(sp)
    1e50:	d8801e17 	ldw	r2,120(sp)
    1e54:	d9000615 	stw	r4,24(sp)
    1e58:	d9400715 	stw	r5,28(sp)
    1e5c:	d9800b15 	stw	r6,44(sp)
    1e60:	d9c00815 	stw	r7,32(sp)
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    1e64:	880d883a 	mov	r6,r17
    1e68:	a80f883a 	mov	r7,r21
    1e6c:	8809883a 	mov	r4,r17
    1e70:	a80b883a 	mov	r5,r21


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    1e74:	dd801715 	stw	r22,92(sp)
    1e78:	dd001515 	stw	r20,84(sp)
    1e7c:	dfc01a15 	stw	ra,104(sp)
    1e80:	df001915 	stw	fp,100(sp)
    1e84:	ddc01815 	stw	r23,96(sp)
    1e88:	dcc01415 	stw	r19,80(sp)
    1e8c:	dc801315 	stw	r18,76(sp)
    1e90:	dc001115 	stw	r16,68(sp)
    1e94:	dd001d17 	ldw	r20,116(sp)
    1e98:	d8800a15 	stw	r2,40(sp)
    1e9c:	dd801f17 	ldw	r22,124(sp)
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    1ea0:	00070ec0 	call	70ec <__eqdf2>
    1ea4:	10000e1e 	bne	r2,zero,1ee0 <_etoa+0xa4>
    1ea8:	01bfffc4 	movi	r6,-1
    1eac:	01dffc34 	movhi	r7,32752
    1eb0:	398f883a 	add	r7,r7,r6
    1eb4:	8809883a 	mov	r4,r17
    1eb8:	a80b883a 	mov	r5,r21
    1ebc:	00071740 	call	7174 <__gedf2>
    1ec0:	00800716 	blt	zero,r2,1ee0 <_etoa+0xa4>
    1ec4:	01bfffc4 	movi	r6,-1
    1ec8:	01fffc34 	movhi	r7,65520
    1ecc:	398f883a 	add	r7,r7,r6
    1ed0:	8809883a 	mov	r4,r17
    1ed4:	a80b883a 	mov	r5,r21
    1ed8:	00072500 	call	7250 <__ledf2>
    1edc:	1000160e 	bge	r2,zero,1f38 <_etoa+0xfc>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1ee0:	d8c00a17 	ldw	r3,40(sp)
    1ee4:	d9c00817 	ldw	r7,32(sp)
    1ee8:	d9800b17 	ldw	r6,44(sp)
    1eec:	d9400717 	ldw	r5,28(sp)
    1ef0:	d9000617 	ldw	r4,24(sp)
    1ef4:	dd801f15 	stw	r22,124(sp)
    1ef8:	d8c01e15 	stw	r3,120(sp)
    1efc:	dd001d15 	stw	r20,116(sp)
    1f00:	dc401b15 	stw	r17,108(sp)
    1f04:	dd401c15 	stw	r21,112(sp)
    if (flags & FLAGS_LEFT) {
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
    1f08:	dfc01a17 	ldw	ra,104(sp)
    1f0c:	df001917 	ldw	fp,100(sp)
    1f10:	ddc01817 	ldw	r23,96(sp)
    1f14:	dd801717 	ldw	r22,92(sp)
    1f18:	dd401617 	ldw	r21,88(sp)
    1f1c:	dd001517 	ldw	r20,84(sp)
    1f20:	dcc01417 	ldw	r19,80(sp)
    1f24:	dc801317 	ldw	r18,76(sp)
    1f28:	dc401217 	ldw	r17,72(sp)
    1f2c:	dc001117 	ldw	r16,68(sp)
    1f30:	dec01b04 	addi	sp,sp,108
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1f34:	00019081 	jmpi	1908 <_ftoa>
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
    1f38:	000d883a 	mov	r6,zero
    1f3c:	000f883a 	mov	r7,zero
    1f40:	8809883a 	mov	r4,r17
    1f44:	a80b883a 	mov	r5,r21
    1f48:	00072500 	call	7250 <__ledf2>
    value = -value;
    1f4c:	dc400c15 	stw	r17,48(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
    1f50:	1000020e 	bge	r2,zero,1f5c <_etoa+0x120>
    value = -value;
    1f54:	aca0003c 	xorhi	r18,r21,32768
    1f58:	00000106 	br	1f60 <_etoa+0x124>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
    1f5c:	a825883a 	mov	r18,r21
    value = -value;
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
    1f60:	b101000c 	andi	r4,r22,1024
    1f64:	d9000915 	stw	r4,36(sp)
    1f68:	2000011e 	bne	r4,zero,1f70 <_etoa+0x134>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    1f6c:	05000184 	movi	r20,6

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    1f70:	9008d53a 	srli	r4,r18,20
    1f74:	2101ffcc 	andi	r4,r4,2047
    1f78:	213f0044 	addi	r4,r4,-1023
    1f7c:	000852c0 	call	852c <__floatsidf>
    1f80:	019427f4 	movhi	r6,20639
    1f84:	01cff4f4 	movhi	r7,16339
    1f88:	319e7ec4 	addi	r6,r6,31227
    1f8c:	39d104c4 	addi	r7,r7,17427
    1f90:	1009883a 	mov	r4,r2
    1f94:	180b883a 	mov	r5,r3
    1f98:	00073440 	call	7344 <__muldf3>
    1f9c:	01a2d874 	movhi	r6,35681
    1fa0:	01cff1f4 	movhi	r7,16327
    1fa4:	31b22cc4 	addi	r6,r6,-14157
    1fa8:	39e28a04 	addi	r7,r7,-30168
    1fac:	1009883a 	mov	r4,r2
    1fb0:	180b883a 	mov	r5,r3
    1fb4:	0005e700 	call	5e70 <__adddf3>
    double   F;
  } conv;

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    1fb8:	01400434 	movhi	r5,16
    1fbc:	297fffc4 	addi	r5,r5,-1
    1fc0:	914a703a 	and	r5,r18,r5
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    1fc4:	000d883a 	mov	r6,zero
    1fc8:	01cffe34 	movhi	r7,16376
    1fcc:	8809883a 	mov	r4,r17
    1fd0:	294ffc34 	orhi	r5,r5,16368
    1fd4:	1027883a 	mov	r19,r2
    1fd8:	1821883a 	mov	r16,r3
    1fdc:	0007bb00 	call	7bb0 <__subdf3>
    1fe0:	0198dbf4 	movhi	r6,25455
    1fe4:	01cff4f4 	movhi	r7,16339
    1fe8:	3190d844 	addi	r6,r6,17249
    1fec:	39e1e9c4 	addi	r7,r7,-30809
    1ff0:	1009883a 	mov	r4,r2
    1ff4:	180b883a 	mov	r5,r3
    1ff8:	00073440 	call	7344 <__muldf3>
    1ffc:	100d883a 	mov	r6,r2
    2000:	180f883a 	mov	r7,r3
    2004:	9809883a 	mov	r4,r19
    2008:	800b883a 	mov	r5,r16
    200c:	0005e700 	call	5e70 <__adddf3>
    2010:	180b883a 	mov	r5,r3
    2014:	1009883a 	mov	r4,r2
    2018:	00084ac0 	call	84ac <__fixdfsi>
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    201c:	1009883a 	mov	r4,r2

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    2020:	1021883a 	mov	r16,r2
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    2024:	000852c0 	call	852c <__floatsidf>
    2028:	01825eb4 	movhi	r6,2426
    202c:	01d002f4 	movhi	r7,16395
    2030:	31a8dc44 	addi	r6,r6,-23695
    2034:	39e4d3c4 	addi	r7,r7,-27825
    2038:	1009883a 	mov	r4,r2
    203c:	180b883a 	mov	r5,r3
    2040:	102f883a 	mov	r23,r2
    2044:	1827883a 	mov	r19,r3
    2048:	00073440 	call	7344 <__muldf3>
    204c:	000d883a 	mov	r6,zero
    2050:	01cff834 	movhi	r7,16352
    2054:	1009883a 	mov	r4,r2
    2058:	180b883a 	mov	r5,r3
    205c:	0005e700 	call	5e70 <__adddf3>
    2060:	180b883a 	mov	r5,r3
    2064:	1009883a 	mov	r4,r2
    2068:	00084ac0 	call	84ac <__fixdfsi>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    206c:	01aeed74 	movhi	r6,48053
    2070:	01d000b4 	movhi	r7,16386
    2074:	980b883a 	mov	r5,r19
    2078:	31954584 	addi	r6,r6,21782
    207c:	39daec44 	addi	r7,r7,27569
    2080:	b809883a 	mov	r4,r23
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    2084:	d8800d15 	stw	r2,52(sp)
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    2088:	00073440 	call	7344 <__muldf3>
    208c:	d9000d17 	ldw	r4,52(sp)
    2090:	102f883a 	mov	r23,r2
    2094:	1827883a 	mov	r19,r3
    2098:	000852c0 	call	852c <__floatsidf>
    209c:	01bfbeb4 	movhi	r6,65274
    20a0:	01cff9b4 	movhi	r7,16358
    20a4:	318e7bc4 	addi	r6,r6,14831
    20a8:	39cb9084 	addi	r7,r7,11842
    20ac:	1009883a 	mov	r4,r2
    20b0:	180b883a 	mov	r5,r3
    20b4:	00073440 	call	7344 <__muldf3>
    20b8:	b809883a 	mov	r4,r23
    20bc:	980b883a 	mov	r5,r19
    20c0:	100d883a 	mov	r6,r2
    20c4:	180f883a 	mov	r7,r3
    20c8:	0007bb00 	call	7bb0 <__subdf3>
  const double z2 = z * z;
    20cc:	100d883a 	mov	r6,r2
    20d0:	180f883a 	mov	r7,r3
    20d4:	1009883a 	mov	r4,r2
    20d8:	180b883a 	mov	r5,r3
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    20dc:	1839883a 	mov	fp,r3
  const double z2 = z * z;
    20e0:	d8800e15 	stw	r2,56(sp)
    20e4:	00073440 	call	7344 <__muldf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    20e8:	da400e17 	ldw	r9,56(sp)
    20ec:	e00f883a 	mov	r7,fp
    20f0:	e00b883a 	mov	r5,fp
    20f4:	480d883a 	mov	r6,r9
    20f8:	4809883a 	mov	r4,r9
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
    20fc:	1027883a 	mov	r19,r2
    2100:	182f883a 	mov	r23,r3
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    2104:	0005e700 	call	5e70 <__adddf3>
    2108:	9809883a 	mov	r4,r19
    210c:	b80b883a 	mov	r5,r23
    2110:	000d883a 	mov	r6,zero
    2114:	01d00b34 	movhi	r7,16428
    2118:	d8c01015 	stw	r3,64(sp)
    211c:	d8800f15 	stw	r2,60(sp)
    2120:	000671c0 	call	671c <__divdf3>
    2124:	000d883a 	mov	r6,zero
    2128:	01d00934 	movhi	r7,16420
    212c:	1009883a 	mov	r4,r2
    2130:	180b883a 	mov	r5,r3
    2134:	0005e700 	call	5e70 <__adddf3>
    2138:	9809883a 	mov	r4,r19
    213c:	b80b883a 	mov	r5,r23
    2140:	100d883a 	mov	r6,r2
    2144:	180f883a 	mov	r7,r3
    2148:	000671c0 	call	671c <__divdf3>
    214c:	000d883a 	mov	r6,zero
    2150:	01d00634 	movhi	r7,16408
    2154:	1009883a 	mov	r4,r2
    2158:	180b883a 	mov	r5,r3
    215c:	0005e700 	call	5e70 <__adddf3>
    2160:	9809883a 	mov	r4,r19
    2164:	b80b883a 	mov	r5,r23
    2168:	100d883a 	mov	r6,r2
    216c:	180f883a 	mov	r7,r3
    2170:	000671c0 	call	671c <__divdf3>
    2174:	da400e17 	ldw	r9,56(sp)
    2178:	e00f883a 	mov	r7,fp
    217c:	0009883a 	mov	r4,zero
    2180:	480d883a 	mov	r6,r9
    2184:	01500034 	movhi	r5,16384
    2188:	102f883a 	mov	r23,r2
    218c:	1827883a 	mov	r19,r3
    2190:	0007bb00 	call	7bb0 <__subdf3>
    2194:	b809883a 	mov	r4,r23
    2198:	100d883a 	mov	r6,r2
    219c:	180f883a 	mov	r7,r3
    21a0:	980b883a 	mov	r5,r19
    21a4:	0005e700 	call	5e70 <__adddf3>
    21a8:	dac00f17 	ldw	r11,60(sp)
    21ac:	da801017 	ldw	r10,64(sp)
    21b0:	100d883a 	mov	r6,r2
    21b4:	5809883a 	mov	r4,r11
    21b8:	500b883a 	mov	r5,r10
    21bc:	180f883a 	mov	r7,r3
    21c0:	000671c0 	call	671c <__divdf3>
    21c4:	000d883a 	mov	r6,zero
    21c8:	01cffc34 	movhi	r7,16368
    21cc:	1009883a 	mov	r4,r2
    21d0:	180b883a 	mov	r5,r3
    21d4:	0005e700 	call	5e70 <__adddf3>
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
    21d8:	d9000d17 	ldw	r4,52(sp)
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    21dc:	000d883a 	mov	r6,zero
    21e0:	180b883a 	mov	r5,r3
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
    21e4:	21c0ffc4 	addi	r7,r4,1023
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    21e8:	380e953a 	slli	r7,r7,20
    21ec:	1009883a 	mov	r4,r2
    21f0:	00073440 	call	7344 <__muldf3>
  // correct for rounding errors
  if (value < conv.F) {
    21f4:	180f883a 	mov	r7,r3
    21f8:	100d883a 	mov	r6,r2
    21fc:	8809883a 	mov	r4,r17
    2200:	900b883a 	mov	r5,r18
    2204:	d8c00e15 	stw	r3,56(sp)
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    2208:	102f883a 	mov	r23,r2
  // correct for rounding errors
  if (value < conv.F) {
    220c:	00072500 	call	7250 <__ledf2>
    2210:	d8c00e17 	ldw	r3,56(sp)
    2214:	1000070e 	bge	r2,zero,2234 <_etoa+0x3f8>
    expval--;
    conv.F /= 10;
    2218:	b809883a 	mov	r4,r23
    221c:	000d883a 	mov	r6,zero
    2220:	01d00934 	movhi	r7,16420
    2224:	180b883a 	mov	r5,r3
    2228:	000671c0 	call	671c <__divdf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
  // correct for rounding errors
  if (value < conv.F) {
    expval--;
    222c:	843fffc4 	addi	r16,r16,-1
    conv.F /= 10;
    2230:	102f883a 	mov	r23,r2
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    2234:	808018c4 	addi	r2,r16,99
    2238:	04c03184 	movi	r19,198
    223c:	98a7403a 	cmpgeu	r19,r19,r2
    2240:	00800144 	movi	r2,5
    2244:	14e7c83a 	sub	r19,r2,r19

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
    2248:	b082000c 	andi	r2,r22,2048
    224c:	10001f26 	beq	r2,zero,22cc <_etoa+0x490>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
    2250:	01bac734 	movhi	r6,60188
    2254:	01cfc6b4 	movhi	r7,16154
    2258:	3190cb44 	addi	r6,r6,17197
    225c:	39cdb884 	addi	r7,r7,14050
    2260:	8809883a 	mov	r4,r17
    2264:	900b883a 	mov	r5,r18
    2268:	d8c00e15 	stw	r3,56(sp)
    226c:	00071740 	call	7174 <__gedf2>
    2270:	d8c00e17 	ldw	r3,56(sp)
    2274:	10001116 	blt	r2,zero,22bc <_etoa+0x480>
    2278:	01d04bf4 	movhi	r7,16687
    227c:	000d883a 	mov	r6,zero
    2280:	39e12004 	addi	r7,r7,-31616
    2284:	8809883a 	mov	r4,r17
    2288:	900b883a 	mov	r5,r18
    228c:	00072500 	call	7250 <__ledf2>
    2290:	d8c00e17 	ldw	r3,56(sp)
    2294:	1000090e 	bge	r2,zero,22bc <_etoa+0x480>
      if ((int)prec > expval) {
    2298:	8500030e 	bge	r16,r20,22a8 <_etoa+0x46c>
        prec = (unsigned)((int)prec - expval - 1);
    229c:	a429c83a 	sub	r20,r20,r16
    22a0:	a53fffc4 	addi	r20,r20,-1
    22a4:	00000106 	br	22ac <_etoa+0x470>
      }
      else {
        prec = 0;
    22a8:	0029883a 	mov	r20,zero
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
    22ac:	b5810014 	ori	r22,r22,1024
      // no characters in exponent
      minwidth = 0U;
    22b0:	0027883a 	mov	r19,zero
      expval   = 0;
    22b4:	0021883a 	mov	r16,zero
    22b8:	00000406 	br	22cc <_etoa+0x490>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
    22bc:	a0000326 	beq	r20,zero,22cc <_etoa+0x490>
    22c0:	d8800917 	ldw	r2,36(sp)
    22c4:	10000126 	beq	r2,zero,22cc <_etoa+0x490>
        --prec;
    22c8:	a53fffc4 	addi	r20,r20,-1
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
  if (width > minwidth) {
    22cc:	d9000a17 	ldw	r4,40(sp)
    22d0:	9900022e 	bgeu	r19,r4,22dc <_etoa+0x4a0>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
    22d4:	24f9c83a 	sub	fp,r4,r19
    22d8:	00000106 	br	22e0 <_etoa+0x4a4>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
    22dc:	0039883a 	mov	fp,zero
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
    22e0:	b080008c 	andi	r2,r22,2
    22e4:	d8800915 	stw	r2,36(sp)
    22e8:	10000226 	beq	r2,zero,22f4 <_etoa+0x4b8>
    22ec:	98000126 	beq	r19,zero,22f4 <_etoa+0x4b8>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
    22f0:	0039883a 	mov	fp,zero
  }

  // rescale the float value
  if (expval) {
    22f4:	80000726 	beq	r16,zero,2314 <_etoa+0x4d8>
    value /= conv.F;
    22f8:	900b883a 	mov	r5,r18
    22fc:	b80d883a 	mov	r6,r23
    2300:	180f883a 	mov	r7,r3
    2304:	8809883a 	mov	r4,r17
    2308:	000671c0 	call	671c <__divdf3>
    230c:	d8800c15 	stw	r2,48(sp)
    2310:	1825883a 	mov	r18,r3
  }

  // output the floating part
  const size_t start_idx = idx;
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
    2314:	000d883a 	mov	r6,zero
    2318:	000f883a 	mov	r7,zero
    231c:	8809883a 	mov	r4,r17
    2320:	a80b883a 	mov	r5,r21
    2324:	00072500 	call	7250 <__ledf2>
    2328:	1000010e 	bge	r2,zero,2330 <_etoa+0x4f4>
    232c:	94a0003c 	xorhi	r18,r18,32768
    2330:	d8c00c17 	ldw	r3,48(sp)
    2334:	00bdffc4 	movi	r2,-2049
    2338:	d9c00817 	ldw	r7,32(sp)
    233c:	d9800b17 	ldw	r6,44(sp)
    2340:	d9400717 	ldw	r5,28(sp)
    2344:	d9000617 	ldw	r4,24(sp)
    2348:	b084703a 	and	r2,r22,r2
    234c:	d8800415 	stw	r2,16(sp)
    2350:	df000315 	stw	fp,12(sp)
    2354:	dd000215 	stw	r20,8(sp)
    2358:	d8c00015 	stw	r3,0(sp)
    235c:	dc800115 	stw	r18,4(sp)
    2360:	00019080 	call	1908 <_ftoa>

  // output the exponent part
  if (minwidth) {
    2364:	98002b26 	beq	r19,zero,2414 <_etoa+0x5d8>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    2368:	b0c0080c 	andi	r3,r22,32
    236c:	1800021e 	bne	r3,zero,2378 <_etoa+0x53c>
    2370:	01001944 	movi	r4,101
    2374:	00000106 	br	237c <_etoa+0x540>
    2378:	01001144 	movi	r4,69
    237c:	100d883a 	mov	r6,r2
    2380:	14400044 	addi	r17,r2,1
    2384:	d9c00817 	ldw	r7,32(sp)
    2388:	d8800617 	ldw	r2,24(sp)
    238c:	d9400717 	ldw	r5,28(sp)
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    2390:	9cffffc4 	addi	r19,r19,-1
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);

  // output the exponent part
  if (minwidth) {
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    2394:	103ee83a 	callr	r2
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    2398:	00800144 	movi	r2,5
    239c:	d8800515 	stw	r2,20(sp)
    23a0:	00800284 	movi	r2,10
    23a4:	d8800215 	stw	r2,8(sp)
    23a8:	8004d7fa 	srli	r2,r16,31
    23ac:	dcc00415 	stw	r19,16(sp)
    23b0:	d8000315 	stw	zero,12(sp)
    23b4:	d8800115 	stw	r2,4(sp)
    23b8:	8000010e 	bge	r16,zero,23c0 <_etoa+0x584>
    23bc:	0421c83a 	sub	r16,zero,r16
    23c0:	d9c00817 	ldw	r7,32(sp)
    23c4:	d9400717 	ldw	r5,28(sp)
    23c8:	d9000617 	ldw	r4,24(sp)
    23cc:	dc000015 	stw	r16,0(sp)
    23d0:	880d883a 	mov	r6,r17
    23d4:	00015bc0 	call	15bc <_ntoa_long>
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
    23d8:	d8c00917 	ldw	r3,36(sp)
    23dc:	18000d26 	beq	r3,zero,2414 <_etoa+0x5d8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    23e0:	d9000b17 	ldw	r4,44(sp)
    23e4:	1107c83a 	sub	r3,r2,r4
    23e8:	d9000a17 	ldw	r4,40(sp)
    23ec:	1900092e 	bgeu	r3,r4,2414 <_etoa+0x5d8>
    23f0:	14000044 	addi	r16,r2,1
    23f4:	100d883a 	mov	r6,r2
    23f8:	d9c00817 	ldw	r7,32(sp)
    23fc:	d8800617 	ldw	r2,24(sp)
    2400:	d9400717 	ldw	r5,28(sp)
    2404:	01000804 	movi	r4,32
    2408:	103ee83a 	callr	r2
    240c:	8005883a 	mov	r2,r16
    2410:	003ff306 	br	23e0 <__ram_exceptions_end+0xfe0003c0>
    }
  }
  return idx;
}
    2414:	dfc01a17 	ldw	ra,104(sp)
    2418:	df001917 	ldw	fp,100(sp)
    241c:	ddc01817 	ldw	r23,96(sp)
    2420:	dd801717 	ldw	r22,92(sp)
    2424:	dd401617 	ldw	r21,88(sp)
    2428:	dd001517 	ldw	r20,84(sp)
    242c:	dcc01417 	ldw	r19,80(sp)
    2430:	dc801317 	ldw	r18,76(sp)
    2434:	dc401217 	ldw	r17,72(sp)
    2438:	dc001117 	ldw	r16,68(sp)
    243c:	dec01b04 	addi	sp,sp,108
    2440:	f800283a 	ret

00002444 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    2444:	deffeb04 	addi	sp,sp,-84
    2448:	df001315 	stw	fp,76(sp)
    244c:	dd000f15 	stw	r20,60(sp)
    2450:	dc800d15 	stw	r18,52(sp)
    2454:	dfc01415 	stw	ra,80(sp)
    2458:	ddc01215 	stw	r23,72(sp)
    245c:	dd801115 	stw	r22,68(sp)
    2460:	dd401015 	stw	r21,64(sp)
    2464:	dcc00e15 	stw	r19,56(sp)
    2468:	dc400c15 	stw	r17,48(sp)
    246c:	dc000b15 	stw	r16,44(sp)
    2470:	2829883a 	mov	r20,r5
    2474:	3025883a 	mov	r18,r6
    2478:	df001517 	ldw	fp,84(sp)
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    247c:	2800031e 	bne	r5,zero,248c <_vsnprintf+0x48>
    // use null output function
    out = _out_null;
    2480:	04c00034 	movhi	r19,0
    2484:	9cc4c204 	addi	r19,r19,4872
    2488:	00000106 	br	2490 <_vsnprintf+0x4c>
    248c:	2027883a 	mov	r19,r4
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    2490:	002d883a 	mov	r22,zero
  if (!buffer) {
    // use null output function
    out = _out_null;
  }

  while (*format)
    2494:	39000007 	ldb	r4,0(r7)
    2498:	20005126 	beq	r4,zero,25e0 <_vsnprintf+0x19c>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    249c:	00800944 	movi	r2,37
    24a0:	3c400044 	addi	r17,r7,1
    24a4:	20800726 	beq	r4,r2,24c4 <_vsnprintf+0x80>
      // no
      out(*format, buffer, idx++, maxlen);
    24a8:	900f883a 	mov	r7,r18
    24ac:	b00d883a 	mov	r6,r22
    24b0:	a00b883a 	mov	r5,r20
    24b4:	983ee83a 	callr	r19
    24b8:	b4000044 	addi	r16,r22,1
      format++;
    24bc:	880f883a 	mov	r7,r17
    24c0:	00004506 	br	25d8 <_vsnprintf+0x194>
    24c4:	880f883a 	mov	r7,r17
      // yes, evaluate it
      format++;
    }

    // evaluate flags
    flags = 0U;
    24c8:	0021883a 	mov	r16,zero
    do {
      switch (*format) {
    24cc:	01400804 	movi	r5,32
    24d0:	018008c4 	movi	r6,35
    24d4:	39000003 	ldbu	r4,0(r7)
    24d8:	00c00ac4 	movi	r3,43
    24dc:	382f883a 	mov	r23,r7
    24e0:	20803fcc 	andi	r2,r4,255
    24e4:	1080201c 	xori	r2,r2,128
    24e8:	10bfe004 	addi	r2,r2,-128
    24ec:	10c00d26 	beq	r2,r3,2524 <_vsnprintf+0xe0>
    24f0:	18800416 	blt	r3,r2,2504 <_vsnprintf+0xc0>
    24f4:	11400d26 	beq	r2,r5,252c <_vsnprintf+0xe8>
    24f8:	1180401e 	bne	r2,r6,25fc <_vsnprintf+0x1b8>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    24fc:	84000414 	ori	r16,r16,16
    2500:	00003c06 	br	25f4 <_vsnprintf+0x1b0>
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    2504:	00c00b44 	movi	r3,45
    2508:	10c00426 	beq	r2,r3,251c <_vsnprintf+0xd8>
    250c:	00c00c04 	movi	r3,48
    2510:	10c03a1e 	bne	r2,r3,25fc <_vsnprintf+0x1b8>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    2514:	84000054 	ori	r16,r16,1
    2518:	00003606 	br	25f4 <_vsnprintf+0x1b0>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    251c:	84000094 	ori	r16,r16,2
    2520:	00003406 	br	25f4 <_vsnprintf+0x1b0>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2524:	84000114 	ori	r16,r16,4
    2528:	00003206 	br	25f4 <_vsnprintf+0x1b0>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    252c:	84000214 	ori	r16,r16,8
    2530:	00003006 	br	25f4 <_vsnprintf+0x1b0>
      flags |= FLAGS_PRECISION;
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
    2534:	10803fcc 	andi	r2,r2,255
    2538:	1080201c 	xori	r2,r2,128
    253c:	10bfe004 	addi	r2,r2,-128
    2540:	01000a84 	movi	r4,42
    2544:	11005b1e 	bne	r2,r4,26b4 <_vsnprintf+0x270>
        const int prec = (int)va_arg(va, int);
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2548:	e0800017 	ldw	r2,0(fp)
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
        const int prec = (int)va_arg(va, int);
    254c:	e1000104 	addi	r4,fp,4
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2550:	1000010e 	bge	r2,zero,2558 <_vsnprintf+0x114>
    2554:	0005883a 	mov	r2,zero
        format++;
    2558:	bc400084 	addi	r17,r23,2
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
        const int prec = (int)va_arg(va, int);
    255c:	2039883a 	mov	fp,r4
        format++;
      }
    }

    // evaluate length field
    switch (*format) {
    2560:	89000007 	ldb	r4,0(r17)
    2564:	01401b04 	movi	r5,108
    2568:	21405a26 	beq	r4,r5,26d4 <_vsnprintf+0x290>
    256c:	2900530e 	bge	r5,r4,26bc <_vsnprintf+0x278>
    2570:	01401d04 	movi	r5,116
    2574:	21406226 	beq	r4,r5,2700 <_vsnprintf+0x2bc>
    2578:	01401e84 	movi	r5,122
    257c:	21406026 	beq	r4,r5,2700 <_vsnprintf+0x2bc>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    2580:	89c00003 	ldbu	r7,0(r17)
    2584:	01401944 	movi	r5,101
    2588:	39003fcc 	andi	r4,r7,255
    258c:	2100201c 	xori	r4,r4,128
    2590:	213fe004 	addi	r4,r4,-128
    2594:	21412a26 	beq	r4,r5,2a40 <_vsnprintf+0x5fc>
    2598:	29006516 	blt	r5,r4,2730 <_vsnprintf+0x2ec>
    259c:	014011c4 	movi	r5,71
    25a0:	21412726 	beq	r4,r5,2a40 <_vsnprintf+0x5fc>
    25a4:	29005916 	blt	r5,r4,270c <_vsnprintf+0x2c8>
    25a8:	01401144 	movi	r5,69
    25ac:	21412426 	beq	r4,r5,2a40 <_vsnprintf+0x5fc>
    25b0:	29011216 	blt	r5,r4,29fc <_vsnprintf+0x5b8>
    25b4:	00800944 	movi	r2,37
    25b8:	2081b51e 	bne	r4,r2,2c90 <_vsnprintf+0x84c>
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    25bc:	b4000044 	addi	r16,r22,1
    25c0:	900f883a 	mov	r7,r18
    25c4:	b00d883a 	mov	r6,r22
    25c8:	a00b883a 	mov	r5,r20
    25cc:	01000944 	movi	r4,37
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    25d0:	983ee83a 	callr	r19
        format++;
    25d4:	89c00044 	addi	r7,r17,1
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    25d8:	802d883a 	mov	r22,r16
        format++;
        break;
    25dc:	003fad06 	br	2494 <__ram_exceptions_end+0xfe000474>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    25e0:	b4800236 	bltu	r22,r18,25ec <_vsnprintf+0x1a8>
    25e4:	91bfffc4 	addi	r6,r18,-1
    25e8:	0001c406 	br	2cfc <_vsnprintf+0x8b8>
    25ec:	b00d883a 	mov	r6,r22
    25f0:	0001c206 	br	2cfc <_vsnprintf+0x8b8>
    25f4:	39c00044 	addi	r7,r7,1
    25f8:	003fb606 	br	24d4 <__ram_exceptions_end+0xfe0004b4>
      }
    } while (n);

    // evaluate width field
    width = 0U;
    if (_is_digit(*format)) {
    25fc:	213ff404 	addi	r4,r4,-48
    2600:	21003fcc 	andi	r4,r4,255
    2604:	01400244 	movi	r5,9
    2608:	2901a62e 	bgeu	r5,r4,2ca4 <_vsnprintf+0x860>
      width = _atoi(&format);
    }
    else if (*format == '*') {
    260c:	01000a84 	movi	r4,42
    2610:	11000a1e 	bne	r2,r4,263c <_vsnprintf+0x1f8>
      const int w = va_arg(va, int);
    2614:	e2400017 	ldw	r9,0(fp)
    2618:	e0800104 	addi	r2,fp,4
      if (w < 0) {
    261c:	4800030e 	bge	r9,zero,262c <_vsnprintf+0x1e8>
        flags |= FLAGS_LEFT;    // reverse padding
    2620:	84000094 	ori	r16,r16,2
        width = (unsigned int)-w;
    2624:	026bc83a 	sub	r21,zero,r9
    2628:	00000106 	br	2630 <_vsnprintf+0x1ec>
      }
      else {
        width = (unsigned int)w;
    262c:	482b883a 	mov	r21,r9
      }
      format++;
    2630:	3dc00044 	addi	r23,r7,1
    width = 0U;
    if (_is_digit(*format)) {
      width = _atoi(&format);
    }
    else if (*format == '*') {
      const int w = va_arg(va, int);
    2634:	1039883a 	mov	fp,r2
    2638:	00000106 	br	2640 <_vsnprintf+0x1fc>
        default :                                   n = 0U; break;
      }
    } while (n);

    // evaluate width field
    width = 0U;
    263c:	002b883a 	mov	r21,zero
      format++;
    }

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
    2640:	b9000007 	ldb	r4,0(r23)
    2644:	00800b84 	movi	r2,46
    2648:	2080191e 	bne	r4,r2,26b0 <_vsnprintf+0x26c>
      flags |= FLAGS_PRECISION;
      format++;
      if (_is_digit(*format)) {
    264c:	b8800043 	ldbu	r2,1(r23)
    2650:	01000244 	movi	r4,9
    }

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
      flags |= FLAGS_PRECISION;
    2654:	84010014 	ori	r16,r16,1024
      format++;
      if (_is_digit(*format)) {
    2658:	117ff404 	addi	r5,r2,-48
    265c:	29403fcc 	andi	r5,r5,255

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
      flags |= FLAGS_PRECISION;
      format++;
    2660:	bc400044 	addi	r17,r23,1
      if (_is_digit(*format)) {
    2664:	217fb336 	bltu	r4,r5,2534 <__ram_exceptions_end+0xfe000514>
    2668:	0005883a 	mov	r2,zero

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
  while (_is_digit(**str)) {
    266c:	202f883a 	mov	r23,r4
    2670:	88c00003 	ldbu	r3,0(r17)
    2674:	193ff404 	addi	r4,r3,-48
    2678:	21003fcc 	andi	r4,r4,255
    267c:	b93fb836 	bltu	r23,r4,2560 <__ram_exceptions_end+0xfe000540>
    2680:	01400284 	movi	r5,10
    2684:	1009883a 	mov	r4,r2
    2688:	d8c00915 	stw	r3,36(sp)
    268c:	00047ac0 	call	47ac <__mulsi3>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2690:	d8c00917 	ldw	r3,36(sp)
    2694:	10bff404 	addi	r2,r2,-48
    2698:	8c400044 	addi	r17,r17,1
    269c:	18c03fcc 	andi	r3,r3,255
    26a0:	18c0201c 	xori	r3,r3,128
    26a4:	18ffe004 	addi	r3,r3,-128
    26a8:	1885883a 	add	r2,r3,r2
    26ac:	003ff006 	br	2670 <__ram_exceptions_end+0xfe000650>
    26b0:	b823883a 	mov	r17,r23
      }
      format++;
    }

    // evaluate precision field
    precision = 0U;
    26b4:	0005883a 	mov	r2,zero
    26b8:	003fa906 	br	2560 <__ram_exceptions_end+0xfe000540>
        format++;
      }
    }

    // evaluate length field
    switch (*format) {
    26bc:	01401a04 	movi	r5,104
    26c0:	21400826 	beq	r4,r5,26e4 <_vsnprintf+0x2a0>
    26c4:	01401a84 	movi	r5,106
    26c8:	217fad1e 	bne	r4,r5,2580 <__ram_exceptions_end+0xfe000560>
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    26cc:	84008014 	ori	r16,r16,512
    26d0:	00000c06 	br	2704 <_vsnprintf+0x2c0>
    // evaluate length field
    switch (*format) {
      case 'l' :
        flags |= FLAGS_LONG;
        format++;
        if (*format == 'l') {
    26d4:	89400047 	ldb	r5,1(r17)
    26d8:	2900091e 	bne	r5,r4,2700 <_vsnprintf+0x2bc>
          flags |= FLAGS_LONG_LONG;
    26dc:	8400c014 	ori	r16,r16,768
    26e0:	00000506 	br	26f8 <_vsnprintf+0x2b4>
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
        format++;
        if (*format == 'h') {
    26e4:	89400047 	ldb	r5,1(r17)
    26e8:	29000226 	beq	r5,r4,26f4 <_vsnprintf+0x2b0>
          flags |= FLAGS_LONG_LONG;
          format++;
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
    26ec:	84002014 	ori	r16,r16,128
    26f0:	00000406 	br	2704 <_vsnprintf+0x2c0>
        format++;
        if (*format == 'h') {
          flags |= FLAGS_CHAR;
    26f4:	84003014 	ori	r16,r16,192
          format++;
    26f8:	8c400084 	addi	r17,r17,2
    26fc:	003fa006 	br	2580 <__ram_exceptions_end+0xfe000560>
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2700:	84004014 	ori	r16,r16,256
        format++;
    2704:	8c400044 	addi	r17,r17,1
        break;
    2708:	003f9d06 	br	2580 <__ram_exceptions_end+0xfe000560>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    270c:	01401884 	movi	r5,98
    2710:	21402926 	beq	r4,r5,27b8 <_vsnprintf+0x374>
    2714:	29000216 	blt	r5,r4,2720 <_vsnprintf+0x2dc>
    2718:	01401604 	movi	r5,88
    271c:	00002506 	br	27b4 <_vsnprintf+0x370>
    2720:	014018c4 	movi	r5,99
    2724:	2140e426 	beq	r4,r5,2ab8 <_vsnprintf+0x674>
    2728:	01401904 	movi	r5,100
    272c:	00002106 	br	27b4 <_vsnprintf+0x370>
    2730:	01401bc4 	movi	r5,111
    2734:	21402026 	beq	r4,r5,27b8 <_vsnprintf+0x374>
    2738:	29000516 	blt	r5,r4,2750 <_vsnprintf+0x30c>
    273c:	014019c4 	movi	r5,103
    2740:	2140bf26 	beq	r4,r5,2a40 <_vsnprintf+0x5fc>
    2744:	2140ad16 	blt	r4,r5,29fc <_vsnprintf+0x5b8>
    2748:	01401a44 	movi	r5,105
    274c:	00001906 	br	27b4 <_vsnprintf+0x370>
    2750:	01401cc4 	movi	r5,115
    2754:	21410226 	beq	r4,r5,2b60 <_vsnprintf+0x71c>
    2758:	29001316 	blt	r5,r4,27a8 <_vsnprintf+0x364>
    275c:	01401c04 	movi	r5,112
    2760:	21414b1e 	bne	r4,r5,2c90 <_vsnprintf+0x84c>
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2764:	d8800315 	stw	r2,12(sp)
    2768:	84000854 	ori	r16,r16,33
    276c:	01000204 	movi	r4,8
    2770:	00800404 	movi	r2,16
    2774:	d9000415 	stw	r4,16(sp)
    2778:	dc000515 	stw	r16,20(sp)
    277c:	d8800215 	stw	r2,8(sp)
    2780:	d8000115 	stw	zero,4(sp)
    2784:	e0800017 	ldw	r2,0(fp)
    2788:	900f883a 	mov	r7,r18
    278c:	b00d883a 	mov	r6,r22
    2790:	d8800015 	stw	r2,0(sp)
    2794:	a00b883a 	mov	r5,r20
    2798:	9809883a 	mov	r4,r19
    279c:	e5c00104 	addi	r23,fp,4
    27a0:	00015bc0 	call	15bc <_ntoa_long>
    27a4:	00013606 	br	2c80 <_vsnprintf+0x83c>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    27a8:	01401d44 	movi	r5,117
    27ac:	21400226 	beq	r4,r5,27b8 <_vsnprintf+0x374>
    27b0:	01401e04 	movi	r5,120
    27b4:	2141361e 	bne	r4,r5,2c90 <_vsnprintf+0x84c>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    27b8:	01401e04 	movi	r5,120
    27bc:	21400f26 	beq	r4,r5,27fc <_vsnprintf+0x3b8>
    27c0:	01401604 	movi	r5,88
    27c4:	21400c26 	beq	r4,r5,27f8 <_vsnprintf+0x3b4>
          base = 16U;
        }
        else if (*format == 'o') {
    27c8:	01401bc4 	movi	r5,111
    27cc:	21414726 	beq	r4,r5,2cec <_vsnprintf+0x8a8>
          base =  8U;
        }
        else if (*format == 'b') {
    27d0:	01401884 	movi	r5,98
    27d4:	21414726 	beq	r4,r5,2cf4 <_vsnprintf+0x8b0>
          base =  2U;
        }
        else {
          base = 10U;
          flags &= ~FLAGS_HASH;   // no hash for dec format
    27d8:	017ffbc4 	movi	r5,-17
    27dc:	8160703a 	and	r16,r16,r5
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    27e0:	01401a44 	movi	r5,105
        }
        else if (*format == 'b') {
          base =  2U;
        }
        else {
          base = 10U;
    27e4:	01800284 	movi	r6,10
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    27e8:	21400726 	beq	r4,r5,2808 <_vsnprintf+0x3c4>
    27ec:	01401904 	movi	r5,100
    27f0:	21400526 	beq	r4,r5,2808 <_vsnprintf+0x3c4>
    27f4:	00000206 	br	2800 <_vsnprintf+0x3bc>
          base = 10U;
          flags &= ~FLAGS_HASH;   // no hash for dec format
        }
        // uppercase
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
    27f8:	84000814 	ori	r16,r16,32
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
          base = 16U;
    27fc:	01800404 	movi	r6,16
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2800:	017ffcc4 	movi	r5,-13
    2804:	8160703a 	and	r16,r16,r5
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    2808:	8141000c 	andi	r5,r16,1024
    280c:	28000226 	beq	r5,zero,2818 <_vsnprintf+0x3d4>
          flags &= ~FLAGS_ZEROPAD;
    2810:	017fff84 	movi	r5,-2
    2814:	8160703a 	and	r16,r16,r5
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    2818:	01c01a44 	movi	r7,105
    281c:	8140800c 	andi	r5,r16,512
    2820:	21c00226 	beq	r4,r7,282c <_vsnprintf+0x3e8>
    2824:	01c01904 	movi	r7,100
    2828:	21c0391e 	bne	r4,r7,2910 <_vsnprintf+0x4cc>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    282c:	28001226 	beq	r5,zero,2878 <_vsnprintf+0x434>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    2830:	e1000117 	ldw	r4,4(fp)
    2834:	e1400017 	ldw	r5,0(fp)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2838:	d8800515 	stw	r2,20(sp)
    283c:	2004d7fa 	srli	r2,r4,31
    2840:	dc000715 	stw	r16,28(sp)
    2844:	dd400615 	stw	r21,24(sp)
    2848:	d8800215 	stw	r2,8(sp)
    284c:	d9800315 	stw	r6,12(sp)
    2850:	d8000415 	stw	zero,16(sp)
        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
          // signed
          if (flags & FLAGS_LONG_LONG) {
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    2854:	e5c00204 	addi	r23,fp,8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2858:	2005883a 	mov	r2,r4
    285c:	2000040e 	bge	r4,zero,2870 <_vsnprintf+0x42c>
    2860:	014bc83a 	sub	r5,zero,r5
    2864:	2808c03a 	cmpne	r4,r5,zero
    2868:	0085c83a 	sub	r2,zero,r2
    286c:	1105c83a 	sub	r2,r2,r4
    2870:	d9400015 	stw	r5,0(sp)
    2874:	00003106 	br	293c <_vsnprintf+0x4f8>
#endif
          }
          else if (flags & FLAGS_LONG) {
    2878:	8100400c 	andi	r4,r16,256
    287c:	e5c00104 	addi	r23,fp,4
    2880:	20000b26 	beq	r4,zero,28b0 <_vsnprintf+0x46c>
            const long value = va_arg(va, long);
    2884:	e1000017 	ldw	r4,0(fp)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2888:	d8800315 	stw	r2,12(sp)
    288c:	dc000515 	stw	r16,20(sp)
    2890:	2004d7fa 	srli	r2,r4,31
    2894:	dd400415 	stw	r21,16(sp)
    2898:	d9800215 	stw	r6,8(sp)
    289c:	d8800115 	stw	r2,4(sp)
    28a0:	2005883a 	mov	r2,r4
    28a4:	2000370e 	bge	r4,zero,2984 <_vsnprintf+0x540>
    28a8:	0105c83a 	sub	r2,zero,r4
    28ac:	00003506 	br	2984 <_vsnprintf+0x540>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    28b0:	8140100c 	andi	r5,r16,64
    28b4:	e1000017 	ldw	r4,0(fp)
    28b8:	28000426 	beq	r5,zero,28cc <_vsnprintf+0x488>
    28bc:	21003fcc 	andi	r4,r4,255
    28c0:	2100201c 	xori	r4,r4,128
    28c4:	213fe004 	addi	r4,r4,-128
    28c8:	00000506 	br	28e0 <_vsnprintf+0x49c>
    28cc:	8140200c 	andi	r5,r16,128
    28d0:	28000326 	beq	r5,zero,28e0 <_vsnprintf+0x49c>
    28d4:	213fffcc 	andi	r4,r4,65535
    28d8:	2120001c 	xori	r4,r4,32768
    28dc:	21200004 	addi	r4,r4,-32768
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    28e0:	d8800315 	stw	r2,12(sp)
    28e4:	2004d7fa 	srli	r2,r4,31
    28e8:	dc000515 	stw	r16,20(sp)
    28ec:	dd400415 	stw	r21,16(sp)
    28f0:	d8800115 	stw	r2,4(sp)
    28f4:	d9800215 	stw	r6,8(sp)
          else if (flags & FLAGS_LONG) {
            const long value = va_arg(va, long);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    28f8:	b839883a 	mov	fp,r23
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    28fc:	2005883a 	mov	r2,r4
    2900:	2000010e 	bge	r4,zero,2908 <_vsnprintf+0x4c4>
    2904:	0105c83a 	sub	r2,zero,r4
    2908:	d8800015 	stw	r2,0(sp)
    290c:	00003306 	br	29dc <_vsnprintf+0x598>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    2910:	28001326 	beq	r5,zero,2960 <_vsnprintf+0x51c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    2914:	dc000715 	stw	r16,28(sp)
    2918:	dd400615 	stw	r21,24(sp)
    291c:	d8800515 	stw	r2,20(sp)
    2920:	d9800315 	stw	r6,12(sp)
    2924:	d8000415 	stw	zero,16(sp)
    2928:	d8000215 	stw	zero,8(sp)
    292c:	e0800017 	ldw	r2,0(fp)
    2930:	e5c00204 	addi	r23,fp,8
    2934:	d8800015 	stw	r2,0(sp)
    2938:	e0800117 	ldw	r2,4(fp)
    293c:	d8800115 	stw	r2,4(sp)
    2940:	900f883a 	mov	r7,r18
    2944:	b00d883a 	mov	r6,r22
    2948:	a00b883a 	mov	r5,r20
    294c:	9809883a 	mov	r4,r19
    2950:	00017300 	call	1730 <_ntoa_long_long>
    2954:	102d883a 	mov	r22,r2
    2958:	b839883a 	mov	fp,r23
    295c:	00002506 	br	29f4 <_vsnprintf+0x5b0>
#endif
          }
          else if (flags & FLAGS_LONG) {
    2960:	8100400c 	andi	r4,r16,256
    2964:	e5c00104 	addi	r23,fp,4
    2968:	20000d26 	beq	r4,zero,29a0 <_vsnprintf+0x55c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    296c:	dc000515 	stw	r16,20(sp)
    2970:	dd400415 	stw	r21,16(sp)
    2974:	d8800315 	stw	r2,12(sp)
    2978:	d9800215 	stw	r6,8(sp)
    297c:	d8000115 	stw	zero,4(sp)
    2980:	e0800017 	ldw	r2,0(fp)
    2984:	d8800015 	stw	r2,0(sp)
    2988:	900f883a 	mov	r7,r18
    298c:	b00d883a 	mov	r6,r22
    2990:	a00b883a 	mov	r5,r20
    2994:	9809883a 	mov	r4,r19
    2998:	00015bc0 	call	15bc <_ntoa_long>
    299c:	003fed06 	br	2954 <__ram_exceptions_end+0xfe000934>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    29a0:	8140100c 	andi	r5,r16,64
    29a4:	e1000017 	ldw	r4,0(fp)
    29a8:	28000226 	beq	r5,zero,29b4 <_vsnprintf+0x570>
    29ac:	21003fcc 	andi	r4,r4,255
    29b0:	00000306 	br	29c0 <_vsnprintf+0x57c>
    29b4:	8140200c 	andi	r5,r16,128
    29b8:	28000126 	beq	r5,zero,29c0 <_vsnprintf+0x57c>
    29bc:	213fffcc 	andi	r4,r4,65535
    29c0:	b839883a 	mov	fp,r23
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    29c4:	dc000515 	stw	r16,20(sp)
    29c8:	dd400415 	stw	r21,16(sp)
    29cc:	d8800315 	stw	r2,12(sp)
    29d0:	d9800215 	stw	r6,8(sp)
    29d4:	d8000115 	stw	zero,4(sp)
    29d8:	d9000015 	stw	r4,0(sp)
    29dc:	b00d883a 	mov	r6,r22
    29e0:	900f883a 	mov	r7,r18
    29e4:	a00b883a 	mov	r5,r20
    29e8:	9809883a 	mov	r4,r19
    29ec:	00015bc0 	call	15bc <_ntoa_long>
    29f0:	102d883a 	mov	r22,r2
          }
        }
        format++;
    29f4:	89c00044 	addi	r7,r17,1
        break;
    29f8:	003ea606 	br	2494 <__ram_exceptions_end+0xfe000474>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    29fc:	01401184 	movi	r5,70
    2a00:	2140011e 	bne	r4,r5,2a08 <_vsnprintf+0x5c4>
    2a04:	84000814 	ori	r16,r16,32
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    2a08:	dc000415 	stw	r16,16(sp)
    2a0c:	dd400315 	stw	r21,12(sp)
    2a10:	d8800215 	stw	r2,8(sp)
    2a14:	e0800017 	ldw	r2,0(fp)
    2a18:	900f883a 	mov	r7,r18
    2a1c:	b00d883a 	mov	r6,r22
    2a20:	d8800015 	stw	r2,0(sp)
    2a24:	e0800117 	ldw	r2,4(fp)
    2a28:	a00b883a 	mov	r5,r20
    2a2c:	9809883a 	mov	r4,r19
    2a30:	d8800115 	stw	r2,4(sp)
    2a34:	e5c00204 	addi	r23,fp,8
    2a38:	00019080 	call	1908 <_ftoa>
    2a3c:	00009006 	br	2c80 <_vsnprintf+0x83c>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    2a40:	017ff7c4 	movi	r5,-33
    2a44:	394a703a 	and	r5,r7,r5
    2a48:	29403fcc 	andi	r5,r5,255
    2a4c:	2940201c 	xori	r5,r5,128
    2a50:	297fe004 	addi	r5,r5,-128
    2a54:	028011c4 	movi	r10,71
    2a58:	01801144 	movi	r6,69
    2a5c:	2a80061e 	bne	r5,r10,2a78 <_vsnprintf+0x634>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    2a60:	013fff44 	movi	r4,-3
    2a64:	3908703a 	and	r4,r7,r4
    2a68:	21003fcc 	andi	r4,r4,255
    2a6c:	2100201c 	xori	r4,r4,128
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    2a70:	84020014 	ori	r16,r16,2048
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    2a74:	213fe004 	addi	r4,r4,-128
    2a78:	2180011e 	bne	r4,r6,2a80 <_vsnprintf+0x63c>
    2a7c:	84000814 	ori	r16,r16,32
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    2a80:	dc000415 	stw	r16,16(sp)
    2a84:	dd400315 	stw	r21,12(sp)
    2a88:	d8800215 	stw	r2,8(sp)
    2a8c:	e0800017 	ldw	r2,0(fp)
    2a90:	900f883a 	mov	r7,r18
    2a94:	b00d883a 	mov	r6,r22
    2a98:	d8800015 	stw	r2,0(sp)
    2a9c:	e0800117 	ldw	r2,4(fp)
    2aa0:	a00b883a 	mov	r5,r20
    2aa4:	9809883a 	mov	r4,r19
    2aa8:	d8800115 	stw	r2,4(sp)
    2aac:	e5c00204 	addi	r23,fp,8
    2ab0:	0001e3c0 	call	1e3c <_etoa>
    2ab4:	00007206 	br	2c80 <_vsnprintf+0x83c>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    2ab8:	8400008c 	andi	r16,r16,2
    2abc:	80000c1e 	bne	r16,zero,2af0 <_vsnprintf+0x6ac>
    2ac0:	002f883a 	mov	r23,zero
    2ac4:	b5cd883a 	add	r6,r22,r23
    2ac8:	b8c00084 	addi	r3,r23,2
    2acc:	bdc00044 	addi	r23,r23,1
          while (l++ < width) {
    2ad0:	bd40052e 	bgeu	r23,r21,2ae8 <_vsnprintf+0x6a4>
            out(' ', buffer, idx++, maxlen);
    2ad4:	900f883a 	mov	r7,r18
    2ad8:	a00b883a 	mov	r5,r20
    2adc:	01000804 	movi	r4,32
    2ae0:	983ee83a 	callr	r19
    2ae4:	003ff706 	br	2ac4 <__ram_exceptions_end+0xfe000aa4>
    2ae8:	302d883a 	mov	r22,r6
    2aec:	00000106 	br	2af4 <_vsnprintf+0x6b0>
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    2af0:	00c00044 	movi	r3,1
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2af4:	e1000007 	ldb	r4,0(fp)
    2af8:	b0800044 	addi	r2,r22,1
    2afc:	d8800a15 	stw	r2,40(sp)
    2b00:	d8c00915 	stw	r3,36(sp)
    2b04:	900f883a 	mov	r7,r18
    2b08:	b00d883a 	mov	r6,r22
    2b0c:	a00b883a 	mov	r5,r20
    2b10:	983ee83a 	callr	r19
    2b14:	e5c00104 	addi	r23,fp,4
        // post padding
        if (flags & FLAGS_LEFT) {
    2b18:	d8800a17 	ldw	r2,40(sp)
    2b1c:	d8c00917 	ldw	r3,36(sp)
    2b20:	80000c26 	beq	r16,zero,2b54 <_vsnprintf+0x710>
    2b24:	1f3fffc4 	addi	fp,r3,-1
    2b28:	e5b9c83a 	sub	fp,fp,r22
          while (l++ < width) {
    2b2c:	1707883a 	add	r3,r2,fp
    2b30:	1d40082e 	bgeu	r3,r21,2b54 <_vsnprintf+0x710>
            out(' ', buffer, idx++, maxlen);
    2b34:	100d883a 	mov	r6,r2
    2b38:	900f883a 	mov	r7,r18
    2b3c:	a00b883a 	mov	r5,r20
    2b40:	01000804 	movi	r4,32
    2b44:	14000044 	addi	r16,r2,1
    2b48:	983ee83a 	callr	r19
    2b4c:	8005883a 	mov	r2,r16
    2b50:	003ff606 	br	2b2c <__ram_exceptions_end+0xfe000b0c>
          }
        }
        format++;
    2b54:	89c00044 	addi	r7,r17,1
        break;
    2b58:	102d883a 	mov	r22,r2
    2b5c:	00004a06 	br	2c88 <_vsnprintf+0x844>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    2b60:	e0c00104 	addi	r3,fp,4
    2b64:	d8c00815 	stw	r3,32(sp)
    2b68:	e2800017 	ldw	r10,0(fp)
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    2b6c:	1000021e 	bne	r2,zero,2b78 <_vsnprintf+0x734>
    2b70:	013fffc4 	movi	r4,-1
    2b74:	00000106 	br	2b7c <_vsnprintf+0x738>
    2b78:	1009883a 	mov	r4,r2
    2b7c:	5109883a 	add	r4,r10,r4
    2b80:	5011883a 	mov	r8,r10
// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
  const char* s;
  for (s = str; *s && maxsize--; ++s);
    2b84:	41400007 	ldb	r5,0(r8)
    2b88:	28000326 	beq	r5,zero,2b98 <_vsnprintf+0x754>
    2b8c:	41000226 	beq	r8,r4,2b98 <_vsnprintf+0x754>
    2b90:	42000044 	addi	r8,r8,1
    2b94:	003ffb06 	br	2b84 <__ram_exceptions_end+0xfe000b64>

      case 's' : {
        const char* p = va_arg(va, char*);
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
        // pre padding
        if (flags & FLAGS_PRECISION) {
    2b98:	85c1000c 	andi	r23,r16,1024
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
  const char* s;
  for (s = str; *s && maxsize--; ++s);
  return (unsigned int)(s - str);
    2b9c:	42b9c83a 	sub	fp,r8,r10

      case 's' : {
        const char* p = va_arg(va, char*);
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
        // pre padding
        if (flags & FLAGS_PRECISION) {
    2ba0:	b8000226 	beq	r23,zero,2bac <_vsnprintf+0x768>
          l = (l < precision ? l : precision);
    2ba4:	1700012e 	bgeu	r2,fp,2bac <_vsnprintf+0x768>
    2ba8:	1039883a 	mov	fp,r2
        }
        if (!(flags & FLAGS_LEFT)) {
    2bac:	8400008c 	andi	r16,r16,2
    2bb0:	8000111e 	bne	r16,zero,2bf8 <_vsnprintf+0x7b4>
    2bb4:	e009883a 	mov	r4,fp
    2bb8:	b739c83a 	sub	fp,r22,fp
    2bbc:	270d883a 	add	r6,r4,fp
          while (l++ < width) {
    2bc0:	25800044 	addi	r22,r4,1
    2bc4:	25400a2e 	bgeu	r4,r21,2bf0 <_vsnprintf+0x7ac>
            out(' ', buffer, idx++, maxlen);
    2bc8:	01000804 	movi	r4,32
    2bcc:	d8800a15 	stw	r2,40(sp)
    2bd0:	da800915 	stw	r10,36(sp)
    2bd4:	900f883a 	mov	r7,r18
    2bd8:	a00b883a 	mov	r5,r20
    2bdc:	983ee83a 	callr	r19
        // pre padding
        if (flags & FLAGS_PRECISION) {
          l = (l < precision ? l : precision);
        }
        if (!(flags & FLAGS_LEFT)) {
          while (l++ < width) {
    2be0:	b009883a 	mov	r4,r22
    2be4:	da800917 	ldw	r10,36(sp)
    2be8:	d8800a17 	ldw	r2,40(sp)
    2bec:	003ff306 	br	2bbc <__ram_exceptions_end+0xfe000b9c>
    2bf0:	b039883a 	mov	fp,r22
    2bf4:	302d883a 	mov	r22,r6
    2bf8:	b2adc83a 	sub	r22,r22,r10
            out(' ', buffer, idx++, maxlen);
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2bfc:	51000007 	ldb	r4,0(r10)
    2c00:	558d883a 	add	r6,r10,r22
    2c04:	20000e26 	beq	r4,zero,2c40 <_vsnprintf+0x7fc>
    2c08:	b800091e 	bne	r23,zero,2c30 <_vsnprintf+0x7ec>
          out(*(p++), buffer, idx++, maxlen);
    2c0c:	52800044 	addi	r10,r10,1
    2c10:	d8800a15 	stw	r2,40(sp)
    2c14:	da800915 	stw	r10,36(sp)
    2c18:	900f883a 	mov	r7,r18
    2c1c:	a00b883a 	mov	r5,r20
    2c20:	983ee83a 	callr	r19
    2c24:	da800917 	ldw	r10,36(sp)
    2c28:	d8800a17 	ldw	r2,40(sp)
    2c2c:	003ff306 	br	2bfc <__ram_exceptions_end+0xfe000bdc>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2c30:	117fffc4 	addi	r5,r2,-1
    2c34:	10000226 	beq	r2,zero,2c40 <_vsnprintf+0x7fc>
    2c38:	2805883a 	mov	r2,r5
    2c3c:	003ff306 	br	2c0c <__ram_exceptions_end+0xfe000bec>
    2c40:	302d883a 	mov	r22,r6
          out(*(p++), buffer, idx++, maxlen);
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    2c44:	80000b26 	beq	r16,zero,2c74 <_vsnprintf+0x830>
    2c48:	e1a1c83a 	sub	r16,fp,r6
          while (l++ < width) {
    2c4c:	b405883a 	add	r2,r22,r16
    2c50:	1540082e 	bgeu	r2,r21,2c74 <_vsnprintf+0x830>
            out(' ', buffer, idx++, maxlen);
    2c54:	b00d883a 	mov	r6,r22
    2c58:	b5c00044 	addi	r23,r22,1
    2c5c:	900f883a 	mov	r7,r18
    2c60:	a00b883a 	mov	r5,r20
    2c64:	01000804 	movi	r4,32
    2c68:	983ee83a 	callr	r19
    2c6c:	b82d883a 	mov	r22,r23
    2c70:	003ff606 	br	2c4c <__ram_exceptions_end+0xfe000c2c>
          }
        }
        format++;
    2c74:	89c00044 	addi	r7,r17,1
        format++;
        break;
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    2c78:	df000817 	ldw	fp,32(sp)
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
        break;
    2c7c:	003e0506 	br	2494 <__ram_exceptions_end+0xfe000474>
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2c80:	102d883a 	mov	r22,r2
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    2c84:	89c00044 	addi	r7,r17,1
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2c88:	b839883a 	mov	fp,r23
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
        break;
    2c8c:	003e0106 	br	2494 <__ram_exceptions_end+0xfe000474>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    2c90:	b4000044 	addi	r16,r22,1
    2c94:	900f883a 	mov	r7,r18
    2c98:	b00d883a 	mov	r6,r22
    2c9c:	a00b883a 	mov	r5,r20
    2ca0:	003e4b06 	br	25d0 <__ram_exceptions_end+0xfe0005b0>
    2ca4:	002b883a 	mov	r21,zero

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
  while (_is_digit(**str)) {
    2ca8:	2823883a 	mov	r17,r5
    2cac:	b8c00003 	ldbu	r3,0(r23)
    2cb0:	18bff404 	addi	r2,r3,-48
    2cb4:	10803fcc 	andi	r2,r2,255
    2cb8:	88be6136 	bltu	r17,r2,2640 <__ram_exceptions_end+0xfe000620>
    2cbc:	a809883a 	mov	r4,r21
    2cc0:	01400284 	movi	r5,10
    2cc4:	d8c00915 	stw	r3,36(sp)
    2cc8:	00047ac0 	call	47ac <__mulsi3>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2ccc:	d8c00917 	ldw	r3,36(sp)
    2cd0:	10bff404 	addi	r2,r2,-48
    2cd4:	bdc00044 	addi	r23,r23,1
    2cd8:	18c03fcc 	andi	r3,r3,255
    2cdc:	18c0201c 	xori	r3,r3,128
    2ce0:	18ffe004 	addi	r3,r3,-128
    2ce4:	18ab883a 	add	r21,r3,r2
    2ce8:	003ff006 	br	2cac <__ram_exceptions_end+0xfe000c8c>
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
          base = 16U;
        }
        else if (*format == 'o') {
          base =  8U;
    2cec:	01800204 	movi	r6,8
    2cf0:	003ebe06 	br	27ec <__ram_exceptions_end+0xfe0007cc>
        }
        else if (*format == 'b') {
          base =  2U;
    2cf4:	01800084 	movi	r6,2
    2cf8:	003ebc06 	br	27ec <__ram_exceptions_end+0xfe0007cc>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2cfc:	900f883a 	mov	r7,r18
    2d00:	a00b883a 	mov	r5,r20
    2d04:	0009883a 	mov	r4,zero
    2d08:	983ee83a 	callr	r19

  // return written chars without terminating \0
  return (int)idx;
}
    2d0c:	b005883a 	mov	r2,r22
    2d10:	dfc01417 	ldw	ra,80(sp)
    2d14:	df001317 	ldw	fp,76(sp)
    2d18:	ddc01217 	ldw	r23,72(sp)
    2d1c:	dd801117 	ldw	r22,68(sp)
    2d20:	dd401017 	ldw	r21,64(sp)
    2d24:	dd000f17 	ldw	r20,60(sp)
    2d28:	dcc00e17 	ldw	r19,56(sp)
    2d2c:	dc800d17 	ldw	r18,52(sp)
    2d30:	dc400c17 	ldw	r17,48(sp)
    2d34:	dc000b17 	ldw	r16,44(sp)
    2d38:	dec01504 	addi	sp,sp,84
    2d3c:	f800283a 	ret

00002d40 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    2d40:	defffa04 	addi	sp,sp,-24
    2d44:	dfc00215 	stw	ra,8(sp)
    2d48:	d9400315 	stw	r5,12(sp)
    2d4c:	d9800415 	stw	r6,16(sp)
    2d50:	d9c00515 	stw	r7,20(sp)
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    2d54:	d8800304 	addi	r2,sp,12
    2d58:	200f883a 	mov	r7,r4
    2d5c:	01000034 	movhi	r4,0
    2d60:	d8800015 	stw	r2,0(sp)
    2d64:	01bfffc4 	movi	r6,-1
    2d68:	d9400104 	addi	r5,sp,4
    2d6c:	21063404 	addi	r4,r4,6352
    2d70:	00024440 	call	2444 <_vsnprintf>
  va_end(va);
  return ret;
}
    2d74:	dfc00217 	ldw	ra,8(sp)
    2d78:	dec00604 	addi	sp,sp,24
    2d7c:	f800283a 	ret

00002d80 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
    2d80:	defffc04 	addi	sp,sp,-16
    2d84:	dfc00115 	stw	ra,4(sp)
    2d88:	d9800215 	stw	r6,8(sp)
    2d8c:	d9c00315 	stw	r7,12(sp)
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    2d90:	d8800204 	addi	r2,sp,8
    2d94:	280f883a 	mov	r7,r5
    2d98:	200b883a 	mov	r5,r4
    2d9c:	01000034 	movhi	r4,0
    2da0:	d8800015 	stw	r2,0(sp)
    2da4:	01bfffc4 	movi	r6,-1
    2da8:	2104be04 	addi	r4,r4,4856
    2dac:	00024440 	call	2444 <_vsnprintf>
  va_end(va);
  return ret;
}
    2db0:	dfc00117 	ldw	ra,4(sp)
    2db4:	dec00404 	addi	sp,sp,16
    2db8:	f800283a 	ret

00002dbc <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
    2dbc:	defffd04 	addi	sp,sp,-12
    2dc0:	dfc00115 	stw	ra,4(sp)
    2dc4:	d9c00215 	stw	r7,8(sp)
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    2dc8:	d8800204 	addi	r2,sp,8
    2dcc:	300f883a 	mov	r7,r6
    2dd0:	280d883a 	mov	r6,r5
    2dd4:	200b883a 	mov	r5,r4
    2dd8:	01000034 	movhi	r4,0
    2ddc:	d8800015 	stw	r2,0(sp)
    2de0:	2104be04 	addi	r4,r4,4856
    2de4:	00024440 	call	2444 <_vsnprintf>
  va_end(va);
  return ret;
}
    2de8:	dfc00117 	ldw	ra,4(sp)
    2dec:	dec00304 	addi	sp,sp,12
    2df0:	f800283a 	ret

00002df4 <vprintf_>:


int vprintf_(const char* format, va_list va)
{
    2df4:	defffd04 	addi	sp,sp,-12
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    2df8:	200f883a 	mov	r7,r4
    2dfc:	01000034 	movhi	r4,0
    2e00:	d9400015 	stw	r5,0(sp)
    2e04:	01bfffc4 	movi	r6,-1
    2e08:	d9400104 	addi	r5,sp,4
    2e0c:	21063404 	addi	r4,r4,6352
  return ret;
}


int vprintf_(const char* format, va_list va)
{
    2e10:	dfc00215 	stw	ra,8(sp)
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    2e14:	00024440 	call	2444 <_vsnprintf>
}
    2e18:	dfc00217 	ldw	ra,8(sp)
    2e1c:	dec00304 	addi	sp,sp,12
    2e20:	f800283a 	ret

00002e24 <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
    2e24:	defffe04 	addi	sp,sp,-8
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    2e28:	d9c00015 	stw	r7,0(sp)
    2e2c:	300f883a 	mov	r7,r6
    2e30:	280d883a 	mov	r6,r5
    2e34:	200b883a 	mov	r5,r4
    2e38:	01000034 	movhi	r4,0
    2e3c:	2104be04 	addi	r4,r4,4856
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
    2e40:	dfc00115 	stw	ra,4(sp)
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    2e44:	00024440 	call	2444 <_vsnprintf>
}
    2e48:	dfc00117 	ldw	ra,4(sp)
    2e4c:	dec00204 	addi	sp,sp,8
    2e50:	f800283a 	ret

00002e54 <fctprintf>:


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
    2e54:	defffb04 	addi	sp,sp,-20
    2e58:	dfc00315 	stw	ra,12(sp)
    2e5c:	d9c00415 	stw	r7,16(sp)
  va_list va;
  va_start(va, format);
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    2e60:	d9000115 	stw	r4,4(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    2e64:	d8800404 	addi	r2,sp,16
    2e68:	01000034 	movhi	r4,0

int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
  va_list va;
  va_start(va, format);
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    2e6c:	d9400215 	stw	r5,8(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    2e70:	300f883a 	mov	r7,r6
    2e74:	d8800015 	stw	r2,0(sp)
    2e78:	01bfffc4 	movi	r6,-1
    2e7c:	d9400104 	addi	r5,sp,4
    2e80:	21063a04 	addi	r4,r4,6376
    2e84:	00024440 	call	2444 <_vsnprintf>
  va_end(va);
  return ret;
}
    2e88:	dfc00317 	ldw	ra,12(sp)
    2e8c:	dec00504 	addi	sp,sp,20
    2e90:	f800283a 	ret

00002e94 <expf>:
    2e94:	defff304 	addi	sp,sp,-52
    2e98:	dc800b15 	stw	r18,44(sp)
    2e9c:	04800074 	movhi	r18,1
    2ea0:	dc400a15 	stw	r17,40(sp)
    2ea4:	dc000915 	stw	r16,36(sp)
    2ea8:	dfc00c15 	stw	ra,48(sp)
    2eac:	94ab8d04 	addi	r18,r18,-20940
    2eb0:	2023883a 	mov	r17,r4
    2eb4:	00031780 	call	3178 <__ieee754_expf>
    2eb8:	90c00017 	ldw	r3,0(r18)
    2ebc:	1021883a 	mov	r16,r2
    2ec0:	00bfffc4 	movi	r2,-1
    2ec4:	18802a26 	beq	r3,r2,2f70 <expf+0xdc>
    2ec8:	8809883a 	mov	r4,r17
    2ecc:	00039540 	call	3954 <finitef>
    2ed0:	10002726 	beq	r2,zero,2f70 <expf+0xdc>
    2ed4:	0150ac74 	movhi	r5,17073
    2ed8:	295c6004 	addi	r5,r5,29056
    2edc:	8809883a 	mov	r4,r17
    2ee0:	00051540 	call	5154 <__gesf2>
    2ee4:	00802916 	blt	zero,r2,2f8c <expf+0xf8>
    2ee8:	0170b434 	movhi	r5,49872
    2eec:	297c6d44 	addi	r5,r5,-3659
    2ef0:	8809883a 	mov	r4,r17
    2ef4:	00052100 	call	5210 <__lesf2>
    2ef8:	10001d0e 	bge	r2,zero,2f70 <expf+0xdc>
    2efc:	00800104 	movi	r2,4
    2f00:	d8800015 	stw	r2,0(sp)
    2f04:	00800074 	movhi	r2,1
    2f08:	8809883a 	mov	r4,r17
    2f0c:	10a30b04 	addi	r2,r2,-29652
    2f10:	d8800115 	stw	r2,4(sp)
    2f14:	d8000815 	stw	zero,32(sp)
    2f18:	00086b00 	call	86b0 <__extendsfdf2>
    2f1c:	91000017 	ldw	r4,0(r18)
    2f20:	d8800415 	stw	r2,16(sp)
    2f24:	d8800215 	stw	r2,8(sp)
    2f28:	d8c00515 	stw	r3,20(sp)
    2f2c:	d8c00315 	stw	r3,12(sp)
    2f30:	d8000615 	stw	zero,24(sp)
    2f34:	d8000715 	stw	zero,28(sp)
    2f38:	00800084 	movi	r2,2
    2f3c:	20802c26 	beq	r4,r2,2ff0 <expf+0x15c>
    2f40:	d809883a 	mov	r4,sp
    2f44:	00039400 	call	3940 <matherr>
    2f48:	10002926 	beq	r2,zero,2ff0 <expf+0x15c>
    2f4c:	d8800817 	ldw	r2,32(sp)
    2f50:	10000326 	beq	r2,zero,2f60 <expf+0xcc>
    2f54:	00089cc0 	call	89cc <__errno>
    2f58:	d8c00817 	ldw	r3,32(sp)
    2f5c:	10c00015 	stw	r3,0(r2)
    2f60:	d9000617 	ldw	r4,24(sp)
    2f64:	d9400717 	ldw	r5,28(sp)
    2f68:	00087c00 	call	87c0 <__truncdfsf2>
    2f6c:	00000106 	br	2f74 <expf+0xe0>
    2f70:	8005883a 	mov	r2,r16
    2f74:	dfc00c17 	ldw	ra,48(sp)
    2f78:	dc800b17 	ldw	r18,44(sp)
    2f7c:	dc400a17 	ldw	r17,40(sp)
    2f80:	dc000917 	ldw	r16,36(sp)
    2f84:	dec00d04 	addi	sp,sp,52
    2f88:	f800283a 	ret
    2f8c:	008000c4 	movi	r2,3
    2f90:	d8800015 	stw	r2,0(sp)
    2f94:	00800074 	movhi	r2,1
    2f98:	8809883a 	mov	r4,r17
    2f9c:	10a30b04 	addi	r2,r2,-29652
    2fa0:	d8800115 	stw	r2,4(sp)
    2fa4:	d8000815 	stw	zero,32(sp)
    2fa8:	00086b00 	call	86b0 <__extendsfdf2>
    2fac:	91000017 	ldw	r4,0(r18)
    2fb0:	d8800415 	stw	r2,16(sp)
    2fb4:	d8c00515 	stw	r3,20(sp)
    2fb8:	d8800215 	stw	r2,8(sp)
    2fbc:	d8c00315 	stw	r3,12(sp)
    2fc0:	2000061e 	bne	r4,zero,2fdc <expf+0x148>
    2fc4:	00b80034 	movhi	r2,57344
    2fc8:	d8800615 	stw	r2,24(sp)
    2fcc:	0091fc34 	movhi	r2,18416
    2fd0:	10bfffc4 	addi	r2,r2,-1
    2fd4:	d8800715 	stw	r2,28(sp)
    2fd8:	003fd906 	br	2f40 <__ram_exceptions_end+0xfe000f20>
    2fdc:	009ffc34 	movhi	r2,32752
    2fe0:	d8800715 	stw	r2,28(sp)
    2fe4:	d8000615 	stw	zero,24(sp)
    2fe8:	00800084 	movi	r2,2
    2fec:	20bfd41e 	bne	r4,r2,2f40 <__ram_exceptions_end+0xfe000f20>
    2ff0:	00089cc0 	call	89cc <__errno>
    2ff4:	00c00884 	movi	r3,34
    2ff8:	10c00015 	stw	r3,0(r2)
    2ffc:	003fd306 	br	2f4c <__ram_exceptions_end+0xfe000f2c>

00003000 <logf>:
    3000:	defff304 	addi	sp,sp,-52
    3004:	dc800b15 	stw	r18,44(sp)
    3008:	04800074 	movhi	r18,1
    300c:	dc400a15 	stw	r17,40(sp)
    3010:	dc000915 	stw	r16,36(sp)
    3014:	dfc00c15 	stw	ra,48(sp)
    3018:	94ab8d04 	addi	r18,r18,-20940
    301c:	2023883a 	mov	r17,r4
    3020:	00034a80 	call	34a8 <__ieee754_logf>
    3024:	90c00017 	ldw	r3,0(r18)
    3028:	1021883a 	mov	r16,r2
    302c:	00bfffc4 	movi	r2,-1
    3030:	18800726 	beq	r3,r2,3050 <logf+0x50>
    3034:	8809883a 	mov	r4,r17
    3038:	000396c0 	call	396c <__fpclassifyf>
    303c:	10000426 	beq	r2,zero,3050 <logf+0x50>
    3040:	000b883a 	mov	r5,zero
    3044:	8809883a 	mov	r4,r17
    3048:	00051540 	call	5154 <__gesf2>
    304c:	0080070e 	bge	zero,r2,306c <logf+0x6c>
    3050:	8005883a 	mov	r2,r16
    3054:	dfc00c17 	ldw	ra,48(sp)
    3058:	dc800b17 	ldw	r18,44(sp)
    305c:	dc400a17 	ldw	r17,40(sp)
    3060:	dc000917 	ldw	r16,36(sp)
    3064:	dec00d04 	addi	sp,sp,52
    3068:	f800283a 	ret
    306c:	00800074 	movhi	r2,1
    3070:	8809883a 	mov	r4,r17
    3074:	10a30d04 	addi	r2,r2,-29644
    3078:	d8000815 	stw	zero,32(sp)
    307c:	d8800115 	stw	r2,4(sp)
    3080:	00086b00 	call	86b0 <__extendsfdf2>
    3084:	94000017 	ldw	r16,0(r18)
    3088:	d8800415 	stw	r2,16(sp)
    308c:	d8c00515 	stw	r3,20(sp)
    3090:	d8800215 	stw	r2,8(sp)
    3094:	d8c00315 	stw	r3,12(sp)
    3098:	000b883a 	mov	r5,zero
    309c:	8809883a 	mov	r4,r17
    30a0:	8000101e 	bne	r16,zero,30e4 <logf+0xe4>
    30a4:	00b80034 	movhi	r2,57344
    30a8:	d8800615 	stw	r2,24(sp)
    30ac:	00b1fc34 	movhi	r2,51184
    30b0:	10bfffc4 	addi	r2,r2,-1
    30b4:	d8800715 	stw	r2,28(sp)
    30b8:	00050dc0 	call	50dc <__eqsf2>
    30bc:	1000201e 	bne	r2,zero,3140 <logf+0x140>
    30c0:	00800084 	movi	r2,2
    30c4:	d8800015 	stw	r2,0(sp)
    30c8:	d809883a 	mov	r4,sp
    30cc:	00039400 	call	3940 <matherr>
    30d0:	1000151e 	bne	r2,zero,3128 <logf+0x128>
    30d4:	00089cc0 	call	89cc <__errno>
    30d8:	00c00884 	movi	r3,34
    30dc:	10c00015 	stw	r3,0(r2)
    30e0:	00001106 	br	3128 <logf+0x128>
    30e4:	00bffc34 	movhi	r2,65520
    30e8:	d8000615 	stw	zero,24(sp)
    30ec:	d8800715 	stw	r2,28(sp)
    30f0:	00050dc0 	call	50dc <__eqsf2>
    30f4:	10001826 	beq	r2,zero,3158 <logf+0x158>
    30f8:	00800044 	movi	r2,1
    30fc:	d8800015 	stw	r2,0(sp)
    3100:	00800084 	movi	r2,2
    3104:	8080101e 	bne	r16,r2,3148 <logf+0x148>
    3108:	00089cc0 	call	89cc <__errno>
    310c:	00c00844 	movi	r3,33
    3110:	10c00015 	stw	r3,0(r2)
    3114:	01000074 	movhi	r4,1
    3118:	2122f204 	addi	r4,r4,-29752
    311c:	00039480 	call	3948 <nan>
    3120:	d8800615 	stw	r2,24(sp)
    3124:	d8c00715 	stw	r3,28(sp)
    3128:	d8800817 	ldw	r2,32(sp)
    312c:	10000e1e 	bne	r2,zero,3168 <logf+0x168>
    3130:	d9000617 	ldw	r4,24(sp)
    3134:	d9400717 	ldw	r5,28(sp)
    3138:	00087c00 	call	87c0 <__truncdfsf2>
    313c:	003fc506 	br	3054 <__ram_exceptions_end+0xfe001034>
    3140:	00800044 	movi	r2,1
    3144:	d8800015 	stw	r2,0(sp)
    3148:	d809883a 	mov	r4,sp
    314c:	00039400 	call	3940 <matherr>
    3150:	103ff01e 	bne	r2,zero,3114 <__ram_exceptions_end+0xfe0010f4>
    3154:	003fec06 	br	3108 <__ram_exceptions_end+0xfe0010e8>
    3158:	00800084 	movi	r2,2
    315c:	d8800015 	stw	r2,0(sp)
    3160:	80bfdc26 	beq	r16,r2,30d4 <__ram_exceptions_end+0xfe0010b4>
    3164:	003fd806 	br	30c8 <__ram_exceptions_end+0xfe0010a8>
    3168:	00089cc0 	call	89cc <__errno>
    316c:	d8c00817 	ldw	r3,32(sp)
    3170:	10c00015 	stw	r3,0(r2)
    3174:	003fee06 	br	3130 <__ram_exceptions_end+0xfe001110>

00003178 <__ieee754_expf>:
    3178:	00a00034 	movhi	r2,32768
    317c:	defffa04 	addi	sp,sp,-24
    3180:	10bfffc4 	addi	r2,r2,-1
    3184:	dfc00515 	stw	ra,20(sp)
    3188:	dd000415 	stw	r20,16(sp)
    318c:	dcc00315 	stw	r19,12(sp)
    3190:	dc800215 	stw	r18,8(sp)
    3194:	dc400115 	stw	r17,4(sp)
    3198:	dc000015 	stw	r16,0(sp)
    319c:	00dfe034 	movhi	r3,32640
    31a0:	1104703a 	and	r2,r2,r4
    31a4:	200b883a 	mov	r5,r4
    31a8:	18807336 	bltu	r3,r2,3378 <__ieee754_expf+0x200>
    31ac:	2021883a 	mov	r16,r4
    31b0:	2022d7fa 	srli	r17,r4,31
    31b4:	10c07926 	beq	r2,r3,339c <__ieee754_expf+0x224>
    31b8:	00d0ac74 	movhi	r3,17073
    31bc:	18dc85c4 	addi	r3,r3,29207
    31c0:	19008016 	blt	r3,r4,33c4 <__ieee754_expf+0x24c>
    31c4:	20007816 	blt	r4,zero,33a8 <__ieee754_expf+0x230>
    31c8:	00cfac74 	movhi	r3,16049
    31cc:	18dc8604 	addi	r3,r3,29208
    31d0:	18805b2e 	bgeu	r3,r2,3340 <__ieee754_expf+0x1c8>
    31d4:	00cfe174 	movhi	r3,16261
    31d8:	18c56444 	addi	r3,r3,5521
    31dc:	18808f36 	bltu	r3,r2,341c <__ieee754_expf+0x2a4>
    31e0:	8c67883a 	add	r19,r17,r17
    31e4:	00800074 	movhi	r2,1
    31e8:	9ce7883a 	add	r19,r19,r19
    31ec:	10ab8904 	addi	r2,r2,-20956
    31f0:	14c5883a 	add	r2,r2,r19
    31f4:	11400017 	ldw	r5,0(r2)
    31f8:	8009883a 	mov	r4,r16
    31fc:	00057080 	call	5708 <__subsf3>
    3200:	00c00074 	movhi	r3,1
    3204:	18eb8704 	addi	r3,r3,-20964
    3208:	1ce7883a 	add	r19,r3,r19
    320c:	1025883a 	mov	r18,r2
    3210:	9cc00017 	ldw	r19,0(r19)
    3214:	00800044 	movi	r2,1
    3218:	1445c83a 	sub	r2,r2,r17
    321c:	1463c83a 	sub	r17,r2,r17
    3220:	980b883a 	mov	r5,r19
    3224:	9009883a 	mov	r4,r18
    3228:	00057080 	call	5708 <__subsf3>
    322c:	1021883a 	mov	r16,r2
    3230:	800b883a 	mov	r5,r16
    3234:	8009883a 	mov	r4,r16
    3238:	00052d80 	call	52d8 <__mulsf3>
    323c:	014cccb4 	movhi	r5,13106
    3240:	296ed304 	addi	r5,r5,-17588
    3244:	1009883a 	mov	r4,r2
    3248:	1029883a 	mov	r20,r2
    324c:	00052d80 	call	52d8 <__mulsf3>
    3250:	014d77b4 	movhi	r5,13790
    3254:	297a8384 	addi	r5,r5,-5618
    3258:	1009883a 	mov	r4,r2
    325c:	00057080 	call	5708 <__subsf3>
    3260:	a00b883a 	mov	r5,r20
    3264:	1009883a 	mov	r4,r2
    3268:	00052d80 	call	52d8 <__mulsf3>
    326c:	014e22f4 	movhi	r5,14475
    3270:	296cd544 	addi	r5,r5,-19627
    3274:	1009883a 	mov	r4,r2
    3278:	00047d40 	call	47d4 <__addsf3>
    327c:	a00b883a 	mov	r5,r20
    3280:	1009883a 	mov	r4,r2
    3284:	00052d80 	call	52d8 <__mulsf3>
    3288:	014ecdb4 	movhi	r5,15158
    328c:	2942d844 	addi	r5,r5,2913
    3290:	1009883a 	mov	r4,r2
    3294:	00057080 	call	5708 <__subsf3>
    3298:	a00b883a 	mov	r5,r20
    329c:	1009883a 	mov	r4,r2
    32a0:	00052d80 	call	52d8 <__mulsf3>
    32a4:	014f8af4 	movhi	r5,15915
    32a8:	296aaac4 	addi	r5,r5,-21845
    32ac:	1009883a 	mov	r4,r2
    32b0:	00047d40 	call	47d4 <__addsf3>
    32b4:	a00b883a 	mov	r5,r20
    32b8:	1009883a 	mov	r4,r2
    32bc:	00052d80 	call	52d8 <__mulsf3>
    32c0:	100b883a 	mov	r5,r2
    32c4:	8009883a 	mov	r4,r16
    32c8:	00057080 	call	5708 <__subsf3>
    32cc:	1029883a 	mov	r20,r2
    32d0:	88004126 	beq	r17,zero,33d8 <__ieee754_expf+0x260>
    32d4:	8009883a 	mov	r4,r16
    32d8:	100b883a 	mov	r5,r2
    32dc:	00052d80 	call	52d8 <__mulsf3>
    32e0:	a00b883a 	mov	r5,r20
    32e4:	01100034 	movhi	r4,16384
    32e8:	1021883a 	mov	r16,r2
    32ec:	00057080 	call	5708 <__subsf3>
    32f0:	100b883a 	mov	r5,r2
    32f4:	8009883a 	mov	r4,r16
    32f8:	0004c9c0 	call	4c9c <__divsf3>
    32fc:	100b883a 	mov	r5,r2
    3300:	9809883a 	mov	r4,r19
    3304:	00057080 	call	5708 <__subsf3>
    3308:	900b883a 	mov	r5,r18
    330c:	1009883a 	mov	r4,r2
    3310:	00057080 	call	5708 <__subsf3>
    3314:	100b883a 	mov	r5,r2
    3318:	010fe034 	movhi	r4,16256
    331c:	00057080 	call	5708 <__subsf3>
    3320:	00ffe0c4 	movi	r3,-125
    3324:	88c05d0e 	bge	r17,r3,349c <__ieee754_expf+0x324>
    3328:	8c401904 	addi	r17,r17,100
    332c:	880895fa 	slli	r4,r17,23
    3330:	01436034 	movhi	r5,3456
    3334:	2089883a 	add	r4,r4,r2
    3338:	00052d80 	call	52d8 <__mulsf3>
    333c:	00000f06 	br	337c <__ieee754_expf+0x204>
    3340:	00cc6034 	movhi	r3,12672
    3344:	18ffffc4 	addi	r3,r3,-1
    3348:	18801c36 	bltu	r3,r2,33bc <__ieee754_expf+0x244>
    334c:	015c52b4 	movhi	r5,29002
    3350:	297cb284 	addi	r5,r5,-3382
    3354:	8009883a 	mov	r4,r16
    3358:	00047d40 	call	47d4 <__addsf3>
    335c:	044fe034 	movhi	r17,16256
    3360:	880b883a 	mov	r5,r17
    3364:	1009883a 	mov	r4,r2
    3368:	00051540 	call	5154 <__gesf2>
    336c:	0080130e 	bge	zero,r2,33bc <__ieee754_expf+0x244>
    3370:	880b883a 	mov	r5,r17
    3374:	8009883a 	mov	r4,r16
    3378:	00047d40 	call	47d4 <__addsf3>
    337c:	dfc00517 	ldw	ra,20(sp)
    3380:	dd000417 	ldw	r20,16(sp)
    3384:	dcc00317 	ldw	r19,12(sp)
    3388:	dc800217 	ldw	r18,8(sp)
    338c:	dc400117 	ldw	r17,4(sp)
    3390:	dc000017 	ldw	r16,0(sp)
    3394:	dec00604 	addi	sp,sp,24
    3398:	f800283a 	ret
    339c:	8800051e 	bne	r17,zero,33b4 <__ieee754_expf+0x23c>
    33a0:	2005883a 	mov	r2,r4
    33a4:	003ff506 	br	337c <__ram_exceptions_end+0xfe00135c>
    33a8:	00d0b434 	movhi	r3,17104
    33ac:	18fc6d44 	addi	r3,r3,-3659
    33b0:	18bf852e 	bgeu	r3,r2,31c8 <__ram_exceptions_end+0xfe0011a8>
    33b4:	0005883a 	mov	r2,zero
    33b8:	003ff006 	br	337c <__ram_exceptions_end+0xfe00135c>
    33bc:	0023883a 	mov	r17,zero
    33c0:	003f9b06 	br	3230 <__ram_exceptions_end+0xfe001210>
    33c4:	015c52b4 	movhi	r5,29002
    33c8:	297cb284 	addi	r5,r5,-3382
    33cc:	2809883a 	mov	r4,r5
    33d0:	00052d80 	call	52d8 <__mulsf3>
    33d4:	003fe906 	br	337c <__ram_exceptions_end+0xfe00135c>
    33d8:	8009883a 	mov	r4,r16
    33dc:	100b883a 	mov	r5,r2
    33e0:	00052d80 	call	52d8 <__mulsf3>
    33e4:	a009883a 	mov	r4,r20
    33e8:	01500034 	movhi	r5,16384
    33ec:	1023883a 	mov	r17,r2
    33f0:	00057080 	call	5708 <__subsf3>
    33f4:	8809883a 	mov	r4,r17
    33f8:	100b883a 	mov	r5,r2
    33fc:	0004c9c0 	call	4c9c <__divsf3>
    3400:	800b883a 	mov	r5,r16
    3404:	1009883a 	mov	r4,r2
    3408:	00057080 	call	5708 <__subsf3>
    340c:	100b883a 	mov	r5,r2
    3410:	010fe034 	movhi	r4,16256
    3414:	00057080 	call	5708 <__subsf3>
    3418:	003fd806 	br	337c <__ram_exceptions_end+0xfe00135c>
    341c:	014fee74 	movhi	r5,16313
    3420:	296a8ec4 	addi	r5,r5,-21957
    3424:	8009883a 	mov	r4,r16
    3428:	00052d80 	call	52d8 <__mulsf3>
    342c:	8c63883a 	add	r17,r17,r17
    3430:	00c00074 	movhi	r3,1
    3434:	18eb8b04 	addi	r3,r3,-20948
    3438:	8c63883a 	add	r17,r17,r17
    343c:	1c63883a 	add	r17,r3,r17
    3440:	89400017 	ldw	r5,0(r17)
    3444:	1009883a 	mov	r4,r2
    3448:	00047d40 	call	47d4 <__addsf3>
    344c:	1009883a 	mov	r4,r2
    3450:	0005bec0 	call	5bec <__fixsfsi>
    3454:	1009883a 	mov	r4,r2
    3458:	1023883a 	mov	r17,r2
    345c:	0005c5c0 	call	5c5c <__floatsisf>
    3460:	014fcc74 	movhi	r5,16177
    3464:	295c6004 	addi	r5,r5,29056
    3468:	1009883a 	mov	r4,r2
    346c:	1027883a 	mov	r19,r2
    3470:	00052d80 	call	52d8 <__mulsf3>
    3474:	100b883a 	mov	r5,r2
    3478:	8009883a 	mov	r4,r16
    347c:	00057080 	call	5708 <__subsf3>
    3480:	014dc634 	movhi	r5,14104
    3484:	9809883a 	mov	r4,r19
    3488:	297df444 	addi	r5,r5,-2095
    348c:	1025883a 	mov	r18,r2
    3490:	00052d80 	call	52d8 <__mulsf3>
    3494:	1027883a 	mov	r19,r2
    3498:	003f6106 	br	3220 <__ram_exceptions_end+0xfe001200>
    349c:	882295fa 	slli	r17,r17,23
    34a0:	8885883a 	add	r2,r17,r2
    34a4:	003fb506 	br	337c <__ram_exceptions_end+0xfe00135c>

000034a8 <__ieee754_logf>:
    34a8:	00e00034 	movhi	r3,32768
    34ac:	defff704 	addi	sp,sp,-36
    34b0:	18ffffc4 	addi	r3,r3,-1
    34b4:	dfc00815 	stw	ra,32(sp)
    34b8:	ddc00715 	stw	r23,28(sp)
    34bc:	dd800615 	stw	r22,24(sp)
    34c0:	dd400515 	stw	r21,20(sp)
    34c4:	dd000415 	stw	r20,16(sp)
    34c8:	dcc00315 	stw	r19,12(sp)
    34cc:	dc800215 	stw	r18,8(sp)
    34d0:	dc400115 	stw	r17,4(sp)
    34d4:	dc000015 	stw	r16,0(sp)
    34d8:	1906703a 	and	r3,r3,r4
    34dc:	18002626 	beq	r3,zero,3578 <__ieee754_logf+0xd0>
    34e0:	200b883a 	mov	r5,r4
    34e4:	2005883a 	mov	r2,r4
    34e8:	20004516 	blt	r4,zero,3600 <__ieee754_logf+0x158>
    34ec:	00dfe034 	movhi	r3,32640
    34f0:	18ffffc4 	addi	r3,r3,-1
    34f4:	19003c16 	blt	r3,r4,35e8 <__ieee754_logf+0x140>
    34f8:	00c02034 	movhi	r3,128
    34fc:	18ffffc4 	addi	r3,r3,-1
    3500:	19003b0e 	bge	r3,r4,35f0 <__ieee754_logf+0x148>
    3504:	0023883a 	mov	r17,zero
    3508:	04802034 	movhi	r18,128
    350c:	94bfffc4 	addi	r18,r18,-1
    3510:	010012f4 	movhi	r4,75
    3514:	14a0703a 	and	r16,r2,r18
    3518:	213ec804 	addi	r4,r4,-1248
    351c:	1007d5fa 	srai	r3,r2,23
    3520:	8109883a 	add	r4,r16,r4
    3524:	2100202c 	andhi	r4,r4,128
    3528:	200dd5fa 	srai	r6,r4,23
    352c:	18bfe044 	addi	r2,r3,-127
    3530:	210fe03c 	xorhi	r4,r4,16256
    3534:	1445883a 	add	r2,r2,r17
    3538:	014fe034 	movhi	r5,16256
    353c:	2408b03a 	or	r4,r4,r16
    3540:	30a3883a 	add	r17,r6,r2
    3544:	00057080 	call	5708 <__subsf3>
    3548:	1027883a 	mov	r19,r2
    354c:	808003c4 	addi	r2,r16,15
    3550:	14a4703a 	and	r18,r2,r18
    3554:	008003c4 	movi	r2,15
    3558:	14802e16 	blt	r2,r18,3614 <__ieee754_logf+0x16c>
    355c:	000b883a 	mov	r5,zero
    3560:	9809883a 	mov	r4,r19
    3564:	00050dc0 	call	50dc <__eqsf2>
    3568:	1000891e 	bne	r2,zero,3790 <__ieee754_logf+0x2e8>
    356c:	8800101e 	bne	r17,zero,35b0 <__ieee754_logf+0x108>
    3570:	0005883a 	mov	r2,zero
    3574:	00000306 	br	3584 <__ieee754_logf+0xdc>
    3578:	000b883a 	mov	r5,zero
    357c:	01330034 	movhi	r4,52224
    3580:	0004c9c0 	call	4c9c <__divsf3>
    3584:	dfc00817 	ldw	ra,32(sp)
    3588:	ddc00717 	ldw	r23,28(sp)
    358c:	dd800617 	ldw	r22,24(sp)
    3590:	dd400517 	ldw	r21,20(sp)
    3594:	dd000417 	ldw	r20,16(sp)
    3598:	dcc00317 	ldw	r19,12(sp)
    359c:	dc800217 	ldw	r18,8(sp)
    35a0:	dc400117 	ldw	r17,4(sp)
    35a4:	dc000017 	ldw	r16,0(sp)
    35a8:	dec00904 	addi	sp,sp,36
    35ac:	f800283a 	ret
    35b0:	8809883a 	mov	r4,r17
    35b4:	0005c5c0 	call	5c5c <__floatsisf>
    35b8:	014fcc74 	movhi	r5,16177
    35bc:	295c6004 	addi	r5,r5,29056
    35c0:	1009883a 	mov	r4,r2
    35c4:	1021883a 	mov	r16,r2
    35c8:	00052d80 	call	52d8 <__mulsf3>
    35cc:	014dc634 	movhi	r5,14104
    35d0:	297df444 	addi	r5,r5,-2095
    35d4:	8009883a 	mov	r4,r16
    35d8:	1023883a 	mov	r17,r2
    35dc:	00052d80 	call	52d8 <__mulsf3>
    35e0:	100b883a 	mov	r5,r2
    35e4:	8809883a 	mov	r4,r17
    35e8:	00047d40 	call	47d4 <__addsf3>
    35ec:	003fe506 	br	3584 <__ram_exceptions_end+0xfe001564>
    35f0:	01530034 	movhi	r5,19456
    35f4:	00052d80 	call	52d8 <__mulsf3>
    35f8:	047ff9c4 	movi	r17,-25
    35fc:	003fc206 	br	3508 <__ram_exceptions_end+0xfe0014e8>
    3600:	00057080 	call	5708 <__subsf3>
    3604:	000b883a 	mov	r5,zero
    3608:	1009883a 	mov	r4,r2
    360c:	0004c9c0 	call	4c9c <__divsf3>
    3610:	003fdc06 	br	3584 <__ram_exceptions_end+0xfe001564>
    3614:	01500034 	movhi	r5,16384
    3618:	9809883a 	mov	r4,r19
    361c:	00047d40 	call	47d4 <__addsf3>
    3620:	100b883a 	mov	r5,r2
    3624:	9809883a 	mov	r4,r19
    3628:	0004c9c0 	call	4c9c <__divsf3>
    362c:	8809883a 	mov	r4,r17
    3630:	102b883a 	mov	r21,r2
    3634:	0005c5c0 	call	5c5c <__floatsisf>
    3638:	a80b883a 	mov	r5,r21
    363c:	a809883a 	mov	r4,r21
    3640:	102d883a 	mov	r22,r2
    3644:	00052d80 	call	52d8 <__mulsf3>
    3648:	100b883a 	mov	r5,r2
    364c:	1009883a 	mov	r4,r2
    3650:	102f883a 	mov	r23,r2
    3654:	00052d80 	call	52d8 <__mulsf3>
    3658:	014f8634 	movhi	r5,15896
    365c:	296225c4 	addi	r5,r5,-30569
    3660:	1009883a 	mov	r4,r2
    3664:	1025883a 	mov	r18,r2
    3668:	00052d80 	call	52d8 <__mulsf3>
    366c:	014f8eb4 	movhi	r5,15930
    3670:	294cc944 	addi	r5,r5,13093
    3674:	1009883a 	mov	r4,r2
    3678:	00047d40 	call	47d4 <__addsf3>
    367c:	900b883a 	mov	r5,r18
    3680:	1009883a 	mov	r4,r2
    3684:	00052d80 	call	52d8 <__mulsf3>
    3688:	014fa4b4 	movhi	r5,16018
    368c:	29524944 	addi	r5,r5,18725
    3690:	1009883a 	mov	r4,r2
    3694:	00047d40 	call	47d4 <__addsf3>
    3698:	900b883a 	mov	r5,r18
    369c:	1009883a 	mov	r4,r2
    36a0:	00052d80 	call	52d8 <__mulsf3>
    36a4:	014fcaf4 	movhi	r5,16171
    36a8:	296aaac4 	addi	r5,r5,-21845
    36ac:	1009883a 	mov	r4,r2
    36b0:	00047d40 	call	47d4 <__addsf3>
    36b4:	b80b883a 	mov	r5,r23
    36b8:	1009883a 	mov	r4,r2
    36bc:	00052d80 	call	52d8 <__mulsf3>
    36c0:	014f8774 	movhi	r5,15901
    36c4:	9009883a 	mov	r4,r18
    36c8:	297413c4 	addi	r5,r5,-12209
    36cc:	102f883a 	mov	r23,r2
    36d0:	00052d80 	call	52d8 <__mulsf3>
    36d4:	014f9934 	movhi	r5,15972
    36d8:	29638a44 	addi	r5,r5,-29143
    36dc:	1009883a 	mov	r4,r2
    36e0:	00047d40 	call	47d4 <__addsf3>
    36e4:	900b883a 	mov	r5,r18
    36e8:	1009883a 	mov	r4,r2
    36ec:	00052d80 	call	52d8 <__mulsf3>
    36f0:	014fb374 	movhi	r5,16077
    36f4:	29733344 	addi	r5,r5,-13107
    36f8:	1009883a 	mov	r4,r2
    36fc:	00047d40 	call	47d4 <__addsf3>
    3700:	900b883a 	mov	r5,r18
    3704:	1009883a 	mov	r4,r2
    3708:	00052d80 	call	52d8 <__mulsf3>
    370c:	100b883a 	mov	r5,r2
    3710:	b809883a 	mov	r4,r23
    3714:	00047d40 	call	47d4 <__addsf3>
    3718:	053ff3f4 	movhi	r20,65487
    371c:	1025883a 	mov	r18,r2
    3720:	00800db4 	movhi	r2,54
    3724:	a5170c04 	addi	r20,r20,23600
    3728:	10b0a204 	addi	r2,r2,-15736
    372c:	8529883a 	add	r20,r16,r20
    3730:	1405c83a 	sub	r2,r2,r16
    3734:	1528b03a 	or	r20,r2,r20
    3738:	05005c0e 	bge	zero,r20,38ac <__ieee754_logf+0x404>
    373c:	014fc034 	movhi	r5,16128
    3740:	9809883a 	mov	r4,r19
    3744:	00052d80 	call	52d8 <__mulsf3>
    3748:	980b883a 	mov	r5,r19
    374c:	1009883a 	mov	r4,r2
    3750:	00052d80 	call	52d8 <__mulsf3>
    3754:	1021883a 	mov	r16,r2
    3758:	8800211e 	bne	r17,zero,37e0 <__ieee754_logf+0x338>
    375c:	9009883a 	mov	r4,r18
    3760:	100b883a 	mov	r5,r2
    3764:	00047d40 	call	47d4 <__addsf3>
    3768:	a80b883a 	mov	r5,r21
    376c:	1009883a 	mov	r4,r2
    3770:	00052d80 	call	52d8 <__mulsf3>
    3774:	8009883a 	mov	r4,r16
    3778:	100b883a 	mov	r5,r2
    377c:	00057080 	call	5708 <__subsf3>
    3780:	100b883a 	mov	r5,r2
    3784:	9809883a 	mov	r4,r19
    3788:	00057080 	call	5708 <__subsf3>
    378c:	003f7d06 	br	3584 <__ram_exceptions_end+0xfe001564>
    3790:	014faaf4 	movhi	r5,16043
    3794:	296aaac4 	addi	r5,r5,-21845
    3798:	9809883a 	mov	r4,r19
    379c:	00052d80 	call	52d8 <__mulsf3>
    37a0:	100b883a 	mov	r5,r2
    37a4:	010fc034 	movhi	r4,16128
    37a8:	00057080 	call	5708 <__subsf3>
    37ac:	980b883a 	mov	r5,r19
    37b0:	9809883a 	mov	r4,r19
    37b4:	1021883a 	mov	r16,r2
    37b8:	00052d80 	call	52d8 <__mulsf3>
    37bc:	8009883a 	mov	r4,r16
    37c0:	100b883a 	mov	r5,r2
    37c4:	00052d80 	call	52d8 <__mulsf3>
    37c8:	1021883a 	mov	r16,r2
    37cc:	8800211e 	bne	r17,zero,3854 <__ieee754_logf+0x3ac>
    37d0:	100b883a 	mov	r5,r2
    37d4:	9809883a 	mov	r4,r19
    37d8:	00057080 	call	5708 <__subsf3>
    37dc:	003f6906 	br	3584 <__ram_exceptions_end+0xfe001564>
    37e0:	014fcc74 	movhi	r5,16177
    37e4:	b009883a 	mov	r4,r22
    37e8:	295c6004 	addi	r5,r5,29056
    37ec:	00052d80 	call	52d8 <__mulsf3>
    37f0:	800b883a 	mov	r5,r16
    37f4:	9009883a 	mov	r4,r18
    37f8:	1023883a 	mov	r17,r2
    37fc:	00047d40 	call	47d4 <__addsf3>
    3800:	a80b883a 	mov	r5,r21
    3804:	1009883a 	mov	r4,r2
    3808:	00052d80 	call	52d8 <__mulsf3>
    380c:	014dc634 	movhi	r5,14104
    3810:	b009883a 	mov	r4,r22
    3814:	297df444 	addi	r5,r5,-2095
    3818:	1025883a 	mov	r18,r2
    381c:	00052d80 	call	52d8 <__mulsf3>
    3820:	9009883a 	mov	r4,r18
    3824:	100b883a 	mov	r5,r2
    3828:	00047d40 	call	47d4 <__addsf3>
    382c:	8009883a 	mov	r4,r16
    3830:	100b883a 	mov	r5,r2
    3834:	00057080 	call	5708 <__subsf3>
    3838:	980b883a 	mov	r5,r19
    383c:	1009883a 	mov	r4,r2
    3840:	00057080 	call	5708 <__subsf3>
    3844:	100b883a 	mov	r5,r2
    3848:	8809883a 	mov	r4,r17
    384c:	00057080 	call	5708 <__subsf3>
    3850:	003f4c06 	br	3584 <__ram_exceptions_end+0xfe001564>
    3854:	8809883a 	mov	r4,r17
    3858:	0005c5c0 	call	5c5c <__floatsisf>
    385c:	014fcc74 	movhi	r5,16177
    3860:	295c6004 	addi	r5,r5,29056
    3864:	1009883a 	mov	r4,r2
    3868:	1023883a 	mov	r17,r2
    386c:	00052d80 	call	52d8 <__mulsf3>
    3870:	014dc634 	movhi	r5,14104
    3874:	8809883a 	mov	r4,r17
    3878:	297df444 	addi	r5,r5,-2095
    387c:	1025883a 	mov	r18,r2
    3880:	00052d80 	call	52d8 <__mulsf3>
    3884:	8009883a 	mov	r4,r16
    3888:	100b883a 	mov	r5,r2
    388c:	00057080 	call	5708 <__subsf3>
    3890:	980b883a 	mov	r5,r19
    3894:	1009883a 	mov	r4,r2
    3898:	00057080 	call	5708 <__subsf3>
    389c:	100b883a 	mov	r5,r2
    38a0:	9009883a 	mov	r4,r18
    38a4:	00057080 	call	5708 <__subsf3>
    38a8:	003f3606 	br	3584 <__ram_exceptions_end+0xfe001564>
    38ac:	88001a26 	beq	r17,zero,3918 <__ieee754_logf+0x470>
    38b0:	014fcc74 	movhi	r5,16177
    38b4:	b009883a 	mov	r4,r22
    38b8:	295c6004 	addi	r5,r5,29056
    38bc:	00052d80 	call	52d8 <__mulsf3>
    38c0:	900b883a 	mov	r5,r18
    38c4:	9809883a 	mov	r4,r19
    38c8:	1021883a 	mov	r16,r2
    38cc:	00057080 	call	5708 <__subsf3>
    38d0:	a80b883a 	mov	r5,r21
    38d4:	1009883a 	mov	r4,r2
    38d8:	00052d80 	call	52d8 <__mulsf3>
    38dc:	014dc634 	movhi	r5,14104
    38e0:	b009883a 	mov	r4,r22
    38e4:	297df444 	addi	r5,r5,-2095
    38e8:	1023883a 	mov	r17,r2
    38ec:	00052d80 	call	52d8 <__mulsf3>
    38f0:	8809883a 	mov	r4,r17
    38f4:	100b883a 	mov	r5,r2
    38f8:	00057080 	call	5708 <__subsf3>
    38fc:	980b883a 	mov	r5,r19
    3900:	1009883a 	mov	r4,r2
    3904:	00057080 	call	5708 <__subsf3>
    3908:	100b883a 	mov	r5,r2
    390c:	8009883a 	mov	r4,r16
    3910:	00057080 	call	5708 <__subsf3>
    3914:	003f1b06 	br	3584 <__ram_exceptions_end+0xfe001564>
    3918:	900b883a 	mov	r5,r18
    391c:	9809883a 	mov	r4,r19
    3920:	00057080 	call	5708 <__subsf3>
    3924:	a80b883a 	mov	r5,r21
    3928:	1009883a 	mov	r4,r2
    392c:	00052d80 	call	52d8 <__mulsf3>
    3930:	100b883a 	mov	r5,r2
    3934:	9809883a 	mov	r4,r19
    3938:	00057080 	call	5708 <__subsf3>
    393c:	003f1106 	br	3584 <__ram_exceptions_end+0xfe001564>

00003940 <matherr>:
    3940:	0005883a 	mov	r2,zero
    3944:	f800283a 	ret

00003948 <nan>:
    3948:	0005883a 	mov	r2,zero
    394c:	00dffe34 	movhi	r3,32760
    3950:	f800283a 	ret

00003954 <finitef>:
    3954:	00a00034 	movhi	r2,32768
    3958:	10bfffc4 	addi	r2,r2,-1
    395c:	1104703a 	and	r2,r2,r4
    3960:	00dfe034 	movhi	r3,32640
    3964:	10c4803a 	cmplt	r2,r2,r3
    3968:	f800283a 	ret

0000396c <__fpclassifyf>:
    396c:	00a00034 	movhi	r2,32768
    3970:	10bfffc4 	addi	r2,r2,-1
    3974:	2088703a 	and	r4,r4,r2
    3978:	2000021e 	bne	r4,zero,3984 <__fpclassifyf+0x18>
    397c:	00800084 	movi	r2,2
    3980:	f800283a 	ret
    3984:	00bfe034 	movhi	r2,65408
    3988:	00dfc034 	movhi	r3,32512
    398c:	2085883a 	add	r2,r4,r2
    3990:	18ffffc4 	addi	r3,r3,-1
    3994:	18800236 	bltu	r3,r2,39a0 <__fpclassifyf+0x34>
    3998:	00800104 	movi	r2,4
    399c:	f800283a 	ret
    39a0:	00c02034 	movhi	r3,128
    39a4:	20bfffc4 	addi	r2,r4,-1
    39a8:	18ffff84 	addi	r3,r3,-2
    39ac:	18800236 	bltu	r3,r2,39b8 <__fpclassifyf+0x4c>
    39b0:	008000c4 	movi	r2,3
    39b4:	f800283a 	ret
    39b8:	009fe034 	movhi	r2,32640
    39bc:	2085003a 	cmpeq	r2,r4,r2
    39c0:	f800283a 	ret

000039c4 <__fixunsdfsi>:
    39c4:	defffd04 	addi	sp,sp,-12
    39c8:	000d883a 	mov	r6,zero
    39cc:	01d07834 	movhi	r7,16864
    39d0:	dc400115 	stw	r17,4(sp)
    39d4:	dc000015 	stw	r16,0(sp)
    39d8:	dfc00215 	stw	ra,8(sp)
    39dc:	2023883a 	mov	r17,r4
    39e0:	2821883a 	mov	r16,r5
    39e4:	00071740 	call	7174 <__gedf2>
    39e8:	1000080e 	bge	r2,zero,3a0c <__fixunsdfsi+0x48>
    39ec:	8809883a 	mov	r4,r17
    39f0:	800b883a 	mov	r5,r16
    39f4:	00084ac0 	call	84ac <__fixdfsi>
    39f8:	dfc00217 	ldw	ra,8(sp)
    39fc:	dc400117 	ldw	r17,4(sp)
    3a00:	dc000017 	ldw	r16,0(sp)
    3a04:	dec00304 	addi	sp,sp,12
    3a08:	f800283a 	ret
    3a0c:	000d883a 	mov	r6,zero
    3a10:	01d07834 	movhi	r7,16864
    3a14:	8809883a 	mov	r4,r17
    3a18:	800b883a 	mov	r5,r16
    3a1c:	0007bb00 	call	7bb0 <__subdf3>
    3a20:	180b883a 	mov	r5,r3
    3a24:	1009883a 	mov	r4,r2
    3a28:	00084ac0 	call	84ac <__fixdfsi>
    3a2c:	00e00034 	movhi	r3,32768
    3a30:	10c5883a 	add	r2,r2,r3
    3a34:	003ff006 	br	39f8 <__ram_exceptions_end+0xfe0019d8>

00003a38 <__udivdi3>:
    3a38:	defff404 	addi	sp,sp,-48
    3a3c:	dcc00515 	stw	r19,20(sp)
    3a40:	dc000215 	stw	r16,8(sp)
    3a44:	dfc00b15 	stw	ra,44(sp)
    3a48:	df000a15 	stw	fp,40(sp)
    3a4c:	ddc00915 	stw	r23,36(sp)
    3a50:	dd800815 	stw	r22,32(sp)
    3a54:	dd400715 	stw	r21,28(sp)
    3a58:	dd000615 	stw	r20,24(sp)
    3a5c:	dc800415 	stw	r18,16(sp)
    3a60:	dc400315 	stw	r17,12(sp)
    3a64:	2027883a 	mov	r19,r4
    3a68:	2821883a 	mov	r16,r5
    3a6c:	3800461e 	bne	r7,zero,3b88 <__udivdi3+0x150>
    3a70:	3023883a 	mov	r17,r6
    3a74:	2025883a 	mov	r18,r4
    3a78:	2980572e 	bgeu	r5,r6,3bd8 <__udivdi3+0x1a0>
    3a7c:	00bfffd4 	movui	r2,65535
    3a80:	282d883a 	mov	r22,r5
    3a84:	1180b236 	bltu	r2,r6,3d50 <__udivdi3+0x318>
    3a88:	00803fc4 	movi	r2,255
    3a8c:	1185803a 	cmpltu	r2,r2,r6
    3a90:	100490fa 	slli	r2,r2,3
    3a94:	3086d83a 	srl	r3,r6,r2
    3a98:	01000074 	movhi	r4,1
    3a9c:	21230f04 	addi	r4,r4,-29636
    3aa0:	20c7883a 	add	r3,r4,r3
    3aa4:	18c00003 	ldbu	r3,0(r3)
    3aa8:	1885883a 	add	r2,r3,r2
    3aac:	00c00804 	movi	r3,32
    3ab0:	1887c83a 	sub	r3,r3,r2
    3ab4:	18000526 	beq	r3,zero,3acc <__udivdi3+0x94>
    3ab8:	80e0983a 	sll	r16,r16,r3
    3abc:	9884d83a 	srl	r2,r19,r2
    3ac0:	30e2983a 	sll	r17,r6,r3
    3ac4:	98e4983a 	sll	r18,r19,r3
    3ac8:	142cb03a 	or	r22,r2,r16
    3acc:	882ad43a 	srli	r21,r17,16
    3ad0:	b009883a 	mov	r4,r22
    3ad4:	8d3fffcc 	andi	r20,r17,65535
    3ad8:	a80b883a 	mov	r5,r21
    3adc:	00047540 	call	4754 <__umodsi3>
    3ae0:	b009883a 	mov	r4,r22
    3ae4:	a80b883a 	mov	r5,r21
    3ae8:	1027883a 	mov	r19,r2
    3aec:	00046f00 	call	46f0 <__udivsi3>
    3af0:	100b883a 	mov	r5,r2
    3af4:	a009883a 	mov	r4,r20
    3af8:	102d883a 	mov	r22,r2
    3afc:	00047ac0 	call	47ac <__mulsi3>
    3b00:	9826943a 	slli	r19,r19,16
    3b04:	9006d43a 	srli	r3,r18,16
    3b08:	1cc6b03a 	or	r3,r3,r19
    3b0c:	1880052e 	bgeu	r3,r2,3b24 <__udivdi3+0xec>
    3b10:	1c47883a 	add	r3,r3,r17
    3b14:	b13fffc4 	addi	r4,r22,-1
    3b18:	1c400136 	bltu	r3,r17,3b20 <__udivdi3+0xe8>
    3b1c:	18814236 	bltu	r3,r2,4028 <__udivdi3+0x5f0>
    3b20:	202d883a 	mov	r22,r4
    3b24:	18a1c83a 	sub	r16,r3,r2
    3b28:	8009883a 	mov	r4,r16
    3b2c:	a80b883a 	mov	r5,r21
    3b30:	00047540 	call	4754 <__umodsi3>
    3b34:	1027883a 	mov	r19,r2
    3b38:	8009883a 	mov	r4,r16
    3b3c:	a80b883a 	mov	r5,r21
    3b40:	9826943a 	slli	r19,r19,16
    3b44:	00046f00 	call	46f0 <__udivsi3>
    3b48:	100b883a 	mov	r5,r2
    3b4c:	a009883a 	mov	r4,r20
    3b50:	94bfffcc 	andi	r18,r18,65535
    3b54:	1021883a 	mov	r16,r2
    3b58:	94e4b03a 	or	r18,r18,r19
    3b5c:	00047ac0 	call	47ac <__mulsi3>
    3b60:	9080052e 	bgeu	r18,r2,3b78 <__udivdi3+0x140>
    3b64:	8ca5883a 	add	r18,r17,r18
    3b68:	80ffffc4 	addi	r3,r16,-1
    3b6c:	94410c36 	bltu	r18,r17,3fa0 <__udivdi3+0x568>
    3b70:	90810b2e 	bgeu	r18,r2,3fa0 <__udivdi3+0x568>
    3b74:	843fff84 	addi	r16,r16,-2
    3b78:	b004943a 	slli	r2,r22,16
    3b7c:	0007883a 	mov	r3,zero
    3b80:	1404b03a 	or	r2,r2,r16
    3b84:	00005e06 	br	3d00 <__udivdi3+0x2c8>
    3b88:	29c05b36 	bltu	r5,r7,3cf8 <__udivdi3+0x2c0>
    3b8c:	00bfffd4 	movui	r2,65535
    3b90:	11c0672e 	bgeu	r2,r7,3d30 <__udivdi3+0x2f8>
    3b94:	00804034 	movhi	r2,256
    3b98:	10bfffc4 	addi	r2,r2,-1
    3b9c:	11c10a36 	bltu	r2,r7,3fc8 <__udivdi3+0x590>
    3ba0:	00800404 	movi	r2,16
    3ba4:	3886d83a 	srl	r3,r7,r2
    3ba8:	01000074 	movhi	r4,1
    3bac:	21230f04 	addi	r4,r4,-29636
    3bb0:	20c7883a 	add	r3,r4,r3
    3bb4:	18c00003 	ldbu	r3,0(r3)
    3bb8:	05c00804 	movi	r23,32
    3bbc:	1885883a 	add	r2,r3,r2
    3bc0:	b8afc83a 	sub	r23,r23,r2
    3bc4:	b800671e 	bne	r23,zero,3d64 <__udivdi3+0x32c>
    3bc8:	3c010536 	bltu	r7,r16,3fe0 <__udivdi3+0x5a8>
    3bcc:	9985403a 	cmpgeu	r2,r19,r6
    3bd0:	0007883a 	mov	r3,zero
    3bd4:	00004a06 	br	3d00 <__udivdi3+0x2c8>
    3bd8:	3000041e 	bne	r6,zero,3bec <__udivdi3+0x1b4>
    3bdc:	000b883a 	mov	r5,zero
    3be0:	01000044 	movi	r4,1
    3be4:	00046f00 	call	46f0 <__udivsi3>
    3be8:	1023883a 	mov	r17,r2
    3bec:	00bfffd4 	movui	r2,65535
    3bf0:	1440532e 	bgeu	r2,r17,3d40 <__udivdi3+0x308>
    3bf4:	00804034 	movhi	r2,256
    3bf8:	10bfffc4 	addi	r2,r2,-1
    3bfc:	1440f436 	bltu	r2,r17,3fd0 <__udivdi3+0x598>
    3c00:	00800404 	movi	r2,16
    3c04:	8886d83a 	srl	r3,r17,r2
    3c08:	01000074 	movhi	r4,1
    3c0c:	21230f04 	addi	r4,r4,-29636
    3c10:	20c7883a 	add	r3,r4,r3
    3c14:	18c00003 	ldbu	r3,0(r3)
    3c18:	1885883a 	add	r2,r3,r2
    3c1c:	00c00804 	movi	r3,32
    3c20:	1887c83a 	sub	r3,r3,r2
    3c24:	1800a51e 	bne	r3,zero,3ebc <__udivdi3+0x484>
    3c28:	882ad43a 	srli	r21,r17,16
    3c2c:	8461c83a 	sub	r16,r16,r17
    3c30:	8d3fffcc 	andi	r20,r17,65535
    3c34:	00c00044 	movi	r3,1
    3c38:	a80b883a 	mov	r5,r21
    3c3c:	8009883a 	mov	r4,r16
    3c40:	d8c00115 	stw	r3,4(sp)
    3c44:	00047540 	call	4754 <__umodsi3>
    3c48:	a80b883a 	mov	r5,r21
    3c4c:	8009883a 	mov	r4,r16
    3c50:	1027883a 	mov	r19,r2
    3c54:	00046f00 	call	46f0 <__udivsi3>
    3c58:	a00b883a 	mov	r5,r20
    3c5c:	1009883a 	mov	r4,r2
    3c60:	102d883a 	mov	r22,r2
    3c64:	00047ac0 	call	47ac <__mulsi3>
    3c68:	9826943a 	slli	r19,r19,16
    3c6c:	900ed43a 	srli	r7,r18,16
    3c70:	d8c00117 	ldw	r3,4(sp)
    3c74:	3cceb03a 	or	r7,r7,r19
    3c78:	3880052e 	bgeu	r7,r2,3c90 <__udivdi3+0x258>
    3c7c:	3c4f883a 	add	r7,r7,r17
    3c80:	b13fffc4 	addi	r4,r22,-1
    3c84:	3c400136 	bltu	r7,r17,3c8c <__udivdi3+0x254>
    3c88:	3880e436 	bltu	r7,r2,401c <__udivdi3+0x5e4>
    3c8c:	202d883a 	mov	r22,r4
    3c90:	38a1c83a 	sub	r16,r7,r2
    3c94:	8009883a 	mov	r4,r16
    3c98:	a80b883a 	mov	r5,r21
    3c9c:	d8c00115 	stw	r3,4(sp)
    3ca0:	00047540 	call	4754 <__umodsi3>
    3ca4:	1027883a 	mov	r19,r2
    3ca8:	8009883a 	mov	r4,r16
    3cac:	a80b883a 	mov	r5,r21
    3cb0:	9826943a 	slli	r19,r19,16
    3cb4:	00046f00 	call	46f0 <__udivsi3>
    3cb8:	a00b883a 	mov	r5,r20
    3cbc:	1009883a 	mov	r4,r2
    3cc0:	94bfffcc 	andi	r18,r18,65535
    3cc4:	1021883a 	mov	r16,r2
    3cc8:	94e4b03a 	or	r18,r18,r19
    3ccc:	00047ac0 	call	47ac <__mulsi3>
    3cd0:	d8c00117 	ldw	r3,4(sp)
    3cd4:	9080052e 	bgeu	r18,r2,3cec <__udivdi3+0x2b4>
    3cd8:	8ca5883a 	add	r18,r17,r18
    3cdc:	813fffc4 	addi	r4,r16,-1
    3ce0:	9440ad36 	bltu	r18,r17,3f98 <__udivdi3+0x560>
    3ce4:	9080ac2e 	bgeu	r18,r2,3f98 <__udivdi3+0x560>
    3ce8:	843fff84 	addi	r16,r16,-2
    3cec:	b004943a 	slli	r2,r22,16
    3cf0:	1404b03a 	or	r2,r2,r16
    3cf4:	00000206 	br	3d00 <__udivdi3+0x2c8>
    3cf8:	0007883a 	mov	r3,zero
    3cfc:	0005883a 	mov	r2,zero
    3d00:	dfc00b17 	ldw	ra,44(sp)
    3d04:	df000a17 	ldw	fp,40(sp)
    3d08:	ddc00917 	ldw	r23,36(sp)
    3d0c:	dd800817 	ldw	r22,32(sp)
    3d10:	dd400717 	ldw	r21,28(sp)
    3d14:	dd000617 	ldw	r20,24(sp)
    3d18:	dcc00517 	ldw	r19,20(sp)
    3d1c:	dc800417 	ldw	r18,16(sp)
    3d20:	dc400317 	ldw	r17,12(sp)
    3d24:	dc000217 	ldw	r16,8(sp)
    3d28:	dec00c04 	addi	sp,sp,48
    3d2c:	f800283a 	ret
    3d30:	00803fc4 	movi	r2,255
    3d34:	11c5803a 	cmpltu	r2,r2,r7
    3d38:	100490fa 	slli	r2,r2,3
    3d3c:	003f9906 	br	3ba4 <__ram_exceptions_end+0xfe001b84>
    3d40:	00803fc4 	movi	r2,255
    3d44:	1445803a 	cmpltu	r2,r2,r17
    3d48:	100490fa 	slli	r2,r2,3
    3d4c:	003fad06 	br	3c04 <__ram_exceptions_end+0xfe001be4>
    3d50:	00804034 	movhi	r2,256
    3d54:	10bfffc4 	addi	r2,r2,-1
    3d58:	11809f36 	bltu	r2,r6,3fd8 <__udivdi3+0x5a0>
    3d5c:	00800404 	movi	r2,16
    3d60:	003f4c06 	br	3a94 <__ram_exceptions_end+0xfe001a74>
    3d64:	3dce983a 	sll	r7,r7,r23
    3d68:	30b8d83a 	srl	fp,r6,r2
    3d6c:	80a2d83a 	srl	r17,r16,r2
    3d70:	35cc983a 	sll	r6,r6,r23
    3d74:	3f38b03a 	or	fp,r7,fp
    3d78:	e024d43a 	srli	r18,fp,16
    3d7c:	9884d83a 	srl	r2,r19,r2
    3d80:	85e0983a 	sll	r16,r16,r23
    3d84:	8809883a 	mov	r4,r17
    3d88:	900b883a 	mov	r5,r18
    3d8c:	d9800015 	stw	r6,0(sp)
    3d90:	1420b03a 	or	r16,r2,r16
    3d94:	00047540 	call	4754 <__umodsi3>
    3d98:	900b883a 	mov	r5,r18
    3d9c:	8809883a 	mov	r4,r17
    3da0:	1029883a 	mov	r20,r2
    3da4:	e5bfffcc 	andi	r22,fp,65535
    3da8:	00046f00 	call	46f0 <__udivsi3>
    3dac:	100b883a 	mov	r5,r2
    3db0:	b009883a 	mov	r4,r22
    3db4:	102b883a 	mov	r21,r2
    3db8:	00047ac0 	call	47ac <__mulsi3>
    3dbc:	a028943a 	slli	r20,r20,16
    3dc0:	8006d43a 	srli	r3,r16,16
    3dc4:	1d06b03a 	or	r3,r3,r20
    3dc8:	1880042e 	bgeu	r3,r2,3ddc <__udivdi3+0x3a4>
    3dcc:	1f07883a 	add	r3,r3,fp
    3dd0:	a93fffc4 	addi	r4,r21,-1
    3dd4:	1f00892e 	bgeu	r3,fp,3ffc <__udivdi3+0x5c4>
    3dd8:	202b883a 	mov	r21,r4
    3ddc:	18a3c83a 	sub	r17,r3,r2
    3de0:	8809883a 	mov	r4,r17
    3de4:	900b883a 	mov	r5,r18
    3de8:	00047540 	call	4754 <__umodsi3>
    3dec:	1029883a 	mov	r20,r2
    3df0:	8809883a 	mov	r4,r17
    3df4:	900b883a 	mov	r5,r18
    3df8:	a028943a 	slli	r20,r20,16
    3dfc:	00046f00 	call	46f0 <__udivsi3>
    3e00:	100b883a 	mov	r5,r2
    3e04:	b009883a 	mov	r4,r22
    3e08:	843fffcc 	andi	r16,r16,65535
    3e0c:	1023883a 	mov	r17,r2
    3e10:	8520b03a 	or	r16,r16,r20
    3e14:	00047ac0 	call	47ac <__mulsi3>
    3e18:	8080042e 	bgeu	r16,r2,3e2c <__udivdi3+0x3f4>
    3e1c:	8721883a 	add	r16,r16,fp
    3e20:	88ffffc4 	addi	r3,r17,-1
    3e24:	8700712e 	bgeu	r16,fp,3fec <__udivdi3+0x5b4>
    3e28:	1823883a 	mov	r17,r3
    3e2c:	a80e943a 	slli	r7,r21,16
    3e30:	d8c00017 	ldw	r3,0(sp)
    3e34:	80a1c83a 	sub	r16,r16,r2
    3e38:	3c64b03a 	or	r18,r7,r17
    3e3c:	1d3fffcc 	andi	r20,r3,65535
    3e40:	9022d43a 	srli	r17,r18,16
    3e44:	95bfffcc 	andi	r22,r18,65535
    3e48:	a00b883a 	mov	r5,r20
    3e4c:	b009883a 	mov	r4,r22
    3e50:	182ad43a 	srli	r21,r3,16
    3e54:	00047ac0 	call	47ac <__mulsi3>
    3e58:	a00b883a 	mov	r5,r20
    3e5c:	8809883a 	mov	r4,r17
    3e60:	1039883a 	mov	fp,r2
    3e64:	00047ac0 	call	47ac <__mulsi3>
    3e68:	8809883a 	mov	r4,r17
    3e6c:	a80b883a 	mov	r5,r21
    3e70:	1029883a 	mov	r20,r2
    3e74:	00047ac0 	call	47ac <__mulsi3>
    3e78:	a80b883a 	mov	r5,r21
    3e7c:	b009883a 	mov	r4,r22
    3e80:	1023883a 	mov	r17,r2
    3e84:	00047ac0 	call	47ac <__mulsi3>
    3e88:	e006d43a 	srli	r3,fp,16
    3e8c:	1505883a 	add	r2,r2,r20
    3e90:	1887883a 	add	r3,r3,r2
    3e94:	1d00022e 	bgeu	r3,r20,3ea0 <__udivdi3+0x468>
    3e98:	00800074 	movhi	r2,1
    3e9c:	88a3883a 	add	r17,r17,r2
    3ea0:	1804d43a 	srli	r2,r3,16
    3ea4:	1463883a 	add	r17,r2,r17
    3ea8:	84404436 	bltu	r16,r17,3fbc <__udivdi3+0x584>
    3eac:	84403e26 	beq	r16,r17,3fa8 <__udivdi3+0x570>
    3eb0:	9005883a 	mov	r2,r18
    3eb4:	0007883a 	mov	r3,zero
    3eb8:	003f9106 	br	3d00 <__ram_exceptions_end+0xfe001ce0>
    3ebc:	88e2983a 	sll	r17,r17,r3
    3ec0:	80aed83a 	srl	r23,r16,r2
    3ec4:	80e0983a 	sll	r16,r16,r3
    3ec8:	882ad43a 	srli	r21,r17,16
    3ecc:	9884d83a 	srl	r2,r19,r2
    3ed0:	b809883a 	mov	r4,r23
    3ed4:	a80b883a 	mov	r5,r21
    3ed8:	98e4983a 	sll	r18,r19,r3
    3edc:	142cb03a 	or	r22,r2,r16
    3ee0:	00047540 	call	4754 <__umodsi3>
    3ee4:	b809883a 	mov	r4,r23
    3ee8:	a80b883a 	mov	r5,r21
    3eec:	1027883a 	mov	r19,r2
    3ef0:	8d3fffcc 	andi	r20,r17,65535
    3ef4:	00046f00 	call	46f0 <__udivsi3>
    3ef8:	a009883a 	mov	r4,r20
    3efc:	100b883a 	mov	r5,r2
    3f00:	102f883a 	mov	r23,r2
    3f04:	00047ac0 	call	47ac <__mulsi3>
    3f08:	9826943a 	slli	r19,r19,16
    3f0c:	b008d43a 	srli	r4,r22,16
    3f10:	24c8b03a 	or	r4,r4,r19
    3f14:	2080062e 	bgeu	r4,r2,3f30 <__udivdi3+0x4f8>
    3f18:	2449883a 	add	r4,r4,r17
    3f1c:	b8ffffc4 	addi	r3,r23,-1
    3f20:	24403c36 	bltu	r4,r17,4014 <__udivdi3+0x5dc>
    3f24:	20803b2e 	bgeu	r4,r2,4014 <__udivdi3+0x5dc>
    3f28:	bdffff84 	addi	r23,r23,-2
    3f2c:	2449883a 	add	r4,r4,r17
    3f30:	20a1c83a 	sub	r16,r4,r2
    3f34:	a80b883a 	mov	r5,r21
    3f38:	8009883a 	mov	r4,r16
    3f3c:	00047540 	call	4754 <__umodsi3>
    3f40:	a80b883a 	mov	r5,r21
    3f44:	8009883a 	mov	r4,r16
    3f48:	1027883a 	mov	r19,r2
    3f4c:	00046f00 	call	46f0 <__udivsi3>
    3f50:	a009883a 	mov	r4,r20
    3f54:	100b883a 	mov	r5,r2
    3f58:	9826943a 	slli	r19,r19,16
    3f5c:	1039883a 	mov	fp,r2
    3f60:	00047ac0 	call	47ac <__mulsi3>
    3f64:	b13fffcc 	andi	r4,r22,65535
    3f68:	24c8b03a 	or	r4,r4,r19
    3f6c:	2080062e 	bgeu	r4,r2,3f88 <__udivdi3+0x550>
    3f70:	2449883a 	add	r4,r4,r17
    3f74:	e0ffffc4 	addi	r3,fp,-1
    3f78:	24402436 	bltu	r4,r17,400c <__udivdi3+0x5d4>
    3f7c:	2080232e 	bgeu	r4,r2,400c <__udivdi3+0x5d4>
    3f80:	e73fff84 	addi	fp,fp,-2
    3f84:	2449883a 	add	r4,r4,r17
    3f88:	b82e943a 	slli	r23,r23,16
    3f8c:	20a1c83a 	sub	r16,r4,r2
    3f90:	bf06b03a 	or	r3,r23,fp
    3f94:	003f2806 	br	3c38 <__ram_exceptions_end+0xfe001c18>
    3f98:	2021883a 	mov	r16,r4
    3f9c:	003f5306 	br	3cec <__ram_exceptions_end+0xfe001ccc>
    3fa0:	1821883a 	mov	r16,r3
    3fa4:	003ef406 	br	3b78 <__ram_exceptions_end+0xfe001b58>
    3fa8:	1806943a 	slli	r3,r3,16
    3fac:	9de6983a 	sll	r19,r19,r23
    3fb0:	e73fffcc 	andi	fp,fp,65535
    3fb4:	1f07883a 	add	r3,r3,fp
    3fb8:	98ffbd2e 	bgeu	r19,r3,3eb0 <__ram_exceptions_end+0xfe001e90>
    3fbc:	90bfffc4 	addi	r2,r18,-1
    3fc0:	0007883a 	mov	r3,zero
    3fc4:	003f4e06 	br	3d00 <__ram_exceptions_end+0xfe001ce0>
    3fc8:	00800604 	movi	r2,24
    3fcc:	003ef506 	br	3ba4 <__ram_exceptions_end+0xfe001b84>
    3fd0:	00800604 	movi	r2,24
    3fd4:	003f0b06 	br	3c04 <__ram_exceptions_end+0xfe001be4>
    3fd8:	00800604 	movi	r2,24
    3fdc:	003ead06 	br	3a94 <__ram_exceptions_end+0xfe001a74>
    3fe0:	0007883a 	mov	r3,zero
    3fe4:	00800044 	movi	r2,1
    3fe8:	003f4506 	br	3d00 <__ram_exceptions_end+0xfe001ce0>
    3fec:	80bf8e2e 	bgeu	r16,r2,3e28 <__ram_exceptions_end+0xfe001e08>
    3ff0:	8c7fff84 	addi	r17,r17,-2
    3ff4:	8721883a 	add	r16,r16,fp
    3ff8:	003f8c06 	br	3e2c <__ram_exceptions_end+0xfe001e0c>
    3ffc:	18bf762e 	bgeu	r3,r2,3dd8 <__ram_exceptions_end+0xfe001db8>
    4000:	ad7fff84 	addi	r21,r21,-2
    4004:	1f07883a 	add	r3,r3,fp
    4008:	003f7406 	br	3ddc <__ram_exceptions_end+0xfe001dbc>
    400c:	1839883a 	mov	fp,r3
    4010:	003fdd06 	br	3f88 <__ram_exceptions_end+0xfe001f68>
    4014:	182f883a 	mov	r23,r3
    4018:	003fc506 	br	3f30 <__ram_exceptions_end+0xfe001f10>
    401c:	b5bfff84 	addi	r22,r22,-2
    4020:	3c4f883a 	add	r7,r7,r17
    4024:	003f1a06 	br	3c90 <__ram_exceptions_end+0xfe001c70>
    4028:	b5bfff84 	addi	r22,r22,-2
    402c:	1c47883a 	add	r3,r3,r17
    4030:	003ebc06 	br	3b24 <__ram_exceptions_end+0xfe001b04>

00004034 <__umoddi3>:
    4034:	defff304 	addi	sp,sp,-52
    4038:	df000b15 	stw	fp,44(sp)
    403c:	dc400415 	stw	r17,16(sp)
    4040:	dc000315 	stw	r16,12(sp)
    4044:	dfc00c15 	stw	ra,48(sp)
    4048:	ddc00a15 	stw	r23,40(sp)
    404c:	dd800915 	stw	r22,36(sp)
    4050:	dd400815 	stw	r21,32(sp)
    4054:	dd000715 	stw	r20,28(sp)
    4058:	dcc00615 	stw	r19,24(sp)
    405c:	dc800515 	stw	r18,20(sp)
    4060:	2021883a 	mov	r16,r4
    4064:	2823883a 	mov	r17,r5
    4068:	2839883a 	mov	fp,r5
    406c:	3800401e 	bne	r7,zero,4170 <__umoddi3+0x13c>
    4070:	3027883a 	mov	r19,r6
    4074:	2029883a 	mov	r20,r4
    4078:	2980552e 	bgeu	r5,r6,41d0 <__umoddi3+0x19c>
    407c:	00bfffd4 	movui	r2,65535
    4080:	1180a236 	bltu	r2,r6,430c <__umoddi3+0x2d8>
    4084:	01003fc4 	movi	r4,255
    4088:	2189803a 	cmpltu	r4,r4,r6
    408c:	200890fa 	slli	r4,r4,3
    4090:	3104d83a 	srl	r2,r6,r4
    4094:	00c00074 	movhi	r3,1
    4098:	18e30f04 	addi	r3,r3,-29636
    409c:	1885883a 	add	r2,r3,r2
    40a0:	10c00003 	ldbu	r3,0(r2)
    40a4:	00800804 	movi	r2,32
    40a8:	1909883a 	add	r4,r3,r4
    40ac:	1125c83a 	sub	r18,r2,r4
    40b0:	90000526 	beq	r18,zero,40c8 <__umoddi3+0x94>
    40b4:	8ca2983a 	sll	r17,r17,r18
    40b8:	8108d83a 	srl	r4,r16,r4
    40bc:	34a6983a 	sll	r19,r6,r18
    40c0:	84a8983a 	sll	r20,r16,r18
    40c4:	2478b03a 	or	fp,r4,r17
    40c8:	982cd43a 	srli	r22,r19,16
    40cc:	e009883a 	mov	r4,fp
    40d0:	9dffffcc 	andi	r23,r19,65535
    40d4:	b00b883a 	mov	r5,r22
    40d8:	00047540 	call	4754 <__umodsi3>
    40dc:	b00b883a 	mov	r5,r22
    40e0:	e009883a 	mov	r4,fp
    40e4:	102b883a 	mov	r21,r2
    40e8:	00046f00 	call	46f0 <__udivsi3>
    40ec:	100b883a 	mov	r5,r2
    40f0:	b809883a 	mov	r4,r23
    40f4:	00047ac0 	call	47ac <__mulsi3>
    40f8:	a82a943a 	slli	r21,r21,16
    40fc:	a006d43a 	srli	r3,r20,16
    4100:	1d46b03a 	or	r3,r3,r21
    4104:	1880032e 	bgeu	r3,r2,4114 <__umoddi3+0xe0>
    4108:	1cc7883a 	add	r3,r3,r19
    410c:	1cc00136 	bltu	r3,r19,4114 <__umoddi3+0xe0>
    4110:	18813136 	bltu	r3,r2,45d8 <__umoddi3+0x5a4>
    4114:	18a1c83a 	sub	r16,r3,r2
    4118:	b00b883a 	mov	r5,r22
    411c:	8009883a 	mov	r4,r16
    4120:	00047540 	call	4754 <__umodsi3>
    4124:	b00b883a 	mov	r5,r22
    4128:	8009883a 	mov	r4,r16
    412c:	1023883a 	mov	r17,r2
    4130:	00046f00 	call	46f0 <__udivsi3>
    4134:	100b883a 	mov	r5,r2
    4138:	b809883a 	mov	r4,r23
    413c:	8822943a 	slli	r17,r17,16
    4140:	00047ac0 	call	47ac <__mulsi3>
    4144:	a0ffffcc 	andi	r3,r20,65535
    4148:	1c46b03a 	or	r3,r3,r17
    414c:	1880042e 	bgeu	r3,r2,4160 <__umoddi3+0x12c>
    4150:	1cc7883a 	add	r3,r3,r19
    4154:	1cc00236 	bltu	r3,r19,4160 <__umoddi3+0x12c>
    4158:	1880012e 	bgeu	r3,r2,4160 <__umoddi3+0x12c>
    415c:	1cc7883a 	add	r3,r3,r19
    4160:	1885c83a 	sub	r2,r3,r2
    4164:	1484d83a 	srl	r2,r2,r18
    4168:	0007883a 	mov	r3,zero
    416c:	00005306 	br	42bc <__umoddi3+0x288>
    4170:	29c05036 	bltu	r5,r7,42b4 <__umoddi3+0x280>
    4174:	00bfffd4 	movui	r2,65535
    4178:	11c05c2e 	bgeu	r2,r7,42ec <__umoddi3+0x2b8>
    417c:	00804034 	movhi	r2,256
    4180:	10bfffc4 	addi	r2,r2,-1
    4184:	11c10636 	bltu	r2,r7,45a0 <__umoddi3+0x56c>
    4188:	01000404 	movi	r4,16
    418c:	3904d83a 	srl	r2,r7,r4
    4190:	00c00074 	movhi	r3,1
    4194:	18e30f04 	addi	r3,r3,-29636
    4198:	1885883a 	add	r2,r3,r2
    419c:	14c00003 	ldbu	r19,0(r2)
    41a0:	00c00804 	movi	r3,32
    41a4:	9927883a 	add	r19,r19,r4
    41a8:	1ce9c83a 	sub	r20,r3,r19
    41ac:	a0005c1e 	bne	r20,zero,4320 <__umoddi3+0x2ec>
    41b0:	3c400136 	bltu	r7,r17,41b8 <__umoddi3+0x184>
    41b4:	81810a36 	bltu	r16,r6,45e0 <__umoddi3+0x5ac>
    41b8:	8185c83a 	sub	r2,r16,r6
    41bc:	89e3c83a 	sub	r17,r17,r7
    41c0:	8089803a 	cmpltu	r4,r16,r2
    41c4:	8939c83a 	sub	fp,r17,r4
    41c8:	e007883a 	mov	r3,fp
    41cc:	00003b06 	br	42bc <__umoddi3+0x288>
    41d0:	3000041e 	bne	r6,zero,41e4 <__umoddi3+0x1b0>
    41d4:	000b883a 	mov	r5,zero
    41d8:	01000044 	movi	r4,1
    41dc:	00046f00 	call	46f0 <__udivsi3>
    41e0:	1027883a 	mov	r19,r2
    41e4:	00bfffd4 	movui	r2,65535
    41e8:	14c0442e 	bgeu	r2,r19,42fc <__umoddi3+0x2c8>
    41ec:	00804034 	movhi	r2,256
    41f0:	10bfffc4 	addi	r2,r2,-1
    41f4:	14c0ec36 	bltu	r2,r19,45a8 <__umoddi3+0x574>
    41f8:	00800404 	movi	r2,16
    41fc:	9886d83a 	srl	r3,r19,r2
    4200:	01000074 	movhi	r4,1
    4204:	21230f04 	addi	r4,r4,-29636
    4208:	20c7883a 	add	r3,r4,r3
    420c:	18c00003 	ldbu	r3,0(r3)
    4210:	1887883a 	add	r3,r3,r2
    4214:	00800804 	movi	r2,32
    4218:	10e5c83a 	sub	r18,r2,r3
    421c:	9000ab1e 	bne	r18,zero,44cc <__umoddi3+0x498>
    4220:	982cd43a 	srli	r22,r19,16
    4224:	8ce3c83a 	sub	r17,r17,r19
    4228:	9dffffcc 	andi	r23,r19,65535
    422c:	b00b883a 	mov	r5,r22
    4230:	8809883a 	mov	r4,r17
    4234:	00047540 	call	4754 <__umodsi3>
    4238:	b00b883a 	mov	r5,r22
    423c:	8809883a 	mov	r4,r17
    4240:	102b883a 	mov	r21,r2
    4244:	00046f00 	call	46f0 <__udivsi3>
    4248:	b80b883a 	mov	r5,r23
    424c:	1009883a 	mov	r4,r2
    4250:	00047ac0 	call	47ac <__mulsi3>
    4254:	a82a943a 	slli	r21,r21,16
    4258:	a006d43a 	srli	r3,r20,16
    425c:	1d46b03a 	or	r3,r3,r21
    4260:	1880042e 	bgeu	r3,r2,4274 <__umoddi3+0x240>
    4264:	1cc7883a 	add	r3,r3,r19
    4268:	1cc00236 	bltu	r3,r19,4274 <__umoddi3+0x240>
    426c:	1880012e 	bgeu	r3,r2,4274 <__umoddi3+0x240>
    4270:	1cc7883a 	add	r3,r3,r19
    4274:	18a1c83a 	sub	r16,r3,r2
    4278:	b00b883a 	mov	r5,r22
    427c:	8009883a 	mov	r4,r16
    4280:	00047540 	call	4754 <__umodsi3>
    4284:	1023883a 	mov	r17,r2
    4288:	b00b883a 	mov	r5,r22
    428c:	8009883a 	mov	r4,r16
    4290:	00046f00 	call	46f0 <__udivsi3>
    4294:	8822943a 	slli	r17,r17,16
    4298:	b80b883a 	mov	r5,r23
    429c:	1009883a 	mov	r4,r2
    42a0:	00047ac0 	call	47ac <__mulsi3>
    42a4:	a53fffcc 	andi	r20,r20,65535
    42a8:	a446b03a 	or	r3,r20,r17
    42ac:	18bfac2e 	bgeu	r3,r2,4160 <__ram_exceptions_end+0xfe002140>
    42b0:	003fa706 	br	4150 <__ram_exceptions_end+0xfe002130>
    42b4:	2005883a 	mov	r2,r4
    42b8:	2807883a 	mov	r3,r5
    42bc:	dfc00c17 	ldw	ra,48(sp)
    42c0:	df000b17 	ldw	fp,44(sp)
    42c4:	ddc00a17 	ldw	r23,40(sp)
    42c8:	dd800917 	ldw	r22,36(sp)
    42cc:	dd400817 	ldw	r21,32(sp)
    42d0:	dd000717 	ldw	r20,28(sp)
    42d4:	dcc00617 	ldw	r19,24(sp)
    42d8:	dc800517 	ldw	r18,20(sp)
    42dc:	dc400417 	ldw	r17,16(sp)
    42e0:	dc000317 	ldw	r16,12(sp)
    42e4:	dec00d04 	addi	sp,sp,52
    42e8:	f800283a 	ret
    42ec:	04c03fc4 	movi	r19,255
    42f0:	99c9803a 	cmpltu	r4,r19,r7
    42f4:	200890fa 	slli	r4,r4,3
    42f8:	003fa406 	br	418c <__ram_exceptions_end+0xfe00216c>
    42fc:	00803fc4 	movi	r2,255
    4300:	14c5803a 	cmpltu	r2,r2,r19
    4304:	100490fa 	slli	r2,r2,3
    4308:	003fbc06 	br	41fc <__ram_exceptions_end+0xfe0021dc>
    430c:	00804034 	movhi	r2,256
    4310:	10bfffc4 	addi	r2,r2,-1
    4314:	1180a636 	bltu	r2,r6,45b0 <__umoddi3+0x57c>
    4318:	01000404 	movi	r4,16
    431c:	003f5c06 	br	4090 <__ram_exceptions_end+0xfe002070>
    4320:	3d0e983a 	sll	r7,r7,r20
    4324:	34ead83a 	srl	r21,r6,r19
    4328:	8cc6d83a 	srl	r3,r17,r19
    432c:	8d10983a 	sll	r8,r17,r20
    4330:	3d6ab03a 	or	r21,r7,r21
    4334:	a82cd43a 	srli	r22,r21,16
    4338:	84e2d83a 	srl	r17,r16,r19
    433c:	1809883a 	mov	r4,r3
    4340:	b00b883a 	mov	r5,r22
    4344:	8a22b03a 	or	r17,r17,r8
    4348:	3524983a 	sll	r18,r6,r20
    434c:	dc400015 	stw	r17,0(sp)
    4350:	d8c00115 	stw	r3,4(sp)
    4354:	00047540 	call	4754 <__umodsi3>
    4358:	d8c00117 	ldw	r3,4(sp)
    435c:	b00b883a 	mov	r5,r22
    4360:	1039883a 	mov	fp,r2
    4364:	1809883a 	mov	r4,r3
    4368:	00046f00 	call	46f0 <__udivsi3>
    436c:	adffffcc 	andi	r23,r21,65535
    4370:	100b883a 	mov	r5,r2
    4374:	b809883a 	mov	r4,r23
    4378:	1023883a 	mov	r17,r2
    437c:	00047ac0 	call	47ac <__mulsi3>
    4380:	d9400017 	ldw	r5,0(sp)
    4384:	e008943a 	slli	r4,fp,16
    4388:	8520983a 	sll	r16,r16,r20
    438c:	2806d43a 	srli	r3,r5,16
    4390:	1906b03a 	or	r3,r3,r4
    4394:	1880042e 	bgeu	r3,r2,43a8 <__umoddi3+0x374>
    4398:	1d47883a 	add	r3,r3,r21
    439c:	893fffc4 	addi	r4,r17,-1
    43a0:	1d40892e 	bgeu	r3,r21,45c8 <__umoddi3+0x594>
    43a4:	2023883a 	mov	r17,r4
    43a8:	18b9c83a 	sub	fp,r3,r2
    43ac:	b00b883a 	mov	r5,r22
    43b0:	e009883a 	mov	r4,fp
    43b4:	00047540 	call	4754 <__umodsi3>
    43b8:	b00b883a 	mov	r5,r22
    43bc:	e009883a 	mov	r4,fp
    43c0:	d8800215 	stw	r2,8(sp)
    43c4:	00046f00 	call	46f0 <__udivsi3>
    43c8:	100b883a 	mov	r5,r2
    43cc:	b809883a 	mov	r4,r23
    43d0:	102d883a 	mov	r22,r2
    43d4:	00047ac0 	call	47ac <__mulsi3>
    43d8:	d9800217 	ldw	r6,8(sp)
    43dc:	d8c00017 	ldw	r3,0(sp)
    43e0:	300c943a 	slli	r6,r6,16
    43e4:	1a3fffcc 	andi	r8,r3,65535
    43e8:	4190b03a 	or	r8,r8,r6
    43ec:	4080042e 	bgeu	r8,r2,4400 <__umoddi3+0x3cc>
    43f0:	4551883a 	add	r8,r8,r21
    43f4:	b0ffffc4 	addi	r3,r22,-1
    43f8:	45406f2e 	bgeu	r8,r21,45b8 <__umoddi3+0x584>
    43fc:	182d883a 	mov	r22,r3
    4400:	880e943a 	slli	r7,r17,16
    4404:	9006d43a 	srli	r3,r18,16
    4408:	91bfffcc 	andi	r6,r18,65535
    440c:	3dacb03a 	or	r22,r7,r22
    4410:	b02ed43a 	srli	r23,r22,16
    4414:	b5bfffcc 	andi	r22,r22,65535
    4418:	300b883a 	mov	r5,r6
    441c:	b009883a 	mov	r4,r22
    4420:	40a3c83a 	sub	r17,r8,r2
    4424:	d8c00115 	stw	r3,4(sp)
    4428:	d9800215 	stw	r6,8(sp)
    442c:	00047ac0 	call	47ac <__mulsi3>
    4430:	d9800217 	ldw	r6,8(sp)
    4434:	b809883a 	mov	r4,r23
    4438:	1039883a 	mov	fp,r2
    443c:	300b883a 	mov	r5,r6
    4440:	00047ac0 	call	47ac <__mulsi3>
    4444:	d8c00117 	ldw	r3,4(sp)
    4448:	b809883a 	mov	r4,r23
    444c:	d8800215 	stw	r2,8(sp)
    4450:	180b883a 	mov	r5,r3
    4454:	00047ac0 	call	47ac <__mulsi3>
    4458:	d8c00117 	ldw	r3,4(sp)
    445c:	b009883a 	mov	r4,r22
    4460:	102f883a 	mov	r23,r2
    4464:	180b883a 	mov	r5,r3
    4468:	00047ac0 	call	47ac <__mulsi3>
    446c:	d9800217 	ldw	r6,8(sp)
    4470:	e006d43a 	srli	r3,fp,16
    4474:	1185883a 	add	r2,r2,r6
    4478:	1885883a 	add	r2,r3,r2
    447c:	1180022e 	bgeu	r2,r6,4488 <__umoddi3+0x454>
    4480:	00c00074 	movhi	r3,1
    4484:	b8ef883a 	add	r23,r23,r3
    4488:	1006d43a 	srli	r3,r2,16
    448c:	1004943a 	slli	r2,r2,16
    4490:	e73fffcc 	andi	fp,fp,65535
    4494:	1dc7883a 	add	r3,r3,r23
    4498:	1739883a 	add	fp,r2,fp
    449c:	88c03a36 	bltu	r17,r3,4588 <__umoddi3+0x554>
    44a0:	88c05126 	beq	r17,r3,45e8 <__umoddi3+0x5b4>
    44a4:	88c9c83a 	sub	r4,r17,r3
    44a8:	e00f883a 	mov	r7,fp
    44ac:	81cfc83a 	sub	r7,r16,r7
    44b0:	81c7803a 	cmpltu	r3,r16,r7
    44b4:	20c7c83a 	sub	r3,r4,r3
    44b8:	1cc4983a 	sll	r2,r3,r19
    44bc:	3d0ed83a 	srl	r7,r7,r20
    44c0:	1d06d83a 	srl	r3,r3,r20
    44c4:	11c4b03a 	or	r2,r2,r7
    44c8:	003f7c06 	br	42bc <__ram_exceptions_end+0xfe00229c>
    44cc:	9ca6983a 	sll	r19,r19,r18
    44d0:	88f8d83a 	srl	fp,r17,r3
    44d4:	80c4d83a 	srl	r2,r16,r3
    44d8:	982cd43a 	srli	r22,r19,16
    44dc:	8ca2983a 	sll	r17,r17,r18
    44e0:	e009883a 	mov	r4,fp
    44e4:	b00b883a 	mov	r5,r22
    44e8:	146ab03a 	or	r21,r2,r17
    44ec:	00047540 	call	4754 <__umodsi3>
    44f0:	b00b883a 	mov	r5,r22
    44f4:	e009883a 	mov	r4,fp
    44f8:	1029883a 	mov	r20,r2
    44fc:	9dffffcc 	andi	r23,r19,65535
    4500:	00046f00 	call	46f0 <__udivsi3>
    4504:	b809883a 	mov	r4,r23
    4508:	100b883a 	mov	r5,r2
    450c:	00047ac0 	call	47ac <__mulsi3>
    4510:	a008943a 	slli	r4,r20,16
    4514:	a806d43a 	srli	r3,r21,16
    4518:	84a8983a 	sll	r20,r16,r18
    451c:	1906b03a 	or	r3,r3,r4
    4520:	1880042e 	bgeu	r3,r2,4534 <__umoddi3+0x500>
    4524:	1cc7883a 	add	r3,r3,r19
    4528:	1cc00236 	bltu	r3,r19,4534 <__umoddi3+0x500>
    452c:	1880012e 	bgeu	r3,r2,4534 <__umoddi3+0x500>
    4530:	1cc7883a 	add	r3,r3,r19
    4534:	18a3c83a 	sub	r17,r3,r2
    4538:	b00b883a 	mov	r5,r22
    453c:	8809883a 	mov	r4,r17
    4540:	00047540 	call	4754 <__umodsi3>
    4544:	b00b883a 	mov	r5,r22
    4548:	8809883a 	mov	r4,r17
    454c:	1021883a 	mov	r16,r2
    4550:	00046f00 	call	46f0 <__udivsi3>
    4554:	100b883a 	mov	r5,r2
    4558:	b809883a 	mov	r4,r23
    455c:	8020943a 	slli	r16,r16,16
    4560:	00047ac0 	call	47ac <__mulsi3>
    4564:	a8ffffcc 	andi	r3,r21,65535
    4568:	1c06b03a 	or	r3,r3,r16
    456c:	1880042e 	bgeu	r3,r2,4580 <__umoddi3+0x54c>
    4570:	1cc7883a 	add	r3,r3,r19
    4574:	1cc00236 	bltu	r3,r19,4580 <__umoddi3+0x54c>
    4578:	1880012e 	bgeu	r3,r2,4580 <__umoddi3+0x54c>
    457c:	1cc7883a 	add	r3,r3,r19
    4580:	18a3c83a 	sub	r17,r3,r2
    4584:	003f2906 	br	422c <__ram_exceptions_end+0xfe00220c>
    4588:	e48fc83a 	sub	r7,fp,r18
    458c:	1d49c83a 	sub	r4,r3,r21
    4590:	e1f9803a 	cmpltu	fp,fp,r7
    4594:	2739c83a 	sub	fp,r4,fp
    4598:	8f09c83a 	sub	r4,r17,fp
    459c:	003fc306 	br	44ac <__ram_exceptions_end+0xfe00248c>
    45a0:	01000604 	movi	r4,24
    45a4:	003ef906 	br	418c <__ram_exceptions_end+0xfe00216c>
    45a8:	00800604 	movi	r2,24
    45ac:	003f1306 	br	41fc <__ram_exceptions_end+0xfe0021dc>
    45b0:	01000604 	movi	r4,24
    45b4:	003eb606 	br	4090 <__ram_exceptions_end+0xfe002070>
    45b8:	40bf902e 	bgeu	r8,r2,43fc <__ram_exceptions_end+0xfe0023dc>
    45bc:	b5bfff84 	addi	r22,r22,-2
    45c0:	4551883a 	add	r8,r8,r21
    45c4:	003f8e06 	br	4400 <__ram_exceptions_end+0xfe0023e0>
    45c8:	18bf762e 	bgeu	r3,r2,43a4 <__ram_exceptions_end+0xfe002384>
    45cc:	8c7fff84 	addi	r17,r17,-2
    45d0:	1d47883a 	add	r3,r3,r21
    45d4:	003f7406 	br	43a8 <__ram_exceptions_end+0xfe002388>
    45d8:	1cc7883a 	add	r3,r3,r19
    45dc:	003ecd06 	br	4114 <__ram_exceptions_end+0xfe0020f4>
    45e0:	8005883a 	mov	r2,r16
    45e4:	003ef806 	br	41c8 <__ram_exceptions_end+0xfe0021a8>
    45e8:	873fe736 	bltu	r16,fp,4588 <__ram_exceptions_end+0xfe002568>
    45ec:	e00f883a 	mov	r7,fp
    45f0:	0009883a 	mov	r4,zero
    45f4:	003fad06 	br	44ac <__ram_exceptions_end+0xfe00248c>

000045f8 <__divsi3>:
    45f8:	20001b16 	blt	r4,zero,4668 <__divsi3+0x70>
    45fc:	000f883a 	mov	r7,zero
    4600:	28001616 	blt	r5,zero,465c <__divsi3+0x64>
    4604:	200d883a 	mov	r6,r4
    4608:	29001a2e 	bgeu	r5,r4,4674 <__divsi3+0x7c>
    460c:	00800804 	movi	r2,32
    4610:	00c00044 	movi	r3,1
    4614:	00000106 	br	461c <__divsi3+0x24>
    4618:	10000d26 	beq	r2,zero,4650 <__divsi3+0x58>
    461c:	294b883a 	add	r5,r5,r5
    4620:	10bfffc4 	addi	r2,r2,-1
    4624:	18c7883a 	add	r3,r3,r3
    4628:	293ffb36 	bltu	r5,r4,4618 <__ram_exceptions_end+0xfe0025f8>
    462c:	0005883a 	mov	r2,zero
    4630:	18000726 	beq	r3,zero,4650 <__divsi3+0x58>
    4634:	0005883a 	mov	r2,zero
    4638:	31400236 	bltu	r6,r5,4644 <__divsi3+0x4c>
    463c:	314dc83a 	sub	r6,r6,r5
    4640:	10c4b03a 	or	r2,r2,r3
    4644:	1806d07a 	srli	r3,r3,1
    4648:	280ad07a 	srli	r5,r5,1
    464c:	183ffa1e 	bne	r3,zero,4638 <__ram_exceptions_end+0xfe002618>
    4650:	38000126 	beq	r7,zero,4658 <__divsi3+0x60>
    4654:	0085c83a 	sub	r2,zero,r2
    4658:	f800283a 	ret
    465c:	014bc83a 	sub	r5,zero,r5
    4660:	39c0005c 	xori	r7,r7,1
    4664:	003fe706 	br	4604 <__ram_exceptions_end+0xfe0025e4>
    4668:	0109c83a 	sub	r4,zero,r4
    466c:	01c00044 	movi	r7,1
    4670:	003fe306 	br	4600 <__ram_exceptions_end+0xfe0025e0>
    4674:	00c00044 	movi	r3,1
    4678:	003fee06 	br	4634 <__ram_exceptions_end+0xfe002614>

0000467c <__modsi3>:
    467c:	20001716 	blt	r4,zero,46dc <__modsi3+0x60>
    4680:	000f883a 	mov	r7,zero
    4684:	2005883a 	mov	r2,r4
    4688:	28001216 	blt	r5,zero,46d4 <__modsi3+0x58>
    468c:	2900162e 	bgeu	r5,r4,46e8 <__modsi3+0x6c>
    4690:	01800804 	movi	r6,32
    4694:	00c00044 	movi	r3,1
    4698:	00000106 	br	46a0 <__modsi3+0x24>
    469c:	30000a26 	beq	r6,zero,46c8 <__modsi3+0x4c>
    46a0:	294b883a 	add	r5,r5,r5
    46a4:	31bfffc4 	addi	r6,r6,-1
    46a8:	18c7883a 	add	r3,r3,r3
    46ac:	293ffb36 	bltu	r5,r4,469c <__ram_exceptions_end+0xfe00267c>
    46b0:	18000526 	beq	r3,zero,46c8 <__modsi3+0x4c>
    46b4:	1806d07a 	srli	r3,r3,1
    46b8:	11400136 	bltu	r2,r5,46c0 <__modsi3+0x44>
    46bc:	1145c83a 	sub	r2,r2,r5
    46c0:	280ad07a 	srli	r5,r5,1
    46c4:	183ffb1e 	bne	r3,zero,46b4 <__ram_exceptions_end+0xfe002694>
    46c8:	38000126 	beq	r7,zero,46d0 <__modsi3+0x54>
    46cc:	0085c83a 	sub	r2,zero,r2
    46d0:	f800283a 	ret
    46d4:	014bc83a 	sub	r5,zero,r5
    46d8:	003fec06 	br	468c <__ram_exceptions_end+0xfe00266c>
    46dc:	0109c83a 	sub	r4,zero,r4
    46e0:	01c00044 	movi	r7,1
    46e4:	003fe706 	br	4684 <__ram_exceptions_end+0xfe002664>
    46e8:	00c00044 	movi	r3,1
    46ec:	003ff106 	br	46b4 <__ram_exceptions_end+0xfe002694>

000046f0 <__udivsi3>:
    46f0:	200d883a 	mov	r6,r4
    46f4:	2900152e 	bgeu	r5,r4,474c <__udivsi3+0x5c>
    46f8:	28001416 	blt	r5,zero,474c <__udivsi3+0x5c>
    46fc:	00800804 	movi	r2,32
    4700:	00c00044 	movi	r3,1
    4704:	00000206 	br	4710 <__udivsi3+0x20>
    4708:	10000e26 	beq	r2,zero,4744 <__udivsi3+0x54>
    470c:	28000516 	blt	r5,zero,4724 <__udivsi3+0x34>
    4710:	294b883a 	add	r5,r5,r5
    4714:	10bfffc4 	addi	r2,r2,-1
    4718:	18c7883a 	add	r3,r3,r3
    471c:	293ffa36 	bltu	r5,r4,4708 <__ram_exceptions_end+0xfe0026e8>
    4720:	18000826 	beq	r3,zero,4744 <__udivsi3+0x54>
    4724:	0005883a 	mov	r2,zero
    4728:	31400236 	bltu	r6,r5,4734 <__udivsi3+0x44>
    472c:	314dc83a 	sub	r6,r6,r5
    4730:	10c4b03a 	or	r2,r2,r3
    4734:	1806d07a 	srli	r3,r3,1
    4738:	280ad07a 	srli	r5,r5,1
    473c:	183ffa1e 	bne	r3,zero,4728 <__ram_exceptions_end+0xfe002708>
    4740:	f800283a 	ret
    4744:	0005883a 	mov	r2,zero
    4748:	f800283a 	ret
    474c:	00c00044 	movi	r3,1
    4750:	003ff406 	br	4724 <__ram_exceptions_end+0xfe002704>

00004754 <__umodsi3>:
    4754:	2005883a 	mov	r2,r4
    4758:	2900122e 	bgeu	r5,r4,47a4 <__umodsi3+0x50>
    475c:	28001116 	blt	r5,zero,47a4 <__umodsi3+0x50>
    4760:	01800804 	movi	r6,32
    4764:	00c00044 	movi	r3,1
    4768:	00000206 	br	4774 <__umodsi3+0x20>
    476c:	30000c26 	beq	r6,zero,47a0 <__umodsi3+0x4c>
    4770:	28000516 	blt	r5,zero,4788 <__umodsi3+0x34>
    4774:	294b883a 	add	r5,r5,r5
    4778:	31bfffc4 	addi	r6,r6,-1
    477c:	18c7883a 	add	r3,r3,r3
    4780:	293ffa36 	bltu	r5,r4,476c <__ram_exceptions_end+0xfe00274c>
    4784:	18000626 	beq	r3,zero,47a0 <__umodsi3+0x4c>
    4788:	1806d07a 	srli	r3,r3,1
    478c:	11400136 	bltu	r2,r5,4794 <__umodsi3+0x40>
    4790:	1145c83a 	sub	r2,r2,r5
    4794:	280ad07a 	srli	r5,r5,1
    4798:	183ffb1e 	bne	r3,zero,4788 <__ram_exceptions_end+0xfe002768>
    479c:	f800283a 	ret
    47a0:	f800283a 	ret
    47a4:	00c00044 	movi	r3,1
    47a8:	003ff706 	br	4788 <__ram_exceptions_end+0xfe002768>

000047ac <__mulsi3>:
    47ac:	0005883a 	mov	r2,zero
    47b0:	20000726 	beq	r4,zero,47d0 <__mulsi3+0x24>
    47b4:	20c0004c 	andi	r3,r4,1
    47b8:	2008d07a 	srli	r4,r4,1
    47bc:	18000126 	beq	r3,zero,47c4 <__mulsi3+0x18>
    47c0:	1145883a 	add	r2,r2,r5
    47c4:	294b883a 	add	r5,r5,r5
    47c8:	203ffa1e 	bne	r4,zero,47b4 <__ram_exceptions_end+0xfe002794>
    47cc:	f800283a 	ret
    47d0:	f800283a 	ret

000047d4 <__addsf3>:
    47d4:	defffc04 	addi	sp,sp,-16
    47d8:	2004d7fa 	srli	r2,r4,31
    47dc:	280cd5fa 	srli	r6,r5,23
    47e0:	dc000015 	stw	r16,0(sp)
    47e4:	00c02034 	movhi	r3,128
    47e8:	2020d5fa 	srli	r16,r4,23
    47ec:	280ed7fa 	srli	r7,r5,31
    47f0:	18ffffc4 	addi	r3,r3,-1
    47f4:	dc400115 	stw	r17,4(sp)
    47f8:	1908703a 	and	r4,r3,r4
    47fc:	194a703a 	and	r5,r3,r5
    4800:	dfc00315 	stw	ra,12(sp)
    4804:	dc800215 	stw	r18,8(sp)
    4808:	14403fcc 	andi	r17,r2,255
    480c:	84003fcc 	andi	r16,r16,255
    4810:	200890fa 	slli	r4,r4,3
    4814:	31803fcc 	andi	r6,r6,255
    4818:	280a90fa 	slli	r5,r5,3
    481c:	89c05026 	beq	r17,r7,4960 <__addsf3+0x18c>
    4820:	8185c83a 	sub	r2,r16,r6
    4824:	00807a0e 	bge	zero,r2,4a10 <__addsf3+0x23c>
    4828:	30001e1e 	bne	r6,zero,48a4 <__addsf3+0xd0>
    482c:	28006d1e 	bne	r5,zero,49e4 <__addsf3+0x210>
    4830:	208001cc 	andi	r2,r4,7
    4834:	10000426 	beq	r2,zero,4848 <__addsf3+0x74>
    4838:	208003cc 	andi	r2,r4,15
    483c:	00c00104 	movi	r3,4
    4840:	10c00126 	beq	r2,r3,4848 <__addsf3+0x74>
    4844:	20c9883a 	add	r4,r4,r3
    4848:	2081002c 	andhi	r2,r4,1024
    484c:	10003926 	beq	r2,zero,4934 <__addsf3+0x160>
    4850:	84000044 	addi	r16,r16,1
    4854:	00803fc4 	movi	r2,255
    4858:	80807826 	beq	r16,r2,4a3c <__addsf3+0x268>
    485c:	200891ba 	slli	r4,r4,6
    4860:	8805883a 	mov	r2,r17
    4864:	2008d27a 	srli	r4,r4,9
    4868:	84003fcc 	andi	r16,r16,255
    486c:	800695fa 	slli	r3,r16,23
    4870:	10803fcc 	andi	r2,r2,255
    4874:	04002034 	movhi	r16,128
    4878:	843fffc4 	addi	r16,r16,-1
    487c:	100497fa 	slli	r2,r2,31
    4880:	2408703a 	and	r4,r4,r16
    4884:	20e0b03a 	or	r16,r4,r3
    4888:	8084b03a 	or	r2,r16,r2
    488c:	dfc00317 	ldw	ra,12(sp)
    4890:	dc800217 	ldw	r18,8(sp)
    4894:	dc400117 	ldw	r17,4(sp)
    4898:	dc000017 	ldw	r16,0(sp)
    489c:	dec00404 	addi	sp,sp,16
    48a0:	f800283a 	ret
    48a4:	00c03fc4 	movi	r3,255
    48a8:	80ffe126 	beq	r16,r3,4830 <__ram_exceptions_end+0xfe002810>
    48ac:	29410034 	orhi	r5,r5,1024
    48b0:	00c006c4 	movi	r3,27
    48b4:	18807516 	blt	r3,r2,4a8c <__addsf3+0x2b8>
    48b8:	00c00804 	movi	r3,32
    48bc:	1887c83a 	sub	r3,r3,r2
    48c0:	28c6983a 	sll	r3,r5,r3
    48c4:	288ad83a 	srl	r5,r5,r2
    48c8:	1804c03a 	cmpne	r2,r3,zero
    48cc:	288ab03a 	or	r5,r5,r2
    48d0:	2149c83a 	sub	r4,r4,r5
    48d4:	2081002c 	andhi	r2,r4,1024
    48d8:	10001426 	beq	r2,zero,492c <__addsf3+0x158>
    48dc:	04810034 	movhi	r18,1024
    48e0:	94bfffc4 	addi	r18,r18,-1
    48e4:	24a4703a 	and	r18,r4,r18
    48e8:	9009883a 	mov	r4,r18
    48ec:	00089680 	call	8968 <__clzsi2>
    48f0:	10bffec4 	addi	r2,r2,-5
    48f4:	90a4983a 	sll	r18,r18,r2
    48f8:	14005416 	blt	r2,r16,4a4c <__addsf3+0x278>
    48fc:	1405c83a 	sub	r2,r2,r16
    4900:	11000044 	addi	r4,r2,1
    4904:	00800804 	movi	r2,32
    4908:	1105c83a 	sub	r2,r2,r4
    490c:	9084983a 	sll	r2,r18,r2
    4910:	9124d83a 	srl	r18,r18,r4
    4914:	0021883a 	mov	r16,zero
    4918:	1008c03a 	cmpne	r4,r2,zero
    491c:	9108b03a 	or	r4,r18,r4
    4920:	003fc306 	br	4830 <__ram_exceptions_end+0xfe002810>
    4924:	1000db26 	beq	r2,zero,4c94 <__addsf3+0x4c0>
    4928:	1009883a 	mov	r4,r2
    492c:	208001cc 	andi	r2,r4,7
    4930:	103fc11e 	bne	r2,zero,4838 <__ram_exceptions_end+0xfe002818>
    4934:	2006d0fa 	srli	r3,r4,3
    4938:	01003fc4 	movi	r4,255
    493c:	8805883a 	mov	r2,r17
    4940:	8100241e 	bne	r16,r4,49d4 <__addsf3+0x200>
    4944:	18006e26 	beq	r3,zero,4b00 <__addsf3+0x32c>
    4948:	19001034 	orhi	r4,r3,64
    494c:	00c02034 	movhi	r3,128
    4950:	18ffffc4 	addi	r3,r3,-1
    4954:	043fffc4 	movi	r16,-1
    4958:	20c8703a 	and	r4,r4,r3
    495c:	003fc206 	br	4868 <__ram_exceptions_end+0xfe002848>
    4960:	8187c83a 	sub	r3,r16,r6
    4964:	00c03e0e 	bge	zero,r3,4a60 <__addsf3+0x28c>
    4968:	30002326 	beq	r6,zero,49f8 <__addsf3+0x224>
    496c:	01803fc4 	movi	r6,255
    4970:	81bfaf26 	beq	r16,r6,4830 <__ram_exceptions_end+0xfe002810>
    4974:	29410034 	orhi	r5,r5,1024
    4978:	018006c4 	movi	r6,27
    497c:	30c07416 	blt	r6,r3,4b50 <__addsf3+0x37c>
    4980:	01800804 	movi	r6,32
    4984:	30cdc83a 	sub	r6,r6,r3
    4988:	298c983a 	sll	r6,r5,r6
    498c:	28cad83a 	srl	r5,r5,r3
    4990:	3006c03a 	cmpne	r3,r6,zero
    4994:	28cab03a 	or	r5,r5,r3
    4998:	2149883a 	add	r4,r4,r5
    499c:	20c1002c 	andhi	r3,r4,1024
    49a0:	183fe226 	beq	r3,zero,492c <__ram_exceptions_end+0xfe00290c>
    49a4:	84000044 	addi	r16,r16,1
    49a8:	00c03fc4 	movi	r3,255
    49ac:	80c05426 	beq	r16,r3,4b00 <__addsf3+0x32c>
    49b0:	00bf0034 	movhi	r2,64512
    49b4:	10bfffc4 	addi	r2,r2,-1
    49b8:	20c0004c 	andi	r3,r4,1
    49bc:	2088703a 	and	r4,r4,r2
    49c0:	2008d07a 	srli	r4,r4,1
    49c4:	20c8b03a 	or	r4,r4,r3
    49c8:	003f9906 	br	4830 <__ram_exceptions_end+0xfe002810>
    49cc:	0007883a 	mov	r3,zero
    49d0:	0005883a 	mov	r2,zero
    49d4:	01002034 	movhi	r4,128
    49d8:	213fffc4 	addi	r4,r4,-1
    49dc:	1908703a 	and	r4,r3,r4
    49e0:	003fa106 	br	4868 <__ram_exceptions_end+0xfe002848>
    49e4:	10bfffc4 	addi	r2,r2,-1
    49e8:	103fb926 	beq	r2,zero,48d0 <__ram_exceptions_end+0xfe0028b0>
    49ec:	00c03fc4 	movi	r3,255
    49f0:	80ffaf1e 	bne	r16,r3,48b0 <__ram_exceptions_end+0xfe002890>
    49f4:	003f8e06 	br	4830 <__ram_exceptions_end+0xfe002810>
    49f8:	283f8d26 	beq	r5,zero,4830 <__ram_exceptions_end+0xfe002810>
    49fc:	18ffffc4 	addi	r3,r3,-1
    4a00:	183fe526 	beq	r3,zero,4998 <__ram_exceptions_end+0xfe002978>
    4a04:	01803fc4 	movi	r6,255
    4a08:	81bfdb1e 	bne	r16,r6,4978 <__ram_exceptions_end+0xfe002958>
    4a0c:	003f8806 	br	4830 <__ram_exceptions_end+0xfe002810>
    4a10:	1000201e 	bne	r2,zero,4a94 <__addsf3+0x2c0>
    4a14:	80800044 	addi	r2,r16,1
    4a18:	10803fcc 	andi	r2,r2,255
    4a1c:	01800044 	movi	r6,1
    4a20:	3080450e 	bge	r6,r2,4b38 <__addsf3+0x364>
    4a24:	2165c83a 	sub	r18,r4,r5
    4a28:	90c1002c 	andhi	r3,r18,1024
    4a2c:	18002b26 	beq	r3,zero,4adc <__addsf3+0x308>
    4a30:	2925c83a 	sub	r18,r5,r4
    4a34:	3823883a 	mov	r17,r7
    4a38:	003fab06 	br	48e8 <__ram_exceptions_end+0xfe0028c8>
    4a3c:	8805883a 	mov	r2,r17
    4a40:	043fffc4 	movi	r16,-1
    4a44:	0009883a 	mov	r4,zero
    4a48:	003f8706 	br	4868 <__ram_exceptions_end+0xfe002848>
    4a4c:	013f0034 	movhi	r4,64512
    4a50:	213fffc4 	addi	r4,r4,-1
    4a54:	80a1c83a 	sub	r16,r16,r2
    4a58:	9108703a 	and	r4,r18,r4
    4a5c:	003f7406 	br	4830 <__ram_exceptions_end+0xfe002810>
    4a60:	1800411e 	bne	r3,zero,4b68 <__addsf3+0x394>
    4a64:	80c00044 	addi	r3,r16,1
    4a68:	19c03fcc 	andi	r7,r3,255
    4a6c:	01800044 	movi	r6,1
    4a70:	31c0260e 	bge	r6,r7,4b0c <__addsf3+0x338>
    4a74:	01803fc4 	movi	r6,255
    4a78:	19802126 	beq	r3,r6,4b00 <__addsf3+0x32c>
    4a7c:	2149883a 	add	r4,r4,r5
    4a80:	2008d07a 	srli	r4,r4,1
    4a84:	1821883a 	mov	r16,r3
    4a88:	003f6906 	br	4830 <__ram_exceptions_end+0xfe002810>
    4a8c:	01400044 	movi	r5,1
    4a90:	003f8f06 	br	48d0 <__ram_exceptions_end+0xfe0028b0>
    4a94:	8000151e 	bne	r16,zero,4aec <__addsf3+0x318>
    4a98:	20002f26 	beq	r4,zero,4b58 <__addsf3+0x384>
    4a9c:	0084303a 	nor	r2,zero,r2
    4aa0:	10000a26 	beq	r2,zero,4acc <__addsf3+0x2f8>
    4aa4:	00c03fc4 	movi	r3,255
    4aa8:	30c02b26 	beq	r6,r3,4b58 <__addsf3+0x384>
    4aac:	00c006c4 	movi	r3,27
    4ab0:	18806d16 	blt	r3,r2,4c68 <__addsf3+0x494>
    4ab4:	00c00804 	movi	r3,32
    4ab8:	1887c83a 	sub	r3,r3,r2
    4abc:	20c6983a 	sll	r3,r4,r3
    4ac0:	2084d83a 	srl	r2,r4,r2
    4ac4:	1808c03a 	cmpne	r4,r3,zero
    4ac8:	1108b03a 	or	r4,r2,r4
    4acc:	2909c83a 	sub	r4,r5,r4
    4ad0:	3021883a 	mov	r16,r6
    4ad4:	3823883a 	mov	r17,r7
    4ad8:	003f7e06 	br	48d4 <__ram_exceptions_end+0xfe0028b4>
    4adc:	903f821e 	bne	r18,zero,48e8 <__ram_exceptions_end+0xfe0028c8>
    4ae0:	0005883a 	mov	r2,zero
    4ae4:	0021883a 	mov	r16,zero
    4ae8:	003fba06 	br	49d4 <__ram_exceptions_end+0xfe0029b4>
    4aec:	00c03fc4 	movi	r3,255
    4af0:	30c01926 	beq	r6,r3,4b58 <__addsf3+0x384>
    4af4:	0085c83a 	sub	r2,zero,r2
    4af8:	21010034 	orhi	r4,r4,1024
    4afc:	003feb06 	br	4aac <__ram_exceptions_end+0xfe002a8c>
    4b00:	043fffc4 	movi	r16,-1
    4b04:	0009883a 	mov	r4,zero
    4b08:	003f5706 	br	4868 <__ram_exceptions_end+0xfe002848>
    4b0c:	80004a1e 	bne	r16,zero,4c38 <__addsf3+0x464>
    4b10:	20005926 	beq	r4,zero,4c78 <__addsf3+0x4a4>
    4b14:	283f4626 	beq	r5,zero,4830 <__ram_exceptions_end+0xfe002810>
    4b18:	2149883a 	add	r4,r4,r5
    4b1c:	2081002c 	andhi	r2,r4,1024
    4b20:	103f8226 	beq	r2,zero,492c <__ram_exceptions_end+0xfe00290c>
    4b24:	00bf0034 	movhi	r2,64512
    4b28:	10bfffc4 	addi	r2,r2,-1
    4b2c:	3021883a 	mov	r16,r6
    4b30:	2088703a 	and	r4,r4,r2
    4b34:	003f3e06 	br	4830 <__ram_exceptions_end+0xfe002810>
    4b38:	8000121e 	bne	r16,zero,4b84 <__addsf3+0x3b0>
    4b3c:	2000261e 	bne	r4,zero,4bd8 <__addsf3+0x404>
    4b40:	283fa226 	beq	r5,zero,49cc <__ram_exceptions_end+0xfe0029ac>
    4b44:	2809883a 	mov	r4,r5
    4b48:	3823883a 	mov	r17,r7
    4b4c:	003f3806 	br	4830 <__ram_exceptions_end+0xfe002810>
    4b50:	01400044 	movi	r5,1
    4b54:	003f9006 	br	4998 <__ram_exceptions_end+0xfe002978>
    4b58:	2809883a 	mov	r4,r5
    4b5c:	3021883a 	mov	r16,r6
    4b60:	3823883a 	mov	r17,r7
    4b64:	003f3206 	br	4830 <__ram_exceptions_end+0xfe002810>
    4b68:	80000c1e 	bne	r16,zero,4b9c <__addsf3+0x3c8>
    4b6c:	20002f26 	beq	r4,zero,4c2c <__addsf3+0x458>
    4b70:	00c6303a 	nor	r3,zero,r3
    4b74:	18002b1e 	bne	r3,zero,4c24 <__addsf3+0x450>
    4b78:	2149883a 	add	r4,r4,r5
    4b7c:	3021883a 	mov	r16,r6
    4b80:	003f8606 	br	499c <__ram_exceptions_end+0xfe00297c>
    4b84:	20001b1e 	bne	r4,zero,4bf4 <__addsf3+0x420>
    4b88:	28003926 	beq	r5,zero,4c70 <__addsf3+0x49c>
    4b8c:	2809883a 	mov	r4,r5
    4b90:	3823883a 	mov	r17,r7
    4b94:	04003fc4 	movi	r16,255
    4b98:	003f2506 	br	4830 <__ram_exceptions_end+0xfe002810>
    4b9c:	01c03fc4 	movi	r7,255
    4ba0:	31c02226 	beq	r6,r7,4c2c <__addsf3+0x458>
    4ba4:	00c7c83a 	sub	r3,zero,r3
    4ba8:	21010034 	orhi	r4,r4,1024
    4bac:	01c006c4 	movi	r7,27
    4bb0:	38c03616 	blt	r7,r3,4c8c <__addsf3+0x4b8>
    4bb4:	01c00804 	movi	r7,32
    4bb8:	38cfc83a 	sub	r7,r7,r3
    4bbc:	21ce983a 	sll	r7,r4,r7
    4bc0:	20c6d83a 	srl	r3,r4,r3
    4bc4:	3808c03a 	cmpne	r4,r7,zero
    4bc8:	1906b03a 	or	r3,r3,r4
    4bcc:	1949883a 	add	r4,r3,r5
    4bd0:	3021883a 	mov	r16,r6
    4bd4:	003f7106 	br	499c <__ram_exceptions_end+0xfe00297c>
    4bd8:	283f1526 	beq	r5,zero,4830 <__ram_exceptions_end+0xfe002810>
    4bdc:	2145c83a 	sub	r2,r4,r5
    4be0:	10c1002c 	andhi	r3,r2,1024
    4be4:	183f4f26 	beq	r3,zero,4924 <__ram_exceptions_end+0xfe002904>
    4be8:	2909c83a 	sub	r4,r5,r4
    4bec:	3823883a 	mov	r17,r7
    4bf0:	003f0f06 	br	4830 <__ram_exceptions_end+0xfe002810>
    4bf4:	28001a26 	beq	r5,zero,4c60 <__addsf3+0x48c>
    4bf8:	2008d0fa 	srli	r4,r4,3
    4bfc:	2080102c 	andhi	r2,r4,64
    4c00:	10000526 	beq	r2,zero,4c18 <__addsf3+0x444>
    4c04:	280ad0fa 	srli	r5,r5,3
    4c08:	2880102c 	andhi	r2,r5,64
    4c0c:	1000021e 	bne	r2,zero,4c18 <__addsf3+0x444>
    4c10:	2809883a 	mov	r4,r5
    4c14:	3823883a 	mov	r17,r7
    4c18:	200890fa 	slli	r4,r4,3
    4c1c:	04003fc4 	movi	r16,255
    4c20:	003f0306 	br	4830 <__ram_exceptions_end+0xfe002810>
    4c24:	01c03fc4 	movi	r7,255
    4c28:	31ffe01e 	bne	r6,r7,4bac <__ram_exceptions_end+0xfe002b8c>
    4c2c:	2809883a 	mov	r4,r5
    4c30:	3021883a 	mov	r16,r6
    4c34:	003efe06 	br	4830 <__ram_exceptions_end+0xfe002810>
    4c38:	20001126 	beq	r4,zero,4c80 <__addsf3+0x4ac>
    4c3c:	28000826 	beq	r5,zero,4c60 <__addsf3+0x48c>
    4c40:	2008d0fa 	srli	r4,r4,3
    4c44:	2080102c 	andhi	r2,r4,64
    4c48:	103ff326 	beq	r2,zero,4c18 <__ram_exceptions_end+0xfe002bf8>
    4c4c:	280ad0fa 	srli	r5,r5,3
    4c50:	2880102c 	andhi	r2,r5,64
    4c54:	103ff01e 	bne	r2,zero,4c18 <__ram_exceptions_end+0xfe002bf8>
    4c58:	2809883a 	mov	r4,r5
    4c5c:	003fee06 	br	4c18 <__ram_exceptions_end+0xfe002bf8>
    4c60:	04003fc4 	movi	r16,255
    4c64:	003ef206 	br	4830 <__ram_exceptions_end+0xfe002810>
    4c68:	01000044 	movi	r4,1
    4c6c:	003f9706 	br	4acc <__ram_exceptions_end+0xfe002aac>
    4c70:	0005883a 	mov	r2,zero
    4c74:	003f3406 	br	4948 <__ram_exceptions_end+0xfe002928>
    4c78:	2809883a 	mov	r4,r5
    4c7c:	003eec06 	br	4830 <__ram_exceptions_end+0xfe002810>
    4c80:	2809883a 	mov	r4,r5
    4c84:	04003fc4 	movi	r16,255
    4c88:	003ee906 	br	4830 <__ram_exceptions_end+0xfe002810>
    4c8c:	00c00044 	movi	r3,1
    4c90:	003fce06 	br	4bcc <__ram_exceptions_end+0xfe002bac>
    4c94:	0005883a 	mov	r2,zero
    4c98:	003f4e06 	br	49d4 <__ram_exceptions_end+0xfe0029b4>

00004c9c <__divsf3>:
    4c9c:	defff504 	addi	sp,sp,-44
    4ca0:	200cd5fa 	srli	r6,r4,23
    4ca4:	dcc00415 	stw	r19,16(sp)
    4ca8:	2026d7fa 	srli	r19,r4,31
    4cac:	00c02034 	movhi	r3,128
    4cb0:	dd800715 	stw	r22,28(sp)
    4cb4:	dd000515 	stw	r20,20(sp)
    4cb8:	dc800315 	stw	r18,12(sp)
    4cbc:	18ffffc4 	addi	r3,r3,-1
    4cc0:	dfc00a15 	stw	ra,40(sp)
    4cc4:	df000915 	stw	fp,36(sp)
    4cc8:	ddc00815 	stw	r23,32(sp)
    4ccc:	dd400615 	stw	r21,24(sp)
    4cd0:	dc400215 	stw	r17,8(sp)
    4cd4:	dc000115 	stw	r16,4(sp)
    4cd8:	35003fcc 	andi	r20,r6,255
    4cdc:	1924703a 	and	r18,r3,r4
    4ce0:	9d803fcc 	andi	r22,r19,255
    4ce4:	a0005226 	beq	r20,zero,4e30 <__divsf3+0x194>
    4ce8:	00803fc4 	movi	r2,255
    4cec:	a0802e26 	beq	r20,r2,4da8 <__divsf3+0x10c>
    4cf0:	91002034 	orhi	r4,r18,128
    4cf4:	202490fa 	slli	r18,r4,3
    4cf8:	a53fe044 	addi	r20,r20,-127
    4cfc:	0021883a 	mov	r16,zero
    4d00:	002f883a 	mov	r23,zero
    4d04:	280cd5fa 	srli	r6,r5,23
    4d08:	282ad7fa 	srli	r21,r5,31
    4d0c:	00c02034 	movhi	r3,128
    4d10:	18ffffc4 	addi	r3,r3,-1
    4d14:	31803fcc 	andi	r6,r6,255
    4d18:	1962703a 	and	r17,r3,r5
    4d1c:	af003fcc 	andi	fp,r21,255
    4d20:	30004a26 	beq	r6,zero,4e4c <__divsf3+0x1b0>
    4d24:	00803fc4 	movi	r2,255
    4d28:	30804526 	beq	r6,r2,4e40 <__divsf3+0x1a4>
    4d2c:	89402034 	orhi	r5,r17,128
    4d30:	282290fa 	slli	r17,r5,3
    4d34:	31bfe044 	addi	r6,r6,-127
    4d38:	000b883a 	mov	r5,zero
    4d3c:	2c20b03a 	or	r16,r5,r16
    4d40:	802090ba 	slli	r16,r16,2
    4d44:	00800034 	movhi	r2,0
    4d48:	10935a04 	addi	r2,r2,19816
    4d4c:	80a1883a 	add	r16,r16,r2
    4d50:	81000017 	ldw	r4,0(r16)
    4d54:	9d46f03a 	xor	r3,r19,r21
    4d58:	180f883a 	mov	r7,r3
    4d5c:	18803fcc 	andi	r2,r3,255
    4d60:	a18dc83a 	sub	r6,r20,r6
    4d64:	2000683a 	jmp	r4
    4d68:	00004f4c 	andi	zero,zero,317
    4d6c:	00004dd0 	cmplti	zero,zero,311
    4d70:	00004f40 	call	4f4 <convolution+0x84>
    4d74:	00004dbc 	xorhi	zero,zero,310
    4d78:	00004f40 	call	4f4 <convolution+0x84>
    4d7c:	00004f18 	cmpnei	zero,zero,316
    4d80:	00004f40 	call	4f4 <convolution+0x84>
    4d84:	00004dbc 	xorhi	zero,zero,310
    4d88:	00004dd0 	cmplti	zero,zero,311
    4d8c:	00004dd0 	cmplti	zero,zero,311
    4d90:	00004f18 	cmpnei	zero,zero,316
    4d94:	00004dbc 	xorhi	zero,zero,310
    4d98:	0000502c 	andhi	zero,zero,320
    4d9c:	0000502c 	andhi	zero,zero,320
    4da0:	0000502c 	andhi	zero,zero,320
    4da4:	00004fe0 	cmpeqi	zero,zero,319
    4da8:	9000581e 	bne	r18,zero,4f0c <__divsf3+0x270>
    4dac:	04000204 	movi	r16,8
    4db0:	05c00084 	movi	r23,2
    4db4:	003fd306 	br	4d04 <__ram_exceptions_end+0xfe002ce4>
    4db8:	0023883a 	mov	r17,zero
    4dbc:	e02d883a 	mov	r22,fp
    4dc0:	282f883a 	mov	r23,r5
    4dc4:	00800084 	movi	r2,2
    4dc8:	b8808f1e 	bne	r23,r2,5008 <__divsf3+0x36c>
    4dcc:	b005883a 	mov	r2,r22
    4dd0:	11c0004c 	andi	r7,r2,1
    4dd4:	013fffc4 	movi	r4,-1
    4dd8:	000d883a 	mov	r6,zero
    4ddc:	21003fcc 	andi	r4,r4,255
    4de0:	200895fa 	slli	r4,r4,23
    4de4:	38803fcc 	andi	r2,r7,255
    4de8:	00c02034 	movhi	r3,128
    4dec:	100497fa 	slli	r2,r2,31
    4df0:	18ffffc4 	addi	r3,r3,-1
    4df4:	30c6703a 	and	r3,r6,r3
    4df8:	1906b03a 	or	r3,r3,r4
    4dfc:	1884b03a 	or	r2,r3,r2
    4e00:	dfc00a17 	ldw	ra,40(sp)
    4e04:	df000917 	ldw	fp,36(sp)
    4e08:	ddc00817 	ldw	r23,32(sp)
    4e0c:	dd800717 	ldw	r22,28(sp)
    4e10:	dd400617 	ldw	r21,24(sp)
    4e14:	dd000517 	ldw	r20,20(sp)
    4e18:	dcc00417 	ldw	r19,16(sp)
    4e1c:	dc800317 	ldw	r18,12(sp)
    4e20:	dc400217 	ldw	r17,8(sp)
    4e24:	dc000117 	ldw	r16,4(sp)
    4e28:	dec00b04 	addi	sp,sp,44
    4e2c:	f800283a 	ret
    4e30:	90002b1e 	bne	r18,zero,4ee0 <__divsf3+0x244>
    4e34:	04000104 	movi	r16,4
    4e38:	05c00044 	movi	r23,1
    4e3c:	003fb106 	br	4d04 <__ram_exceptions_end+0xfe002ce4>
    4e40:	8800251e 	bne	r17,zero,4ed8 <__divsf3+0x23c>
    4e44:	01400084 	movi	r5,2
    4e48:	00000206 	br	4e54 <__divsf3+0x1b8>
    4e4c:	88001a1e 	bne	r17,zero,4eb8 <__divsf3+0x21c>
    4e50:	01400044 	movi	r5,1
    4e54:	8160b03a 	or	r16,r16,r5
    4e58:	802090ba 	slli	r16,r16,2
    4e5c:	00c00034 	movhi	r3,0
    4e60:	18d39e04 	addi	r3,r3,20088
    4e64:	80e1883a 	add	r16,r16,r3
    4e68:	80c00017 	ldw	r3,0(r16)
    4e6c:	9d44f03a 	xor	r2,r19,r21
    4e70:	a18dc83a 	sub	r6,r20,r6
    4e74:	1800683a 	jmp	r3
    4e78:	00004dd0 	cmplti	zero,zero,311
    4e7c:	00004dd0 	cmplti	zero,zero,311
    4e80:	0000501c 	xori	zero,zero,320
    4e84:	00004db8 	rdprs	zero,zero,310
    4e88:	0000501c 	xori	zero,zero,320
    4e8c:	00004f18 	cmpnei	zero,zero,316
    4e90:	0000501c 	xori	zero,zero,320
    4e94:	00004db8 	rdprs	zero,zero,310
    4e98:	00004dd0 	cmplti	zero,zero,311
    4e9c:	00004dd0 	cmplti	zero,zero,311
    4ea0:	00004f18 	cmpnei	zero,zero,316
    4ea4:	00004db8 	rdprs	zero,zero,310
    4ea8:	0000502c 	andhi	zero,zero,320
    4eac:	0000502c 	andhi	zero,zero,320
    4eb0:	0000502c 	andhi	zero,zero,320
    4eb4:	00005044 	movi	zero,321
    4eb8:	8809883a 	mov	r4,r17
    4ebc:	00089680 	call	8968 <__clzsi2>
    4ec0:	10fffec4 	addi	r3,r2,-5
    4ec4:	10801d84 	addi	r2,r2,118
    4ec8:	88e2983a 	sll	r17,r17,r3
    4ecc:	008dc83a 	sub	r6,zero,r2
    4ed0:	000b883a 	mov	r5,zero
    4ed4:	003f9906 	br	4d3c <__ram_exceptions_end+0xfe002d1c>
    4ed8:	014000c4 	movi	r5,3
    4edc:	003f9706 	br	4d3c <__ram_exceptions_end+0xfe002d1c>
    4ee0:	9009883a 	mov	r4,r18
    4ee4:	d9400015 	stw	r5,0(sp)
    4ee8:	00089680 	call	8968 <__clzsi2>
    4eec:	10fffec4 	addi	r3,r2,-5
    4ef0:	11801d84 	addi	r6,r2,118
    4ef4:	90e4983a 	sll	r18,r18,r3
    4ef8:	01a9c83a 	sub	r20,zero,r6
    4efc:	0021883a 	mov	r16,zero
    4f00:	002f883a 	mov	r23,zero
    4f04:	d9400017 	ldw	r5,0(sp)
    4f08:	003f7e06 	br	4d04 <__ram_exceptions_end+0xfe002ce4>
    4f0c:	04000304 	movi	r16,12
    4f10:	05c000c4 	movi	r23,3
    4f14:	003f7b06 	br	4d04 <__ram_exceptions_end+0xfe002ce4>
    4f18:	01802034 	movhi	r6,128
    4f1c:	000f883a 	mov	r7,zero
    4f20:	31bfffc4 	addi	r6,r6,-1
    4f24:	013fffc4 	movi	r4,-1
    4f28:	003fac06 	br	4ddc <__ram_exceptions_end+0xfe002dbc>
    4f2c:	01400044 	movi	r5,1
    4f30:	2909c83a 	sub	r4,r5,r4
    4f34:	00c006c4 	movi	r3,27
    4f38:	19004b0e 	bge	r3,r4,5068 <__divsf3+0x3cc>
    4f3c:	114e703a 	and	r7,r2,r5
    4f40:	0009883a 	mov	r4,zero
    4f44:	000d883a 	mov	r6,zero
    4f48:	003fa406 	br	4ddc <__ram_exceptions_end+0xfe002dbc>
    4f4c:	9006917a 	slli	r3,r18,5
    4f50:	8822917a 	slli	r17,r17,5
    4f54:	1c40372e 	bgeu	r3,r17,5034 <__divsf3+0x398>
    4f58:	31bfffc4 	addi	r6,r6,-1
    4f5c:	010006c4 	movi	r4,27
    4f60:	000b883a 	mov	r5,zero
    4f64:	180f883a 	mov	r7,r3
    4f68:	294b883a 	add	r5,r5,r5
    4f6c:	18c7883a 	add	r3,r3,r3
    4f70:	38000116 	blt	r7,zero,4f78 <__divsf3+0x2dc>
    4f74:	1c400236 	bltu	r3,r17,4f80 <__divsf3+0x2e4>
    4f78:	1c47c83a 	sub	r3,r3,r17
    4f7c:	29400054 	ori	r5,r5,1
    4f80:	213fffc4 	addi	r4,r4,-1
    4f84:	203ff71e 	bne	r4,zero,4f64 <__ram_exceptions_end+0xfe002f44>
    4f88:	1806c03a 	cmpne	r3,r3,zero
    4f8c:	1962b03a 	or	r17,r3,r5
    4f90:	31001fc4 	addi	r4,r6,127
    4f94:	013fe50e 	bge	zero,r4,4f2c <__ram_exceptions_end+0xfe002f0c>
    4f98:	88c001cc 	andi	r3,r17,7
    4f9c:	18000426 	beq	r3,zero,4fb0 <__divsf3+0x314>
    4fa0:	88c003cc 	andi	r3,r17,15
    4fa4:	01400104 	movi	r5,4
    4fa8:	19400126 	beq	r3,r5,4fb0 <__divsf3+0x314>
    4fac:	8963883a 	add	r17,r17,r5
    4fb0:	88c2002c 	andhi	r3,r17,2048
    4fb4:	18000426 	beq	r3,zero,4fc8 <__divsf3+0x32c>
    4fb8:	00fe0034 	movhi	r3,63488
    4fbc:	18ffffc4 	addi	r3,r3,-1
    4fc0:	31002004 	addi	r4,r6,128
    4fc4:	88e2703a 	and	r17,r17,r3
    4fc8:	00c03f84 	movi	r3,254
    4fcc:	193f8016 	blt	r3,r4,4dd0 <__ram_exceptions_end+0xfe002db0>
    4fd0:	880c91ba 	slli	r6,r17,6
    4fd4:	11c0004c 	andi	r7,r2,1
    4fd8:	300cd27a 	srli	r6,r6,9
    4fdc:	003f7f06 	br	4ddc <__ram_exceptions_end+0xfe002dbc>
    4fe0:	9080102c 	andhi	r2,r18,64
    4fe4:	10000226 	beq	r2,zero,4ff0 <__divsf3+0x354>
    4fe8:	8880102c 	andhi	r2,r17,64
    4fec:	10001826 	beq	r2,zero,5050 <__divsf3+0x3b4>
    4ff0:	00802034 	movhi	r2,128
    4ff4:	91801034 	orhi	r6,r18,64
    4ff8:	10bfffc4 	addi	r2,r2,-1
    4ffc:	980f883a 	mov	r7,r19
    5000:	308c703a 	and	r6,r6,r2
    5004:	003fc706 	br	4f24 <__ram_exceptions_end+0xfe002f04>
    5008:	008000c4 	movi	r2,3
    500c:	b8802d26 	beq	r23,r2,50c4 <__divsf3+0x428>
    5010:	00c00044 	movi	r3,1
    5014:	b005883a 	mov	r2,r22
    5018:	b8ffdd1e 	bne	r23,r3,4f90 <__ram_exceptions_end+0xfe002f70>
    501c:	11c0004c 	andi	r7,r2,1
    5020:	0009883a 	mov	r4,zero
    5024:	000d883a 	mov	r6,zero
    5028:	003f6c06 	br	4ddc <__ram_exceptions_end+0xfe002dbc>
    502c:	9023883a 	mov	r17,r18
    5030:	003f6406 	br	4dc4 <__ram_exceptions_end+0xfe002da4>
    5034:	1c47c83a 	sub	r3,r3,r17
    5038:	01000684 	movi	r4,26
    503c:	01400044 	movi	r5,1
    5040:	003fc806 	br	4f64 <__ram_exceptions_end+0xfe002f44>
    5044:	9080102c 	andhi	r2,r18,64
    5048:	103fe926 	beq	r2,zero,4ff0 <__ram_exceptions_end+0xfe002fd0>
    504c:	0023883a 	mov	r17,zero
    5050:	00802034 	movhi	r2,128
    5054:	89801034 	orhi	r6,r17,64
    5058:	10bfffc4 	addi	r2,r2,-1
    505c:	a80f883a 	mov	r7,r21
    5060:	308c703a 	and	r6,r6,r2
    5064:	003faf06 	br	4f24 <__ram_exceptions_end+0xfe002f04>
    5068:	01c00804 	movi	r7,32
    506c:	390fc83a 	sub	r7,r7,r4
    5070:	89ce983a 	sll	r7,r17,r7
    5074:	890ad83a 	srl	r5,r17,r4
    5078:	380ec03a 	cmpne	r7,r7,zero
    507c:	29cab03a 	or	r5,r5,r7
    5080:	28c001cc 	andi	r3,r5,7
    5084:	18000426 	beq	r3,zero,5098 <__divsf3+0x3fc>
    5088:	28c003cc 	andi	r3,r5,15
    508c:	01000104 	movi	r4,4
    5090:	19000126 	beq	r3,r4,5098 <__divsf3+0x3fc>
    5094:	290b883a 	add	r5,r5,r4
    5098:	28c1002c 	andhi	r3,r5,1024
    509c:	18000426 	beq	r3,zero,50b0 <__divsf3+0x414>
    50a0:	11c0004c 	andi	r7,r2,1
    50a4:	01000044 	movi	r4,1
    50a8:	000d883a 	mov	r6,zero
    50ac:	003f4b06 	br	4ddc <__ram_exceptions_end+0xfe002dbc>
    50b0:	280a91ba 	slli	r5,r5,6
    50b4:	11c0004c 	andi	r7,r2,1
    50b8:	0009883a 	mov	r4,zero
    50bc:	280cd27a 	srli	r6,r5,9
    50c0:	003f4606 	br	4ddc <__ram_exceptions_end+0xfe002dbc>
    50c4:	00802034 	movhi	r2,128
    50c8:	89801034 	orhi	r6,r17,64
    50cc:	10bfffc4 	addi	r2,r2,-1
    50d0:	b00f883a 	mov	r7,r22
    50d4:	308c703a 	and	r6,r6,r2
    50d8:	003f9206 	br	4f24 <__ram_exceptions_end+0xfe002f04>

000050dc <__eqsf2>:
    50dc:	2006d5fa 	srli	r3,r4,23
    50e0:	280cd5fa 	srli	r6,r5,23
    50e4:	01c02034 	movhi	r7,128
    50e8:	39ffffc4 	addi	r7,r7,-1
    50ec:	18c03fcc 	andi	r3,r3,255
    50f0:	02003fc4 	movi	r8,255
    50f4:	3904703a 	and	r2,r7,r4
    50f8:	31803fcc 	andi	r6,r6,255
    50fc:	394e703a 	and	r7,r7,r5
    5100:	2008d7fa 	srli	r4,r4,31
    5104:	280ad7fa 	srli	r5,r5,31
    5108:	1a000d26 	beq	r3,r8,5140 <__eqsf2+0x64>
    510c:	02003fc4 	movi	r8,255
    5110:	32000826 	beq	r6,r8,5134 <__eqsf2+0x58>
    5114:	19800226 	beq	r3,r6,5120 <__eqsf2+0x44>
    5118:	00800044 	movi	r2,1
    511c:	f800283a 	ret
    5120:	11fffd1e 	bne	r2,r7,5118 <__ram_exceptions_end+0xfe0030f8>
    5124:	21400926 	beq	r4,r5,514c <__eqsf2+0x70>
    5128:	183ffb1e 	bne	r3,zero,5118 <__ram_exceptions_end+0xfe0030f8>
    512c:	1004c03a 	cmpne	r2,r2,zero
    5130:	f800283a 	ret
    5134:	383ff726 	beq	r7,zero,5114 <__ram_exceptions_end+0xfe0030f4>
    5138:	00800044 	movi	r2,1
    513c:	f800283a 	ret
    5140:	103ff226 	beq	r2,zero,510c <__ram_exceptions_end+0xfe0030ec>
    5144:	00800044 	movi	r2,1
    5148:	f800283a 	ret
    514c:	0005883a 	mov	r2,zero
    5150:	f800283a 	ret

00005154 <__gesf2>:
    5154:	2004d5fa 	srli	r2,r4,23
    5158:	2806d5fa 	srli	r3,r5,23
    515c:	01802034 	movhi	r6,128
    5160:	31bfffc4 	addi	r6,r6,-1
    5164:	10803fcc 	andi	r2,r2,255
    5168:	01c03fc4 	movi	r7,255
    516c:	3110703a 	and	r8,r6,r4
    5170:	18c03fcc 	andi	r3,r3,255
    5174:	314c703a 	and	r6,r6,r5
    5178:	2008d7fa 	srli	r4,r4,31
    517c:	280ad7fa 	srli	r5,r5,31
    5180:	11c01926 	beq	r2,r7,51e8 <__gesf2+0x94>
    5184:	01c03fc4 	movi	r7,255
    5188:	19c00f26 	beq	r3,r7,51c8 <__gesf2+0x74>
    518c:	1000061e 	bne	r2,zero,51a8 <__gesf2+0x54>
    5190:	400f003a 	cmpeq	r7,r8,zero
    5194:	1800071e 	bne	r3,zero,51b4 <__gesf2+0x60>
    5198:	3000061e 	bne	r6,zero,51b4 <__gesf2+0x60>
    519c:	0005883a 	mov	r2,zero
    51a0:	40000e1e 	bne	r8,zero,51dc <__gesf2+0x88>
    51a4:	f800283a 	ret
    51a8:	18000a1e 	bne	r3,zero,51d4 <__gesf2+0x80>
    51ac:	30000b26 	beq	r6,zero,51dc <__gesf2+0x88>
    51b0:	000f883a 	mov	r7,zero
    51b4:	29403fcc 	andi	r5,r5,255
    51b8:	38000726 	beq	r7,zero,51d8 <__gesf2+0x84>
    51bc:	28000826 	beq	r5,zero,51e0 <__gesf2+0x8c>
    51c0:	00800044 	movi	r2,1
    51c4:	f800283a 	ret
    51c8:	303ff026 	beq	r6,zero,518c <__ram_exceptions_end+0xfe00316c>
    51cc:	00bfff84 	movi	r2,-2
    51d0:	f800283a 	ret
    51d4:	29403fcc 	andi	r5,r5,255
    51d8:	21400526 	beq	r4,r5,51f0 <__gesf2+0x9c>
    51dc:	203ff826 	beq	r4,zero,51c0 <__ram_exceptions_end+0xfe0031a0>
    51e0:	00bfffc4 	movi	r2,-1
    51e4:	f800283a 	ret
    51e8:	403fe626 	beq	r8,zero,5184 <__ram_exceptions_end+0xfe003164>
    51ec:	003ff706 	br	51cc <__ram_exceptions_end+0xfe0031ac>
    51f0:	18bffa16 	blt	r3,r2,51dc <__ram_exceptions_end+0xfe0031bc>
    51f4:	10c00216 	blt	r2,r3,5200 <__gesf2+0xac>
    51f8:	323ff836 	bltu	r6,r8,51dc <__ram_exceptions_end+0xfe0031bc>
    51fc:	4180022e 	bgeu	r8,r6,5208 <__gesf2+0xb4>
    5200:	203fef1e 	bne	r4,zero,51c0 <__ram_exceptions_end+0xfe0031a0>
    5204:	003ff606 	br	51e0 <__ram_exceptions_end+0xfe0031c0>
    5208:	0005883a 	mov	r2,zero
    520c:	f800283a 	ret

00005210 <__lesf2>:
    5210:	2004d5fa 	srli	r2,r4,23
    5214:	280cd5fa 	srli	r6,r5,23
    5218:	00c02034 	movhi	r3,128
    521c:	18ffffc4 	addi	r3,r3,-1
    5220:	10803fcc 	andi	r2,r2,255
    5224:	01c03fc4 	movi	r7,255
    5228:	1910703a 	and	r8,r3,r4
    522c:	31803fcc 	andi	r6,r6,255
    5230:	1946703a 	and	r3,r3,r5
    5234:	2008d7fa 	srli	r4,r4,31
    5238:	280ad7fa 	srli	r5,r5,31
    523c:	11c01b26 	beq	r2,r7,52ac <__lesf2+0x9c>
    5240:	01c03fc4 	movi	r7,255
    5244:	31c01126 	beq	r6,r7,528c <__lesf2+0x7c>
    5248:	1000071e 	bne	r2,zero,5268 <__lesf2+0x58>
    524c:	400f003a 	cmpeq	r7,r8,zero
    5250:	21003fcc 	andi	r4,r4,255
    5254:	3000081e 	bne	r6,zero,5278 <__lesf2+0x68>
    5258:	1800071e 	bne	r3,zero,5278 <__lesf2+0x68>
    525c:	0005883a 	mov	r2,zero
    5260:	40000f1e 	bne	r8,zero,52a0 <__lesf2+0x90>
    5264:	f800283a 	ret
    5268:	21003fcc 	andi	r4,r4,255
    526c:	30000a1e 	bne	r6,zero,5298 <__lesf2+0x88>
    5270:	18000b26 	beq	r3,zero,52a0 <__lesf2+0x90>
    5274:	000f883a 	mov	r7,zero
    5278:	29403fcc 	andi	r5,r5,255
    527c:	38000726 	beq	r7,zero,529c <__lesf2+0x8c>
    5280:	28000826 	beq	r5,zero,52a4 <__lesf2+0x94>
    5284:	00800044 	movi	r2,1
    5288:	f800283a 	ret
    528c:	183fee26 	beq	r3,zero,5248 <__ram_exceptions_end+0xfe003228>
    5290:	00800084 	movi	r2,2
    5294:	f800283a 	ret
    5298:	29403fcc 	andi	r5,r5,255
    529c:	21400626 	beq	r4,r5,52b8 <__lesf2+0xa8>
    52a0:	203ff826 	beq	r4,zero,5284 <__ram_exceptions_end+0xfe003264>
    52a4:	00bfffc4 	movi	r2,-1
    52a8:	f800283a 	ret
    52ac:	403fe426 	beq	r8,zero,5240 <__ram_exceptions_end+0xfe003220>
    52b0:	00800084 	movi	r2,2
    52b4:	f800283a 	ret
    52b8:	30bff916 	blt	r6,r2,52a0 <__ram_exceptions_end+0xfe003280>
    52bc:	11800216 	blt	r2,r6,52c8 <__lesf2+0xb8>
    52c0:	1a3ff736 	bltu	r3,r8,52a0 <__ram_exceptions_end+0xfe003280>
    52c4:	40c0022e 	bgeu	r8,r3,52d0 <__lesf2+0xc0>
    52c8:	203fee1e 	bne	r4,zero,5284 <__ram_exceptions_end+0xfe003264>
    52cc:	003ff506 	br	52a4 <__ram_exceptions_end+0xfe003284>
    52d0:	0005883a 	mov	r2,zero
    52d4:	f800283a 	ret

000052d8 <__mulsf3>:
    52d8:	defff504 	addi	sp,sp,-44
    52dc:	dc000115 	stw	r16,4(sp)
    52e0:	2020d5fa 	srli	r16,r4,23
    52e4:	dd400615 	stw	r21,24(sp)
    52e8:	202ad7fa 	srli	r21,r4,31
    52ec:	dc800315 	stw	r18,12(sp)
    52f0:	04802034 	movhi	r18,128
    52f4:	df000915 	stw	fp,36(sp)
    52f8:	dd000515 	stw	r20,20(sp)
    52fc:	94bfffc4 	addi	r18,r18,-1
    5300:	dfc00a15 	stw	ra,40(sp)
    5304:	ddc00815 	stw	r23,32(sp)
    5308:	dd800715 	stw	r22,28(sp)
    530c:	dcc00415 	stw	r19,16(sp)
    5310:	dc400215 	stw	r17,8(sp)
    5314:	84003fcc 	andi	r16,r16,255
    5318:	9124703a 	and	r18,r18,r4
    531c:	a829883a 	mov	r20,r21
    5320:	af003fcc 	andi	fp,r21,255
    5324:	80005426 	beq	r16,zero,5478 <__mulsf3+0x1a0>
    5328:	00803fc4 	movi	r2,255
    532c:	80802f26 	beq	r16,r2,53ec <__mulsf3+0x114>
    5330:	91002034 	orhi	r4,r18,128
    5334:	202490fa 	slli	r18,r4,3
    5338:	843fe044 	addi	r16,r16,-127
    533c:	0023883a 	mov	r17,zero
    5340:	002f883a 	mov	r23,zero
    5344:	2804d5fa 	srli	r2,r5,23
    5348:	282cd7fa 	srli	r22,r5,31
    534c:	01002034 	movhi	r4,128
    5350:	213fffc4 	addi	r4,r4,-1
    5354:	10803fcc 	andi	r2,r2,255
    5358:	2166703a 	and	r19,r4,r5
    535c:	b1803fcc 	andi	r6,r22,255
    5360:	10004c26 	beq	r2,zero,5494 <__mulsf3+0x1bc>
    5364:	00c03fc4 	movi	r3,255
    5368:	10c04726 	beq	r2,r3,5488 <__mulsf3+0x1b0>
    536c:	99002034 	orhi	r4,r19,128
    5370:	202690fa 	slli	r19,r4,3
    5374:	10bfe044 	addi	r2,r2,-127
    5378:	0007883a 	mov	r3,zero
    537c:	80a1883a 	add	r16,r16,r2
    5380:	010003c4 	movi	r4,15
    5384:	1c44b03a 	or	r2,r3,r17
    5388:	b56af03a 	xor	r21,r22,r21
    538c:	81c00044 	addi	r7,r16,1
    5390:	20806b36 	bltu	r4,r2,5540 <__mulsf3+0x268>
    5394:	100490ba 	slli	r2,r2,2
    5398:	01000034 	movhi	r4,0
    539c:	2114eb04 	addi	r4,r4,21420
    53a0:	1105883a 	add	r2,r2,r4
    53a4:	10800017 	ldw	r2,0(r2)
    53a8:	1000683a 	jmp	r2
    53ac:	00005540 	call	554 <convolution+0xe4>
    53b0:	00005400 	call	540 <convolution+0xd0>
    53b4:	00005400 	call	540 <convolution+0xd0>
    53b8:	000053fc 	xorhi	zero,zero,335
    53bc:	00005524 	muli	zero,zero,340
    53c0:	00005524 	muli	zero,zero,340
    53c4:	00005510 	cmplti	zero,zero,340
    53c8:	000053fc 	xorhi	zero,zero,335
    53cc:	00005524 	muli	zero,zero,340
    53d0:	00005510 	cmplti	zero,zero,340
    53d4:	00005524 	muli	zero,zero,340
    53d8:	000053fc 	xorhi	zero,zero,335
    53dc:	00005530 	cmpltui	zero,zero,340
    53e0:	00005530 	cmpltui	zero,zero,340
    53e4:	00005530 	cmpltui	zero,zero,340
    53e8:	00005640 	call	564 <convolution+0xf4>
    53ec:	90003b1e 	bne	r18,zero,54dc <__mulsf3+0x204>
    53f0:	04400204 	movi	r17,8
    53f4:	05c00084 	movi	r23,2
    53f8:	003fd206 	br	5344 <__ram_exceptions_end+0xfe003324>
    53fc:	302b883a 	mov	r21,r6
    5400:	00800084 	movi	r2,2
    5404:	18802626 	beq	r3,r2,54a0 <__mulsf3+0x1c8>
    5408:	008000c4 	movi	r2,3
    540c:	1880b826 	beq	r3,r2,56f0 <__mulsf3+0x418>
    5410:	00800044 	movi	r2,1
    5414:	1880af1e 	bne	r3,r2,56d4 <__mulsf3+0x3fc>
    5418:	a829883a 	mov	r20,r21
    541c:	0007883a 	mov	r3,zero
    5420:	0009883a 	mov	r4,zero
    5424:	18803fcc 	andi	r2,r3,255
    5428:	100695fa 	slli	r3,r2,23
    542c:	a0803fcc 	andi	r2,r20,255
    5430:	100a97fa 	slli	r5,r2,31
    5434:	00802034 	movhi	r2,128
    5438:	10bfffc4 	addi	r2,r2,-1
    543c:	2084703a 	and	r2,r4,r2
    5440:	10c4b03a 	or	r2,r2,r3
    5444:	1144b03a 	or	r2,r2,r5
    5448:	dfc00a17 	ldw	ra,40(sp)
    544c:	df000917 	ldw	fp,36(sp)
    5450:	ddc00817 	ldw	r23,32(sp)
    5454:	dd800717 	ldw	r22,28(sp)
    5458:	dd400617 	ldw	r21,24(sp)
    545c:	dd000517 	ldw	r20,20(sp)
    5460:	dcc00417 	ldw	r19,16(sp)
    5464:	dc800317 	ldw	r18,12(sp)
    5468:	dc400217 	ldw	r17,8(sp)
    546c:	dc000117 	ldw	r16,4(sp)
    5470:	dec00b04 	addi	sp,sp,44
    5474:	f800283a 	ret
    5478:	90000d1e 	bne	r18,zero,54b0 <__mulsf3+0x1d8>
    547c:	04400104 	movi	r17,4
    5480:	05c00044 	movi	r23,1
    5484:	003faf06 	br	5344 <__ram_exceptions_end+0xfe003324>
    5488:	9806c03a 	cmpne	r3,r19,zero
    548c:	18c00084 	addi	r3,r3,2
    5490:	003fba06 	br	537c <__ram_exceptions_end+0xfe00335c>
    5494:	9800141e 	bne	r19,zero,54e8 <__mulsf3+0x210>
    5498:	00c00044 	movi	r3,1
    549c:	003fb706 	br	537c <__ram_exceptions_end+0xfe00335c>
    54a0:	a829883a 	mov	r20,r21
    54a4:	00ffffc4 	movi	r3,-1
    54a8:	0009883a 	mov	r4,zero
    54ac:	003fdd06 	br	5424 <__ram_exceptions_end+0xfe003404>
    54b0:	9009883a 	mov	r4,r18
    54b4:	d9400015 	stw	r5,0(sp)
    54b8:	00089680 	call	8968 <__clzsi2>
    54bc:	10fffec4 	addi	r3,r2,-5
    54c0:	10801d84 	addi	r2,r2,118
    54c4:	90e4983a 	sll	r18,r18,r3
    54c8:	00a1c83a 	sub	r16,zero,r2
    54cc:	0023883a 	mov	r17,zero
    54d0:	002f883a 	mov	r23,zero
    54d4:	d9400017 	ldw	r5,0(sp)
    54d8:	003f9a06 	br	5344 <__ram_exceptions_end+0xfe003324>
    54dc:	04400304 	movi	r17,12
    54e0:	05c000c4 	movi	r23,3
    54e4:	003f9706 	br	5344 <__ram_exceptions_end+0xfe003324>
    54e8:	9809883a 	mov	r4,r19
    54ec:	d9800015 	stw	r6,0(sp)
    54f0:	00089680 	call	8968 <__clzsi2>
    54f4:	10fffec4 	addi	r3,r2,-5
    54f8:	10801d84 	addi	r2,r2,118
    54fc:	98e6983a 	sll	r19,r19,r3
    5500:	0085c83a 	sub	r2,zero,r2
    5504:	0007883a 	mov	r3,zero
    5508:	d9800017 	ldw	r6,0(sp)
    550c:	003f9b06 	br	537c <__ram_exceptions_end+0xfe00335c>
    5510:	01002034 	movhi	r4,128
    5514:	0029883a 	mov	r20,zero
    5518:	213fffc4 	addi	r4,r4,-1
    551c:	00ffffc4 	movi	r3,-1
    5520:	003fc006 	br	5424 <__ram_exceptions_end+0xfe003404>
    5524:	9027883a 	mov	r19,r18
    5528:	b807883a 	mov	r3,r23
    552c:	003fb406 	br	5400 <__ram_exceptions_end+0xfe0033e0>
    5530:	9027883a 	mov	r19,r18
    5534:	e02b883a 	mov	r21,fp
    5538:	b807883a 	mov	r3,r23
    553c:	003fb006 	br	5400 <__ram_exceptions_end+0xfe0033e0>
    5540:	9028d43a 	srli	r20,r18,16
    5544:	982cd43a 	srli	r22,r19,16
    5548:	94bfffcc 	andi	r18,r18,65535
    554c:	9cffffcc 	andi	r19,r19,65535
    5550:	980b883a 	mov	r5,r19
    5554:	9009883a 	mov	r4,r18
    5558:	d9c00015 	stw	r7,0(sp)
    555c:	00047ac0 	call	47ac <__mulsi3>
    5560:	a00b883a 	mov	r5,r20
    5564:	9809883a 	mov	r4,r19
    5568:	1023883a 	mov	r17,r2
    556c:	00047ac0 	call	47ac <__mulsi3>
    5570:	a009883a 	mov	r4,r20
    5574:	b00b883a 	mov	r5,r22
    5578:	1027883a 	mov	r19,r2
    557c:	00047ac0 	call	47ac <__mulsi3>
    5580:	b00b883a 	mov	r5,r22
    5584:	9009883a 	mov	r4,r18
    5588:	1029883a 	mov	r20,r2
    558c:	00047ac0 	call	47ac <__mulsi3>
    5590:	8806d43a 	srli	r3,r17,16
    5594:	14c5883a 	add	r2,r2,r19
    5598:	d9c00017 	ldw	r7,0(sp)
    559c:	1885883a 	add	r2,r3,r2
    55a0:	14c0022e 	bgeu	r2,r19,55ac <__mulsf3+0x2d4>
    55a4:	00c00074 	movhi	r3,1
    55a8:	a0e9883a 	add	r20,r20,r3
    55ac:	1026943a 	slli	r19,r2,16
    55b0:	8c7fffcc 	andi	r17,r17,65535
    55b4:	1004d43a 	srli	r2,r2,16
    55b8:	9c63883a 	add	r17,r19,r17
    55bc:	882691ba 	slli	r19,r17,6
    55c0:	1505883a 	add	r2,r2,r20
    55c4:	8822d6ba 	srli	r17,r17,26
    55c8:	100891ba 	slli	r4,r2,6
    55cc:	9826c03a 	cmpne	r19,r19,zero
    55d0:	9c62b03a 	or	r17,r19,r17
    55d4:	8926b03a 	or	r19,r17,r4
    55d8:	9882002c 	andhi	r2,r19,2048
    55dc:	10000426 	beq	r2,zero,55f0 <__mulsf3+0x318>
    55e0:	9804d07a 	srli	r2,r19,1
    55e4:	9900004c 	andi	r4,r19,1
    55e8:	3821883a 	mov	r16,r7
    55ec:	1126b03a 	or	r19,r2,r4
    55f0:	80c01fc4 	addi	r3,r16,127
    55f4:	00c0210e 	bge	zero,r3,567c <__mulsf3+0x3a4>
    55f8:	988001cc 	andi	r2,r19,7
    55fc:	10000426 	beq	r2,zero,5610 <__mulsf3+0x338>
    5600:	988003cc 	andi	r2,r19,15
    5604:	01000104 	movi	r4,4
    5608:	11000126 	beq	r2,r4,5610 <__mulsf3+0x338>
    560c:	9927883a 	add	r19,r19,r4
    5610:	9882002c 	andhi	r2,r19,2048
    5614:	10000426 	beq	r2,zero,5628 <__mulsf3+0x350>
    5618:	00be0034 	movhi	r2,63488
    561c:	10bfffc4 	addi	r2,r2,-1
    5620:	80c02004 	addi	r3,r16,128
    5624:	98a6703a 	and	r19,r19,r2
    5628:	00803f84 	movi	r2,254
    562c:	10ff9c16 	blt	r2,r3,54a0 <__ram_exceptions_end+0xfe003480>
    5630:	980891ba 	slli	r4,r19,6
    5634:	a829883a 	mov	r20,r21
    5638:	2008d27a 	srli	r4,r4,9
    563c:	003f7906 	br	5424 <__ram_exceptions_end+0xfe003404>
    5640:	9080102c 	andhi	r2,r18,64
    5644:	10000826 	beq	r2,zero,5668 <__mulsf3+0x390>
    5648:	9880102c 	andhi	r2,r19,64
    564c:	1000061e 	bne	r2,zero,5668 <__mulsf3+0x390>
    5650:	00802034 	movhi	r2,128
    5654:	99001034 	orhi	r4,r19,64
    5658:	10bfffc4 	addi	r2,r2,-1
    565c:	b029883a 	mov	r20,r22
    5660:	2088703a 	and	r4,r4,r2
    5664:	003fad06 	br	551c <__ram_exceptions_end+0xfe0034fc>
    5668:	00802034 	movhi	r2,128
    566c:	91001034 	orhi	r4,r18,64
    5670:	10bfffc4 	addi	r2,r2,-1
    5674:	2088703a 	and	r4,r4,r2
    5678:	003fa806 	br	551c <__ram_exceptions_end+0xfe0034fc>
    567c:	00800044 	movi	r2,1
    5680:	10c7c83a 	sub	r3,r2,r3
    5684:	008006c4 	movi	r2,27
    5688:	10ff6316 	blt	r2,r3,5418 <__ram_exceptions_end+0xfe0033f8>
    568c:	00800804 	movi	r2,32
    5690:	10c5c83a 	sub	r2,r2,r3
    5694:	9884983a 	sll	r2,r19,r2
    5698:	98c6d83a 	srl	r3,r19,r3
    569c:	1004c03a 	cmpne	r2,r2,zero
    56a0:	1884b03a 	or	r2,r3,r2
    56a4:	10c001cc 	andi	r3,r2,7
    56a8:	18000426 	beq	r3,zero,56bc <__mulsf3+0x3e4>
    56ac:	10c003cc 	andi	r3,r2,15
    56b0:	01000104 	movi	r4,4
    56b4:	19000126 	beq	r3,r4,56bc <__mulsf3+0x3e4>
    56b8:	1105883a 	add	r2,r2,r4
    56bc:	10c1002c 	andhi	r3,r2,1024
    56c0:	18000626 	beq	r3,zero,56dc <__mulsf3+0x404>
    56c4:	a829883a 	mov	r20,r21
    56c8:	00c00044 	movi	r3,1
    56cc:	0009883a 	mov	r4,zero
    56d0:	003f5406 	br	5424 <__ram_exceptions_end+0xfe003404>
    56d4:	3821883a 	mov	r16,r7
    56d8:	003fc506 	br	55f0 <__ram_exceptions_end+0xfe0035d0>
    56dc:	100491ba 	slli	r2,r2,6
    56e0:	a829883a 	mov	r20,r21
    56e4:	0007883a 	mov	r3,zero
    56e8:	1008d27a 	srli	r4,r2,9
    56ec:	003f4d06 	br	5424 <__ram_exceptions_end+0xfe003404>
    56f0:	00802034 	movhi	r2,128
    56f4:	99001034 	orhi	r4,r19,64
    56f8:	10bfffc4 	addi	r2,r2,-1
    56fc:	a829883a 	mov	r20,r21
    5700:	2088703a 	and	r4,r4,r2
    5704:	003f8506 	br	551c <__ram_exceptions_end+0xfe0034fc>

00005708 <__subsf3>:
    5708:	defffc04 	addi	sp,sp,-16
    570c:	280cd5fa 	srli	r6,r5,23
    5710:	dc000015 	stw	r16,0(sp)
    5714:	01c02034 	movhi	r7,128
    5718:	2020d5fa 	srli	r16,r4,23
    571c:	39ffffc4 	addi	r7,r7,-1
    5720:	3906703a 	and	r3,r7,r4
    5724:	dc400115 	stw	r17,4(sp)
    5728:	394e703a 	and	r7,r7,r5
    572c:	2022d7fa 	srli	r17,r4,31
    5730:	dfc00315 	stw	ra,12(sp)
    5734:	dc800215 	stw	r18,8(sp)
    5738:	31803fcc 	andi	r6,r6,255
    573c:	01003fc4 	movi	r4,255
    5740:	84003fcc 	andi	r16,r16,255
    5744:	180690fa 	slli	r3,r3,3
    5748:	2804d7fa 	srli	r2,r5,31
    574c:	380e90fa 	slli	r7,r7,3
    5750:	31006d26 	beq	r6,r4,5908 <__subsf3+0x200>
    5754:	1080005c 	xori	r2,r2,1
    5758:	8189c83a 	sub	r4,r16,r6
    575c:	14404f26 	beq	r2,r17,589c <__subsf3+0x194>
    5760:	0100770e 	bge	zero,r4,5940 <__subsf3+0x238>
    5764:	30001e1e 	bne	r6,zero,57e0 <__subsf3+0xd8>
    5768:	38006a1e 	bne	r7,zero,5914 <__subsf3+0x20c>
    576c:	188001cc 	andi	r2,r3,7
    5770:	10000426 	beq	r2,zero,5784 <__subsf3+0x7c>
    5774:	188003cc 	andi	r2,r3,15
    5778:	01000104 	movi	r4,4
    577c:	11000126 	beq	r2,r4,5784 <__subsf3+0x7c>
    5780:	1907883a 	add	r3,r3,r4
    5784:	1881002c 	andhi	r2,r3,1024
    5788:	10003926 	beq	r2,zero,5870 <__subsf3+0x168>
    578c:	84000044 	addi	r16,r16,1
    5790:	00803fc4 	movi	r2,255
    5794:	80807526 	beq	r16,r2,596c <__subsf3+0x264>
    5798:	180691ba 	slli	r3,r3,6
    579c:	8880004c 	andi	r2,r17,1
    57a0:	180ad27a 	srli	r5,r3,9
    57a4:	84003fcc 	andi	r16,r16,255
    57a8:	800695fa 	slli	r3,r16,23
    57ac:	10803fcc 	andi	r2,r2,255
    57b0:	01002034 	movhi	r4,128
    57b4:	213fffc4 	addi	r4,r4,-1
    57b8:	100497fa 	slli	r2,r2,31
    57bc:	2920703a 	and	r16,r5,r4
    57c0:	80e0b03a 	or	r16,r16,r3
    57c4:	8084b03a 	or	r2,r16,r2
    57c8:	dfc00317 	ldw	ra,12(sp)
    57cc:	dc800217 	ldw	r18,8(sp)
    57d0:	dc400117 	ldw	r17,4(sp)
    57d4:	dc000017 	ldw	r16,0(sp)
    57d8:	dec00404 	addi	sp,sp,16
    57dc:	f800283a 	ret
    57e0:	00803fc4 	movi	r2,255
    57e4:	80bfe126 	beq	r16,r2,576c <__ram_exceptions_end+0xfe00374c>
    57e8:	39c10034 	orhi	r7,r7,1024
    57ec:	008006c4 	movi	r2,27
    57f0:	11007416 	blt	r2,r4,59c4 <__subsf3+0x2bc>
    57f4:	00800804 	movi	r2,32
    57f8:	1105c83a 	sub	r2,r2,r4
    57fc:	3884983a 	sll	r2,r7,r2
    5800:	390ed83a 	srl	r7,r7,r4
    5804:	1008c03a 	cmpne	r4,r2,zero
    5808:	390eb03a 	or	r7,r7,r4
    580c:	19c7c83a 	sub	r3,r3,r7
    5810:	1881002c 	andhi	r2,r3,1024
    5814:	10001426 	beq	r2,zero,5868 <__subsf3+0x160>
    5818:	04810034 	movhi	r18,1024
    581c:	94bfffc4 	addi	r18,r18,-1
    5820:	1ca4703a 	and	r18,r3,r18
    5824:	9009883a 	mov	r4,r18
    5828:	00089680 	call	8968 <__clzsi2>
    582c:	10bffec4 	addi	r2,r2,-5
    5830:	90a4983a 	sll	r18,r18,r2
    5834:	14005116 	blt	r2,r16,597c <__subsf3+0x274>
    5838:	1405c83a 	sub	r2,r2,r16
    583c:	10c00044 	addi	r3,r2,1
    5840:	00800804 	movi	r2,32
    5844:	10c5c83a 	sub	r2,r2,r3
    5848:	9084983a 	sll	r2,r18,r2
    584c:	90e4d83a 	srl	r18,r18,r3
    5850:	0021883a 	mov	r16,zero
    5854:	1006c03a 	cmpne	r3,r2,zero
    5858:	90c6b03a 	or	r3,r18,r3
    585c:	003fc306 	br	576c <__ram_exceptions_end+0xfe00374c>
    5860:	2000e026 	beq	r4,zero,5be4 <__subsf3+0x4dc>
    5864:	2007883a 	mov	r3,r4
    5868:	188001cc 	andi	r2,r3,7
    586c:	103fc11e 	bne	r2,zero,5774 <__ram_exceptions_end+0xfe003754>
    5870:	180ad0fa 	srli	r5,r3,3
    5874:	00c03fc4 	movi	r3,255
    5878:	8880004c 	andi	r2,r17,1
    587c:	80c0031e 	bne	r16,r3,588c <__subsf3+0x184>
    5880:	28006d26 	beq	r5,zero,5a38 <__subsf3+0x330>
    5884:	29401034 	orhi	r5,r5,64
    5888:	043fffc4 	movi	r16,-1
    588c:	00c02034 	movhi	r3,128
    5890:	18ffffc4 	addi	r3,r3,-1
    5894:	28ca703a 	and	r5,r5,r3
    5898:	003fc206 	br	57a4 <__ram_exceptions_end+0xfe003784>
    589c:	01003c0e 	bge	zero,r4,5990 <__subsf3+0x288>
    58a0:	30002126 	beq	r6,zero,5928 <__subsf3+0x220>
    58a4:	01403fc4 	movi	r5,255
    58a8:	817fb026 	beq	r16,r5,576c <__ram_exceptions_end+0xfe00374c>
    58ac:	39c10034 	orhi	r7,r7,1024
    58b0:	014006c4 	movi	r5,27
    58b4:	29007416 	blt	r5,r4,5a88 <__subsf3+0x380>
    58b8:	01400804 	movi	r5,32
    58bc:	290bc83a 	sub	r5,r5,r4
    58c0:	394a983a 	sll	r5,r7,r5
    58c4:	390ed83a 	srl	r7,r7,r4
    58c8:	2808c03a 	cmpne	r4,r5,zero
    58cc:	390eb03a 	or	r7,r7,r4
    58d0:	19c7883a 	add	r3,r3,r7
    58d4:	1901002c 	andhi	r4,r3,1024
    58d8:	20003826 	beq	r4,zero,59bc <__subsf3+0x2b4>
    58dc:	84000044 	addi	r16,r16,1
    58e0:	01003fc4 	movi	r4,255
    58e4:	81005426 	beq	r16,r4,5a38 <__subsf3+0x330>
    58e8:	1023883a 	mov	r17,r2
    58ec:	00bf0034 	movhi	r2,64512
    58f0:	10bfffc4 	addi	r2,r2,-1
    58f4:	1900004c 	andi	r4,r3,1
    58f8:	1886703a 	and	r3,r3,r2
    58fc:	1806d07a 	srli	r3,r3,1
    5900:	1906b03a 	or	r3,r3,r4
    5904:	003f9906 	br	576c <__ram_exceptions_end+0xfe00374c>
    5908:	383f9226 	beq	r7,zero,5754 <__ram_exceptions_end+0xfe003734>
    590c:	10803fcc 	andi	r2,r2,255
    5910:	003f9106 	br	5758 <__ram_exceptions_end+0xfe003738>
    5914:	213fffc4 	addi	r4,r4,-1
    5918:	203fbc26 	beq	r4,zero,580c <__ram_exceptions_end+0xfe0037ec>
    591c:	00803fc4 	movi	r2,255
    5920:	80bfb21e 	bne	r16,r2,57ec <__ram_exceptions_end+0xfe0037cc>
    5924:	003f9106 	br	576c <__ram_exceptions_end+0xfe00374c>
    5928:	383f9026 	beq	r7,zero,576c <__ram_exceptions_end+0xfe00374c>
    592c:	213fffc4 	addi	r4,r4,-1
    5930:	203fe726 	beq	r4,zero,58d0 <__ram_exceptions_end+0xfe0038b0>
    5934:	01403fc4 	movi	r5,255
    5938:	817fdd1e 	bne	r16,r5,58b0 <__ram_exceptions_end+0xfe003890>
    593c:	003f8b06 	br	576c <__ram_exceptions_end+0xfe00374c>
    5940:	2000221e 	bne	r4,zero,59cc <__subsf3+0x2c4>
    5944:	81000044 	addi	r4,r16,1
    5948:	21003fcc 	andi	r4,r4,255
    594c:	01400044 	movi	r5,1
    5950:	2900470e 	bge	r5,r4,5a70 <__subsf3+0x368>
    5954:	19e5c83a 	sub	r18,r3,r7
    5958:	9141002c 	andhi	r5,r18,1024
    595c:	28002d26 	beq	r5,zero,5a14 <__subsf3+0x30c>
    5960:	38e5c83a 	sub	r18,r7,r3
    5964:	1023883a 	mov	r17,r2
    5968:	003fae06 	br	5824 <__ram_exceptions_end+0xfe003804>
    596c:	8880004c 	andi	r2,r17,1
    5970:	043fffc4 	movi	r16,-1
    5974:	000b883a 	mov	r5,zero
    5978:	003f8a06 	br	57a4 <__ram_exceptions_end+0xfe003784>
    597c:	00ff0034 	movhi	r3,64512
    5980:	18ffffc4 	addi	r3,r3,-1
    5984:	80a1c83a 	sub	r16,r16,r2
    5988:	90c6703a 	and	r3,r18,r3
    598c:	003f7706 	br	576c <__ram_exceptions_end+0xfe00374c>
    5990:	2000431e 	bne	r4,zero,5aa0 <__subsf3+0x398>
    5994:	81000044 	addi	r4,r16,1
    5998:	21803fcc 	andi	r6,r4,255
    599c:	01400044 	movi	r5,1
    59a0:	2980280e 	bge	r5,r6,5a44 <__subsf3+0x33c>
    59a4:	01403fc4 	movi	r5,255
    59a8:	21402326 	beq	r4,r5,5a38 <__subsf3+0x330>
    59ac:	19c7883a 	add	r3,r3,r7
    59b0:	1806d07a 	srli	r3,r3,1
    59b4:	2021883a 	mov	r16,r4
    59b8:	003f6c06 	br	576c <__ram_exceptions_end+0xfe00374c>
    59bc:	1023883a 	mov	r17,r2
    59c0:	003fa906 	br	5868 <__ram_exceptions_end+0xfe003848>
    59c4:	01c00044 	movi	r7,1
    59c8:	003f9006 	br	580c <__ram_exceptions_end+0xfe0037ec>
    59cc:	8000151e 	bne	r16,zero,5a24 <__subsf3+0x31c>
    59d0:	18002f26 	beq	r3,zero,5a90 <__subsf3+0x388>
    59d4:	0108303a 	nor	r4,zero,r4
    59d8:	20000a26 	beq	r4,zero,5a04 <__subsf3+0x2fc>
    59dc:	01403fc4 	movi	r5,255
    59e0:	31402b26 	beq	r6,r5,5a90 <__subsf3+0x388>
    59e4:	014006c4 	movi	r5,27
    59e8:	29006e16 	blt	r5,r4,5ba4 <__subsf3+0x49c>
    59ec:	01400804 	movi	r5,32
    59f0:	290bc83a 	sub	r5,r5,r4
    59f4:	194a983a 	sll	r5,r3,r5
    59f8:	1908d83a 	srl	r4,r3,r4
    59fc:	2806c03a 	cmpne	r3,r5,zero
    5a00:	20c6b03a 	or	r3,r4,r3
    5a04:	38c7c83a 	sub	r3,r7,r3
    5a08:	3021883a 	mov	r16,r6
    5a0c:	1023883a 	mov	r17,r2
    5a10:	003f7f06 	br	5810 <__ram_exceptions_end+0xfe0037f0>
    5a14:	903f831e 	bne	r18,zero,5824 <__ram_exceptions_end+0xfe003804>
    5a18:	0005883a 	mov	r2,zero
    5a1c:	0021883a 	mov	r16,zero
    5a20:	003f9a06 	br	588c <__ram_exceptions_end+0xfe00386c>
    5a24:	01403fc4 	movi	r5,255
    5a28:	31401926 	beq	r6,r5,5a90 <__subsf3+0x388>
    5a2c:	0109c83a 	sub	r4,zero,r4
    5a30:	18c10034 	orhi	r3,r3,1024
    5a34:	003feb06 	br	59e4 <__ram_exceptions_end+0xfe0039c4>
    5a38:	043fffc4 	movi	r16,-1
    5a3c:	000b883a 	mov	r5,zero
    5a40:	003f5806 	br	57a4 <__ram_exceptions_end+0xfe003784>
    5a44:	8000481e 	bne	r16,zero,5b68 <__subsf3+0x460>
    5a48:	18006226 	beq	r3,zero,5bd4 <__subsf3+0x4cc>
    5a4c:	383f4726 	beq	r7,zero,576c <__ram_exceptions_end+0xfe00374c>
    5a50:	19c7883a 	add	r3,r3,r7
    5a54:	1881002c 	andhi	r2,r3,1024
    5a58:	103f8326 	beq	r2,zero,5868 <__ram_exceptions_end+0xfe003848>
    5a5c:	00bf0034 	movhi	r2,64512
    5a60:	10bfffc4 	addi	r2,r2,-1
    5a64:	2821883a 	mov	r16,r5
    5a68:	1886703a 	and	r3,r3,r2
    5a6c:	003f3f06 	br	576c <__ram_exceptions_end+0xfe00374c>
    5a70:	80001c1e 	bne	r16,zero,5ae4 <__subsf3+0x3dc>
    5a74:	1800261e 	bne	r3,zero,5b10 <__subsf3+0x408>
    5a78:	38004c26 	beq	r7,zero,5bac <__subsf3+0x4a4>
    5a7c:	3807883a 	mov	r3,r7
    5a80:	1023883a 	mov	r17,r2
    5a84:	003f3906 	br	576c <__ram_exceptions_end+0xfe00374c>
    5a88:	01c00044 	movi	r7,1
    5a8c:	003f9006 	br	58d0 <__ram_exceptions_end+0xfe0038b0>
    5a90:	3807883a 	mov	r3,r7
    5a94:	3021883a 	mov	r16,r6
    5a98:	1023883a 	mov	r17,r2
    5a9c:	003f3306 	br	576c <__ram_exceptions_end+0xfe00374c>
    5aa0:	8000161e 	bne	r16,zero,5afc <__subsf3+0x3f4>
    5aa4:	18002d26 	beq	r3,zero,5b5c <__subsf3+0x454>
    5aa8:	0108303a 	nor	r4,zero,r4
    5aac:	20000a26 	beq	r4,zero,5ad8 <__subsf3+0x3d0>
    5ab0:	01403fc4 	movi	r5,255
    5ab4:	31402926 	beq	r6,r5,5b5c <__subsf3+0x454>
    5ab8:	014006c4 	movi	r5,27
    5abc:	29004716 	blt	r5,r4,5bdc <__subsf3+0x4d4>
    5ac0:	01400804 	movi	r5,32
    5ac4:	290bc83a 	sub	r5,r5,r4
    5ac8:	194a983a 	sll	r5,r3,r5
    5acc:	1908d83a 	srl	r4,r3,r4
    5ad0:	2806c03a 	cmpne	r3,r5,zero
    5ad4:	20c6b03a 	or	r3,r4,r3
    5ad8:	19c7883a 	add	r3,r3,r7
    5adc:	3021883a 	mov	r16,r6
    5ae0:	003f7c06 	br	58d4 <__ram_exceptions_end+0xfe0038b4>
    5ae4:	1800111e 	bne	r3,zero,5b2c <__subsf3+0x424>
    5ae8:	38003326 	beq	r7,zero,5bb8 <__subsf3+0x4b0>
    5aec:	3807883a 	mov	r3,r7
    5af0:	1023883a 	mov	r17,r2
    5af4:	04003fc4 	movi	r16,255
    5af8:	003f1c06 	br	576c <__ram_exceptions_end+0xfe00374c>
    5afc:	01403fc4 	movi	r5,255
    5b00:	31401626 	beq	r6,r5,5b5c <__subsf3+0x454>
    5b04:	0109c83a 	sub	r4,zero,r4
    5b08:	18c10034 	orhi	r3,r3,1024
    5b0c:	003fea06 	br	5ab8 <__ram_exceptions_end+0xfe003a98>
    5b10:	383f1626 	beq	r7,zero,576c <__ram_exceptions_end+0xfe00374c>
    5b14:	19c9c83a 	sub	r4,r3,r7
    5b18:	2141002c 	andhi	r5,r4,1024
    5b1c:	283f5026 	beq	r5,zero,5860 <__ram_exceptions_end+0xfe003840>
    5b20:	38c7c83a 	sub	r3,r7,r3
    5b24:	1023883a 	mov	r17,r2
    5b28:	003f1006 	br	576c <__ram_exceptions_end+0xfe00374c>
    5b2c:	38001b26 	beq	r7,zero,5b9c <__subsf3+0x494>
    5b30:	1806d0fa 	srli	r3,r3,3
    5b34:	1900102c 	andhi	r4,r3,64
    5b38:	20000526 	beq	r4,zero,5b50 <__subsf3+0x448>
    5b3c:	380ed0fa 	srli	r7,r7,3
    5b40:	3900102c 	andhi	r4,r7,64
    5b44:	2000021e 	bne	r4,zero,5b50 <__subsf3+0x448>
    5b48:	3807883a 	mov	r3,r7
    5b4c:	1023883a 	mov	r17,r2
    5b50:	180690fa 	slli	r3,r3,3
    5b54:	04003fc4 	movi	r16,255
    5b58:	003f0406 	br	576c <__ram_exceptions_end+0xfe00374c>
    5b5c:	3807883a 	mov	r3,r7
    5b60:	3021883a 	mov	r16,r6
    5b64:	003f0106 	br	576c <__ram_exceptions_end+0xfe00374c>
    5b68:	18001726 	beq	r3,zero,5bc8 <__subsf3+0x4c0>
    5b6c:	38000b26 	beq	r7,zero,5b9c <__subsf3+0x494>
    5b70:	1806d0fa 	srli	r3,r3,3
    5b74:	1900102c 	andhi	r4,r3,64
    5b78:	20000426 	beq	r4,zero,5b8c <__subsf3+0x484>
    5b7c:	380ed0fa 	srli	r7,r7,3
    5b80:	3900102c 	andhi	r4,r7,64
    5b84:	2000011e 	bne	r4,zero,5b8c <__subsf3+0x484>
    5b88:	3807883a 	mov	r3,r7
    5b8c:	180690fa 	slli	r3,r3,3
    5b90:	1023883a 	mov	r17,r2
    5b94:	04003fc4 	movi	r16,255
    5b98:	003ef406 	br	576c <__ram_exceptions_end+0xfe00374c>
    5b9c:	04003fc4 	movi	r16,255
    5ba0:	003ef206 	br	576c <__ram_exceptions_end+0xfe00374c>
    5ba4:	00c00044 	movi	r3,1
    5ba8:	003f9606 	br	5a04 <__ram_exceptions_end+0xfe0039e4>
    5bac:	000b883a 	mov	r5,zero
    5bb0:	0005883a 	mov	r2,zero
    5bb4:	003f3506 	br	588c <__ram_exceptions_end+0xfe00386c>
    5bb8:	01402034 	movhi	r5,128
    5bbc:	297fffc4 	addi	r5,r5,-1
    5bc0:	0005883a 	mov	r2,zero
    5bc4:	003f2f06 	br	5884 <__ram_exceptions_end+0xfe003864>
    5bc8:	3807883a 	mov	r3,r7
    5bcc:	04003fc4 	movi	r16,255
    5bd0:	003ee606 	br	576c <__ram_exceptions_end+0xfe00374c>
    5bd4:	3807883a 	mov	r3,r7
    5bd8:	003ee406 	br	576c <__ram_exceptions_end+0xfe00374c>
    5bdc:	00c00044 	movi	r3,1
    5be0:	003fbd06 	br	5ad8 <__ram_exceptions_end+0xfe003ab8>
    5be4:	0005883a 	mov	r2,zero
    5be8:	003f2806 	br	588c <__ram_exceptions_end+0xfe00386c>

00005bec <__fixsfsi>:
    5bec:	200ad5fa 	srli	r5,r4,23
    5bf0:	00c02034 	movhi	r3,128
    5bf4:	18ffffc4 	addi	r3,r3,-1
    5bf8:	29403fcc 	andi	r5,r5,255
    5bfc:	00801f84 	movi	r2,126
    5c00:	1906703a 	and	r3,r3,r4
    5c04:	2008d7fa 	srli	r4,r4,31
    5c08:	11400e0e 	bge	r2,r5,5c44 <__fixsfsi+0x58>
    5c0c:	00802744 	movi	r2,157
    5c10:	11400816 	blt	r2,r5,5c34 <__fixsfsi+0x48>
    5c14:	00802544 	movi	r2,149
    5c18:	18c02034 	orhi	r3,r3,128
    5c1c:	11400b0e 	bge	r2,r5,5c4c <__fixsfsi+0x60>
    5c20:	28bfda84 	addi	r2,r5,-150
    5c24:	1884983a 	sll	r2,r3,r2
    5c28:	20000726 	beq	r4,zero,5c48 <__fixsfsi+0x5c>
    5c2c:	0085c83a 	sub	r2,zero,r2
    5c30:	f800283a 	ret
    5c34:	00a00034 	movhi	r2,32768
    5c38:	10bfffc4 	addi	r2,r2,-1
    5c3c:	2085883a 	add	r2,r4,r2
    5c40:	f800283a 	ret
    5c44:	0005883a 	mov	r2,zero
    5c48:	f800283a 	ret
    5c4c:	00802584 	movi	r2,150
    5c50:	1145c83a 	sub	r2,r2,r5
    5c54:	1884d83a 	srl	r2,r3,r2
    5c58:	003ff306 	br	5c28 <__ram_exceptions_end+0xfe003c08>

00005c5c <__floatsisf>:
    5c5c:	defffd04 	addi	sp,sp,-12
    5c60:	dfc00215 	stw	ra,8(sp)
    5c64:	dc400115 	stw	r17,4(sp)
    5c68:	dc000015 	stw	r16,0(sp)
    5c6c:	20003526 	beq	r4,zero,5d44 <__floatsisf+0xe8>
    5c70:	2021883a 	mov	r16,r4
    5c74:	2022d7fa 	srli	r17,r4,31
    5c78:	20003616 	blt	r4,zero,5d54 <__floatsisf+0xf8>
    5c7c:	8009883a 	mov	r4,r16
    5c80:	00089680 	call	8968 <__clzsi2>
    5c84:	00c02784 	movi	r3,158
    5c88:	1887c83a 	sub	r3,r3,r2
    5c8c:	01002584 	movi	r4,150
    5c90:	20c01416 	blt	r4,r3,5ce4 <__floatsisf+0x88>
    5c94:	20c9c83a 	sub	r4,r4,r3
    5c98:	8120983a 	sll	r16,r16,r4
    5c9c:	00802034 	movhi	r2,128
    5ca0:	10bfffc4 	addi	r2,r2,-1
    5ca4:	8809883a 	mov	r4,r17
    5ca8:	80a0703a 	and	r16,r16,r2
    5cac:	18803fcc 	andi	r2,r3,255
    5cb0:	100695fa 	slli	r3,r2,23
    5cb4:	20803fcc 	andi	r2,r4,255
    5cb8:	100897fa 	slli	r4,r2,31
    5cbc:	00802034 	movhi	r2,128
    5cc0:	10bfffc4 	addi	r2,r2,-1
    5cc4:	8084703a 	and	r2,r16,r2
    5cc8:	10c4b03a 	or	r2,r2,r3
    5ccc:	1104b03a 	or	r2,r2,r4
    5cd0:	dfc00217 	ldw	ra,8(sp)
    5cd4:	dc400117 	ldw	r17,4(sp)
    5cd8:	dc000017 	ldw	r16,0(sp)
    5cdc:	dec00304 	addi	sp,sp,12
    5ce0:	f800283a 	ret
    5ce4:	01002644 	movi	r4,153
    5ce8:	20c01c16 	blt	r4,r3,5d5c <__floatsisf+0x100>
    5cec:	20c9c83a 	sub	r4,r4,r3
    5cf0:	8120983a 	sll	r16,r16,r4
    5cf4:	013f0034 	movhi	r4,64512
    5cf8:	213fffc4 	addi	r4,r4,-1
    5cfc:	814001cc 	andi	r5,r16,7
    5d00:	8108703a 	and	r4,r16,r4
    5d04:	28000426 	beq	r5,zero,5d18 <__floatsisf+0xbc>
    5d08:	840003cc 	andi	r16,r16,15
    5d0c:	01400104 	movi	r5,4
    5d10:	81400126 	beq	r16,r5,5d18 <__floatsisf+0xbc>
    5d14:	2149883a 	add	r4,r4,r5
    5d18:	2141002c 	andhi	r5,r4,1024
    5d1c:	28000526 	beq	r5,zero,5d34 <__floatsisf+0xd8>
    5d20:	00c027c4 	movi	r3,159
    5d24:	1887c83a 	sub	r3,r3,r2
    5d28:	00bf0034 	movhi	r2,64512
    5d2c:	10bfffc4 	addi	r2,r2,-1
    5d30:	2088703a 	and	r4,r4,r2
    5d34:	202091ba 	slli	r16,r4,6
    5d38:	8809883a 	mov	r4,r17
    5d3c:	8020d27a 	srli	r16,r16,9
    5d40:	003fda06 	br	5cac <__ram_exceptions_end+0xfe003c8c>
    5d44:	0009883a 	mov	r4,zero
    5d48:	0007883a 	mov	r3,zero
    5d4c:	0021883a 	mov	r16,zero
    5d50:	003fd606 	br	5cac <__ram_exceptions_end+0xfe003c8c>
    5d54:	0121c83a 	sub	r16,zero,r4
    5d58:	003fc806 	br	5c7c <__ram_exceptions_end+0xfe003c5c>
    5d5c:	01002e44 	movi	r4,185
    5d60:	20c9c83a 	sub	r4,r4,r3
    5d64:	01400144 	movi	r5,5
    5d68:	8108983a 	sll	r4,r16,r4
    5d6c:	288bc83a 	sub	r5,r5,r2
    5d70:	8160d83a 	srl	r16,r16,r5
    5d74:	2008c03a 	cmpne	r4,r4,zero
    5d78:	8120b03a 	or	r16,r16,r4
    5d7c:	003fdd06 	br	5cf4 <__ram_exceptions_end+0xfe003cd4>

00005d80 <__floatunsisf>:
    5d80:	defffe04 	addi	sp,sp,-8
    5d84:	dfc00115 	stw	ra,4(sp)
    5d88:	dc000015 	stw	r16,0(sp)
    5d8c:	20002c26 	beq	r4,zero,5e40 <__floatunsisf+0xc0>
    5d90:	2021883a 	mov	r16,r4
    5d94:	00089680 	call	8968 <__clzsi2>
    5d98:	00c02784 	movi	r3,158
    5d9c:	1887c83a 	sub	r3,r3,r2
    5da0:	01002584 	movi	r4,150
    5da4:	20c00f16 	blt	r4,r3,5de4 <__floatunsisf+0x64>
    5da8:	20c9c83a 	sub	r4,r4,r3
    5dac:	8108983a 	sll	r4,r16,r4
    5db0:	00802034 	movhi	r2,128
    5db4:	10bfffc4 	addi	r2,r2,-1
    5db8:	2088703a 	and	r4,r4,r2
    5dbc:	18803fcc 	andi	r2,r3,255
    5dc0:	100695fa 	slli	r3,r2,23
    5dc4:	00802034 	movhi	r2,128
    5dc8:	10bfffc4 	addi	r2,r2,-1
    5dcc:	2084703a 	and	r2,r4,r2
    5dd0:	10c4b03a 	or	r2,r2,r3
    5dd4:	dfc00117 	ldw	ra,4(sp)
    5dd8:	dc000017 	ldw	r16,0(sp)
    5ddc:	dec00204 	addi	sp,sp,8
    5de0:	f800283a 	ret
    5de4:	01002644 	movi	r4,153
    5de8:	20c01816 	blt	r4,r3,5e4c <__floatunsisf+0xcc>
    5dec:	20c9c83a 	sub	r4,r4,r3
    5df0:	8108983a 	sll	r4,r16,r4
    5df4:	017f0034 	movhi	r5,64512
    5df8:	297fffc4 	addi	r5,r5,-1
    5dfc:	218001cc 	andi	r6,r4,7
    5e00:	214a703a 	and	r5,r4,r5
    5e04:	30000426 	beq	r6,zero,5e18 <__floatunsisf+0x98>
    5e08:	210003cc 	andi	r4,r4,15
    5e0c:	01800104 	movi	r6,4
    5e10:	21800126 	beq	r4,r6,5e18 <__floatunsisf+0x98>
    5e14:	298b883a 	add	r5,r5,r6
    5e18:	2901002c 	andhi	r4,r5,1024
    5e1c:	20000526 	beq	r4,zero,5e34 <__floatunsisf+0xb4>
    5e20:	00c027c4 	movi	r3,159
    5e24:	1887c83a 	sub	r3,r3,r2
    5e28:	00bf0034 	movhi	r2,64512
    5e2c:	10bfffc4 	addi	r2,r2,-1
    5e30:	288a703a 	and	r5,r5,r2
    5e34:	280891ba 	slli	r4,r5,6
    5e38:	2008d27a 	srli	r4,r4,9
    5e3c:	003fdf06 	br	5dbc <__ram_exceptions_end+0xfe003d9c>
    5e40:	0007883a 	mov	r3,zero
    5e44:	0009883a 	mov	r4,zero
    5e48:	003fdc06 	br	5dbc <__ram_exceptions_end+0xfe003d9c>
    5e4c:	01402e44 	movi	r5,185
    5e50:	28cbc83a 	sub	r5,r5,r3
    5e54:	01000144 	movi	r4,5
    5e58:	2089c83a 	sub	r4,r4,r2
    5e5c:	814a983a 	sll	r5,r16,r5
    5e60:	8108d83a 	srl	r4,r16,r4
    5e64:	2820c03a 	cmpne	r16,r5,zero
    5e68:	2408b03a 	or	r4,r4,r16
    5e6c:	003fe106 	br	5df4 <__ram_exceptions_end+0xfe003dd4>

00005e70 <__adddf3>:
    5e70:	02c00434 	movhi	r11,16
    5e74:	5affffc4 	addi	r11,r11,-1
    5e78:	2806d7fa 	srli	r3,r5,31
    5e7c:	2ad4703a 	and	r10,r5,r11
    5e80:	3ad2703a 	and	r9,r7,r11
    5e84:	3804d53a 	srli	r2,r7,20
    5e88:	3018d77a 	srli	r12,r6,29
    5e8c:	280ad53a 	srli	r5,r5,20
    5e90:	501490fa 	slli	r10,r10,3
    5e94:	2010d77a 	srli	r8,r4,29
    5e98:	481290fa 	slli	r9,r9,3
    5e9c:	380ed7fa 	srli	r7,r7,31
    5ea0:	defffb04 	addi	sp,sp,-20
    5ea4:	dc800215 	stw	r18,8(sp)
    5ea8:	dc400115 	stw	r17,4(sp)
    5eac:	dc000015 	stw	r16,0(sp)
    5eb0:	dfc00415 	stw	ra,16(sp)
    5eb4:	dcc00315 	stw	r19,12(sp)
    5eb8:	1c803fcc 	andi	r18,r3,255
    5ebc:	2c01ffcc 	andi	r16,r5,2047
    5ec0:	5210b03a 	or	r8,r10,r8
    5ec4:	202290fa 	slli	r17,r4,3
    5ec8:	1081ffcc 	andi	r2,r2,2047
    5ecc:	4b12b03a 	or	r9,r9,r12
    5ed0:	300c90fa 	slli	r6,r6,3
    5ed4:	91c07526 	beq	r18,r7,60ac <__adddf3+0x23c>
    5ed8:	8087c83a 	sub	r3,r16,r2
    5edc:	00c0ab0e 	bge	zero,r3,618c <__adddf3+0x31c>
    5ee0:	10002a1e 	bne	r2,zero,5f8c <__adddf3+0x11c>
    5ee4:	4984b03a 	or	r2,r9,r6
    5ee8:	1000961e 	bne	r2,zero,6144 <__adddf3+0x2d4>
    5eec:	888001cc 	andi	r2,r17,7
    5ef0:	10000726 	beq	r2,zero,5f10 <__adddf3+0xa0>
    5ef4:	888003cc 	andi	r2,r17,15
    5ef8:	00c00104 	movi	r3,4
    5efc:	10c00426 	beq	r2,r3,5f10 <__adddf3+0xa0>
    5f00:	88c7883a 	add	r3,r17,r3
    5f04:	1c63803a 	cmpltu	r17,r3,r17
    5f08:	4451883a 	add	r8,r8,r17
    5f0c:	1823883a 	mov	r17,r3
    5f10:	4080202c 	andhi	r2,r8,128
    5f14:	10005926 	beq	r2,zero,607c <__adddf3+0x20c>
    5f18:	84000044 	addi	r16,r16,1
    5f1c:	0081ffc4 	movi	r2,2047
    5f20:	8080ba26 	beq	r16,r2,620c <__adddf3+0x39c>
    5f24:	00bfe034 	movhi	r2,65408
    5f28:	10bfffc4 	addi	r2,r2,-1
    5f2c:	4090703a 	and	r8,r8,r2
    5f30:	4004977a 	slli	r2,r8,29
    5f34:	4010927a 	slli	r8,r8,9
    5f38:	8822d0fa 	srli	r17,r17,3
    5f3c:	8401ffcc 	andi	r16,r16,2047
    5f40:	4010d33a 	srli	r8,r8,12
    5f44:	9007883a 	mov	r3,r18
    5f48:	1444b03a 	or	r2,r2,r17
    5f4c:	8401ffcc 	andi	r16,r16,2047
    5f50:	8020953a 	slli	r16,r16,20
    5f54:	18c03fcc 	andi	r3,r3,255
    5f58:	01000434 	movhi	r4,16
    5f5c:	213fffc4 	addi	r4,r4,-1
    5f60:	180697fa 	slli	r3,r3,31
    5f64:	4110703a 	and	r8,r8,r4
    5f68:	4410b03a 	or	r8,r8,r16
    5f6c:	40c6b03a 	or	r3,r8,r3
    5f70:	dfc00417 	ldw	ra,16(sp)
    5f74:	dcc00317 	ldw	r19,12(sp)
    5f78:	dc800217 	ldw	r18,8(sp)
    5f7c:	dc400117 	ldw	r17,4(sp)
    5f80:	dc000017 	ldw	r16,0(sp)
    5f84:	dec00504 	addi	sp,sp,20
    5f88:	f800283a 	ret
    5f8c:	0081ffc4 	movi	r2,2047
    5f90:	80bfd626 	beq	r16,r2,5eec <__ram_exceptions_end+0xfe003ecc>
    5f94:	4a402034 	orhi	r9,r9,128
    5f98:	00800e04 	movi	r2,56
    5f9c:	10c09f16 	blt	r2,r3,621c <__adddf3+0x3ac>
    5fa0:	008007c4 	movi	r2,31
    5fa4:	10c0c216 	blt	r2,r3,62b0 <__adddf3+0x440>
    5fa8:	00800804 	movi	r2,32
    5fac:	10c5c83a 	sub	r2,r2,r3
    5fb0:	488a983a 	sll	r5,r9,r2
    5fb4:	30c8d83a 	srl	r4,r6,r3
    5fb8:	3084983a 	sll	r2,r6,r2
    5fbc:	48c6d83a 	srl	r3,r9,r3
    5fc0:	290cb03a 	or	r6,r5,r4
    5fc4:	1004c03a 	cmpne	r2,r2,zero
    5fc8:	308cb03a 	or	r6,r6,r2
    5fcc:	898dc83a 	sub	r6,r17,r6
    5fd0:	89a3803a 	cmpltu	r17,r17,r6
    5fd4:	40d1c83a 	sub	r8,r8,r3
    5fd8:	4451c83a 	sub	r8,r8,r17
    5fdc:	3023883a 	mov	r17,r6
    5fe0:	4080202c 	andhi	r2,r8,128
    5fe4:	10002326 	beq	r2,zero,6074 <__adddf3+0x204>
    5fe8:	04c02034 	movhi	r19,128
    5fec:	9cffffc4 	addi	r19,r19,-1
    5ff0:	44e6703a 	and	r19,r8,r19
    5ff4:	98007626 	beq	r19,zero,61d0 <__adddf3+0x360>
    5ff8:	9809883a 	mov	r4,r19
    5ffc:	00089680 	call	8968 <__clzsi2>
    6000:	10fffe04 	addi	r3,r2,-8
    6004:	010007c4 	movi	r4,31
    6008:	20c07716 	blt	r4,r3,61e8 <__adddf3+0x378>
    600c:	00800804 	movi	r2,32
    6010:	10c5c83a 	sub	r2,r2,r3
    6014:	8884d83a 	srl	r2,r17,r2
    6018:	98d0983a 	sll	r8,r19,r3
    601c:	88e2983a 	sll	r17,r17,r3
    6020:	1204b03a 	or	r2,r2,r8
    6024:	1c007416 	blt	r3,r16,61f8 <__adddf3+0x388>
    6028:	1c21c83a 	sub	r16,r3,r16
    602c:	82000044 	addi	r8,r16,1
    6030:	00c007c4 	movi	r3,31
    6034:	1a009116 	blt	r3,r8,627c <__adddf3+0x40c>
    6038:	00c00804 	movi	r3,32
    603c:	1a07c83a 	sub	r3,r3,r8
    6040:	8a08d83a 	srl	r4,r17,r8
    6044:	88e2983a 	sll	r17,r17,r3
    6048:	10c6983a 	sll	r3,r2,r3
    604c:	1210d83a 	srl	r8,r2,r8
    6050:	8804c03a 	cmpne	r2,r17,zero
    6054:	1906b03a 	or	r3,r3,r4
    6058:	18a2b03a 	or	r17,r3,r2
    605c:	0021883a 	mov	r16,zero
    6060:	003fa206 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    6064:	1890b03a 	or	r8,r3,r2
    6068:	40017d26 	beq	r8,zero,6660 <__adddf3+0x7f0>
    606c:	1011883a 	mov	r8,r2
    6070:	1823883a 	mov	r17,r3
    6074:	888001cc 	andi	r2,r17,7
    6078:	103f9e1e 	bne	r2,zero,5ef4 <__ram_exceptions_end+0xfe003ed4>
    607c:	4004977a 	slli	r2,r8,29
    6080:	8822d0fa 	srli	r17,r17,3
    6084:	4010d0fa 	srli	r8,r8,3
    6088:	9007883a 	mov	r3,r18
    608c:	1444b03a 	or	r2,r2,r17
    6090:	0101ffc4 	movi	r4,2047
    6094:	81002426 	beq	r16,r4,6128 <__adddf3+0x2b8>
    6098:	8120703a 	and	r16,r16,r4
    609c:	01000434 	movhi	r4,16
    60a0:	213fffc4 	addi	r4,r4,-1
    60a4:	4110703a 	and	r8,r8,r4
    60a8:	003fa806 	br	5f4c <__ram_exceptions_end+0xfe003f2c>
    60ac:	8089c83a 	sub	r4,r16,r2
    60b0:	01005e0e 	bge	zero,r4,622c <__adddf3+0x3bc>
    60b4:	10002b26 	beq	r2,zero,6164 <__adddf3+0x2f4>
    60b8:	0081ffc4 	movi	r2,2047
    60bc:	80bf8b26 	beq	r16,r2,5eec <__ram_exceptions_end+0xfe003ecc>
    60c0:	4a402034 	orhi	r9,r9,128
    60c4:	00800e04 	movi	r2,56
    60c8:	1100a40e 	bge	r2,r4,635c <__adddf3+0x4ec>
    60cc:	498cb03a 	or	r6,r9,r6
    60d0:	300ac03a 	cmpne	r5,r6,zero
    60d4:	0013883a 	mov	r9,zero
    60d8:	2c4b883a 	add	r5,r5,r17
    60dc:	2c63803a 	cmpltu	r17,r5,r17
    60e0:	4a11883a 	add	r8,r9,r8
    60e4:	8a11883a 	add	r8,r17,r8
    60e8:	2823883a 	mov	r17,r5
    60ec:	4080202c 	andhi	r2,r8,128
    60f0:	103fe026 	beq	r2,zero,6074 <__ram_exceptions_end+0xfe004054>
    60f4:	84000044 	addi	r16,r16,1
    60f8:	0081ffc4 	movi	r2,2047
    60fc:	8080d226 	beq	r16,r2,6448 <__adddf3+0x5d8>
    6100:	00bfe034 	movhi	r2,65408
    6104:	10bfffc4 	addi	r2,r2,-1
    6108:	4090703a 	and	r8,r8,r2
    610c:	880ad07a 	srli	r5,r17,1
    6110:	400897fa 	slli	r4,r8,31
    6114:	88c0004c 	andi	r3,r17,1
    6118:	28e2b03a 	or	r17,r5,r3
    611c:	4010d07a 	srli	r8,r8,1
    6120:	2462b03a 	or	r17,r4,r17
    6124:	003f7106 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    6128:	4088b03a 	or	r4,r8,r2
    612c:	20014526 	beq	r4,zero,6644 <__adddf3+0x7d4>
    6130:	01000434 	movhi	r4,16
    6134:	42000234 	orhi	r8,r8,8
    6138:	213fffc4 	addi	r4,r4,-1
    613c:	4110703a 	and	r8,r8,r4
    6140:	003f8206 	br	5f4c <__ram_exceptions_end+0xfe003f2c>
    6144:	18ffffc4 	addi	r3,r3,-1
    6148:	1800491e 	bne	r3,zero,6270 <__adddf3+0x400>
    614c:	898bc83a 	sub	r5,r17,r6
    6150:	8963803a 	cmpltu	r17,r17,r5
    6154:	4251c83a 	sub	r8,r8,r9
    6158:	4451c83a 	sub	r8,r8,r17
    615c:	2823883a 	mov	r17,r5
    6160:	003f9f06 	br	5fe0 <__ram_exceptions_end+0xfe003fc0>
    6164:	4984b03a 	or	r2,r9,r6
    6168:	103f6026 	beq	r2,zero,5eec <__ram_exceptions_end+0xfe003ecc>
    616c:	213fffc4 	addi	r4,r4,-1
    6170:	2000931e 	bne	r4,zero,63c0 <__adddf3+0x550>
    6174:	898d883a 	add	r6,r17,r6
    6178:	3463803a 	cmpltu	r17,r6,r17
    617c:	4251883a 	add	r8,r8,r9
    6180:	8a11883a 	add	r8,r17,r8
    6184:	3023883a 	mov	r17,r6
    6188:	003fd806 	br	60ec <__ram_exceptions_end+0xfe0040cc>
    618c:	1800541e 	bne	r3,zero,62e0 <__adddf3+0x470>
    6190:	80800044 	addi	r2,r16,1
    6194:	1081ffcc 	andi	r2,r2,2047
    6198:	00c00044 	movi	r3,1
    619c:	1880a00e 	bge	r3,r2,6420 <__adddf3+0x5b0>
    61a0:	8989c83a 	sub	r4,r17,r6
    61a4:	8905803a 	cmpltu	r2,r17,r4
    61a8:	4267c83a 	sub	r19,r8,r9
    61ac:	98a7c83a 	sub	r19,r19,r2
    61b0:	9880202c 	andhi	r2,r19,128
    61b4:	10006326 	beq	r2,zero,6344 <__adddf3+0x4d4>
    61b8:	3463c83a 	sub	r17,r6,r17
    61bc:	4a07c83a 	sub	r3,r9,r8
    61c0:	344d803a 	cmpltu	r6,r6,r17
    61c4:	19a7c83a 	sub	r19,r3,r6
    61c8:	3825883a 	mov	r18,r7
    61cc:	983f8a1e 	bne	r19,zero,5ff8 <__ram_exceptions_end+0xfe003fd8>
    61d0:	8809883a 	mov	r4,r17
    61d4:	00089680 	call	8968 <__clzsi2>
    61d8:	10800804 	addi	r2,r2,32
    61dc:	10fffe04 	addi	r3,r2,-8
    61e0:	010007c4 	movi	r4,31
    61e4:	20ff890e 	bge	r4,r3,600c <__ram_exceptions_end+0xfe003fec>
    61e8:	10bff604 	addi	r2,r2,-40
    61ec:	8884983a 	sll	r2,r17,r2
    61f0:	0023883a 	mov	r17,zero
    61f4:	1c3f8c0e 	bge	r3,r16,6028 <__ram_exceptions_end+0xfe004008>
    61f8:	023fe034 	movhi	r8,65408
    61fc:	423fffc4 	addi	r8,r8,-1
    6200:	80e1c83a 	sub	r16,r16,r3
    6204:	1210703a 	and	r8,r2,r8
    6208:	003f3806 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    620c:	9007883a 	mov	r3,r18
    6210:	0011883a 	mov	r8,zero
    6214:	0005883a 	mov	r2,zero
    6218:	003f4c06 	br	5f4c <__ram_exceptions_end+0xfe003f2c>
    621c:	498cb03a 	or	r6,r9,r6
    6220:	300cc03a 	cmpne	r6,r6,zero
    6224:	0007883a 	mov	r3,zero
    6228:	003f6806 	br	5fcc <__ram_exceptions_end+0xfe003fac>
    622c:	20009c1e 	bne	r4,zero,64a0 <__adddf3+0x630>
    6230:	80800044 	addi	r2,r16,1
    6234:	1141ffcc 	andi	r5,r2,2047
    6238:	01000044 	movi	r4,1
    623c:	2140670e 	bge	r4,r5,63dc <__adddf3+0x56c>
    6240:	0101ffc4 	movi	r4,2047
    6244:	11007f26 	beq	r2,r4,6444 <__adddf3+0x5d4>
    6248:	898d883a 	add	r6,r17,r6
    624c:	4247883a 	add	r3,r8,r9
    6250:	3451803a 	cmpltu	r8,r6,r17
    6254:	40d1883a 	add	r8,r8,r3
    6258:	402297fa 	slli	r17,r8,31
    625c:	300cd07a 	srli	r6,r6,1
    6260:	4010d07a 	srli	r8,r8,1
    6264:	1021883a 	mov	r16,r2
    6268:	89a2b03a 	or	r17,r17,r6
    626c:	003f1f06 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    6270:	0081ffc4 	movi	r2,2047
    6274:	80bf481e 	bne	r16,r2,5f98 <__ram_exceptions_end+0xfe003f78>
    6278:	003f1c06 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    627c:	843ff844 	addi	r16,r16,-31
    6280:	01000804 	movi	r4,32
    6284:	1406d83a 	srl	r3,r2,r16
    6288:	41005026 	beq	r8,r4,63cc <__adddf3+0x55c>
    628c:	01001004 	movi	r4,64
    6290:	2211c83a 	sub	r8,r4,r8
    6294:	1204983a 	sll	r2,r2,r8
    6298:	88a2b03a 	or	r17,r17,r2
    629c:	8822c03a 	cmpne	r17,r17,zero
    62a0:	1c62b03a 	or	r17,r3,r17
    62a4:	0011883a 	mov	r8,zero
    62a8:	0021883a 	mov	r16,zero
    62ac:	003f7106 	br	6074 <__ram_exceptions_end+0xfe004054>
    62b0:	193ff804 	addi	r4,r3,-32
    62b4:	00800804 	movi	r2,32
    62b8:	4908d83a 	srl	r4,r9,r4
    62bc:	18804526 	beq	r3,r2,63d4 <__adddf3+0x564>
    62c0:	00801004 	movi	r2,64
    62c4:	10c5c83a 	sub	r2,r2,r3
    62c8:	4886983a 	sll	r3,r9,r2
    62cc:	198cb03a 	or	r6,r3,r6
    62d0:	300cc03a 	cmpne	r6,r6,zero
    62d4:	218cb03a 	or	r6,r4,r6
    62d8:	0007883a 	mov	r3,zero
    62dc:	003f3b06 	br	5fcc <__ram_exceptions_end+0xfe003fac>
    62e0:	80002a26 	beq	r16,zero,638c <__adddf3+0x51c>
    62e4:	0101ffc4 	movi	r4,2047
    62e8:	11006826 	beq	r2,r4,648c <__adddf3+0x61c>
    62ec:	00c7c83a 	sub	r3,zero,r3
    62f0:	42002034 	orhi	r8,r8,128
    62f4:	01000e04 	movi	r4,56
    62f8:	20c07c16 	blt	r4,r3,64ec <__adddf3+0x67c>
    62fc:	010007c4 	movi	r4,31
    6300:	20c0da16 	blt	r4,r3,666c <__adddf3+0x7fc>
    6304:	01000804 	movi	r4,32
    6308:	20c9c83a 	sub	r4,r4,r3
    630c:	4114983a 	sll	r10,r8,r4
    6310:	88cad83a 	srl	r5,r17,r3
    6314:	8908983a 	sll	r4,r17,r4
    6318:	40c6d83a 	srl	r3,r8,r3
    631c:	5162b03a 	or	r17,r10,r5
    6320:	2008c03a 	cmpne	r4,r4,zero
    6324:	8922b03a 	or	r17,r17,r4
    6328:	3463c83a 	sub	r17,r6,r17
    632c:	48c7c83a 	sub	r3,r9,r3
    6330:	344d803a 	cmpltu	r6,r6,r17
    6334:	1991c83a 	sub	r8,r3,r6
    6338:	1021883a 	mov	r16,r2
    633c:	3825883a 	mov	r18,r7
    6340:	003f2706 	br	5fe0 <__ram_exceptions_end+0xfe003fc0>
    6344:	24d0b03a 	or	r8,r4,r19
    6348:	40001b1e 	bne	r8,zero,63b8 <__adddf3+0x548>
    634c:	0005883a 	mov	r2,zero
    6350:	0007883a 	mov	r3,zero
    6354:	0021883a 	mov	r16,zero
    6358:	003f4d06 	br	6090 <__ram_exceptions_end+0xfe004070>
    635c:	008007c4 	movi	r2,31
    6360:	11003c16 	blt	r2,r4,6454 <__adddf3+0x5e4>
    6364:	00800804 	movi	r2,32
    6368:	1105c83a 	sub	r2,r2,r4
    636c:	488e983a 	sll	r7,r9,r2
    6370:	310ad83a 	srl	r5,r6,r4
    6374:	3084983a 	sll	r2,r6,r2
    6378:	4912d83a 	srl	r9,r9,r4
    637c:	394ab03a 	or	r5,r7,r5
    6380:	1004c03a 	cmpne	r2,r2,zero
    6384:	288ab03a 	or	r5,r5,r2
    6388:	003f5306 	br	60d8 <__ram_exceptions_end+0xfe0040b8>
    638c:	4448b03a 	or	r4,r8,r17
    6390:	20003e26 	beq	r4,zero,648c <__adddf3+0x61c>
    6394:	00c6303a 	nor	r3,zero,r3
    6398:	18003a1e 	bne	r3,zero,6484 <__adddf3+0x614>
    639c:	3463c83a 	sub	r17,r6,r17
    63a0:	4a07c83a 	sub	r3,r9,r8
    63a4:	344d803a 	cmpltu	r6,r6,r17
    63a8:	1991c83a 	sub	r8,r3,r6
    63ac:	1021883a 	mov	r16,r2
    63b0:	3825883a 	mov	r18,r7
    63b4:	003f0a06 	br	5fe0 <__ram_exceptions_end+0xfe003fc0>
    63b8:	2023883a 	mov	r17,r4
    63bc:	003f0d06 	br	5ff4 <__ram_exceptions_end+0xfe003fd4>
    63c0:	0081ffc4 	movi	r2,2047
    63c4:	80bf3f1e 	bne	r16,r2,60c4 <__ram_exceptions_end+0xfe0040a4>
    63c8:	003ec806 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    63cc:	0005883a 	mov	r2,zero
    63d0:	003fb106 	br	6298 <__ram_exceptions_end+0xfe004278>
    63d4:	0007883a 	mov	r3,zero
    63d8:	003fbc06 	br	62cc <__ram_exceptions_end+0xfe0042ac>
    63dc:	4444b03a 	or	r2,r8,r17
    63e0:	8000871e 	bne	r16,zero,6600 <__adddf3+0x790>
    63e4:	1000ba26 	beq	r2,zero,66d0 <__adddf3+0x860>
    63e8:	4984b03a 	or	r2,r9,r6
    63ec:	103ebf26 	beq	r2,zero,5eec <__ram_exceptions_end+0xfe003ecc>
    63f0:	8985883a 	add	r2,r17,r6
    63f4:	4247883a 	add	r3,r8,r9
    63f8:	1451803a 	cmpltu	r8,r2,r17
    63fc:	40d1883a 	add	r8,r8,r3
    6400:	40c0202c 	andhi	r3,r8,128
    6404:	1023883a 	mov	r17,r2
    6408:	183f1a26 	beq	r3,zero,6074 <__ram_exceptions_end+0xfe004054>
    640c:	00bfe034 	movhi	r2,65408
    6410:	10bfffc4 	addi	r2,r2,-1
    6414:	2021883a 	mov	r16,r4
    6418:	4090703a 	and	r8,r8,r2
    641c:	003eb306 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    6420:	4444b03a 	or	r2,r8,r17
    6424:	8000291e 	bne	r16,zero,64cc <__adddf3+0x65c>
    6428:	10004b1e 	bne	r2,zero,6558 <__adddf3+0x6e8>
    642c:	4990b03a 	or	r8,r9,r6
    6430:	40008b26 	beq	r8,zero,6660 <__adddf3+0x7f0>
    6434:	4811883a 	mov	r8,r9
    6438:	3023883a 	mov	r17,r6
    643c:	3825883a 	mov	r18,r7
    6440:	003eaa06 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    6444:	1021883a 	mov	r16,r2
    6448:	0011883a 	mov	r8,zero
    644c:	0005883a 	mov	r2,zero
    6450:	003f0f06 	br	6090 <__ram_exceptions_end+0xfe004070>
    6454:	217ff804 	addi	r5,r4,-32
    6458:	00800804 	movi	r2,32
    645c:	494ad83a 	srl	r5,r9,r5
    6460:	20807d26 	beq	r4,r2,6658 <__adddf3+0x7e8>
    6464:	00801004 	movi	r2,64
    6468:	1109c83a 	sub	r4,r2,r4
    646c:	4912983a 	sll	r9,r9,r4
    6470:	498cb03a 	or	r6,r9,r6
    6474:	300cc03a 	cmpne	r6,r6,zero
    6478:	298ab03a 	or	r5,r5,r6
    647c:	0013883a 	mov	r9,zero
    6480:	003f1506 	br	60d8 <__ram_exceptions_end+0xfe0040b8>
    6484:	0101ffc4 	movi	r4,2047
    6488:	113f9a1e 	bne	r2,r4,62f4 <__ram_exceptions_end+0xfe0042d4>
    648c:	4811883a 	mov	r8,r9
    6490:	3023883a 	mov	r17,r6
    6494:	1021883a 	mov	r16,r2
    6498:	3825883a 	mov	r18,r7
    649c:	003e9306 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    64a0:	8000161e 	bne	r16,zero,64fc <__adddf3+0x68c>
    64a4:	444ab03a 	or	r5,r8,r17
    64a8:	28005126 	beq	r5,zero,65f0 <__adddf3+0x780>
    64ac:	0108303a 	nor	r4,zero,r4
    64b0:	20004d1e 	bne	r4,zero,65e8 <__adddf3+0x778>
    64b4:	89a3883a 	add	r17,r17,r6
    64b8:	4253883a 	add	r9,r8,r9
    64bc:	898d803a 	cmpltu	r6,r17,r6
    64c0:	3251883a 	add	r8,r6,r9
    64c4:	1021883a 	mov	r16,r2
    64c8:	003f0806 	br	60ec <__ram_exceptions_end+0xfe0040cc>
    64cc:	1000301e 	bne	r2,zero,6590 <__adddf3+0x720>
    64d0:	4984b03a 	or	r2,r9,r6
    64d4:	10007126 	beq	r2,zero,669c <__adddf3+0x82c>
    64d8:	4811883a 	mov	r8,r9
    64dc:	3023883a 	mov	r17,r6
    64e0:	3825883a 	mov	r18,r7
    64e4:	0401ffc4 	movi	r16,2047
    64e8:	003e8006 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    64ec:	4462b03a 	or	r17,r8,r17
    64f0:	8822c03a 	cmpne	r17,r17,zero
    64f4:	0007883a 	mov	r3,zero
    64f8:	003f8b06 	br	6328 <__ram_exceptions_end+0xfe004308>
    64fc:	0141ffc4 	movi	r5,2047
    6500:	11403b26 	beq	r2,r5,65f0 <__adddf3+0x780>
    6504:	0109c83a 	sub	r4,zero,r4
    6508:	42002034 	orhi	r8,r8,128
    650c:	01400e04 	movi	r5,56
    6510:	29006716 	blt	r5,r4,66b0 <__adddf3+0x840>
    6514:	014007c4 	movi	r5,31
    6518:	29007016 	blt	r5,r4,66dc <__adddf3+0x86c>
    651c:	01400804 	movi	r5,32
    6520:	290bc83a 	sub	r5,r5,r4
    6524:	4154983a 	sll	r10,r8,r5
    6528:	890ed83a 	srl	r7,r17,r4
    652c:	894a983a 	sll	r5,r17,r5
    6530:	4108d83a 	srl	r4,r8,r4
    6534:	51e2b03a 	or	r17,r10,r7
    6538:	280ac03a 	cmpne	r5,r5,zero
    653c:	8962b03a 	or	r17,r17,r5
    6540:	89a3883a 	add	r17,r17,r6
    6544:	2253883a 	add	r9,r4,r9
    6548:	898d803a 	cmpltu	r6,r17,r6
    654c:	3251883a 	add	r8,r6,r9
    6550:	1021883a 	mov	r16,r2
    6554:	003ee506 	br	60ec <__ram_exceptions_end+0xfe0040cc>
    6558:	4984b03a 	or	r2,r9,r6
    655c:	103e6326 	beq	r2,zero,5eec <__ram_exceptions_end+0xfe003ecc>
    6560:	8987c83a 	sub	r3,r17,r6
    6564:	88c9803a 	cmpltu	r4,r17,r3
    6568:	4245c83a 	sub	r2,r8,r9
    656c:	1105c83a 	sub	r2,r2,r4
    6570:	1100202c 	andhi	r4,r2,128
    6574:	203ebb26 	beq	r4,zero,6064 <__ram_exceptions_end+0xfe004044>
    6578:	3463c83a 	sub	r17,r6,r17
    657c:	4a07c83a 	sub	r3,r9,r8
    6580:	344d803a 	cmpltu	r6,r6,r17
    6584:	1991c83a 	sub	r8,r3,r6
    6588:	3825883a 	mov	r18,r7
    658c:	003e5706 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    6590:	4984b03a 	or	r2,r9,r6
    6594:	10002e26 	beq	r2,zero,6650 <__adddf3+0x7e0>
    6598:	4004d0fa 	srli	r2,r8,3
    659c:	8822d0fa 	srli	r17,r17,3
    65a0:	4010977a 	slli	r8,r8,29
    65a4:	10c0022c 	andhi	r3,r2,8
    65a8:	4462b03a 	or	r17,r8,r17
    65ac:	18000826 	beq	r3,zero,65d0 <__adddf3+0x760>
    65b0:	4808d0fa 	srli	r4,r9,3
    65b4:	20c0022c 	andhi	r3,r4,8
    65b8:	1800051e 	bne	r3,zero,65d0 <__adddf3+0x760>
    65bc:	300cd0fa 	srli	r6,r6,3
    65c0:	4806977a 	slli	r3,r9,29
    65c4:	2005883a 	mov	r2,r4
    65c8:	3825883a 	mov	r18,r7
    65cc:	19a2b03a 	or	r17,r3,r6
    65d0:	8810d77a 	srli	r8,r17,29
    65d4:	100490fa 	slli	r2,r2,3
    65d8:	882290fa 	slli	r17,r17,3
    65dc:	0401ffc4 	movi	r16,2047
    65e0:	4090b03a 	or	r8,r8,r2
    65e4:	003e4106 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    65e8:	0141ffc4 	movi	r5,2047
    65ec:	117fc71e 	bne	r2,r5,650c <__ram_exceptions_end+0xfe0044ec>
    65f0:	4811883a 	mov	r8,r9
    65f4:	3023883a 	mov	r17,r6
    65f8:	1021883a 	mov	r16,r2
    65fc:	003e3b06 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    6600:	10002f26 	beq	r2,zero,66c0 <__adddf3+0x850>
    6604:	4984b03a 	or	r2,r9,r6
    6608:	10001126 	beq	r2,zero,6650 <__adddf3+0x7e0>
    660c:	4004d0fa 	srli	r2,r8,3
    6610:	8822d0fa 	srli	r17,r17,3
    6614:	4010977a 	slli	r8,r8,29
    6618:	10c0022c 	andhi	r3,r2,8
    661c:	4462b03a 	or	r17,r8,r17
    6620:	183feb26 	beq	r3,zero,65d0 <__ram_exceptions_end+0xfe0045b0>
    6624:	4808d0fa 	srli	r4,r9,3
    6628:	20c0022c 	andhi	r3,r4,8
    662c:	183fe81e 	bne	r3,zero,65d0 <__ram_exceptions_end+0xfe0045b0>
    6630:	300cd0fa 	srli	r6,r6,3
    6634:	4806977a 	slli	r3,r9,29
    6638:	2005883a 	mov	r2,r4
    663c:	19a2b03a 	or	r17,r3,r6
    6640:	003fe306 	br	65d0 <__ram_exceptions_end+0xfe0045b0>
    6644:	0011883a 	mov	r8,zero
    6648:	0005883a 	mov	r2,zero
    664c:	003e3f06 	br	5f4c <__ram_exceptions_end+0xfe003f2c>
    6650:	0401ffc4 	movi	r16,2047
    6654:	003e2506 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    6658:	0013883a 	mov	r9,zero
    665c:	003f8406 	br	6470 <__ram_exceptions_end+0xfe004450>
    6660:	0005883a 	mov	r2,zero
    6664:	0007883a 	mov	r3,zero
    6668:	003e8906 	br	6090 <__ram_exceptions_end+0xfe004070>
    666c:	197ff804 	addi	r5,r3,-32
    6670:	01000804 	movi	r4,32
    6674:	414ad83a 	srl	r5,r8,r5
    6678:	19002426 	beq	r3,r4,670c <__adddf3+0x89c>
    667c:	01001004 	movi	r4,64
    6680:	20c7c83a 	sub	r3,r4,r3
    6684:	40c6983a 	sll	r3,r8,r3
    6688:	1c46b03a 	or	r3,r3,r17
    668c:	1806c03a 	cmpne	r3,r3,zero
    6690:	28e2b03a 	or	r17,r5,r3
    6694:	0007883a 	mov	r3,zero
    6698:	003f2306 	br	6328 <__ram_exceptions_end+0xfe004308>
    669c:	0007883a 	mov	r3,zero
    66a0:	5811883a 	mov	r8,r11
    66a4:	00bfffc4 	movi	r2,-1
    66a8:	0401ffc4 	movi	r16,2047
    66ac:	003e7806 	br	6090 <__ram_exceptions_end+0xfe004070>
    66b0:	4462b03a 	or	r17,r8,r17
    66b4:	8822c03a 	cmpne	r17,r17,zero
    66b8:	0009883a 	mov	r4,zero
    66bc:	003fa006 	br	6540 <__ram_exceptions_end+0xfe004520>
    66c0:	4811883a 	mov	r8,r9
    66c4:	3023883a 	mov	r17,r6
    66c8:	0401ffc4 	movi	r16,2047
    66cc:	003e0706 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    66d0:	4811883a 	mov	r8,r9
    66d4:	3023883a 	mov	r17,r6
    66d8:	003e0406 	br	5eec <__ram_exceptions_end+0xfe003ecc>
    66dc:	21fff804 	addi	r7,r4,-32
    66e0:	01400804 	movi	r5,32
    66e4:	41ced83a 	srl	r7,r8,r7
    66e8:	21400a26 	beq	r4,r5,6714 <__adddf3+0x8a4>
    66ec:	01401004 	movi	r5,64
    66f0:	2909c83a 	sub	r4,r5,r4
    66f4:	4108983a 	sll	r4,r8,r4
    66f8:	2448b03a 	or	r4,r4,r17
    66fc:	2008c03a 	cmpne	r4,r4,zero
    6700:	3922b03a 	or	r17,r7,r4
    6704:	0009883a 	mov	r4,zero
    6708:	003f8d06 	br	6540 <__ram_exceptions_end+0xfe004520>
    670c:	0007883a 	mov	r3,zero
    6710:	003fdd06 	br	6688 <__ram_exceptions_end+0xfe004668>
    6714:	0009883a 	mov	r4,zero
    6718:	003ff706 	br	66f8 <__ram_exceptions_end+0xfe0046d8>

0000671c <__divdf3>:
    671c:	defff004 	addi	sp,sp,-64
    6720:	dc800815 	stw	r18,32(sp)
    6724:	2824d53a 	srli	r18,r5,20
    6728:	dd800c15 	stw	r22,48(sp)
    672c:	282cd7fa 	srli	r22,r5,31
    6730:	dc000615 	stw	r16,24(sp)
    6734:	04000434 	movhi	r16,16
    6738:	843fffc4 	addi	r16,r16,-1
    673c:	dfc00f15 	stw	ra,60(sp)
    6740:	df000e15 	stw	fp,56(sp)
    6744:	ddc00d15 	stw	r23,52(sp)
    6748:	dd400b15 	stw	r21,44(sp)
    674c:	dd000a15 	stw	r20,40(sp)
    6750:	dcc00915 	stw	r19,36(sp)
    6754:	dc400715 	stw	r17,28(sp)
    6758:	9481ffcc 	andi	r18,r18,2047
    675c:	2c20703a 	and	r16,r5,r16
    6760:	b2003fcc 	andi	r8,r22,255
    6764:	90006126 	beq	r18,zero,68ec <__divdf3+0x1d0>
    6768:	0081ffc4 	movi	r2,2047
    676c:	202b883a 	mov	r21,r4
    6770:	90803726 	beq	r18,r2,6850 <__divdf3+0x134>
    6774:	80800434 	orhi	r2,r16,16
    6778:	100490fa 	slli	r2,r2,3
    677c:	2020d77a 	srli	r16,r4,29
    6780:	202a90fa 	slli	r21,r4,3
    6784:	94bf0044 	addi	r18,r18,-1023
    6788:	80a0b03a 	or	r16,r16,r2
    678c:	0013883a 	mov	r9,zero
    6790:	000b883a 	mov	r5,zero
    6794:	3806d53a 	srli	r3,r7,20
    6798:	382ed7fa 	srli	r23,r7,31
    679c:	04400434 	movhi	r17,16
    67a0:	8c7fffc4 	addi	r17,r17,-1
    67a4:	18c1ffcc 	andi	r3,r3,2047
    67a8:	3029883a 	mov	r20,r6
    67ac:	3c62703a 	and	r17,r7,r17
    67b0:	bf003fcc 	andi	fp,r23,255
    67b4:	18006e26 	beq	r3,zero,6970 <__divdf3+0x254>
    67b8:	0081ffc4 	movi	r2,2047
    67bc:	18806626 	beq	r3,r2,6958 <__divdf3+0x23c>
    67c0:	88800434 	orhi	r2,r17,16
    67c4:	100490fa 	slli	r2,r2,3
    67c8:	3022d77a 	srli	r17,r6,29
    67cc:	302890fa 	slli	r20,r6,3
    67d0:	18ff0044 	addi	r3,r3,-1023
    67d4:	88a2b03a 	or	r17,r17,r2
    67d8:	000f883a 	mov	r7,zero
    67dc:	b5e6f03a 	xor	r19,r22,r23
    67e0:	3a4cb03a 	or	r6,r7,r9
    67e4:	008003c4 	movi	r2,15
    67e8:	9809883a 	mov	r4,r19
    67ec:	90c7c83a 	sub	r3,r18,r3
    67f0:	9cc03fcc 	andi	r19,r19,255
    67f4:	11809636 	bltu	r2,r6,6a50 <__divdf3+0x334>
    67f8:	300c90ba 	slli	r6,r6,2
    67fc:	00800034 	movhi	r2,0
    6800:	109a0404 	addi	r2,r2,26640
    6804:	308d883a 	add	r6,r6,r2
    6808:	30800017 	ldw	r2,0(r6)
    680c:	1000683a 	jmp	r2
    6810:	00006a50 	cmplti	zero,zero,425
    6814:	00006888 	cmpgei	zero,zero,418
    6818:	00006a40 	call	6a4 <maxpool+0x20>
    681c:	0000687c 	xorhi	zero,zero,417
    6820:	00006a40 	call	6a4 <maxpool+0x20>
    6824:	00006a14 	movui	zero,424
    6828:	00006a40 	call	6a4 <maxpool+0x20>
    682c:	0000687c 	xorhi	zero,zero,417
    6830:	00006888 	cmpgei	zero,zero,418
    6834:	00006888 	cmpgei	zero,zero,418
    6838:	00006a14 	movui	zero,424
    683c:	0000687c 	xorhi	zero,zero,417
    6840:	0000686c 	andhi	zero,zero,417
    6844:	0000686c 	andhi	zero,zero,417
    6848:	0000686c 	andhi	zero,zero,417
    684c:	00006dd8 	cmpnei	zero,zero,439
    6850:	2404b03a 	or	r2,r4,r16
    6854:	10006c1e 	bne	r2,zero,6a08 <__divdf3+0x2ec>
    6858:	02400204 	movi	r9,8
    685c:	0021883a 	mov	r16,zero
    6860:	002b883a 	mov	r21,zero
    6864:	01400084 	movi	r5,2
    6868:	003fca06 	br	6794 <__ram_exceptions_end+0xfe004774>
    686c:	8023883a 	mov	r17,r16
    6870:	a829883a 	mov	r20,r21
    6874:	4039883a 	mov	fp,r8
    6878:	280f883a 	mov	r7,r5
    687c:	00800084 	movi	r2,2
    6880:	3881601e 	bne	r7,r2,6e04 <__divdf3+0x6e8>
    6884:	e027883a 	mov	r19,fp
    6888:	9900004c 	andi	r4,r19,1
    688c:	0081ffc4 	movi	r2,2047
    6890:	0021883a 	mov	r16,zero
    6894:	002b883a 	mov	r21,zero
    6898:	1004953a 	slli	r2,r2,20
    689c:	20c03fcc 	andi	r3,r4,255
    68a0:	01400434 	movhi	r5,16
    68a4:	297fffc4 	addi	r5,r5,-1
    68a8:	180697fa 	slli	r3,r3,31
    68ac:	8160703a 	and	r16,r16,r5
    68b0:	80a0b03a 	or	r16,r16,r2
    68b4:	80c6b03a 	or	r3,r16,r3
    68b8:	a805883a 	mov	r2,r21
    68bc:	dfc00f17 	ldw	ra,60(sp)
    68c0:	df000e17 	ldw	fp,56(sp)
    68c4:	ddc00d17 	ldw	r23,52(sp)
    68c8:	dd800c17 	ldw	r22,48(sp)
    68cc:	dd400b17 	ldw	r21,44(sp)
    68d0:	dd000a17 	ldw	r20,40(sp)
    68d4:	dcc00917 	ldw	r19,36(sp)
    68d8:	dc800817 	ldw	r18,32(sp)
    68dc:	dc400717 	ldw	r17,28(sp)
    68e0:	dc000617 	ldw	r16,24(sp)
    68e4:	dec01004 	addi	sp,sp,64
    68e8:	f800283a 	ret
    68ec:	2404b03a 	or	r2,r4,r16
    68f0:	2023883a 	mov	r17,r4
    68f4:	10003f26 	beq	r2,zero,69f4 <__divdf3+0x2d8>
    68f8:	80015e26 	beq	r16,zero,6e74 <__divdf3+0x758>
    68fc:	8009883a 	mov	r4,r16
    6900:	d9800215 	stw	r6,8(sp)
    6904:	d9c00515 	stw	r7,20(sp)
    6908:	da000415 	stw	r8,16(sp)
    690c:	00089680 	call	8968 <__clzsi2>
    6910:	d9800217 	ldw	r6,8(sp)
    6914:	d9c00517 	ldw	r7,20(sp)
    6918:	da000417 	ldw	r8,16(sp)
    691c:	113ffd44 	addi	r4,r2,-11
    6920:	00c00704 	movi	r3,28
    6924:	19014f16 	blt	r3,r4,6e64 <__divdf3+0x748>
    6928:	00c00744 	movi	r3,29
    692c:	157ffe04 	addi	r21,r2,-8
    6930:	1907c83a 	sub	r3,r3,r4
    6934:	8560983a 	sll	r16,r16,r21
    6938:	88c6d83a 	srl	r3,r17,r3
    693c:	8d6a983a 	sll	r21,r17,r21
    6940:	1c20b03a 	or	r16,r3,r16
    6944:	1080fcc4 	addi	r2,r2,1011
    6948:	00a5c83a 	sub	r18,zero,r2
    694c:	0013883a 	mov	r9,zero
    6950:	000b883a 	mov	r5,zero
    6954:	003f8f06 	br	6794 <__ram_exceptions_end+0xfe004774>
    6958:	3444b03a 	or	r2,r6,r17
    695c:	1000231e 	bne	r2,zero,69ec <__divdf3+0x2d0>
    6960:	0023883a 	mov	r17,zero
    6964:	0029883a 	mov	r20,zero
    6968:	01c00084 	movi	r7,2
    696c:	003f9b06 	br	67dc <__ram_exceptions_end+0xfe0047bc>
    6970:	3444b03a 	or	r2,r6,r17
    6974:	10001926 	beq	r2,zero,69dc <__divdf3+0x2c0>
    6978:	88014b26 	beq	r17,zero,6ea8 <__divdf3+0x78c>
    697c:	8809883a 	mov	r4,r17
    6980:	d9400115 	stw	r5,4(sp)
    6984:	d9800215 	stw	r6,8(sp)
    6988:	da000415 	stw	r8,16(sp)
    698c:	da400315 	stw	r9,12(sp)
    6990:	00089680 	call	8968 <__clzsi2>
    6994:	d9400117 	ldw	r5,4(sp)
    6998:	d9800217 	ldw	r6,8(sp)
    699c:	da000417 	ldw	r8,16(sp)
    69a0:	da400317 	ldw	r9,12(sp)
    69a4:	113ffd44 	addi	r4,r2,-11
    69a8:	00c00704 	movi	r3,28
    69ac:	19013a16 	blt	r3,r4,6e98 <__divdf3+0x77c>
    69b0:	00c00744 	movi	r3,29
    69b4:	153ffe04 	addi	r20,r2,-8
    69b8:	1907c83a 	sub	r3,r3,r4
    69bc:	8d22983a 	sll	r17,r17,r20
    69c0:	30c6d83a 	srl	r3,r6,r3
    69c4:	3528983a 	sll	r20,r6,r20
    69c8:	1c62b03a 	or	r17,r3,r17
    69cc:	1080fcc4 	addi	r2,r2,1011
    69d0:	0087c83a 	sub	r3,zero,r2
    69d4:	000f883a 	mov	r7,zero
    69d8:	003f8006 	br	67dc <__ram_exceptions_end+0xfe0047bc>
    69dc:	0023883a 	mov	r17,zero
    69e0:	0029883a 	mov	r20,zero
    69e4:	01c00044 	movi	r7,1
    69e8:	003f7c06 	br	67dc <__ram_exceptions_end+0xfe0047bc>
    69ec:	01c000c4 	movi	r7,3
    69f0:	003f7a06 	br	67dc <__ram_exceptions_end+0xfe0047bc>
    69f4:	02400104 	movi	r9,4
    69f8:	0021883a 	mov	r16,zero
    69fc:	002b883a 	mov	r21,zero
    6a00:	01400044 	movi	r5,1
    6a04:	003f6306 	br	6794 <__ram_exceptions_end+0xfe004774>
    6a08:	02400304 	movi	r9,12
    6a0c:	014000c4 	movi	r5,3
    6a10:	003f6006 	br	6794 <__ram_exceptions_end+0xfe004774>
    6a14:	04000434 	movhi	r16,16
    6a18:	0009883a 	mov	r4,zero
    6a1c:	843fffc4 	addi	r16,r16,-1
    6a20:	057fffc4 	movi	r21,-1
    6a24:	0081ffc4 	movi	r2,2047
    6a28:	003f9b06 	br	6898 <__ram_exceptions_end+0xfe004878>
    6a2c:	00c00044 	movi	r3,1
    6a30:	1887c83a 	sub	r3,r3,r2
    6a34:	01000e04 	movi	r4,56
    6a38:	20c1530e 	bge	r4,r3,6f88 <__divdf3+0x86c>
    6a3c:	9900004c 	andi	r4,r19,1
    6a40:	0005883a 	mov	r2,zero
    6a44:	0021883a 	mov	r16,zero
    6a48:	002b883a 	mov	r21,zero
    6a4c:	003f9206 	br	6898 <__ram_exceptions_end+0xfe004878>
    6a50:	8c012e36 	bltu	r17,r16,6f0c <__divdf3+0x7f0>
    6a54:	84412c26 	beq	r16,r17,6f08 <__divdf3+0x7ec>
    6a58:	a82f883a 	mov	r23,r21
    6a5c:	18ffffc4 	addi	r3,r3,-1
    6a60:	002b883a 	mov	r21,zero
    6a64:	a004d63a 	srli	r2,r20,24
    6a68:	8822923a 	slli	r17,r17,8
    6a6c:	a028923a 	slli	r20,r20,8
    6a70:	8009883a 	mov	r4,r16
    6a74:	88acb03a 	or	r22,r17,r2
    6a78:	dd000015 	stw	r20,0(sp)
    6a7c:	b028d43a 	srli	r20,r22,16
    6a80:	d8c00215 	stw	r3,8(sp)
    6a84:	b4bfffcc 	andi	r18,r22,65535
    6a88:	a00b883a 	mov	r5,r20
    6a8c:	00046f00 	call	46f0 <__udivsi3>
    6a90:	100b883a 	mov	r5,r2
    6a94:	9009883a 	mov	r4,r18
    6a98:	1023883a 	mov	r17,r2
    6a9c:	00047ac0 	call	47ac <__mulsi3>
    6aa0:	8009883a 	mov	r4,r16
    6aa4:	a00b883a 	mov	r5,r20
    6aa8:	1039883a 	mov	fp,r2
    6aac:	00047540 	call	4754 <__umodsi3>
    6ab0:	1004943a 	slli	r2,r2,16
    6ab4:	b808d43a 	srli	r4,r23,16
    6ab8:	d8c00217 	ldw	r3,8(sp)
    6abc:	2084b03a 	or	r2,r4,r2
    6ac0:	1700062e 	bgeu	r2,fp,6adc <__divdf3+0x3c0>
    6ac4:	1585883a 	add	r2,r2,r22
    6ac8:	893fffc4 	addi	r4,r17,-1
    6acc:	15811d36 	bltu	r2,r22,6f44 <__divdf3+0x828>
    6ad0:	17011c2e 	bgeu	r2,fp,6f44 <__divdf3+0x828>
    6ad4:	8c7fff84 	addi	r17,r17,-2
    6ad8:	1585883a 	add	r2,r2,r22
    6adc:	1739c83a 	sub	fp,r2,fp
    6ae0:	a00b883a 	mov	r5,r20
    6ae4:	e009883a 	mov	r4,fp
    6ae8:	d8c00215 	stw	r3,8(sp)
    6aec:	00046f00 	call	46f0 <__udivsi3>
    6af0:	100b883a 	mov	r5,r2
    6af4:	9009883a 	mov	r4,r18
    6af8:	1021883a 	mov	r16,r2
    6afc:	00047ac0 	call	47ac <__mulsi3>
    6b00:	a00b883a 	mov	r5,r20
    6b04:	e009883a 	mov	r4,fp
    6b08:	d8800415 	stw	r2,16(sp)
    6b0c:	00047540 	call	4754 <__umodsi3>
    6b10:	1004943a 	slli	r2,r2,16
    6b14:	da000417 	ldw	r8,16(sp)
    6b18:	bdffffcc 	andi	r23,r23,65535
    6b1c:	b884b03a 	or	r2,r23,r2
    6b20:	d8c00217 	ldw	r3,8(sp)
    6b24:	1200062e 	bgeu	r2,r8,6b40 <__divdf3+0x424>
    6b28:	1585883a 	add	r2,r2,r22
    6b2c:	813fffc4 	addi	r4,r16,-1
    6b30:	15810236 	bltu	r2,r22,6f3c <__divdf3+0x820>
    6b34:	1201012e 	bgeu	r2,r8,6f3c <__divdf3+0x820>
    6b38:	843fff84 	addi	r16,r16,-2
    6b3c:	1585883a 	add	r2,r2,r22
    6b40:	8822943a 	slli	r17,r17,16
    6b44:	d9800017 	ldw	r6,0(sp)
    6b48:	1211c83a 	sub	r8,r2,r8
    6b4c:	8c22b03a 	or	r17,r17,r16
    6b50:	373fffcc 	andi	fp,r6,65535
    6b54:	8abfffcc 	andi	r10,r17,65535
    6b58:	8820d43a 	srli	r16,r17,16
    6b5c:	5009883a 	mov	r4,r10
    6b60:	e00b883a 	mov	r5,fp
    6b64:	302ed43a 	srli	r23,r6,16
    6b68:	d8c00215 	stw	r3,8(sp)
    6b6c:	da000415 	stw	r8,16(sp)
    6b70:	da800115 	stw	r10,4(sp)
    6b74:	00047ac0 	call	47ac <__mulsi3>
    6b78:	800b883a 	mov	r5,r16
    6b7c:	e009883a 	mov	r4,fp
    6b80:	d8800515 	stw	r2,20(sp)
    6b84:	00047ac0 	call	47ac <__mulsi3>
    6b88:	8009883a 	mov	r4,r16
    6b8c:	b80b883a 	mov	r5,r23
    6b90:	d8800315 	stw	r2,12(sp)
    6b94:	00047ac0 	call	47ac <__mulsi3>
    6b98:	da800117 	ldw	r10,4(sp)
    6b9c:	b80b883a 	mov	r5,r23
    6ba0:	1021883a 	mov	r16,r2
    6ba4:	5009883a 	mov	r4,r10
    6ba8:	00047ac0 	call	47ac <__mulsi3>
    6bac:	d9c00517 	ldw	r7,20(sp)
    6bb0:	da400317 	ldw	r9,12(sp)
    6bb4:	d8c00217 	ldw	r3,8(sp)
    6bb8:	3808d43a 	srli	r4,r7,16
    6bbc:	1245883a 	add	r2,r2,r9
    6bc0:	da000417 	ldw	r8,16(sp)
    6bc4:	2085883a 	add	r2,r4,r2
    6bc8:	1240022e 	bgeu	r2,r9,6bd4 <__divdf3+0x4b8>
    6bcc:	01000074 	movhi	r4,1
    6bd0:	8121883a 	add	r16,r16,r4
    6bd4:	1008d43a 	srli	r4,r2,16
    6bd8:	1004943a 	slli	r2,r2,16
    6bdc:	39ffffcc 	andi	r7,r7,65535
    6be0:	2409883a 	add	r4,r4,r16
    6be4:	11c5883a 	add	r2,r2,r7
    6be8:	4100bb36 	bltu	r8,r4,6ed8 <__divdf3+0x7bc>
    6bec:	4100d726 	beq	r8,r4,6f4c <__divdf3+0x830>
    6bf0:	4109c83a 	sub	r4,r8,r4
    6bf4:	a8a1c83a 	sub	r16,r21,r2
    6bf8:	ac2b803a 	cmpltu	r21,r21,r16
    6bfc:	256bc83a 	sub	r21,r4,r21
    6c00:	b540d926 	beq	r22,r21,6f68 <__divdf3+0x84c>
    6c04:	a00b883a 	mov	r5,r20
    6c08:	a809883a 	mov	r4,r21
    6c0c:	d8c00215 	stw	r3,8(sp)
    6c10:	00046f00 	call	46f0 <__udivsi3>
    6c14:	100b883a 	mov	r5,r2
    6c18:	9009883a 	mov	r4,r18
    6c1c:	d8800515 	stw	r2,20(sp)
    6c20:	00047ac0 	call	47ac <__mulsi3>
    6c24:	a809883a 	mov	r4,r21
    6c28:	a00b883a 	mov	r5,r20
    6c2c:	d8800415 	stw	r2,16(sp)
    6c30:	00047540 	call	4754 <__umodsi3>
    6c34:	1004943a 	slli	r2,r2,16
    6c38:	8008d43a 	srli	r4,r16,16
    6c3c:	da000417 	ldw	r8,16(sp)
    6c40:	d8c00217 	ldw	r3,8(sp)
    6c44:	2084b03a 	or	r2,r4,r2
    6c48:	d9c00517 	ldw	r7,20(sp)
    6c4c:	1200062e 	bgeu	r2,r8,6c68 <__divdf3+0x54c>
    6c50:	1585883a 	add	r2,r2,r22
    6c54:	393fffc4 	addi	r4,r7,-1
    6c58:	1580c536 	bltu	r2,r22,6f70 <__divdf3+0x854>
    6c5c:	1200c42e 	bgeu	r2,r8,6f70 <__divdf3+0x854>
    6c60:	39ffff84 	addi	r7,r7,-2
    6c64:	1585883a 	add	r2,r2,r22
    6c68:	122bc83a 	sub	r21,r2,r8
    6c6c:	a00b883a 	mov	r5,r20
    6c70:	a809883a 	mov	r4,r21
    6c74:	d8c00215 	stw	r3,8(sp)
    6c78:	d9c00515 	stw	r7,20(sp)
    6c7c:	00046f00 	call	46f0 <__udivsi3>
    6c80:	9009883a 	mov	r4,r18
    6c84:	100b883a 	mov	r5,r2
    6c88:	d8800415 	stw	r2,16(sp)
    6c8c:	00047ac0 	call	47ac <__mulsi3>
    6c90:	a809883a 	mov	r4,r21
    6c94:	a00b883a 	mov	r5,r20
    6c98:	1025883a 	mov	r18,r2
    6c9c:	00047540 	call	4754 <__umodsi3>
    6ca0:	1004943a 	slli	r2,r2,16
    6ca4:	813fffcc 	andi	r4,r16,65535
    6ca8:	d8c00217 	ldw	r3,8(sp)
    6cac:	20a0b03a 	or	r16,r4,r2
    6cb0:	d9c00517 	ldw	r7,20(sp)
    6cb4:	da000417 	ldw	r8,16(sp)
    6cb8:	8480062e 	bgeu	r16,r18,6cd4 <__divdf3+0x5b8>
    6cbc:	85a1883a 	add	r16,r16,r22
    6cc0:	40bfffc4 	addi	r2,r8,-1
    6cc4:	8580ac36 	bltu	r16,r22,6f78 <__divdf3+0x85c>
    6cc8:	8480ab2e 	bgeu	r16,r18,6f78 <__divdf3+0x85c>
    6ccc:	423fff84 	addi	r8,r8,-2
    6cd0:	85a1883a 	add	r16,r16,r22
    6cd4:	3804943a 	slli	r2,r7,16
    6cd8:	84a1c83a 	sub	r16,r16,r18
    6cdc:	e009883a 	mov	r4,fp
    6ce0:	1228b03a 	or	r20,r2,r8
    6ce4:	a1ffffcc 	andi	r7,r20,65535
    6ce8:	a024d43a 	srli	r18,r20,16
    6cec:	380b883a 	mov	r5,r7
    6cf0:	d8c00215 	stw	r3,8(sp)
    6cf4:	d9c00515 	stw	r7,20(sp)
    6cf8:	00047ac0 	call	47ac <__mulsi3>
    6cfc:	900b883a 	mov	r5,r18
    6d00:	e009883a 	mov	r4,fp
    6d04:	102b883a 	mov	r21,r2
    6d08:	00047ac0 	call	47ac <__mulsi3>
    6d0c:	900b883a 	mov	r5,r18
    6d10:	b809883a 	mov	r4,r23
    6d14:	1039883a 	mov	fp,r2
    6d18:	00047ac0 	call	47ac <__mulsi3>
    6d1c:	d9c00517 	ldw	r7,20(sp)
    6d20:	b80b883a 	mov	r5,r23
    6d24:	1025883a 	mov	r18,r2
    6d28:	3809883a 	mov	r4,r7
    6d2c:	00047ac0 	call	47ac <__mulsi3>
    6d30:	a808d43a 	srli	r4,r21,16
    6d34:	1705883a 	add	r2,r2,fp
    6d38:	d8c00217 	ldw	r3,8(sp)
    6d3c:	2085883a 	add	r2,r4,r2
    6d40:	1700022e 	bgeu	r2,fp,6d4c <__divdf3+0x630>
    6d44:	01000074 	movhi	r4,1
    6d48:	9125883a 	add	r18,r18,r4
    6d4c:	1008d43a 	srli	r4,r2,16
    6d50:	1004943a 	slli	r2,r2,16
    6d54:	ad7fffcc 	andi	r21,r21,65535
    6d58:	2489883a 	add	r4,r4,r18
    6d5c:	1545883a 	add	r2,r2,r21
    6d60:	81003836 	bltu	r16,r4,6e44 <__divdf3+0x728>
    6d64:	81003626 	beq	r16,r4,6e40 <__divdf3+0x724>
    6d68:	a5000054 	ori	r20,r20,1
    6d6c:	1880ffc4 	addi	r2,r3,1023
    6d70:	00bf2e0e 	bge	zero,r2,6a2c <__ram_exceptions_end+0xfe004a0c>
    6d74:	a10001cc 	andi	r4,r20,7
    6d78:	20000726 	beq	r4,zero,6d98 <__divdf3+0x67c>
    6d7c:	a10003cc 	andi	r4,r20,15
    6d80:	01400104 	movi	r5,4
    6d84:	21400426 	beq	r4,r5,6d98 <__divdf3+0x67c>
    6d88:	a149883a 	add	r4,r20,r5
    6d8c:	2529803a 	cmpltu	r20,r4,r20
    6d90:	8d23883a 	add	r17,r17,r20
    6d94:	2029883a 	mov	r20,r4
    6d98:	8900402c 	andhi	r4,r17,256
    6d9c:	20000426 	beq	r4,zero,6db0 <__divdf3+0x694>
    6da0:	18810004 	addi	r2,r3,1024
    6da4:	00ffc034 	movhi	r3,65280
    6da8:	18ffffc4 	addi	r3,r3,-1
    6dac:	88e2703a 	and	r17,r17,r3
    6db0:	00c1ff84 	movi	r3,2046
    6db4:	18beb416 	blt	r3,r2,6888 <__ram_exceptions_end+0xfe004868>
    6db8:	a028d0fa 	srli	r20,r20,3
    6dbc:	882a977a 	slli	r21,r17,29
    6dc0:	8820927a 	slli	r16,r17,9
    6dc4:	1081ffcc 	andi	r2,r2,2047
    6dc8:	ad2ab03a 	or	r21,r21,r20
    6dcc:	8020d33a 	srli	r16,r16,12
    6dd0:	9900004c 	andi	r4,r19,1
    6dd4:	003eb006 	br	6898 <__ram_exceptions_end+0xfe004878>
    6dd8:	8080022c 	andhi	r2,r16,8
    6ddc:	10001226 	beq	r2,zero,6e28 <__divdf3+0x70c>
    6de0:	8880022c 	andhi	r2,r17,8
    6de4:	1000101e 	bne	r2,zero,6e28 <__divdf3+0x70c>
    6de8:	00800434 	movhi	r2,16
    6dec:	8c000234 	orhi	r16,r17,8
    6df0:	10bfffc4 	addi	r2,r2,-1
    6df4:	b809883a 	mov	r4,r23
    6df8:	80a0703a 	and	r16,r16,r2
    6dfc:	a02b883a 	mov	r21,r20
    6e00:	003f0806 	br	6a24 <__ram_exceptions_end+0xfe004a04>
    6e04:	008000c4 	movi	r2,3
    6e08:	3880b126 	beq	r7,r2,70d0 <__divdf3+0x9b4>
    6e0c:	00800044 	movi	r2,1
    6e10:	38805b1e 	bne	r7,r2,6f80 <__divdf3+0x864>
    6e14:	e009883a 	mov	r4,fp
    6e18:	0005883a 	mov	r2,zero
    6e1c:	0021883a 	mov	r16,zero
    6e20:	002b883a 	mov	r21,zero
    6e24:	003e9c06 	br	6898 <__ram_exceptions_end+0xfe004878>
    6e28:	00800434 	movhi	r2,16
    6e2c:	84000234 	orhi	r16,r16,8
    6e30:	10bfffc4 	addi	r2,r2,-1
    6e34:	b009883a 	mov	r4,r22
    6e38:	80a0703a 	and	r16,r16,r2
    6e3c:	003ef906 	br	6a24 <__ram_exceptions_end+0xfe004a04>
    6e40:	103fca26 	beq	r2,zero,6d6c <__ram_exceptions_end+0xfe004d4c>
    6e44:	b421883a 	add	r16,r22,r16
    6e48:	a17fffc4 	addi	r5,r20,-1
    6e4c:	8580422e 	bgeu	r16,r22,6f58 <__divdf3+0x83c>
    6e50:	2829883a 	mov	r20,r5
    6e54:	813fc41e 	bne	r16,r4,6d68 <__ram_exceptions_end+0xfe004d48>
    6e58:	d9800017 	ldw	r6,0(sp)
    6e5c:	30bfc21e 	bne	r6,r2,6d68 <__ram_exceptions_end+0xfe004d48>
    6e60:	003fc206 	br	6d6c <__ram_exceptions_end+0xfe004d4c>
    6e64:	143ff604 	addi	r16,r2,-40
    6e68:	8c20983a 	sll	r16,r17,r16
    6e6c:	002b883a 	mov	r21,zero
    6e70:	003eb406 	br	6944 <__ram_exceptions_end+0xfe004924>
    6e74:	d9800215 	stw	r6,8(sp)
    6e78:	d9c00515 	stw	r7,20(sp)
    6e7c:	da000415 	stw	r8,16(sp)
    6e80:	00089680 	call	8968 <__clzsi2>
    6e84:	10800804 	addi	r2,r2,32
    6e88:	da000417 	ldw	r8,16(sp)
    6e8c:	d9c00517 	ldw	r7,20(sp)
    6e90:	d9800217 	ldw	r6,8(sp)
    6e94:	003ea106 	br	691c <__ram_exceptions_end+0xfe0048fc>
    6e98:	147ff604 	addi	r17,r2,-40
    6e9c:	3462983a 	sll	r17,r6,r17
    6ea0:	0029883a 	mov	r20,zero
    6ea4:	003ec906 	br	69cc <__ram_exceptions_end+0xfe0049ac>
    6ea8:	3009883a 	mov	r4,r6
    6eac:	d9400115 	stw	r5,4(sp)
    6eb0:	d9800215 	stw	r6,8(sp)
    6eb4:	da000415 	stw	r8,16(sp)
    6eb8:	da400315 	stw	r9,12(sp)
    6ebc:	00089680 	call	8968 <__clzsi2>
    6ec0:	10800804 	addi	r2,r2,32
    6ec4:	da400317 	ldw	r9,12(sp)
    6ec8:	da000417 	ldw	r8,16(sp)
    6ecc:	d9800217 	ldw	r6,8(sp)
    6ed0:	d9400117 	ldw	r5,4(sp)
    6ed4:	003eb306 	br	69a4 <__ram_exceptions_end+0xfe004984>
    6ed8:	d9800017 	ldw	r6,0(sp)
    6edc:	a9ab883a 	add	r21,r21,r6
    6ee0:	a98b803a 	cmpltu	r5,r21,r6
    6ee4:	2d8b883a 	add	r5,r5,r22
    6ee8:	2a11883a 	add	r8,r5,r8
    6eec:	897fffc4 	addi	r5,r17,-1
    6ef0:	b2000c2e 	bgeu	r22,r8,6f24 <__divdf3+0x808>
    6ef4:	41003f36 	bltu	r8,r4,6ff4 <__divdf3+0x8d8>
    6ef8:	22006c26 	beq	r4,r8,70ac <__divdf3+0x990>
    6efc:	4109c83a 	sub	r4,r8,r4
    6f00:	2823883a 	mov	r17,r5
    6f04:	003f3b06 	br	6bf4 <__ram_exceptions_end+0xfe004bd4>
    6f08:	ad3ed336 	bltu	r21,r20,6a58 <__ram_exceptions_end+0xfe004a38>
    6f0c:	a804d07a 	srli	r2,r21,1
    6f10:	802e97fa 	slli	r23,r16,31
    6f14:	a82a97fa 	slli	r21,r21,31
    6f18:	8020d07a 	srli	r16,r16,1
    6f1c:	b8aeb03a 	or	r23,r23,r2
    6f20:	003ed006 	br	6a64 <__ram_exceptions_end+0xfe004a44>
    6f24:	b23ff51e 	bne	r22,r8,6efc <__ram_exceptions_end+0xfe004edc>
    6f28:	d9800017 	ldw	r6,0(sp)
    6f2c:	a9bff12e 	bgeu	r21,r6,6ef4 <__ram_exceptions_end+0xfe004ed4>
    6f30:	b109c83a 	sub	r4,r22,r4
    6f34:	2823883a 	mov	r17,r5
    6f38:	003f2e06 	br	6bf4 <__ram_exceptions_end+0xfe004bd4>
    6f3c:	2021883a 	mov	r16,r4
    6f40:	003eff06 	br	6b40 <__ram_exceptions_end+0xfe004b20>
    6f44:	2023883a 	mov	r17,r4
    6f48:	003ee406 	br	6adc <__ram_exceptions_end+0xfe004abc>
    6f4c:	a8bfe236 	bltu	r21,r2,6ed8 <__ram_exceptions_end+0xfe004eb8>
    6f50:	0009883a 	mov	r4,zero
    6f54:	003f2706 	br	6bf4 <__ram_exceptions_end+0xfe004bd4>
    6f58:	81002d36 	bltu	r16,r4,7010 <__divdf3+0x8f4>
    6f5c:	24005626 	beq	r4,r16,70b8 <__divdf3+0x99c>
    6f60:	2829883a 	mov	r20,r5
    6f64:	003f8006 	br	6d68 <__ram_exceptions_end+0xfe004d48>
    6f68:	053fffc4 	movi	r20,-1
    6f6c:	003f7f06 	br	6d6c <__ram_exceptions_end+0xfe004d4c>
    6f70:	200f883a 	mov	r7,r4
    6f74:	003f3c06 	br	6c68 <__ram_exceptions_end+0xfe004c48>
    6f78:	1011883a 	mov	r8,r2
    6f7c:	003f5506 	br	6cd4 <__ram_exceptions_end+0xfe004cb4>
    6f80:	e027883a 	mov	r19,fp
    6f84:	003f7906 	br	6d6c <__ram_exceptions_end+0xfe004d4c>
    6f88:	010007c4 	movi	r4,31
    6f8c:	20c02816 	blt	r4,r3,7030 <__divdf3+0x914>
    6f90:	00800804 	movi	r2,32
    6f94:	10c5c83a 	sub	r2,r2,r3
    6f98:	888a983a 	sll	r5,r17,r2
    6f9c:	a0c8d83a 	srl	r4,r20,r3
    6fa0:	a084983a 	sll	r2,r20,r2
    6fa4:	88e2d83a 	srl	r17,r17,r3
    6fa8:	2906b03a 	or	r3,r5,r4
    6fac:	1004c03a 	cmpne	r2,r2,zero
    6fb0:	1886b03a 	or	r3,r3,r2
    6fb4:	188001cc 	andi	r2,r3,7
    6fb8:	10000726 	beq	r2,zero,6fd8 <__divdf3+0x8bc>
    6fbc:	188003cc 	andi	r2,r3,15
    6fc0:	01000104 	movi	r4,4
    6fc4:	11000426 	beq	r2,r4,6fd8 <__divdf3+0x8bc>
    6fc8:	1805883a 	mov	r2,r3
    6fcc:	10c00104 	addi	r3,r2,4
    6fd0:	1885803a 	cmpltu	r2,r3,r2
    6fd4:	88a3883a 	add	r17,r17,r2
    6fd8:	8880202c 	andhi	r2,r17,128
    6fdc:	10002926 	beq	r2,zero,7084 <__divdf3+0x968>
    6fe0:	9900004c 	andi	r4,r19,1
    6fe4:	00800044 	movi	r2,1
    6fe8:	0021883a 	mov	r16,zero
    6fec:	002b883a 	mov	r21,zero
    6ff0:	003e2906 	br	6898 <__ram_exceptions_end+0xfe004878>
    6ff4:	d9800017 	ldw	r6,0(sp)
    6ff8:	8c7fff84 	addi	r17,r17,-2
    6ffc:	a9ab883a 	add	r21,r21,r6
    7000:	a98b803a 	cmpltu	r5,r21,r6
    7004:	2d8b883a 	add	r5,r5,r22
    7008:	2a11883a 	add	r8,r5,r8
    700c:	003ef806 	br	6bf0 <__ram_exceptions_end+0xfe004bd0>
    7010:	d9800017 	ldw	r6,0(sp)
    7014:	318f883a 	add	r7,r6,r6
    7018:	398b803a 	cmpltu	r5,r7,r6
    701c:	2d8d883a 	add	r6,r5,r22
    7020:	81a1883a 	add	r16,r16,r6
    7024:	a17fff84 	addi	r5,r20,-2
    7028:	d9c00015 	stw	r7,0(sp)
    702c:	003f8806 	br	6e50 <__ram_exceptions_end+0xfe004e30>
    7030:	013ff844 	movi	r4,-31
    7034:	2085c83a 	sub	r2,r4,r2
    7038:	8888d83a 	srl	r4,r17,r2
    703c:	00800804 	movi	r2,32
    7040:	18802126 	beq	r3,r2,70c8 <__divdf3+0x9ac>
    7044:	04001004 	movi	r16,64
    7048:	80c7c83a 	sub	r3,r16,r3
    704c:	88e0983a 	sll	r16,r17,r3
    7050:	8504b03a 	or	r2,r16,r20
    7054:	1004c03a 	cmpne	r2,r2,zero
    7058:	2084b03a 	or	r2,r4,r2
    705c:	144001cc 	andi	r17,r2,7
    7060:	88000d1e 	bne	r17,zero,7098 <__divdf3+0x97c>
    7064:	0021883a 	mov	r16,zero
    7068:	102ad0fa 	srli	r21,r2,3
    706c:	9900004c 	andi	r4,r19,1
    7070:	0005883a 	mov	r2,zero
    7074:	ac6ab03a 	or	r21,r21,r17
    7078:	003e0706 	br	6898 <__ram_exceptions_end+0xfe004878>
    707c:	1007883a 	mov	r3,r2
    7080:	0023883a 	mov	r17,zero
    7084:	8820927a 	slli	r16,r17,9
    7088:	1805883a 	mov	r2,r3
    708c:	8822977a 	slli	r17,r17,29
    7090:	8020d33a 	srli	r16,r16,12
    7094:	003ff406 	br	7068 <__ram_exceptions_end+0xfe005048>
    7098:	10c003cc 	andi	r3,r2,15
    709c:	01000104 	movi	r4,4
    70a0:	193ff626 	beq	r3,r4,707c <__ram_exceptions_end+0xfe00505c>
    70a4:	0023883a 	mov	r17,zero
    70a8:	003fc806 	br	6fcc <__ram_exceptions_end+0xfe004fac>
    70ac:	a8bfd136 	bltu	r21,r2,6ff4 <__ram_exceptions_end+0xfe004fd4>
    70b0:	2823883a 	mov	r17,r5
    70b4:	003fa606 	br	6f50 <__ram_exceptions_end+0xfe004f30>
    70b8:	d9800017 	ldw	r6,0(sp)
    70bc:	30bfd436 	bltu	r6,r2,7010 <__ram_exceptions_end+0xfe004ff0>
    70c0:	2829883a 	mov	r20,r5
    70c4:	003f6406 	br	6e58 <__ram_exceptions_end+0xfe004e38>
    70c8:	0021883a 	mov	r16,zero
    70cc:	003fe006 	br	7050 <__ram_exceptions_end+0xfe005030>
    70d0:	00800434 	movhi	r2,16
    70d4:	8c000234 	orhi	r16,r17,8
    70d8:	10bfffc4 	addi	r2,r2,-1
    70dc:	e009883a 	mov	r4,fp
    70e0:	80a0703a 	and	r16,r16,r2
    70e4:	a02b883a 	mov	r21,r20
    70e8:	003e4e06 	br	6a24 <__ram_exceptions_end+0xfe004a04>

000070ec <__eqdf2>:
    70ec:	2804d53a 	srli	r2,r5,20
    70f0:	3806d53a 	srli	r3,r7,20
    70f4:	02000434 	movhi	r8,16
    70f8:	423fffc4 	addi	r8,r8,-1
    70fc:	1081ffcc 	andi	r2,r2,2047
    7100:	0281ffc4 	movi	r10,2047
    7104:	2a12703a 	and	r9,r5,r8
    7108:	18c1ffcc 	andi	r3,r3,2047
    710c:	3a10703a 	and	r8,r7,r8
    7110:	280ad7fa 	srli	r5,r5,31
    7114:	380ed7fa 	srli	r7,r7,31
    7118:	12801026 	beq	r2,r10,715c <__eqdf2+0x70>
    711c:	0281ffc4 	movi	r10,2047
    7120:	1a800a26 	beq	r3,r10,714c <__eqdf2+0x60>
    7124:	10c00226 	beq	r2,r3,7130 <__eqdf2+0x44>
    7128:	00800044 	movi	r2,1
    712c:	f800283a 	ret
    7130:	4a3ffd1e 	bne	r9,r8,7128 <__ram_exceptions_end+0xfe005108>
    7134:	21bffc1e 	bne	r4,r6,7128 <__ram_exceptions_end+0xfe005108>
    7138:	29c00c26 	beq	r5,r7,716c <__eqdf2+0x80>
    713c:	103ffa1e 	bne	r2,zero,7128 <__ram_exceptions_end+0xfe005108>
    7140:	2244b03a 	or	r2,r4,r9
    7144:	1004c03a 	cmpne	r2,r2,zero
    7148:	f800283a 	ret
    714c:	3214b03a 	or	r10,r6,r8
    7150:	503ff426 	beq	r10,zero,7124 <__ram_exceptions_end+0xfe005104>
    7154:	00800044 	movi	r2,1
    7158:	f800283a 	ret
    715c:	2254b03a 	or	r10,r4,r9
    7160:	503fee26 	beq	r10,zero,711c <__ram_exceptions_end+0xfe0050fc>
    7164:	00800044 	movi	r2,1
    7168:	f800283a 	ret
    716c:	0005883a 	mov	r2,zero
    7170:	f800283a 	ret

00007174 <__gedf2>:
    7174:	2804d53a 	srli	r2,r5,20
    7178:	3806d53a 	srli	r3,r7,20
    717c:	02000434 	movhi	r8,16
    7180:	423fffc4 	addi	r8,r8,-1
    7184:	1081ffcc 	andi	r2,r2,2047
    7188:	0241ffc4 	movi	r9,2047
    718c:	2a14703a 	and	r10,r5,r8
    7190:	18c1ffcc 	andi	r3,r3,2047
    7194:	3a10703a 	and	r8,r7,r8
    7198:	280ad7fa 	srli	r5,r5,31
    719c:	380ed7fa 	srli	r7,r7,31
    71a0:	12401d26 	beq	r2,r9,7218 <__gedf2+0xa4>
    71a4:	0241ffc4 	movi	r9,2047
    71a8:	1a401226 	beq	r3,r9,71f4 <__gedf2+0x80>
    71ac:	1000081e 	bne	r2,zero,71d0 <__gedf2+0x5c>
    71b0:	2296b03a 	or	r11,r4,r10
    71b4:	5813003a 	cmpeq	r9,r11,zero
    71b8:	1800091e 	bne	r3,zero,71e0 <__gedf2+0x6c>
    71bc:	3218b03a 	or	r12,r6,r8
    71c0:	6000071e 	bne	r12,zero,71e0 <__gedf2+0x6c>
    71c4:	0005883a 	mov	r2,zero
    71c8:	5800101e 	bne	r11,zero,720c <__gedf2+0x98>
    71cc:	f800283a 	ret
    71d0:	18000c1e 	bne	r3,zero,7204 <__gedf2+0x90>
    71d4:	3212b03a 	or	r9,r6,r8
    71d8:	48000c26 	beq	r9,zero,720c <__gedf2+0x98>
    71dc:	0013883a 	mov	r9,zero
    71e0:	39c03fcc 	andi	r7,r7,255
    71e4:	48000826 	beq	r9,zero,7208 <__gedf2+0x94>
    71e8:	38000926 	beq	r7,zero,7210 <__gedf2+0x9c>
    71ec:	00800044 	movi	r2,1
    71f0:	f800283a 	ret
    71f4:	3212b03a 	or	r9,r6,r8
    71f8:	483fec26 	beq	r9,zero,71ac <__ram_exceptions_end+0xfe00518c>
    71fc:	00bfff84 	movi	r2,-2
    7200:	f800283a 	ret
    7204:	39c03fcc 	andi	r7,r7,255
    7208:	29c00626 	beq	r5,r7,7224 <__gedf2+0xb0>
    720c:	283ff726 	beq	r5,zero,71ec <__ram_exceptions_end+0xfe0051cc>
    7210:	00bfffc4 	movi	r2,-1
    7214:	f800283a 	ret
    7218:	2292b03a 	or	r9,r4,r10
    721c:	483fe126 	beq	r9,zero,71a4 <__ram_exceptions_end+0xfe005184>
    7220:	003ff606 	br	71fc <__ram_exceptions_end+0xfe0051dc>
    7224:	18bff916 	blt	r3,r2,720c <__ram_exceptions_end+0xfe0051ec>
    7228:	10c00316 	blt	r2,r3,7238 <__gedf2+0xc4>
    722c:	42bff736 	bltu	r8,r10,720c <__ram_exceptions_end+0xfe0051ec>
    7230:	52000326 	beq	r10,r8,7240 <__gedf2+0xcc>
    7234:	5200042e 	bgeu	r10,r8,7248 <__gedf2+0xd4>
    7238:	283fec1e 	bne	r5,zero,71ec <__ram_exceptions_end+0xfe0051cc>
    723c:	003ff406 	br	7210 <__ram_exceptions_end+0xfe0051f0>
    7240:	313ff236 	bltu	r6,r4,720c <__ram_exceptions_end+0xfe0051ec>
    7244:	21bffc36 	bltu	r4,r6,7238 <__ram_exceptions_end+0xfe005218>
    7248:	0005883a 	mov	r2,zero
    724c:	f800283a 	ret

00007250 <__ledf2>:
    7250:	2804d53a 	srli	r2,r5,20
    7254:	3810d53a 	srli	r8,r7,20
    7258:	00c00434 	movhi	r3,16
    725c:	18ffffc4 	addi	r3,r3,-1
    7260:	1081ffcc 	andi	r2,r2,2047
    7264:	0241ffc4 	movi	r9,2047
    7268:	28d4703a 	and	r10,r5,r3
    726c:	4201ffcc 	andi	r8,r8,2047
    7270:	38c6703a 	and	r3,r7,r3
    7274:	280ad7fa 	srli	r5,r5,31
    7278:	380ed7fa 	srli	r7,r7,31
    727c:	12401f26 	beq	r2,r9,72fc <__ledf2+0xac>
    7280:	0241ffc4 	movi	r9,2047
    7284:	42401426 	beq	r8,r9,72d8 <__ledf2+0x88>
    7288:	1000091e 	bne	r2,zero,72b0 <__ledf2+0x60>
    728c:	2296b03a 	or	r11,r4,r10
    7290:	5813003a 	cmpeq	r9,r11,zero
    7294:	29403fcc 	andi	r5,r5,255
    7298:	40000a1e 	bne	r8,zero,72c4 <__ledf2+0x74>
    729c:	30d8b03a 	or	r12,r6,r3
    72a0:	6000081e 	bne	r12,zero,72c4 <__ledf2+0x74>
    72a4:	0005883a 	mov	r2,zero
    72a8:	5800111e 	bne	r11,zero,72f0 <__ledf2+0xa0>
    72ac:	f800283a 	ret
    72b0:	29403fcc 	andi	r5,r5,255
    72b4:	40000c1e 	bne	r8,zero,72e8 <__ledf2+0x98>
    72b8:	30d2b03a 	or	r9,r6,r3
    72bc:	48000c26 	beq	r9,zero,72f0 <__ledf2+0xa0>
    72c0:	0013883a 	mov	r9,zero
    72c4:	39c03fcc 	andi	r7,r7,255
    72c8:	48000826 	beq	r9,zero,72ec <__ledf2+0x9c>
    72cc:	38001126 	beq	r7,zero,7314 <__ledf2+0xc4>
    72d0:	00800044 	movi	r2,1
    72d4:	f800283a 	ret
    72d8:	30d2b03a 	or	r9,r6,r3
    72dc:	483fea26 	beq	r9,zero,7288 <__ram_exceptions_end+0xfe005268>
    72e0:	00800084 	movi	r2,2
    72e4:	f800283a 	ret
    72e8:	39c03fcc 	andi	r7,r7,255
    72ec:	39400726 	beq	r7,r5,730c <__ledf2+0xbc>
    72f0:	2800081e 	bne	r5,zero,7314 <__ledf2+0xc4>
    72f4:	00800044 	movi	r2,1
    72f8:	f800283a 	ret
    72fc:	2292b03a 	or	r9,r4,r10
    7300:	483fdf26 	beq	r9,zero,7280 <__ram_exceptions_end+0xfe005260>
    7304:	00800084 	movi	r2,2
    7308:	f800283a 	ret
    730c:	4080030e 	bge	r8,r2,731c <__ledf2+0xcc>
    7310:	383fef26 	beq	r7,zero,72d0 <__ram_exceptions_end+0xfe0052b0>
    7314:	00bfffc4 	movi	r2,-1
    7318:	f800283a 	ret
    731c:	123feb16 	blt	r2,r8,72cc <__ram_exceptions_end+0xfe0052ac>
    7320:	1abff336 	bltu	r3,r10,72f0 <__ram_exceptions_end+0xfe0052d0>
    7324:	50c00326 	beq	r10,r3,7334 <__ledf2+0xe4>
    7328:	50c0042e 	bgeu	r10,r3,733c <__ledf2+0xec>
    732c:	283fe81e 	bne	r5,zero,72d0 <__ram_exceptions_end+0xfe0052b0>
    7330:	003ff806 	br	7314 <__ram_exceptions_end+0xfe0052f4>
    7334:	313fee36 	bltu	r6,r4,72f0 <__ram_exceptions_end+0xfe0052d0>
    7338:	21bffc36 	bltu	r4,r6,732c <__ram_exceptions_end+0xfe00530c>
    733c:	0005883a 	mov	r2,zero
    7340:	f800283a 	ret

00007344 <__muldf3>:
    7344:	deffee04 	addi	sp,sp,-72
    7348:	dd000c15 	stw	r20,48(sp)
    734c:	2828d53a 	srli	r20,r5,20
    7350:	ddc00f15 	stw	r23,60(sp)
    7354:	282ed7fa 	srli	r23,r5,31
    7358:	dc000815 	stw	r16,32(sp)
    735c:	04000434 	movhi	r16,16
    7360:	dcc00b15 	stw	r19,44(sp)
    7364:	843fffc4 	addi	r16,r16,-1
    7368:	dfc01115 	stw	ra,68(sp)
    736c:	df001015 	stw	fp,64(sp)
    7370:	dd800e15 	stw	r22,56(sp)
    7374:	dd400d15 	stw	r21,52(sp)
    7378:	dc800a15 	stw	r18,40(sp)
    737c:	dc400915 	stw	r17,36(sp)
    7380:	a501ffcc 	andi	r20,r20,2047
    7384:	2c20703a 	and	r16,r5,r16
    7388:	b827883a 	mov	r19,r23
    738c:	ba403fcc 	andi	r9,r23,255
    7390:	a0006026 	beq	r20,zero,7514 <__muldf3+0x1d0>
    7394:	0081ffc4 	movi	r2,2047
    7398:	202d883a 	mov	r22,r4
    739c:	a0803626 	beq	r20,r2,7478 <__muldf3+0x134>
    73a0:	84000434 	orhi	r16,r16,16
    73a4:	200ad77a 	srli	r5,r4,29
    73a8:	800490fa 	slli	r2,r16,3
    73ac:	202c90fa 	slli	r22,r4,3
    73b0:	a53f0044 	addi	r20,r20,-1023
    73b4:	28a0b03a 	or	r16,r5,r2
    73b8:	002b883a 	mov	r21,zero
    73bc:	000b883a 	mov	r5,zero
    73c0:	3804d53a 	srli	r2,r7,20
    73c4:	3838d7fa 	srli	fp,r7,31
    73c8:	04400434 	movhi	r17,16
    73cc:	8c7fffc4 	addi	r17,r17,-1
    73d0:	1081ffcc 	andi	r2,r2,2047
    73d4:	3025883a 	mov	r18,r6
    73d8:	3c62703a 	and	r17,r7,r17
    73dc:	e2803fcc 	andi	r10,fp,255
    73e0:	10006d26 	beq	r2,zero,7598 <__muldf3+0x254>
    73e4:	00c1ffc4 	movi	r3,2047
    73e8:	10c06526 	beq	r2,r3,7580 <__muldf3+0x23c>
    73ec:	8c400434 	orhi	r17,r17,16
    73f0:	300ed77a 	srli	r7,r6,29
    73f4:	880690fa 	slli	r3,r17,3
    73f8:	302490fa 	slli	r18,r6,3
    73fc:	10bf0044 	addi	r2,r2,-1023
    7400:	38e2b03a 	or	r17,r7,r3
    7404:	000f883a 	mov	r7,zero
    7408:	a087883a 	add	r3,r20,r2
    740c:	010003c4 	movi	r4,15
    7410:	3d44b03a 	or	r2,r7,r21
    7414:	e5ccf03a 	xor	r6,fp,r23
    7418:	1a000044 	addi	r8,r3,1
    741c:	20809b36 	bltu	r4,r2,768c <__muldf3+0x348>
    7420:	100490ba 	slli	r2,r2,2
    7424:	01000034 	movhi	r4,0
    7428:	211d0e04 	addi	r4,r4,29752
    742c:	1105883a 	add	r2,r2,r4
    7430:	10800017 	ldw	r2,0(r2)
    7434:	1000683a 	jmp	r2
    7438:	0000768c 	andi	zero,zero,474
    743c:	00007498 	cmpnei	zero,zero,466
    7440:	00007498 	cmpnei	zero,zero,466
    7444:	00007494 	movui	zero,466
    7448:	00007668 	cmpgeui	zero,zero,473
    744c:	00007668 	cmpgeui	zero,zero,473
    7450:	00007650 	cmplti	zero,zero,473
    7454:	00007494 	movui	zero,466
    7458:	00007668 	cmpgeui	zero,zero,473
    745c:	00007650 	cmplti	zero,zero,473
    7460:	00007668 	cmpgeui	zero,zero,473
    7464:	00007494 	movui	zero,466
    7468:	00007678 	rdprs	zero,zero,473
    746c:	00007678 	rdprs	zero,zero,473
    7470:	00007678 	rdprs	zero,zero,473
    7474:	000079d8 	cmpnei	zero,zero,487
    7478:	2404b03a 	or	r2,r4,r16
    747c:	1000711e 	bne	r2,zero,7644 <__muldf3+0x300>
    7480:	05400204 	movi	r21,8
    7484:	0021883a 	mov	r16,zero
    7488:	002d883a 	mov	r22,zero
    748c:	01400084 	movi	r5,2
    7490:	003fcb06 	br	73c0 <__ram_exceptions_end+0xfe0053a0>
    7494:	500d883a 	mov	r6,r10
    7498:	00800084 	movi	r2,2
    749c:	38805926 	beq	r7,r2,7604 <__muldf3+0x2c0>
    74a0:	008000c4 	movi	r2,3
    74a4:	3881bb26 	beq	r7,r2,7b94 <__muldf3+0x850>
    74a8:	00800044 	movi	r2,1
    74ac:	3881961e 	bne	r7,r2,7b08 <__muldf3+0x7c4>
    74b0:	3027883a 	mov	r19,r6
    74b4:	0005883a 	mov	r2,zero
    74b8:	0021883a 	mov	r16,zero
    74bc:	002d883a 	mov	r22,zero
    74c0:	1004953a 	slli	r2,r2,20
    74c4:	98c03fcc 	andi	r3,r19,255
    74c8:	04400434 	movhi	r17,16
    74cc:	8c7fffc4 	addi	r17,r17,-1
    74d0:	180697fa 	slli	r3,r3,31
    74d4:	8460703a 	and	r16,r16,r17
    74d8:	80a0b03a 	or	r16,r16,r2
    74dc:	80c6b03a 	or	r3,r16,r3
    74e0:	b005883a 	mov	r2,r22
    74e4:	dfc01117 	ldw	ra,68(sp)
    74e8:	df001017 	ldw	fp,64(sp)
    74ec:	ddc00f17 	ldw	r23,60(sp)
    74f0:	dd800e17 	ldw	r22,56(sp)
    74f4:	dd400d17 	ldw	r21,52(sp)
    74f8:	dd000c17 	ldw	r20,48(sp)
    74fc:	dcc00b17 	ldw	r19,44(sp)
    7500:	dc800a17 	ldw	r18,40(sp)
    7504:	dc400917 	ldw	r17,36(sp)
    7508:	dc000817 	ldw	r16,32(sp)
    750c:	dec01204 	addi	sp,sp,72
    7510:	f800283a 	ret
    7514:	2404b03a 	or	r2,r4,r16
    7518:	202b883a 	mov	r21,r4
    751c:	10004426 	beq	r2,zero,7630 <__muldf3+0x2ec>
    7520:	80015126 	beq	r16,zero,7a68 <__muldf3+0x724>
    7524:	8009883a 	mov	r4,r16
    7528:	d9800715 	stw	r6,28(sp)
    752c:	d9c00215 	stw	r7,8(sp)
    7530:	da400415 	stw	r9,16(sp)
    7534:	00089680 	call	8968 <__clzsi2>
    7538:	d9800717 	ldw	r6,28(sp)
    753c:	d9c00217 	ldw	r7,8(sp)
    7540:	da400417 	ldw	r9,16(sp)
    7544:	113ffd44 	addi	r4,r2,-11
    7548:	00c00704 	movi	r3,28
    754c:	19014216 	blt	r3,r4,7a58 <__muldf3+0x714>
    7550:	00c00744 	movi	r3,29
    7554:	15bffe04 	addi	r22,r2,-8
    7558:	1907c83a 	sub	r3,r3,r4
    755c:	85a0983a 	sll	r16,r16,r22
    7560:	a8c6d83a 	srl	r3,r21,r3
    7564:	adac983a 	sll	r22,r21,r22
    7568:	1c20b03a 	or	r16,r3,r16
    756c:	1080fcc4 	addi	r2,r2,1011
    7570:	00a9c83a 	sub	r20,zero,r2
    7574:	002b883a 	mov	r21,zero
    7578:	000b883a 	mov	r5,zero
    757c:	003f9006 	br	73c0 <__ram_exceptions_end+0xfe0053a0>
    7580:	3446b03a 	or	r3,r6,r17
    7584:	1800281e 	bne	r3,zero,7628 <__muldf3+0x2e4>
    7588:	0023883a 	mov	r17,zero
    758c:	0025883a 	mov	r18,zero
    7590:	01c00084 	movi	r7,2
    7594:	003f9c06 	br	7408 <__ram_exceptions_end+0xfe0053e8>
    7598:	3446b03a 	or	r3,r6,r17
    759c:	18001e26 	beq	r3,zero,7618 <__muldf3+0x2d4>
    75a0:	88012126 	beq	r17,zero,7a28 <__muldf3+0x6e4>
    75a4:	8809883a 	mov	r4,r17
    75a8:	d9400215 	stw	r5,8(sp)
    75ac:	d9800715 	stw	r6,28(sp)
    75b0:	da400415 	stw	r9,16(sp)
    75b4:	da800315 	stw	r10,12(sp)
    75b8:	00089680 	call	8968 <__clzsi2>
    75bc:	d9400217 	ldw	r5,8(sp)
    75c0:	d9800717 	ldw	r6,28(sp)
    75c4:	da400417 	ldw	r9,16(sp)
    75c8:	da800317 	ldw	r10,12(sp)
    75cc:	113ffd44 	addi	r4,r2,-11
    75d0:	00c00704 	movi	r3,28
    75d4:	19011016 	blt	r3,r4,7a18 <__muldf3+0x6d4>
    75d8:	00c00744 	movi	r3,29
    75dc:	14bffe04 	addi	r18,r2,-8
    75e0:	1907c83a 	sub	r3,r3,r4
    75e4:	8ca2983a 	sll	r17,r17,r18
    75e8:	30c6d83a 	srl	r3,r6,r3
    75ec:	34a4983a 	sll	r18,r6,r18
    75f0:	1c62b03a 	or	r17,r3,r17
    75f4:	1080fcc4 	addi	r2,r2,1011
    75f8:	0085c83a 	sub	r2,zero,r2
    75fc:	000f883a 	mov	r7,zero
    7600:	003f8106 	br	7408 <__ram_exceptions_end+0xfe0053e8>
    7604:	3027883a 	mov	r19,r6
    7608:	0081ffc4 	movi	r2,2047
    760c:	0021883a 	mov	r16,zero
    7610:	002d883a 	mov	r22,zero
    7614:	003faa06 	br	74c0 <__ram_exceptions_end+0xfe0054a0>
    7618:	0023883a 	mov	r17,zero
    761c:	0025883a 	mov	r18,zero
    7620:	01c00044 	movi	r7,1
    7624:	003f7806 	br	7408 <__ram_exceptions_end+0xfe0053e8>
    7628:	01c000c4 	movi	r7,3
    762c:	003f7606 	br	7408 <__ram_exceptions_end+0xfe0053e8>
    7630:	05400104 	movi	r21,4
    7634:	0021883a 	mov	r16,zero
    7638:	002d883a 	mov	r22,zero
    763c:	01400044 	movi	r5,1
    7640:	003f5f06 	br	73c0 <__ram_exceptions_end+0xfe0053a0>
    7644:	05400304 	movi	r21,12
    7648:	014000c4 	movi	r5,3
    764c:	003f5c06 	br	73c0 <__ram_exceptions_end+0xfe0053a0>
    7650:	04000434 	movhi	r16,16
    7654:	0027883a 	mov	r19,zero
    7658:	843fffc4 	addi	r16,r16,-1
    765c:	05bfffc4 	movi	r22,-1
    7660:	0081ffc4 	movi	r2,2047
    7664:	003f9606 	br	74c0 <__ram_exceptions_end+0xfe0054a0>
    7668:	8023883a 	mov	r17,r16
    766c:	b025883a 	mov	r18,r22
    7670:	280f883a 	mov	r7,r5
    7674:	003f8806 	br	7498 <__ram_exceptions_end+0xfe005478>
    7678:	8023883a 	mov	r17,r16
    767c:	b025883a 	mov	r18,r22
    7680:	480d883a 	mov	r6,r9
    7684:	280f883a 	mov	r7,r5
    7688:	003f8306 	br	7498 <__ram_exceptions_end+0xfe005478>
    768c:	b026d43a 	srli	r19,r22,16
    7690:	902ed43a 	srli	r23,r18,16
    7694:	b5bfffcc 	andi	r22,r22,65535
    7698:	94bfffcc 	andi	r18,r18,65535
    769c:	b00b883a 	mov	r5,r22
    76a0:	9009883a 	mov	r4,r18
    76a4:	d8c00515 	stw	r3,20(sp)
    76a8:	d9800715 	stw	r6,28(sp)
    76ac:	da000615 	stw	r8,24(sp)
    76b0:	00047ac0 	call	47ac <__mulsi3>
    76b4:	980b883a 	mov	r5,r19
    76b8:	9009883a 	mov	r4,r18
    76bc:	1029883a 	mov	r20,r2
    76c0:	00047ac0 	call	47ac <__mulsi3>
    76c4:	b80b883a 	mov	r5,r23
    76c8:	9809883a 	mov	r4,r19
    76cc:	102b883a 	mov	r21,r2
    76d0:	00047ac0 	call	47ac <__mulsi3>
    76d4:	b809883a 	mov	r4,r23
    76d8:	b00b883a 	mov	r5,r22
    76dc:	1039883a 	mov	fp,r2
    76e0:	00047ac0 	call	47ac <__mulsi3>
    76e4:	a008d43a 	srli	r4,r20,16
    76e8:	1545883a 	add	r2,r2,r21
    76ec:	d8c00517 	ldw	r3,20(sp)
    76f0:	2085883a 	add	r2,r4,r2
    76f4:	d9800717 	ldw	r6,28(sp)
    76f8:	da000617 	ldw	r8,24(sp)
    76fc:	1540022e 	bgeu	r2,r21,7708 <__muldf3+0x3c4>
    7700:	01000074 	movhi	r4,1
    7704:	e139883a 	add	fp,fp,r4
    7708:	100e943a 	slli	r7,r2,16
    770c:	1004d43a 	srli	r2,r2,16
    7710:	882ad43a 	srli	r21,r17,16
    7714:	a53fffcc 	andi	r20,r20,65535
    7718:	8c7fffcc 	andi	r17,r17,65535
    771c:	3d29883a 	add	r20,r7,r20
    7720:	b00b883a 	mov	r5,r22
    7724:	8809883a 	mov	r4,r17
    7728:	d8c00515 	stw	r3,20(sp)
    772c:	d9800715 	stw	r6,28(sp)
    7730:	da000615 	stw	r8,24(sp)
    7734:	dd000115 	stw	r20,4(sp)
    7738:	d8800015 	stw	r2,0(sp)
    773c:	00047ac0 	call	47ac <__mulsi3>
    7740:	980b883a 	mov	r5,r19
    7744:	8809883a 	mov	r4,r17
    7748:	d8800215 	stw	r2,8(sp)
    774c:	00047ac0 	call	47ac <__mulsi3>
    7750:	9809883a 	mov	r4,r19
    7754:	a80b883a 	mov	r5,r21
    7758:	1029883a 	mov	r20,r2
    775c:	00047ac0 	call	47ac <__mulsi3>
    7760:	b00b883a 	mov	r5,r22
    7764:	a809883a 	mov	r4,r21
    7768:	d8800415 	stw	r2,16(sp)
    776c:	00047ac0 	call	47ac <__mulsi3>
    7770:	d9c00217 	ldw	r7,8(sp)
    7774:	1505883a 	add	r2,r2,r20
    7778:	d8c00517 	ldw	r3,20(sp)
    777c:	3826d43a 	srli	r19,r7,16
    7780:	d9800717 	ldw	r6,28(sp)
    7784:	da000617 	ldw	r8,24(sp)
    7788:	9885883a 	add	r2,r19,r2
    778c:	da400417 	ldw	r9,16(sp)
    7790:	1500022e 	bgeu	r2,r20,779c <__muldf3+0x458>
    7794:	01000074 	movhi	r4,1
    7798:	4913883a 	add	r9,r9,r4
    779c:	1028d43a 	srli	r20,r2,16
    77a0:	1004943a 	slli	r2,r2,16
    77a4:	802cd43a 	srli	r22,r16,16
    77a8:	843fffcc 	andi	r16,r16,65535
    77ac:	3cffffcc 	andi	r19,r7,65535
    77b0:	9009883a 	mov	r4,r18
    77b4:	800b883a 	mov	r5,r16
    77b8:	a269883a 	add	r20,r20,r9
    77bc:	d8c00515 	stw	r3,20(sp)
    77c0:	d9800715 	stw	r6,28(sp)
    77c4:	da000615 	stw	r8,24(sp)
    77c8:	14e7883a 	add	r19,r2,r19
    77cc:	00047ac0 	call	47ac <__mulsi3>
    77d0:	9009883a 	mov	r4,r18
    77d4:	b00b883a 	mov	r5,r22
    77d8:	d8800315 	stw	r2,12(sp)
    77dc:	00047ac0 	call	47ac <__mulsi3>
    77e0:	b809883a 	mov	r4,r23
    77e4:	b00b883a 	mov	r5,r22
    77e8:	d8800215 	stw	r2,8(sp)
    77ec:	00047ac0 	call	47ac <__mulsi3>
    77f0:	b80b883a 	mov	r5,r23
    77f4:	8009883a 	mov	r4,r16
    77f8:	d8800415 	stw	r2,16(sp)
    77fc:	00047ac0 	call	47ac <__mulsi3>
    7800:	da800317 	ldw	r10,12(sp)
    7804:	d9c00217 	ldw	r7,8(sp)
    7808:	d9000017 	ldw	r4,0(sp)
    780c:	502ed43a 	srli	r23,r10,16
    7810:	11c5883a 	add	r2,r2,r7
    7814:	24e5883a 	add	r18,r4,r19
    7818:	b885883a 	add	r2,r23,r2
    781c:	d8c00517 	ldw	r3,20(sp)
    7820:	d9800717 	ldw	r6,28(sp)
    7824:	da000617 	ldw	r8,24(sp)
    7828:	da400417 	ldw	r9,16(sp)
    782c:	11c0022e 	bgeu	r2,r7,7838 <__muldf3+0x4f4>
    7830:	01000074 	movhi	r4,1
    7834:	4913883a 	add	r9,r9,r4
    7838:	100ed43a 	srli	r7,r2,16
    783c:	1004943a 	slli	r2,r2,16
    7840:	55ffffcc 	andi	r23,r10,65535
    7844:	3a53883a 	add	r9,r7,r9
    7848:	8809883a 	mov	r4,r17
    784c:	800b883a 	mov	r5,r16
    7850:	d8c00515 	stw	r3,20(sp)
    7854:	d9800715 	stw	r6,28(sp)
    7858:	da000615 	stw	r8,24(sp)
    785c:	da400415 	stw	r9,16(sp)
    7860:	15ef883a 	add	r23,r2,r23
    7864:	00047ac0 	call	47ac <__mulsi3>
    7868:	8809883a 	mov	r4,r17
    786c:	b00b883a 	mov	r5,r22
    7870:	d8800215 	stw	r2,8(sp)
    7874:	00047ac0 	call	47ac <__mulsi3>
    7878:	b00b883a 	mov	r5,r22
    787c:	a809883a 	mov	r4,r21
    7880:	d8800315 	stw	r2,12(sp)
    7884:	00047ac0 	call	47ac <__mulsi3>
    7888:	8009883a 	mov	r4,r16
    788c:	a80b883a 	mov	r5,r21
    7890:	1023883a 	mov	r17,r2
    7894:	00047ac0 	call	47ac <__mulsi3>
    7898:	d9c00217 	ldw	r7,8(sp)
    789c:	da800317 	ldw	r10,12(sp)
    78a0:	d8c00517 	ldw	r3,20(sp)
    78a4:	3808d43a 	srli	r4,r7,16
    78a8:	1285883a 	add	r2,r2,r10
    78ac:	d9800717 	ldw	r6,28(sp)
    78b0:	2085883a 	add	r2,r4,r2
    78b4:	da000617 	ldw	r8,24(sp)
    78b8:	da400417 	ldw	r9,16(sp)
    78bc:	1280022e 	bgeu	r2,r10,78c8 <__muldf3+0x584>
    78c0:	01000074 	movhi	r4,1
    78c4:	8923883a 	add	r17,r17,r4
    78c8:	1008943a 	slli	r4,r2,16
    78cc:	39ffffcc 	andi	r7,r7,65535
    78d0:	e4b9883a 	add	fp,fp,r18
    78d4:	21cf883a 	add	r7,r4,r7
    78d8:	e4e7803a 	cmpltu	r19,fp,r19
    78dc:	3d0f883a 	add	r7,r7,r20
    78e0:	bf39883a 	add	fp,r23,fp
    78e4:	99c9883a 	add	r4,r19,r7
    78e8:	e5ef803a 	cmpltu	r23,fp,r23
    78ec:	490b883a 	add	r5,r9,r4
    78f0:	1004d43a 	srli	r2,r2,16
    78f4:	b965883a 	add	r18,r23,r5
    78f8:	24c9803a 	cmpltu	r4,r4,r19
    78fc:	3d29803a 	cmpltu	r20,r7,r20
    7900:	a128b03a 	or	r20,r20,r4
    7904:	95ef803a 	cmpltu	r23,r18,r23
    7908:	2a53803a 	cmpltu	r9,r5,r9
    790c:	a0a9883a 	add	r20,r20,r2
    7910:	4deeb03a 	or	r23,r9,r23
    7914:	a5ef883a 	add	r23,r20,r23
    7918:	bc63883a 	add	r17,r23,r17
    791c:	e004927a 	slli	r2,fp,9
    7920:	d9000117 	ldw	r4,4(sp)
    7924:	882e927a 	slli	r23,r17,9
    7928:	9022d5fa 	srli	r17,r18,23
    792c:	e038d5fa 	srli	fp,fp,23
    7930:	1104b03a 	or	r2,r2,r4
    7934:	9024927a 	slli	r18,r18,9
    7938:	1004c03a 	cmpne	r2,r2,zero
    793c:	bc62b03a 	or	r17,r23,r17
    7940:	1738b03a 	or	fp,r2,fp
    7944:	8880402c 	andhi	r2,r17,256
    7948:	e4a4b03a 	or	r18,fp,r18
    794c:	10000726 	beq	r2,zero,796c <__muldf3+0x628>
    7950:	9006d07a 	srli	r3,r18,1
    7954:	880497fa 	slli	r2,r17,31
    7958:	9480004c 	andi	r18,r18,1
    795c:	8822d07a 	srli	r17,r17,1
    7960:	1ca4b03a 	or	r18,r3,r18
    7964:	14a4b03a 	or	r18,r2,r18
    7968:	4007883a 	mov	r3,r8
    796c:	1880ffc4 	addi	r2,r3,1023
    7970:	0080460e 	bge	zero,r2,7a8c <__muldf3+0x748>
    7974:	910001cc 	andi	r4,r18,7
    7978:	20000726 	beq	r4,zero,7998 <__muldf3+0x654>
    797c:	910003cc 	andi	r4,r18,15
    7980:	01400104 	movi	r5,4
    7984:	21400426 	beq	r4,r5,7998 <__muldf3+0x654>
    7988:	9149883a 	add	r4,r18,r5
    798c:	24a5803a 	cmpltu	r18,r4,r18
    7990:	8ca3883a 	add	r17,r17,r18
    7994:	2025883a 	mov	r18,r4
    7998:	8900402c 	andhi	r4,r17,256
    799c:	20000426 	beq	r4,zero,79b0 <__muldf3+0x66c>
    79a0:	18810004 	addi	r2,r3,1024
    79a4:	00ffc034 	movhi	r3,65280
    79a8:	18ffffc4 	addi	r3,r3,-1
    79ac:	88e2703a 	and	r17,r17,r3
    79b0:	00c1ff84 	movi	r3,2046
    79b4:	18bf1316 	blt	r3,r2,7604 <__ram_exceptions_end+0xfe0055e4>
    79b8:	882c977a 	slli	r22,r17,29
    79bc:	9024d0fa 	srli	r18,r18,3
    79c0:	8822927a 	slli	r17,r17,9
    79c4:	1081ffcc 	andi	r2,r2,2047
    79c8:	b4acb03a 	or	r22,r22,r18
    79cc:	8820d33a 	srli	r16,r17,12
    79d0:	3027883a 	mov	r19,r6
    79d4:	003eba06 	br	74c0 <__ram_exceptions_end+0xfe0054a0>
    79d8:	8080022c 	andhi	r2,r16,8
    79dc:	10000926 	beq	r2,zero,7a04 <__muldf3+0x6c0>
    79e0:	8880022c 	andhi	r2,r17,8
    79e4:	1000071e 	bne	r2,zero,7a04 <__muldf3+0x6c0>
    79e8:	00800434 	movhi	r2,16
    79ec:	8c000234 	orhi	r16,r17,8
    79f0:	10bfffc4 	addi	r2,r2,-1
    79f4:	e027883a 	mov	r19,fp
    79f8:	80a0703a 	and	r16,r16,r2
    79fc:	902d883a 	mov	r22,r18
    7a00:	003f1706 	br	7660 <__ram_exceptions_end+0xfe005640>
    7a04:	00800434 	movhi	r2,16
    7a08:	84000234 	orhi	r16,r16,8
    7a0c:	10bfffc4 	addi	r2,r2,-1
    7a10:	80a0703a 	and	r16,r16,r2
    7a14:	003f1206 	br	7660 <__ram_exceptions_end+0xfe005640>
    7a18:	147ff604 	addi	r17,r2,-40
    7a1c:	3462983a 	sll	r17,r6,r17
    7a20:	0025883a 	mov	r18,zero
    7a24:	003ef306 	br	75f4 <__ram_exceptions_end+0xfe0055d4>
    7a28:	3009883a 	mov	r4,r6
    7a2c:	d9400215 	stw	r5,8(sp)
    7a30:	d9800715 	stw	r6,28(sp)
    7a34:	da400415 	stw	r9,16(sp)
    7a38:	da800315 	stw	r10,12(sp)
    7a3c:	00089680 	call	8968 <__clzsi2>
    7a40:	10800804 	addi	r2,r2,32
    7a44:	da800317 	ldw	r10,12(sp)
    7a48:	da400417 	ldw	r9,16(sp)
    7a4c:	d9800717 	ldw	r6,28(sp)
    7a50:	d9400217 	ldw	r5,8(sp)
    7a54:	003edd06 	br	75cc <__ram_exceptions_end+0xfe0055ac>
    7a58:	143ff604 	addi	r16,r2,-40
    7a5c:	ac20983a 	sll	r16,r21,r16
    7a60:	002d883a 	mov	r22,zero
    7a64:	003ec106 	br	756c <__ram_exceptions_end+0xfe00554c>
    7a68:	d9800715 	stw	r6,28(sp)
    7a6c:	d9c00215 	stw	r7,8(sp)
    7a70:	da400415 	stw	r9,16(sp)
    7a74:	00089680 	call	8968 <__clzsi2>
    7a78:	10800804 	addi	r2,r2,32
    7a7c:	da400417 	ldw	r9,16(sp)
    7a80:	d9c00217 	ldw	r7,8(sp)
    7a84:	d9800717 	ldw	r6,28(sp)
    7a88:	003eae06 	br	7544 <__ram_exceptions_end+0xfe005524>
    7a8c:	00c00044 	movi	r3,1
    7a90:	1887c83a 	sub	r3,r3,r2
    7a94:	01000e04 	movi	r4,56
    7a98:	20fe8516 	blt	r4,r3,74b0 <__ram_exceptions_end+0xfe005490>
    7a9c:	010007c4 	movi	r4,31
    7aa0:	20c01b16 	blt	r4,r3,7b10 <__muldf3+0x7cc>
    7aa4:	00800804 	movi	r2,32
    7aa8:	10c5c83a 	sub	r2,r2,r3
    7aac:	888a983a 	sll	r5,r17,r2
    7ab0:	90c8d83a 	srl	r4,r18,r3
    7ab4:	9084983a 	sll	r2,r18,r2
    7ab8:	88e2d83a 	srl	r17,r17,r3
    7abc:	2906b03a 	or	r3,r5,r4
    7ac0:	1004c03a 	cmpne	r2,r2,zero
    7ac4:	1886b03a 	or	r3,r3,r2
    7ac8:	188001cc 	andi	r2,r3,7
    7acc:	10000726 	beq	r2,zero,7aec <__muldf3+0x7a8>
    7ad0:	188003cc 	andi	r2,r3,15
    7ad4:	01000104 	movi	r4,4
    7ad8:	11000426 	beq	r2,r4,7aec <__muldf3+0x7a8>
    7adc:	1805883a 	mov	r2,r3
    7ae0:	10c00104 	addi	r3,r2,4
    7ae4:	1885803a 	cmpltu	r2,r3,r2
    7ae8:	88a3883a 	add	r17,r17,r2
    7aec:	8880202c 	andhi	r2,r17,128
    7af0:	10001c26 	beq	r2,zero,7b64 <__muldf3+0x820>
    7af4:	3027883a 	mov	r19,r6
    7af8:	00800044 	movi	r2,1
    7afc:	0021883a 	mov	r16,zero
    7b00:	002d883a 	mov	r22,zero
    7b04:	003e6e06 	br	74c0 <__ram_exceptions_end+0xfe0054a0>
    7b08:	4007883a 	mov	r3,r8
    7b0c:	003f9706 	br	796c <__ram_exceptions_end+0xfe00594c>
    7b10:	017ff844 	movi	r5,-31
    7b14:	2885c83a 	sub	r2,r5,r2
    7b18:	888ad83a 	srl	r5,r17,r2
    7b1c:	00800804 	movi	r2,32
    7b20:	18801a26 	beq	r3,r2,7b8c <__muldf3+0x848>
    7b24:	01001004 	movi	r4,64
    7b28:	20c7c83a 	sub	r3,r4,r3
    7b2c:	88e2983a 	sll	r17,r17,r3
    7b30:	8ca4b03a 	or	r18,r17,r18
    7b34:	9004c03a 	cmpne	r2,r18,zero
    7b38:	2884b03a 	or	r2,r5,r2
    7b3c:	144001cc 	andi	r17,r2,7
    7b40:	88000d1e 	bne	r17,zero,7b78 <__muldf3+0x834>
    7b44:	0021883a 	mov	r16,zero
    7b48:	102cd0fa 	srli	r22,r2,3
    7b4c:	3027883a 	mov	r19,r6
    7b50:	0005883a 	mov	r2,zero
    7b54:	b46cb03a 	or	r22,r22,r17
    7b58:	003e5906 	br	74c0 <__ram_exceptions_end+0xfe0054a0>
    7b5c:	1007883a 	mov	r3,r2
    7b60:	0023883a 	mov	r17,zero
    7b64:	8820927a 	slli	r16,r17,9
    7b68:	1805883a 	mov	r2,r3
    7b6c:	8822977a 	slli	r17,r17,29
    7b70:	8020d33a 	srli	r16,r16,12
    7b74:	003ff406 	br	7b48 <__ram_exceptions_end+0xfe005b28>
    7b78:	10c003cc 	andi	r3,r2,15
    7b7c:	01000104 	movi	r4,4
    7b80:	193ff626 	beq	r3,r4,7b5c <__ram_exceptions_end+0xfe005b3c>
    7b84:	0023883a 	mov	r17,zero
    7b88:	003fd506 	br	7ae0 <__ram_exceptions_end+0xfe005ac0>
    7b8c:	0023883a 	mov	r17,zero
    7b90:	003fe706 	br	7b30 <__ram_exceptions_end+0xfe005b10>
    7b94:	00800434 	movhi	r2,16
    7b98:	8c000234 	orhi	r16,r17,8
    7b9c:	10bfffc4 	addi	r2,r2,-1
    7ba0:	3027883a 	mov	r19,r6
    7ba4:	80a0703a 	and	r16,r16,r2
    7ba8:	902d883a 	mov	r22,r18
    7bac:	003eac06 	br	7660 <__ram_exceptions_end+0xfe005640>

00007bb0 <__subdf3>:
    7bb0:	02000434 	movhi	r8,16
    7bb4:	423fffc4 	addi	r8,r8,-1
    7bb8:	defffb04 	addi	sp,sp,-20
    7bbc:	2a14703a 	and	r10,r5,r8
    7bc0:	3812d53a 	srli	r9,r7,20
    7bc4:	3a10703a 	and	r8,r7,r8
    7bc8:	2006d77a 	srli	r3,r4,29
    7bcc:	3004d77a 	srli	r2,r6,29
    7bd0:	dc000015 	stw	r16,0(sp)
    7bd4:	501490fa 	slli	r10,r10,3
    7bd8:	2820d53a 	srli	r16,r5,20
    7bdc:	401090fa 	slli	r8,r8,3
    7be0:	dc800215 	stw	r18,8(sp)
    7be4:	dc400115 	stw	r17,4(sp)
    7be8:	dfc00415 	stw	ra,16(sp)
    7bec:	202290fa 	slli	r17,r4,3
    7bf0:	dcc00315 	stw	r19,12(sp)
    7bf4:	4a41ffcc 	andi	r9,r9,2047
    7bf8:	0101ffc4 	movi	r4,2047
    7bfc:	2824d7fa 	srli	r18,r5,31
    7c00:	8401ffcc 	andi	r16,r16,2047
    7c04:	50c6b03a 	or	r3,r10,r3
    7c08:	380ed7fa 	srli	r7,r7,31
    7c0c:	408ab03a 	or	r5,r8,r2
    7c10:	300c90fa 	slli	r6,r6,3
    7c14:	49009626 	beq	r9,r4,7e70 <__subdf3+0x2c0>
    7c18:	39c0005c 	xori	r7,r7,1
    7c1c:	8245c83a 	sub	r2,r16,r9
    7c20:	3c807426 	beq	r7,r18,7df4 <__subdf3+0x244>
    7c24:	0080af0e 	bge	zero,r2,7ee4 <__subdf3+0x334>
    7c28:	48002a1e 	bne	r9,zero,7cd4 <__subdf3+0x124>
    7c2c:	2988b03a 	or	r4,r5,r6
    7c30:	20009a1e 	bne	r4,zero,7e9c <__subdf3+0x2ec>
    7c34:	888001cc 	andi	r2,r17,7
    7c38:	10000726 	beq	r2,zero,7c58 <__subdf3+0xa8>
    7c3c:	888003cc 	andi	r2,r17,15
    7c40:	01000104 	movi	r4,4
    7c44:	11000426 	beq	r2,r4,7c58 <__subdf3+0xa8>
    7c48:	890b883a 	add	r5,r17,r4
    7c4c:	2c63803a 	cmpltu	r17,r5,r17
    7c50:	1c47883a 	add	r3,r3,r17
    7c54:	2823883a 	mov	r17,r5
    7c58:	1880202c 	andhi	r2,r3,128
    7c5c:	10005926 	beq	r2,zero,7dc4 <__subdf3+0x214>
    7c60:	84000044 	addi	r16,r16,1
    7c64:	0081ffc4 	movi	r2,2047
    7c68:	8080be26 	beq	r16,r2,7f64 <__subdf3+0x3b4>
    7c6c:	017fe034 	movhi	r5,65408
    7c70:	297fffc4 	addi	r5,r5,-1
    7c74:	1946703a 	and	r3,r3,r5
    7c78:	1804977a 	slli	r2,r3,29
    7c7c:	1806927a 	slli	r3,r3,9
    7c80:	8822d0fa 	srli	r17,r17,3
    7c84:	8401ffcc 	andi	r16,r16,2047
    7c88:	180ad33a 	srli	r5,r3,12
    7c8c:	9100004c 	andi	r4,r18,1
    7c90:	1444b03a 	or	r2,r2,r17
    7c94:	80c1ffcc 	andi	r3,r16,2047
    7c98:	1820953a 	slli	r16,r3,20
    7c9c:	20c03fcc 	andi	r3,r4,255
    7ca0:	180897fa 	slli	r4,r3,31
    7ca4:	00c00434 	movhi	r3,16
    7ca8:	18ffffc4 	addi	r3,r3,-1
    7cac:	28c6703a 	and	r3,r5,r3
    7cb0:	1c06b03a 	or	r3,r3,r16
    7cb4:	1906b03a 	or	r3,r3,r4
    7cb8:	dfc00417 	ldw	ra,16(sp)
    7cbc:	dcc00317 	ldw	r19,12(sp)
    7cc0:	dc800217 	ldw	r18,8(sp)
    7cc4:	dc400117 	ldw	r17,4(sp)
    7cc8:	dc000017 	ldw	r16,0(sp)
    7ccc:	dec00504 	addi	sp,sp,20
    7cd0:	f800283a 	ret
    7cd4:	0101ffc4 	movi	r4,2047
    7cd8:	813fd626 	beq	r16,r4,7c34 <__ram_exceptions_end+0xfe005c14>
    7cdc:	29402034 	orhi	r5,r5,128
    7ce0:	01000e04 	movi	r4,56
    7ce4:	2080a316 	blt	r4,r2,7f74 <__subdf3+0x3c4>
    7ce8:	010007c4 	movi	r4,31
    7cec:	2080c616 	blt	r4,r2,8008 <__subdf3+0x458>
    7cf0:	01000804 	movi	r4,32
    7cf4:	2089c83a 	sub	r4,r4,r2
    7cf8:	2910983a 	sll	r8,r5,r4
    7cfc:	308ed83a 	srl	r7,r6,r2
    7d00:	3108983a 	sll	r4,r6,r4
    7d04:	2884d83a 	srl	r2,r5,r2
    7d08:	41ccb03a 	or	r6,r8,r7
    7d0c:	2008c03a 	cmpne	r4,r4,zero
    7d10:	310cb03a 	or	r6,r6,r4
    7d14:	898dc83a 	sub	r6,r17,r6
    7d18:	89a3803a 	cmpltu	r17,r17,r6
    7d1c:	1887c83a 	sub	r3,r3,r2
    7d20:	1c47c83a 	sub	r3,r3,r17
    7d24:	3023883a 	mov	r17,r6
    7d28:	1880202c 	andhi	r2,r3,128
    7d2c:	10002326 	beq	r2,zero,7dbc <__subdf3+0x20c>
    7d30:	04c02034 	movhi	r19,128
    7d34:	9cffffc4 	addi	r19,r19,-1
    7d38:	1ce6703a 	and	r19,r3,r19
    7d3c:	98007a26 	beq	r19,zero,7f28 <__subdf3+0x378>
    7d40:	9809883a 	mov	r4,r19
    7d44:	00089680 	call	8968 <__clzsi2>
    7d48:	113ffe04 	addi	r4,r2,-8
    7d4c:	00c007c4 	movi	r3,31
    7d50:	19007b16 	blt	r3,r4,7f40 <__subdf3+0x390>
    7d54:	00800804 	movi	r2,32
    7d58:	1105c83a 	sub	r2,r2,r4
    7d5c:	8884d83a 	srl	r2,r17,r2
    7d60:	9906983a 	sll	r3,r19,r4
    7d64:	8922983a 	sll	r17,r17,r4
    7d68:	10c4b03a 	or	r2,r2,r3
    7d6c:	24007816 	blt	r4,r16,7f50 <__subdf3+0x3a0>
    7d70:	2421c83a 	sub	r16,r4,r16
    7d74:	80c00044 	addi	r3,r16,1
    7d78:	010007c4 	movi	r4,31
    7d7c:	20c09516 	blt	r4,r3,7fd4 <__subdf3+0x424>
    7d80:	01400804 	movi	r5,32
    7d84:	28cbc83a 	sub	r5,r5,r3
    7d88:	88c8d83a 	srl	r4,r17,r3
    7d8c:	8962983a 	sll	r17,r17,r5
    7d90:	114a983a 	sll	r5,r2,r5
    7d94:	10c6d83a 	srl	r3,r2,r3
    7d98:	8804c03a 	cmpne	r2,r17,zero
    7d9c:	290ab03a 	or	r5,r5,r4
    7da0:	28a2b03a 	or	r17,r5,r2
    7da4:	0021883a 	mov	r16,zero
    7da8:	003fa206 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    7dac:	2090b03a 	or	r8,r4,r2
    7db0:	40018e26 	beq	r8,zero,83ec <__subdf3+0x83c>
    7db4:	1007883a 	mov	r3,r2
    7db8:	2023883a 	mov	r17,r4
    7dbc:	888001cc 	andi	r2,r17,7
    7dc0:	103f9e1e 	bne	r2,zero,7c3c <__ram_exceptions_end+0xfe005c1c>
    7dc4:	1804977a 	slli	r2,r3,29
    7dc8:	8822d0fa 	srli	r17,r17,3
    7dcc:	1810d0fa 	srli	r8,r3,3
    7dd0:	9100004c 	andi	r4,r18,1
    7dd4:	1444b03a 	or	r2,r2,r17
    7dd8:	00c1ffc4 	movi	r3,2047
    7ddc:	80c02826 	beq	r16,r3,7e80 <__subdf3+0x2d0>
    7de0:	01400434 	movhi	r5,16
    7de4:	297fffc4 	addi	r5,r5,-1
    7de8:	80e0703a 	and	r16,r16,r3
    7dec:	414a703a 	and	r5,r8,r5
    7df0:	003fa806 	br	7c94 <__ram_exceptions_end+0xfe005c74>
    7df4:	0080630e 	bge	zero,r2,7f84 <__subdf3+0x3d4>
    7df8:	48003026 	beq	r9,zero,7ebc <__subdf3+0x30c>
    7dfc:	0101ffc4 	movi	r4,2047
    7e00:	813f8c26 	beq	r16,r4,7c34 <__ram_exceptions_end+0xfe005c14>
    7e04:	29402034 	orhi	r5,r5,128
    7e08:	01000e04 	movi	r4,56
    7e0c:	2080a90e 	bge	r4,r2,80b4 <__subdf3+0x504>
    7e10:	298cb03a 	or	r6,r5,r6
    7e14:	3012c03a 	cmpne	r9,r6,zero
    7e18:	0005883a 	mov	r2,zero
    7e1c:	4c53883a 	add	r9,r9,r17
    7e20:	4c63803a 	cmpltu	r17,r9,r17
    7e24:	10c7883a 	add	r3,r2,r3
    7e28:	88c7883a 	add	r3,r17,r3
    7e2c:	4823883a 	mov	r17,r9
    7e30:	1880202c 	andhi	r2,r3,128
    7e34:	1000d026 	beq	r2,zero,8178 <__subdf3+0x5c8>
    7e38:	84000044 	addi	r16,r16,1
    7e3c:	0081ffc4 	movi	r2,2047
    7e40:	8080fe26 	beq	r16,r2,823c <__subdf3+0x68c>
    7e44:	00bfe034 	movhi	r2,65408
    7e48:	10bfffc4 	addi	r2,r2,-1
    7e4c:	1886703a 	and	r3,r3,r2
    7e50:	880ad07a 	srli	r5,r17,1
    7e54:	180497fa 	slli	r2,r3,31
    7e58:	8900004c 	andi	r4,r17,1
    7e5c:	2922b03a 	or	r17,r5,r4
    7e60:	1806d07a 	srli	r3,r3,1
    7e64:	1462b03a 	or	r17,r2,r17
    7e68:	3825883a 	mov	r18,r7
    7e6c:	003f7106 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    7e70:	2984b03a 	or	r2,r5,r6
    7e74:	103f6826 	beq	r2,zero,7c18 <__ram_exceptions_end+0xfe005bf8>
    7e78:	39c03fcc 	andi	r7,r7,255
    7e7c:	003f6706 	br	7c1c <__ram_exceptions_end+0xfe005bfc>
    7e80:	4086b03a 	or	r3,r8,r2
    7e84:	18015226 	beq	r3,zero,83d0 <__subdf3+0x820>
    7e88:	00c00434 	movhi	r3,16
    7e8c:	41400234 	orhi	r5,r8,8
    7e90:	18ffffc4 	addi	r3,r3,-1
    7e94:	28ca703a 	and	r5,r5,r3
    7e98:	003f7e06 	br	7c94 <__ram_exceptions_end+0xfe005c74>
    7e9c:	10bfffc4 	addi	r2,r2,-1
    7ea0:	1000491e 	bne	r2,zero,7fc8 <__subdf3+0x418>
    7ea4:	898fc83a 	sub	r7,r17,r6
    7ea8:	89e3803a 	cmpltu	r17,r17,r7
    7eac:	1947c83a 	sub	r3,r3,r5
    7eb0:	1c47c83a 	sub	r3,r3,r17
    7eb4:	3823883a 	mov	r17,r7
    7eb8:	003f9b06 	br	7d28 <__ram_exceptions_end+0xfe005d08>
    7ebc:	2988b03a 	or	r4,r5,r6
    7ec0:	203f5c26 	beq	r4,zero,7c34 <__ram_exceptions_end+0xfe005c14>
    7ec4:	10bfffc4 	addi	r2,r2,-1
    7ec8:	1000931e 	bne	r2,zero,8118 <__subdf3+0x568>
    7ecc:	898d883a 	add	r6,r17,r6
    7ed0:	3463803a 	cmpltu	r17,r6,r17
    7ed4:	1947883a 	add	r3,r3,r5
    7ed8:	88c7883a 	add	r3,r17,r3
    7edc:	3023883a 	mov	r17,r6
    7ee0:	003fd306 	br	7e30 <__ram_exceptions_end+0xfe005e10>
    7ee4:	1000541e 	bne	r2,zero,8038 <__subdf3+0x488>
    7ee8:	80800044 	addi	r2,r16,1
    7eec:	1081ffcc 	andi	r2,r2,2047
    7ef0:	01000044 	movi	r4,1
    7ef4:	2080a20e 	bge	r4,r2,8180 <__subdf3+0x5d0>
    7ef8:	8989c83a 	sub	r4,r17,r6
    7efc:	8905803a 	cmpltu	r2,r17,r4
    7f00:	1967c83a 	sub	r19,r3,r5
    7f04:	98a7c83a 	sub	r19,r19,r2
    7f08:	9880202c 	andhi	r2,r19,128
    7f0c:	10006326 	beq	r2,zero,809c <__subdf3+0x4ec>
    7f10:	3463c83a 	sub	r17,r6,r17
    7f14:	28c7c83a 	sub	r3,r5,r3
    7f18:	344d803a 	cmpltu	r6,r6,r17
    7f1c:	19a7c83a 	sub	r19,r3,r6
    7f20:	3825883a 	mov	r18,r7
    7f24:	983f861e 	bne	r19,zero,7d40 <__ram_exceptions_end+0xfe005d20>
    7f28:	8809883a 	mov	r4,r17
    7f2c:	00089680 	call	8968 <__clzsi2>
    7f30:	10800804 	addi	r2,r2,32
    7f34:	113ffe04 	addi	r4,r2,-8
    7f38:	00c007c4 	movi	r3,31
    7f3c:	193f850e 	bge	r3,r4,7d54 <__ram_exceptions_end+0xfe005d34>
    7f40:	10bff604 	addi	r2,r2,-40
    7f44:	8884983a 	sll	r2,r17,r2
    7f48:	0023883a 	mov	r17,zero
    7f4c:	243f880e 	bge	r4,r16,7d70 <__ram_exceptions_end+0xfe005d50>
    7f50:	00ffe034 	movhi	r3,65408
    7f54:	18ffffc4 	addi	r3,r3,-1
    7f58:	8121c83a 	sub	r16,r16,r4
    7f5c:	10c6703a 	and	r3,r2,r3
    7f60:	003f3406 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    7f64:	9100004c 	andi	r4,r18,1
    7f68:	000b883a 	mov	r5,zero
    7f6c:	0005883a 	mov	r2,zero
    7f70:	003f4806 	br	7c94 <__ram_exceptions_end+0xfe005c74>
    7f74:	298cb03a 	or	r6,r5,r6
    7f78:	300cc03a 	cmpne	r6,r6,zero
    7f7c:	0005883a 	mov	r2,zero
    7f80:	003f6406 	br	7d14 <__ram_exceptions_end+0xfe005cf4>
    7f84:	10009a1e 	bne	r2,zero,81f0 <__subdf3+0x640>
    7f88:	82400044 	addi	r9,r16,1
    7f8c:	4881ffcc 	andi	r2,r9,2047
    7f90:	02800044 	movi	r10,1
    7f94:	5080670e 	bge	r10,r2,8134 <__subdf3+0x584>
    7f98:	0081ffc4 	movi	r2,2047
    7f9c:	4880af26 	beq	r9,r2,825c <__subdf3+0x6ac>
    7fa0:	898d883a 	add	r6,r17,r6
    7fa4:	1945883a 	add	r2,r3,r5
    7fa8:	3447803a 	cmpltu	r3,r6,r17
    7fac:	1887883a 	add	r3,r3,r2
    7fb0:	182297fa 	slli	r17,r3,31
    7fb4:	300cd07a 	srli	r6,r6,1
    7fb8:	1806d07a 	srli	r3,r3,1
    7fbc:	4821883a 	mov	r16,r9
    7fc0:	89a2b03a 	or	r17,r17,r6
    7fc4:	003f1b06 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    7fc8:	0101ffc4 	movi	r4,2047
    7fcc:	813f441e 	bne	r16,r4,7ce0 <__ram_exceptions_end+0xfe005cc0>
    7fd0:	003f1806 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    7fd4:	843ff844 	addi	r16,r16,-31
    7fd8:	01400804 	movi	r5,32
    7fdc:	1408d83a 	srl	r4,r2,r16
    7fe0:	19405026 	beq	r3,r5,8124 <__subdf3+0x574>
    7fe4:	01401004 	movi	r5,64
    7fe8:	28c7c83a 	sub	r3,r5,r3
    7fec:	10c4983a 	sll	r2,r2,r3
    7ff0:	88a2b03a 	or	r17,r17,r2
    7ff4:	8822c03a 	cmpne	r17,r17,zero
    7ff8:	2462b03a 	or	r17,r4,r17
    7ffc:	0007883a 	mov	r3,zero
    8000:	0021883a 	mov	r16,zero
    8004:	003f6d06 	br	7dbc <__ram_exceptions_end+0xfe005d9c>
    8008:	11fff804 	addi	r7,r2,-32
    800c:	01000804 	movi	r4,32
    8010:	29ced83a 	srl	r7,r5,r7
    8014:	11004526 	beq	r2,r4,812c <__subdf3+0x57c>
    8018:	01001004 	movi	r4,64
    801c:	2089c83a 	sub	r4,r4,r2
    8020:	2904983a 	sll	r2,r5,r4
    8024:	118cb03a 	or	r6,r2,r6
    8028:	300cc03a 	cmpne	r6,r6,zero
    802c:	398cb03a 	or	r6,r7,r6
    8030:	0005883a 	mov	r2,zero
    8034:	003f3706 	br	7d14 <__ram_exceptions_end+0xfe005cf4>
    8038:	80002a26 	beq	r16,zero,80e4 <__subdf3+0x534>
    803c:	0101ffc4 	movi	r4,2047
    8040:	49006626 	beq	r9,r4,81dc <__subdf3+0x62c>
    8044:	0085c83a 	sub	r2,zero,r2
    8048:	18c02034 	orhi	r3,r3,128
    804c:	01000e04 	movi	r4,56
    8050:	20807e16 	blt	r4,r2,824c <__subdf3+0x69c>
    8054:	010007c4 	movi	r4,31
    8058:	2080e716 	blt	r4,r2,83f8 <__subdf3+0x848>
    805c:	01000804 	movi	r4,32
    8060:	2089c83a 	sub	r4,r4,r2
    8064:	1914983a 	sll	r10,r3,r4
    8068:	8890d83a 	srl	r8,r17,r2
    806c:	8908983a 	sll	r4,r17,r4
    8070:	1884d83a 	srl	r2,r3,r2
    8074:	5222b03a 	or	r17,r10,r8
    8078:	2006c03a 	cmpne	r3,r4,zero
    807c:	88e2b03a 	or	r17,r17,r3
    8080:	3463c83a 	sub	r17,r6,r17
    8084:	2885c83a 	sub	r2,r5,r2
    8088:	344d803a 	cmpltu	r6,r6,r17
    808c:	1187c83a 	sub	r3,r2,r6
    8090:	4821883a 	mov	r16,r9
    8094:	3825883a 	mov	r18,r7
    8098:	003f2306 	br	7d28 <__ram_exceptions_end+0xfe005d08>
    809c:	24d0b03a 	or	r8,r4,r19
    80a0:	40001b1e 	bne	r8,zero,8110 <__subdf3+0x560>
    80a4:	0005883a 	mov	r2,zero
    80a8:	0009883a 	mov	r4,zero
    80ac:	0021883a 	mov	r16,zero
    80b0:	003f4906 	br	7dd8 <__ram_exceptions_end+0xfe005db8>
    80b4:	010007c4 	movi	r4,31
    80b8:	20803a16 	blt	r4,r2,81a4 <__subdf3+0x5f4>
    80bc:	01000804 	movi	r4,32
    80c0:	2089c83a 	sub	r4,r4,r2
    80c4:	2912983a 	sll	r9,r5,r4
    80c8:	3090d83a 	srl	r8,r6,r2
    80cc:	3108983a 	sll	r4,r6,r4
    80d0:	2884d83a 	srl	r2,r5,r2
    80d4:	4a12b03a 	or	r9,r9,r8
    80d8:	2008c03a 	cmpne	r4,r4,zero
    80dc:	4912b03a 	or	r9,r9,r4
    80e0:	003f4e06 	br	7e1c <__ram_exceptions_end+0xfe005dfc>
    80e4:	1c48b03a 	or	r4,r3,r17
    80e8:	20003c26 	beq	r4,zero,81dc <__subdf3+0x62c>
    80ec:	0084303a 	nor	r2,zero,r2
    80f0:	1000381e 	bne	r2,zero,81d4 <__subdf3+0x624>
    80f4:	3463c83a 	sub	r17,r6,r17
    80f8:	28c5c83a 	sub	r2,r5,r3
    80fc:	344d803a 	cmpltu	r6,r6,r17
    8100:	1187c83a 	sub	r3,r2,r6
    8104:	4821883a 	mov	r16,r9
    8108:	3825883a 	mov	r18,r7
    810c:	003f0606 	br	7d28 <__ram_exceptions_end+0xfe005d08>
    8110:	2023883a 	mov	r17,r4
    8114:	003f0906 	br	7d3c <__ram_exceptions_end+0xfe005d1c>
    8118:	0101ffc4 	movi	r4,2047
    811c:	813f3a1e 	bne	r16,r4,7e08 <__ram_exceptions_end+0xfe005de8>
    8120:	003ec406 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    8124:	0005883a 	mov	r2,zero
    8128:	003fb106 	br	7ff0 <__ram_exceptions_end+0xfe005fd0>
    812c:	0005883a 	mov	r2,zero
    8130:	003fbc06 	br	8024 <__ram_exceptions_end+0xfe006004>
    8134:	1c44b03a 	or	r2,r3,r17
    8138:	80008e1e 	bne	r16,zero,8374 <__subdf3+0x7c4>
    813c:	1000c826 	beq	r2,zero,8460 <__subdf3+0x8b0>
    8140:	2984b03a 	or	r2,r5,r6
    8144:	103ebb26 	beq	r2,zero,7c34 <__ram_exceptions_end+0xfe005c14>
    8148:	8989883a 	add	r4,r17,r6
    814c:	1945883a 	add	r2,r3,r5
    8150:	2447803a 	cmpltu	r3,r4,r17
    8154:	1887883a 	add	r3,r3,r2
    8158:	1880202c 	andhi	r2,r3,128
    815c:	2023883a 	mov	r17,r4
    8160:	103f1626 	beq	r2,zero,7dbc <__ram_exceptions_end+0xfe005d9c>
    8164:	00bfe034 	movhi	r2,65408
    8168:	10bfffc4 	addi	r2,r2,-1
    816c:	5021883a 	mov	r16,r10
    8170:	1886703a 	and	r3,r3,r2
    8174:	003eaf06 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    8178:	3825883a 	mov	r18,r7
    817c:	003f0f06 	br	7dbc <__ram_exceptions_end+0xfe005d9c>
    8180:	1c44b03a 	or	r2,r3,r17
    8184:	8000251e 	bne	r16,zero,821c <__subdf3+0x66c>
    8188:	1000661e 	bne	r2,zero,8324 <__subdf3+0x774>
    818c:	2990b03a 	or	r8,r5,r6
    8190:	40009626 	beq	r8,zero,83ec <__subdf3+0x83c>
    8194:	2807883a 	mov	r3,r5
    8198:	3023883a 	mov	r17,r6
    819c:	3825883a 	mov	r18,r7
    81a0:	003ea406 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    81a4:	127ff804 	addi	r9,r2,-32
    81a8:	01000804 	movi	r4,32
    81ac:	2a52d83a 	srl	r9,r5,r9
    81b0:	11008c26 	beq	r2,r4,83e4 <__subdf3+0x834>
    81b4:	01001004 	movi	r4,64
    81b8:	2085c83a 	sub	r2,r4,r2
    81bc:	2884983a 	sll	r2,r5,r2
    81c0:	118cb03a 	or	r6,r2,r6
    81c4:	300cc03a 	cmpne	r6,r6,zero
    81c8:	4992b03a 	or	r9,r9,r6
    81cc:	0005883a 	mov	r2,zero
    81d0:	003f1206 	br	7e1c <__ram_exceptions_end+0xfe005dfc>
    81d4:	0101ffc4 	movi	r4,2047
    81d8:	493f9c1e 	bne	r9,r4,804c <__ram_exceptions_end+0xfe00602c>
    81dc:	2807883a 	mov	r3,r5
    81e0:	3023883a 	mov	r17,r6
    81e4:	4821883a 	mov	r16,r9
    81e8:	3825883a 	mov	r18,r7
    81ec:	003e9106 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    81f0:	80001f1e 	bne	r16,zero,8270 <__subdf3+0x6c0>
    81f4:	1c48b03a 	or	r4,r3,r17
    81f8:	20005a26 	beq	r4,zero,8364 <__subdf3+0x7b4>
    81fc:	0084303a 	nor	r2,zero,r2
    8200:	1000561e 	bne	r2,zero,835c <__subdf3+0x7ac>
    8204:	89a3883a 	add	r17,r17,r6
    8208:	1945883a 	add	r2,r3,r5
    820c:	898d803a 	cmpltu	r6,r17,r6
    8210:	3087883a 	add	r3,r6,r2
    8214:	4821883a 	mov	r16,r9
    8218:	003f0506 	br	7e30 <__ram_exceptions_end+0xfe005e10>
    821c:	10002b1e 	bne	r2,zero,82cc <__subdf3+0x71c>
    8220:	2984b03a 	or	r2,r5,r6
    8224:	10008026 	beq	r2,zero,8428 <__subdf3+0x878>
    8228:	2807883a 	mov	r3,r5
    822c:	3023883a 	mov	r17,r6
    8230:	3825883a 	mov	r18,r7
    8234:	0401ffc4 	movi	r16,2047
    8238:	003e7e06 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    823c:	3809883a 	mov	r4,r7
    8240:	0011883a 	mov	r8,zero
    8244:	0005883a 	mov	r2,zero
    8248:	003ee306 	br	7dd8 <__ram_exceptions_end+0xfe005db8>
    824c:	1c62b03a 	or	r17,r3,r17
    8250:	8822c03a 	cmpne	r17,r17,zero
    8254:	0005883a 	mov	r2,zero
    8258:	003f8906 	br	8080 <__ram_exceptions_end+0xfe006060>
    825c:	3809883a 	mov	r4,r7
    8260:	4821883a 	mov	r16,r9
    8264:	0011883a 	mov	r8,zero
    8268:	0005883a 	mov	r2,zero
    826c:	003eda06 	br	7dd8 <__ram_exceptions_end+0xfe005db8>
    8270:	0101ffc4 	movi	r4,2047
    8274:	49003b26 	beq	r9,r4,8364 <__subdf3+0x7b4>
    8278:	0085c83a 	sub	r2,zero,r2
    827c:	18c02034 	orhi	r3,r3,128
    8280:	01000e04 	movi	r4,56
    8284:	20806e16 	blt	r4,r2,8440 <__subdf3+0x890>
    8288:	010007c4 	movi	r4,31
    828c:	20807716 	blt	r4,r2,846c <__subdf3+0x8bc>
    8290:	01000804 	movi	r4,32
    8294:	2089c83a 	sub	r4,r4,r2
    8298:	1914983a 	sll	r10,r3,r4
    829c:	8890d83a 	srl	r8,r17,r2
    82a0:	8908983a 	sll	r4,r17,r4
    82a4:	1884d83a 	srl	r2,r3,r2
    82a8:	5222b03a 	or	r17,r10,r8
    82ac:	2006c03a 	cmpne	r3,r4,zero
    82b0:	88e2b03a 	or	r17,r17,r3
    82b4:	89a3883a 	add	r17,r17,r6
    82b8:	1145883a 	add	r2,r2,r5
    82bc:	898d803a 	cmpltu	r6,r17,r6
    82c0:	3087883a 	add	r3,r6,r2
    82c4:	4821883a 	mov	r16,r9
    82c8:	003ed906 	br	7e30 <__ram_exceptions_end+0xfe005e10>
    82cc:	2984b03a 	or	r2,r5,r6
    82d0:	10004226 	beq	r2,zero,83dc <__subdf3+0x82c>
    82d4:	1808d0fa 	srli	r4,r3,3
    82d8:	8822d0fa 	srli	r17,r17,3
    82dc:	1806977a 	slli	r3,r3,29
    82e0:	2080022c 	andhi	r2,r4,8
    82e4:	1c62b03a 	or	r17,r3,r17
    82e8:	10000826 	beq	r2,zero,830c <__subdf3+0x75c>
    82ec:	2812d0fa 	srli	r9,r5,3
    82f0:	4880022c 	andhi	r2,r9,8
    82f4:	1000051e 	bne	r2,zero,830c <__subdf3+0x75c>
    82f8:	300cd0fa 	srli	r6,r6,3
    82fc:	2804977a 	slli	r2,r5,29
    8300:	4809883a 	mov	r4,r9
    8304:	3825883a 	mov	r18,r7
    8308:	11a2b03a 	or	r17,r2,r6
    830c:	8806d77a 	srli	r3,r17,29
    8310:	200890fa 	slli	r4,r4,3
    8314:	882290fa 	slli	r17,r17,3
    8318:	0401ffc4 	movi	r16,2047
    831c:	1906b03a 	or	r3,r3,r4
    8320:	003e4406 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    8324:	2984b03a 	or	r2,r5,r6
    8328:	103e4226 	beq	r2,zero,7c34 <__ram_exceptions_end+0xfe005c14>
    832c:	8989c83a 	sub	r4,r17,r6
    8330:	8911803a 	cmpltu	r8,r17,r4
    8334:	1945c83a 	sub	r2,r3,r5
    8338:	1205c83a 	sub	r2,r2,r8
    833c:	1200202c 	andhi	r8,r2,128
    8340:	403e9a26 	beq	r8,zero,7dac <__ram_exceptions_end+0xfe005d8c>
    8344:	3463c83a 	sub	r17,r6,r17
    8348:	28c5c83a 	sub	r2,r5,r3
    834c:	344d803a 	cmpltu	r6,r6,r17
    8350:	1187c83a 	sub	r3,r2,r6
    8354:	3825883a 	mov	r18,r7
    8358:	003e3606 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    835c:	0101ffc4 	movi	r4,2047
    8360:	493fc71e 	bne	r9,r4,8280 <__ram_exceptions_end+0xfe006260>
    8364:	2807883a 	mov	r3,r5
    8368:	3023883a 	mov	r17,r6
    836c:	4821883a 	mov	r16,r9
    8370:	003e3006 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    8374:	10003626 	beq	r2,zero,8450 <__subdf3+0x8a0>
    8378:	2984b03a 	or	r2,r5,r6
    837c:	10001726 	beq	r2,zero,83dc <__subdf3+0x82c>
    8380:	1808d0fa 	srli	r4,r3,3
    8384:	8822d0fa 	srli	r17,r17,3
    8388:	1806977a 	slli	r3,r3,29
    838c:	2080022c 	andhi	r2,r4,8
    8390:	1c62b03a 	or	r17,r3,r17
    8394:	10000726 	beq	r2,zero,83b4 <__subdf3+0x804>
    8398:	2812d0fa 	srli	r9,r5,3
    839c:	4880022c 	andhi	r2,r9,8
    83a0:	1000041e 	bne	r2,zero,83b4 <__subdf3+0x804>
    83a4:	300cd0fa 	srli	r6,r6,3
    83a8:	2804977a 	slli	r2,r5,29
    83ac:	4809883a 	mov	r4,r9
    83b0:	11a2b03a 	or	r17,r2,r6
    83b4:	8806d77a 	srli	r3,r17,29
    83b8:	200890fa 	slli	r4,r4,3
    83bc:	882290fa 	slli	r17,r17,3
    83c0:	3825883a 	mov	r18,r7
    83c4:	1906b03a 	or	r3,r3,r4
    83c8:	0401ffc4 	movi	r16,2047
    83cc:	003e1906 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    83d0:	000b883a 	mov	r5,zero
    83d4:	0005883a 	mov	r2,zero
    83d8:	003e2e06 	br	7c94 <__ram_exceptions_end+0xfe005c74>
    83dc:	0401ffc4 	movi	r16,2047
    83e0:	003e1406 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    83e4:	0005883a 	mov	r2,zero
    83e8:	003f7506 	br	81c0 <__ram_exceptions_end+0xfe0061a0>
    83ec:	0005883a 	mov	r2,zero
    83f0:	0009883a 	mov	r4,zero
    83f4:	003e7806 	br	7dd8 <__ram_exceptions_end+0xfe005db8>
    83f8:	123ff804 	addi	r8,r2,-32
    83fc:	01000804 	movi	r4,32
    8400:	1a10d83a 	srl	r8,r3,r8
    8404:	11002526 	beq	r2,r4,849c <__subdf3+0x8ec>
    8408:	01001004 	movi	r4,64
    840c:	2085c83a 	sub	r2,r4,r2
    8410:	1884983a 	sll	r2,r3,r2
    8414:	1444b03a 	or	r2,r2,r17
    8418:	1004c03a 	cmpne	r2,r2,zero
    841c:	40a2b03a 	or	r17,r8,r2
    8420:	0005883a 	mov	r2,zero
    8424:	003f1606 	br	8080 <__ram_exceptions_end+0xfe006060>
    8428:	02000434 	movhi	r8,16
    842c:	0009883a 	mov	r4,zero
    8430:	423fffc4 	addi	r8,r8,-1
    8434:	00bfffc4 	movi	r2,-1
    8438:	0401ffc4 	movi	r16,2047
    843c:	003e6606 	br	7dd8 <__ram_exceptions_end+0xfe005db8>
    8440:	1c62b03a 	or	r17,r3,r17
    8444:	8822c03a 	cmpne	r17,r17,zero
    8448:	0005883a 	mov	r2,zero
    844c:	003f9906 	br	82b4 <__ram_exceptions_end+0xfe006294>
    8450:	2807883a 	mov	r3,r5
    8454:	3023883a 	mov	r17,r6
    8458:	0401ffc4 	movi	r16,2047
    845c:	003df506 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    8460:	2807883a 	mov	r3,r5
    8464:	3023883a 	mov	r17,r6
    8468:	003df206 	br	7c34 <__ram_exceptions_end+0xfe005c14>
    846c:	123ff804 	addi	r8,r2,-32
    8470:	01000804 	movi	r4,32
    8474:	1a10d83a 	srl	r8,r3,r8
    8478:	11000a26 	beq	r2,r4,84a4 <__subdf3+0x8f4>
    847c:	01001004 	movi	r4,64
    8480:	2085c83a 	sub	r2,r4,r2
    8484:	1884983a 	sll	r2,r3,r2
    8488:	1444b03a 	or	r2,r2,r17
    848c:	1004c03a 	cmpne	r2,r2,zero
    8490:	40a2b03a 	or	r17,r8,r2
    8494:	0005883a 	mov	r2,zero
    8498:	003f8606 	br	82b4 <__ram_exceptions_end+0xfe006294>
    849c:	0005883a 	mov	r2,zero
    84a0:	003fdc06 	br	8414 <__ram_exceptions_end+0xfe0063f4>
    84a4:	0005883a 	mov	r2,zero
    84a8:	003ff706 	br	8488 <__ram_exceptions_end+0xfe006468>

000084ac <__fixdfsi>:
    84ac:	280cd53a 	srli	r6,r5,20
    84b0:	00c00434 	movhi	r3,16
    84b4:	18ffffc4 	addi	r3,r3,-1
    84b8:	3181ffcc 	andi	r6,r6,2047
    84bc:	01c0ff84 	movi	r7,1022
    84c0:	28c6703a 	and	r3,r5,r3
    84c4:	280ad7fa 	srli	r5,r5,31
    84c8:	3980120e 	bge	r7,r6,8514 <__fixdfsi+0x68>
    84cc:	00810744 	movi	r2,1053
    84d0:	11800c16 	blt	r2,r6,8504 <__fixdfsi+0x58>
    84d4:	00810cc4 	movi	r2,1075
    84d8:	1185c83a 	sub	r2,r2,r6
    84dc:	01c007c4 	movi	r7,31
    84e0:	18c00434 	orhi	r3,r3,16
    84e4:	38800d16 	blt	r7,r2,851c <__fixdfsi+0x70>
    84e8:	31befb44 	addi	r6,r6,-1043
    84ec:	2084d83a 	srl	r2,r4,r2
    84f0:	1986983a 	sll	r3,r3,r6
    84f4:	1884b03a 	or	r2,r3,r2
    84f8:	28000726 	beq	r5,zero,8518 <__fixdfsi+0x6c>
    84fc:	0085c83a 	sub	r2,zero,r2
    8500:	f800283a 	ret
    8504:	00a00034 	movhi	r2,32768
    8508:	10bfffc4 	addi	r2,r2,-1
    850c:	2885883a 	add	r2,r5,r2
    8510:	f800283a 	ret
    8514:	0005883a 	mov	r2,zero
    8518:	f800283a 	ret
    851c:	008104c4 	movi	r2,1043
    8520:	1185c83a 	sub	r2,r2,r6
    8524:	1884d83a 	srl	r2,r3,r2
    8528:	003ff306 	br	84f8 <__ram_exceptions_end+0xfe0064d8>

0000852c <__floatsidf>:
    852c:	defffd04 	addi	sp,sp,-12
    8530:	dfc00215 	stw	ra,8(sp)
    8534:	dc400115 	stw	r17,4(sp)
    8538:	dc000015 	stw	r16,0(sp)
    853c:	20002b26 	beq	r4,zero,85ec <__floatsidf+0xc0>
    8540:	2023883a 	mov	r17,r4
    8544:	2020d7fa 	srli	r16,r4,31
    8548:	20002d16 	blt	r4,zero,8600 <__floatsidf+0xd4>
    854c:	8809883a 	mov	r4,r17
    8550:	00089680 	call	8968 <__clzsi2>
    8554:	01410784 	movi	r5,1054
    8558:	288bc83a 	sub	r5,r5,r2
    855c:	01010cc4 	movi	r4,1075
    8560:	2149c83a 	sub	r4,r4,r5
    8564:	00c007c4 	movi	r3,31
    8568:	1900160e 	bge	r3,r4,85c4 <__floatsidf+0x98>
    856c:	00c104c4 	movi	r3,1043
    8570:	1947c83a 	sub	r3,r3,r5
    8574:	88c6983a 	sll	r3,r17,r3
    8578:	00800434 	movhi	r2,16
    857c:	10bfffc4 	addi	r2,r2,-1
    8580:	1886703a 	and	r3,r3,r2
    8584:	2941ffcc 	andi	r5,r5,2047
    8588:	800d883a 	mov	r6,r16
    858c:	0005883a 	mov	r2,zero
    8590:	280a953a 	slli	r5,r5,20
    8594:	31803fcc 	andi	r6,r6,255
    8598:	01000434 	movhi	r4,16
    859c:	300c97fa 	slli	r6,r6,31
    85a0:	213fffc4 	addi	r4,r4,-1
    85a4:	1906703a 	and	r3,r3,r4
    85a8:	1946b03a 	or	r3,r3,r5
    85ac:	1986b03a 	or	r3,r3,r6
    85b0:	dfc00217 	ldw	ra,8(sp)
    85b4:	dc400117 	ldw	r17,4(sp)
    85b8:	dc000017 	ldw	r16,0(sp)
    85bc:	dec00304 	addi	sp,sp,12
    85c0:	f800283a 	ret
    85c4:	00c002c4 	movi	r3,11
    85c8:	1887c83a 	sub	r3,r3,r2
    85cc:	88c6d83a 	srl	r3,r17,r3
    85d0:	8904983a 	sll	r2,r17,r4
    85d4:	01000434 	movhi	r4,16
    85d8:	213fffc4 	addi	r4,r4,-1
    85dc:	2941ffcc 	andi	r5,r5,2047
    85e0:	1906703a 	and	r3,r3,r4
    85e4:	800d883a 	mov	r6,r16
    85e8:	003fe906 	br	8590 <__ram_exceptions_end+0xfe006570>
    85ec:	000d883a 	mov	r6,zero
    85f0:	000b883a 	mov	r5,zero
    85f4:	0007883a 	mov	r3,zero
    85f8:	0005883a 	mov	r2,zero
    85fc:	003fe406 	br	8590 <__ram_exceptions_end+0xfe006570>
    8600:	0123c83a 	sub	r17,zero,r4
    8604:	003fd106 	br	854c <__ram_exceptions_end+0xfe00652c>

00008608 <__floatunsidf>:
    8608:	defffe04 	addi	sp,sp,-8
    860c:	dc000015 	stw	r16,0(sp)
    8610:	dfc00115 	stw	ra,4(sp)
    8614:	2021883a 	mov	r16,r4
    8618:	20002226 	beq	r4,zero,86a4 <__floatunsidf+0x9c>
    861c:	00089680 	call	8968 <__clzsi2>
    8620:	01010784 	movi	r4,1054
    8624:	2089c83a 	sub	r4,r4,r2
    8628:	01810cc4 	movi	r6,1075
    862c:	310dc83a 	sub	r6,r6,r4
    8630:	00c007c4 	movi	r3,31
    8634:	1980120e 	bge	r3,r6,8680 <__floatunsidf+0x78>
    8638:	00c104c4 	movi	r3,1043
    863c:	1907c83a 	sub	r3,r3,r4
    8640:	80ca983a 	sll	r5,r16,r3
    8644:	00800434 	movhi	r2,16
    8648:	10bfffc4 	addi	r2,r2,-1
    864c:	2101ffcc 	andi	r4,r4,2047
    8650:	0021883a 	mov	r16,zero
    8654:	288a703a 	and	r5,r5,r2
    8658:	2008953a 	slli	r4,r4,20
    865c:	00c00434 	movhi	r3,16
    8660:	18ffffc4 	addi	r3,r3,-1
    8664:	28c6703a 	and	r3,r5,r3
    8668:	8005883a 	mov	r2,r16
    866c:	1906b03a 	or	r3,r3,r4
    8670:	dfc00117 	ldw	ra,4(sp)
    8674:	dc000017 	ldw	r16,0(sp)
    8678:	dec00204 	addi	sp,sp,8
    867c:	f800283a 	ret
    8680:	00c002c4 	movi	r3,11
    8684:	188bc83a 	sub	r5,r3,r2
    8688:	814ad83a 	srl	r5,r16,r5
    868c:	00c00434 	movhi	r3,16
    8690:	18ffffc4 	addi	r3,r3,-1
    8694:	81a0983a 	sll	r16,r16,r6
    8698:	2101ffcc 	andi	r4,r4,2047
    869c:	28ca703a 	and	r5,r5,r3
    86a0:	003fed06 	br	8658 <__ram_exceptions_end+0xfe006638>
    86a4:	0009883a 	mov	r4,zero
    86a8:	000b883a 	mov	r5,zero
    86ac:	003fea06 	br	8658 <__ram_exceptions_end+0xfe006638>

000086b0 <__extendsfdf2>:
    86b0:	200ad5fa 	srli	r5,r4,23
    86b4:	defffd04 	addi	sp,sp,-12
    86b8:	dc400115 	stw	r17,4(sp)
    86bc:	29403fcc 	andi	r5,r5,255
    86c0:	29800044 	addi	r6,r5,1
    86c4:	04402034 	movhi	r17,128
    86c8:	dc000015 	stw	r16,0(sp)
    86cc:	8c7fffc4 	addi	r17,r17,-1
    86d0:	dfc00215 	stw	ra,8(sp)
    86d4:	31803fcc 	andi	r6,r6,255
    86d8:	00800044 	movi	r2,1
    86dc:	8922703a 	and	r17,r17,r4
    86e0:	2020d7fa 	srli	r16,r4,31
    86e4:	1180110e 	bge	r2,r6,872c <__extendsfdf2+0x7c>
    86e8:	880cd0fa 	srli	r6,r17,3
    86ec:	8822977a 	slli	r17,r17,29
    86f0:	2940e004 	addi	r5,r5,896
    86f4:	2941ffcc 	andi	r5,r5,2047
    86f8:	2804953a 	slli	r2,r5,20
    86fc:	01400434 	movhi	r5,16
    8700:	800697fa 	slli	r3,r16,31
    8704:	297fffc4 	addi	r5,r5,-1
    8708:	314a703a 	and	r5,r6,r5
    870c:	288ab03a 	or	r5,r5,r2
    8710:	28c6b03a 	or	r3,r5,r3
    8714:	8805883a 	mov	r2,r17
    8718:	dfc00217 	ldw	ra,8(sp)
    871c:	dc400117 	ldw	r17,4(sp)
    8720:	dc000017 	ldw	r16,0(sp)
    8724:	dec00304 	addi	sp,sp,12
    8728:	f800283a 	ret
    872c:	2800111e 	bne	r5,zero,8774 <__extendsfdf2+0xc4>
    8730:	88001c26 	beq	r17,zero,87a4 <__extendsfdf2+0xf4>
    8734:	8809883a 	mov	r4,r17
    8738:	00089680 	call	8968 <__clzsi2>
    873c:	00c00284 	movi	r3,10
    8740:	18801b16 	blt	r3,r2,87b0 <__extendsfdf2+0x100>
    8744:	018002c4 	movi	r6,11
    8748:	308dc83a 	sub	r6,r6,r2
    874c:	11000544 	addi	r4,r2,21
    8750:	8986d83a 	srl	r3,r17,r6
    8754:	8922983a 	sll	r17,r17,r4
    8758:	0180e244 	movi	r6,905
    875c:	01400434 	movhi	r5,16
    8760:	3085c83a 	sub	r2,r6,r2
    8764:	297fffc4 	addi	r5,r5,-1
    8768:	194c703a 	and	r6,r3,r5
    876c:	1141ffcc 	andi	r5,r2,2047
    8770:	003fe006 	br	86f4 <__ram_exceptions_end+0xfe0066d4>
    8774:	88000826 	beq	r17,zero,8798 <__extendsfdf2+0xe8>
    8778:	880cd0fa 	srli	r6,r17,3
    877c:	00800434 	movhi	r2,16
    8780:	10bfffc4 	addi	r2,r2,-1
    8784:	31800234 	orhi	r6,r6,8
    8788:	8822977a 	slli	r17,r17,29
    878c:	308c703a 	and	r6,r6,r2
    8790:	0141ffc4 	movi	r5,2047
    8794:	003fd706 	br	86f4 <__ram_exceptions_end+0xfe0066d4>
    8798:	0141ffc4 	movi	r5,2047
    879c:	000d883a 	mov	r6,zero
    87a0:	003fd406 	br	86f4 <__ram_exceptions_end+0xfe0066d4>
    87a4:	000b883a 	mov	r5,zero
    87a8:	000d883a 	mov	r6,zero
    87ac:	003fd106 	br	86f4 <__ram_exceptions_end+0xfe0066d4>
    87b0:	11bffd44 	addi	r6,r2,-11
    87b4:	8986983a 	sll	r3,r17,r6
    87b8:	0023883a 	mov	r17,zero
    87bc:	003fe606 	br	8758 <__ram_exceptions_end+0xfe006738>

000087c0 <__truncdfsf2>:
    87c0:	2810d53a 	srli	r8,r5,20
    87c4:	01c00434 	movhi	r7,16
    87c8:	39ffffc4 	addi	r7,r7,-1
    87cc:	29ce703a 	and	r7,r5,r7
    87d0:	4201ffcc 	andi	r8,r8,2047
    87d4:	380e90fa 	slli	r7,r7,3
    87d8:	200cd77a 	srli	r6,r4,29
    87dc:	42400044 	addi	r9,r8,1
    87e0:	4a41ffcc 	andi	r9,r9,2047
    87e4:	00c00044 	movi	r3,1
    87e8:	280ad7fa 	srli	r5,r5,31
    87ec:	31ceb03a 	or	r7,r6,r7
    87f0:	200490fa 	slli	r2,r4,3
    87f4:	1a40230e 	bge	r3,r9,8884 <__truncdfsf2+0xc4>
    87f8:	40ff2004 	addi	r3,r8,-896
    87fc:	01803f84 	movi	r6,254
    8800:	30c01516 	blt	r6,r3,8858 <__truncdfsf2+0x98>
    8804:	00c0380e 	bge	zero,r3,88e8 <__truncdfsf2+0x128>
    8808:	200c91ba 	slli	r6,r4,6
    880c:	380e90fa 	slli	r7,r7,3
    8810:	1004d77a 	srli	r2,r2,29
    8814:	300cc03a 	cmpne	r6,r6,zero
    8818:	31ccb03a 	or	r6,r6,r7
    881c:	308cb03a 	or	r6,r6,r2
    8820:	308001cc 	andi	r2,r6,7
    8824:	10000426 	beq	r2,zero,8838 <__truncdfsf2+0x78>
    8828:	308003cc 	andi	r2,r6,15
    882c:	01000104 	movi	r4,4
    8830:	11000126 	beq	r2,r4,8838 <__truncdfsf2+0x78>
    8834:	31800104 	addi	r6,r6,4
    8838:	3081002c 	andhi	r2,r6,1024
    883c:	10001626 	beq	r2,zero,8898 <__truncdfsf2+0xd8>
    8840:	18c00044 	addi	r3,r3,1
    8844:	00803fc4 	movi	r2,255
    8848:	18800326 	beq	r3,r2,8858 <__truncdfsf2+0x98>
    884c:	300c91ba 	slli	r6,r6,6
    8850:	300cd27a 	srli	r6,r6,9
    8854:	00000206 	br	8860 <__truncdfsf2+0xa0>
    8858:	00ffffc4 	movi	r3,-1
    885c:	000d883a 	mov	r6,zero
    8860:	18c03fcc 	andi	r3,r3,255
    8864:	180895fa 	slli	r4,r3,23
    8868:	00c02034 	movhi	r3,128
    886c:	280a97fa 	slli	r5,r5,31
    8870:	18ffffc4 	addi	r3,r3,-1
    8874:	30c6703a 	and	r3,r6,r3
    8878:	1906b03a 	or	r3,r3,r4
    887c:	1944b03a 	or	r2,r3,r5
    8880:	f800283a 	ret
    8884:	40000b1e 	bne	r8,zero,88b4 <__truncdfsf2+0xf4>
    8888:	388cb03a 	or	r6,r7,r2
    888c:	0007883a 	mov	r3,zero
    8890:	30000426 	beq	r6,zero,88a4 <__truncdfsf2+0xe4>
    8894:	01800144 	movi	r6,5
    8898:	00803fc4 	movi	r2,255
    889c:	300cd0fa 	srli	r6,r6,3
    88a0:	18800a26 	beq	r3,r2,88cc <__truncdfsf2+0x10c>
    88a4:	00802034 	movhi	r2,128
    88a8:	10bfffc4 	addi	r2,r2,-1
    88ac:	308c703a 	and	r6,r6,r2
    88b0:	003feb06 	br	8860 <__ram_exceptions_end+0xfe006840>
    88b4:	3888b03a 	or	r4,r7,r2
    88b8:	203fe726 	beq	r4,zero,8858 <__ram_exceptions_end+0xfe006838>
    88bc:	380c90fa 	slli	r6,r7,3
    88c0:	00c03fc4 	movi	r3,255
    88c4:	31808034 	orhi	r6,r6,512
    88c8:	003fd506 	br	8820 <__ram_exceptions_end+0xfe006800>
    88cc:	303fe226 	beq	r6,zero,8858 <__ram_exceptions_end+0xfe006838>
    88d0:	00802034 	movhi	r2,128
    88d4:	31801034 	orhi	r6,r6,64
    88d8:	10bfffc4 	addi	r2,r2,-1
    88dc:	00ffffc4 	movi	r3,-1
    88e0:	308c703a 	and	r6,r6,r2
    88e4:	003fde06 	br	8860 <__ram_exceptions_end+0xfe006840>
    88e8:	013ffa44 	movi	r4,-23
    88ec:	19000e16 	blt	r3,r4,8928 <__truncdfsf2+0x168>
    88f0:	01000784 	movi	r4,30
    88f4:	20c9c83a 	sub	r4,r4,r3
    88f8:	018007c4 	movi	r6,31
    88fc:	39c02034 	orhi	r7,r7,128
    8900:	31000b16 	blt	r6,r4,8930 <__truncdfsf2+0x170>
    8904:	423f2084 	addi	r8,r8,-894
    8908:	120c983a 	sll	r6,r2,r8
    890c:	3a0e983a 	sll	r7,r7,r8
    8910:	1104d83a 	srl	r2,r2,r4
    8914:	300cc03a 	cmpne	r6,r6,zero
    8918:	31ceb03a 	or	r7,r6,r7
    891c:	388cb03a 	or	r6,r7,r2
    8920:	0007883a 	mov	r3,zero
    8924:	003fbe06 	br	8820 <__ram_exceptions_end+0xfe006800>
    8928:	0007883a 	mov	r3,zero
    892c:	003fd906 	br	8894 <__ram_exceptions_end+0xfe006874>
    8930:	01bfff84 	movi	r6,-2
    8934:	30cdc83a 	sub	r6,r6,r3
    8938:	00c00804 	movi	r3,32
    893c:	398cd83a 	srl	r6,r7,r6
    8940:	20c00726 	beq	r4,r3,8960 <__truncdfsf2+0x1a0>
    8944:	423f2884 	addi	r8,r8,-862
    8948:	3a0e983a 	sll	r7,r7,r8
    894c:	3884b03a 	or	r2,r7,r2
    8950:	1004c03a 	cmpne	r2,r2,zero
    8954:	118cb03a 	or	r6,r2,r6
    8958:	0007883a 	mov	r3,zero
    895c:	003fb006 	br	8820 <__ram_exceptions_end+0xfe006800>
    8960:	000f883a 	mov	r7,zero
    8964:	003ff906 	br	894c <__ram_exceptions_end+0xfe00692c>

00008968 <__clzsi2>:
    8968:	00bfffd4 	movui	r2,65535
    896c:	11000536 	bltu	r2,r4,8984 <__clzsi2+0x1c>
    8970:	00803fc4 	movi	r2,255
    8974:	11000f36 	bltu	r2,r4,89b4 <__clzsi2+0x4c>
    8978:	00800804 	movi	r2,32
    897c:	0007883a 	mov	r3,zero
    8980:	00000506 	br	8998 <__clzsi2+0x30>
    8984:	00804034 	movhi	r2,256
    8988:	10bfffc4 	addi	r2,r2,-1
    898c:	11000c2e 	bgeu	r2,r4,89c0 <__clzsi2+0x58>
    8990:	00800204 	movi	r2,8
    8994:	00c00604 	movi	r3,24
    8998:	20c8d83a 	srl	r4,r4,r3
    899c:	00c00074 	movhi	r3,1
    89a0:	18e30f04 	addi	r3,r3,-29636
    89a4:	1909883a 	add	r4,r3,r4
    89a8:	20c00003 	ldbu	r3,0(r4)
    89ac:	10c5c83a 	sub	r2,r2,r3
    89b0:	f800283a 	ret
    89b4:	00800604 	movi	r2,24
    89b8:	00c00204 	movi	r3,8
    89bc:	003ff606 	br	8998 <__ram_exceptions_end+0xfe006978>
    89c0:	00800404 	movi	r2,16
    89c4:	1007883a 	mov	r3,r2
    89c8:	003ff306 	br	8998 <__ram_exceptions_end+0xfe006978>

000089cc <__errno>:
    89cc:	00800074 	movhi	r2,1
    89d0:	10ab8f04 	addi	r2,r2,-20932
    89d4:	10800017 	ldw	r2,0(r2)
    89d8:	f800283a 	ret

000089dc <memset>:
    89dc:	2005883a 	mov	r2,r4
    89e0:	2007883a 	mov	r3,r4
    89e4:	218d883a 	add	r6,r4,r6
    89e8:	19800326 	beq	r3,r6,89f8 <memset+0x1c>
    89ec:	19400005 	stb	r5,0(r3)
    89f0:	18c00044 	addi	r3,r3,1
    89f4:	003ffc06 	br	89e8 <__ram_exceptions_end+0xfe0069c8>
    89f8:	f800283a 	ret

000089fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    89fc:	deffff04 	addi	sp,sp,-4
    8a00:	01000074 	movhi	r4,1
    8a04:	01400074 	movhi	r5,1
    8a08:	dfc00015 	stw	ra,0(sp)
    8a0c:	21234f04 	addi	r4,r4,-29380
    8a10:	296b9104 	addi	r5,r5,-20924

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8a14:	2140061e 	bne	r4,r5,8a30 <alt_load+0x34>
    8a18:	01008034 	movhi	r4,512
    8a1c:	01400034 	movhi	r5,0
    8a20:	21080804 	addi	r4,r4,8224
    8a24:	29400004 	addi	r5,r5,0
    8a28:	2140121e 	bne	r4,r5,8a74 <alt_load+0x78>
    8a2c:	00000b06 	br	8a5c <alt_load+0x60>
    8a30:	00c00074 	movhi	r3,1
    8a34:	18eb9104 	addi	r3,r3,-20924
    8a38:	1907c83a 	sub	r3,r3,r4
    8a3c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8a40:	10fff526 	beq	r2,r3,8a18 <__ram_exceptions_end+0xfe0069f8>
    {
      *to++ = *from++;
    8a44:	114f883a 	add	r7,r2,r5
    8a48:	39c00017 	ldw	r7,0(r7)
    8a4c:	110d883a 	add	r6,r2,r4
    8a50:	10800104 	addi	r2,r2,4
    8a54:	31c00015 	stw	r7,0(r6)
    8a58:	003ff906 	br	8a40 <__ram_exceptions_end+0xfe006a20>
    8a5c:	01000074 	movhi	r4,1
    8a60:	01400074 	movhi	r5,1
    8a64:	2122ee04 	addi	r4,r4,-29768
    8a68:	2962ee04 	addi	r5,r5,-29768

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8a6c:	2140101e 	bne	r4,r5,8ab0 <alt_load+0xb4>
    8a70:	00000b06 	br	8aa0 <alt_load+0xa4>
    8a74:	00c08034 	movhi	r3,512
    8a78:	18c80804 	addi	r3,r3,8224
    8a7c:	1907c83a 	sub	r3,r3,r4
    8a80:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8a84:	10fff526 	beq	r2,r3,8a5c <__ram_exceptions_end+0xfe006a3c>
    {
      *to++ = *from++;
    8a88:	114f883a 	add	r7,r2,r5
    8a8c:	39c00017 	ldw	r7,0(r7)
    8a90:	110d883a 	add	r6,r2,r4
    8a94:	10800104 	addi	r2,r2,4
    8a98:	31c00015 	stw	r7,0(r6)
    8a9c:	003ff906 	br	8a84 <__ram_exceptions_end+0xfe006a64>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8aa0:	0008ba80 	call	8ba8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8aa4:	dfc00017 	ldw	ra,0(sp)
    8aa8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8aac:	0008bac1 	jmpi	8bac <alt_icache_flush_all>
    8ab0:	00c00074 	movhi	r3,1
    8ab4:	18e34f04 	addi	r3,r3,-29380
    8ab8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8abc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8ac0:	18bff726 	beq	r3,r2,8aa0 <__ram_exceptions_end+0xfe006a80>
    {
      *to++ = *from++;
    8ac4:	114f883a 	add	r7,r2,r5
    8ac8:	39c00017 	ldw	r7,0(r7)
    8acc:	110d883a 	add	r6,r2,r4
    8ad0:	10800104 	addi	r2,r2,4
    8ad4:	31c00015 	stw	r7,0(r6)
    8ad8:	003ff906 	br	8ac0 <__ram_exceptions_end+0xfe006aa0>

00008adc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8adc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8ae0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8ae4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8ae8:	0008b500 	call	8b50 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8aec:	0008b700 	call	8b70 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8af0:	d1a84c17 	ldw	r6,-24272(gp)
    8af4:	d1684d17 	ldw	r5,-24268(gp)
    8af8:	d1284e17 	ldw	r4,-24264(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8afc:	dfc00017 	ldw	ra,0(sp)
    8b00:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8b04:	00011bc1 	jmpi	11bc <main>

00008b08 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8b08:	defffd04 	addi	sp,sp,-12
    8b0c:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    8b10:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8b14:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    8b18:	01000074 	movhi	r4,1
    8b1c:	000f883a 	mov	r7,zero
    8b20:	01800044 	movi	r6,1
    8b24:	d80b883a 	mov	r5,sp
    8b28:	212b9004 	addi	r4,r4,-20928
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8b2c:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    8b30:	0008b740 	call	8b74 <altera_avalon_jtag_uart_write>
    8b34:	00ffffc4 	movi	r3,-1
    8b38:	10c00126 	beq	r2,r3,8b40 <alt_putchar+0x38>
        return -1;
    }
    return c;
    8b3c:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    8b40:	dfc00217 	ldw	ra,8(sp)
    8b44:	dc000117 	ldw	r16,4(sp)
    8b48:	dec00304 	addi	sp,sp,12
    8b4c:	f800283a 	ret

00008b50 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8b50:	deffff04 	addi	sp,sp,-4
    8b54:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2E, nios2e);
    8b58:	0008bb00 	call	8bb0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8b5c:	00800044 	movi	r2,1
    8b60:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8b64:	dfc00017 	ldw	ra,0(sp)
    8b68:	dec00104 	addi	sp,sp,4
    8b6c:	f800283a 	ret

00008b70 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8b70:	f800283a 	ret

00008b74 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8b74:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8b78:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8b7c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8b80:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8b84:	2980072e 	bgeu	r5,r6,8ba4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8b88:	38c00037 	ldwio	r3,0(r7)
    8b8c:	18ffffec 	andhi	r3,r3,65535
    8b90:	183ffc26 	beq	r3,zero,8b84 <__ram_exceptions_end+0xfe006b64>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8b94:	28c00007 	ldb	r3,0(r5)
    8b98:	20c00035 	stwio	r3,0(r4)
    8b9c:	29400044 	addi	r5,r5,1
    8ba0:	003ff806 	br	8b84 <__ram_exceptions_end+0xfe006b64>

  return count;
}
    8ba4:	f800283a 	ret

00008ba8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8ba8:	f800283a 	ret

00008bac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8bac:	f800283a 	ret

00008bb0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8bb0:	000170fa 	wrctl	ienable,zero
    8bb4:	f800283a 	ret
