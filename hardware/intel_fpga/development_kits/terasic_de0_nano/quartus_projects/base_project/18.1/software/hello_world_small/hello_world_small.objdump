
hello_world_small.elf:     file format elf32-littlenios2
hello_world_small.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000000

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x000004c8 memsz 0x000004c8 flags r-x
    LOAD off    0x000014c8 vaddr 0x020004c8 paddr 0x020004cc align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000014d0 vaddr 0x020004d0 paddr 0x020004d0 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00002000 vaddr 0x04002000 paddr 0x04002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04002000  04002000  00002000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  04002020  04002020  00002020  2**0
                  CONTENTS
  2 .text         000004b0  02000000  02000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  020004b0  020004b0  000014b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  020004c8  020004cc  000014c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  020004d0  020004d0  000014d0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  020004dc  020004dc  00002020  2**0
                  CONTENTS
  7 .onchip_ram   00000000  04002020  04002020  00002020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000001e8  00000000  00000000  00002048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000010d2  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000008fb  00000000  00000000  00003302  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000ab5  00000000  00000000  00003bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000254  00000000  00000000  000046b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000850  00000000  00000000  00004908  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000709  00000000  00000000  00005158  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00005864  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000e8  00000000  00000000  000058a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000688e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000006  00000000  00000000  00006891  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00006897  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00006898  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00006899  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  000068a2  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  000068ab  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  000068b4  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000056  00000000  00000000  000068be  2**0
                  CONTENTS, READONLY
 27 .jdi          00004b97  00000000  00000000  00006914  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00048001  00000000  00000000  0000b4ab  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04002000 l    d  .entry	00000000 .entry
04002020 l    d  .exceptions	00000000 .exceptions
02000000 l    d  .text	00000000 .text
020004b0 l    d  .rodata	00000000 .rodata
020004c8 l    d  .rwdata	00000000 .rwdata
020004d0 l    d  .bss	00000000 .bss
020004dc l    d  .sdram	00000000 .sdram
04002020 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_small_bsp//obj/HAL/src/crt0.o
02000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
02000160 g     F .text	0000002c alt_main
020004cc g       *ABS*	00000000 __flash_rwdata_start
0200018c g     F .text	00000038 alt_putstr
020004c8 g     O .rwdata	00000004 jtag_uart
020002b0 g     F .text	00000008 altera_nios2_gen2_irq_init
04002000 g     F .entry	0000000c __reset
04002020 g       *ABS*	00000000 __flash_exceptions_start
020004d4 g     O .bss	00000004 alt_argv
020084c8 g       *ABS*	00000000 _gp
020001c4 g     F .text	00000004 usleep
020003cc g     F .text	00000064 .hidden __udivsi3
020004dc g       *ABS*	00000000 __bss_end
020002a8 g     F .text	00000004 alt_dcache_flush_all
020004cc g       *ABS*	00000000 __ram_rwdata_end
020004c8 g       *ABS*	00000000 __ram_rodata_end
02000430 g     F .text	00000058 .hidden __umodsi3
020004dc g       *ABS*	00000000 end
04000000 g       *ABS*	00000000 __alt_stack_pointer
020001ec g     F .text	00000034 altera_avalon_jtag_uart_write
02000000 g     F .text	0000003c _start
020001e8 g     F .text	00000004 alt_sys_init
02000488 g     F .text	00000028 .hidden __mulsi3
020004c8 g       *ABS*	00000000 __ram_rwdata_start
020004b0 g       *ABS*	00000000 __ram_rodata_start
02000220 g     F .text	00000088 alt_busy_sleep
020004dc g       *ABS*	00000000 __alt_stack_base
020004d0 g       *ABS*	00000000 __bss_start
0200003c g     F .text	00000044 main
020004d0 g     O .bss	00000004 alt_envp
020002d4 g     F .text	00000084 .hidden __divsi3
020004b0 g       *ABS*	00000000 __flash_rodata_start
020001c8 g     F .text	00000020 alt_irq_init
020004d8 g     O .bss	00000004 alt_argc
04002020 g       *ABS*	00000000 __ram_exceptions_start
020004cc g       *ABS*	00000000 _edata
020004dc g       *ABS*	00000000 _end
04002020 g       *ABS*	00000000 __ram_exceptions_end
02000358 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000000 g       *ABS*	00000000 __alt_mem_sdram
04002000 g       *ABS*	00000000 __alt_mem_onchip_ram
0400200c g       .entry	00000000 _exit
020002b8 g     F .text	0000001c strlen
020002ac g     F .text	00000004 alt_icache_flush_all
02000080 g     F .text	000000e0 alt_load



Disassembly of section .entry:

04002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4002000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 4002004:	08400014 	ori	at,at,0
    jmp r1
 4002008:	0800683a 	jmp	at

0400200c <_exit>:
	...

Disassembly of section .text:

02000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000000:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000008:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 200000c:	d6a13214 	ori	gp,gp,33992
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000010:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 2000014:	10813414 	ori	r2,r2,1232

    movhi r3, %hi(__bss_end)
 2000018:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 200001c:	18c13714 	ori	r3,r3,1244

    beq r2, r3, 1f
 2000020:	10c00326 	beq	r2,r3,2000030 <_start+0x30>

0:
    stw zero, (r2)
 2000024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200002c:	10fffd36 	bltu	r2,r3,2000024 <__flash_exceptions_start+0xfdffe004>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000030:	20000800 	call	2000080 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000034:	20001600 	call	2000160 <alt_main>

02000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000038:	003fff06 	br	2000038 <__flash_exceptions_start+0xfdffe018>

0200003c <main>:
#include "system.h"
#include <io.h>
#include <unistd.h>

int main()
{
 200003c:	defffd04 	addi	sp,sp,-12
  alt_u32 x;

  alt_putstr("Hello from Nios II!\n");
 2000040:	01008034 	movhi	r4,512
#include "system.h"
#include <io.h>
#include <unistd.h>

int main()
{
 2000044:	dc400115 	stw	r17,4(sp)
  alt_u32 x;

  alt_putstr("Hello from Nios II!\n");
 2000048:	21012c04 	addi	r4,r4,1200
  /* Event loop never exits. */

  x = 0;
  while (1) {
	  usleep(200000);
	  IOWR(LED_BASE, 0, x & 0xff);
 200004c:	04410034 	movhi	r17,1024
#include "system.h"
#include <io.h>
#include <unistd.h>

int main()
{
 2000050:	dc000015 	stw	r16,0(sp)
 2000054:	dfc00215 	stw	ra,8(sp)

  alt_putstr("Hello from Nios II!\n");

  /* Event loop never exits. */

  x = 0;
 2000058:	0021883a 	mov	r16,zero

int main()
{
  alt_u32 x;

  alt_putstr("Hello from Nios II!\n");
 200005c:	200018c0 	call	200018c <alt_putstr>
  /* Event loop never exits. */

  x = 0;
  while (1) {
	  usleep(200000);
	  IOWR(LED_BASE, 0, x & 0xff);
 2000060:	8c540004 	addi	r17,r17,20480

  /* Event loop never exits. */

  x = 0;
  while (1) {
	  usleep(200000);
 2000064:	010000f4 	movhi	r4,3
 2000068:	21035004 	addi	r4,r4,3392
 200006c:	20001c40 	call	20001c4 <usleep>
	  IOWR(LED_BASE, 0, x & 0xff);
 2000070:	80803fcc 	andi	r2,r16,255
 2000074:	88800035 	stwio	r2,0(r17)
	  x = x + 1;
 2000078:	84000044 	addi	r16,r16,1
 200007c:	003ff906 	br	2000064 <__flash_exceptions_start+0xfdffe044>

02000080 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2000080:	deffff04 	addi	sp,sp,-4
 2000084:	01008034 	movhi	r4,512
 2000088:	01408034 	movhi	r5,512
 200008c:	dfc00015 	stw	ra,0(sp)
 2000090:	21013204 	addi	r4,r4,1224
 2000094:	29413304 	addi	r5,r5,1228

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2000098:	2140061e 	bne	r4,r5,20000b4 <alt_load+0x34>
 200009c:	01010034 	movhi	r4,1024
 20000a0:	01410034 	movhi	r5,1024
 20000a4:	21080804 	addi	r4,r4,8224
 20000a8:	29480804 	addi	r5,r5,8224
 20000ac:	2140121e 	bne	r4,r5,20000f8 <alt_load+0x78>
 20000b0:	00000b06 	br	20000e0 <alt_load+0x60>
 20000b4:	00c08034 	movhi	r3,512
 20000b8:	18c13304 	addi	r3,r3,1228
 20000bc:	1907c83a 	sub	r3,r3,r4
 20000c0:	0005883a 	mov	r2,zero
  {
    while( to != end )
 20000c4:	10fff526 	beq	r2,r3,200009c <__flash_exceptions_start+0xfdffe07c>
    {
      *to++ = *from++;
 20000c8:	114f883a 	add	r7,r2,r5
 20000cc:	39c00017 	ldw	r7,0(r7)
 20000d0:	110d883a 	add	r6,r2,r4
 20000d4:	10800104 	addi	r2,r2,4
 20000d8:	31c00015 	stw	r7,0(r6)
 20000dc:	003ff906 	br	20000c4 <__flash_exceptions_start+0xfdffe0a4>
 20000e0:	01008034 	movhi	r4,512
 20000e4:	01408034 	movhi	r5,512
 20000e8:	21012c04 	addi	r4,r4,1200
 20000ec:	29412c04 	addi	r5,r5,1200

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 20000f0:	2140101e 	bne	r4,r5,2000134 <alt_load+0xb4>
 20000f4:	00000b06 	br	2000124 <alt_load+0xa4>
 20000f8:	00c10034 	movhi	r3,1024
 20000fc:	18c80804 	addi	r3,r3,8224
 2000100:	1907c83a 	sub	r3,r3,r4
 2000104:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2000108:	10fff526 	beq	r2,r3,20000e0 <__flash_exceptions_start+0xfdffe0c0>
    {
      *to++ = *from++;
 200010c:	114f883a 	add	r7,r2,r5
 2000110:	39c00017 	ldw	r7,0(r7)
 2000114:	110d883a 	add	r6,r2,r4
 2000118:	10800104 	addi	r2,r2,4
 200011c:	31c00015 	stw	r7,0(r6)
 2000120:	003ff906 	br	2000108 <__flash_exceptions_start+0xfdffe0e8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2000124:	20002a80 	call	20002a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 2000128:	dfc00017 	ldw	ra,0(sp)
 200012c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 2000130:	20002ac1 	jmpi	20002ac <alt_icache_flush_all>
 2000134:	00c08034 	movhi	r3,512
 2000138:	18c13204 	addi	r3,r3,1224
 200013c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2000140:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2000144:	18bff726 	beq	r3,r2,2000124 <__flash_exceptions_start+0xfdffe104>
    {
      *to++ = *from++;
 2000148:	114f883a 	add	r7,r2,r5
 200014c:	39c00017 	ldw	r7,0(r7)
 2000150:	110d883a 	add	r6,r2,r4
 2000154:	10800104 	addi	r2,r2,4
 2000158:	31c00015 	stw	r7,0(r6)
 200015c:	003ff906 	br	2000144 <__flash_exceptions_start+0xfdffe124>

02000160 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2000160:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2000164:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2000168:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200016c:	20001c80 	call	20001c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2000170:	20001e80 	call	20001e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2000174:	d1a00217 	ldw	r6,-32760(gp)
 2000178:	d1600317 	ldw	r5,-32756(gp)
 200017c:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 2000180:	dfc00017 	ldw	ra,0(sp)
 2000184:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2000188:	200003c1 	jmpi	200003c <main>

0200018c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 200018c:	defffe04 	addi	sp,sp,-8
 2000190:	dc000015 	stw	r16,0(sp)
 2000194:	dfc00115 	stw	ra,4(sp)
 2000198:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 200019c:	20002b80 	call	20002b8 <strlen>
 20001a0:	01008034 	movhi	r4,512
 20001a4:	000f883a 	mov	r7,zero
 20001a8:	100d883a 	mov	r6,r2
 20001ac:	800b883a 	mov	r5,r16
 20001b0:	21013204 	addi	r4,r4,1224
#else
    return fputs(str, stdout);
#endif
#endif
}
 20001b4:	dfc00117 	ldw	ra,4(sp)
 20001b8:	dc000017 	ldw	r16,0(sp)
 20001bc:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 20001c0:	20001ec1 	jmpi	20001ec <altera_avalon_jtag_uart_write>

020001c4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 20001c4:	20002201 	jmpi	2000220 <alt_busy_sleep>

020001c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 20001c8:	deffff04 	addi	sp,sp,-4
 20001cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2E, nios2e);
 20001d0:	20002b00 	call	20002b0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 20001d4:	00800044 	movi	r2,1
 20001d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 20001dc:	dfc00017 	ldw	ra,0(sp)
 20001e0:	dec00104 	addi	sp,sp,4
 20001e4:	f800283a 	ret

020001e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20001e8:	f800283a 	ret

020001ec <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 20001ec:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 20001f0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 20001f4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 20001f8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 20001fc:	2980072e 	bgeu	r5,r6,200021c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 2000200:	38c00037 	ldwio	r3,0(r7)
 2000204:	18ffffec 	andhi	r3,r3,65535
 2000208:	183ffc26 	beq	r3,zero,20001fc <__flash_exceptions_start+0xfdffe1dc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 200020c:	28c00007 	ldb	r3,0(r5)
 2000210:	20c00035 	stwio	r3,0(r4)
 2000214:	29400044 	addi	r5,r5,1
 2000218:	003ff806 	br	20001fc <__flash_exceptions_start+0xfdffe1dc>

  return count;
}
 200021c:	f800283a 	ret

02000220 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2000220:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 2000224:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2000228:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 200022c:	dc000015 	stw	r16,0(sp)
 2000230:	dfc00115 	stw	ra,4(sp)
 2000234:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2000238:	20003cc0 	call	20003cc <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 200023c:	10001026 	beq	r2,zero,2000280 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2000240:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2000244:	013999b4 	movhi	r4,58982
 2000248:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 200024c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2000250:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2000254:	297fffc4 	addi	r5,r5,-1
 2000258:	283ffe1e 	bne	r5,zero,2000254 <__flash_exceptions_start+0xfdffe234>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 200025c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2000260:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2000264:	18bffb16 	blt	r3,r2,2000254 <__flash_exceptions_start+0xfdffe234>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2000268:	01400144 	movi	r5,5
 200026c:	8009883a 	mov	r4,r16
 2000270:	20004880 	call	2000488 <__mulsi3>
 2000274:	10bfffc4 	addi	r2,r2,-1
 2000278:	103ffe1e 	bne	r2,zero,2000274 <__flash_exceptions_start+0xfdffe254>
 200027c:	00000506 	br	2000294 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2000280:	01400144 	movi	r5,5
 2000284:	8009883a 	mov	r4,r16
 2000288:	20004880 	call	2000488 <__mulsi3>
 200028c:	10bfffc4 	addi	r2,r2,-1
 2000290:	00bffe16 	blt	zero,r2,200028c <__flash_exceptions_start+0xfdffe26c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 2000294:	0005883a 	mov	r2,zero
 2000298:	dfc00117 	ldw	ra,4(sp)
 200029c:	dc000017 	ldw	r16,0(sp)
 20002a0:	dec00204 	addi	sp,sp,8
 20002a4:	f800283a 	ret

020002a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 20002a8:	f800283a 	ret

020002ac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 20002ac:	f800283a 	ret

020002b0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 20002b0:	000170fa 	wrctl	ienable,zero
 20002b4:	f800283a 	ret

020002b8 <strlen>:
 20002b8:	2005883a 	mov	r2,r4
 20002bc:	10c00007 	ldb	r3,0(r2)
 20002c0:	18000226 	beq	r3,zero,20002cc <strlen+0x14>
 20002c4:	10800044 	addi	r2,r2,1
 20002c8:	003ffc06 	br	20002bc <__flash_exceptions_start+0xfdffe29c>
 20002cc:	1105c83a 	sub	r2,r2,r4
 20002d0:	f800283a 	ret

020002d4 <__divsi3>:
 20002d4:	20001b16 	blt	r4,zero,2000344 <__divsi3+0x70>
 20002d8:	000f883a 	mov	r7,zero
 20002dc:	28001616 	blt	r5,zero,2000338 <__divsi3+0x64>
 20002e0:	200d883a 	mov	r6,r4
 20002e4:	29001a2e 	bgeu	r5,r4,2000350 <__divsi3+0x7c>
 20002e8:	00800804 	movi	r2,32
 20002ec:	00c00044 	movi	r3,1
 20002f0:	00000106 	br	20002f8 <__divsi3+0x24>
 20002f4:	10000d26 	beq	r2,zero,200032c <__divsi3+0x58>
 20002f8:	294b883a 	add	r5,r5,r5
 20002fc:	10bfffc4 	addi	r2,r2,-1
 2000300:	18c7883a 	add	r3,r3,r3
 2000304:	293ffb36 	bltu	r5,r4,20002f4 <__flash_exceptions_start+0xfdffe2d4>
 2000308:	0005883a 	mov	r2,zero
 200030c:	18000726 	beq	r3,zero,200032c <__divsi3+0x58>
 2000310:	0005883a 	mov	r2,zero
 2000314:	31400236 	bltu	r6,r5,2000320 <__divsi3+0x4c>
 2000318:	314dc83a 	sub	r6,r6,r5
 200031c:	10c4b03a 	or	r2,r2,r3
 2000320:	1806d07a 	srli	r3,r3,1
 2000324:	280ad07a 	srli	r5,r5,1
 2000328:	183ffa1e 	bne	r3,zero,2000314 <__flash_exceptions_start+0xfdffe2f4>
 200032c:	38000126 	beq	r7,zero,2000334 <__divsi3+0x60>
 2000330:	0085c83a 	sub	r2,zero,r2
 2000334:	f800283a 	ret
 2000338:	014bc83a 	sub	r5,zero,r5
 200033c:	39c0005c 	xori	r7,r7,1
 2000340:	003fe706 	br	20002e0 <__flash_exceptions_start+0xfdffe2c0>
 2000344:	0109c83a 	sub	r4,zero,r4
 2000348:	01c00044 	movi	r7,1
 200034c:	003fe306 	br	20002dc <__flash_exceptions_start+0xfdffe2bc>
 2000350:	00c00044 	movi	r3,1
 2000354:	003fee06 	br	2000310 <__flash_exceptions_start+0xfdffe2f0>

02000358 <__modsi3>:
 2000358:	20001716 	blt	r4,zero,20003b8 <__modsi3+0x60>
 200035c:	000f883a 	mov	r7,zero
 2000360:	2005883a 	mov	r2,r4
 2000364:	28001216 	blt	r5,zero,20003b0 <__modsi3+0x58>
 2000368:	2900162e 	bgeu	r5,r4,20003c4 <__modsi3+0x6c>
 200036c:	01800804 	movi	r6,32
 2000370:	00c00044 	movi	r3,1
 2000374:	00000106 	br	200037c <__modsi3+0x24>
 2000378:	30000a26 	beq	r6,zero,20003a4 <__modsi3+0x4c>
 200037c:	294b883a 	add	r5,r5,r5
 2000380:	31bfffc4 	addi	r6,r6,-1
 2000384:	18c7883a 	add	r3,r3,r3
 2000388:	293ffb36 	bltu	r5,r4,2000378 <__flash_exceptions_start+0xfdffe358>
 200038c:	18000526 	beq	r3,zero,20003a4 <__modsi3+0x4c>
 2000390:	1806d07a 	srli	r3,r3,1
 2000394:	11400136 	bltu	r2,r5,200039c <__modsi3+0x44>
 2000398:	1145c83a 	sub	r2,r2,r5
 200039c:	280ad07a 	srli	r5,r5,1
 20003a0:	183ffb1e 	bne	r3,zero,2000390 <__flash_exceptions_start+0xfdffe370>
 20003a4:	38000126 	beq	r7,zero,20003ac <__modsi3+0x54>
 20003a8:	0085c83a 	sub	r2,zero,r2
 20003ac:	f800283a 	ret
 20003b0:	014bc83a 	sub	r5,zero,r5
 20003b4:	003fec06 	br	2000368 <__flash_exceptions_start+0xfdffe348>
 20003b8:	0109c83a 	sub	r4,zero,r4
 20003bc:	01c00044 	movi	r7,1
 20003c0:	003fe706 	br	2000360 <__flash_exceptions_start+0xfdffe340>
 20003c4:	00c00044 	movi	r3,1
 20003c8:	003ff106 	br	2000390 <__flash_exceptions_start+0xfdffe370>

020003cc <__udivsi3>:
 20003cc:	200d883a 	mov	r6,r4
 20003d0:	2900152e 	bgeu	r5,r4,2000428 <__udivsi3+0x5c>
 20003d4:	28001416 	blt	r5,zero,2000428 <__udivsi3+0x5c>
 20003d8:	00800804 	movi	r2,32
 20003dc:	00c00044 	movi	r3,1
 20003e0:	00000206 	br	20003ec <__udivsi3+0x20>
 20003e4:	10000e26 	beq	r2,zero,2000420 <__udivsi3+0x54>
 20003e8:	28000516 	blt	r5,zero,2000400 <__udivsi3+0x34>
 20003ec:	294b883a 	add	r5,r5,r5
 20003f0:	10bfffc4 	addi	r2,r2,-1
 20003f4:	18c7883a 	add	r3,r3,r3
 20003f8:	293ffa36 	bltu	r5,r4,20003e4 <__flash_exceptions_start+0xfdffe3c4>
 20003fc:	18000826 	beq	r3,zero,2000420 <__udivsi3+0x54>
 2000400:	0005883a 	mov	r2,zero
 2000404:	31400236 	bltu	r6,r5,2000410 <__udivsi3+0x44>
 2000408:	314dc83a 	sub	r6,r6,r5
 200040c:	10c4b03a 	or	r2,r2,r3
 2000410:	1806d07a 	srli	r3,r3,1
 2000414:	280ad07a 	srli	r5,r5,1
 2000418:	183ffa1e 	bne	r3,zero,2000404 <__flash_exceptions_start+0xfdffe3e4>
 200041c:	f800283a 	ret
 2000420:	0005883a 	mov	r2,zero
 2000424:	f800283a 	ret
 2000428:	00c00044 	movi	r3,1
 200042c:	003ff406 	br	2000400 <__flash_exceptions_start+0xfdffe3e0>

02000430 <__umodsi3>:
 2000430:	2005883a 	mov	r2,r4
 2000434:	2900122e 	bgeu	r5,r4,2000480 <__umodsi3+0x50>
 2000438:	28001116 	blt	r5,zero,2000480 <__umodsi3+0x50>
 200043c:	01800804 	movi	r6,32
 2000440:	00c00044 	movi	r3,1
 2000444:	00000206 	br	2000450 <__umodsi3+0x20>
 2000448:	30000c26 	beq	r6,zero,200047c <__umodsi3+0x4c>
 200044c:	28000516 	blt	r5,zero,2000464 <__umodsi3+0x34>
 2000450:	294b883a 	add	r5,r5,r5
 2000454:	31bfffc4 	addi	r6,r6,-1
 2000458:	18c7883a 	add	r3,r3,r3
 200045c:	293ffa36 	bltu	r5,r4,2000448 <__flash_exceptions_start+0xfdffe428>
 2000460:	18000626 	beq	r3,zero,200047c <__umodsi3+0x4c>
 2000464:	1806d07a 	srli	r3,r3,1
 2000468:	11400136 	bltu	r2,r5,2000470 <__umodsi3+0x40>
 200046c:	1145c83a 	sub	r2,r2,r5
 2000470:	280ad07a 	srli	r5,r5,1
 2000474:	183ffb1e 	bne	r3,zero,2000464 <__flash_exceptions_start+0xfdffe444>
 2000478:	f800283a 	ret
 200047c:	f800283a 	ret
 2000480:	00c00044 	movi	r3,1
 2000484:	003ff706 	br	2000464 <__flash_exceptions_start+0xfdffe444>

02000488 <__mulsi3>:
 2000488:	0005883a 	mov	r2,zero
 200048c:	20000726 	beq	r4,zero,20004ac <__mulsi3+0x24>
 2000490:	20c0004c 	andi	r3,r4,1
 2000494:	2008d07a 	srli	r4,r4,1
 2000498:	18000126 	beq	r3,zero,20004a0 <__mulsi3+0x18>
 200049c:	1145883a 	add	r2,r2,r5
 20004a0:	294b883a 	add	r5,r5,r5
 20004a4:	203ffa1e 	bne	r4,zero,2000490 <__flash_exceptions_start+0xfdffe470>
 20004a8:	f800283a 	ret
 20004ac:	f800283a 	ret
