
bringup_test.elf:     file format elf32-littlenios2
bringup_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00009370 memsz 0x00009370 flags r-x
    LOAD off    0x0000a370 vaddr 0x00009370 paddr 0x0000b478 align 2**12
         filesz 0x00002108 memsz 0x00002108 flags rw-
    LOAD off    0x0000c580 vaddr 0x0000d580 paddr 0x0000d580 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x0000d000 vaddr 0x02002000 paddr 0x02002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02002000  02002000  0000d000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  02002020  02002020  0000d020  2**0
                  CONTENTS
  2 .text         000091c8  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001a8  000091c8  000091c8  0000a1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002108  00009370  0000b478  0000a370  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0000d580  0000d580  0000c580  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0000d58c  0000d58c  0000d020  2**0
                  CONTENTS
  7 .onchip_ram   00000000  02002020  02002020  0000d020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000d020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000678  00000000  00000000  0000d048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00009b56  00000000  00000000  0000d6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003636  00000000  00000000  00017216  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004438  00000000  00000000  0001a84c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001020  00000000  00000000  0001ec84  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001fb1  00000000  00000000  0001fca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000fe1a  00000000  00000000  00021c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00031a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001638  00000000  00000000  00031a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00034c0e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000006  00000000  00000000  00034c11  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00034c17  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00034c18  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00034c19  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00034c22  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00034c2b  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  00034c34  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000006f  00000000  00000000  00034c3e  2**0
                  CONTENTS, READONLY
 27 .jdi          00004b97  00000000  00000000  00034cad  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000394a7  00000000  00000000  00039844  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02002000 l    d  .entry	00000000 .entry
02002020 l    d  .exceptions	00000000 .exceptions
00000000 l    d  .text	00000000 .text
000091c8 l    d  .rodata	00000000 .rodata
00009370 l    d  .rwdata	00000000 .rwdata
0000d580 l    d  .bss	00000000 .bss
0000d58c l    d  .sdram	00000000 .sdram
02002020 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../bringup_test_bsp//obj/HAL/src/crt0.o
00000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 bringup_test.c
00000000 l    df *ABS*	00000000 printf.c
00001908 l     F .text	00000010 _out_buffer
00001918 l     F .text	00000004 _out_null
0000191c l     F .text	00000114 _out_rev
00001a30 l     F .text	0000019c _ntoa_format
00001bcc l     F .text	00000174 _ntoa_long
00001d40 l     F .text	000001a0 _ntoa_long_long
00001ee0 l     F .text	00000018 _out_char
00001ef8 l     F .text	00000020 _out_fct
00001f18 l     F .text	00000534 _ftoa
0000244c l     F .text	00000608 _etoa
00009210 l     O .rodata	00000050 pow10.1806
00002a54 l     F .text	000008fc _vsnprintf
00000000 l    df *ABS*	00000000 wf_exp.c
00000000 l    df *ABS*	00000000 wf_log.c
00000000 l    df *ABS*	00000000 ef_exp.c
0000b458 l     O .rwdata	00000008 ln2HI
0000b450 l     O .rwdata	00000008 ln2LO
0000b460 l     O .rwdata	00000008 halF
00000000 l    df *ABS*	00000000 ef_log.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_fpclassify.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0000b370 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
000090ec g     F .text	0000002c alt_main
00000054 g     F .text	00000008 f2bf
0000003c g     F .text	00000010 _putchar
0000b478 g       *ABS*	00000000 __flash_rwdata_start
000076fc g     F .text	00000088 .hidden __eqdf2
0000124c g     F .text	00000428 grey_to_text
000052ac g     F .text	00000440 .hidden __divsf3
000000b8 g     F .text	00000040 bf_gt
00003404 g     F .text	00000030 vprintf_
000001dc g     F .text	0000009c show_featuremap
000061fc g     F .text	00000070 .hidden __fixsfsi
00007784 g     F .text	000000dc .hidden __gtdf2
0000b474 g     O .rwdata	00000004 jtag_uart
000091c0 g     F .text	00000008 altera_nios2_gen2_irq_init
00008fdc g     F .text	00000010 __errno
02002000 g     F .entry	0000000c __reset
00000684 g     F .text	00000184 maxpool
00000c80 g     F .text	00000090 grey_to_feature
00003610 g     F .text	00000178 logf
00000000 g       *ABS*	00000000 __flash_exceptions_start
0000d584 g     O .bss	00000004 alt_argv
00013450 g       *ABS*	00000000 _gp
00005d18 g     F .text	000004e4 .hidden __subsf3
00008b3c g     F .text	000000dc .hidden __floatsidf
00007860 g     F .text	000000f4 .hidden __ltdf2
00000808 g     F .text	00000090 global_average_pooling
00003ab8 g     F .text	00000498 __ieee754_logf
00004d00 g     F .text	00000064 .hidden __udivsi3
00003390 g     F .text	0000003c sprintf_
00005820 g     F .text	000000c8 .hidden __lesf2
00003fd4 g     F .text	00000074 .hidden __fixunsdfsi
00003f7c g     F .text	00000058 __fpclassifyf
00003f64 g     F .text	00000018 finitef
00000df8 g     F .text	00000454 rgb565_to_text
00008cc0 g     F .text	00000110 .hidden __extendsfdf2
00006480 g     F .text	000008ac .hidden __adddf3
000056ec g     F .text	00000078 .hidden __nesf2
00004644 g     F .text	000005c4 .hidden __umoddi3
0000b468 g     O .rwdata	00000004 __fdlib_version
0000b46c g     O .rwdata	00000004 _global_impure_ptr
0000d58c g       *ABS*	00000000 __bss_end
00009370 g     O .rwdata	00002000 image64by64
00004048 g     F .text	000005fc .hidden __udivdi3
00008c18 g     F .text	000000a8 .hidden __floatunsidf
00003434 g     F .text	00000030 vsnprintf_
00003788 g     F .text	00000330 __ieee754_expf
000091b8 g     F .text	00000004 alt_dcache_flush_all
00008abc g     F .text	00000080 .hidden __fixdfsi
0000b478 g       *ABS*	00000000 __ram_rwdata_end
00003464 g     F .text	00000040 fctprintf
00005764 g     F .text	000000bc .hidden __gtsf2
000000ac g     F .text	0000000c bf_neg
00009370 g       *ABS*	00000000 __ram_rodata_end
00007860 g     F .text	000000f4 .hidden __ledf2
00004d64 g     F .text	00000058 .hidden __umodsi3
0000d58c g       *ABS*	00000000 end
000002cc g     F .text	000001a4 padding
02000000 g       *ABS*	00000000 __alt_stack_pointer
00008f78 g     F .text	00000064 .hidden __clzsi2
00009184 g     F .text	00000034 altera_avalon_jtag_uart_write
00000084 g     F .text	00000028 bf_add
00000000 g     F .text	0000003c _start
00009180 g     F .text	00000004 alt_sys_init
0000626c g     F .text	00000124 .hidden __floatsisf
00004dbc g     F .text	00000028 .hidden __mulsi3
00009370 g       *ABS*	00000000 __ram_rwdata_start
000091c8 g       *ABS*	00000000 __ram_rodata_start
0000005c g     F .text	00000028 bf_mult
000056ec g     F .text	00000078 .hidden __eqsf2
00000138 g     F .text	00000058 put_pixel
0000d58c g       *ABS*	00000000 __alt_stack_base
00006d2c g     F .text	000009d0 .hidden __divdf3
00007954 g     F .text	0000086c .hidden __muldf3
00000470 g     F .text	00000214 convolution
0000d580 g       *ABS*	00000000 __bss_start
00008fec g     F .text	00000020 memset
00001674 g     F .text	00000294 main
0000d580 g     O .bss	00000004 alt_envp
00000b60 g     F .text	00000120 rgb565_to_feature
00005820 g     F .text	000000c8 .hidden __ltsf2
00003f50 g     F .text	00000008 matherr
00008dd0 g     F .text	000001a8 .hidden __truncdfsf2
00000278 g     F .text	00000054 relu
00000d10 g     F .text	000000e8 rgb_to_grey
00004c08 g     F .text	00000084 .hidden __divsi3
000058e8 g     F .text	00000430 .hidden __mulsf3
000091c8 g       *ABS*	00000000 __flash_rodata_start
000076fc g     F .text	00000088 .hidden __nedf2
00009160 g     F .text	00000020 alt_irq_init
00009270 g     O .rodata	00000100 .hidden __clz_tab
00005764 g     F .text	000000bc .hidden __gesf2
000033cc g     F .text	00000038 snprintf_
0000b470 g     O .rwdata	00000004 _impure_ptr
0000d588 g     O .bss	00000004 alt_argc
00000190 g     F .text	0000004c get_pixel
00003f58 g     F .text	0000000c nan
02002020 g       *ABS*	00000000 __ram_exceptions_start
00003350 g     F .text	00000040 printf_
00000898 g     F .text	0000012c softmax
0000b478 g       *ABS*	00000000 _edata
0000d58c g       *ABS*	00000000 _end
02002020 g       *ABS*	00000000 __ram_exceptions_end
0000004c g     F .text	00000008 bf2f
00006390 g     F .text	000000f0 .hidden __floatunsisf
000000f8 g     F .text	00000040 bf_lt
00004c8c g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000000 g       *ABS*	00000000 __alt_mem_sdram
02002000 g       *ABS*	00000000 __alt_mem_onchip_ram
0200200c g       .entry	00000000 _exit
000034a4 g     F .text	0000016c expf
000009c4 g     F .text	0000019c scale
00007784 g     F .text	000000dc .hidden __gedf2
00009118 g     F .text	00000048 alt_putchar
000091bc g     F .text	00000004 alt_icache_flush_all
000081c0 g     F .text	000008fc .hidden __subdf3
00004de4 g     F .text	000004c8 .hidden __addsf3
0000900c g     F .text	000000e0 alt_load



Disassembly of section .entry:

02002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2002000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 2002004:	08400014 	ori	at,at,0
    jmp r1
 2002008:	0800683a 	jmp	at

0200200c <_exit>:
	...

Disassembly of section .text:

00000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
       0:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
       4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
       8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
       c:	d68d1414 	ori	gp,gp,13392
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      10:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      14:	10b56014 	ori	r2,r2,54656

    movhi r3, %hi(__bss_end)
      18:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      1c:	18f56314 	ori	r3,r3,54668

    beq r2, r3, 1f
      20:	10c00326 	beq	r2,r3,30 <_start+0x30>

0:
    stw zero, (r2)
      24:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      28:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      2c:	10fffd36 	bltu	r2,r3,24 <__ram_exceptions_end+0xfdffe004>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      30:	000900c0 	call	900c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      34:	00090ec0 	call	90ec <alt_main>

00000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      38:	003fff06 	br	38 <__ram_exceptions_end+0xfdffe018>

0000003c <_putchar>:
typedef alt_u16 bfloat16;

//////////////////////////////////////////////////////////////////////////////
void _putchar(char character)
{
	alt_putchar((int)character);	// printf_ character output
      3c:	21003fcc 	andi	r4,r4,255
      40:	2100201c 	xori	r4,r4,128
      44:	213fe004 	addi	r4,r4,-128
      48:	00091181 	jmpi	9118 <alt_putchar>

0000004c <bf2f>:
//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     return f.f;
}
      4c:	2004943a 	slli	r2,r4,16
      50:	f800283a 	ret

00000054 <f2bf>:
//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
}
      54:	2004d43a 	srli	r2,r4,16
      58:	f800283a 	ret

0000005c <bf_mult>:
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
      5c:	2804943a 	slli	r2,r5,16

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      60:	200a943a 	slli	r5,r4,16
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
      64:	deffff04 	addi	sp,sp,-4

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      68:	1009883a 	mov	r4,r2
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
      6c:	dfc00015 	stw	ra,0(sp)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      70:	00058e80 	call	58e8 <__mulsf3>
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}
      74:	1004d43a 	srli	r2,r2,16
      78:	dfc00017 	ldw	ra,0(sp)
      7c:	dec00104 	addi	sp,sp,4
      80:	f800283a 	ret

00000084 <bf_add>:
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
      84:	2804943a 	slli	r2,r5,16

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      88:	200a943a 	slli	r5,r4,16
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_add(bfloat16 a, bfloat16 b) {
      8c:	deffff04 	addi	sp,sp,-4

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      90:	1009883a 	mov	r4,r2
bfloat16 bf_mult(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) * bf2f(b));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_add(bfloat16 a, bfloat16 b) {
      94:	dfc00015 	stw	ra,0(sp)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      98:	0004de40 	call	4de4 <__addsf3>
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_add(bfloat16 a, bfloat16 b) {
     return f2bf(bf2f(a) + bf2f(b));
}
      9c:	1004d43a 	srli	r2,r2,16
      a0:	dfc00017 	ldw	ra,0(sp)
      a4:	dec00104 	addi	sp,sp,4
      a8:	f800283a 	ret

000000ac <bf_neg>:

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
      ac:	213fffcc 	andi	r4,r4,65535
     return f2bf(bf2f(a) + bf2f(b));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_neg(bfloat16 a) {
     return f2bf(-bf2f(a));
      b0:	20a0001c 	xori	r2,r4,32768
}
      b4:	f800283a 	ret

000000b8 <bf_gt>:
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
      b8:	2804943a 	slli	r2,r5,16
     return f2bf(-bf2f(a));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
     return bf2f(a) > bf2f(b);
      bc:	200a943a 	slli	r5,r4,16
bfloat16 bf_neg(bfloat16 a) {
     return f2bf(-bf2f(a));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
      c0:	defffe04 	addi	sp,sp,-8
     return bf2f(a) > bf2f(b);
      c4:	1009883a 	mov	r4,r2
bfloat16 bf_neg(bfloat16 a) {
     return f2bf(-bf2f(a));
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
      c8:	dfc00115 	stw	ra,4(sp)
      cc:	dc000015 	stw	r16,0(sp)
     return bf2f(a) > bf2f(b);
      d0:	00058200 	call	5820 <__lesf2>
      d4:	10000216 	blt	r2,zero,e0 <bf_gt+0x28>
      d8:	0021883a 	mov	r16,zero
      dc:	00000106 	br	e4 <bf_gt+0x2c>
      e0:	04000044 	movi	r16,1
}
      e4:	8005883a 	mov	r2,r16
      e8:	dfc00117 	ldw	ra,4(sp)
      ec:	dc000017 	ldw	r16,0(sp)
      f0:	dec00204 	addi	sp,sp,8
      f4:	f800283a 	ret

000000f8 <bf_lt>:
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
      f8:	2804943a 	slli	r2,r5,16
     return bf2f(a) > bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     return bf2f(a) < bf2f(b);
      fc:	200a943a 	slli	r5,r4,16
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
     return bf2f(a) > bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     100:	defffe04 	addi	sp,sp,-8
     return bf2f(a) < bf2f(b);
     104:	1009883a 	mov	r4,r2
bfloat16 bf_gt(bfloat16 a, bfloat16 b) {
     return bf2f(a) > bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     108:	dfc00115 	stw	ra,4(sp)
     10c:	dc000015 	stw	r16,0(sp)
     return bf2f(a) < bf2f(b);
     110:	00057640 	call	5764 <__gesf2>
     114:	00800216 	blt	zero,r2,120 <bf_lt+0x28>
     118:	0021883a 	mov	r16,zero
     11c:	00000106 	br	124 <bf_lt+0x2c>
     120:	04000044 	movi	r16,1
}
     124:	8005883a 	mov	r2,r16
     128:	dfc00117 	ldw	ra,4(sp)
     12c:	dc000017 	ldw	r16,0(sp)
     130:	dec00204 	addi	sp,sp,8
     134:	f800283a 	ret

00000138 <put_pixel>:

//////////////////////////////////////////////////////////////////////////////
void put_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y, alt_u16 data) {
     138:	defffc04 	addi	sp,sp,-16
     13c:	dc800215 	stw	r18,8(sp)
     140:	dc000015 	stw	r16,0(sp)
     144:	2025883a 	mov	r18,r4
     148:	3021883a 	mov	r16,r6
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
     14c:	297fffcc 	andi	r5,r5,65535
     150:	393fffcc 	andi	r4,r7,65535
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     return bf2f(a) < bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
void put_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y, alt_u16 data) {
     154:	dc400115 	stw	r17,4(sp)
     158:	dfc00315 	stw	ra,12(sp)
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
     15c:	843fffcc 	andi	r16,r16,65535
     160:	0004dbc0 	call	4dbc <__mulsi3>
     164:	1405883a 	add	r2,r2,r16
bfloat16 bf_lt(bfloat16 a, bfloat16 b) {
     return bf2f(a) < bf2f(b);
}

//////////////////////////////////////////////////////////////////////////////
void put_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y, alt_u16 data) {
     168:	dc400417 	ldw	r17,16(sp)
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
     16c:	1085883a 	add	r2,r2,r2
     170:	9085883a 	add	r2,r18,r2
     174:	1440002d 	sthio	r17,0(r2)
}
     178:	dfc00317 	ldw	ra,12(sp)
     17c:	dc800217 	ldw	r18,8(sp)
     180:	dc400117 	ldw	r17,4(sp)
     184:	dc000017 	ldw	r16,0(sp)
     188:	dec00404 	addi	sp,sp,16
     18c:	f800283a 	ret

00000190 <get_pixel>:

//////////////////////////////////////////////////////////////////////////////
alt_u16 get_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y) {
     190:	defffd04 	addi	sp,sp,-12
     194:	dc400115 	stw	r17,4(sp)
     198:	dc000015 	stw	r16,0(sp)
     19c:	2023883a 	mov	r17,r4
     1a0:	3021883a 	mov	r16,r6
	return IORD_16DIRECT(base, (x + (y * res)) << 1);
     1a4:	297fffcc 	andi	r5,r5,65535
     1a8:	393fffcc 	andi	r4,r7,65535
void put_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y, alt_u16 data) {
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
}

//////////////////////////////////////////////////////////////////////////////
alt_u16 get_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y) {
     1ac:	dfc00215 	stw	ra,8(sp)
	return IORD_16DIRECT(base, (x + (y * res)) << 1);
     1b0:	843fffcc 	andi	r16,r16,65535
     1b4:	0004dbc0 	call	4dbc <__mulsi3>
     1b8:	1405883a 	add	r2,r2,r16
     1bc:	1085883a 	add	r2,r2,r2
     1c0:	8885883a 	add	r2,r17,r2
}
     1c4:	1080002b 	ldhuio	r2,0(r2)
     1c8:	dfc00217 	ldw	ra,8(sp)
     1cc:	dc400117 	ldw	r17,4(sp)
     1d0:	dc000017 	ldw	r16,0(sp)
     1d4:	dec00304 	addi	sp,sp,12
     1d8:	f800283a 	ret

000001dc <show_featuremap>:

//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
     1dc:	defffa04 	addi	sp,sp,-24
     1e0:	dd000415 	stw	r20,16(sp)
     1e4:	dc800215 	stw	r18,8(sp)
     1e8:	dc400115 	stw	r17,4(sp)
     1ec:	dfc00515 	stw	ra,20(sp)
     1f0:	dcc00315 	stw	r19,12(sp)
     1f4:	dc000015 	stw	r16,0(sp)
     1f8:	2029883a 	mov	r20,r4
	alt_u32 x, y;
	for (y=0; y<res; y++) {
     1fc:	0023883a 	mov	r17,zero
     200:	2cbfffcc 	andi	r18,r5,65535
     204:	8c80142e 	bgeu	r17,r18,258 <show_featuremap+0x7c>
	IOWR_16DIRECT(base, (x + (y * res)) << 1, data);
}

//////////////////////////////////////////////////////////////////////////////
alt_u16 get_pixel(alt_u16* base, alt_u16 res, alt_u16 x, alt_u16 y) {
	return IORD_16DIRECT(base, (x + (y * res)) << 1);
     208:	900b883a 	mov	r5,r18
     20c:	8809883a 	mov	r4,r17
     210:	0004dbc0 	call	4dbc <__mulsi3>
     214:	1027883a 	mov	r19,r2
     218:	0021883a 	mov	r16,zero
     21c:	84c5883a 	add	r2,r16,r19
     220:	1085883a 	add	r2,r2,r2
     224:	a085883a 	add	r2,r20,r2
     228:	1140002b 	ldhuio	r5,0(r2)
//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
	alt_u32 x, y;
	for (y=0; y<res; y++) {
		for (x=0; x<res; x++) {
			printf_("%x ", get_pixel(base, res, x, y));
     22c:	01000074 	movhi	r4,1
     230:	297fffcc 	andi	r5,r5,65535
     234:	21247204 	addi	r4,r4,-28216

//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
	alt_u32 x, y;
	for (y=0; y<res; y++) {
		for (x=0; x<res; x++) {
     238:	84000044 	addi	r16,r16,1
			printf_("%x ", get_pixel(base, res, x, y));
     23c:	00033500 	call	3350 <printf_>

//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
	alt_u32 x, y;
	for (y=0; y<res; y++) {
		for (x=0; x<res; x++) {
     240:	84bff636 	bltu	r16,r18,21c <__ram_exceptions_end+0xfdffe1fc>
			printf_("%x ", get_pixel(base, res, x, y));
		}
		printf_("\n");
     244:	01000074 	movhi	r4,1
     248:	21247304 	addi	r4,r4,-28212
     24c:	00033500 	call	3350 <printf_>
}

//////////////////////////////////////////////////////////////////////////////
void show_featuremap(alt_u16* base, alt_u16 res) {
	alt_u32 x, y;
	for (y=0; y<res; y++) {
     250:	8c400044 	addi	r17,r17,1
     254:	003feb06 	br	204 <__ram_exceptions_end+0xfdffe1e4>
		for (x=0; x<res; x++) {
			printf_("%x ", get_pixel(base, res, x, y));
		}
		printf_("\n");
	}
}
     258:	dfc00517 	ldw	ra,20(sp)
     25c:	dd000417 	ldw	r20,16(sp)
     260:	dcc00317 	ldw	r19,12(sp)
     264:	dc800217 	ldw	r18,8(sp)
     268:	dc400117 	ldw	r17,4(sp)
     26c:	dc000017 	ldw	r16,0(sp)
     270:	dec00604 	addi	sp,sp,24
     274:	f800283a 	ret

00000278 <relu>:

//////////////////////////////////////////////////////////////////////////////
void relu (alt_u16* featuremap, alt_u16 res) {
     278:	defffe04 	addi	sp,sp,-8
	alt_u32 x, i;

	x = res * res;
     27c:	297fffcc 	andi	r5,r5,65535
		printf_("\n");
	}
}

//////////////////////////////////////////////////////////////////////////////
void relu (alt_u16* featuremap, alt_u16 res) {
     280:	dc000015 	stw	r16,0(sp)
     284:	2021883a 	mov	r16,r4
	alt_u32 x, i;

	x = res * res;
     288:	2809883a 	mov	r4,r5
		printf_("\n");
	}
}

//////////////////////////////////////////////////////////////////////////////
void relu (alt_u16* featuremap, alt_u16 res) {
     28c:	dfc00115 	stw	ra,4(sp)
	alt_u32 x, i;

	x = res * res;
     290:	0004dbc0 	call	4dbc <__mulsi3>
	for (i=0; i<x; i++) {
     294:	0007883a 	mov	r3,zero
     298:	18800826 	beq	r3,r2,2bc <relu+0x44>
		if (IORD_16DIRECT(featuremap, (i << 1)) & 0x8000) { // test sign bit
     29c:	18c9883a 	add	r4,r3,r3
     2a0:	8109883a 	add	r4,r16,r4
     2a4:	2140002b 	ldhuio	r5,0(r4)
     2a8:	2960000c 	andi	r5,r5,32768
     2ac:	28000126 	beq	r5,zero,2b4 <relu+0x3c>
			IOWR_16DIRECT(featuremap, (i << 1), 0x0);
     2b0:	2000002d 	sthio	zero,0(r4)
//////////////////////////////////////////////////////////////////////////////
void relu (alt_u16* featuremap, alt_u16 res) {
	alt_u32 x, i;

	x = res * res;
	for (i=0; i<x; i++) {
     2b4:	18c00044 	addi	r3,r3,1
     2b8:	003ff706 	br	298 <__ram_exceptions_end+0xfdffe278>
		if (IORD_16DIRECT(featuremap, (i << 1)) & 0x8000) { // test sign bit
			IOWR_16DIRECT(featuremap, (i << 1), 0x0);
		}
	}
}
     2bc:	dfc00117 	ldw	ra,4(sp)
     2c0:	dc000017 	ldw	r16,0(sp)
     2c4:	dec00204 	addi	sp,sp,8
     2c8:	f800283a 	ret

000002cc <padding>:

//////////////////////////////////////////////////////////////////////////////
void padding (alt_u16* src_map, alt_u16* dst_map, alt_u16 res, alt_u16 pad) {
     2cc:	defff704 	addi	sp,sp,-36
     2d0:	dc000015 	stw	r16,0(sp)
	alt_u32 src, dst;

	dst = 0;
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
		for (i=0; i<(res + (pad << 1)); i++) {
     2d4:	3c3fffcc 	andi	r16,r7,65535
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void padding (alt_u16* src_map, alt_u16* dst_map, alt_u16 res, alt_u16 pad) {
     2d8:	dc800215 	stw	r18,8(sp)
	alt_u32 src, dst;

	dst = 0;
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
		for (i=0; i<(res + (pad << 1)); i++) {
     2dc:	8421883a 	add	r16,r16,r16
     2e0:	34bfffcc 	andi	r18,r6,65535
     2e4:	84a1883a 	add	r16,r16,r18
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void padding (alt_u16* src_map, alt_u16* dst_map, alt_u16 res, alt_u16 pad) {
     2e8:	dd800615 	stw	r22,24(sp)
     2ec:	dd400515 	stw	r21,20(sp)
     2f0:	dd000415 	stw	r20,16(sp)
     2f4:	dc400115 	stw	r17,4(sp)
     2f8:	202d883a 	mov	r22,r4
     2fc:	282b883a 	mov	r21,r5
     300:	dfc00815 	stw	ra,32(sp)
     304:	ddc00715 	stw	r23,28(sp)
     308:	dcc00315 	stw	r19,12(sp)
     30c:	8429883a 	add	r20,r16,r16
	alt_u32 i, j, pixel;
	alt_u32 src, dst;

	dst = 0;
     310:	000b883a 	mov	r5,zero
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
     314:	0009883a 	mov	r4,zero
     318:	3c7fffcc 	andi	r17,r7,65535
     31c:	24400b2e 	bgeu	r4,r17,34c <padding+0x80>
     320:	0005883a 	mov	r2,zero
		for (i=0; i<(res + (pad << 1)); i++) {
     324:	14000626 	beq	r2,r16,340 <padding+0x74>
			IOWR_16DIRECT(dst_map, (dst), 0);
     328:	1087883a 	add	r3,r2,r2
     32c:	1947883a 	add	r3,r3,r5
     330:	a8c7883a 	add	r3,r21,r3
     334:	1800002d 	sthio	zero,0(r3)
	alt_u32 src, dst;

	dst = 0;
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
		for (i=0; i<(res + (pad << 1)); i++) {
     338:	10800044 	addi	r2,r2,1
     33c:	003ff906 	br	324 <__ram_exceptions_end+0xfdffe304>
     340:	2d0b883a 	add	r5,r5,r20
	alt_u32 i, j, pixel;
	alt_u32 src, dst;

	dst = 0;
	src = 0;
	for (j=0; j<pad; j++) {	// pad TOP pixels
     344:	21000044 	addi	r4,r4,1
     348:	003ff406 	br	31c <__ram_exceptions_end+0xfdffe2fc>
     34c:	8c6f883a 	add	r23,r17,r17
     350:	b80b883a 	mov	r5,r23
     354:	8009883a 	mov	r4,r16
     358:	0004dbc0 	call	4dbc <__mulsi3>
     35c:	1027883a 	mov	r19,r2
     360:	8c85883a 	add	r2,r17,r18
     364:	1085883a 	add	r2,r2,r2
     368:	95cf883a 	add	r7,r18,r23
     36c:	948b883a 	add	r5,r18,r18
     370:	39cf883a 	add	r7,r7,r7
     374:	980d883a 	mov	r6,r19
     378:	0013883a 	mov	r9,zero
     37c:	0011883a 	mov	r8,zero
     380:	113fff84 	addi	r4,r2,-2
		for (i=0; i<(res + (pad << 1)); i++) {
			IOWR_16DIRECT(dst_map, (dst), 0);
			dst += 2;
		}
	}
	for (j=0; j<res; j++) {
     384:	44801f2e 	bgeu	r8,r18,404 <padding+0x138>
     388:	0005883a 	mov	r2,zero
		for (i=0; i<pad; i++) {
     38c:	1440062e 	bgeu	r2,r17,3a8 <padding+0xdc>
			IOWR_16DIRECT(dst_map, (dst), 0); // pad LHS
     390:	1087883a 	add	r3,r2,r2
     394:	1987883a 	add	r3,r3,r6
     398:	a8c7883a 	add	r3,r21,r3
     39c:	1800002d 	sthio	zero,0(r3)
			IOWR_16DIRECT(dst_map, (dst), 0);
			dst += 2;
		}
	}
	for (j=0; j<res; j++) {
		for (i=0; i<pad; i++) {
     3a0:	10800044 	addi	r2,r2,1
     3a4:	003ff906 	br	38c <__ram_exceptions_end+0xfdffe36c>
     3a8:	35d7883a 	add	r11,r6,r23
     3ac:	0007883a 	mov	r3,zero
     3b0:	18c5883a 	add	r2,r3,r3
			IOWR_16DIRECT(dst_map, (dst), 0); // pad LHS
			dst += 2;
		}
		for (i=0; i<res; i++) {
			pixel = IORD_16DIRECT(src_map, src);
     3b4:	4895883a 	add	r10,r9,r2
     3b8:	b295883a 	add	r10,r22,r10
     3bc:	5280002b 	ldhuio	r10,0(r10)
			src += 2;
			IOWR_16DIRECT(dst_map, (dst), pixel);
     3c0:	12c5883a 	add	r2,r2,r11
     3c4:	a885883a 	add	r2,r21,r2
     3c8:	1280002d 	sthio	r10,0(r2)
	for (j=0; j<res; j++) {
		for (i=0; i<pad; i++) {
			IOWR_16DIRECT(dst_map, (dst), 0); // pad LHS
			dst += 2;
		}
		for (i=0; i<res; i++) {
     3cc:	18c00044 	addi	r3,r3,1
     3d0:	1cbff736 	bltu	r3,r18,3b0 <__ram_exceptions_end+0xfdffe390>
     3d4:	2185883a 	add	r2,r4,r6
     3d8:	4953883a 	add	r9,r9,r5
     3dc:	a885883a 	add	r2,r21,r2
     3e0:	0007883a 	mov	r3,zero
     3e4:	10800084 	addi	r2,r2,2
			pixel = IORD_16DIRECT(src_map, src);
			src += 2;
			IOWR_16DIRECT(dst_map, (dst), pixel);
			dst += 2;
		}
		for (i=0; i<pad; i++) {
     3e8:	1c40032e 	bgeu	r3,r17,3f8 <padding+0x12c>
			IOWR_16DIRECT(dst_map, (dst), 0); // pad RHS
     3ec:	1000002d 	sthio	zero,0(r2)
			pixel = IORD_16DIRECT(src_map, src);
			src += 2;
			IOWR_16DIRECT(dst_map, (dst), pixel);
			dst += 2;
		}
		for (i=0; i<pad; i++) {
     3f0:	18c00044 	addi	r3,r3,1
     3f4:	003ffb06 	br	3e4 <__ram_exceptions_end+0xfdffe3c4>
     3f8:	31cd883a 	add	r6,r6,r7
		for (i=0; i<(res + (pad << 1)); i++) {
			IOWR_16DIRECT(dst_map, (dst), 0);
			dst += 2;
		}
	}
	for (j=0; j<res; j++) {
     3fc:	42000044 	addi	r8,r8,1
     400:	003fe006 	br	384 <__ram_exceptions_end+0xfdffe364>
     404:	bc89883a 	add	r4,r23,r18
     408:	0004dbc0 	call	4dbc <__mulsi3>
     40c:	14c5883a 	add	r2,r2,r19
     410:	000b883a 	mov	r5,zero
		for (i=0; i<pad; i++) {
			IOWR_16DIRECT(dst_map, (dst), 0); // pad RHS
			dst += 2;
		}
	}
	for (j=0; j<pad; j++) {	// pad BOTTOM pixels
     414:	2c400b2e 	bgeu	r5,r17,444 <padding+0x178>
     418:	0007883a 	mov	r3,zero
		for (i=0; i<(res + (pad << 1)); i++) {
     41c:	1c000626 	beq	r3,r16,438 <padding+0x16c>
			IOWR_16DIRECT(dst_map, (dst), 0);
     420:	18c9883a 	add	r4,r3,r3
     424:	2089883a 	add	r4,r4,r2
     428:	a909883a 	add	r4,r21,r4
     42c:	2000002d 	sthio	zero,0(r4)
			IOWR_16DIRECT(dst_map, (dst), 0); // pad RHS
			dst += 2;
		}
	}
	for (j=0; j<pad; j++) {	// pad BOTTOM pixels
		for (i=0; i<(res + (pad << 1)); i++) {
     430:	18c00044 	addi	r3,r3,1
     434:	003ff906 	br	41c <__ram_exceptions_end+0xfdffe3fc>
     438:	1505883a 	add	r2,r2,r20
		for (i=0; i<pad; i++) {
			IOWR_16DIRECT(dst_map, (dst), 0); // pad RHS
			dst += 2;
		}
	}
	for (j=0; j<pad; j++) {	// pad BOTTOM pixels
     43c:	29400044 	addi	r5,r5,1
     440:	003ff406 	br	414 <__ram_exceptions_end+0xfdffe3f4>
		for (i=0; i<(res + (pad << 1)); i++) {
			IOWR_16DIRECT(dst_map, (dst), 0);
			dst += 2;
		}
	}
}
     444:	dfc00817 	ldw	ra,32(sp)
     448:	ddc00717 	ldw	r23,28(sp)
     44c:	dd800617 	ldw	r22,24(sp)
     450:	dd400517 	ldw	r21,20(sp)
     454:	dd000417 	ldw	r20,16(sp)
     458:	dcc00317 	ldw	r19,12(sp)
     45c:	dc800217 	ldw	r18,8(sp)
     460:	dc400117 	ldw	r17,4(sp)
     464:	dc000017 	ldw	r16,0(sp)
     468:	dec00904 	addi	sp,sp,36
     46c:	f800283a 	ret

00000470 <convolution>:

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     470:	deffe604 	addi	sp,sp,-104
     474:	dd001415 	stw	r20,80(sp)
	alt_16 x, y, ks;
	alt_u32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
     478:	dd001a0b 	ldhu	r20,104(sp)
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     47c:	dc001015 	stw	r16,64(sp)
     480:	dcc01315 	stw	r19,76(sp)
	alt_16 x, y, ks;
	alt_u32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
     484:	a020d07a 	srli	r16,r20,1
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     488:	d9000515 	stw	r4,20(sp)
     48c:	d9c00615 	stw	r7,24(sp)
     490:	843fffcc 	andi	r16,r16,65535
	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
     494:	0427c83a 	sub	r19,zero,r16
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     498:	280f883a 	mov	r7,r5
     49c:	a009883a 	mov	r4,r20
     4a0:	980b883a 	mov	r5,r19
     4a4:	df001815 	stw	fp,96(sp)
     4a8:	ddc01715 	stw	r23,92(sp)
     4ac:	dd801615 	stw	r22,88(sp)
     4b0:	dd401515 	stw	r21,84(sp)
     4b4:	dc801215 	stw	r18,72(sp)
     4b8:	dc401115 	stw	r17,68(sp)
     4bc:	d9c00815 	stw	r7,32(sp)
     4c0:	dfc01915 	stw	ra,100(sp)
     4c4:	d9800115 	stw	r6,4(sp)
     4c8:	dc000015 	stw	r16,0(sp)
     4cc:	0004dbc0 	call	4dbc <__mulsi3>
     4d0:	dc401c17 	ldw	r17,112(sp)
     4d4:	df001b0b 	ldhu	fp,108(sp)
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
					sum = bf_add(sum, bf_mult(src_pix, k_pix)); // sum of products
				}
			}
			if (clr == 0)
     4d8:	d9c00817 	ldw	r7,32(sp)
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void convolution(alt_u16* src, alt_u16 clr, alt_u16* dst, alt_u16* knl, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     4dc:	dd801d0b 	ldhu	r22,116(sp)
	alt_u32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     4e0:	882f883a 	mov	r23,r17
     4e4:	882b883a 	mov	r21,r17
     4e8:	e73fffcc 	andi	fp,fp,65535
     4ec:	8c7fffcc 	andi	r17,r17,65535
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
					sum = bf_add(sum, bf_mult(src_pix, k_pix)); // sum of products
				}
			}
			if (clr == 0)
     4f0:	39ffffcc 	andi	r7,r7,65535
     4f4:	d8800415 	stw	r2,16(sp)
	alt_16 x, y, ks;
	alt_u32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
     4f8:	000b883a 	mov	r5,zero
	for (y=pad; y<(res + pad); y=y+stride) {
     4fc:	e463883a 	add	r17,fp,r17
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
     500:	8025883a 	mov	r18,r16
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
					sum = bf_add(sum, bf_mult(src_pix, k_pix)); // sum of products
				}
			}
			if (clr == 0)
     504:	d9c00715 	stw	r7,28(sp)
	alt_u32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     508:	a93fffcc 	andi	r4,r21,65535
     50c:	2120001c 	xori	r4,r4,32768
     510:	21200004 	addi	r4,r4,-32768
     514:	24404f0e 	bge	r4,r17,654 <convolution+0x1e4>
     518:	d8c00117 	ldw	r3,4(sp)
     51c:	1961883a 	add	r16,r3,r5
     520:	d8c00017 	ldw	r3,0(sp)
     524:	e00b883a 	mov	r5,fp
     528:	20c9c83a 	sub	r4,r4,r3
     52c:	0004dbc0 	call	4dbc <__mulsi3>
     530:	101d883a 	mov	r14,r2
     534:	b815883a 	mov	r10,r23
     538:	d8c00117 	ldw	r3,4(sp)
		for (x=pad; x<(res + pad); x=x+stride) {
     53c:	50bfffcc 	andi	r2,r10,65535
     540:	10a0001c 	xori	r2,r2,32768
     544:	10a00004 	addi	r2,r2,-32768
     548:	80cbc83a 	sub	r5,r16,r3
     54c:	14403f0e 	bge	r2,r17,64c <convolution+0x1dc>
     550:	1385883a 	add	r2,r2,r14
     554:	d8800215 	stw	r2,8(sp)
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
     558:	9817883a 	mov	r11,r19
     55c:	001b883a 	mov	r13,zero
     560:	0019883a 	mov	r12,zero

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
     564:	0011883a 	mov	r8,zero
			for (ky=-ks; ky<ks; ky++) {
     568:	5c80302e 	bgeu	r11,r18,62c <convolution+0x1bc>
     56c:	d8c00217 	ldw	r3,8(sp)
				offset_s = (res * (y + ky)) + x;
				offset_d = (k * ky);
				for (kx=-ks; kx<ks; kx++) {
     570:	9813883a 	mov	r9,r19
     574:	60c7883a 	add	r3,r12,r3
     578:	d8c00315 	stw	r3,12(sp)
     57c:	d8c00417 	ldw	r3,16(sp)
     580:	68df883a 	add	r15,r13,r3
     584:	4c80252e 	bgeu	r9,r18,61c <convolution+0x1ac>
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
     588:	d8c00317 	ldw	r3,12(sp)
     58c:	48c5883a 	add	r2,r9,r3
     590:	d8c00517 	ldw	r3,20(sp)
     594:	1085883a 	add	r2,r2,r2
     598:	1885883a 	add	r2,r3,r2
     59c:	1100002b 	ldhuio	r4,0(r2)
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
     5a0:	d8c00617 	ldw	r3,24(sp)
     5a4:	4bc5883a 	add	r2,r9,r15
     5a8:	1085883a 	add	r2,r2,r2
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
				offset_s = (res * (y + ky)) + x;
				offset_d = (k * ky);
				for (kx=-ks; kx<ks; kx++) {
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
     5ac:	213fffcc 	andi	r4,r4,65535
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
     5b0:	1885883a 	add	r2,r3,r2
     5b4:	1140002b 	ldhuio	r5,0(r2)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     5b8:	280a943a 	slli	r5,r5,16
     5bc:	2008943a 	slli	r4,r4,16
     5c0:	da400a15 	stw	r9,40(sp)
     5c4:	da800915 	stw	r10,36(sp)
     5c8:	dac00b15 	stw	r11,44(sp)
     5cc:	db000c15 	stw	r12,48(sp)
     5d0:	db400d15 	stw	r13,52(sp)
     5d4:	db800e15 	stw	r14,56(sp)
     5d8:	dbc00f15 	stw	r15,60(sp)
     5dc:	da000815 	stw	r8,32(sp)
     5e0:	00058e80 	call	58e8 <__mulsf3>
     5e4:	da000817 	ldw	r8,32(sp)
     5e8:	113fffec 	andhi	r4,r2,65535
     5ec:	400a943a 	slli	r5,r8,16
     5f0:	0004de40 	call	4de4 <__addsf3>
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
				offset_s = (res * (y + ky)) + x;
				offset_d = (k * ky);
				for (kx=-ks; kx<ks; kx++) {
     5f4:	da400a17 	ldw	r9,40(sp)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     5f8:	1010d43a 	srli	r8,r2,16
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
				offset_s = (res * (y + ky)) + x;
				offset_d = (k * ky);
				for (kx=-ks; kx<ks; kx++) {
     5fc:	dbc00f17 	ldw	r15,60(sp)
     600:	4a400044 	addi	r9,r9,1
     604:	db800e17 	ldw	r14,56(sp)
     608:	db400d17 	ldw	r13,52(sp)
     60c:	db000c17 	ldw	r12,48(sp)
     610:	dac00b17 	ldw	r11,44(sp)
     614:	da800917 	ldw	r10,36(sp)
     618:	003fda06 	br	584 <__ram_exceptions_end+0xfdffe564>
	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
		for (x=pad; x<(res + pad); x=x+stride) {
			sum = f2bf(0.0); // 0x0
			for (ky=-ks; ky<ks; ky++) {
     61c:	5ac00044 	addi	r11,r11,1
     620:	6719883a 	add	r12,r12,fp
     624:	6d1b883a 	add	r13,r13,r20
     628:	003fcf06 	br	568 <__ram_exceptions_end+0xfdffe548>
					src_pix = IORD_16DIRECT(src, (kx + offset_s) << 1);
					k_pix = IORD_16DIRECT(knl, (kx + offset_d) << 1);
					sum = bf_add(sum, bf_mult(src_pix, k_pix)); // sum of products
				}
			}
			if (clr == 0)
     62c:	d8c00717 	ldw	r3,28(sp)
     630:	1800021e 	bne	r3,zero,63c <convolution+0x1cc>
				sum += IORD_16DIRECT(dst, dst_ptr);
     634:	8080002b 	ldhuio	r2,0(r16)
     638:	1211883a 	add	r8,r2,r8
			IOWR_16DIRECT(dst, dst_ptr, sum);
     63c:	8200002d 	sthio	r8,0(r16)
     640:	5595883a 	add	r10,r10,r22
     644:	84000084 	addi	r16,r16,2
     648:	003fbb06 	br	538 <__ram_exceptions_end+0xfdffe518>
	alt_u32 kx, ky, dst_ptr, offset_s, offset_d;
	bfloat16 sum, src_pix, k_pix;

	ks = (k >> 1); // k is odd 3,5,7 ... ks generally equal to pad
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     64c:	adab883a 	add	r21,r21,r22
     650:	003fad06 	br	508 <__ram_exceptions_end+0xfdffe4e8>
				sum += IORD_16DIRECT(dst, dst_ptr);
			IOWR_16DIRECT(dst, dst_ptr, sum);
			dst_ptr += 2;
		}
	}
}
     654:	dfc01917 	ldw	ra,100(sp)
     658:	df001817 	ldw	fp,96(sp)
     65c:	ddc01717 	ldw	r23,92(sp)
     660:	dd801617 	ldw	r22,88(sp)
     664:	dd401517 	ldw	r21,84(sp)
     668:	dd001417 	ldw	r20,80(sp)
     66c:	dcc01317 	ldw	r19,76(sp)
     670:	dc801217 	ldw	r18,72(sp)
     674:	dc401117 	ldw	r17,68(sp)
     678:	dc001017 	ldw	r16,64(sp)
     67c:	dec01a04 	addi	sp,sp,104
     680:	f800283a 	ret

00000684 <maxpool>:

//////////////////////////////////////////////////////////////////////////////
void maxpool(alt_u16* src, alt_u16* dst, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     684:	deffee04 	addi	sp,sp,-72
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     688:	d8801217 	ldw	r2,72(sp)
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void maxpool(alt_u16* src, alt_u16* dst, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     68c:	d8c0130b 	ldhu	r3,76(sp)
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     690:	39ffffcc 	andi	r7,r7,65535
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void maxpool(alt_u16* src, alt_u16* dst, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     694:	dc000815 	stw	r16,32(sp)
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     698:	143fffcc 	andi	r16,r2,65535
     69c:	3c21883a 	add	r16,r7,r16
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
void maxpool(alt_u16* src, alt_u16* dst, alt_u16 k, alt_u16 res, alt_u16 pad, alt_u16 stride) {
     6a0:	df001015 	stw	fp,64(sp)
     6a4:	dd400d15 	stw	r21,52(sp)
     6a8:	dcc00b15 	stw	r19,44(sp)
     6ac:	dc800a15 	stw	r18,40(sp)
     6b0:	dfc01115 	stw	ra,68(sp)
     6b4:	ddc00f15 	stw	r23,60(sp)
     6b8:	dd800e15 	stw	r22,56(sp)
     6bc:	dd000c15 	stw	r20,48(sp)
     6c0:	dc400915 	stw	r17,36(sp)
     6c4:	d9000415 	stw	r4,16(sp)
     6c8:	d9400515 	stw	r5,20(sp)
     6cc:	d8c0010d 	sth	r3,4(sp)
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     6d0:	1039883a 	mov	fp,r2
     6d4:	1027883a 	mov	r19,r2
	alt_16 x, y, kx, ky;
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
     6d8:	0025883a 	mov	r18,zero
	for (y=pad; y<(res + pad); y=y+stride) {
     6dc:	d9c00215 	stw	r7,8(sp)
     6e0:	dc000315 	stw	r16,12(sp)
		for (x=pad; x<(res + pad); x=x+stride) {
			max = f2bf(-10000.0); // negative enough?
			for (ky=0; ky<k; ky++) {
     6e4:	357fffcc 	andi	r21,r6,65535
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     6e8:	98ffffcc 	andi	r3,r19,65535
     6ec:	18e0001c 	xori	r3,r3,32768
     6f0:	d8800317 	ldw	r2,12(sp)
     6f4:	18e00004 	addi	r3,r3,-32768
     6f8:	d8c00015 	stw	r3,0(sp)
     6fc:	1880360e 	bge	r3,r2,7d8 <maxpool+0x154>
     700:	e02f883a 	mov	r23,fp
		for (x=pad; x<(res + pad); x=x+stride) {
     704:	bdbfffcc 	andi	r22,r23,65535
     708:	d8c00317 	ldw	r3,12(sp)
     70c:	b5a0001c 	xori	r22,r22,32768
     710:	b5a00004 	addi	r22,r22,-32768
     714:	b0c02d0e 	bge	r22,r3,7cc <maxpool+0x148>
     718:	05318704 	movi	r20,-14820
     71c:	0021883a 	mov	r16,zero
			max = f2bf(-10000.0); // negative enough?
			for (ky=0; ky<k; ky++) {
     720:	817fffcc 	andi	r5,r16,65535
     724:	2960001c 	xori	r5,r5,32768
     728:	29600004 	addi	r5,r5,-32768
     72c:	2d40200e 	bge	r5,r21,7b0 <maxpool+0x12c>
     730:	d8c00017 	ldw	r3,0(sp)
     734:	d9000217 	ldw	r4,8(sp)
     738:	194b883a 	add	r5,r3,r5
     73c:	0004dbc0 	call	4dbc <__mulsi3>
     740:	1017883a 	mov	r11,r2
				for (kx=0; kx<k; kx++) {
					src_pix = bf2f(IORD_16DIRECT(src, ((x + kx) + (res * (y + ky))) << 1));
     744:	0015883a 	mov	r10,zero
	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
		for (x=pad; x<(res + pad); x=x+stride) {
			max = f2bf(-10000.0); // negative enough?
			for (ky=0; ky<k; ky++) {
				for (kx=0; kx<k; kx++) {
     748:	50bfffcc 	andi	r2,r10,65535
     74c:	10a0001c 	xori	r2,r2,32768
     750:	10a00004 	addi	r2,r2,-32768
     754:	1540140e 	bge	r2,r21,7a8 <maxpool+0x124>
					src_pix = bf2f(IORD_16DIRECT(src, ((x + kx) + (res * (y + ky))) << 1));
     758:	b085883a 	add	r2,r22,r2
     75c:	d8c00417 	ldw	r3,16(sp)
     760:	12c5883a 	add	r2,r2,r11
     764:	1085883a 	add	r2,r2,r2
     768:	1885883a 	add	r2,r3,r2
     76c:	1440002b 	ldhuio	r17,0(r2)
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     770:	8822943a 	slli	r17,r17,16
		for (x=pad; x<(res + pad); x=x+stride) {
			max = f2bf(-10000.0); // negative enough?
			for (ky=0; ky<k; ky++) {
				for (kx=0; kx<k; kx++) {
					src_pix = bf2f(IORD_16DIRECT(src, ((x + kx) + (res * (y + ky))) << 1));
					if (src_pix > max)
     774:	a13fffcc 	andi	r4,r20,65535
     778:	da800615 	stw	r10,24(sp)
     77c:	dac00715 	stw	r11,28(sp)
     780:	000626c0 	call	626c <__floatsisf>
     784:	880b883a 	mov	r5,r17
     788:	1009883a 	mov	r4,r2
     78c:	00058200 	call	5820 <__lesf2>
     790:	da800617 	ldw	r10,24(sp)
     794:	dac00717 	ldw	r11,28(sp)
     798:	1000010e 	bge	r2,zero,7a0 <maxpool+0x11c>

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     79c:	8828d43a 	srli	r20,r17,16
     7a0:	52800044 	addi	r10,r10,1
     7a4:	003fe806 	br	748 <__ram_exceptions_end+0xfdffe728>
     7a8:	84000044 	addi	r16,r16,1
     7ac:	003fdc06 	br	720 <__ram_exceptions_end+0xfdffe700>
					src_pix = bf2f(IORD_16DIRECT(src, ((x + kx) + (res * (y + ky))) << 1));
					if (src_pix > max)
						max = f2bf(src_pix);
				}
			}
			IOWR_16DIRECT(dst, dst_ptr, max);
     7b0:	d8c00517 	ldw	r3,20(sp)
     7b4:	1c85883a 	add	r2,r3,r18
     7b8:	1500002d 	sthio	r20,0(r2)
     7bc:	d8c0010b 	ldhu	r3,4(sp)
			dst_ptr += 2;
     7c0:	94800084 	addi	r18,r18,2
     7c4:	b8ef883a 	add	r23,r23,r3
     7c8:	003fce06 	br	704 <__ram_exceptions_end+0xfdffe6e4>
	alt_u32 dst_ptr;
	float src_pix;
	bfloat16 max;

	dst_ptr = 0;
	for (y=pad; y<(res + pad); y=y+stride) {
     7cc:	d8c0010b 	ldhu	r3,4(sp)
     7d0:	98e7883a 	add	r19,r19,r3
     7d4:	003fc406 	br	6e8 <__ram_exceptions_end+0xfdffe6c8>
			}
			IOWR_16DIRECT(dst, dst_ptr, max);
			dst_ptr += 2;
		}
	}
}
     7d8:	dfc01117 	ldw	ra,68(sp)
     7dc:	df001017 	ldw	fp,64(sp)
     7e0:	ddc00f17 	ldw	r23,60(sp)
     7e4:	dd800e17 	ldw	r22,56(sp)
     7e8:	dd400d17 	ldw	r21,52(sp)
     7ec:	dd000c17 	ldw	r20,48(sp)
     7f0:	dcc00b17 	ldw	r19,44(sp)
     7f4:	dc800a17 	ldw	r18,40(sp)
     7f8:	dc400917 	ldw	r17,36(sp)
     7fc:	dc000817 	ldw	r16,32(sp)
     800:	dec01204 	addi	sp,sp,72
     804:	f800283a 	ret

00000808 <global_average_pooling>:

//////////////////////////////////////////////////////////////////////////////
bfloat16 global_average_pooling(alt_u16* src, alt_u16 res) {
     808:	defffc04 	addi	sp,sp,-16
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     80c:	297fffcc 	andi	r5,r5,65535
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 global_average_pooling(alt_u16* src, alt_u16 res) {
     810:	dc800215 	stw	r18,8(sp)
     814:	2025883a 	mov	r18,r4
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     818:	2809883a 	mov	r4,r5
		}
	}
}

//////////////////////////////////////////////////////////////////////////////
bfloat16 global_average_pooling(alt_u16* src, alt_u16 res) {
     81c:	dc400115 	stw	r17,4(sp)
     820:	dc000015 	stw	r16,0(sp)
     824:	dfc00315 	stw	ra,12(sp)
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     828:	0004dbc0 	call	4dbc <__mulsi3>
     82c:	1021883a 	mov	r16,r2
     830:	0023883a 	mov	r17,zero
//////////////////////////////////////////////////////////////////////////////
bfloat16 global_average_pooling(alt_u16* src, alt_u16 res) {
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
     834:	0005883a 	mov	r2,zero
     838:	117fffcc 	andi	r5,r2,65535
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     83c:	8c000926 	beq	r17,r16,864 <global_average_pooling+0x5c>
		sum = bf_add(sum, IORD_16DIRECT(src, src_ptr));
     840:	8c45883a 	add	r2,r17,r17
     844:	9085883a 	add	r2,r18,r2
     848:	1100002b 	ldhuio	r4,0(r2)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     84c:	280a943a 	slli	r5,r5,16
     850:	2008943a 	slli	r4,r4,16
	alt_u32 x, src_ptr;
	bfloat16 sum;

	sum = f2bf(0.0);
	src_ptr = 0;
	for (x=0; x<(res*res); x++) {
     854:	8c400044 	addi	r17,r17,1

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     858:	0004de40 	call	4de4 <__addsf3>
     85c:	1004d43a 	srli	r2,r2,16
     860:	003ff506 	br	838 <__ram_exceptions_end+0xfdffe818>
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     864:	2820943a 	slli	r16,r5,16

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     868:	8809883a 	mov	r4,r17
     86c:	000626c0 	call	626c <__floatsisf>
     870:	100b883a 	mov	r5,r2
     874:	8009883a 	mov	r4,r16
     878:	00052ac0 	call	52ac <__divsf3>
	for (x=0; x<(res*res); x++) {
		sum = bf_add(sum, IORD_16DIRECT(src, src_ptr));
		src_ptr += 2;
	}
	return f2bf(bf2f(sum) / (float)(res * res));
}
     87c:	1004d43a 	srli	r2,r2,16
     880:	dfc00317 	ldw	ra,12(sp)
     884:	dc800217 	ldw	r18,8(sp)
     888:	dc400117 	ldw	r17,4(sp)
     88c:	dc000017 	ldw	r16,0(sp)
     890:	dec00404 	addi	sp,sp,16
     894:	f800283a 	ret

00000898 <softmax>:

//////////////////////////////////////////////////////////////////////////////
void softmax(alt_u16* src, alt_u16 input_len) {
     898:	defff804 	addi	sp,sp,-32
     89c:	dd800615 	stw	r22,24(sp)
     8a0:	dd400515 	stw	r21,20(sp)
     8a4:	dd000415 	stw	r20,16(sp)
     8a8:	dc800215 	stw	r18,8(sp)
     8ac:	dc400115 	stw	r17,4(sp)
     8b0:	dc000015 	stw	r16,0(sp)
     8b4:	dfc00715 	stw	ra,28(sp)
     8b8:	dcc00315 	stw	r19,12(sp)
     8bc:	2021883a 	mov	r16,r4
     8c0:	2023883a 	mov	r17,r4
	alt_u16 i;
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
     8c4:	202d883a 	mov	r22,r4
void softmax(alt_u16* src, alt_u16 input_len) {
	alt_u16 i;
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
     8c8:	04bfe034 	movhi	r18,65408
	for (i = 0; i < input_len; i++)
     8cc:	002b883a 	mov	r21,zero
     8d0:	2d3fffcc 	andi	r20,r5,65535
     8d4:	a8bfffcc 	andi	r2,r21,65535
     8d8:	15000a26 	beq	r2,r20,904 <softmax+0x6c>
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     8dc:	b4c0000b 	ldhu	r19,0(r22)
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
		if (bf2f(src[i]) > m)
     8e0:	9009883a 	mov	r4,r18
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     8e4:	9826943a 	slli	r19,r19,16
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
		if (bf2f(src[i]) > m)
     8e8:	980b883a 	mov	r5,r19
     8ec:	00058200 	call	5820 <__lesf2>
     8f0:	1000010e 	bge	r2,zero,8f8 <softmax+0x60>
			m = bf2f(src[i]);
     8f4:	9825883a 	mov	r18,r19
	alt_u16 i;
	float m, sum, offset;

	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
     8f8:	ad400044 	addi	r21,r21,1
     8fc:	b5800084 	addi	r22,r22,2
     900:	003ff406 	br	8d4 <__ram_exceptions_end+0xfdffe8b4>
     904:	0027883a 	mov	r19,zero
     908:	002b883a 	mov	r21,zero
		if (bf2f(src[i]) > m)
			m = bf2f(src[i]);
	for (i = 0; i < input_len; i++)
     90c:	a8bfffcc 	andi	r2,r21,65535
     910:	15000d26 	beq	r2,r20,948 <softmax+0xb0>
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
     914:	8100000b 	ldhu	r4,0(r16)
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
		if (bf2f(src[i]) > m)
			m = bf2f(src[i]);
	for (i = 0; i < input_len; i++)
		sum += expf(bf2f(src[i]) - m);
     918:	900b883a 	mov	r5,r18
	sum = 0.0;
	m = -INFINITY;
	for (i = 0; i < input_len; i++)
		if (bf2f(src[i]) > m)
			m = bf2f(src[i]);
	for (i = 0; i < input_len; i++)
     91c:	ad400044 	addi	r21,r21,1
		sum += expf(bf2f(src[i]) - m);
     920:	2008943a 	slli	r4,r4,16
     924:	84000084 	addi	r16,r16,2
     928:	0005d180 	call	5d18 <__subsf3>
     92c:	1009883a 	mov	r4,r2
     930:	00034a40 	call	34a4 <expf>
     934:	9809883a 	mov	r4,r19
     938:	100b883a 	mov	r5,r2
     93c:	0004de40 	call	4de4 <__addsf3>
     940:	1027883a 	mov	r19,r2
     944:	003ff106 	br	90c <__ram_exceptions_end+0xfdffe8ec>
	offset = m + logf(sum);
     948:	9809883a 	mov	r4,r19
     94c:	00036100 	call	3610 <logf>
     950:	9009883a 	mov	r4,r18
     954:	100b883a 	mov	r5,r2
     958:	0004de40 	call	4de4 <__addsf3>
     95c:	1025883a 	mov	r18,r2
	for (alt_u16 i = 0; i < input_len; i++)
     960:	0021883a 	mov	r16,zero
     964:	80bfffcc 	andi	r2,r16,65535
     968:	15000c26 	beq	r2,r20,99c <softmax+0x104>
		src[i] = f2bf(expf(src[i] - offset));
     96c:	8900000b 	ldhu	r4,0(r17)
		if (bf2f(src[i]) > m)
			m = bf2f(src[i]);
	for (i = 0; i < input_len; i++)
		sum += expf(bf2f(src[i]) - m);
	offset = m + logf(sum);
	for (alt_u16 i = 0; i < input_len; i++)
     970:	84000044 	addi	r16,r16,1
     974:	8c400084 	addi	r17,r17,2
		src[i] = f2bf(expf(src[i] - offset));
     978:	000626c0 	call	626c <__floatsisf>
     97c:	900b883a 	mov	r5,r18
     980:	1009883a 	mov	r4,r2
     984:	0005d180 	call	5d18 <__subsf3>
     988:	1009883a 	mov	r4,r2
     98c:	00034a40 	call	34a4 <expf>
     990:	1004d43a 	srli	r2,r2,16
     994:	88bfff8d 	sth	r2,-2(r17)
     998:	003ff206 	br	964 <__ram_exceptions_end+0xfdffe944>
}
     99c:	dfc00717 	ldw	ra,28(sp)
     9a0:	dd800617 	ldw	r22,24(sp)
     9a4:	dd400517 	ldw	r21,20(sp)
     9a8:	dd000417 	ldw	r20,16(sp)
     9ac:	dcc00317 	ldw	r19,12(sp)
     9b0:	dc800217 	ldw	r18,8(sp)
     9b4:	dc400117 	ldw	r17,4(sp)
     9b8:	dc000017 	ldw	r16,0(sp)
     9bc:	dec00804 	addi	sp,sp,32
     9c0:	f800283a 	ret

000009c4 <scale>:

//////////////////////////////////////////////////////////////////////////////
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     9c4:	defff104 	addi	sp,sp,-60
     9c8:	dc400615 	stw	r17,24(sp)
     9cc:	dc400f17 	ldw	r17,60(sp)
     9d0:	ddc00c15 	stw	r23,48(sp)
     9d4:	202f883a 	mov	r23,r4
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
     9d8:	893fffcc 	andi	r4,r17,65535
	for (alt_u16 i = 0; i < input_len; i++)
		src[i] = f2bf(expf(src[i] - offset));
}

//////////////////////////////////////////////////////////////////////////////
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     9dc:	dfc00e15 	stw	ra,56(sp)
     9e0:	df000d15 	stw	fp,52(sp)
     9e4:	dd800b15 	stw	r22,44(sp)
     9e8:	2839883a 	mov	fp,r5
     9ec:	382d883a 	mov	r22,r7
     9f0:	dd400a15 	stw	r21,40(sp)
     9f4:	dd000915 	stw	r20,36(sp)
     9f8:	302b883a 	mov	r21,r6
     9fc:	dcc00815 	stw	r19,32(sp)
     a00:	dc800715 	stw	r18,28(sp)
     a04:	dc000515 	stw	r16,20(sp)
     a08:	3025883a 	mov	r18,r6
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
     a0c:	00063900 	call	6390 <__floatunsisf>
     a10:	a93fffcc 	andi	r4,r21,65535
     a14:	d8800415 	stw	r2,16(sp)
     a18:	00063900 	call	6390 <__floatunsisf>
     a1c:	d8c00417 	ldw	r3,16(sp)
	for (alt_u16 i = 0; i < input_len; i++)
		src[i] = f2bf(expf(src[i] - offset));
}

//////////////////////////////////////////////////////////////////////////////
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     a20:	dc001017 	ldw	r16,64(sp)
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
     a24:	100b883a 	mov	r5,r2
     a28:	1809883a 	mov	r4,r3
     a2c:	00052ac0 	call	52ac <__divsf3>
        scale_height = (float)new_height / (float)height;
     a30:	813fffcc 	andi	r4,r16,65535
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
     a34:	d8800015 	stw	r2,0(sp)
        scale_height = (float)new_height / (float)height;
     a38:	00063900 	call	6390 <__floatunsisf>
     a3c:	b13fffcc 	andi	r4,r22,65535
	for (alt_u16 i = 0; i < input_len; i++)
		src[i] = f2bf(expf(src[i] - offset));
}

//////////////////////////////////////////////////////////////////////////////
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     a40:	8027883a 	mov	r19,r16
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;
     a44:	1021883a 	mov	r16,r2
     a48:	00063900 	call	6390 <__floatunsisf>
     a4c:	100b883a 	mov	r5,r2
     a50:	8009883a 	mov	r4,r16
	for (alt_u16 i = 0; i < input_len; i++)
		src[i] = f2bf(expf(src[i] - offset));
}

//////////////////////////////////////////////////////////////////////////////
void scale(alt_u16* src, alt_u16* dst, alt_u16 width, alt_u16 height, alt_u16 new_width, alt_u16 new_height) {
     a54:	8829883a 	mov	r20,r17
		alt_u16 cx, cy, pixel, src_ptr;
		alt_32 nearest;
		float scale_width, scale_height;

        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;
     a58:	00052ac0 	call	52ac <__divsf3>
     a5c:	8c63883a 	add	r17,r17,r17
     a60:	dc40010d 	sth	r17,4(sp)
     a64:	102d883a 	mov	r22,r2

        src_ptr = 0;
     a68:	002b883a 	mov	r21,zero
        for(cy = 0; cy < new_height; cy++) {
     a6c:	0023883a 	mov	r17,zero
     a70:	9cffffcc 	andi	r19,r19,65535
     a74:	94bfffcc 	andi	r18,r18,65535
            for(cx = 0; cx < new_width; cx++) {
     a78:	a53fffcc 	andi	r20,r20,65535

        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;

        src_ptr = 0;
        for(cy = 0; cy < new_height; cy++) {
     a7c:	897fffcc 	andi	r5,r17,65535
     a80:	2cc02b2e 	bgeu	r5,r19,b30 <scale+0x16c>
     a84:	9009883a 	mov	r4,r18
     a88:	0004dbc0 	call	4dbc <__mulsi3>
     a8c:	1013883a 	mov	r9,r2
            for(cx = 0; cx < new_width; cx++) {
                nearest =  (int)(((float)(cy * width) / scale_height) + ((float)cx / scale_width));
     a90:	0007883a 	mov	r3,zero
     a94:	18e1883a 	add	r16,r3,r3
        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;

        src_ptr = 0;
        for(cy = 0; cy < new_height; cy++) {
            for(cx = 0; cx < new_width; cx++) {
     a98:	1a3fffcc 	andi	r8,r3,65535
     a9c:	8561883a 	add	r16,r16,r21
     aa0:	45001f26 	beq	r8,r20,b20 <scale+0x15c>
                nearest =  (int)(((float)(cy * width) / scale_height) + ((float)cx / scale_width));
                pixel = IORD_16DIRECT(src, nearest << 1);
     aa4:	4809883a 	mov	r4,r9
     aa8:	d8c00415 	stw	r3,16(sp)
     aac:	da400315 	stw	r9,12(sp)
     ab0:	da000215 	stw	r8,8(sp)
     ab4:	000626c0 	call	626c <__floatsisf>
     ab8:	b00b883a 	mov	r5,r22
     abc:	1009883a 	mov	r4,r2
     ac0:	00052ac0 	call	52ac <__divsf3>
     ac4:	da000217 	ldw	r8,8(sp)
     ac8:	d8800215 	stw	r2,8(sp)
     acc:	4009883a 	mov	r4,r8
     ad0:	00063900 	call	6390 <__floatunsisf>
     ad4:	d9400017 	ldw	r5,0(sp)
     ad8:	1009883a 	mov	r4,r2
     adc:	00052ac0 	call	52ac <__divsf3>
     ae0:	da800217 	ldw	r10,8(sp)
     ae4:	100b883a 	mov	r5,r2
     ae8:	5009883a 	mov	r4,r10
     aec:	0004de40 	call	4de4 <__addsf3>
     af0:	1009883a 	mov	r4,r2
     af4:	00061fc0 	call	61fc <__fixsfsi>
     af8:	1085883a 	add	r2,r2,r2
     afc:	b885883a 	add	r2,r23,r2
     b00:	1080002b 	ldhuio	r2,0(r2)
                IOWR_16DIRECT(dst, src_ptr, pixel);
     b04:	843fffcc 	andi	r16,r16,65535
     b08:	e421883a 	add	r16,fp,r16
     b0c:	8080002d 	sthio	r2,0(r16)
        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;

        src_ptr = 0;
        for(cy = 0; cy < new_height; cy++) {
            for(cx = 0; cx < new_width; cx++) {
     b10:	d8c00417 	ldw	r3,16(sp)
     b14:	da400317 	ldw	r9,12(sp)
     b18:	18c00044 	addi	r3,r3,1
     b1c:	003fdd06 	br	a94 <__ram_exceptions_end+0xfdffea74>
     b20:	d880010b 	ldhu	r2,4(sp)

        scale_width =  (float)new_width / (float)width;
        scale_height = (float)new_height / (float)height;

        src_ptr = 0;
        for(cy = 0; cy < new_height; cy++) {
     b24:	8c400044 	addi	r17,r17,1
     b28:	a8ab883a 	add	r21,r21,r2
     b2c:	003fd306 	br	a7c <__ram_exceptions_end+0xfdffea5c>
                pixel = IORD_16DIRECT(src, nearest << 1);
                IOWR_16DIRECT(dst, src_ptr, pixel);
                src_ptr += 2;
            }
        }
}
     b30:	dfc00e17 	ldw	ra,56(sp)
     b34:	df000d17 	ldw	fp,52(sp)
     b38:	ddc00c17 	ldw	r23,48(sp)
     b3c:	dd800b17 	ldw	r22,44(sp)
     b40:	dd400a17 	ldw	r21,40(sp)
     b44:	dd000917 	ldw	r20,36(sp)
     b48:	dcc00817 	ldw	r19,32(sp)
     b4c:	dc800717 	ldw	r18,28(sp)
     b50:	dc400617 	ldw	r17,24(sp)
     b54:	dc000517 	ldw	r16,20(sp)
     b58:	dec00f04 	addi	sp,sp,60
     b5c:	f800283a 	ret

00000b60 <rgb565_to_feature>:

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
     b60:	defff504 	addi	sp,sp,-44
     b64:	dd000515 	stw	r20,20(sp)
     b68:	2829883a 	mov	r20,r5
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     b6c:	d9400b0b 	ldhu	r5,44(sp)
            }
        }
}

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
     b70:	dcc00415 	stw	r19,16(sp)
     b74:	2027883a 	mov	r19,r4
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     b78:	2809883a 	mov	r4,r5
            }
        }
}

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
     b7c:	df000915 	stw	fp,36(sp)
     b80:	dd800715 	stw	r22,28(sp)
     b84:	dd400615 	stw	r21,24(sp)
     b88:	dc800315 	stw	r18,12(sp)
     b8c:	dc400215 	stw	r17,8(sp)
     b90:	dfc00a15 	stw	ra,40(sp)
     b94:	ddc00815 	stw	r23,32(sp)
     b98:	dc000115 	stw	r16,4(sp)
     b9c:	302b883a 	mov	r21,r6
     ba0:	382d883a 	mov	r22,r7
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     ba4:	0004dbc0 	call	4dbc <__mulsi3>
     ba8:	1039883a 	mov	fp,r2
//////////////////////////////////////////////////////////////////////////////
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
     bac:	0023883a 	mov	r17,zero
	for (i=0; i<(res*res); i++) {
     bb0:	0025883a 	mov	r18,zero
     bb4:	97002626 	beq	r18,fp,c50 <rgb565_to_feature+0xf0>
		pixel = IORD_16DIRECT(src, ptr);
     bb8:	9c45883a 	add	r2,r19,r17
     bbc:	1400002b 	ldhuio	r16,0(r2)
     bc0:	843fffcc 	andi	r16,r16,65535

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     bc4:	813e000c 	andi	r4,r16,63488
     bc8:	2008d23a 	srli	r4,r4,8
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
     bcc:	a447883a 	add	r3,r20,r17

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     bd0:	d8c00015 	stw	r3,0(sp)
     bd4:	000626c0 	call	626c <__floatsisf>
     bd8:	0150dff4 	movhi	r5,17279
     bdc:	1009883a 	mov	r4,r2
     be0:	00052ac0 	call	52ac <__divsf3>
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
     be4:	1004d43a 	srli	r2,r2,16
     be8:	d8c00017 	ldw	r3,0(sp)
     bec:	85ffffcc 	andi	r23,r16,65535
     bf0:	1880002d 	sthio	r2,0(r3)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     bf4:	8101f80c 	andi	r4,r16,2016
     bf8:	2008d0fa 	srli	r4,r4,3

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
     bfc:	ac47883a 	add	r3,r21,r17

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     c00:	d8c00015 	stw	r3,0(sp)
     c04:	000626c0 	call	626c <__floatsisf>
     c08:	0150dff4 	movhi	r5,17279
     c0c:	1009883a 	mov	r4,r2
     c10:	00052ac0 	call	52ac <__divsf3>

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
     c14:	1004d43a 	srli	r2,r2,16
     c18:	d8c00017 	ldw	r3,0(sp)
     c1c:	1880002d 	sthio	r2,0(r3)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     c20:	b80890fa 	slli	r4,r23,3
	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
		IOWR_16DIRECT(dst_b, ptr, f2bf((float)((pixel & 0x1f) << 3) / 255.0));
     c24:	b461883a 	add	r16,r22,r17

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     c28:	21003e0c 	andi	r4,r4,248
     c2c:	000626c0 	call	626c <__floatsisf>
     c30:	0150dff4 	movhi	r5,17279
     c34:	1009883a 	mov	r4,r2
     c38:	00052ac0 	call	52ac <__divsf3>
	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
		IOWR_16DIRECT(dst_b, ptr, f2bf((float)((pixel & 0x1f) << 3) / 255.0));
     c3c:	1004d43a 	srli	r2,r2,16
     c40:	8080002d 	sthio	r2,0(r16)
		ptr += 2;
     c44:	8c400084 	addi	r17,r17,2
void rgb565_to_feature(alt_u16* src, alt_u16* dst_r, alt_u16* dst_g, alt_u16* dst_b, alt_u16 res) {
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     c48:	94800044 	addi	r18,r18,1
     c4c:	003fd906 	br	bb4 <__ram_exceptions_end+0xfdffeb94>
		IOWR_16DIRECT(dst_r, ptr, f2bf((float)((pixel & 0xf800) >> 8) / 255.0));
		IOWR_16DIRECT(dst_g, ptr, f2bf((float)((pixel & 0x7e0) >> 3) / 255.0));
		IOWR_16DIRECT(dst_b, ptr, f2bf((float)((pixel & 0x1f) << 3) / 255.0));
		ptr += 2;
	}
}
     c50:	dfc00a17 	ldw	ra,40(sp)
     c54:	df000917 	ldw	fp,36(sp)
     c58:	ddc00817 	ldw	r23,32(sp)
     c5c:	dd800717 	ldw	r22,28(sp)
     c60:	dd400617 	ldw	r21,24(sp)
     c64:	dd000517 	ldw	r20,20(sp)
     c68:	dcc00417 	ldw	r19,16(sp)
     c6c:	dc800317 	ldw	r18,12(sp)
     c70:	dc400217 	ldw	r17,8(sp)
     c74:	dc000117 	ldw	r16,4(sp)
     c78:	dec00b04 	addi	sp,sp,44
     c7c:	f800283a 	ret

00000c80 <grey_to_feature>:

//////////////////////////////////////////////////////////////////////////////
void grey_to_feature(alt_u16* src, alt_u16* dst, alt_u16 res) {
     c80:	defffa04 	addi	sp,sp,-24
     c84:	dd000415 	stw	r20,16(sp)
     c88:	2829883a 	mov	r20,r5
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     c8c:	317fffcc 	andi	r5,r6,65535
		ptr += 2;
	}
}

//////////////////////////////////////////////////////////////////////////////
void grey_to_feature(alt_u16* src, alt_u16* dst, alt_u16 res) {
     c90:	dcc00315 	stw	r19,12(sp)
     c94:	2027883a 	mov	r19,r4
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     c98:	2809883a 	mov	r4,r5
		ptr += 2;
	}
}

//////////////////////////////////////////////////////////////////////////////
void grey_to_feature(alt_u16* src, alt_u16* dst, alt_u16 res) {
     c9c:	dc800215 	stw	r18,8(sp)
     ca0:	dc000015 	stw	r16,0(sp)
     ca4:	dfc00515 	stw	ra,20(sp)
     ca8:	dc400115 	stw	r17,4(sp)
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     cac:	0004dbc0 	call	4dbc <__mulsi3>
     cb0:	1025883a 	mov	r18,r2
     cb4:	0021883a 	mov	r16,zero
     cb8:	84800d26 	beq	r16,r18,cf0 <grey_to_feature+0x70>
     cbc:	8405883a 	add	r2,r16,r16
		pixel = IORD_16DIRECT(src, ptr);
     cc0:	9887883a 	add	r3,r19,r2
     cc4:	1900002b 	ldhuio	r4,0(r3)

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     cc8:	213fffcc 	andi	r4,r4,65535
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst, ptr, f2bf(((float)pixel) / 255.0));
     ccc:	a0a3883a 	add	r17,r20,r2

//////////////////////////////////////////////////////////////////////////////
bfloat16 f2bf(float x) { // float to bfloat
     union IntFloat f;
     f.f = x;
     return (bfloat16)(f.i >> 16);
     cd0:	00063900 	call	6390 <__floatunsisf>
     cd4:	0150dff4 	movhi	r5,17279
     cd8:	1009883a 	mov	r4,r2
     cdc:	00052ac0 	call	52ac <__divsf3>
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst, ptr, f2bf(((float)pixel) / 255.0));
     ce0:	1004d43a 	srli	r2,r2,16
     ce4:	8880002d 	sthio	r2,0(r17)
void grey_to_feature(alt_u16* src, alt_u16* dst, alt_u16 res) {
	alt_u16 pixel;
	alt_u32 i, ptr;

	ptr = 0;
	for (i=0; i<(res*res); i++) {
     ce8:	84000044 	addi	r16,r16,1
     cec:	003ff206 	br	cb8 <__ram_exceptions_end+0xfdffec98>
		pixel = IORD_16DIRECT(src, ptr);
		IOWR_16DIRECT(dst, ptr, f2bf(((float)pixel) / 255.0));
		ptr += 2;
	}
}
     cf0:	dfc00517 	ldw	ra,20(sp)
     cf4:	dd000417 	ldw	r20,16(sp)
     cf8:	dcc00317 	ldw	r19,12(sp)
     cfc:	dc800217 	ldw	r18,8(sp)
     d00:	dc400117 	ldw	r17,4(sp)
     d04:	dc000017 	ldw	r16,0(sp)
     d08:	dec00604 	addi	sp,sp,24
     d0c:	f800283a 	ret

00000d10 <rgb_to_grey>:

//////////////////////////////////////////////////////////////////////////////
alt_u16 rgb_to_grey(alt_u16 rgb565) {
     d10:	defffd04 	addi	sp,sp,-12
     d14:	dc000015 	stw	r16,0(sp)
     d18:	2021883a 	mov	r16,r4
	alt_u16 grey;

	grey = (alt_u16)((float)((rgb565 & 0xf800) >> 8) * 0.299);
     d1c:	213e000c 	andi	r4,r4,63488
     d20:	2008d23a 	srli	r4,r4,8
		ptr += 2;
	}
}

//////////////////////////////////////////////////////////////////////////////
alt_u16 rgb_to_grey(alt_u16 rgb565) {
     d24:	dfc00215 	stw	ra,8(sp)
     d28:	dc400115 	stw	r17,4(sp)
	alt_u16 grey;

	grey = (alt_u16)((float)((rgb565 & 0xf800) >> 8) * 0.299);
     d2c:	000626c0 	call	626c <__floatsisf>
     d30:	1009883a 	mov	r4,r2
     d34:	0008cc00 	call	8cc0 <__extendsfdf2>
     d38:	01b95834 	movhi	r6,58720
     d3c:	01cff4f4 	movhi	r7,16339
     d40:	31906244 	addi	r6,r6,16777
     d44:	39c8b404 	addi	r7,r7,8912
     d48:	1009883a 	mov	r4,r2
     d4c:	180b883a 	mov	r5,r3
     d50:	00079540 	call	7954 <__muldf3>
     d54:	180b883a 	mov	r5,r3
     d58:	1009883a 	mov	r4,r2
     d5c:	0003fd40 	call	3fd4 <__fixunsdfsi>
	grey += (alt_u16)((float)((rgb565 & 0x07e0) >> 3) * 0.587);
     d60:	8101f80c 	andi	r4,r16,2016
     d64:	2008d0fa 	srli	r4,r4,3

//////////////////////////////////////////////////////////////////////////////
alt_u16 rgb_to_grey(alt_u16 rgb565) {
	alt_u16 grey;

	grey = (alt_u16)((float)((rgb565 & 0xf800) >> 8) * 0.299);
     d68:	1023883a 	mov	r17,r2
	grey += (alt_u16)((float)((rgb565 & 0x07e0) >> 3) * 0.587);
     d6c:	000626c0 	call	626c <__floatsisf>
     d70:	1009883a 	mov	r4,r2
     d74:	0008cc00 	call	8cc0 <__extendsfdf2>
     d78:	018e5634 	movhi	r6,14680
     d7c:	01cff8f4 	movhi	r7,16355
     d80:	31841884 	addi	r6,r6,4194
     d84:	39f22d04 	addi	r7,r7,-14156
     d88:	1009883a 	mov	r4,r2
     d8c:	180b883a 	mov	r5,r3
     d90:	00079540 	call	7954 <__muldf3>
     d94:	180b883a 	mov	r5,r3
     d98:	1009883a 	mov	r4,r2
     d9c:	0003fd40 	call	3fd4 <__fixunsdfsi>
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
     da0:	800890fa 	slli	r4,r16,3
//////////////////////////////////////////////////////////////////////////////
alt_u16 rgb_to_grey(alt_u16 rgb565) {
	alt_u16 grey;

	grey = (alt_u16)((float)((rgb565 & 0xf800) >> 8) * 0.299);
	grey += (alt_u16)((float)((rgb565 & 0x07e0) >> 3) * 0.587);
     da4:	88a3883a 	add	r17,r17,r2
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
     da8:	21003e0c 	andi	r4,r4,248
     dac:	000626c0 	call	626c <__floatsisf>
     db0:	1009883a 	mov	r4,r2
     db4:	0008cc00 	call	8cc0 <__extendsfdf2>
     db8:	01a7efb4 	movhi	r6,40894
     dbc:	01cfef74 	movhi	r7,16317
     dc0:	319db244 	addi	r6,r6,30409
     dc4:	39cbc684 	addi	r7,r7,12058
     dc8:	1009883a 	mov	r4,r2
     dcc:	180b883a 	mov	r5,r3
     dd0:	00079540 	call	7954 <__muldf3>
     dd4:	1009883a 	mov	r4,r2
     dd8:	180b883a 	mov	r5,r3
     ddc:	0003fd40 	call	3fd4 <__fixunsdfsi>
}
     de0:	8885883a 	add	r2,r17,r2
     de4:	dfc00217 	ldw	ra,8(sp)
     de8:	dc400117 	ldw	r17,4(sp)
     dec:	dc000017 	ldw	r16,0(sp)
     df0:	dec00304 	addi	sp,sp,12
     df4:	f800283a 	ret

00000df8 <rgb565_to_text>:

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
     df8:	deffdb04 	addi	sp,sp,-148
     dfc:	dc801d15 	stw	r18,116(sp)

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
     e00:	04801704 	movi	r18,92
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
}

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
     e04:	dd402015 	stw	r21,128(sp)
     e08:	dcc01e15 	stw	r19,120(sp)
     e0c:	dc401c15 	stw	r17,112(sp)
     e10:	dc001b15 	stw	r16,108(sp)
     e14:	2823883a 	mov	r17,r5
     e18:	3021883a 	mov	r16,r6

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
     e1c:	000b883a 	mov	r5,zero
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
}

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
     e20:	202b883a 	mov	r21,r4
     e24:	3027883a 	mov	r19,r6

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
     e28:	d809883a 	mov	r4,sp
     e2c:	900d883a 	mov	r6,r18
	grey += (alt_u16)((float)((rgb565 & 0x001f) << 3) * 0.114);
	return grey;
}

//////////////////////////////////////////////////////////////////////////////
void rgb565_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
     e30:	dfc02415 	stw	ra,144(sp)
     e34:	df002315 	stw	fp,140(sp)
     e38:	ddc02215 	stw	r23,136(sp)
     e3c:	dd802115 	stw	r22,132(sp)
     e40:	dd001f15 	stw	r20,124(sp)

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
     e44:	0008fec0 	call	8fec <memset>
     e48:	00800804 	movi	r2,32
     e4c:	d8800005 	stb	r2,0(sp)
     e50:	00801804 	movi	r2,96
     e54:	d8800045 	stb	r2,1(sp)
     e58:	00800b44 	movi	r2,45
     e5c:	d8800085 	stb	r2,2(sp)
     e60:	00800b84 	movi	r2,46
     e64:	d88000c5 	stb	r2,3(sp)
     e68:	008009c4 	movi	r2,39
     e6c:	d8800105 	stb	r2,4(sp)
     e70:	008017c4 	movi	r2,95
     e74:	d8800145 	stb	r2,5(sp)
     e78:	00800e84 	movi	r2,58
     e7c:	d8800185 	stb	r2,6(sp)
     e80:	00800b04 	movi	r2,44
     e84:	d88001c5 	stb	r2,7(sp)
     e88:	00800884 	movi	r2,34
     e8c:	d8800205 	stb	r2,8(sp)
     e90:	00800f44 	movi	r2,61
     e94:	d8800245 	stb	r2,9(sp)
     e98:	00801784 	movi	r2,94
     e9c:	d8800285 	stb	r2,10(sp)
     ea0:	00800ec4 	movi	r2,59
     ea4:	d88002c5 	stb	r2,11(sp)
     ea8:	00800f04 	movi	r2,60
     eac:	d8800305 	stb	r2,12(sp)
     eb0:	00800ac4 	movi	r2,43
     eb4:	d8800345 	stb	r2,13(sp)
     eb8:	00800844 	movi	r2,33
     ebc:	d8800385 	stb	r2,14(sp)
     ec0:	00800a84 	movi	r2,42
     ec4:	d88003c5 	stb	r2,15(sp)
     ec8:	00800fc4 	movi	r2,63
     ecc:	d8800405 	stb	r2,16(sp)
     ed0:	00800bc4 	movi	r2,47
     ed4:	d8800445 	stb	r2,17(sp)
     ed8:	008018c4 	movi	r2,99
     edc:	d8800485 	stb	r2,18(sp)
     ee0:	00801304 	movi	r2,76
     ee4:	d88004c5 	stb	r2,19(sp)
     ee8:	00801e84 	movi	r2,122
     eec:	d8800545 	stb	r2,21(sp)
     ef0:	00801c84 	movi	r2,114
     ef4:	d8800585 	stb	r2,22(sp)
     ef8:	00801cc4 	movi	r2,115
     efc:	d88005c5 	stb	r2,23(sp)
     f00:	00800dc4 	movi	r2,55
     f04:	d8800605 	stb	r2,24(sp)
     f08:	00801504 	movi	r2,84
     f0c:	d8800645 	stb	r2,25(sp)
     f10:	00801a44 	movi	r2,105
     f14:	d8800685 	stb	r2,26(sp)
     f18:	00801d84 	movi	r2,118
     f1c:	d88006c5 	stb	r2,27(sp)
     f20:	00801284 	movi	r2,74
     f24:	d8800705 	stb	r2,28(sp)
     f28:	00801d04 	movi	r2,116
     f2c:	d8800745 	stb	r2,29(sp)
     f30:	008010c4 	movi	r2,67
     f34:	d8800785 	stb	r2,30(sp)
     f38:	00801ec4 	movi	r2,123
     f3c:	dc800505 	stb	r18,20(sp)
     f40:	d88007c5 	stb	r2,31(sp)
     f44:	00800cc4 	movi	r2,51
     f48:	d8800805 	stb	r2,32(sp)
     f4c:	00801184 	movi	r2,70
     f50:	d8800845 	stb	r2,33(sp)
     f54:	00800a44 	movi	r2,41
     f58:	d8800885 	stb	r2,34(sp)
     f5c:	00801244 	movi	r2,73
     f60:	d88008c5 	stb	r2,35(sp)
     f64:	00801b04 	movi	r2,108
     f68:	d8800905 	stb	r2,36(sp)
     f6c:	00800a04 	movi	r2,40
     f70:	d8800945 	stb	r2,37(sp)
     f74:	00801e04 	movi	r2,120
     f78:	d8800985 	stb	r2,38(sp)
     f7c:	00801684 	movi	r2,90
     f80:	d88009c5 	stb	r2,39(sp)
     f84:	00801984 	movi	r2,102
     f88:	d8800a05 	stb	r2,40(sp)
     f8c:	00801644 	movi	r2,89
     f90:	d8800a45 	stb	r2,41(sp)
     f94:	00800d44 	movi	r2,53
     f98:	d8800a85 	stb	r2,42(sp)
     f9c:	008014c4 	movi	r2,83
     fa0:	d8800ac5 	stb	r2,43(sp)
     fa4:	00800c84 	movi	r2,50
     fa8:	d8800b05 	stb	r2,44(sp)
     fac:	00801944 	movi	r2,101
     fb0:	d8800b45 	stb	r2,45(sp)
     fb4:	00801844 	movi	r2,97
     fb8:	d8800b85 	stb	r2,46(sp)
     fbc:	00801a84 	movi	r2,106
     fc0:	d8800bc5 	stb	r2,47(sp)
     fc4:	00801bc4 	movi	r2,111
     fc8:	d8800c05 	stb	r2,48(sp)
     fcc:	00800c44 	movi	r2,49
     fd0:	d8800c45 	stb	r2,49(sp)
     fd4:	00800d04 	movi	r2,52
     fd8:	d8800c85 	stb	r2,50(sp)
     fdc:	008016c4 	movi	r2,91
     fe0:	d8800cc5 	stb	r2,51(sp)
     fe4:	00801b84 	movi	r2,110
     fe8:	d8800d05 	stb	r2,52(sp)
     fec:	00801d44 	movi	r2,117
     ff0:	d8800d45 	stb	r2,53(sp)
     ff4:	00801e44 	movi	r2,121
     ff8:	d8800d85 	stb	r2,54(sp)
     ffc:	00801144 	movi	r2,69
    1000:	d8800dc5 	stb	r2,55(sp)
    1004:	00801744 	movi	r2,93
    1008:	d8800e05 	stb	r2,56(sp)
    100c:	00801404 	movi	r2,80
    1010:	d8800e45 	stb	r2,57(sp)
    1014:	00800d84 	movi	r2,54
    1018:	d8800e85 	stb	r2,58(sp)
    101c:	00801584 	movi	r2,86
    1020:	d8800ec5 	stb	r2,59(sp)
    1024:	00800e44 	movi	r2,57
    1028:	d8800f05 	stb	r2,60(sp)
    102c:	00801ac4 	movi	r2,107
    1030:	d8800f45 	stb	r2,61(sp)
    1034:	00801604 	movi	r2,88
    1038:	d8800f85 	stb	r2,62(sp)
    103c:	00801c04 	movi	r2,112
    1040:	d8800fc5 	stb	r2,63(sp)
    1044:	008012c4 	movi	r2,75
    1048:	d8801005 	stb	r2,64(sp)
    104c:	00801dc4 	movi	r2,119
    1050:	d8801045 	stb	r2,65(sp)
    1054:	008011c4 	movi	r2,71
    1058:	d8801085 	stb	r2,66(sp)
    105c:	00801a04 	movi	r2,104
    1060:	d88010c5 	stb	r2,67(sp)
    1064:	00801c44 	movi	r2,113
    1068:	d8801105 	stb	r2,68(sp)
    106c:	00801044 	movi	r2,65
    1070:	d8801145 	stb	r2,69(sp)
    1074:	00801544 	movi	r2,85
    1078:	d8801185 	stb	r2,70(sp)
    107c:	00801884 	movi	r2,98
    1080:	d88011c5 	stb	r2,71(sp)
    1084:	008013c4 	movi	r2,79
    1088:	d8801205 	stb	r2,72(sp)
    108c:	00801904 	movi	r2,100
    1090:	d8801245 	stb	r2,73(sp)
    1094:	00800e04 	movi	r2,56
    1098:	d8801285 	stb	r2,74(sp)
    109c:	008008c4 	movi	r2,35
    10a0:	d88012c5 	stb	r2,75(sp)
    10a4:	00801204 	movi	r2,72
    10a8:	d8801305 	stb	r2,76(sp)
    10ac:	00801484 	movi	r2,82
    10b0:	d8801345 	stb	r2,77(sp)
    10b4:	00801104 	movi	r2,68
    10b8:	d8801385 	stb	r2,78(sp)
    10bc:	00801084 	movi	r2,66
    10c0:	d88013c5 	stb	r2,79(sp)
    10c4:	00800c04 	movi	r2,48
    10c8:	d8801405 	stb	r2,80(sp)
    10cc:	00800904 	movi	r2,36
    10d0:	d8801445 	stb	r2,81(sp)
    10d4:	00801b44 	movi	r2,109
    10d8:	d8801485 	stb	r2,82(sp)
    10dc:	008019c4 	movi	r2,103
    10e0:	d88014c5 	stb	r2,83(sp)
    10e4:	00801344 	movi	r2,77
    10e8:	d8801505 	stb	r2,84(sp)
    10ec:	008015c4 	movi	r2,87
    10f0:	d8801545 	stb	r2,85(sp)
    10f4:	00800984 	movi	r2,38
    10f8:	d8801585 	stb	r2,86(sp)
    10fc:	00801444 	movi	r2,81
    1100:	d88015c5 	stb	r2,87(sp)
    1104:	00800944 	movi	r2,37
    1108:	d8801605 	stb	r2,88(sp)
    110c:	817fffcc 	andi	r5,r16,65535
    1110:	00801384 	movi	r2,78
    1114:	d8801645 	stb	r2,89(sp)
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
				for (xx=0; xx<step; xx++)
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
			sum = (sum / (step * step));
    1118:	2809883a 	mov	r4,r5
//////////////////////////////////////////////////////////////////////////////
void rgb565_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    111c:	00801004 	movi	r2,64
    1120:	d8801685 	stb	r2,90(sp)
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
				for (xx=0; xx<step; xx++)
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
			sum = (sum / (step * step));
    1124:	0004dbc0 	call	4dbc <__mulsi3>
    1128:	d8801715 	stw	r2,92(sp)
			47,99,76,92,122,114,115,55,84,105,118,74,116,67,123,51,70,41,73,108,
			40,120,90,102,89,53,83,50,101,97,106,111,49,52,91,110,117,121,69,93,
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
    112c:	0025883a 	mov	r18,zero
    1130:	8c7fffcc 	andi	r17,r17,65535
    1134:	913fffcc 	andi	r4,r18,65535
    1138:	2440382e 	bgeu	r4,r17,121c <rgb565_to_text+0x424>
		line = (y * res);
    113c:	880b883a 	mov	r5,r17
    1140:	0004dbc0 	call	4dbc <__mulsi3>
    1144:	102d883a 	mov	r22,r2
		for (x=0; x<res; x+=step) {
    1148:	0021883a 	mov	r16,zero
    114c:	9d3fffcc 	andi	r20,r19,65535
    1150:	80bfffcc 	andi	r2,r16,65535
    1154:	14402c2e 	bgeu	r2,r17,1208 <rgb565_to_text+0x410>
			sum = 0;
			src_ptr = (x + line) << 1;
    1158:	1585883a 	add	r2,r2,r22
    115c:	1087883a 	add	r3,r2,r2
			for (yy=0; yy<step; yy++)
    1160:	a039883a 	mov	fp,r20
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
			sum = 0;
    1164:	000f883a 	mov	r7,zero
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
    1168:	000b883a 	mov	r5,zero
    116c:	28bfffcc 	andi	r2,r5,65535
    1170:	15001526 	beq	r2,r20,11c8 <rgb565_to_text+0x3d0>
    1174:	e52fc83a 	sub	r23,fp,r20
				for (xx=0; xx<step; xx++)
    1178:	e5c01026 	beq	fp,r23,11bc <rgb565_to_text+0x3c4>
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
    117c:	bdc5883a 	add	r2,r23,r23
    1180:	10c5883a 	add	r2,r2,r3
    1184:	a885883a 	add	r2,r21,r2
    1188:	1100002b 	ldhuio	r4,0(r2)
    118c:	213fffcc 	andi	r4,r4,65535
    1190:	d8c01a15 	stw	r3,104(sp)
    1194:	d9401815 	stw	r5,96(sp)
    1198:	d9c01915 	stw	r7,100(sp)
    119c:	0000d100 	call	d10 <rgb_to_grey>
    11a0:	d9c01917 	ldw	r7,100(sp)
    11a4:	10bfffcc 	andi	r2,r2,65535
    11a8:	bdc00044 	addi	r23,r23,1
    11ac:	388f883a 	add	r7,r7,r2
    11b0:	d9401817 	ldw	r5,96(sp)
    11b4:	d8c01a17 	ldw	r3,104(sp)
    11b8:	003fef06 	br	1178 <__ram_exceptions_end+0xfdfff158>
	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
    11bc:	29400044 	addi	r5,r5,1
    11c0:	e479883a 	add	fp,fp,r17
    11c4:	003fe906 	br	116c <__ram_exceptions_end+0xfdfff14c>
				for (xx=0; xx<step; xx++)
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
			sum = (sum / (step * step));
			sum = (sum * 92) / 255;		// scale grey count
    11c8:	d9401717 	ldw	r5,92(sp)
    11cc:	3809883a 	mov	r4,r7
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
    11d0:	84e1883a 	add	r16,r16,r19
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
				for (xx=0; xx<step; xx++)
					sum += rgb_to_grey(IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1)));
			sum = (sum / (step * step));
			sum = (sum * 92) / 255;		// scale grey count
    11d4:	0004d000 	call	4d00 <__udivsi3>
    11d8:	01401704 	movi	r5,92
    11dc:	1009883a 	mov	r4,r2
    11e0:	0004dbc0 	call	4dbc <__mulsi3>
			printf("%c", char_grey[sum]);
    11e4:	01403fc4 	movi	r5,255
    11e8:	1009883a 	mov	r4,r2
    11ec:	0004d000 	call	4d00 <__udivsi3>
    11f0:	d885883a 	add	r2,sp,r2
    11f4:	11400003 	ldbu	r5,0(r2)
    11f8:	01000074 	movhi	r4,1
    11fc:	21247404 	addi	r4,r4,-28208
    1200:	00033500 	call	3350 <printf_>
    1204:	003fd206 	br	1150 <__ram_exceptions_end+0xfdfff130>
		}
		printf("\n");
    1208:	01000074 	movhi	r4,1
    120c:	21247304 	addi	r4,r4,-28212
    1210:	00033500 	call	3350 <printf_>
			47,99,76,92,122,114,115,55,84,105,118,74,116,67,123,51,70,41,73,108,
			40,120,90,102,89,53,83,50,101,97,106,111,49,52,91,110,117,121,69,93,
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
    1214:	94e5883a 	add	r18,r18,r19
    1218:	003fc606 	br	1134 <__ram_exceptions_end+0xfdfff114>
			sum = (sum * 92) / 255;		// scale grey count
			printf("%c", char_grey[sum]);
		}
		printf("\n");
	}
}
    121c:	dfc02417 	ldw	ra,144(sp)
    1220:	df002317 	ldw	fp,140(sp)
    1224:	ddc02217 	ldw	r23,136(sp)
    1228:	dd802117 	ldw	r22,132(sp)
    122c:	dd402017 	ldw	r21,128(sp)
    1230:	dd001f17 	ldw	r20,124(sp)
    1234:	dcc01e17 	ldw	r19,120(sp)
    1238:	dc801d17 	ldw	r18,116(sp)
    123c:	dc401c17 	ldw	r17,112(sp)
    1240:	dc001b17 	ldw	r16,108(sp)
    1244:	dec02504 	addi	sp,sp,148
    1248:	f800283a 	ret

0000124c <grey_to_text>:
//////////////////////////////////////////////////////////////////////////////
void grey_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
    124c:	deffe004 	addi	sp,sp,-128
    1250:	dcc01a15 	stw	r19,104(sp)

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    1254:	04c01704 	movi	r19,92
		}
		printf("\n");
	}
}
//////////////////////////////////////////////////////////////////////////////
void grey_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
    1258:	dd001b15 	stw	r20,108(sp)
    125c:	dc801915 	stw	r18,100(sp)
    1260:	dc401815 	stw	r17,96(sp)
    1264:	dc001715 	stw	r16,92(sp)
    1268:	3023883a 	mov	r17,r6
    126c:	2821883a 	mov	r16,r5
    1270:	2029883a 	mov	r20,r4

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    1274:	000b883a 	mov	r5,zero
    1278:	d809883a 	mov	r4,sp
		}
		printf("\n");
	}
}
//////////////////////////////////////////////////////////////////////////////
void grey_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
    127c:	3025883a 	mov	r18,r6

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    1280:	980d883a 	mov	r6,r19
		}
		printf("\n");
	}
}
//////////////////////////////////////////////////////////////////////////////
void grey_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {
    1284:	dfc01f15 	stw	ra,124(sp)
    1288:	ddc01e15 	stw	r23,120(sp)
    128c:	dd801d15 	stw	r22,116(sp)
    1290:	dd401c15 	stw	r21,112(sp)

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    1294:	0008fec0 	call	8fec <memset>
    1298:	00800804 	movi	r2,32
    129c:	d8800005 	stb	r2,0(sp)
    12a0:	00801804 	movi	r2,96
    12a4:	d8800045 	stb	r2,1(sp)
    12a8:	00800b44 	movi	r2,45
    12ac:	d8800085 	stb	r2,2(sp)
    12b0:	00800b84 	movi	r2,46
    12b4:	d88000c5 	stb	r2,3(sp)
    12b8:	008009c4 	movi	r2,39
    12bc:	d8800105 	stb	r2,4(sp)
    12c0:	008017c4 	movi	r2,95
    12c4:	d8800145 	stb	r2,5(sp)
    12c8:	00800e84 	movi	r2,58
    12cc:	d8800185 	stb	r2,6(sp)
    12d0:	00800b04 	movi	r2,44
    12d4:	d88001c5 	stb	r2,7(sp)
    12d8:	00800884 	movi	r2,34
    12dc:	d8800205 	stb	r2,8(sp)
    12e0:	00800f44 	movi	r2,61
    12e4:	d8800245 	stb	r2,9(sp)
    12e8:	00801784 	movi	r2,94
    12ec:	d8800285 	stb	r2,10(sp)
    12f0:	00800ec4 	movi	r2,59
    12f4:	d88002c5 	stb	r2,11(sp)
    12f8:	00800f04 	movi	r2,60
    12fc:	d8800305 	stb	r2,12(sp)
    1300:	00800ac4 	movi	r2,43
    1304:	d8800345 	stb	r2,13(sp)
    1308:	00800844 	movi	r2,33
    130c:	d8800385 	stb	r2,14(sp)
    1310:	00800a84 	movi	r2,42
    1314:	d88003c5 	stb	r2,15(sp)
    1318:	00800fc4 	movi	r2,63
    131c:	d8800405 	stb	r2,16(sp)
    1320:	00800bc4 	movi	r2,47
    1324:	d8800445 	stb	r2,17(sp)
    1328:	008018c4 	movi	r2,99
    132c:	d8800485 	stb	r2,18(sp)
    1330:	00801304 	movi	r2,76
    1334:	d88004c5 	stb	r2,19(sp)
    1338:	00801e84 	movi	r2,122
    133c:	d8800545 	stb	r2,21(sp)
    1340:	00801c84 	movi	r2,114
    1344:	d8800585 	stb	r2,22(sp)
    1348:	00801cc4 	movi	r2,115
    134c:	d88005c5 	stb	r2,23(sp)
    1350:	00800dc4 	movi	r2,55
    1354:	d8800605 	stb	r2,24(sp)
    1358:	00801504 	movi	r2,84
    135c:	d8800645 	stb	r2,25(sp)
    1360:	00801a44 	movi	r2,105
    1364:	d8800685 	stb	r2,26(sp)
    1368:	00801d84 	movi	r2,118
    136c:	d88006c5 	stb	r2,27(sp)
    1370:	00801284 	movi	r2,74
    1374:	d8800705 	stb	r2,28(sp)
    1378:	00801d04 	movi	r2,116
    137c:	d8800745 	stb	r2,29(sp)
    1380:	008010c4 	movi	r2,67
    1384:	d8800785 	stb	r2,30(sp)
    1388:	00801ec4 	movi	r2,123
    138c:	dcc00505 	stb	r19,20(sp)
    1390:	d88007c5 	stb	r2,31(sp)
    1394:	00800cc4 	movi	r2,51
    1398:	d8800805 	stb	r2,32(sp)
    139c:	00801184 	movi	r2,70
    13a0:	d8800845 	stb	r2,33(sp)
    13a4:	00800a44 	movi	r2,41
    13a8:	d8800885 	stb	r2,34(sp)
    13ac:	00801244 	movi	r2,73
    13b0:	d88008c5 	stb	r2,35(sp)
    13b4:	00801b04 	movi	r2,108
    13b8:	d8800905 	stb	r2,36(sp)
    13bc:	00800a04 	movi	r2,40
    13c0:	d8800945 	stb	r2,37(sp)
    13c4:	00801e04 	movi	r2,120
    13c8:	d8800985 	stb	r2,38(sp)
    13cc:	00801684 	movi	r2,90
    13d0:	d88009c5 	stb	r2,39(sp)
    13d4:	00801984 	movi	r2,102
    13d8:	d8800a05 	stb	r2,40(sp)
    13dc:	00801644 	movi	r2,89
    13e0:	d8800a45 	stb	r2,41(sp)
    13e4:	00800d44 	movi	r2,53
    13e8:	d8800a85 	stb	r2,42(sp)
    13ec:	008014c4 	movi	r2,83
    13f0:	d8800ac5 	stb	r2,43(sp)
    13f4:	00800c84 	movi	r2,50
    13f8:	d8800b05 	stb	r2,44(sp)
    13fc:	00801944 	movi	r2,101
    1400:	d8800b45 	stb	r2,45(sp)
    1404:	00801844 	movi	r2,97
    1408:	d8800b85 	stb	r2,46(sp)
    140c:	00801a84 	movi	r2,106
    1410:	d8800bc5 	stb	r2,47(sp)
    1414:	00801bc4 	movi	r2,111
    1418:	d8800c05 	stb	r2,48(sp)
    141c:	00800c44 	movi	r2,49
    1420:	d8800c45 	stb	r2,49(sp)
    1424:	00800d04 	movi	r2,52
    1428:	d8800c85 	stb	r2,50(sp)
    142c:	008016c4 	movi	r2,91
    1430:	d8800cc5 	stb	r2,51(sp)
    1434:	00801b84 	movi	r2,110
    1438:	d8800d05 	stb	r2,52(sp)
    143c:	00801d44 	movi	r2,117
    1440:	d8800d45 	stb	r2,53(sp)
    1444:	00801e44 	movi	r2,121
    1448:	d8800d85 	stb	r2,54(sp)
    144c:	00801144 	movi	r2,69
    1450:	d8800dc5 	stb	r2,55(sp)
    1454:	00801744 	movi	r2,93
    1458:	d8800e05 	stb	r2,56(sp)
    145c:	00801404 	movi	r2,80
    1460:	d8800e45 	stb	r2,57(sp)
    1464:	00800d84 	movi	r2,54
    1468:	d8800e85 	stb	r2,58(sp)
    146c:	00801584 	movi	r2,86
    1470:	d8800ec5 	stb	r2,59(sp)
    1474:	00800e44 	movi	r2,57
    1478:	d8800f05 	stb	r2,60(sp)
    147c:	00801ac4 	movi	r2,107
    1480:	d8800f45 	stb	r2,61(sp)
    1484:	00801604 	movi	r2,88
    1488:	d8800f85 	stb	r2,62(sp)
    148c:	00801c04 	movi	r2,112
    1490:	d8800fc5 	stb	r2,63(sp)
    1494:	008012c4 	movi	r2,75
    1498:	d8801005 	stb	r2,64(sp)
    149c:	00801dc4 	movi	r2,119
    14a0:	d8801045 	stb	r2,65(sp)
    14a4:	008011c4 	movi	r2,71
    14a8:	d8801085 	stb	r2,66(sp)
    14ac:	00801a04 	movi	r2,104
    14b0:	d88010c5 	stb	r2,67(sp)
    14b4:	00801c44 	movi	r2,113
    14b8:	d8801105 	stb	r2,68(sp)
    14bc:	00801044 	movi	r2,65
    14c0:	d8801145 	stb	r2,69(sp)
    14c4:	00801544 	movi	r2,85
    14c8:	d8801185 	stb	r2,70(sp)
    14cc:	00801884 	movi	r2,98
    14d0:	d88011c5 	stb	r2,71(sp)
    14d4:	008013c4 	movi	r2,79
    14d8:	d8801205 	stb	r2,72(sp)
    14dc:	00801904 	movi	r2,100
    14e0:	d8801245 	stb	r2,73(sp)
    14e4:	00800e04 	movi	r2,56
    14e8:	d8801285 	stb	r2,74(sp)
    14ec:	008008c4 	movi	r2,35
    14f0:	d88012c5 	stb	r2,75(sp)
    14f4:	00801204 	movi	r2,72
    14f8:	d8801305 	stb	r2,76(sp)
    14fc:	00801484 	movi	r2,82
    1500:	d8801345 	stb	r2,77(sp)
    1504:	00801104 	movi	r2,68
    1508:	d8801385 	stb	r2,78(sp)
    150c:	00801084 	movi	r2,66
    1510:	d88013c5 	stb	r2,79(sp)
    1514:	00800c04 	movi	r2,48
    1518:	d8801405 	stb	r2,80(sp)
    151c:	00800904 	movi	r2,36
    1520:	d8801445 	stb	r2,81(sp)
    1524:	00801b44 	movi	r2,109
    1528:	d8801485 	stb	r2,82(sp)
    152c:	008019c4 	movi	r2,103
    1530:	d88014c5 	stb	r2,83(sp)
    1534:	00801344 	movi	r2,77
    1538:	d8801505 	stb	r2,84(sp)
    153c:	008015c4 	movi	r2,87
    1540:	d8801545 	stb	r2,85(sp)
    1544:	00800984 	movi	r2,38
    1548:	d8801585 	stb	r2,86(sp)
    154c:	00801444 	movi	r2,81
    1550:	d88015c5 	stb	r2,87(sp)
    1554:	00800944 	movi	r2,37
    1558:	897fffcc 	andi	r5,r17,65535
    155c:	d8801605 	stb	r2,88(sp)
    1560:	00801384 	movi	r2,78
    1564:	d8801645 	stb	r2,89(sp)
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
				for (xx=0; xx<step; xx++)
					sum += IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1));
			sum = (sum / (step * step));
    1568:	2809883a 	mov	r4,r5
//////////////////////////////////////////////////////////////////////////////
void grey_to_text(alt_u16* src, alt_u16 res, alt_u16 step, alt_u16 negative) {

	alt_u16 x, y, xx, yy;
	alt_u32 line, src_ptr, sum;
	alt_u8 char_grey[92] = {32,96,45,46,39,95,58,44,34,61,94,59,60,43,33,42,63,
    156c:	00801004 	movi	r2,64
    1570:	d8801685 	stb	r2,90(sp)
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
				for (xx=0; xx<step; xx++)
					sum += IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1));
			sum = (sum / (step * step));
    1574:	0004dbc0 	call	4dbc <__mulsi3>
    1578:	1027883a 	mov	r19,r2
			47,99,76,92,122,114,115,55,84,105,118,74,116,67,123,51,70,41,73,108,
			40,120,90,102,89,53,83,50,101,97,106,111,49,52,91,110,117,121,69,93,
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
    157c:	0023883a 	mov	r17,zero
    1580:	843fffcc 	andi	r16,r16,65535
    1584:	893fffcc 	andi	r4,r17,65535
    1588:	24002f2e 	bgeu	r4,r16,1648 <grey_to_text+0x3fc>
		line = (y * res);
    158c:	800b883a 	mov	r5,r16
    1590:	0004dbc0 	call	4dbc <__mulsi3>
    1594:	102f883a 	mov	r23,r2
		for (x=0; x<res; x+=step) {
    1598:	002b883a 	mov	r21,zero
    159c:	95bfffcc 	andi	r22,r18,65535
    15a0:	a8bfffcc 	andi	r2,r21,65535
    15a4:	1400232e 	bgeu	r2,r16,1634 <grey_to_text+0x3e8>
			sum = 0;
			src_ptr = (x + line) << 1;
    15a8:	15c5883a 	add	r2,r2,r23
    15ac:	1085883a 	add	r2,r2,r2
			for (yy=0; yy<step; yy++)
    15b0:	b00d883a 	mov	r6,r22
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
			sum = 0;
    15b4:	0009883a 	mov	r4,zero
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
    15b8:	000f883a 	mov	r7,zero
    15bc:	38ffffcc 	andi	r3,r7,65535
    15c0:	1d800d26 	beq	r3,r22,15f8 <grey_to_text+0x3ac>
    15c4:	3587c83a 	sub	r3,r6,r22
				for (xx=0; xx<step; xx++)
    15c8:	30c00826 	beq	r6,r3,15ec <grey_to_text+0x3a0>
					sum += IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1));
    15cc:	18cb883a 	add	r5,r3,r3
    15d0:	288b883a 	add	r5,r5,r2
    15d4:	a14b883a 	add	r5,r20,r5
    15d8:	2940002b 	ldhuio	r5,0(r5)
    15dc:	297fffcc 	andi	r5,r5,65535
    15e0:	2149883a 	add	r4,r4,r5
    15e4:	18c00044 	addi	r3,r3,1
    15e8:	003ff706 	br	15c8 <__ram_exceptions_end+0xfdfff5a8>
	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
			sum = 0;
			src_ptr = (x + line) << 1;
			for (yy=0; yy<step; yy++)
    15ec:	39c00044 	addi	r7,r7,1
    15f0:	340d883a 	add	r6,r6,r16
    15f4:	003ff106 	br	15bc <__ram_exceptions_end+0xfdfff59c>
				for (xx=0; xx<step; xx++)
					sum += IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1));
			sum = (sum / (step * step));
			sum = (sum * 92) / 255;		// scale grey count
    15f8:	980b883a 	mov	r5,r19
    15fc:	0004d000 	call	4d00 <__udivsi3>
    1600:	01401704 	movi	r5,92
    1604:	1009883a 	mov	r4,r2
    1608:	0004dbc0 	call	4dbc <__mulsi3>
			printf("%c", char_grey[sum]);
    160c:	01403fc4 	movi	r5,255
    1610:	1009883a 	mov	r4,r2
    1614:	0004d000 	call	4d00 <__udivsi3>
    1618:	d885883a 	add	r2,sp,r2
    161c:	11400003 	ldbu	r5,0(r2)
    1620:	01000074 	movhi	r4,1
    1624:	21247404 	addi	r4,r4,-28208
    1628:	00033500 	call	3350 <printf_>
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
		line = (y * res);
		for (x=0; x<res; x+=step) {
    162c:	acab883a 	add	r21,r21,r18
    1630:	003fdb06 	br	15a0 <__ram_exceptions_end+0xfdfff580>
					sum += IORD_16DIRECT(src, src_ptr + ((xx + (yy * res)) << 1));
			sum = (sum / (step * step));
			sum = (sum * 92) / 255;		// scale grey count
			printf("%c", char_grey[sum]);
		}
		printf("\n");
    1634:	01000074 	movhi	r4,1
    1638:	21247304 	addi	r4,r4,-28212
    163c:	00033500 	call	3350 <printf_>
			47,99,76,92,122,114,115,55,84,105,118,74,116,67,123,51,70,41,73,108,
			40,120,90,102,89,53,83,50,101,97,106,111,49,52,91,110,117,121,69,93,
			80,54,86,57,107,88,112,75,119,71,104,113,65,85,98,79,100,56,35,72,
			82,68,66,48,36,109,103,77,87,38,81,37,78,64};

	for (y=0; y<res; y+=step) {
    1640:	8ca3883a 	add	r17,r17,r18
    1644:	003fcf06 	br	1584 <__ram_exceptions_end+0xfdfff564>
			sum = (sum * 92) / 255;		// scale grey count
			printf("%c", char_grey[sum]);
		}
		printf("\n");
	}
}
    1648:	dfc01f17 	ldw	ra,124(sp)
    164c:	ddc01e17 	ldw	r23,120(sp)
    1650:	dd801d17 	ldw	r22,116(sp)
    1654:	dd401c17 	ldw	r21,112(sp)
    1658:	dd001b17 	ldw	r20,108(sp)
    165c:	dcc01a17 	ldw	r19,104(sp)
    1660:	dc801917 	ldw	r18,100(sp)
    1664:	dc401817 	ldw	r17,96(sp)
    1668:	dc001717 	ldw	r16,92(sp)
    166c:	dec02004 	addi	sp,sp,128
    1670:	f800283a 	ret

00001674 <main>:

//////////////////////////////////////////////////////////////////////////////
int main()
{
    1674:	023fff34 	movhi	r8,65532
    1678:	defff704 	addi	sp,sp,-36
    167c:	42144f04 	addi	r8,r8,20796
	bfloat16 L1[3][64*64];
	bfloat16 L2[16][64*64], L2K[16][3][3*3];
	bfloat16 L3[10][64*64], L3K[10][16][3*3];
	bfloat16 R[10];

	printf("Starting Inference\n");
    1680:	01000074 	movhi	r4,1
	}
}

//////////////////////////////////////////////////////////////////////////////
int main()
{
    1684:	dfc00815 	stw	ra,32(sp)
    1688:	ddc00715 	stw	r23,28(sp)
    168c:	dd800615 	stw	r22,24(sp)
    1690:	dc400115 	stw	r17,4(sp)
    1694:	dc000015 	stw	r16,0(sp)
    1698:	dd400515 	stw	r21,20(sp)
    169c:	dd000415 	stw	r20,16(sp)
    16a0:	dcc00315 	stw	r19,12(sp)
    16a4:	dc800215 	stw	r18,8(sp)
	bfloat16 L1[3][64*64];
	bfloat16 L2[16][64*64], L2K[16][3][3*3];
	bfloat16 L3[10][64*64], L3K[10][16][3*3];
	bfloat16 R[10];

	printf("Starting Inference\n");
    16a8:	21247504 	addi	r4,r4,-28204
	}
}

//////////////////////////////////////////////////////////////////////////////
int main()
{
    16ac:	da37883a 	add	sp,sp,r8
	bfloat16 L1[3][64*64];
	bfloat16 L2[16][64*64], L2K[16][3][3*3];
	bfloat16 L3[10][64*64], L3K[10][16][3*3];
	bfloat16 R[10];

	printf("Starting Inference\n");
    16b0:	00033500 	call	3350 <printf_>

	rgb565_to_feature(image64by64, L1[0], L1[1], L1[2], 64);
    16b4:	008000f4 	movhi	r2,3
    16b8:	10900404 	addi	r2,r2,16400
    16bc:	16c5883a 	add	r2,r2,sp
    16c0:	04001004 	movi	r16,64
    16c4:	01000074 	movhi	r4,1
    16c8:	dc000015 	stw	r16,0(sp)
    16cc:	11d00004 	addi	r7,r2,16384
    16d0:	11880004 	addi	r6,r2,8192
    16d4:	100b883a 	mov	r5,r2
    16d8:	2124dc04 	addi	r4,r4,-27792
    16dc:	0000b600 	call	b60 <rgb565_to_feature>
    16e0:	0023883a 	mov	r17,zero

	for (i=0; i<16; i++) {
		for (j=0; j<3; j++) {
			convolution(&L1[j][0], (j == 0), &L2[i][0], &L2K[i][j][0], 3, 64, 1, 1);
    16e4:	05800044 	movi	r22,1
    16e8:	802f883a 	mov	r23,r16
    16ec:	8804937a 	slli	r2,r17,13
    16f0:	d8c00404 	addi	r3,sp,16
    16f4:	01400d84 	movi	r5,54
    16f8:	8809883a 	mov	r4,r17
    16fc:	18a5883a 	add	r18,r3,r2
    1700:	0004dbc0 	call	4dbc <__mulsi3>
    1704:	1029883a 	mov	r20,r2
	}
}

//////////////////////////////////////////////////////////////////////////////
int main()
{
    1708:	0021883a 	mov	r16,zero

	rgb565_to_feature(image64by64, L1[0], L1[1], L1[2], 64);

	for (i=0; i<16; i++) {
		for (j=0; j<3; j++) {
			convolution(&L1[j][0], (j == 0), &L2[i][0], &L2K[i][j][0], 3, 64, 1, 1);
    170c:	04c000c4 	movi	r19,3
    1710:	8009883a 	mov	r4,r16
    1714:	01400484 	movi	r5,18
    1718:	0004dbc0 	call	4dbc <__mulsi3>
    171c:	00c00134 	movhi	r3,4
    1720:	18ead404 	addi	r3,r3,-21680
    1724:	1505883a 	add	r2,r2,r20
    1728:	1ec7883a 	add	r3,r3,sp
    172c:	8008937a 	slli	r4,r16,13
    1730:	188f883a 	add	r7,r3,r2
    1734:	008000f4 	movhi	r2,3
    1738:	10900404 	addi	r2,r2,16400
    173c:	817fffcc 	andi	r5,r16,65535
    1740:	16c5883a 	add	r2,r2,sp
    1744:	dd800315 	stw	r22,12(sp)
    1748:	dd800215 	stw	r22,8(sp)
    174c:	ddc00115 	stw	r23,4(sp)
    1750:	dcc00015 	stw	r19,0(sp)
    1754:	900d883a 	mov	r6,r18
    1758:	280b003a 	cmpeq	r5,r5,zero
    175c:	1109883a 	add	r4,r2,r4
    1760:	84000044 	addi	r16,r16,1
    1764:	00004700 	call	470 <convolution>
	printf("Starting Inference\n");

	rgb565_to_feature(image64by64, L1[0], L1[1], L1[2], 64);

	for (i=0; i<16; i++) {
		for (j=0; j<3; j++) {
    1768:	84ffe91e 	bne	r16,r19,1710 <__ram_exceptions_end+0xfdfff6f0>
			convolution(&L1[j][0], (j == 0), &L2[i][0], &L2K[i][j][0], 3, 64, 1, 1);
		}
		relu(L2[i], 64);
    176c:	01401004 	movi	r5,64
    1770:	9009883a 	mov	r4,r18
    1774:	00002780 	call	278 <relu>
    1778:	8c400044 	addi	r17,r17,1

	printf("Starting Inference\n");

	rgb565_to_feature(image64by64, L1[0], L1[1], L1[2], 64);

	for (i=0; i<16; i++) {
    177c:	00800404 	movi	r2,16
    1780:	88bfda1e 	bne	r17,r2,16ec <__ram_exceptions_end+0xfdfff6cc>
    1784:	0023883a 	mov	r17,zero
		}
		relu(L2[i], 64);
	}
	for (i=0; i<10; i++) {
		for (j=0; j<16; j++) {
			convolution(&L2[j][0], (j == 0), &L3[i][0], &L3K[i][j][0], 3, 64, 1, 1);
    1788:	05801004 	movi	r22,64
    178c:	8824937a 	slli	r18,r17,13
    1790:	00c000b4 	movhi	r3,2
    1794:	18c00404 	addi	r3,r3,16
    1798:	1ec7883a 	add	r3,r3,sp
    179c:	01404804 	movi	r5,288
    17a0:	8809883a 	mov	r4,r17
    17a4:	1ca5883a 	add	r18,r3,r18
    17a8:	0004dbc0 	call	4dbc <__mulsi3>
    17ac:	102b883a 	mov	r21,r2
	bfloat16 L3[10][64*64], L3K[10][16][3*3];
	bfloat16 R[10];

	printf("Starting Inference\n");

	rgb565_to_feature(image64by64, L1[0], L1[1], L1[2], 64);
    17b0:	0021883a 	mov	r16,zero
		}
		relu(L2[i], 64);
	}
	for (i=0; i<10; i++) {
		for (j=0; j<16; j++) {
			convolution(&L2[j][0], (j == 0), &L3[i][0], &L3K[i][j][0], 3, 64, 1, 1);
    17b4:	04c00044 	movi	r19,1
    17b8:	050000c4 	movi	r20,3
    17bc:	8009883a 	mov	r4,r16
    17c0:	01400484 	movi	r5,18
    17c4:	0004dbc0 	call	4dbc <__mulsi3>
    17c8:	00c00134 	movhi	r3,4
    17cc:	8008937a 	slli	r4,r16,13
    17d0:	18e80404 	addi	r3,r3,-24560
    17d4:	1545883a 	add	r2,r2,r21
    17d8:	1ec7883a 	add	r3,r3,sp
    17dc:	817fffcc 	andi	r5,r16,65535
    17e0:	188f883a 	add	r7,r3,r2
    17e4:	d8800404 	addi	r2,sp,16
    17e8:	1109883a 	add	r4,r2,r4
    17ec:	dcc00315 	stw	r19,12(sp)
    17f0:	dcc00215 	stw	r19,8(sp)
    17f4:	dd800115 	stw	r22,4(sp)
    17f8:	dd000015 	stw	r20,0(sp)
    17fc:	900d883a 	mov	r6,r18
    1800:	280b003a 	cmpeq	r5,r5,zero
    1804:	00004700 	call	470 <convolution>
    1808:	84000044 	addi	r16,r16,1
			convolution(&L1[j][0], (j == 0), &L2[i][0], &L2K[i][j][0], 3, 64, 1, 1);
		}
		relu(L2[i], 64);
	}
	for (i=0; i<10; i++) {
		for (j=0; j<16; j++) {
    180c:	00800404 	movi	r2,16
    1810:	80bfea1e 	bne	r16,r2,17bc <__ram_exceptions_end+0xfdfff79c>
			convolution(&L2[j][0], (j == 0), &L3[i][0], &L3K[i][j][0], 3, 64, 1, 1);
		}
		relu(L3[i], 64);
    1814:	01401004 	movi	r5,64
    1818:	9009883a 	mov	r4,r18
    181c:	00002780 	call	278 <relu>
    1820:	8c400044 	addi	r17,r17,1
		for (j=0; j<3; j++) {
			convolution(&L1[j][0], (j == 0), &L2[i][0], &L2K[i][j][0], 3, 64, 1, 1);
		}
		relu(L2[i], 64);
	}
	for (i=0; i<10; i++) {
    1824:	00800284 	movi	r2,10
    1828:	88bfd81e 	bne	r17,r2,178c <__ram_exceptions_end+0xfdfff76c>
    182c:	0021883a 	mov	r16,zero
		for (j=0; j<16; j++) {
			convolution(&L2[j][0], (j == 0), &L3[i][0], &L3K[i][j][0], 3, 64, 1, 1);
		}
		relu(L3[i], 64);
	}
	for (i=0; i<10; i++) {
    1830:	04400504 	movi	r17,20
		R[i] = global_average_pooling(L3[i], 64);
    1834:	8008933a 	slli	r4,r16,12
    1838:	008000b4 	movhi	r2,2
    183c:	10800404 	addi	r2,r2,16
    1840:	16c5883a 	add	r2,r2,sp
    1844:	1109883a 	add	r4,r2,r4
    1848:	01401004 	movi	r5,64
    184c:	00008080 	call	808 <global_average_pooling>
    1850:	01000134 	movhi	r4,4
    1854:	212bac04 	addi	r4,r4,-20816
    1858:	26c9883a 	add	r4,r4,sp
    185c:	2407883a 	add	r3,r4,r16
    1860:	1880000d 	sth	r2,0(r3)
    1864:	84000084 	addi	r16,r16,2
		for (j=0; j<16; j++) {
			convolution(&L2[j][0], (j == 0), &L3[i][0], &L3K[i][j][0], 3, 64, 1, 1);
		}
		relu(L3[i], 64);
	}
	for (i=0; i<10; i++) {
    1868:	847ff21e 	bne	r16,r17,1834 <__ram_exceptions_end+0xfdfff814>
		R[i] = global_average_pooling(L3[i], 64);
	}
	softmax(R, 10);
    186c:	01000134 	movhi	r4,4
    1870:	212bac04 	addi	r4,r4,-20816
    1874:	01400284 	movi	r5,10
    1878:	26c9883a 	add	r4,r4,sp
    187c:	00008980 	call	898 <softmax>

	printf("Results :\n");
    1880:	01000074 	movhi	r4,1
    1884:	21247a04 	addi	r4,r4,-28184
    1888:	00033500 	call	3350 <printf_>
    188c:	0021883a 	mov	r16,zero
	for (i=0; i<10; i++) {
    1890:	04400504 	movi	r17,20
		printf("%f ", bf2f(R[i]));
    1894:	00c00134 	movhi	r3,4
    1898:	18ebac04 	addi	r3,r3,-20816
    189c:	1ec7883a 	add	r3,r3,sp
    18a0:	1c05883a 	add	r2,r3,r16
}

//////////////////////////////////////////////////////////////////////////////
float bf2f(bfloat16 x) { // bfloat to float
     union IntFloat f;
     f.i = ((alt_u32)x << 16);
    18a4:	1100000b 	ldhu	r4,0(r2)
    18a8:	84000084 	addi	r16,r16,2
	}
	softmax(R, 10);

	printf("Results :\n");
	for (i=0; i<10; i++) {
		printf("%f ", bf2f(R[i]));
    18ac:	2008943a 	slli	r4,r4,16
    18b0:	0008cc00 	call	8cc0 <__extendsfdf2>
    18b4:	01000074 	movhi	r4,1
    18b8:	100b883a 	mov	r5,r2
    18bc:	180d883a 	mov	r6,r3
    18c0:	21247d04 	addi	r4,r4,-28172
    18c4:	00033500 	call	3350 <printf_>
		R[i] = global_average_pooling(L3[i], 64);
	}
	softmax(R, 10);

	printf("Results :\n");
	for (i=0; i<10; i++) {
    18c8:	847ff21e 	bne	r16,r17,1894 <__ram_exceptions_end+0xfdfff874>
		printf("%f ", bf2f(R[i]));
	}
	return 0;
}
    18cc:	0005883a 	mov	r2,zero
    18d0:	02000134 	movhi	r8,4
    18d4:	422bb104 	addi	r8,r8,-20796
    18d8:	da37883a 	add	sp,sp,r8
    18dc:	dfc00817 	ldw	ra,32(sp)
    18e0:	ddc00717 	ldw	r23,28(sp)
    18e4:	dd800617 	ldw	r22,24(sp)
    18e8:	dd400517 	ldw	r21,20(sp)
    18ec:	dd000417 	ldw	r20,16(sp)
    18f0:	dcc00317 	ldw	r19,12(sp)
    18f4:	dc800217 	ldw	r18,8(sp)
    18f8:	dc400117 	ldw	r17,4(sp)
    18fc:	dc000017 	ldw	r16,0(sp)
    1900:	dec00904 	addi	sp,sp,36
    1904:	f800283a 	ret

00001908 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
    1908:	31c0022e 	bgeu	r6,r7,1914 <_out_buffer+0xc>
    ((char*)buffer)[idx] = character;
    190c:	298d883a 	add	r6,r5,r6
    1910:	31000005 	stb	r4,0(r6)
    1914:	f800283a 	ret

00001918 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    1918:	f800283a 	ret

0000191c <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
    191c:	defff604 	addi	sp,sp,-40
    1920:	dc800215 	stw	r18,8(sp)
    1924:	dc800d17 	ldw	r18,52(sp)
    1928:	dd800615 	stw	r22,24(sp)
    192c:	dd400515 	stw	r21,20(sp)
    1930:	dd000415 	stw	r20,16(sp)
    1934:	dcc00315 	stw	r19,12(sp)
    1938:	dc400115 	stw	r17,4(sp)
    193c:	dc000015 	stw	r16,0(sp)
    1940:	dfc00915 	stw	ra,36(sp)
    1944:	df000815 	stw	fp,32(sp)
    1948:	ddc00715 	stw	r23,28(sp)
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    194c:	908000cc 	andi	r2,r18,3
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
    1950:	2027883a 	mov	r19,r4
    1954:	2829883a 	mov	r20,r5
    1958:	3023883a 	mov	r17,r6
    195c:	382b883a 	mov	r21,r7
    1960:	dc000b17 	ldw	r16,44(sp)
    1964:	dd800c17 	ldw	r22,48(sp)
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    1968:	1000021e 	bne	r2,zero,1974 <_out_rev+0x58>
    196c:	81afc83a 	sub	r23,r16,r6
    1970:	00000406 	br	1984 <_out_rev+0x68>
    1974:	ddc00a17 	ldw	r23,40(sp)
    1978:	bc2f883a 	add	r23,r23,r16
    197c:	81a1883a 	add	r16,r16,r6
    1980:	00000906 	br	19a8 <_out_rev+0x8c>
    for (size_t i = len; i < width; i++) {
    1984:	35c5883a 	add	r2,r6,r23
    1988:	15bffa2e 	bgeu	r2,r22,1974 <__ram_exceptions_end+0xfdfff954>
      out(' ', buffer, idx++, maxlen);
    198c:	a80f883a 	mov	r7,r21
    1990:	a00b883a 	mov	r5,r20
    1994:	01000804 	movi	r4,32
    1998:	37000044 	addi	fp,r6,1
    199c:	983ee83a 	callr	r19
    19a0:	e00d883a 	mov	r6,fp
    19a4:	003ff706 	br	1984 <__ram_exceptions_end+0xfdfff964>
    19a8:	bdffffc4 	addi	r23,r23,-1
    }
  }

  // reverse string
  while (len) {
    19ac:	34000726 	beq	r6,r16,19cc <_out_rev+0xb0>
    out(buf[--len], buffer, idx++, maxlen);
    19b0:	b9000007 	ldb	r4,0(r23)
    19b4:	a80f883a 	mov	r7,r21
    19b8:	a00b883a 	mov	r5,r20
    19bc:	37000044 	addi	fp,r6,1
    19c0:	983ee83a 	callr	r19
    19c4:	e00d883a 	mov	r6,fp
    19c8:	003ff706 	br	19a8 <__ram_exceptions_end+0xfdfff988>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    19cc:	9480008c 	andi	r18,r18,2
    19d0:	90000a26 	beq	r18,zero,19fc <_out_rev+0xe0>
    while (idx - start_idx < width) {
    19d4:	8445c83a 	sub	r2,r16,r17
    19d8:	1580082e 	bgeu	r2,r22,19fc <_out_rev+0xe0>
      out(' ', buffer, idx++, maxlen);
    19dc:	800d883a 	mov	r6,r16
    19e0:	84800044 	addi	r18,r16,1
    19e4:	a80f883a 	mov	r7,r21
    19e8:	a00b883a 	mov	r5,r20
    19ec:	01000804 	movi	r4,32
    19f0:	983ee83a 	callr	r19
    19f4:	9021883a 	mov	r16,r18
    19f8:	003ff606 	br	19d4 <__ram_exceptions_end+0xfdfff9b4>
    }
  }

  return idx;
}
    19fc:	8005883a 	mov	r2,r16
    1a00:	dfc00917 	ldw	ra,36(sp)
    1a04:	df000817 	ldw	fp,32(sp)
    1a08:	ddc00717 	ldw	r23,28(sp)
    1a0c:	dd800617 	ldw	r22,24(sp)
    1a10:	dd400517 	ldw	r21,20(sp)
    1a14:	dd000417 	ldw	r20,16(sp)
    1a18:	dcc00317 	ldw	r19,12(sp)
    1a1c:	dc800217 	ldw	r18,8(sp)
    1a20:	dc400117 	ldw	r17,4(sp)
    1a24:	dc000017 	ldw	r16,0(sp)
    1a28:	dec00a04 	addi	sp,sp,40
    1a2c:	f800283a 	ret

00001a30 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1a30:	deffff04 	addi	sp,sp,-4
    1a34:	da000717 	ldw	r8,28(sp)
    1a38:	dfc00015 	stw	ra,0(sp)
    1a3c:	d8c00117 	ldw	r3,4(sp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    1a40:	4300008c 	andi	r12,r8,2
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1a44:	d8800217 	ldw	r2,8(sp)
    1a48:	da800317 	ldw	r10,12(sp)
    1a4c:	dac00417 	ldw	r11,16(sp)
    1a50:	db800517 	ldw	r14,20(sp)
    1a54:	da400617 	ldw	r9,24(sp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    1a58:	60001a1e 	bne	r12,zero,1ac4 <_ntoa_format+0x94>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    1a5c:	48000726 	beq	r9,zero,1a7c <_ntoa_format+0x4c>
    1a60:	4300004c 	andi	r12,r8,1
    1a64:	60000526 	beq	r12,zero,1a7c <_ntoa_format+0x4c>
    1a68:	53003fcc 	andi	r12,r10,255
    1a6c:	6000021e 	bne	r12,zero,1a78 <_ntoa_format+0x48>
    1a70:	4300030c 	andi	r12,r8,12
    1a74:	60000126 	beq	r12,zero,1a7c <_ntoa_format+0x4c>
      width--;
    1a78:	4a7fffc4 	addi	r9,r9,-1
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1a7c:	030007c4 	movi	r12,31
      buf[len++] = '0';
    1a80:	03400c04 	movi	r13,48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1a84:	13800436 	bltu	r2,r14,1a98 <_ntoa_format+0x68>
      buf[len++] = '0';
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1a88:	4340004c 	andi	r13,r8,1
    1a8c:	030007c4 	movi	r12,31
      buf[len++] = '0';
    1a90:	03c00c04 	movi	r15,48
    1a94:	00000a06 	br	1ac0 <_ntoa_format+0x90>
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1a98:	60bffb36 	bltu	r12,r2,1a88 <__ram_exceptions_end+0xfdfffa68>
      buf[len++] = '0';
    1a9c:	189f883a 	add	r15,r3,r2
    1aa0:	7b400005 	stb	r13,0(r15)
    1aa4:	10800044 	addi	r2,r2,1
    1aa8:	003ff606 	br	1a84 <__ram_exceptions_end+0xfdfffa64>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1aac:	1240052e 	bgeu	r2,r9,1ac4 <_ntoa_format+0x94>
    1ab0:	60800436 	bltu	r12,r2,1ac4 <_ntoa_format+0x94>
      buf[len++] = '0';
    1ab4:	18bf883a 	add	ra,r3,r2
    1ab8:	fbc00005 	stb	r15,0(ra)
    1abc:	10800044 	addi	r2,r2,1
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1ac0:	683ffa1e 	bne	r13,zero,1aac <__ram_exceptions_end+0xfdfffa8c>
      buf[len++] = '0';
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    1ac4:	4300040c 	andi	r12,r8,16
    1ac8:	60002726 	beq	r12,zero,1b68 <_ntoa_format+0x138>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    1acc:	4301000c 	andi	r12,r8,1024
    1ad0:	03400404 	movi	r13,16
    1ad4:	6000091e 	bne	r12,zero,1afc <_ntoa_format+0xcc>
    1ad8:	10000826 	beq	r2,zero,1afc <_ntoa_format+0xcc>
    1adc:	13800126 	beq	r2,r14,1ae4 <_ntoa_format+0xb4>
    1ae0:	1240061e 	bne	r2,r9,1afc <_ntoa_format+0xcc>
      len--;
    1ae4:	133fffc4 	addi	r12,r2,-1
      if (len && (base == 16U)) {
    1ae8:	60000326 	beq	r12,zero,1af8 <_ntoa_format+0xc8>
    1aec:	5b400f1e 	bne	r11,r13,1b2c <_ntoa_format+0xfc>
        len--;
    1af0:	10bfff84 	addi	r2,r2,-2
    1af4:	00000206 	br	1b00 <_ntoa_format+0xd0>
    1af8:	0005883a 	mov	r2,zero
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1afc:	5b400c1e 	bne	r11,r13,1b30 <_ntoa_format+0x100>
    1b00:	42c0080c 	andi	r11,r8,32
    1b04:	030007c4 	movi	r12,31
    1b08:	5800041e 	bne	r11,zero,1b1c <_ntoa_format+0xec>
    1b0c:	60802836 	bltu	r12,r2,1bb0 <_ntoa_format+0x180>
      buf[len++] = 'x';
    1b10:	1897883a 	add	r11,r3,r2
    1b14:	03001e04 	movi	r12,120
    1b18:	00000b06 	br	1b48 <_ntoa_format+0x118>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1b1c:	60802436 	bltu	r12,r2,1bb0 <_ntoa_format+0x180>
      buf[len++] = 'X';
    1b20:	1897883a 	add	r11,r3,r2
    1b24:	03001604 	movi	r12,88
    1b28:	00000706 	br	1b48 <_ntoa_format+0x118>
    1b2c:	6005883a 	mov	r2,r12
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1b30:	03000084 	movi	r12,2
    1b34:	5b00061e 	bne	r11,r12,1b50 <_ntoa_format+0x120>
    1b38:	02c007c4 	movi	r11,31
    1b3c:	58801c36 	bltu	r11,r2,1bb0 <_ntoa_format+0x180>
      buf[len++] = 'b';
    1b40:	1897883a 	add	r11,r3,r2
    1b44:	03001884 	movi	r12,98
    1b48:	5b000005 	stb	r12,0(r11)
    1b4c:	10800044 	addi	r2,r2,1
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    1b50:	02c007c4 	movi	r11,31
    1b54:	58801636 	bltu	r11,r2,1bb0 <_ntoa_format+0x180>
      buf[len++] = '0';
    1b58:	1897883a 	add	r11,r3,r2
    1b5c:	03000c04 	movi	r12,48
    1b60:	5b000005 	stb	r12,0(r11)
    1b64:	10800044 	addi	r2,r2,1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    1b68:	02c007c4 	movi	r11,31
    1b6c:	58801036 	bltu	r11,r2,1bb0 <_ntoa_format+0x180>
    if (negative) {
    1b70:	52803fcc 	andi	r10,r10,255
    1b74:	50000326 	beq	r10,zero,1b84 <_ntoa_format+0x154>
      buf[len++] = '-';
    1b78:	1895883a 	add	r10,r3,r2
    1b7c:	02c00b44 	movi	r11,45
    1b80:	00000906 	br	1ba8 <_ntoa_format+0x178>
    }
    else if (flags & FLAGS_PLUS) {
    1b84:	4280010c 	andi	r10,r8,4
    1b88:	50000326 	beq	r10,zero,1b98 <_ntoa_format+0x168>
      buf[len++] = '+';  // ignore the space if the '+' exists
    1b8c:	1895883a 	add	r10,r3,r2
    1b90:	02c00ac4 	movi	r11,43
    1b94:	00000406 	br	1ba8 <_ntoa_format+0x178>
    }
    else if (flags & FLAGS_SPACE) {
    1b98:	4280020c 	andi	r10,r8,8
    1b9c:	50000426 	beq	r10,zero,1bb0 <_ntoa_format+0x180>
      buf[len++] = ' ';
    1ba0:	1895883a 	add	r10,r3,r2
    1ba4:	02c00804 	movi	r11,32
    1ba8:	52c00005 	stb	r11,0(r10)
    1bac:	10800044 	addi	r2,r2,1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    1bb0:	da000415 	stw	r8,16(sp)
    1bb4:	da400315 	stw	r9,12(sp)
    1bb8:	d8800215 	stw	r2,8(sp)
    1bbc:	d8c00115 	stw	r3,4(sp)
}
    1bc0:	dfc00017 	ldw	ra,0(sp)
    1bc4:	dec00104 	addi	sp,sp,4
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    1bc8:	000191c1 	jmpi	191c <_out_rev>

00001bcc <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1bcc:	deffe404 	addi	sp,sp,-112
    1bd0:	d8c01d17 	ldw	r3,116(sp)
    1bd4:	dc001215 	stw	r16,72(sp)
    1bd8:	dc001c17 	ldw	r16,112(sp)
    1bdc:	dd801815 	stw	r22,96(sp)
    1be0:	dd401715 	stw	r21,92(sp)
    1be4:	dd001615 	stw	r20,88(sp)
    1be8:	dcc01515 	stw	r19,84(sp)
    1bec:	dc801415 	stw	r18,80(sp)
    1bf0:	dfc01b15 	stw	ra,108(sp)
    1bf4:	df001a15 	stw	fp,104(sp)
    1bf8:	ddc01915 	stw	r23,100(sp)
    1bfc:	dc401315 	stw	r17,76(sp)
    1c00:	d8c00f15 	stw	r3,60(sp)
    1c04:	2029883a 	mov	r20,r4
    1c08:	282b883a 	mov	r21,r5
    1c0c:	302d883a 	mov	r22,r6
    1c10:	dcc01e17 	ldw	r19,120(sp)
    1c14:	dc802117 	ldw	r18,132(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
    1c18:	8000021e 	bne	r16,zero,1c24 <_ntoa_long+0x58>
    flags &= ~FLAGS_HASH;
    1c1c:	00bffbc4 	movi	r2,-17
    1c20:	90a4703a 	and	r18,r18,r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    1c24:	9081000c 	andi	r2,r18,1024
    1c28:	10000126 	beq	r2,zero,1c30 <_ntoa_long+0x64>
    1c2c:	80002726 	beq	r16,zero,1ccc <_ntoa_long+0x100>
    1c30:	9080080c 	andi	r2,r18,32
    1c34:	10000226 	beq	r2,zero,1c40 <_ntoa_long+0x74>
    1c38:	04401044 	movi	r17,65
    1c3c:	00000106 	br	1c44 <_ntoa_long+0x78>
    1c40:	04401844 	movi	r17,97
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    1c44:	000d883a 	mov	r6,zero
    1c48:	07000244 	movi	fp,9
    1c4c:	8c7ffd84 	addi	r17,r17,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1c50:	05c00804 	movi	r23,32
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
    1c54:	8009883a 	mov	r4,r16
    1c58:	980b883a 	mov	r5,r19
    1c5c:	d9801015 	stw	r6,64(sp)
    1c60:	d9c01115 	stw	r7,68(sp)
    1c64:	0004d640 	call	4d64 <__umodsi3>
    1c68:	d9801017 	ldw	r6,64(sp)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    1c6c:	11003fcc 	andi	r4,r2,255
    1c70:	2100201c 	xori	r4,r4,128
    1c74:	213fe004 	addi	r4,r4,-128
    1c78:	32000044 	addi	r8,r6,1
    1c7c:	d9c01117 	ldw	r7,68(sp)
    1c80:	e1000216 	blt	fp,r4,1c8c <_ntoa_long+0xc0>
    1c84:	10800c04 	addi	r2,r2,48
    1c88:	00000106 	br	1c90 <_ntoa_long+0xc4>
    1c8c:	8885883a 	add	r2,r17,r2
    1c90:	d8c00704 	addi	r3,sp,28
    1c94:	198d883a 	add	r6,r3,r6
    1c98:	30800005 	stb	r2,0(r6)
      value /= base;
    1c9c:	8009883a 	mov	r4,r16
    1ca0:	980b883a 	mov	r5,r19
    1ca4:	d9c01115 	stw	r7,68(sp)
    1ca8:	da001015 	stw	r8,64(sp)
    1cac:	0004d000 	call	4d00 <__udivsi3>
    1cb0:	1021883a 	mov	r16,r2
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1cb4:	d9c01117 	ldw	r7,68(sp)
    1cb8:	da001017 	ldw	r8,64(sp)
    1cbc:	10000426 	beq	r2,zero,1cd0 <_ntoa_long+0x104>
    1cc0:	400d883a 	mov	r6,r8
    1cc4:	45ffe31e 	bne	r8,r23,1c54 <__ram_exceptions_end+0xfdfffc34>
    1cc8:	00000106 	br	1cd0 <_ntoa_long+0x104>

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    1ccc:	0011883a 	mov	r8,zero
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    1cd0:	d8802017 	ldw	r2,128(sp)
    1cd4:	d8c00f17 	ldw	r3,60(sp)
    1cd8:	dc800615 	stw	r18,24(sp)
    1cdc:	d8800515 	stw	r2,20(sp)
    1ce0:	d8801f17 	ldw	r2,124(sp)
    1ce4:	1c803fcc 	andi	r18,r3,255
    1ce8:	dcc00315 	stw	r19,12(sp)
    1cec:	d8800415 	stw	r2,16(sp)
    1cf0:	d8800704 	addi	r2,sp,28
    1cf4:	dc800215 	stw	r18,8(sp)
    1cf8:	da000115 	stw	r8,4(sp)
    1cfc:	d8800015 	stw	r2,0(sp)
    1d00:	b00d883a 	mov	r6,r22
    1d04:	a80b883a 	mov	r5,r21
    1d08:	a009883a 	mov	r4,r20
    1d0c:	0001a300 	call	1a30 <_ntoa_format>
}
    1d10:	dfc01b17 	ldw	ra,108(sp)
    1d14:	df001a17 	ldw	fp,104(sp)
    1d18:	ddc01917 	ldw	r23,100(sp)
    1d1c:	dd801817 	ldw	r22,96(sp)
    1d20:	dd401717 	ldw	r21,92(sp)
    1d24:	dd001617 	ldw	r20,88(sp)
    1d28:	dcc01517 	ldw	r19,84(sp)
    1d2c:	dc801417 	ldw	r18,80(sp)
    1d30:	dc401317 	ldw	r17,76(sp)
    1d34:	dc001217 	ldw	r16,72(sp)
    1d38:	dec01c04 	addi	sp,sp,112
    1d3c:	f800283a 	ret

00001d40 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1d40:	deffe204 	addi	sp,sp,-120
    1d44:	d8802017 	ldw	r2,128(sp)
    1d48:	da801e17 	ldw	r10,120(sp)
    1d4c:	dac01f17 	ldw	r11,124(sp)
    1d50:	dd801a15 	stw	r22,104(sp)
    1d54:	dd401915 	stw	r21,100(sp)
    1d58:	dd001815 	stw	r20,96(sp)
    1d5c:	dcc01715 	stw	r19,92(sp)
    1d60:	dc801615 	stw	r18,88(sp)
    1d64:	dc401515 	stw	r17,84(sp)
    1d68:	d8801015 	stw	r2,64(sp)
    1d6c:	dfc01d15 	stw	ra,116(sp)
    1d70:	df001c15 	stw	fp,112(sp)
    1d74:	ddc01b15 	stw	r23,108(sp)
    1d78:	dc001415 	stw	r16,80(sp)
    1d7c:	d9000f15 	stw	r4,60(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
    1d80:	52c4b03a 	or	r2,r10,r11


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1d84:	2829883a 	mov	r20,r5
    1d88:	302b883a 	mov	r21,r6
    1d8c:	382d883a 	mov	r22,r7
    1d90:	dc402117 	ldw	r17,132(sp)
    1d94:	dc802217 	ldw	r18,136(sp)
    1d98:	dcc02517 	ldw	r19,148(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
    1d9c:	1000021e 	bne	r2,zero,1da8 <_ntoa_long_long+0x68>
    flags &= ~FLAGS_HASH;
    1da0:	00fffbc4 	movi	r3,-17
    1da4:	98e6703a 	and	r19,r19,r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    1da8:	98c1000c 	andi	r3,r19,1024
    1dac:	18000126 	beq	r3,zero,1db4 <_ntoa_long_long+0x74>
    1db0:	10002d26 	beq	r2,zero,1e68 <_ntoa_long_long+0x128>
    1db4:	9880080c 	andi	r2,r19,32
    1db8:	10000226 	beq	r2,zero,1dc4 <_ntoa_long_long+0x84>
    1dbc:	04001044 	movi	r16,65
    1dc0:	00000106 	br	1dc8 <_ntoa_long_long+0x88>
    1dc4:	04001844 	movi	r16,97
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    1dc8:	0013883a 	mov	r9,zero
    1dcc:	07000244 	movi	fp,9
    1dd0:	843ffd84 	addi	r16,r16,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1dd4:	05c00804 	movi	r23,32
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
    1dd8:	5009883a 	mov	r4,r10
    1ddc:	580b883a 	mov	r5,r11
    1de0:	880d883a 	mov	r6,r17
    1de4:	900f883a 	mov	r7,r18
    1de8:	da401115 	stw	r9,68(sp)
    1dec:	da801215 	stw	r10,72(sp)
    1df0:	dac01315 	stw	r11,76(sp)
    1df4:	00046440 	call	4644 <__umoddi3>
    1df8:	da401117 	ldw	r9,68(sp)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    1dfc:	10c03fcc 	andi	r3,r2,255
    1e00:	18c0201c 	xori	r3,r3,128
    1e04:	18ffe004 	addi	r3,r3,-128
    1e08:	4b000044 	addi	r12,r9,1
    1e0c:	da801217 	ldw	r10,72(sp)
    1e10:	dac01317 	ldw	r11,76(sp)
    1e14:	e0c00216 	blt	fp,r3,1e20 <_ntoa_long_long+0xe0>
    1e18:	10800c04 	addi	r2,r2,48
    1e1c:	00000106 	br	1e24 <_ntoa_long_long+0xe4>
    1e20:	8085883a 	add	r2,r16,r2
    1e24:	d8c00704 	addi	r3,sp,28
    1e28:	1a53883a 	add	r9,r3,r9
    1e2c:	48800005 	stb	r2,0(r9)
      value /= base;
    1e30:	5009883a 	mov	r4,r10
    1e34:	580b883a 	mov	r5,r11
    1e38:	880d883a 	mov	r6,r17
    1e3c:	900f883a 	mov	r7,r18
    1e40:	db001115 	stw	r12,68(sp)
    1e44:	00040480 	call	4048 <__udivdi3>
    1e48:	1015883a 	mov	r10,r2
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1e4c:	10c4b03a 	or	r2,r2,r3
  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    1e50:	1817883a 	mov	r11,r3
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1e54:	db001117 	ldw	r12,68(sp)
    1e58:	10000426 	beq	r2,zero,1e6c <_ntoa_long_long+0x12c>
    1e5c:	6013883a 	mov	r9,r12
    1e60:	65ffdd1e 	bne	r12,r23,1dd8 <__ram_exceptions_end+0xfdfffdb8>
    1e64:	00000106 	br	1e6c <_ntoa_long_long+0x12c>
// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    1e68:	0019883a 	mov	r12,zero
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    1e6c:	d8802417 	ldw	r2,144(sp)
    1e70:	d9000f17 	ldw	r4,60(sp)
    1e74:	dc400315 	stw	r17,12(sp)
    1e78:	d8800515 	stw	r2,20(sp)
    1e7c:	d8802317 	ldw	r2,140(sp)
    1e80:	d8c00704 	addi	r3,sp,28
    1e84:	dcc00615 	stw	r19,24(sp)
    1e88:	d8800415 	stw	r2,16(sp)
    1e8c:	d8801017 	ldw	r2,64(sp)
    1e90:	db000115 	stw	r12,4(sp)
    1e94:	d8c00015 	stw	r3,0(sp)
    1e98:	14403fcc 	andi	r17,r2,255
    1e9c:	dc400215 	stw	r17,8(sp)
    1ea0:	b00f883a 	mov	r7,r22
    1ea4:	a80d883a 	mov	r6,r21
    1ea8:	a00b883a 	mov	r5,r20
    1eac:	0001a300 	call	1a30 <_ntoa_format>
}
    1eb0:	dfc01d17 	ldw	ra,116(sp)
    1eb4:	df001c17 	ldw	fp,112(sp)
    1eb8:	ddc01b17 	ldw	r23,108(sp)
    1ebc:	dd801a17 	ldw	r22,104(sp)
    1ec0:	dd401917 	ldw	r21,100(sp)
    1ec4:	dd001817 	ldw	r20,96(sp)
    1ec8:	dcc01717 	ldw	r19,92(sp)
    1ecc:	dc801617 	ldw	r18,88(sp)
    1ed0:	dc401517 	ldw	r17,84(sp)
    1ed4:	dc001417 	ldw	r16,80(sp)
    1ed8:	dec01e04 	addi	sp,sp,120
    1edc:	f800283a 	ret

00001ee0 <_out_char>:

// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
    1ee0:	21003fcc 	andi	r4,r4,255
    1ee4:	2100201c 	xori	r4,r4,128
    1ee8:	213fe004 	addi	r4,r4,-128
    1eec:	20000126 	beq	r4,zero,1ef4 <_out_char+0x14>
    _putchar(character);
    1ef0:	000003c1 	jmpi	3c <_putchar>
    1ef4:	f800283a 	ret

00001ef8 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)idx; (void)maxlen;
  if (character) {
    1ef8:	21003fcc 	andi	r4,r4,255
    1efc:	2100201c 	xori	r4,r4,128
    1f00:	213fe004 	addi	r4,r4,-128
    1f04:	20000326 	beq	r4,zero,1f14 <_out_fct+0x1c>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
    1f08:	28800017 	ldw	r2,0(r5)
    1f0c:	29400117 	ldw	r5,4(r5)
    1f10:	1000683a 	jmp	r2
    1f14:	f800283a 	ret

00001f18 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    1f18:	deffe104 	addi	sp,sp,-124
    1f1c:	dc401615 	stw	r17,88(sp)
    1f20:	dc001515 	stw	r16,84(sp)
    1f24:	dc401f17 	ldw	r17,124(sp)
    1f28:	dc002017 	ldw	r16,128(sp)
    1f2c:	df001d15 	stw	fp,116(sp)
    1f30:	d9000d15 	stw	r4,52(sp)
    1f34:	d9400e15 	stw	r5,56(sp)
    1f38:	d9800f15 	stw	r6,60(sp)
    1f3c:	3839883a 	mov	fp,r7

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
    1f40:	880d883a 	mov	r6,r17
    1f44:	800f883a 	mov	r7,r16
    1f48:	8809883a 	mov	r4,r17
    1f4c:	800b883a 	mov	r5,r16
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    1f50:	dd801b15 	stw	r22,108(sp)
    1f54:	dd001915 	stw	r20,100(sp)
    1f58:	dc801715 	stw	r18,92(sp)
    1f5c:	dfc01e15 	stw	ra,120(sp)
    1f60:	ddc01c15 	stw	r23,112(sp)
    1f64:	dd401a15 	stw	r21,104(sp)
    1f68:	dcc01815 	stw	r19,96(sp)
    1f6c:	dc802117 	ldw	r18,132(sp)
    1f70:	dd802217 	ldw	r22,136(sp)
    1f74:	dd002317 	ldw	r20,140(sp)

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
    1f78:	00076fc0 	call	76fc <__eqdf2>
    1f7c:	10000726 	beq	r2,zero,1f9c <_ftoa+0x84>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    1f80:	008000c4 	movi	r2,3
    1f84:	d8800115 	stw	r2,4(sp)
    1f88:	00800074 	movhi	r2,1
    1f8c:	dd000315 	stw	r20,12(sp)
    1f90:	dd800215 	stw	r22,8(sp)
    1f94:	10a48104 	addi	r2,r2,-28156
    1f98:	00002106 	br	2020 <_ftoa+0x108>
  if (value < -DBL_MAX)
    1f9c:	01bfffc4 	movi	r6,-1
    1fa0:	01fffc34 	movhi	r7,65520
    1fa4:	398f883a 	add	r7,r7,r6
    1fa8:	8809883a 	mov	r4,r17
    1fac:	800b883a 	mov	r5,r16
    1fb0:	00078600 	call	7860 <__ledf2>
    1fb4:	1000070e 	bge	r2,zero,1fd4 <_ftoa+0xbc>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    1fb8:	00800104 	movi	r2,4
    1fbc:	d8800115 	stw	r2,4(sp)
    1fc0:	00800074 	movhi	r2,1
    1fc4:	dd000315 	stw	r20,12(sp)
    1fc8:	dd800215 	stw	r22,8(sp)
    1fcc:	10a48204 	addi	r2,r2,-28152
    1fd0:	00001306 	br	2020 <_ftoa+0x108>
  if (value > DBL_MAX)
    1fd4:	01bfffc4 	movi	r6,-1
    1fd8:	01dffc34 	movhi	r7,32752
    1fdc:	398f883a 	add	r7,r7,r6
    1fe0:	8809883a 	mov	r4,r17
    1fe4:	800b883a 	mov	r5,r16
    1fe8:	00077840 	call	7784 <__gedf2>
    1fec:	00800e0e 	bge	zero,r2,2028 <_ftoa+0x110>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    1ff0:	a080010c 	andi	r2,r20,4
    1ff4:	10000426 	beq	r2,zero,2008 <_ftoa+0xf0>
    1ff8:	00800074 	movhi	r2,1
    1ffc:	10a47e04 	addi	r2,r2,-28168
    2000:	00c00104 	movi	r3,4
    2004:	00000306 	br	2014 <_ftoa+0xfc>
    2008:	00800074 	movhi	r2,1
    200c:	10a48004 	addi	r2,r2,-28160
    2010:	00c000c4 	movi	r3,3
    2014:	dd000315 	stw	r20,12(sp)
    2018:	dd800215 	stw	r22,8(sp)
    201c:	d8c00115 	stw	r3,4(sp)
    2020:	d8800015 	stw	r2,0(sp)
    2024:	0000f806 	br	2408 <_ftoa+0x4f0>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
    2028:	01d073b4 	movhi	r7,16846
    202c:	000d883a 	mov	r6,zero
    2030:	39f35944 	addi	r7,r7,-12955
    2034:	8809883a 	mov	r4,r17
    2038:	800b883a 	mov	r5,r16
    203c:	00077840 	call	7784 <__gedf2>
    2040:	00800716 	blt	zero,r2,2060 <_ftoa+0x148>
    2044:	01f073b4 	movhi	r7,49614
    2048:	000d883a 	mov	r6,zero
    204c:	39f35944 	addi	r7,r7,-12955
    2050:	8809883a 	mov	r4,r17
    2054:	800b883a 	mov	r5,r16
    2058:	00078600 	call	7860 <__ledf2>
    205c:	10000b0e 	bge	r2,zero,208c <_ftoa+0x174>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    2060:	d9800f17 	ldw	r6,60(sp)
    2064:	d9400e17 	ldw	r5,56(sp)
    2068:	d9000d17 	ldw	r4,52(sp)
    206c:	dd000415 	stw	r20,16(sp)
    2070:	dd800315 	stw	r22,12(sp)
    2074:	dc800215 	stw	r18,8(sp)
    2078:	dc400015 	stw	r17,0(sp)
    207c:	dc000115 	stw	r16,4(sp)
    2080:	e00f883a 	mov	r7,fp
    2084:	000244c0 	call	244c <_etoa>
    2088:	0000e406 	br	241c <_ftoa+0x504>
#endif
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
    208c:	000d883a 	mov	r6,zero
    2090:	000f883a 	mov	r7,zero
    2094:	8809883a 	mov	r4,r17
    2098:	800b883a 	mov	r5,r16
    209c:	00078600 	call	7860 <__ledf2>
    20a0:	10000a0e 	bge	r2,zero,20cc <_ftoa+0x1b4>
    negative = true;
    value = 0 - value;
    20a4:	880d883a 	mov	r6,r17
    20a8:	800f883a 	mov	r7,r16
    20ac:	0009883a 	mov	r4,zero
    20b0:	000b883a 	mov	r5,zero
    20b4:	00081c00 	call	81c0 <__subdf3>
    20b8:	1023883a 	mov	r17,r2
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
    negative = true;
    20bc:	00800044 	movi	r2,1
    value = 0 - value;
    20c0:	1821883a 	mov	r16,r3
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
    negative = true;
    20c4:	d8801005 	stb	r2,64(sp)
    20c8:	00000106 	br	20d0 <_ftoa+0x1b8>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
    20cc:	d8001005 	stb	zero,64(sp)
    negative = true;
    value = 0 - value;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    20d0:	a081000c 	andi	r2,r20,1024
    20d4:	1000011e 	bne	r2,zero,20dc <_ftoa+0x1c4>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    20d8:	04800184 	movi	r18,6
    20dc:	002b883a 	mov	r21,zero
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    20e0:	00800244 	movi	r2,9
    buf[len++] = '0';
    20e4:	00c00c04 	movi	r3,48
  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    20e8:	01000804 	movi	r4,32
    20ec:	1480062e 	bgeu	r2,r18,2108 <_ftoa+0x1f0>
    buf[len++] = '0';
    20f0:	d9800504 	addi	r6,sp,20
    20f4:	354b883a 	add	r5,r6,r21
    20f8:	28c00005 	stb	r3,0(r5)
    20fc:	ad400044 	addi	r21,r21,1
    prec--;
    2100:	94bfffc4 	addi	r18,r18,-1
  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    2104:	a93ff91e 	bne	r21,r4,20ec <__ram_exceptions_end+0xfe0000cc>
    buf[len++] = '0';
    prec--;
  }

  int whole = (int)value;
    2108:	800b883a 	mov	r5,r16
    210c:	8809883a 	mov	r4,r17
    2110:	0008abc0 	call	8abc <__fixdfsi>
    2114:	1027883a 	mov	r19,r2
  double tmp = (value - whole) * pow10[prec];
    2118:	900490fa 	slli	r2,r18,3
    211c:	00c00074 	movhi	r3,1
    2120:	18e48404 	addi	r3,r3,-28144
    2124:	1885883a 	add	r2,r3,r2
    2128:	10c00017 	ldw	r3,0(r2)
    212c:	10800117 	ldw	r2,4(r2)
    2130:	9809883a 	mov	r4,r19
    2134:	d8c01115 	stw	r3,68(sp)
    2138:	d8801215 	stw	r2,72(sp)
    213c:	0008b3c0 	call	8b3c <__floatsidf>
    2140:	100d883a 	mov	r6,r2
    2144:	180f883a 	mov	r7,r3
    2148:	8809883a 	mov	r4,r17
    214c:	800b883a 	mov	r5,r16
    2150:	00081c00 	call	81c0 <__subdf3>
    2154:	d9801117 	ldw	r6,68(sp)
    2158:	d9c01217 	ldw	r7,72(sp)
    215c:	1009883a 	mov	r4,r2
    2160:	180b883a 	mov	r5,r3
    2164:	00079540 	call	7954 <__muldf3>
  unsigned long frac = (unsigned long)tmp;
    2168:	180b883a 	mov	r5,r3
    216c:	1009883a 	mov	r4,r2
    2170:	d8c01415 	stw	r3,80(sp)
    2174:	d8801315 	stw	r2,76(sp)
    2178:	0003fd40 	call	3fd4 <__fixunsdfsi>
  diff = tmp - frac;
    217c:	1009883a 	mov	r4,r2
    prec--;
  }

  int whole = (int)value;
  double tmp = (value - whole) * pow10[prec];
  unsigned long frac = (unsigned long)tmp;
    2180:	102f883a 	mov	r23,r2
  diff = tmp - frac;
    2184:	0008c180 	call	8c18 <__floatunsidf>
    2188:	da401417 	ldw	r9,80(sp)
    218c:	da801317 	ldw	r10,76(sp)
    2190:	100d883a 	mov	r6,r2
    2194:	480b883a 	mov	r5,r9
    2198:	5009883a 	mov	r4,r10
    219c:	180f883a 	mov	r7,r3
    21a0:	00081c00 	call	81c0 <__subdf3>

  if (diff > 0.5) {
    21a4:	180b883a 	mov	r5,r3
    21a8:	000d883a 	mov	r6,zero
    21ac:	01cff834 	movhi	r7,16352
    21b0:	1009883a 	mov	r4,r2
    21b4:	d8c01315 	stw	r3,76(sp)
    21b8:	d8801415 	stw	r2,80(sp)
    21bc:	00077840 	call	7784 <__gedf2>
    21c0:	d8c01317 	ldw	r3,76(sp)
    21c4:	da401417 	ldw	r9,80(sp)
    21c8:	00800c0e 	bge	zero,r2,21fc <_ftoa+0x2e4>
    ++frac;
    21cc:	bdc00044 	addi	r23,r23,1
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    21d0:	b809883a 	mov	r4,r23
    21d4:	0008c180 	call	8c18 <__floatunsidf>
    21d8:	d9001117 	ldw	r4,68(sp)
    21dc:	d9401217 	ldw	r5,72(sp)
    21e0:	100d883a 	mov	r6,r2
    21e4:	180f883a 	mov	r7,r3
    21e8:	00078600 	call	7860 <__ledf2>
    21ec:	00800d16 	blt	zero,r2,2224 <_ftoa+0x30c>
      frac = 0;
      ++whole;
    21f0:	9cc00044 	addi	r19,r19,1

  if (diff > 0.5) {
    ++frac;
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
      frac = 0;
    21f4:	002f883a 	mov	r23,zero
    21f8:	00000a06 	br	2224 <_ftoa+0x30c>
      ++whole;
    }
  }
  else if (diff < 0.5) {
    21fc:	000d883a 	mov	r6,zero
    2200:	01cff834 	movhi	r7,16352
    2204:	4809883a 	mov	r4,r9
    2208:	180b883a 	mov	r5,r3
    220c:	00078600 	call	7860 <__ledf2>
    2210:	10000416 	blt	r2,zero,2224 <_ftoa+0x30c>
  }
  else if ((frac == 0U) || (frac & 1U)) {
    2214:	b8000226 	beq	r23,zero,2220 <_ftoa+0x308>
    2218:	b880004c 	andi	r2,r23,1
    221c:	10000126 	beq	r2,zero,2224 <_ftoa+0x30c>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
    2220:	bdc00044 	addi	r23,r23,1
  }

  if (prec == 0U) {
    2224:	9000191e 	bne	r18,zero,228c <_ftoa+0x374>
    diff = value - (double)whole;
    2228:	9809883a 	mov	r4,r19
    222c:	0008b3c0 	call	8b3c <__floatsidf>
    2230:	8809883a 	mov	r4,r17
    2234:	800b883a 	mov	r5,r16
    2238:	100d883a 	mov	r6,r2
    223c:	180f883a 	mov	r7,r3
    2240:	00081c00 	call	81c0 <__subdf3>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    2244:	000d883a 	mov	r6,zero
    2248:	01cff834 	movhi	r7,16352
    224c:	1009883a 	mov	r4,r2
    2250:	180b883a 	mov	r5,r3
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
  }

  if (prec == 0U) {
    diff = value - (double)whole;
    2254:	1023883a 	mov	r17,r2
    2258:	1821883a 	mov	r16,r3
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    225c:	00078600 	call	7860 <__ledf2>
    2260:	1000060e 	bge	r2,zero,227c <_ftoa+0x364>
    2264:	000d883a 	mov	r6,zero
    2268:	01cff834 	movhi	r7,16352
    226c:	8809883a 	mov	r4,r17
    2270:	800b883a 	mov	r5,r16
    2274:	00077840 	call	7784 <__gedf2>
    2278:	0080240e 	bge	zero,r2,230c <_ftoa+0x3f4>
    227c:	9880004c 	andi	r2,r19,1
    2280:	10002226 	beq	r2,zero,230c <_ftoa+0x3f4>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    2284:	9cc00044 	addi	r19,r19,1
    2288:	00002006 	br	230c <_ftoa+0x3f4>
  else if ((frac == 0U) || (frac & 1U)) {
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
  }

  if (prec == 0U) {
    228c:	a805883a 	mov	r2,r21
    }
  }
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    2290:	04400804 	movi	r17,32
    2294:	14402f26 	beq	r2,r17,2354 <_ftoa+0x43c>
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
    2298:	d9000504 	addi	r4,sp,20
    229c:	20a1883a 	add	r16,r4,r2
    22a0:	01400284 	movi	r5,10
    22a4:	b809883a 	mov	r4,r23
    22a8:	15400044 	addi	r21,r2,1
    22ac:	0004d640 	call	4d64 <__umodsi3>
    22b0:	10800c04 	addi	r2,r2,48
      if (!(frac /= 10U)) {
    22b4:	b809883a 	mov	r4,r23
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
    22b8:	80800005 	stb	r2,0(r16)
      if (!(frac /= 10U)) {
    22bc:	01400284 	movi	r5,10
    22c0:	0004d000 	call	4d00 <__udivsi3>
    22c4:	102f883a 	mov	r23,r2
  }
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
    22c8:	94bfffc4 	addi	r18,r18,-1
      buf[len++] = (char)(48U + (frac % 10U));
    22cc:	a805883a 	mov	r2,r21
      if (!(frac /= 10U)) {
    22d0:	b83ff01e 	bne	r23,zero,2294 <__ram_exceptions_end+0xfe000274>
    22d4:	9565883a 	add	r18,r18,r21
        break;
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    22d8:	01400804 	movi	r5,32
      buf[len++] = '0';
    22dc:	01800c04 	movi	r6,48
      if (!(frac /= 10U)) {
        break;
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    22e0:	11401c26 	beq	r2,r5,2354 <_ftoa+0x43c>
    22e4:	d9000504 	addi	r4,sp,20
    22e8:	2087883a 	add	r3,r4,r2
    22ec:	11000044 	addi	r4,r2,1
    22f0:	14800326 	beq	r2,r18,2300 <_ftoa+0x3e8>
      buf[len++] = '0';
    22f4:	19800005 	stb	r6,0(r3)
    22f8:	2005883a 	mov	r2,r4
    22fc:	003ff806 	br	22e0 <__ram_exceptions_end+0xfe0002c0>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
      // add decimal
      buf[len++] = '.';
    2300:	00800b84 	movi	r2,46
    2304:	202b883a 	mov	r21,r4
    2308:	18800005 	stb	r2,0(r3)
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
    230c:	a805883a 	mov	r2,r21
      buf[len++] = '.';
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    2310:	04800804 	movi	r18,32
    2314:	14800f26 	beq	r2,r18,2354 <_ftoa+0x43c>
    buf[len++] = (char)(48 + (whole % 10));
    2318:	d9400504 	addi	r5,sp,20
    231c:	28a3883a 	add	r17,r5,r2
    2320:	9809883a 	mov	r4,r19
    2324:	01400284 	movi	r5,10
    2328:	14000044 	addi	r16,r2,1
    232c:	0004c8c0 	call	4c8c <__modsi3>
    2330:	10800c04 	addi	r2,r2,48
    if (!(whole /= 10)) {
    2334:	9809883a 	mov	r4,r19
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    buf[len++] = (char)(48 + (whole % 10));
    2338:	88800005 	stb	r2,0(r17)
    if (!(whole /= 10)) {
    233c:	01400284 	movi	r5,10
    2340:	0004c080 	call	4c08 <__divsi3>
    2344:	1027883a 	mov	r19,r2
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    buf[len++] = (char)(48 + (whole % 10));
    2348:	8005883a 	mov	r2,r16
    if (!(whole /= 10)) {
    234c:	983ff11e 	bne	r19,zero,2314 <__ram_exceptions_end+0xfe0002f4>
    2350:	00000106 	br	2358 <_ftoa+0x440>
  else {
    unsigned int count = prec;
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
      --count;
      buf[len++] = (char)(48U + (frac % 10U));
    2354:	04000804 	movi	r16,32
      break;
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    2358:	a0c000cc 	andi	r3,r20,3
    235c:	00800044 	movi	r2,1
    2360:	18800f1e 	bne	r3,r2,23a0 <_ftoa+0x488>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    2364:	b0000e26 	beq	r22,zero,23a0 <_ftoa+0x488>
    2368:	d8801003 	ldbu	r2,64(sp)
    236c:	1000021e 	bne	r2,zero,2378 <_ftoa+0x460>
    2370:	a080030c 	andi	r2,r20,12
    2374:	10000126 	beq	r2,zero,237c <_ftoa+0x464>
      width--;
    2378:	b5bfffc4 	addi	r22,r22,-1
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    237c:	00800804 	movi	r2,32
      buf[len++] = '0';
    2380:	00c00c04 	movi	r3,48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
      width--;
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    2384:	8580062e 	bgeu	r16,r22,23a0 <_ftoa+0x488>
    2388:	80801a26 	beq	r16,r2,23f4 <_ftoa+0x4dc>
      buf[len++] = '0';
    238c:	d9800504 	addi	r6,sp,20
    2390:	3409883a 	add	r4,r6,r16
    2394:	20c00005 	stb	r3,0(r4)
    2398:	84000044 	addi	r16,r16,1
    239c:	003ff906 	br	2384 <__ram_exceptions_end+0xfe000364>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    23a0:	008007c4 	movi	r2,31
    23a4:	14001336 	bltu	r2,r16,23f4 <_ftoa+0x4dc>
    if (negative) {
    23a8:	d8801003 	ldbu	r2,64(sp)
    23ac:	10000426 	beq	r2,zero,23c0 <_ftoa+0x4a8>
      buf[len++] = '-';
    23b0:	d8c00504 	addi	r3,sp,20
    23b4:	1c05883a 	add	r2,r3,r16
    23b8:	00c00b44 	movi	r3,45
    23bc:	00000b06 	br	23ec <_ftoa+0x4d4>
    }
    else if (flags & FLAGS_PLUS) {
    23c0:	a080010c 	andi	r2,r20,4
    23c4:	10000426 	beq	r2,zero,23d8 <_ftoa+0x4c0>
      buf[len++] = '+';  // ignore the space if the '+' exists
    23c8:	d9000504 	addi	r4,sp,20
    23cc:	2405883a 	add	r2,r4,r16
    23d0:	00c00ac4 	movi	r3,43
    23d4:	00000506 	br	23ec <_ftoa+0x4d4>
    }
    else if (flags & FLAGS_SPACE) {
    23d8:	a080020c 	andi	r2,r20,8
    23dc:	10000526 	beq	r2,zero,23f4 <_ftoa+0x4dc>
      buf[len++] = ' ';
    23e0:	d9400504 	addi	r5,sp,20
    23e4:	2c05883a 	add	r2,r5,r16
    23e8:	00c00804 	movi	r3,32
    23ec:	10c00005 	stb	r3,0(r2)
    23f0:	84000044 	addi	r16,r16,1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    23f4:	d9800504 	addi	r6,sp,20
    23f8:	dd000315 	stw	r20,12(sp)
    23fc:	dd800215 	stw	r22,8(sp)
    2400:	dc000115 	stw	r16,4(sp)
    2404:	d9800015 	stw	r6,0(sp)
    2408:	d9800f17 	ldw	r6,60(sp)
    240c:	d9400e17 	ldw	r5,56(sp)
    2410:	d9000d17 	ldw	r4,52(sp)
    2414:	e00f883a 	mov	r7,fp
    2418:	000191c0 	call	191c <_out_rev>
}
    241c:	dfc01e17 	ldw	ra,120(sp)
    2420:	df001d17 	ldw	fp,116(sp)
    2424:	ddc01c17 	ldw	r23,112(sp)
    2428:	dd801b17 	ldw	r22,108(sp)
    242c:	dd401a17 	ldw	r21,104(sp)
    2430:	dd001917 	ldw	r20,100(sp)
    2434:	dcc01817 	ldw	r19,96(sp)
    2438:	dc801717 	ldw	r18,92(sp)
    243c:	dc401617 	ldw	r17,88(sp)
    2440:	dc001517 	ldw	r16,84(sp)
    2444:	dec01f04 	addi	sp,sp,124
    2448:	f800283a 	ret

0000244c <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    244c:	deffe504 	addi	sp,sp,-108
    2450:	dd401615 	stw	r21,88(sp)
    2454:	dc401215 	stw	r17,72(sp)
    2458:	dd401c17 	ldw	r21,112(sp)
    245c:	dc401b17 	ldw	r17,108(sp)
    2460:	d8801e17 	ldw	r2,120(sp)
    2464:	d9000615 	stw	r4,24(sp)
    2468:	d9400715 	stw	r5,28(sp)
    246c:	d9800b15 	stw	r6,44(sp)
    2470:	d9c00815 	stw	r7,32(sp)
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    2474:	880d883a 	mov	r6,r17
    2478:	a80f883a 	mov	r7,r21
    247c:	8809883a 	mov	r4,r17
    2480:	a80b883a 	mov	r5,r21


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
    2484:	dd801715 	stw	r22,92(sp)
    2488:	dd001515 	stw	r20,84(sp)
    248c:	dfc01a15 	stw	ra,104(sp)
    2490:	df001915 	stw	fp,100(sp)
    2494:	ddc01815 	stw	r23,96(sp)
    2498:	dcc01415 	stw	r19,80(sp)
    249c:	dc801315 	stw	r18,76(sp)
    24a0:	dc001115 	stw	r16,68(sp)
    24a4:	dd001d17 	ldw	r20,116(sp)
    24a8:	d8800a15 	stw	r2,40(sp)
    24ac:	dd801f17 	ldw	r22,124(sp)
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    24b0:	00076fc0 	call	76fc <__eqdf2>
    24b4:	10000e1e 	bne	r2,zero,24f0 <_etoa+0xa4>
    24b8:	01bfffc4 	movi	r6,-1
    24bc:	01dffc34 	movhi	r7,32752
    24c0:	398f883a 	add	r7,r7,r6
    24c4:	8809883a 	mov	r4,r17
    24c8:	a80b883a 	mov	r5,r21
    24cc:	00077840 	call	7784 <__gedf2>
    24d0:	00800716 	blt	zero,r2,24f0 <_etoa+0xa4>
    24d4:	01bfffc4 	movi	r6,-1
    24d8:	01fffc34 	movhi	r7,65520
    24dc:	398f883a 	add	r7,r7,r6
    24e0:	8809883a 	mov	r4,r17
    24e4:	a80b883a 	mov	r5,r21
    24e8:	00078600 	call	7860 <__ledf2>
    24ec:	1000160e 	bge	r2,zero,2548 <_etoa+0xfc>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    24f0:	d8c00a17 	ldw	r3,40(sp)
    24f4:	d9c00817 	ldw	r7,32(sp)
    24f8:	d9800b17 	ldw	r6,44(sp)
    24fc:	d9400717 	ldw	r5,28(sp)
    2500:	d9000617 	ldw	r4,24(sp)
    2504:	dd801f15 	stw	r22,124(sp)
    2508:	d8c01e15 	stw	r3,120(sp)
    250c:	dd001d15 	stw	r20,116(sp)
    2510:	dc401b15 	stw	r17,108(sp)
    2514:	dd401c15 	stw	r21,112(sp)
    if (flags & FLAGS_LEFT) {
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
    2518:	dfc01a17 	ldw	ra,104(sp)
    251c:	df001917 	ldw	fp,100(sp)
    2520:	ddc01817 	ldw	r23,96(sp)
    2524:	dd801717 	ldw	r22,92(sp)
    2528:	dd401617 	ldw	r21,88(sp)
    252c:	dd001517 	ldw	r20,84(sp)
    2530:	dcc01417 	ldw	r19,80(sp)
    2534:	dc801317 	ldw	r18,76(sp)
    2538:	dc401217 	ldw	r17,72(sp)
    253c:	dc001117 	ldw	r16,68(sp)
    2540:	dec01b04 	addi	sp,sp,108
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    2544:	0001f181 	jmpi	1f18 <_ftoa>
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
    2548:	000d883a 	mov	r6,zero
    254c:	000f883a 	mov	r7,zero
    2550:	8809883a 	mov	r4,r17
    2554:	a80b883a 	mov	r5,r21
    2558:	00078600 	call	7860 <__ledf2>
    value = -value;
    255c:	dc400c15 	stw	r17,48(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
    2560:	1000020e 	bge	r2,zero,256c <_etoa+0x120>
    value = -value;
    2564:	aca0003c 	xorhi	r18,r21,32768
    2568:	00000106 	br	2570 <_etoa+0x124>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
    256c:	a825883a 	mov	r18,r21
    value = -value;
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
    2570:	b101000c 	andi	r4,r22,1024
    2574:	d9000915 	stw	r4,36(sp)
    2578:	2000011e 	bne	r4,zero,2580 <_etoa+0x134>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    257c:	05000184 	movi	r20,6

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    2580:	9008d53a 	srli	r4,r18,20
    2584:	2101ffcc 	andi	r4,r4,2047
    2588:	213f0044 	addi	r4,r4,-1023
    258c:	0008b3c0 	call	8b3c <__floatsidf>
    2590:	019427f4 	movhi	r6,20639
    2594:	01cff4f4 	movhi	r7,16339
    2598:	319e7ec4 	addi	r6,r6,31227
    259c:	39d104c4 	addi	r7,r7,17427
    25a0:	1009883a 	mov	r4,r2
    25a4:	180b883a 	mov	r5,r3
    25a8:	00079540 	call	7954 <__muldf3>
    25ac:	01a2d874 	movhi	r6,35681
    25b0:	01cff1f4 	movhi	r7,16327
    25b4:	31b22cc4 	addi	r6,r6,-14157
    25b8:	39e28a04 	addi	r7,r7,-30168
    25bc:	1009883a 	mov	r4,r2
    25c0:	180b883a 	mov	r5,r3
    25c4:	00064800 	call	6480 <__adddf3>
    double   F;
  } conv;

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    25c8:	01400434 	movhi	r5,16
    25cc:	297fffc4 	addi	r5,r5,-1
    25d0:	914a703a 	and	r5,r18,r5
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    25d4:	000d883a 	mov	r6,zero
    25d8:	01cffe34 	movhi	r7,16376
    25dc:	8809883a 	mov	r4,r17
    25e0:	294ffc34 	orhi	r5,r5,16368
    25e4:	1027883a 	mov	r19,r2
    25e8:	1821883a 	mov	r16,r3
    25ec:	00081c00 	call	81c0 <__subdf3>
    25f0:	0198dbf4 	movhi	r6,25455
    25f4:	01cff4f4 	movhi	r7,16339
    25f8:	3190d844 	addi	r6,r6,17249
    25fc:	39e1e9c4 	addi	r7,r7,-30809
    2600:	1009883a 	mov	r4,r2
    2604:	180b883a 	mov	r5,r3
    2608:	00079540 	call	7954 <__muldf3>
    260c:	100d883a 	mov	r6,r2
    2610:	180f883a 	mov	r7,r3
    2614:	9809883a 	mov	r4,r19
    2618:	800b883a 	mov	r5,r16
    261c:	00064800 	call	6480 <__adddf3>
    2620:	180b883a 	mov	r5,r3
    2624:	1009883a 	mov	r4,r2
    2628:	0008abc0 	call	8abc <__fixdfsi>
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    262c:	1009883a 	mov	r4,r2

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    2630:	1021883a 	mov	r16,r2
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    2634:	0008b3c0 	call	8b3c <__floatsidf>
    2638:	01825eb4 	movhi	r6,2426
    263c:	01d002f4 	movhi	r7,16395
    2640:	31a8dc44 	addi	r6,r6,-23695
    2644:	39e4d3c4 	addi	r7,r7,-27825
    2648:	1009883a 	mov	r4,r2
    264c:	180b883a 	mov	r5,r3
    2650:	102f883a 	mov	r23,r2
    2654:	1827883a 	mov	r19,r3
    2658:	00079540 	call	7954 <__muldf3>
    265c:	000d883a 	mov	r6,zero
    2660:	01cff834 	movhi	r7,16352
    2664:	1009883a 	mov	r4,r2
    2668:	180b883a 	mov	r5,r3
    266c:	00064800 	call	6480 <__adddf3>
    2670:	180b883a 	mov	r5,r3
    2674:	1009883a 	mov	r4,r2
    2678:	0008abc0 	call	8abc <__fixdfsi>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    267c:	01aeed74 	movhi	r6,48053
    2680:	01d000b4 	movhi	r7,16386
    2684:	980b883a 	mov	r5,r19
    2688:	31954584 	addi	r6,r6,21782
    268c:	39daec44 	addi	r7,r7,27569
    2690:	b809883a 	mov	r4,r23
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    2694:	d8800d15 	stw	r2,52(sp)
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    2698:	00079540 	call	7954 <__muldf3>
    269c:	d9000d17 	ldw	r4,52(sp)
    26a0:	102f883a 	mov	r23,r2
    26a4:	1827883a 	mov	r19,r3
    26a8:	0008b3c0 	call	8b3c <__floatsidf>
    26ac:	01bfbeb4 	movhi	r6,65274
    26b0:	01cff9b4 	movhi	r7,16358
    26b4:	318e7bc4 	addi	r6,r6,14831
    26b8:	39cb9084 	addi	r7,r7,11842
    26bc:	1009883a 	mov	r4,r2
    26c0:	180b883a 	mov	r5,r3
    26c4:	00079540 	call	7954 <__muldf3>
    26c8:	b809883a 	mov	r4,r23
    26cc:	980b883a 	mov	r5,r19
    26d0:	100d883a 	mov	r6,r2
    26d4:	180f883a 	mov	r7,r3
    26d8:	00081c00 	call	81c0 <__subdf3>
  const double z2 = z * z;
    26dc:	100d883a 	mov	r6,r2
    26e0:	180f883a 	mov	r7,r3
    26e4:	1009883a 	mov	r4,r2
    26e8:	180b883a 	mov	r5,r3
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    26ec:	1839883a 	mov	fp,r3
  const double z2 = z * z;
    26f0:	d8800e15 	stw	r2,56(sp)
    26f4:	00079540 	call	7954 <__muldf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    26f8:	da400e17 	ldw	r9,56(sp)
    26fc:	e00f883a 	mov	r7,fp
    2700:	e00b883a 	mov	r5,fp
    2704:	480d883a 	mov	r6,r9
    2708:	4809883a 	mov	r4,r9
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
    270c:	1027883a 	mov	r19,r2
    2710:	182f883a 	mov	r23,r3
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    2714:	00064800 	call	6480 <__adddf3>
    2718:	9809883a 	mov	r4,r19
    271c:	b80b883a 	mov	r5,r23
    2720:	000d883a 	mov	r6,zero
    2724:	01d00b34 	movhi	r7,16428
    2728:	d8c01015 	stw	r3,64(sp)
    272c:	d8800f15 	stw	r2,60(sp)
    2730:	0006d2c0 	call	6d2c <__divdf3>
    2734:	000d883a 	mov	r6,zero
    2738:	01d00934 	movhi	r7,16420
    273c:	1009883a 	mov	r4,r2
    2740:	180b883a 	mov	r5,r3
    2744:	00064800 	call	6480 <__adddf3>
    2748:	9809883a 	mov	r4,r19
    274c:	b80b883a 	mov	r5,r23
    2750:	100d883a 	mov	r6,r2
    2754:	180f883a 	mov	r7,r3
    2758:	0006d2c0 	call	6d2c <__divdf3>
    275c:	000d883a 	mov	r6,zero
    2760:	01d00634 	movhi	r7,16408
    2764:	1009883a 	mov	r4,r2
    2768:	180b883a 	mov	r5,r3
    276c:	00064800 	call	6480 <__adddf3>
    2770:	9809883a 	mov	r4,r19
    2774:	b80b883a 	mov	r5,r23
    2778:	100d883a 	mov	r6,r2
    277c:	180f883a 	mov	r7,r3
    2780:	0006d2c0 	call	6d2c <__divdf3>
    2784:	da400e17 	ldw	r9,56(sp)
    2788:	e00f883a 	mov	r7,fp
    278c:	0009883a 	mov	r4,zero
    2790:	480d883a 	mov	r6,r9
    2794:	01500034 	movhi	r5,16384
    2798:	102f883a 	mov	r23,r2
    279c:	1827883a 	mov	r19,r3
    27a0:	00081c00 	call	81c0 <__subdf3>
    27a4:	b809883a 	mov	r4,r23
    27a8:	100d883a 	mov	r6,r2
    27ac:	180f883a 	mov	r7,r3
    27b0:	980b883a 	mov	r5,r19
    27b4:	00064800 	call	6480 <__adddf3>
    27b8:	dac00f17 	ldw	r11,60(sp)
    27bc:	da801017 	ldw	r10,64(sp)
    27c0:	100d883a 	mov	r6,r2
    27c4:	5809883a 	mov	r4,r11
    27c8:	500b883a 	mov	r5,r10
    27cc:	180f883a 	mov	r7,r3
    27d0:	0006d2c0 	call	6d2c <__divdf3>
    27d4:	000d883a 	mov	r6,zero
    27d8:	01cffc34 	movhi	r7,16368
    27dc:	1009883a 	mov	r4,r2
    27e0:	180b883a 	mov	r5,r3
    27e4:	00064800 	call	6480 <__adddf3>
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
    27e8:	d9000d17 	ldw	r4,52(sp)
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    27ec:	000d883a 	mov	r6,zero
    27f0:	180b883a 	mov	r5,r3
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
    27f4:	21c0ffc4 	addi	r7,r4,1023
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    27f8:	380e953a 	slli	r7,r7,20
    27fc:	1009883a 	mov	r4,r2
    2800:	00079540 	call	7954 <__muldf3>
  // correct for rounding errors
  if (value < conv.F) {
    2804:	180f883a 	mov	r7,r3
    2808:	100d883a 	mov	r6,r2
    280c:	8809883a 	mov	r4,r17
    2810:	900b883a 	mov	r5,r18
    2814:	d8c00e15 	stw	r3,56(sp)
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    2818:	102f883a 	mov	r23,r2
  // correct for rounding errors
  if (value < conv.F) {
    281c:	00078600 	call	7860 <__ledf2>
    2820:	d8c00e17 	ldw	r3,56(sp)
    2824:	1000070e 	bge	r2,zero,2844 <_etoa+0x3f8>
    expval--;
    conv.F /= 10;
    2828:	b809883a 	mov	r4,r23
    282c:	000d883a 	mov	r6,zero
    2830:	01d00934 	movhi	r7,16420
    2834:	180b883a 	mov	r5,r3
    2838:	0006d2c0 	call	6d2c <__divdf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
  // correct for rounding errors
  if (value < conv.F) {
    expval--;
    283c:	843fffc4 	addi	r16,r16,-1
    conv.F /= 10;
    2840:	102f883a 	mov	r23,r2
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    2844:	808018c4 	addi	r2,r16,99
    2848:	04c03184 	movi	r19,198
    284c:	98a7403a 	cmpgeu	r19,r19,r2
    2850:	00800144 	movi	r2,5
    2854:	14e7c83a 	sub	r19,r2,r19

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
    2858:	b082000c 	andi	r2,r22,2048
    285c:	10001f26 	beq	r2,zero,28dc <_etoa+0x490>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
    2860:	01bac734 	movhi	r6,60188
    2864:	01cfc6b4 	movhi	r7,16154
    2868:	3190cb44 	addi	r6,r6,17197
    286c:	39cdb884 	addi	r7,r7,14050
    2870:	8809883a 	mov	r4,r17
    2874:	900b883a 	mov	r5,r18
    2878:	d8c00e15 	stw	r3,56(sp)
    287c:	00077840 	call	7784 <__gedf2>
    2880:	d8c00e17 	ldw	r3,56(sp)
    2884:	10001116 	blt	r2,zero,28cc <_etoa+0x480>
    2888:	01d04bf4 	movhi	r7,16687
    288c:	000d883a 	mov	r6,zero
    2890:	39e12004 	addi	r7,r7,-31616
    2894:	8809883a 	mov	r4,r17
    2898:	900b883a 	mov	r5,r18
    289c:	00078600 	call	7860 <__ledf2>
    28a0:	d8c00e17 	ldw	r3,56(sp)
    28a4:	1000090e 	bge	r2,zero,28cc <_etoa+0x480>
      if ((int)prec > expval) {
    28a8:	8500030e 	bge	r16,r20,28b8 <_etoa+0x46c>
        prec = (unsigned)((int)prec - expval - 1);
    28ac:	a429c83a 	sub	r20,r20,r16
    28b0:	a53fffc4 	addi	r20,r20,-1
    28b4:	00000106 	br	28bc <_etoa+0x470>
      }
      else {
        prec = 0;
    28b8:	0029883a 	mov	r20,zero
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
    28bc:	b5810014 	ori	r22,r22,1024
      // no characters in exponent
      minwidth = 0U;
    28c0:	0027883a 	mov	r19,zero
      expval   = 0;
    28c4:	0021883a 	mov	r16,zero
    28c8:	00000406 	br	28dc <_etoa+0x490>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
    28cc:	a0000326 	beq	r20,zero,28dc <_etoa+0x490>
    28d0:	d8800917 	ldw	r2,36(sp)
    28d4:	10000126 	beq	r2,zero,28dc <_etoa+0x490>
        --prec;
    28d8:	a53fffc4 	addi	r20,r20,-1
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
  if (width > minwidth) {
    28dc:	d9000a17 	ldw	r4,40(sp)
    28e0:	9900022e 	bgeu	r19,r4,28ec <_etoa+0x4a0>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
    28e4:	24f9c83a 	sub	fp,r4,r19
    28e8:	00000106 	br	28f0 <_etoa+0x4a4>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
    28ec:	0039883a 	mov	fp,zero
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
    28f0:	b080008c 	andi	r2,r22,2
    28f4:	d8800915 	stw	r2,36(sp)
    28f8:	10000226 	beq	r2,zero,2904 <_etoa+0x4b8>
    28fc:	98000126 	beq	r19,zero,2904 <_etoa+0x4b8>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
    2900:	0039883a 	mov	fp,zero
  }

  // rescale the float value
  if (expval) {
    2904:	80000726 	beq	r16,zero,2924 <_etoa+0x4d8>
    value /= conv.F;
    2908:	900b883a 	mov	r5,r18
    290c:	b80d883a 	mov	r6,r23
    2910:	180f883a 	mov	r7,r3
    2914:	8809883a 	mov	r4,r17
    2918:	0006d2c0 	call	6d2c <__divdf3>
    291c:	d8800c15 	stw	r2,48(sp)
    2920:	1825883a 	mov	r18,r3
  }

  // output the floating part
  const size_t start_idx = idx;
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
    2924:	000d883a 	mov	r6,zero
    2928:	000f883a 	mov	r7,zero
    292c:	8809883a 	mov	r4,r17
    2930:	a80b883a 	mov	r5,r21
    2934:	00078600 	call	7860 <__ledf2>
    2938:	1000010e 	bge	r2,zero,2940 <_etoa+0x4f4>
    293c:	94a0003c 	xorhi	r18,r18,32768
    2940:	d8c00c17 	ldw	r3,48(sp)
    2944:	00bdffc4 	movi	r2,-2049
    2948:	d9c00817 	ldw	r7,32(sp)
    294c:	d9800b17 	ldw	r6,44(sp)
    2950:	d9400717 	ldw	r5,28(sp)
    2954:	d9000617 	ldw	r4,24(sp)
    2958:	b084703a 	and	r2,r22,r2
    295c:	d8800415 	stw	r2,16(sp)
    2960:	df000315 	stw	fp,12(sp)
    2964:	dd000215 	stw	r20,8(sp)
    2968:	d8c00015 	stw	r3,0(sp)
    296c:	dc800115 	stw	r18,4(sp)
    2970:	0001f180 	call	1f18 <_ftoa>

  // output the exponent part
  if (minwidth) {
    2974:	98002b26 	beq	r19,zero,2a24 <_etoa+0x5d8>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    2978:	b0c0080c 	andi	r3,r22,32
    297c:	1800021e 	bne	r3,zero,2988 <_etoa+0x53c>
    2980:	01001944 	movi	r4,101
    2984:	00000106 	br	298c <_etoa+0x540>
    2988:	01001144 	movi	r4,69
    298c:	100d883a 	mov	r6,r2
    2990:	14400044 	addi	r17,r2,1
    2994:	d9c00817 	ldw	r7,32(sp)
    2998:	d8800617 	ldw	r2,24(sp)
    299c:	d9400717 	ldw	r5,28(sp)
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    29a0:	9cffffc4 	addi	r19,r19,-1
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);

  // output the exponent part
  if (minwidth) {
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    29a4:	103ee83a 	callr	r2
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    29a8:	00800144 	movi	r2,5
    29ac:	d8800515 	stw	r2,20(sp)
    29b0:	00800284 	movi	r2,10
    29b4:	d8800215 	stw	r2,8(sp)
    29b8:	8004d7fa 	srli	r2,r16,31
    29bc:	dcc00415 	stw	r19,16(sp)
    29c0:	d8000315 	stw	zero,12(sp)
    29c4:	d8800115 	stw	r2,4(sp)
    29c8:	8000010e 	bge	r16,zero,29d0 <_etoa+0x584>
    29cc:	0421c83a 	sub	r16,zero,r16
    29d0:	d9c00817 	ldw	r7,32(sp)
    29d4:	d9400717 	ldw	r5,28(sp)
    29d8:	d9000617 	ldw	r4,24(sp)
    29dc:	dc000015 	stw	r16,0(sp)
    29e0:	880d883a 	mov	r6,r17
    29e4:	0001bcc0 	call	1bcc <_ntoa_long>
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
    29e8:	d8c00917 	ldw	r3,36(sp)
    29ec:	18000d26 	beq	r3,zero,2a24 <_etoa+0x5d8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    29f0:	d9000b17 	ldw	r4,44(sp)
    29f4:	1107c83a 	sub	r3,r2,r4
    29f8:	d9000a17 	ldw	r4,40(sp)
    29fc:	1900092e 	bgeu	r3,r4,2a24 <_etoa+0x5d8>
    2a00:	14000044 	addi	r16,r2,1
    2a04:	100d883a 	mov	r6,r2
    2a08:	d9c00817 	ldw	r7,32(sp)
    2a0c:	d8800617 	ldw	r2,24(sp)
    2a10:	d9400717 	ldw	r5,28(sp)
    2a14:	01000804 	movi	r4,32
    2a18:	103ee83a 	callr	r2
    2a1c:	8005883a 	mov	r2,r16
    2a20:	003ff306 	br	29f0 <__ram_exceptions_end+0xfe0009d0>
    }
  }
  return idx;
}
    2a24:	dfc01a17 	ldw	ra,104(sp)
    2a28:	df001917 	ldw	fp,100(sp)
    2a2c:	ddc01817 	ldw	r23,96(sp)
    2a30:	dd801717 	ldw	r22,92(sp)
    2a34:	dd401617 	ldw	r21,88(sp)
    2a38:	dd001517 	ldw	r20,84(sp)
    2a3c:	dcc01417 	ldw	r19,80(sp)
    2a40:	dc801317 	ldw	r18,76(sp)
    2a44:	dc401217 	ldw	r17,72(sp)
    2a48:	dc001117 	ldw	r16,68(sp)
    2a4c:	dec01b04 	addi	sp,sp,108
    2a50:	f800283a 	ret

00002a54 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    2a54:	deffeb04 	addi	sp,sp,-84
    2a58:	df001315 	stw	fp,76(sp)
    2a5c:	dd000f15 	stw	r20,60(sp)
    2a60:	dc800d15 	stw	r18,52(sp)
    2a64:	dfc01415 	stw	ra,80(sp)
    2a68:	ddc01215 	stw	r23,72(sp)
    2a6c:	dd801115 	stw	r22,68(sp)
    2a70:	dd401015 	stw	r21,64(sp)
    2a74:	dcc00e15 	stw	r19,56(sp)
    2a78:	dc400c15 	stw	r17,48(sp)
    2a7c:	dc000b15 	stw	r16,44(sp)
    2a80:	2829883a 	mov	r20,r5
    2a84:	3025883a 	mov	r18,r6
    2a88:	df001517 	ldw	fp,84(sp)
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    2a8c:	2800031e 	bne	r5,zero,2a9c <_vsnprintf+0x48>
    // use null output function
    out = _out_null;
    2a90:	04c00034 	movhi	r19,0
    2a94:	9cc64604 	addi	r19,r19,6424
    2a98:	00000106 	br	2aa0 <_vsnprintf+0x4c>
    2a9c:	2027883a 	mov	r19,r4
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    2aa0:	002d883a 	mov	r22,zero
  if (!buffer) {
    // use null output function
    out = _out_null;
  }

  while (*format)
    2aa4:	39000007 	ldb	r4,0(r7)
    2aa8:	20005126 	beq	r4,zero,2bf0 <_vsnprintf+0x19c>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    2aac:	00800944 	movi	r2,37
    2ab0:	3c400044 	addi	r17,r7,1
    2ab4:	20800726 	beq	r4,r2,2ad4 <_vsnprintf+0x80>
      // no
      out(*format, buffer, idx++, maxlen);
    2ab8:	900f883a 	mov	r7,r18
    2abc:	b00d883a 	mov	r6,r22
    2ac0:	a00b883a 	mov	r5,r20
    2ac4:	983ee83a 	callr	r19
    2ac8:	b4000044 	addi	r16,r22,1
      format++;
    2acc:	880f883a 	mov	r7,r17
    2ad0:	00004506 	br	2be8 <_vsnprintf+0x194>
    2ad4:	880f883a 	mov	r7,r17
      // yes, evaluate it
      format++;
    }

    // evaluate flags
    flags = 0U;
    2ad8:	0021883a 	mov	r16,zero
    do {
      switch (*format) {
    2adc:	01400804 	movi	r5,32
    2ae0:	018008c4 	movi	r6,35
    2ae4:	39000003 	ldbu	r4,0(r7)
    2ae8:	00c00ac4 	movi	r3,43
    2aec:	382f883a 	mov	r23,r7
    2af0:	20803fcc 	andi	r2,r4,255
    2af4:	1080201c 	xori	r2,r2,128
    2af8:	10bfe004 	addi	r2,r2,-128
    2afc:	10c00d26 	beq	r2,r3,2b34 <_vsnprintf+0xe0>
    2b00:	18800416 	blt	r3,r2,2b14 <_vsnprintf+0xc0>
    2b04:	11400d26 	beq	r2,r5,2b3c <_vsnprintf+0xe8>
    2b08:	1180401e 	bne	r2,r6,2c0c <_vsnprintf+0x1b8>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    2b0c:	84000414 	ori	r16,r16,16
    2b10:	00003c06 	br	2c04 <_vsnprintf+0x1b0>
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    2b14:	00c00b44 	movi	r3,45
    2b18:	10c00426 	beq	r2,r3,2b2c <_vsnprintf+0xd8>
    2b1c:	00c00c04 	movi	r3,48
    2b20:	10c03a1e 	bne	r2,r3,2c0c <_vsnprintf+0x1b8>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    2b24:	84000054 	ori	r16,r16,1
    2b28:	00003606 	br	2c04 <_vsnprintf+0x1b0>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    2b2c:	84000094 	ori	r16,r16,2
    2b30:	00003406 	br	2c04 <_vsnprintf+0x1b0>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2b34:	84000114 	ori	r16,r16,4
    2b38:	00003206 	br	2c04 <_vsnprintf+0x1b0>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    2b3c:	84000214 	ori	r16,r16,8
    2b40:	00003006 	br	2c04 <_vsnprintf+0x1b0>
      flags |= FLAGS_PRECISION;
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
    2b44:	10803fcc 	andi	r2,r2,255
    2b48:	1080201c 	xori	r2,r2,128
    2b4c:	10bfe004 	addi	r2,r2,-128
    2b50:	01000a84 	movi	r4,42
    2b54:	11005b1e 	bne	r2,r4,2cc4 <_vsnprintf+0x270>
        const int prec = (int)va_arg(va, int);
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2b58:	e0800017 	ldw	r2,0(fp)
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
        const int prec = (int)va_arg(va, int);
    2b5c:	e1000104 	addi	r4,fp,4
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2b60:	1000010e 	bge	r2,zero,2b68 <_vsnprintf+0x114>
    2b64:	0005883a 	mov	r2,zero
        format++;
    2b68:	bc400084 	addi	r17,r23,2
      format++;
      if (_is_digit(*format)) {
        precision = _atoi(&format);
      }
      else if (*format == '*') {
        const int prec = (int)va_arg(va, int);
    2b6c:	2039883a 	mov	fp,r4
        format++;
      }
    }

    // evaluate length field
    switch (*format) {
    2b70:	89000007 	ldb	r4,0(r17)
    2b74:	01401b04 	movi	r5,108
    2b78:	21405a26 	beq	r4,r5,2ce4 <_vsnprintf+0x290>
    2b7c:	2900530e 	bge	r5,r4,2ccc <_vsnprintf+0x278>
    2b80:	01401d04 	movi	r5,116
    2b84:	21406226 	beq	r4,r5,2d10 <_vsnprintf+0x2bc>
    2b88:	01401e84 	movi	r5,122
    2b8c:	21406026 	beq	r4,r5,2d10 <_vsnprintf+0x2bc>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    2b90:	89c00003 	ldbu	r7,0(r17)
    2b94:	01401944 	movi	r5,101
    2b98:	39003fcc 	andi	r4,r7,255
    2b9c:	2100201c 	xori	r4,r4,128
    2ba0:	213fe004 	addi	r4,r4,-128
    2ba4:	21412a26 	beq	r4,r5,3050 <_vsnprintf+0x5fc>
    2ba8:	29006516 	blt	r5,r4,2d40 <_vsnprintf+0x2ec>
    2bac:	014011c4 	movi	r5,71
    2bb0:	21412726 	beq	r4,r5,3050 <_vsnprintf+0x5fc>
    2bb4:	29005916 	blt	r5,r4,2d1c <_vsnprintf+0x2c8>
    2bb8:	01401144 	movi	r5,69
    2bbc:	21412426 	beq	r4,r5,3050 <_vsnprintf+0x5fc>
    2bc0:	29011216 	blt	r5,r4,300c <_vsnprintf+0x5b8>
    2bc4:	00800944 	movi	r2,37
    2bc8:	2081b51e 	bne	r4,r2,32a0 <_vsnprintf+0x84c>
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    2bcc:	b4000044 	addi	r16,r22,1
    2bd0:	900f883a 	mov	r7,r18
    2bd4:	b00d883a 	mov	r6,r22
    2bd8:	a00b883a 	mov	r5,r20
    2bdc:	01000944 	movi	r4,37
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    2be0:	983ee83a 	callr	r19
        format++;
    2be4:	89c00044 	addi	r7,r17,1
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    2be8:	802d883a 	mov	r22,r16
        format++;
        break;
    2bec:	003fad06 	br	2aa4 <__ram_exceptions_end+0xfe000a84>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2bf0:	b4800236 	bltu	r22,r18,2bfc <_vsnprintf+0x1a8>
    2bf4:	91bfffc4 	addi	r6,r18,-1
    2bf8:	0001c406 	br	330c <_vsnprintf+0x8b8>
    2bfc:	b00d883a 	mov	r6,r22
    2c00:	0001c206 	br	330c <_vsnprintf+0x8b8>
    2c04:	39c00044 	addi	r7,r7,1
    2c08:	003fb606 	br	2ae4 <__ram_exceptions_end+0xfe000ac4>
      }
    } while (n);

    // evaluate width field
    width = 0U;
    if (_is_digit(*format)) {
    2c0c:	213ff404 	addi	r4,r4,-48
    2c10:	21003fcc 	andi	r4,r4,255
    2c14:	01400244 	movi	r5,9
    2c18:	2901a62e 	bgeu	r5,r4,32b4 <_vsnprintf+0x860>
      width = _atoi(&format);
    }
    else if (*format == '*') {
    2c1c:	01000a84 	movi	r4,42
    2c20:	11000a1e 	bne	r2,r4,2c4c <_vsnprintf+0x1f8>
      const int w = va_arg(va, int);
    2c24:	e2400017 	ldw	r9,0(fp)
    2c28:	e0800104 	addi	r2,fp,4
      if (w < 0) {
    2c2c:	4800030e 	bge	r9,zero,2c3c <_vsnprintf+0x1e8>
        flags |= FLAGS_LEFT;    // reverse padding
    2c30:	84000094 	ori	r16,r16,2
        width = (unsigned int)-w;
    2c34:	026bc83a 	sub	r21,zero,r9
    2c38:	00000106 	br	2c40 <_vsnprintf+0x1ec>
      }
      else {
        width = (unsigned int)w;
    2c3c:	482b883a 	mov	r21,r9
      }
      format++;
    2c40:	3dc00044 	addi	r23,r7,1
    width = 0U;
    if (_is_digit(*format)) {
      width = _atoi(&format);
    }
    else if (*format == '*') {
      const int w = va_arg(va, int);
    2c44:	1039883a 	mov	fp,r2
    2c48:	00000106 	br	2c50 <_vsnprintf+0x1fc>
        default :                                   n = 0U; break;
      }
    } while (n);

    // evaluate width field
    width = 0U;
    2c4c:	002b883a 	mov	r21,zero
      format++;
    }

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
    2c50:	b9000007 	ldb	r4,0(r23)
    2c54:	00800b84 	movi	r2,46
    2c58:	2080191e 	bne	r4,r2,2cc0 <_vsnprintf+0x26c>
      flags |= FLAGS_PRECISION;
      format++;
      if (_is_digit(*format)) {
    2c5c:	b8800043 	ldbu	r2,1(r23)
    2c60:	01000244 	movi	r4,9
    }

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
      flags |= FLAGS_PRECISION;
    2c64:	84010014 	ori	r16,r16,1024
      format++;
      if (_is_digit(*format)) {
    2c68:	117ff404 	addi	r5,r2,-48
    2c6c:	29403fcc 	andi	r5,r5,255

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
      flags |= FLAGS_PRECISION;
      format++;
    2c70:	bc400044 	addi	r17,r23,1
      if (_is_digit(*format)) {
    2c74:	217fb336 	bltu	r4,r5,2b44 <__ram_exceptions_end+0xfe000b24>
    2c78:	0005883a 	mov	r2,zero

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
  while (_is_digit(**str)) {
    2c7c:	202f883a 	mov	r23,r4
    2c80:	88c00003 	ldbu	r3,0(r17)
    2c84:	193ff404 	addi	r4,r3,-48
    2c88:	21003fcc 	andi	r4,r4,255
    2c8c:	b93fb836 	bltu	r23,r4,2b70 <__ram_exceptions_end+0xfe000b50>
    2c90:	01400284 	movi	r5,10
    2c94:	1009883a 	mov	r4,r2
    2c98:	d8c00915 	stw	r3,36(sp)
    2c9c:	0004dbc0 	call	4dbc <__mulsi3>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2ca0:	d8c00917 	ldw	r3,36(sp)
    2ca4:	10bff404 	addi	r2,r2,-48
    2ca8:	8c400044 	addi	r17,r17,1
    2cac:	18c03fcc 	andi	r3,r3,255
    2cb0:	18c0201c 	xori	r3,r3,128
    2cb4:	18ffe004 	addi	r3,r3,-128
    2cb8:	1885883a 	add	r2,r3,r2
    2cbc:	003ff006 	br	2c80 <__ram_exceptions_end+0xfe000c60>
    2cc0:	b823883a 	mov	r17,r23
      }
      format++;
    }

    // evaluate precision field
    precision = 0U;
    2cc4:	0005883a 	mov	r2,zero
    2cc8:	003fa906 	br	2b70 <__ram_exceptions_end+0xfe000b50>
        format++;
      }
    }

    // evaluate length field
    switch (*format) {
    2ccc:	01401a04 	movi	r5,104
    2cd0:	21400826 	beq	r4,r5,2cf4 <_vsnprintf+0x2a0>
    2cd4:	01401a84 	movi	r5,106
    2cd8:	217fad1e 	bne	r4,r5,2b90 <__ram_exceptions_end+0xfe000b70>
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2cdc:	84008014 	ori	r16,r16,512
    2ce0:	00000c06 	br	2d14 <_vsnprintf+0x2c0>
    // evaluate length field
    switch (*format) {
      case 'l' :
        flags |= FLAGS_LONG;
        format++;
        if (*format == 'l') {
    2ce4:	89400047 	ldb	r5,1(r17)
    2ce8:	2900091e 	bne	r5,r4,2d10 <_vsnprintf+0x2bc>
          flags |= FLAGS_LONG_LONG;
    2cec:	8400c014 	ori	r16,r16,768
    2cf0:	00000506 	br	2d08 <_vsnprintf+0x2b4>
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
        format++;
        if (*format == 'h') {
    2cf4:	89400047 	ldb	r5,1(r17)
    2cf8:	29000226 	beq	r5,r4,2d04 <_vsnprintf+0x2b0>
          flags |= FLAGS_LONG_LONG;
          format++;
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
    2cfc:	84002014 	ori	r16,r16,128
    2d00:	00000406 	br	2d14 <_vsnprintf+0x2c0>
        format++;
        if (*format == 'h') {
          flags |= FLAGS_CHAR;
    2d04:	84003014 	ori	r16,r16,192
          format++;
    2d08:	8c400084 	addi	r17,r17,2
    2d0c:	003fa006 	br	2b90 <__ram_exceptions_end+0xfe000b70>
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2d10:	84004014 	ori	r16,r16,256
        format++;
    2d14:	8c400044 	addi	r17,r17,1
        break;
    2d18:	003f9d06 	br	2b90 <__ram_exceptions_end+0xfe000b70>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    2d1c:	01401884 	movi	r5,98
    2d20:	21402926 	beq	r4,r5,2dc8 <_vsnprintf+0x374>
    2d24:	29000216 	blt	r5,r4,2d30 <_vsnprintf+0x2dc>
    2d28:	01401604 	movi	r5,88
    2d2c:	00002506 	br	2dc4 <_vsnprintf+0x370>
    2d30:	014018c4 	movi	r5,99
    2d34:	2140e426 	beq	r4,r5,30c8 <_vsnprintf+0x674>
    2d38:	01401904 	movi	r5,100
    2d3c:	00002106 	br	2dc4 <_vsnprintf+0x370>
    2d40:	01401bc4 	movi	r5,111
    2d44:	21402026 	beq	r4,r5,2dc8 <_vsnprintf+0x374>
    2d48:	29000516 	blt	r5,r4,2d60 <_vsnprintf+0x30c>
    2d4c:	014019c4 	movi	r5,103
    2d50:	2140bf26 	beq	r4,r5,3050 <_vsnprintf+0x5fc>
    2d54:	2140ad16 	blt	r4,r5,300c <_vsnprintf+0x5b8>
    2d58:	01401a44 	movi	r5,105
    2d5c:	00001906 	br	2dc4 <_vsnprintf+0x370>
    2d60:	01401cc4 	movi	r5,115
    2d64:	21410226 	beq	r4,r5,3170 <_vsnprintf+0x71c>
    2d68:	29001316 	blt	r5,r4,2db8 <_vsnprintf+0x364>
    2d6c:	01401c04 	movi	r5,112
    2d70:	21414b1e 	bne	r4,r5,32a0 <_vsnprintf+0x84c>
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2d74:	d8800315 	stw	r2,12(sp)
    2d78:	84000854 	ori	r16,r16,33
    2d7c:	01000204 	movi	r4,8
    2d80:	00800404 	movi	r2,16
    2d84:	d9000415 	stw	r4,16(sp)
    2d88:	dc000515 	stw	r16,20(sp)
    2d8c:	d8800215 	stw	r2,8(sp)
    2d90:	d8000115 	stw	zero,4(sp)
    2d94:	e0800017 	ldw	r2,0(fp)
    2d98:	900f883a 	mov	r7,r18
    2d9c:	b00d883a 	mov	r6,r22
    2da0:	d8800015 	stw	r2,0(sp)
    2da4:	a00b883a 	mov	r5,r20
    2da8:	9809883a 	mov	r4,r19
    2dac:	e5c00104 	addi	r23,fp,4
    2db0:	0001bcc0 	call	1bcc <_ntoa_long>
    2db4:	00013606 	br	3290 <_vsnprintf+0x83c>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    2db8:	01401d44 	movi	r5,117
    2dbc:	21400226 	beq	r4,r5,2dc8 <_vsnprintf+0x374>
    2dc0:	01401e04 	movi	r5,120
    2dc4:	2141361e 	bne	r4,r5,32a0 <_vsnprintf+0x84c>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    2dc8:	01401e04 	movi	r5,120
    2dcc:	21400f26 	beq	r4,r5,2e0c <_vsnprintf+0x3b8>
    2dd0:	01401604 	movi	r5,88
    2dd4:	21400c26 	beq	r4,r5,2e08 <_vsnprintf+0x3b4>
          base = 16U;
        }
        else if (*format == 'o') {
    2dd8:	01401bc4 	movi	r5,111
    2ddc:	21414726 	beq	r4,r5,32fc <_vsnprintf+0x8a8>
          base =  8U;
        }
        else if (*format == 'b') {
    2de0:	01401884 	movi	r5,98
    2de4:	21414726 	beq	r4,r5,3304 <_vsnprintf+0x8b0>
          base =  2U;
        }
        else {
          base = 10U;
          flags &= ~FLAGS_HASH;   // no hash for dec format
    2de8:	017ffbc4 	movi	r5,-17
    2dec:	8160703a 	and	r16,r16,r5
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    2df0:	01401a44 	movi	r5,105
        }
        else if (*format == 'b') {
          base =  2U;
        }
        else {
          base = 10U;
    2df4:	01800284 	movi	r6,10
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    2df8:	21400726 	beq	r4,r5,2e18 <_vsnprintf+0x3c4>
    2dfc:	01401904 	movi	r5,100
    2e00:	21400526 	beq	r4,r5,2e18 <_vsnprintf+0x3c4>
    2e04:	00000206 	br	2e10 <_vsnprintf+0x3bc>
          base = 10U;
          flags &= ~FLAGS_HASH;   // no hash for dec format
        }
        // uppercase
        if (*format == 'X') {
          flags |= FLAGS_UPPERCASE;
    2e08:	84000814 	ori	r16,r16,32
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
          base = 16U;
    2e0c:	01800404 	movi	r6,16
          flags |= FLAGS_UPPERCASE;
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2e10:	017ffcc4 	movi	r5,-13
    2e14:	8160703a 	and	r16,r16,r5
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    2e18:	8141000c 	andi	r5,r16,1024
    2e1c:	28000226 	beq	r5,zero,2e28 <_vsnprintf+0x3d4>
          flags &= ~FLAGS_ZEROPAD;
    2e20:	017fff84 	movi	r5,-2
    2e24:	8160703a 	and	r16,r16,r5
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    2e28:	01c01a44 	movi	r7,105
    2e2c:	8140800c 	andi	r5,r16,512
    2e30:	21c00226 	beq	r4,r7,2e3c <_vsnprintf+0x3e8>
    2e34:	01c01904 	movi	r7,100
    2e38:	21c0391e 	bne	r4,r7,2f20 <_vsnprintf+0x4cc>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    2e3c:	28001226 	beq	r5,zero,2e88 <_vsnprintf+0x434>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    2e40:	e1000117 	ldw	r4,4(fp)
    2e44:	e1400017 	ldw	r5,0(fp)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2e48:	d8800515 	stw	r2,20(sp)
    2e4c:	2004d7fa 	srli	r2,r4,31
    2e50:	dc000715 	stw	r16,28(sp)
    2e54:	dd400615 	stw	r21,24(sp)
    2e58:	d8800215 	stw	r2,8(sp)
    2e5c:	d9800315 	stw	r6,12(sp)
    2e60:	d8000415 	stw	zero,16(sp)
        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
          // signed
          if (flags & FLAGS_LONG_LONG) {
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    2e64:	e5c00204 	addi	r23,fp,8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2e68:	2005883a 	mov	r2,r4
    2e6c:	2000040e 	bge	r4,zero,2e80 <_vsnprintf+0x42c>
    2e70:	014bc83a 	sub	r5,zero,r5
    2e74:	2808c03a 	cmpne	r4,r5,zero
    2e78:	0085c83a 	sub	r2,zero,r2
    2e7c:	1105c83a 	sub	r2,r2,r4
    2e80:	d9400015 	stw	r5,0(sp)
    2e84:	00003106 	br	2f4c <_vsnprintf+0x4f8>
#endif
          }
          else if (flags & FLAGS_LONG) {
    2e88:	8100400c 	andi	r4,r16,256
    2e8c:	e5c00104 	addi	r23,fp,4
    2e90:	20000b26 	beq	r4,zero,2ec0 <_vsnprintf+0x46c>
            const long value = va_arg(va, long);
    2e94:	e1000017 	ldw	r4,0(fp)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2e98:	d8800315 	stw	r2,12(sp)
    2e9c:	dc000515 	stw	r16,20(sp)
    2ea0:	2004d7fa 	srli	r2,r4,31
    2ea4:	dd400415 	stw	r21,16(sp)
    2ea8:	d9800215 	stw	r6,8(sp)
    2eac:	d8800115 	stw	r2,4(sp)
    2eb0:	2005883a 	mov	r2,r4
    2eb4:	2000370e 	bge	r4,zero,2f94 <_vsnprintf+0x540>
    2eb8:	0105c83a 	sub	r2,zero,r4
    2ebc:	00003506 	br	2f94 <_vsnprintf+0x540>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2ec0:	8140100c 	andi	r5,r16,64
    2ec4:	e1000017 	ldw	r4,0(fp)
    2ec8:	28000426 	beq	r5,zero,2edc <_vsnprintf+0x488>
    2ecc:	21003fcc 	andi	r4,r4,255
    2ed0:	2100201c 	xori	r4,r4,128
    2ed4:	213fe004 	addi	r4,r4,-128
    2ed8:	00000506 	br	2ef0 <_vsnprintf+0x49c>
    2edc:	8140200c 	andi	r5,r16,128
    2ee0:	28000326 	beq	r5,zero,2ef0 <_vsnprintf+0x49c>
    2ee4:	213fffcc 	andi	r4,r4,65535
    2ee8:	2120001c 	xori	r4,r4,32768
    2eec:	21200004 	addi	r4,r4,-32768
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2ef0:	d8800315 	stw	r2,12(sp)
    2ef4:	2004d7fa 	srli	r2,r4,31
    2ef8:	dc000515 	stw	r16,20(sp)
    2efc:	dd400415 	stw	r21,16(sp)
    2f00:	d8800115 	stw	r2,4(sp)
    2f04:	d9800215 	stw	r6,8(sp)
          else if (flags & FLAGS_LONG) {
            const long value = va_arg(va, long);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2f08:	b839883a 	mov	fp,r23
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2f0c:	2005883a 	mov	r2,r4
    2f10:	2000010e 	bge	r4,zero,2f18 <_vsnprintf+0x4c4>
    2f14:	0105c83a 	sub	r2,zero,r4
    2f18:	d8800015 	stw	r2,0(sp)
    2f1c:	00003306 	br	2fec <_vsnprintf+0x598>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    2f20:	28001326 	beq	r5,zero,2f70 <_vsnprintf+0x51c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    2f24:	dc000715 	stw	r16,28(sp)
    2f28:	dd400615 	stw	r21,24(sp)
    2f2c:	d8800515 	stw	r2,20(sp)
    2f30:	d9800315 	stw	r6,12(sp)
    2f34:	d8000415 	stw	zero,16(sp)
    2f38:	d8000215 	stw	zero,8(sp)
    2f3c:	e0800017 	ldw	r2,0(fp)
    2f40:	e5c00204 	addi	r23,fp,8
    2f44:	d8800015 	stw	r2,0(sp)
    2f48:	e0800117 	ldw	r2,4(fp)
    2f4c:	d8800115 	stw	r2,4(sp)
    2f50:	900f883a 	mov	r7,r18
    2f54:	b00d883a 	mov	r6,r22
    2f58:	a00b883a 	mov	r5,r20
    2f5c:	9809883a 	mov	r4,r19
    2f60:	0001d400 	call	1d40 <_ntoa_long_long>
    2f64:	102d883a 	mov	r22,r2
    2f68:	b839883a 	mov	fp,r23
    2f6c:	00002506 	br	3004 <_vsnprintf+0x5b0>
#endif
          }
          else if (flags & FLAGS_LONG) {
    2f70:	8100400c 	andi	r4,r16,256
    2f74:	e5c00104 	addi	r23,fp,4
    2f78:	20000d26 	beq	r4,zero,2fb0 <_vsnprintf+0x55c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2f7c:	dc000515 	stw	r16,20(sp)
    2f80:	dd400415 	stw	r21,16(sp)
    2f84:	d8800315 	stw	r2,12(sp)
    2f88:	d9800215 	stw	r6,8(sp)
    2f8c:	d8000115 	stw	zero,4(sp)
    2f90:	e0800017 	ldw	r2,0(fp)
    2f94:	d8800015 	stw	r2,0(sp)
    2f98:	900f883a 	mov	r7,r18
    2f9c:	b00d883a 	mov	r6,r22
    2fa0:	a00b883a 	mov	r5,r20
    2fa4:	9809883a 	mov	r4,r19
    2fa8:	0001bcc0 	call	1bcc <_ntoa_long>
    2fac:	003fed06 	br	2f64 <__ram_exceptions_end+0xfe000f44>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2fb0:	8140100c 	andi	r5,r16,64
    2fb4:	e1000017 	ldw	r4,0(fp)
    2fb8:	28000226 	beq	r5,zero,2fc4 <_vsnprintf+0x570>
    2fbc:	21003fcc 	andi	r4,r4,255
    2fc0:	00000306 	br	2fd0 <_vsnprintf+0x57c>
    2fc4:	8140200c 	andi	r5,r16,128
    2fc8:	28000126 	beq	r5,zero,2fd0 <_vsnprintf+0x57c>
    2fcc:	213fffcc 	andi	r4,r4,65535
    2fd0:	b839883a 	mov	fp,r23
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2fd4:	dc000515 	stw	r16,20(sp)
    2fd8:	dd400415 	stw	r21,16(sp)
    2fdc:	d8800315 	stw	r2,12(sp)
    2fe0:	d9800215 	stw	r6,8(sp)
    2fe4:	d8000115 	stw	zero,4(sp)
    2fe8:	d9000015 	stw	r4,0(sp)
    2fec:	b00d883a 	mov	r6,r22
    2ff0:	900f883a 	mov	r7,r18
    2ff4:	a00b883a 	mov	r5,r20
    2ff8:	9809883a 	mov	r4,r19
    2ffc:	0001bcc0 	call	1bcc <_ntoa_long>
    3000:	102d883a 	mov	r22,r2
          }
        }
        format++;
    3004:	89c00044 	addi	r7,r17,1
        break;
    3008:	003ea606 	br	2aa4 <__ram_exceptions_end+0xfe000a84>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    300c:	01401184 	movi	r5,70
    3010:	2140011e 	bne	r4,r5,3018 <_vsnprintf+0x5c4>
    3014:	84000814 	ori	r16,r16,32
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3018:	dc000415 	stw	r16,16(sp)
    301c:	dd400315 	stw	r21,12(sp)
    3020:	d8800215 	stw	r2,8(sp)
    3024:	e0800017 	ldw	r2,0(fp)
    3028:	900f883a 	mov	r7,r18
    302c:	b00d883a 	mov	r6,r22
    3030:	d8800015 	stw	r2,0(sp)
    3034:	e0800117 	ldw	r2,4(fp)
    3038:	a00b883a 	mov	r5,r20
    303c:	9809883a 	mov	r4,r19
    3040:	d8800115 	stw	r2,4(sp)
    3044:	e5c00204 	addi	r23,fp,8
    3048:	0001f180 	call	1f18 <_ftoa>
    304c:	00009006 	br	3290 <_vsnprintf+0x83c>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    3050:	017ff7c4 	movi	r5,-33
    3054:	394a703a 	and	r5,r7,r5
    3058:	29403fcc 	andi	r5,r5,255
    305c:	2940201c 	xori	r5,r5,128
    3060:	297fe004 	addi	r5,r5,-128
    3064:	028011c4 	movi	r10,71
    3068:	01801144 	movi	r6,69
    306c:	2a80061e 	bne	r5,r10,3088 <_vsnprintf+0x634>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    3070:	013fff44 	movi	r4,-3
    3074:	3908703a 	and	r4,r7,r4
    3078:	21003fcc 	andi	r4,r4,255
    307c:	2100201c 	xori	r4,r4,128
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    3080:	84020014 	ori	r16,r16,2048
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    3084:	213fe004 	addi	r4,r4,-128
    3088:	2180011e 	bne	r4,r6,3090 <_vsnprintf+0x63c>
    308c:	84000814 	ori	r16,r16,32
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3090:	dc000415 	stw	r16,16(sp)
    3094:	dd400315 	stw	r21,12(sp)
    3098:	d8800215 	stw	r2,8(sp)
    309c:	e0800017 	ldw	r2,0(fp)
    30a0:	900f883a 	mov	r7,r18
    30a4:	b00d883a 	mov	r6,r22
    30a8:	d8800015 	stw	r2,0(sp)
    30ac:	e0800117 	ldw	r2,4(fp)
    30b0:	a00b883a 	mov	r5,r20
    30b4:	9809883a 	mov	r4,r19
    30b8:	d8800115 	stw	r2,4(sp)
    30bc:	e5c00204 	addi	r23,fp,8
    30c0:	000244c0 	call	244c <_etoa>
    30c4:	00007206 	br	3290 <_vsnprintf+0x83c>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    30c8:	8400008c 	andi	r16,r16,2
    30cc:	80000c1e 	bne	r16,zero,3100 <_vsnprintf+0x6ac>
    30d0:	002f883a 	mov	r23,zero
    30d4:	b5cd883a 	add	r6,r22,r23
    30d8:	b8c00084 	addi	r3,r23,2
    30dc:	bdc00044 	addi	r23,r23,1
          while (l++ < width) {
    30e0:	bd40052e 	bgeu	r23,r21,30f8 <_vsnprintf+0x6a4>
            out(' ', buffer, idx++, maxlen);
    30e4:	900f883a 	mov	r7,r18
    30e8:	a00b883a 	mov	r5,r20
    30ec:	01000804 	movi	r4,32
    30f0:	983ee83a 	callr	r19
    30f4:	003ff706 	br	30d4 <__ram_exceptions_end+0xfe0010b4>
    30f8:	302d883a 	mov	r22,r6
    30fc:	00000106 	br	3104 <_vsnprintf+0x6b0>
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    3100:	00c00044 	movi	r3,1
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    3104:	e1000007 	ldb	r4,0(fp)
    3108:	b0800044 	addi	r2,r22,1
    310c:	d8800a15 	stw	r2,40(sp)
    3110:	d8c00915 	stw	r3,36(sp)
    3114:	900f883a 	mov	r7,r18
    3118:	b00d883a 	mov	r6,r22
    311c:	a00b883a 	mov	r5,r20
    3120:	983ee83a 	callr	r19
    3124:	e5c00104 	addi	r23,fp,4
        // post padding
        if (flags & FLAGS_LEFT) {
    3128:	d8800a17 	ldw	r2,40(sp)
    312c:	d8c00917 	ldw	r3,36(sp)
    3130:	80000c26 	beq	r16,zero,3164 <_vsnprintf+0x710>
    3134:	1f3fffc4 	addi	fp,r3,-1
    3138:	e5b9c83a 	sub	fp,fp,r22
          while (l++ < width) {
    313c:	1707883a 	add	r3,r2,fp
    3140:	1d40082e 	bgeu	r3,r21,3164 <_vsnprintf+0x710>
            out(' ', buffer, idx++, maxlen);
    3144:	100d883a 	mov	r6,r2
    3148:	900f883a 	mov	r7,r18
    314c:	a00b883a 	mov	r5,r20
    3150:	01000804 	movi	r4,32
    3154:	14000044 	addi	r16,r2,1
    3158:	983ee83a 	callr	r19
    315c:	8005883a 	mov	r2,r16
    3160:	003ff606 	br	313c <__ram_exceptions_end+0xfe00111c>
          }
        }
        format++;
    3164:	89c00044 	addi	r7,r17,1
        break;
    3168:	102d883a 	mov	r22,r2
    316c:	00004a06 	br	3298 <_vsnprintf+0x844>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    3170:	e0c00104 	addi	r3,fp,4
    3174:	d8c00815 	stw	r3,32(sp)
    3178:	e2800017 	ldw	r10,0(fp)
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    317c:	1000021e 	bne	r2,zero,3188 <_vsnprintf+0x734>
    3180:	013fffc4 	movi	r4,-1
    3184:	00000106 	br	318c <_vsnprintf+0x738>
    3188:	1009883a 	mov	r4,r2
    318c:	5109883a 	add	r4,r10,r4
    3190:	5011883a 	mov	r8,r10
// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
  const char* s;
  for (s = str; *s && maxsize--; ++s);
    3194:	41400007 	ldb	r5,0(r8)
    3198:	28000326 	beq	r5,zero,31a8 <_vsnprintf+0x754>
    319c:	41000226 	beq	r8,r4,31a8 <_vsnprintf+0x754>
    31a0:	42000044 	addi	r8,r8,1
    31a4:	003ffb06 	br	3194 <__ram_exceptions_end+0xfe001174>

      case 's' : {
        const char* p = va_arg(va, char*);
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
        // pre padding
        if (flags & FLAGS_PRECISION) {
    31a8:	85c1000c 	andi	r23,r16,1024
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
  const char* s;
  for (s = str; *s && maxsize--; ++s);
  return (unsigned int)(s - str);
    31ac:	42b9c83a 	sub	fp,r8,r10

      case 's' : {
        const char* p = va_arg(va, char*);
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
        // pre padding
        if (flags & FLAGS_PRECISION) {
    31b0:	b8000226 	beq	r23,zero,31bc <_vsnprintf+0x768>
          l = (l < precision ? l : precision);
    31b4:	1700012e 	bgeu	r2,fp,31bc <_vsnprintf+0x768>
    31b8:	1039883a 	mov	fp,r2
        }
        if (!(flags & FLAGS_LEFT)) {
    31bc:	8400008c 	andi	r16,r16,2
    31c0:	8000111e 	bne	r16,zero,3208 <_vsnprintf+0x7b4>
    31c4:	e009883a 	mov	r4,fp
    31c8:	b739c83a 	sub	fp,r22,fp
    31cc:	270d883a 	add	r6,r4,fp
          while (l++ < width) {
    31d0:	25800044 	addi	r22,r4,1
    31d4:	25400a2e 	bgeu	r4,r21,3200 <_vsnprintf+0x7ac>
            out(' ', buffer, idx++, maxlen);
    31d8:	01000804 	movi	r4,32
    31dc:	d8800a15 	stw	r2,40(sp)
    31e0:	da800915 	stw	r10,36(sp)
    31e4:	900f883a 	mov	r7,r18
    31e8:	a00b883a 	mov	r5,r20
    31ec:	983ee83a 	callr	r19
        // pre padding
        if (flags & FLAGS_PRECISION) {
          l = (l < precision ? l : precision);
        }
        if (!(flags & FLAGS_LEFT)) {
          while (l++ < width) {
    31f0:	b009883a 	mov	r4,r22
    31f4:	da800917 	ldw	r10,36(sp)
    31f8:	d8800a17 	ldw	r2,40(sp)
    31fc:	003ff306 	br	31cc <__ram_exceptions_end+0xfe0011ac>
    3200:	b039883a 	mov	fp,r22
    3204:	302d883a 	mov	r22,r6
    3208:	b2adc83a 	sub	r22,r22,r10
            out(' ', buffer, idx++, maxlen);
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    320c:	51000007 	ldb	r4,0(r10)
    3210:	558d883a 	add	r6,r10,r22
    3214:	20000e26 	beq	r4,zero,3250 <_vsnprintf+0x7fc>
    3218:	b800091e 	bne	r23,zero,3240 <_vsnprintf+0x7ec>
          out(*(p++), buffer, idx++, maxlen);
    321c:	52800044 	addi	r10,r10,1
    3220:	d8800a15 	stw	r2,40(sp)
    3224:	da800915 	stw	r10,36(sp)
    3228:	900f883a 	mov	r7,r18
    322c:	a00b883a 	mov	r5,r20
    3230:	983ee83a 	callr	r19
    3234:	da800917 	ldw	r10,36(sp)
    3238:	d8800a17 	ldw	r2,40(sp)
    323c:	003ff306 	br	320c <__ram_exceptions_end+0xfe0011ec>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3240:	117fffc4 	addi	r5,r2,-1
    3244:	10000226 	beq	r2,zero,3250 <_vsnprintf+0x7fc>
    3248:	2805883a 	mov	r2,r5
    324c:	003ff306 	br	321c <__ram_exceptions_end+0xfe0011fc>
    3250:	302d883a 	mov	r22,r6
          out(*(p++), buffer, idx++, maxlen);
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    3254:	80000b26 	beq	r16,zero,3284 <_vsnprintf+0x830>
    3258:	e1a1c83a 	sub	r16,fp,r6
          while (l++ < width) {
    325c:	b405883a 	add	r2,r22,r16
    3260:	1540082e 	bgeu	r2,r21,3284 <_vsnprintf+0x830>
            out(' ', buffer, idx++, maxlen);
    3264:	b00d883a 	mov	r6,r22
    3268:	b5c00044 	addi	r23,r22,1
    326c:	900f883a 	mov	r7,r18
    3270:	a00b883a 	mov	r5,r20
    3274:	01000804 	movi	r4,32
    3278:	983ee83a 	callr	r19
    327c:	b82d883a 	mov	r22,r23
    3280:	003ff606 	br	325c <__ram_exceptions_end+0xfe00123c>
          }
        }
        format++;
    3284:	89c00044 	addi	r7,r17,1
        format++;
        break;
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    3288:	df000817 	ldw	fp,32(sp)
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
        break;
    328c:	003e0506 	br	2aa4 <__ram_exceptions_end+0xfe000a84>
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    3290:	102d883a 	mov	r22,r2
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    3294:	89c00044 	addi	r7,r17,1
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    3298:	b839883a 	mov	fp,r23
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
        break;
    329c:	003e0106 	br	2aa4 <__ram_exceptions_end+0xfe000a84>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    32a0:	b4000044 	addi	r16,r22,1
    32a4:	900f883a 	mov	r7,r18
    32a8:	b00d883a 	mov	r6,r22
    32ac:	a00b883a 	mov	r5,r20
    32b0:	003e4b06 	br	2be0 <__ram_exceptions_end+0xfe000bc0>
    32b4:	002b883a 	mov	r21,zero

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
  while (_is_digit(**str)) {
    32b8:	2823883a 	mov	r17,r5
    32bc:	b8c00003 	ldbu	r3,0(r23)
    32c0:	18bff404 	addi	r2,r3,-48
    32c4:	10803fcc 	andi	r2,r2,255
    32c8:	88be6136 	bltu	r17,r2,2c50 <__ram_exceptions_end+0xfe000c30>
    32cc:	a809883a 	mov	r4,r21
    32d0:	01400284 	movi	r5,10
    32d4:	d8c00915 	stw	r3,36(sp)
    32d8:	0004dbc0 	call	4dbc <__mulsi3>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    32dc:	d8c00917 	ldw	r3,36(sp)
    32e0:	10bff404 	addi	r2,r2,-48
    32e4:	bdc00044 	addi	r23,r23,1
    32e8:	18c03fcc 	andi	r3,r3,255
    32ec:	18c0201c 	xori	r3,r3,128
    32f0:	18ffe004 	addi	r3,r3,-128
    32f4:	18ab883a 	add	r21,r3,r2
    32f8:	003ff006 	br	32bc <__ram_exceptions_end+0xfe00129c>
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
          base = 16U;
        }
        else if (*format == 'o') {
          base =  8U;
    32fc:	01800204 	movi	r6,8
    3300:	003ebe06 	br	2dfc <__ram_exceptions_end+0xfe000ddc>
        }
        else if (*format == 'b') {
          base =  2U;
    3304:	01800084 	movi	r6,2
    3308:	003ebc06 	br	2dfc <__ram_exceptions_end+0xfe000ddc>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    330c:	900f883a 	mov	r7,r18
    3310:	a00b883a 	mov	r5,r20
    3314:	0009883a 	mov	r4,zero
    3318:	983ee83a 	callr	r19

  // return written chars without terminating \0
  return (int)idx;
}
    331c:	b005883a 	mov	r2,r22
    3320:	dfc01417 	ldw	ra,80(sp)
    3324:	df001317 	ldw	fp,76(sp)
    3328:	ddc01217 	ldw	r23,72(sp)
    332c:	dd801117 	ldw	r22,68(sp)
    3330:	dd401017 	ldw	r21,64(sp)
    3334:	dd000f17 	ldw	r20,60(sp)
    3338:	dcc00e17 	ldw	r19,56(sp)
    333c:	dc800d17 	ldw	r18,52(sp)
    3340:	dc400c17 	ldw	r17,48(sp)
    3344:	dc000b17 	ldw	r16,44(sp)
    3348:	dec01504 	addi	sp,sp,84
    334c:	f800283a 	ret

00003350 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    3350:	defffa04 	addi	sp,sp,-24
    3354:	dfc00215 	stw	ra,8(sp)
    3358:	d9400315 	stw	r5,12(sp)
    335c:	d9800415 	stw	r6,16(sp)
    3360:	d9c00515 	stw	r7,20(sp)
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    3364:	d8800304 	addi	r2,sp,12
    3368:	200f883a 	mov	r7,r4
    336c:	01000034 	movhi	r4,0
    3370:	d8800015 	stw	r2,0(sp)
    3374:	01bfffc4 	movi	r6,-1
    3378:	d9400104 	addi	r5,sp,4
    337c:	2107b804 	addi	r4,r4,7904
    3380:	0002a540 	call	2a54 <_vsnprintf>
  va_end(va);
  return ret;
}
    3384:	dfc00217 	ldw	ra,8(sp)
    3388:	dec00604 	addi	sp,sp,24
    338c:	f800283a 	ret

00003390 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
    3390:	defffc04 	addi	sp,sp,-16
    3394:	dfc00115 	stw	ra,4(sp)
    3398:	d9800215 	stw	r6,8(sp)
    339c:	d9c00315 	stw	r7,12(sp)
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    33a0:	d8800204 	addi	r2,sp,8
    33a4:	280f883a 	mov	r7,r5
    33a8:	200b883a 	mov	r5,r4
    33ac:	01000034 	movhi	r4,0
    33b0:	d8800015 	stw	r2,0(sp)
    33b4:	01bfffc4 	movi	r6,-1
    33b8:	21064204 	addi	r4,r4,6408
    33bc:	0002a540 	call	2a54 <_vsnprintf>
  va_end(va);
  return ret;
}
    33c0:	dfc00117 	ldw	ra,4(sp)
    33c4:	dec00404 	addi	sp,sp,16
    33c8:	f800283a 	ret

000033cc <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
    33cc:	defffd04 	addi	sp,sp,-12
    33d0:	dfc00115 	stw	ra,4(sp)
    33d4:	d9c00215 	stw	r7,8(sp)
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    33d8:	d8800204 	addi	r2,sp,8
    33dc:	300f883a 	mov	r7,r6
    33e0:	280d883a 	mov	r6,r5
    33e4:	200b883a 	mov	r5,r4
    33e8:	01000034 	movhi	r4,0
    33ec:	d8800015 	stw	r2,0(sp)
    33f0:	21064204 	addi	r4,r4,6408
    33f4:	0002a540 	call	2a54 <_vsnprintf>
  va_end(va);
  return ret;
}
    33f8:	dfc00117 	ldw	ra,4(sp)
    33fc:	dec00304 	addi	sp,sp,12
    3400:	f800283a 	ret

00003404 <vprintf_>:


int vprintf_(const char* format, va_list va)
{
    3404:	defffd04 	addi	sp,sp,-12
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    3408:	200f883a 	mov	r7,r4
    340c:	01000034 	movhi	r4,0
    3410:	d9400015 	stw	r5,0(sp)
    3414:	01bfffc4 	movi	r6,-1
    3418:	d9400104 	addi	r5,sp,4
    341c:	2107b804 	addi	r4,r4,7904
  return ret;
}


int vprintf_(const char* format, va_list va)
{
    3420:	dfc00215 	stw	ra,8(sp)
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    3424:	0002a540 	call	2a54 <_vsnprintf>
}
    3428:	dfc00217 	ldw	ra,8(sp)
    342c:	dec00304 	addi	sp,sp,12
    3430:	f800283a 	ret

00003434 <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
    3434:	defffe04 	addi	sp,sp,-8
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    3438:	d9c00015 	stw	r7,0(sp)
    343c:	300f883a 	mov	r7,r6
    3440:	280d883a 	mov	r6,r5
    3444:	200b883a 	mov	r5,r4
    3448:	01000034 	movhi	r4,0
    344c:	21064204 	addi	r4,r4,6408
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
    3450:	dfc00115 	stw	ra,4(sp)
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    3454:	0002a540 	call	2a54 <_vsnprintf>
}
    3458:	dfc00117 	ldw	ra,4(sp)
    345c:	dec00204 	addi	sp,sp,8
    3460:	f800283a 	ret

00003464 <fctprintf>:


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
    3464:	defffb04 	addi	sp,sp,-20
    3468:	dfc00315 	stw	ra,12(sp)
    346c:	d9c00415 	stw	r7,16(sp)
  va_list va;
  va_start(va, format);
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    3470:	d9000115 	stw	r4,4(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    3474:	d8800404 	addi	r2,sp,16
    3478:	01000034 	movhi	r4,0

int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
  va_list va;
  va_start(va, format);
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    347c:	d9400215 	stw	r5,8(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    3480:	300f883a 	mov	r7,r6
    3484:	d8800015 	stw	r2,0(sp)
    3488:	01bfffc4 	movi	r6,-1
    348c:	d9400104 	addi	r5,sp,4
    3490:	2107be04 	addi	r4,r4,7928
    3494:	0002a540 	call	2a54 <_vsnprintf>
  va_end(va);
  return ret;
}
    3498:	dfc00317 	ldw	ra,12(sp)
    349c:	dec00504 	addi	sp,sp,20
    34a0:	f800283a 	ret

000034a4 <expf>:
    34a4:	defff304 	addi	sp,sp,-52
    34a8:	dc800b15 	stw	r18,44(sp)
    34ac:	04800074 	movhi	r18,1
    34b0:	dc400a15 	stw	r17,40(sp)
    34b4:	dc000915 	stw	r16,36(sp)
    34b8:	dfc00c15 	stw	ra,48(sp)
    34bc:	94ad1a04 	addi	r18,r18,-19352
    34c0:	2023883a 	mov	r17,r4
    34c4:	00037880 	call	3788 <__ieee754_expf>
    34c8:	90c00017 	ldw	r3,0(r18)
    34cc:	1021883a 	mov	r16,r2
    34d0:	00bfffc4 	movi	r2,-1
    34d4:	18802a26 	beq	r3,r2,3580 <expf+0xdc>
    34d8:	8809883a 	mov	r4,r17
    34dc:	0003f640 	call	3f64 <finitef>
    34e0:	10002726 	beq	r2,zero,3580 <expf+0xdc>
    34e4:	0150ac74 	movhi	r5,17073
    34e8:	295c6004 	addi	r5,r5,29056
    34ec:	8809883a 	mov	r4,r17
    34f0:	00057640 	call	5764 <__gesf2>
    34f4:	00802916 	blt	zero,r2,359c <expf+0xf8>
    34f8:	0170b434 	movhi	r5,49872
    34fc:	297c6d44 	addi	r5,r5,-3659
    3500:	8809883a 	mov	r4,r17
    3504:	00058200 	call	5820 <__lesf2>
    3508:	10001d0e 	bge	r2,zero,3580 <expf+0xdc>
    350c:	00800104 	movi	r2,4
    3510:	d8800015 	stw	r2,0(sp)
    3514:	00800074 	movhi	r2,1
    3518:	8809883a 	mov	r4,r17
    351c:	10a49804 	addi	r2,r2,-28064
    3520:	d8800115 	stw	r2,4(sp)
    3524:	d8000815 	stw	zero,32(sp)
    3528:	0008cc00 	call	8cc0 <__extendsfdf2>
    352c:	91000017 	ldw	r4,0(r18)
    3530:	d8800415 	stw	r2,16(sp)
    3534:	d8800215 	stw	r2,8(sp)
    3538:	d8c00515 	stw	r3,20(sp)
    353c:	d8c00315 	stw	r3,12(sp)
    3540:	d8000615 	stw	zero,24(sp)
    3544:	d8000715 	stw	zero,28(sp)
    3548:	00800084 	movi	r2,2
    354c:	20802c26 	beq	r4,r2,3600 <expf+0x15c>
    3550:	d809883a 	mov	r4,sp
    3554:	0003f500 	call	3f50 <matherr>
    3558:	10002926 	beq	r2,zero,3600 <expf+0x15c>
    355c:	d8800817 	ldw	r2,32(sp)
    3560:	10000326 	beq	r2,zero,3570 <expf+0xcc>
    3564:	0008fdc0 	call	8fdc <__errno>
    3568:	d8c00817 	ldw	r3,32(sp)
    356c:	10c00015 	stw	r3,0(r2)
    3570:	d9000617 	ldw	r4,24(sp)
    3574:	d9400717 	ldw	r5,28(sp)
    3578:	0008dd00 	call	8dd0 <__truncdfsf2>
    357c:	00000106 	br	3584 <expf+0xe0>
    3580:	8005883a 	mov	r2,r16
    3584:	dfc00c17 	ldw	ra,48(sp)
    3588:	dc800b17 	ldw	r18,44(sp)
    358c:	dc400a17 	ldw	r17,40(sp)
    3590:	dc000917 	ldw	r16,36(sp)
    3594:	dec00d04 	addi	sp,sp,52
    3598:	f800283a 	ret
    359c:	008000c4 	movi	r2,3
    35a0:	d8800015 	stw	r2,0(sp)
    35a4:	00800074 	movhi	r2,1
    35a8:	8809883a 	mov	r4,r17
    35ac:	10a49804 	addi	r2,r2,-28064
    35b0:	d8800115 	stw	r2,4(sp)
    35b4:	d8000815 	stw	zero,32(sp)
    35b8:	0008cc00 	call	8cc0 <__extendsfdf2>
    35bc:	91000017 	ldw	r4,0(r18)
    35c0:	d8800415 	stw	r2,16(sp)
    35c4:	d8c00515 	stw	r3,20(sp)
    35c8:	d8800215 	stw	r2,8(sp)
    35cc:	d8c00315 	stw	r3,12(sp)
    35d0:	2000061e 	bne	r4,zero,35ec <expf+0x148>
    35d4:	00b80034 	movhi	r2,57344
    35d8:	d8800615 	stw	r2,24(sp)
    35dc:	0091fc34 	movhi	r2,18416
    35e0:	10bfffc4 	addi	r2,r2,-1
    35e4:	d8800715 	stw	r2,28(sp)
    35e8:	003fd906 	br	3550 <__ram_exceptions_end+0xfe001530>
    35ec:	009ffc34 	movhi	r2,32752
    35f0:	d8800715 	stw	r2,28(sp)
    35f4:	d8000615 	stw	zero,24(sp)
    35f8:	00800084 	movi	r2,2
    35fc:	20bfd41e 	bne	r4,r2,3550 <__ram_exceptions_end+0xfe001530>
    3600:	0008fdc0 	call	8fdc <__errno>
    3604:	00c00884 	movi	r3,34
    3608:	10c00015 	stw	r3,0(r2)
    360c:	003fd306 	br	355c <__ram_exceptions_end+0xfe00153c>

00003610 <logf>:
    3610:	defff304 	addi	sp,sp,-52
    3614:	dc800b15 	stw	r18,44(sp)
    3618:	04800074 	movhi	r18,1
    361c:	dc400a15 	stw	r17,40(sp)
    3620:	dc000915 	stw	r16,36(sp)
    3624:	dfc00c15 	stw	ra,48(sp)
    3628:	94ad1a04 	addi	r18,r18,-19352
    362c:	2023883a 	mov	r17,r4
    3630:	0003ab80 	call	3ab8 <__ieee754_logf>
    3634:	90c00017 	ldw	r3,0(r18)
    3638:	1021883a 	mov	r16,r2
    363c:	00bfffc4 	movi	r2,-1
    3640:	18800726 	beq	r3,r2,3660 <logf+0x50>
    3644:	8809883a 	mov	r4,r17
    3648:	0003f7c0 	call	3f7c <__fpclassifyf>
    364c:	10000426 	beq	r2,zero,3660 <logf+0x50>
    3650:	000b883a 	mov	r5,zero
    3654:	8809883a 	mov	r4,r17
    3658:	00057640 	call	5764 <__gesf2>
    365c:	0080070e 	bge	zero,r2,367c <logf+0x6c>
    3660:	8005883a 	mov	r2,r16
    3664:	dfc00c17 	ldw	ra,48(sp)
    3668:	dc800b17 	ldw	r18,44(sp)
    366c:	dc400a17 	ldw	r17,40(sp)
    3670:	dc000917 	ldw	r16,36(sp)
    3674:	dec00d04 	addi	sp,sp,52
    3678:	f800283a 	ret
    367c:	00800074 	movhi	r2,1
    3680:	8809883a 	mov	r4,r17
    3684:	10a49a04 	addi	r2,r2,-28056
    3688:	d8000815 	stw	zero,32(sp)
    368c:	d8800115 	stw	r2,4(sp)
    3690:	0008cc00 	call	8cc0 <__extendsfdf2>
    3694:	94000017 	ldw	r16,0(r18)
    3698:	d8800415 	stw	r2,16(sp)
    369c:	d8c00515 	stw	r3,20(sp)
    36a0:	d8800215 	stw	r2,8(sp)
    36a4:	d8c00315 	stw	r3,12(sp)
    36a8:	000b883a 	mov	r5,zero
    36ac:	8809883a 	mov	r4,r17
    36b0:	8000101e 	bne	r16,zero,36f4 <logf+0xe4>
    36b4:	00b80034 	movhi	r2,57344
    36b8:	d8800615 	stw	r2,24(sp)
    36bc:	00b1fc34 	movhi	r2,51184
    36c0:	10bfffc4 	addi	r2,r2,-1
    36c4:	d8800715 	stw	r2,28(sp)
    36c8:	00056ec0 	call	56ec <__eqsf2>
    36cc:	1000201e 	bne	r2,zero,3750 <logf+0x140>
    36d0:	00800084 	movi	r2,2
    36d4:	d8800015 	stw	r2,0(sp)
    36d8:	d809883a 	mov	r4,sp
    36dc:	0003f500 	call	3f50 <matherr>
    36e0:	1000151e 	bne	r2,zero,3738 <logf+0x128>
    36e4:	0008fdc0 	call	8fdc <__errno>
    36e8:	00c00884 	movi	r3,34
    36ec:	10c00015 	stw	r3,0(r2)
    36f0:	00001106 	br	3738 <logf+0x128>
    36f4:	00bffc34 	movhi	r2,65520
    36f8:	d8000615 	stw	zero,24(sp)
    36fc:	d8800715 	stw	r2,28(sp)
    3700:	00056ec0 	call	56ec <__eqsf2>
    3704:	10001826 	beq	r2,zero,3768 <logf+0x158>
    3708:	00800044 	movi	r2,1
    370c:	d8800015 	stw	r2,0(sp)
    3710:	00800084 	movi	r2,2
    3714:	8080101e 	bne	r16,r2,3758 <logf+0x148>
    3718:	0008fdc0 	call	8fdc <__errno>
    371c:	00c00844 	movi	r3,33
    3720:	10c00015 	stw	r3,0(r2)
    3724:	01000074 	movhi	r4,1
    3728:	21247f04 	addi	r4,r4,-28164
    372c:	0003f580 	call	3f58 <nan>
    3730:	d8800615 	stw	r2,24(sp)
    3734:	d8c00715 	stw	r3,28(sp)
    3738:	d8800817 	ldw	r2,32(sp)
    373c:	10000e1e 	bne	r2,zero,3778 <logf+0x168>
    3740:	d9000617 	ldw	r4,24(sp)
    3744:	d9400717 	ldw	r5,28(sp)
    3748:	0008dd00 	call	8dd0 <__truncdfsf2>
    374c:	003fc506 	br	3664 <__ram_exceptions_end+0xfe001644>
    3750:	00800044 	movi	r2,1
    3754:	d8800015 	stw	r2,0(sp)
    3758:	d809883a 	mov	r4,sp
    375c:	0003f500 	call	3f50 <matherr>
    3760:	103ff01e 	bne	r2,zero,3724 <__ram_exceptions_end+0xfe001704>
    3764:	003fec06 	br	3718 <__ram_exceptions_end+0xfe0016f8>
    3768:	00800084 	movi	r2,2
    376c:	d8800015 	stw	r2,0(sp)
    3770:	80bfdc26 	beq	r16,r2,36e4 <__ram_exceptions_end+0xfe0016c4>
    3774:	003fd806 	br	36d8 <__ram_exceptions_end+0xfe0016b8>
    3778:	0008fdc0 	call	8fdc <__errno>
    377c:	d8c00817 	ldw	r3,32(sp)
    3780:	10c00015 	stw	r3,0(r2)
    3784:	003fee06 	br	3740 <__ram_exceptions_end+0xfe001720>

00003788 <__ieee754_expf>:
    3788:	00a00034 	movhi	r2,32768
    378c:	defffa04 	addi	sp,sp,-24
    3790:	10bfffc4 	addi	r2,r2,-1
    3794:	dfc00515 	stw	ra,20(sp)
    3798:	dd000415 	stw	r20,16(sp)
    379c:	dcc00315 	stw	r19,12(sp)
    37a0:	dc800215 	stw	r18,8(sp)
    37a4:	dc400115 	stw	r17,4(sp)
    37a8:	dc000015 	stw	r16,0(sp)
    37ac:	00dfe034 	movhi	r3,32640
    37b0:	1104703a 	and	r2,r2,r4
    37b4:	200b883a 	mov	r5,r4
    37b8:	18807336 	bltu	r3,r2,3988 <__ieee754_expf+0x200>
    37bc:	2021883a 	mov	r16,r4
    37c0:	2022d7fa 	srli	r17,r4,31
    37c4:	10c07926 	beq	r2,r3,39ac <__ieee754_expf+0x224>
    37c8:	00d0ac74 	movhi	r3,17073
    37cc:	18dc85c4 	addi	r3,r3,29207
    37d0:	19008016 	blt	r3,r4,39d4 <__ieee754_expf+0x24c>
    37d4:	20007816 	blt	r4,zero,39b8 <__ieee754_expf+0x230>
    37d8:	00cfac74 	movhi	r3,16049
    37dc:	18dc8604 	addi	r3,r3,29208
    37e0:	18805b2e 	bgeu	r3,r2,3950 <__ieee754_expf+0x1c8>
    37e4:	00cfe174 	movhi	r3,16261
    37e8:	18c56444 	addi	r3,r3,5521
    37ec:	18808f36 	bltu	r3,r2,3a2c <__ieee754_expf+0x2a4>
    37f0:	8c67883a 	add	r19,r17,r17
    37f4:	00800074 	movhi	r2,1
    37f8:	9ce7883a 	add	r19,r19,r19
    37fc:	10ad1604 	addi	r2,r2,-19368
    3800:	14c5883a 	add	r2,r2,r19
    3804:	11400017 	ldw	r5,0(r2)
    3808:	8009883a 	mov	r4,r16
    380c:	0005d180 	call	5d18 <__subsf3>
    3810:	00c00074 	movhi	r3,1
    3814:	18ed1404 	addi	r3,r3,-19376
    3818:	1ce7883a 	add	r19,r3,r19
    381c:	1025883a 	mov	r18,r2
    3820:	9cc00017 	ldw	r19,0(r19)
    3824:	00800044 	movi	r2,1
    3828:	1445c83a 	sub	r2,r2,r17
    382c:	1463c83a 	sub	r17,r2,r17
    3830:	980b883a 	mov	r5,r19
    3834:	9009883a 	mov	r4,r18
    3838:	0005d180 	call	5d18 <__subsf3>
    383c:	1021883a 	mov	r16,r2
    3840:	800b883a 	mov	r5,r16
    3844:	8009883a 	mov	r4,r16
    3848:	00058e80 	call	58e8 <__mulsf3>
    384c:	014cccb4 	movhi	r5,13106
    3850:	296ed304 	addi	r5,r5,-17588
    3854:	1009883a 	mov	r4,r2
    3858:	1029883a 	mov	r20,r2
    385c:	00058e80 	call	58e8 <__mulsf3>
    3860:	014d77b4 	movhi	r5,13790
    3864:	297a8384 	addi	r5,r5,-5618
    3868:	1009883a 	mov	r4,r2
    386c:	0005d180 	call	5d18 <__subsf3>
    3870:	a00b883a 	mov	r5,r20
    3874:	1009883a 	mov	r4,r2
    3878:	00058e80 	call	58e8 <__mulsf3>
    387c:	014e22f4 	movhi	r5,14475
    3880:	296cd544 	addi	r5,r5,-19627
    3884:	1009883a 	mov	r4,r2
    3888:	0004de40 	call	4de4 <__addsf3>
    388c:	a00b883a 	mov	r5,r20
    3890:	1009883a 	mov	r4,r2
    3894:	00058e80 	call	58e8 <__mulsf3>
    3898:	014ecdb4 	movhi	r5,15158
    389c:	2942d844 	addi	r5,r5,2913
    38a0:	1009883a 	mov	r4,r2
    38a4:	0005d180 	call	5d18 <__subsf3>
    38a8:	a00b883a 	mov	r5,r20
    38ac:	1009883a 	mov	r4,r2
    38b0:	00058e80 	call	58e8 <__mulsf3>
    38b4:	014f8af4 	movhi	r5,15915
    38b8:	296aaac4 	addi	r5,r5,-21845
    38bc:	1009883a 	mov	r4,r2
    38c0:	0004de40 	call	4de4 <__addsf3>
    38c4:	a00b883a 	mov	r5,r20
    38c8:	1009883a 	mov	r4,r2
    38cc:	00058e80 	call	58e8 <__mulsf3>
    38d0:	100b883a 	mov	r5,r2
    38d4:	8009883a 	mov	r4,r16
    38d8:	0005d180 	call	5d18 <__subsf3>
    38dc:	1029883a 	mov	r20,r2
    38e0:	88004126 	beq	r17,zero,39e8 <__ieee754_expf+0x260>
    38e4:	8009883a 	mov	r4,r16
    38e8:	100b883a 	mov	r5,r2
    38ec:	00058e80 	call	58e8 <__mulsf3>
    38f0:	a00b883a 	mov	r5,r20
    38f4:	01100034 	movhi	r4,16384
    38f8:	1021883a 	mov	r16,r2
    38fc:	0005d180 	call	5d18 <__subsf3>
    3900:	100b883a 	mov	r5,r2
    3904:	8009883a 	mov	r4,r16
    3908:	00052ac0 	call	52ac <__divsf3>
    390c:	100b883a 	mov	r5,r2
    3910:	9809883a 	mov	r4,r19
    3914:	0005d180 	call	5d18 <__subsf3>
    3918:	900b883a 	mov	r5,r18
    391c:	1009883a 	mov	r4,r2
    3920:	0005d180 	call	5d18 <__subsf3>
    3924:	100b883a 	mov	r5,r2
    3928:	010fe034 	movhi	r4,16256
    392c:	0005d180 	call	5d18 <__subsf3>
    3930:	00ffe0c4 	movi	r3,-125
    3934:	88c05d0e 	bge	r17,r3,3aac <__ieee754_expf+0x324>
    3938:	8c401904 	addi	r17,r17,100
    393c:	880895fa 	slli	r4,r17,23
    3940:	01436034 	movhi	r5,3456
    3944:	2089883a 	add	r4,r4,r2
    3948:	00058e80 	call	58e8 <__mulsf3>
    394c:	00000f06 	br	398c <__ieee754_expf+0x204>
    3950:	00cc6034 	movhi	r3,12672
    3954:	18ffffc4 	addi	r3,r3,-1
    3958:	18801c36 	bltu	r3,r2,39cc <__ieee754_expf+0x244>
    395c:	015c52b4 	movhi	r5,29002
    3960:	297cb284 	addi	r5,r5,-3382
    3964:	8009883a 	mov	r4,r16
    3968:	0004de40 	call	4de4 <__addsf3>
    396c:	044fe034 	movhi	r17,16256
    3970:	880b883a 	mov	r5,r17
    3974:	1009883a 	mov	r4,r2
    3978:	00057640 	call	5764 <__gesf2>
    397c:	0080130e 	bge	zero,r2,39cc <__ieee754_expf+0x244>
    3980:	880b883a 	mov	r5,r17
    3984:	8009883a 	mov	r4,r16
    3988:	0004de40 	call	4de4 <__addsf3>
    398c:	dfc00517 	ldw	ra,20(sp)
    3990:	dd000417 	ldw	r20,16(sp)
    3994:	dcc00317 	ldw	r19,12(sp)
    3998:	dc800217 	ldw	r18,8(sp)
    399c:	dc400117 	ldw	r17,4(sp)
    39a0:	dc000017 	ldw	r16,0(sp)
    39a4:	dec00604 	addi	sp,sp,24
    39a8:	f800283a 	ret
    39ac:	8800051e 	bne	r17,zero,39c4 <__ieee754_expf+0x23c>
    39b0:	2005883a 	mov	r2,r4
    39b4:	003ff506 	br	398c <__ram_exceptions_end+0xfe00196c>
    39b8:	00d0b434 	movhi	r3,17104
    39bc:	18fc6d44 	addi	r3,r3,-3659
    39c0:	18bf852e 	bgeu	r3,r2,37d8 <__ram_exceptions_end+0xfe0017b8>
    39c4:	0005883a 	mov	r2,zero
    39c8:	003ff006 	br	398c <__ram_exceptions_end+0xfe00196c>
    39cc:	0023883a 	mov	r17,zero
    39d0:	003f9b06 	br	3840 <__ram_exceptions_end+0xfe001820>
    39d4:	015c52b4 	movhi	r5,29002
    39d8:	297cb284 	addi	r5,r5,-3382
    39dc:	2809883a 	mov	r4,r5
    39e0:	00058e80 	call	58e8 <__mulsf3>
    39e4:	003fe906 	br	398c <__ram_exceptions_end+0xfe00196c>
    39e8:	8009883a 	mov	r4,r16
    39ec:	100b883a 	mov	r5,r2
    39f0:	00058e80 	call	58e8 <__mulsf3>
    39f4:	a009883a 	mov	r4,r20
    39f8:	01500034 	movhi	r5,16384
    39fc:	1023883a 	mov	r17,r2
    3a00:	0005d180 	call	5d18 <__subsf3>
    3a04:	8809883a 	mov	r4,r17
    3a08:	100b883a 	mov	r5,r2
    3a0c:	00052ac0 	call	52ac <__divsf3>
    3a10:	800b883a 	mov	r5,r16
    3a14:	1009883a 	mov	r4,r2
    3a18:	0005d180 	call	5d18 <__subsf3>
    3a1c:	100b883a 	mov	r5,r2
    3a20:	010fe034 	movhi	r4,16256
    3a24:	0005d180 	call	5d18 <__subsf3>
    3a28:	003fd806 	br	398c <__ram_exceptions_end+0xfe00196c>
    3a2c:	014fee74 	movhi	r5,16313
    3a30:	296a8ec4 	addi	r5,r5,-21957
    3a34:	8009883a 	mov	r4,r16
    3a38:	00058e80 	call	58e8 <__mulsf3>
    3a3c:	8c63883a 	add	r17,r17,r17
    3a40:	00c00074 	movhi	r3,1
    3a44:	18ed1804 	addi	r3,r3,-19360
    3a48:	8c63883a 	add	r17,r17,r17
    3a4c:	1c63883a 	add	r17,r3,r17
    3a50:	89400017 	ldw	r5,0(r17)
    3a54:	1009883a 	mov	r4,r2
    3a58:	0004de40 	call	4de4 <__addsf3>
    3a5c:	1009883a 	mov	r4,r2
    3a60:	00061fc0 	call	61fc <__fixsfsi>
    3a64:	1009883a 	mov	r4,r2
    3a68:	1023883a 	mov	r17,r2
    3a6c:	000626c0 	call	626c <__floatsisf>
    3a70:	014fcc74 	movhi	r5,16177
    3a74:	295c6004 	addi	r5,r5,29056
    3a78:	1009883a 	mov	r4,r2
    3a7c:	1027883a 	mov	r19,r2
    3a80:	00058e80 	call	58e8 <__mulsf3>
    3a84:	100b883a 	mov	r5,r2
    3a88:	8009883a 	mov	r4,r16
    3a8c:	0005d180 	call	5d18 <__subsf3>
    3a90:	014dc634 	movhi	r5,14104
    3a94:	9809883a 	mov	r4,r19
    3a98:	297df444 	addi	r5,r5,-2095
    3a9c:	1025883a 	mov	r18,r2
    3aa0:	00058e80 	call	58e8 <__mulsf3>
    3aa4:	1027883a 	mov	r19,r2
    3aa8:	003f6106 	br	3830 <__ram_exceptions_end+0xfe001810>
    3aac:	882295fa 	slli	r17,r17,23
    3ab0:	8885883a 	add	r2,r17,r2
    3ab4:	003fb506 	br	398c <__ram_exceptions_end+0xfe00196c>

00003ab8 <__ieee754_logf>:
    3ab8:	00e00034 	movhi	r3,32768
    3abc:	defff704 	addi	sp,sp,-36
    3ac0:	18ffffc4 	addi	r3,r3,-1
    3ac4:	dfc00815 	stw	ra,32(sp)
    3ac8:	ddc00715 	stw	r23,28(sp)
    3acc:	dd800615 	stw	r22,24(sp)
    3ad0:	dd400515 	stw	r21,20(sp)
    3ad4:	dd000415 	stw	r20,16(sp)
    3ad8:	dcc00315 	stw	r19,12(sp)
    3adc:	dc800215 	stw	r18,8(sp)
    3ae0:	dc400115 	stw	r17,4(sp)
    3ae4:	dc000015 	stw	r16,0(sp)
    3ae8:	1906703a 	and	r3,r3,r4
    3aec:	18002626 	beq	r3,zero,3b88 <__ieee754_logf+0xd0>
    3af0:	200b883a 	mov	r5,r4
    3af4:	2005883a 	mov	r2,r4
    3af8:	20004516 	blt	r4,zero,3c10 <__ieee754_logf+0x158>
    3afc:	00dfe034 	movhi	r3,32640
    3b00:	18ffffc4 	addi	r3,r3,-1
    3b04:	19003c16 	blt	r3,r4,3bf8 <__ieee754_logf+0x140>
    3b08:	00c02034 	movhi	r3,128
    3b0c:	18ffffc4 	addi	r3,r3,-1
    3b10:	19003b0e 	bge	r3,r4,3c00 <__ieee754_logf+0x148>
    3b14:	0023883a 	mov	r17,zero
    3b18:	04802034 	movhi	r18,128
    3b1c:	94bfffc4 	addi	r18,r18,-1
    3b20:	010012f4 	movhi	r4,75
    3b24:	14a0703a 	and	r16,r2,r18
    3b28:	213ec804 	addi	r4,r4,-1248
    3b2c:	1007d5fa 	srai	r3,r2,23
    3b30:	8109883a 	add	r4,r16,r4
    3b34:	2100202c 	andhi	r4,r4,128
    3b38:	200dd5fa 	srai	r6,r4,23
    3b3c:	18bfe044 	addi	r2,r3,-127
    3b40:	210fe03c 	xorhi	r4,r4,16256
    3b44:	1445883a 	add	r2,r2,r17
    3b48:	014fe034 	movhi	r5,16256
    3b4c:	2408b03a 	or	r4,r4,r16
    3b50:	30a3883a 	add	r17,r6,r2
    3b54:	0005d180 	call	5d18 <__subsf3>
    3b58:	1027883a 	mov	r19,r2
    3b5c:	808003c4 	addi	r2,r16,15
    3b60:	14a4703a 	and	r18,r2,r18
    3b64:	008003c4 	movi	r2,15
    3b68:	14802e16 	blt	r2,r18,3c24 <__ieee754_logf+0x16c>
    3b6c:	000b883a 	mov	r5,zero
    3b70:	9809883a 	mov	r4,r19
    3b74:	00056ec0 	call	56ec <__eqsf2>
    3b78:	1000891e 	bne	r2,zero,3da0 <__ieee754_logf+0x2e8>
    3b7c:	8800101e 	bne	r17,zero,3bc0 <__ieee754_logf+0x108>
    3b80:	0005883a 	mov	r2,zero
    3b84:	00000306 	br	3b94 <__ieee754_logf+0xdc>
    3b88:	000b883a 	mov	r5,zero
    3b8c:	01330034 	movhi	r4,52224
    3b90:	00052ac0 	call	52ac <__divsf3>
    3b94:	dfc00817 	ldw	ra,32(sp)
    3b98:	ddc00717 	ldw	r23,28(sp)
    3b9c:	dd800617 	ldw	r22,24(sp)
    3ba0:	dd400517 	ldw	r21,20(sp)
    3ba4:	dd000417 	ldw	r20,16(sp)
    3ba8:	dcc00317 	ldw	r19,12(sp)
    3bac:	dc800217 	ldw	r18,8(sp)
    3bb0:	dc400117 	ldw	r17,4(sp)
    3bb4:	dc000017 	ldw	r16,0(sp)
    3bb8:	dec00904 	addi	sp,sp,36
    3bbc:	f800283a 	ret
    3bc0:	8809883a 	mov	r4,r17
    3bc4:	000626c0 	call	626c <__floatsisf>
    3bc8:	014fcc74 	movhi	r5,16177
    3bcc:	295c6004 	addi	r5,r5,29056
    3bd0:	1009883a 	mov	r4,r2
    3bd4:	1021883a 	mov	r16,r2
    3bd8:	00058e80 	call	58e8 <__mulsf3>
    3bdc:	014dc634 	movhi	r5,14104
    3be0:	297df444 	addi	r5,r5,-2095
    3be4:	8009883a 	mov	r4,r16
    3be8:	1023883a 	mov	r17,r2
    3bec:	00058e80 	call	58e8 <__mulsf3>
    3bf0:	100b883a 	mov	r5,r2
    3bf4:	8809883a 	mov	r4,r17
    3bf8:	0004de40 	call	4de4 <__addsf3>
    3bfc:	003fe506 	br	3b94 <__ram_exceptions_end+0xfe001b74>
    3c00:	01530034 	movhi	r5,19456
    3c04:	00058e80 	call	58e8 <__mulsf3>
    3c08:	047ff9c4 	movi	r17,-25
    3c0c:	003fc206 	br	3b18 <__ram_exceptions_end+0xfe001af8>
    3c10:	0005d180 	call	5d18 <__subsf3>
    3c14:	000b883a 	mov	r5,zero
    3c18:	1009883a 	mov	r4,r2
    3c1c:	00052ac0 	call	52ac <__divsf3>
    3c20:	003fdc06 	br	3b94 <__ram_exceptions_end+0xfe001b74>
    3c24:	01500034 	movhi	r5,16384
    3c28:	9809883a 	mov	r4,r19
    3c2c:	0004de40 	call	4de4 <__addsf3>
    3c30:	100b883a 	mov	r5,r2
    3c34:	9809883a 	mov	r4,r19
    3c38:	00052ac0 	call	52ac <__divsf3>
    3c3c:	8809883a 	mov	r4,r17
    3c40:	102b883a 	mov	r21,r2
    3c44:	000626c0 	call	626c <__floatsisf>
    3c48:	a80b883a 	mov	r5,r21
    3c4c:	a809883a 	mov	r4,r21
    3c50:	102d883a 	mov	r22,r2
    3c54:	00058e80 	call	58e8 <__mulsf3>
    3c58:	100b883a 	mov	r5,r2
    3c5c:	1009883a 	mov	r4,r2
    3c60:	102f883a 	mov	r23,r2
    3c64:	00058e80 	call	58e8 <__mulsf3>
    3c68:	014f8634 	movhi	r5,15896
    3c6c:	296225c4 	addi	r5,r5,-30569
    3c70:	1009883a 	mov	r4,r2
    3c74:	1025883a 	mov	r18,r2
    3c78:	00058e80 	call	58e8 <__mulsf3>
    3c7c:	014f8eb4 	movhi	r5,15930
    3c80:	294cc944 	addi	r5,r5,13093
    3c84:	1009883a 	mov	r4,r2
    3c88:	0004de40 	call	4de4 <__addsf3>
    3c8c:	900b883a 	mov	r5,r18
    3c90:	1009883a 	mov	r4,r2
    3c94:	00058e80 	call	58e8 <__mulsf3>
    3c98:	014fa4b4 	movhi	r5,16018
    3c9c:	29524944 	addi	r5,r5,18725
    3ca0:	1009883a 	mov	r4,r2
    3ca4:	0004de40 	call	4de4 <__addsf3>
    3ca8:	900b883a 	mov	r5,r18
    3cac:	1009883a 	mov	r4,r2
    3cb0:	00058e80 	call	58e8 <__mulsf3>
    3cb4:	014fcaf4 	movhi	r5,16171
    3cb8:	296aaac4 	addi	r5,r5,-21845
    3cbc:	1009883a 	mov	r4,r2
    3cc0:	0004de40 	call	4de4 <__addsf3>
    3cc4:	b80b883a 	mov	r5,r23
    3cc8:	1009883a 	mov	r4,r2
    3ccc:	00058e80 	call	58e8 <__mulsf3>
    3cd0:	014f8774 	movhi	r5,15901
    3cd4:	9009883a 	mov	r4,r18
    3cd8:	297413c4 	addi	r5,r5,-12209
    3cdc:	102f883a 	mov	r23,r2
    3ce0:	00058e80 	call	58e8 <__mulsf3>
    3ce4:	014f9934 	movhi	r5,15972
    3ce8:	29638a44 	addi	r5,r5,-29143
    3cec:	1009883a 	mov	r4,r2
    3cf0:	0004de40 	call	4de4 <__addsf3>
    3cf4:	900b883a 	mov	r5,r18
    3cf8:	1009883a 	mov	r4,r2
    3cfc:	00058e80 	call	58e8 <__mulsf3>
    3d00:	014fb374 	movhi	r5,16077
    3d04:	29733344 	addi	r5,r5,-13107
    3d08:	1009883a 	mov	r4,r2
    3d0c:	0004de40 	call	4de4 <__addsf3>
    3d10:	900b883a 	mov	r5,r18
    3d14:	1009883a 	mov	r4,r2
    3d18:	00058e80 	call	58e8 <__mulsf3>
    3d1c:	100b883a 	mov	r5,r2
    3d20:	b809883a 	mov	r4,r23
    3d24:	0004de40 	call	4de4 <__addsf3>
    3d28:	053ff3f4 	movhi	r20,65487
    3d2c:	1025883a 	mov	r18,r2
    3d30:	00800db4 	movhi	r2,54
    3d34:	a5170c04 	addi	r20,r20,23600
    3d38:	10b0a204 	addi	r2,r2,-15736
    3d3c:	8529883a 	add	r20,r16,r20
    3d40:	1405c83a 	sub	r2,r2,r16
    3d44:	1528b03a 	or	r20,r2,r20
    3d48:	05005c0e 	bge	zero,r20,3ebc <__ieee754_logf+0x404>
    3d4c:	014fc034 	movhi	r5,16128
    3d50:	9809883a 	mov	r4,r19
    3d54:	00058e80 	call	58e8 <__mulsf3>
    3d58:	980b883a 	mov	r5,r19
    3d5c:	1009883a 	mov	r4,r2
    3d60:	00058e80 	call	58e8 <__mulsf3>
    3d64:	1021883a 	mov	r16,r2
    3d68:	8800211e 	bne	r17,zero,3df0 <__ieee754_logf+0x338>
    3d6c:	9009883a 	mov	r4,r18
    3d70:	100b883a 	mov	r5,r2
    3d74:	0004de40 	call	4de4 <__addsf3>
    3d78:	a80b883a 	mov	r5,r21
    3d7c:	1009883a 	mov	r4,r2
    3d80:	00058e80 	call	58e8 <__mulsf3>
    3d84:	8009883a 	mov	r4,r16
    3d88:	100b883a 	mov	r5,r2
    3d8c:	0005d180 	call	5d18 <__subsf3>
    3d90:	100b883a 	mov	r5,r2
    3d94:	9809883a 	mov	r4,r19
    3d98:	0005d180 	call	5d18 <__subsf3>
    3d9c:	003f7d06 	br	3b94 <__ram_exceptions_end+0xfe001b74>
    3da0:	014faaf4 	movhi	r5,16043
    3da4:	296aaac4 	addi	r5,r5,-21845
    3da8:	9809883a 	mov	r4,r19
    3dac:	00058e80 	call	58e8 <__mulsf3>
    3db0:	100b883a 	mov	r5,r2
    3db4:	010fc034 	movhi	r4,16128
    3db8:	0005d180 	call	5d18 <__subsf3>
    3dbc:	980b883a 	mov	r5,r19
    3dc0:	9809883a 	mov	r4,r19
    3dc4:	1021883a 	mov	r16,r2
    3dc8:	00058e80 	call	58e8 <__mulsf3>
    3dcc:	8009883a 	mov	r4,r16
    3dd0:	100b883a 	mov	r5,r2
    3dd4:	00058e80 	call	58e8 <__mulsf3>
    3dd8:	1021883a 	mov	r16,r2
    3ddc:	8800211e 	bne	r17,zero,3e64 <__ieee754_logf+0x3ac>
    3de0:	100b883a 	mov	r5,r2
    3de4:	9809883a 	mov	r4,r19
    3de8:	0005d180 	call	5d18 <__subsf3>
    3dec:	003f6906 	br	3b94 <__ram_exceptions_end+0xfe001b74>
    3df0:	014fcc74 	movhi	r5,16177
    3df4:	b009883a 	mov	r4,r22
    3df8:	295c6004 	addi	r5,r5,29056
    3dfc:	00058e80 	call	58e8 <__mulsf3>
    3e00:	800b883a 	mov	r5,r16
    3e04:	9009883a 	mov	r4,r18
    3e08:	1023883a 	mov	r17,r2
    3e0c:	0004de40 	call	4de4 <__addsf3>
    3e10:	a80b883a 	mov	r5,r21
    3e14:	1009883a 	mov	r4,r2
    3e18:	00058e80 	call	58e8 <__mulsf3>
    3e1c:	014dc634 	movhi	r5,14104
    3e20:	b009883a 	mov	r4,r22
    3e24:	297df444 	addi	r5,r5,-2095
    3e28:	1025883a 	mov	r18,r2
    3e2c:	00058e80 	call	58e8 <__mulsf3>
    3e30:	9009883a 	mov	r4,r18
    3e34:	100b883a 	mov	r5,r2
    3e38:	0004de40 	call	4de4 <__addsf3>
    3e3c:	8009883a 	mov	r4,r16
    3e40:	100b883a 	mov	r5,r2
    3e44:	0005d180 	call	5d18 <__subsf3>
    3e48:	980b883a 	mov	r5,r19
    3e4c:	1009883a 	mov	r4,r2
    3e50:	0005d180 	call	5d18 <__subsf3>
    3e54:	100b883a 	mov	r5,r2
    3e58:	8809883a 	mov	r4,r17
    3e5c:	0005d180 	call	5d18 <__subsf3>
    3e60:	003f4c06 	br	3b94 <__ram_exceptions_end+0xfe001b74>
    3e64:	8809883a 	mov	r4,r17
    3e68:	000626c0 	call	626c <__floatsisf>
    3e6c:	014fcc74 	movhi	r5,16177
    3e70:	295c6004 	addi	r5,r5,29056
    3e74:	1009883a 	mov	r4,r2
    3e78:	1023883a 	mov	r17,r2
    3e7c:	00058e80 	call	58e8 <__mulsf3>
    3e80:	014dc634 	movhi	r5,14104
    3e84:	8809883a 	mov	r4,r17
    3e88:	297df444 	addi	r5,r5,-2095
    3e8c:	1025883a 	mov	r18,r2
    3e90:	00058e80 	call	58e8 <__mulsf3>
    3e94:	8009883a 	mov	r4,r16
    3e98:	100b883a 	mov	r5,r2
    3e9c:	0005d180 	call	5d18 <__subsf3>
    3ea0:	980b883a 	mov	r5,r19
    3ea4:	1009883a 	mov	r4,r2
    3ea8:	0005d180 	call	5d18 <__subsf3>
    3eac:	100b883a 	mov	r5,r2
    3eb0:	9009883a 	mov	r4,r18
    3eb4:	0005d180 	call	5d18 <__subsf3>
    3eb8:	003f3606 	br	3b94 <__ram_exceptions_end+0xfe001b74>
    3ebc:	88001a26 	beq	r17,zero,3f28 <__ieee754_logf+0x470>
    3ec0:	014fcc74 	movhi	r5,16177
    3ec4:	b009883a 	mov	r4,r22
    3ec8:	295c6004 	addi	r5,r5,29056
    3ecc:	00058e80 	call	58e8 <__mulsf3>
    3ed0:	900b883a 	mov	r5,r18
    3ed4:	9809883a 	mov	r4,r19
    3ed8:	1021883a 	mov	r16,r2
    3edc:	0005d180 	call	5d18 <__subsf3>
    3ee0:	a80b883a 	mov	r5,r21
    3ee4:	1009883a 	mov	r4,r2
    3ee8:	00058e80 	call	58e8 <__mulsf3>
    3eec:	014dc634 	movhi	r5,14104
    3ef0:	b009883a 	mov	r4,r22
    3ef4:	297df444 	addi	r5,r5,-2095
    3ef8:	1023883a 	mov	r17,r2
    3efc:	00058e80 	call	58e8 <__mulsf3>
    3f00:	8809883a 	mov	r4,r17
    3f04:	100b883a 	mov	r5,r2
    3f08:	0005d180 	call	5d18 <__subsf3>
    3f0c:	980b883a 	mov	r5,r19
    3f10:	1009883a 	mov	r4,r2
    3f14:	0005d180 	call	5d18 <__subsf3>
    3f18:	100b883a 	mov	r5,r2
    3f1c:	8009883a 	mov	r4,r16
    3f20:	0005d180 	call	5d18 <__subsf3>
    3f24:	003f1b06 	br	3b94 <__ram_exceptions_end+0xfe001b74>
    3f28:	900b883a 	mov	r5,r18
    3f2c:	9809883a 	mov	r4,r19
    3f30:	0005d180 	call	5d18 <__subsf3>
    3f34:	a80b883a 	mov	r5,r21
    3f38:	1009883a 	mov	r4,r2
    3f3c:	00058e80 	call	58e8 <__mulsf3>
    3f40:	100b883a 	mov	r5,r2
    3f44:	9809883a 	mov	r4,r19
    3f48:	0005d180 	call	5d18 <__subsf3>
    3f4c:	003f1106 	br	3b94 <__ram_exceptions_end+0xfe001b74>

00003f50 <matherr>:
    3f50:	0005883a 	mov	r2,zero
    3f54:	f800283a 	ret

00003f58 <nan>:
    3f58:	0005883a 	mov	r2,zero
    3f5c:	00dffe34 	movhi	r3,32760
    3f60:	f800283a 	ret

00003f64 <finitef>:
    3f64:	00a00034 	movhi	r2,32768
    3f68:	10bfffc4 	addi	r2,r2,-1
    3f6c:	1104703a 	and	r2,r2,r4
    3f70:	00dfe034 	movhi	r3,32640
    3f74:	10c4803a 	cmplt	r2,r2,r3
    3f78:	f800283a 	ret

00003f7c <__fpclassifyf>:
    3f7c:	00a00034 	movhi	r2,32768
    3f80:	10bfffc4 	addi	r2,r2,-1
    3f84:	2088703a 	and	r4,r4,r2
    3f88:	2000021e 	bne	r4,zero,3f94 <__fpclassifyf+0x18>
    3f8c:	00800084 	movi	r2,2
    3f90:	f800283a 	ret
    3f94:	00bfe034 	movhi	r2,65408
    3f98:	00dfc034 	movhi	r3,32512
    3f9c:	2085883a 	add	r2,r4,r2
    3fa0:	18ffffc4 	addi	r3,r3,-1
    3fa4:	18800236 	bltu	r3,r2,3fb0 <__fpclassifyf+0x34>
    3fa8:	00800104 	movi	r2,4
    3fac:	f800283a 	ret
    3fb0:	00c02034 	movhi	r3,128
    3fb4:	20bfffc4 	addi	r2,r4,-1
    3fb8:	18ffff84 	addi	r3,r3,-2
    3fbc:	18800236 	bltu	r3,r2,3fc8 <__fpclassifyf+0x4c>
    3fc0:	008000c4 	movi	r2,3
    3fc4:	f800283a 	ret
    3fc8:	009fe034 	movhi	r2,32640
    3fcc:	2085003a 	cmpeq	r2,r4,r2
    3fd0:	f800283a 	ret

00003fd4 <__fixunsdfsi>:
    3fd4:	defffd04 	addi	sp,sp,-12
    3fd8:	000d883a 	mov	r6,zero
    3fdc:	01d07834 	movhi	r7,16864
    3fe0:	dc400115 	stw	r17,4(sp)
    3fe4:	dc000015 	stw	r16,0(sp)
    3fe8:	dfc00215 	stw	ra,8(sp)
    3fec:	2023883a 	mov	r17,r4
    3ff0:	2821883a 	mov	r16,r5
    3ff4:	00077840 	call	7784 <__gedf2>
    3ff8:	1000080e 	bge	r2,zero,401c <__fixunsdfsi+0x48>
    3ffc:	8809883a 	mov	r4,r17
    4000:	800b883a 	mov	r5,r16
    4004:	0008abc0 	call	8abc <__fixdfsi>
    4008:	dfc00217 	ldw	ra,8(sp)
    400c:	dc400117 	ldw	r17,4(sp)
    4010:	dc000017 	ldw	r16,0(sp)
    4014:	dec00304 	addi	sp,sp,12
    4018:	f800283a 	ret
    401c:	000d883a 	mov	r6,zero
    4020:	01d07834 	movhi	r7,16864
    4024:	8809883a 	mov	r4,r17
    4028:	800b883a 	mov	r5,r16
    402c:	00081c00 	call	81c0 <__subdf3>
    4030:	180b883a 	mov	r5,r3
    4034:	1009883a 	mov	r4,r2
    4038:	0008abc0 	call	8abc <__fixdfsi>
    403c:	00e00034 	movhi	r3,32768
    4040:	10c5883a 	add	r2,r2,r3
    4044:	003ff006 	br	4008 <__ram_exceptions_end+0xfe001fe8>

00004048 <__udivdi3>:
    4048:	defff404 	addi	sp,sp,-48
    404c:	dcc00515 	stw	r19,20(sp)
    4050:	dc000215 	stw	r16,8(sp)
    4054:	dfc00b15 	stw	ra,44(sp)
    4058:	df000a15 	stw	fp,40(sp)
    405c:	ddc00915 	stw	r23,36(sp)
    4060:	dd800815 	stw	r22,32(sp)
    4064:	dd400715 	stw	r21,28(sp)
    4068:	dd000615 	stw	r20,24(sp)
    406c:	dc800415 	stw	r18,16(sp)
    4070:	dc400315 	stw	r17,12(sp)
    4074:	2027883a 	mov	r19,r4
    4078:	2821883a 	mov	r16,r5
    407c:	3800461e 	bne	r7,zero,4198 <__udivdi3+0x150>
    4080:	3023883a 	mov	r17,r6
    4084:	2025883a 	mov	r18,r4
    4088:	2980572e 	bgeu	r5,r6,41e8 <__udivdi3+0x1a0>
    408c:	00bfffd4 	movui	r2,65535
    4090:	282d883a 	mov	r22,r5
    4094:	1180b236 	bltu	r2,r6,4360 <__udivdi3+0x318>
    4098:	00803fc4 	movi	r2,255
    409c:	1185803a 	cmpltu	r2,r2,r6
    40a0:	100490fa 	slli	r2,r2,3
    40a4:	3086d83a 	srl	r3,r6,r2
    40a8:	01000074 	movhi	r4,1
    40ac:	21249c04 	addi	r4,r4,-28048
    40b0:	20c7883a 	add	r3,r4,r3
    40b4:	18c00003 	ldbu	r3,0(r3)
    40b8:	1885883a 	add	r2,r3,r2
    40bc:	00c00804 	movi	r3,32
    40c0:	1887c83a 	sub	r3,r3,r2
    40c4:	18000526 	beq	r3,zero,40dc <__udivdi3+0x94>
    40c8:	80e0983a 	sll	r16,r16,r3
    40cc:	9884d83a 	srl	r2,r19,r2
    40d0:	30e2983a 	sll	r17,r6,r3
    40d4:	98e4983a 	sll	r18,r19,r3
    40d8:	142cb03a 	or	r22,r2,r16
    40dc:	882ad43a 	srli	r21,r17,16
    40e0:	b009883a 	mov	r4,r22
    40e4:	8d3fffcc 	andi	r20,r17,65535
    40e8:	a80b883a 	mov	r5,r21
    40ec:	0004d640 	call	4d64 <__umodsi3>
    40f0:	b009883a 	mov	r4,r22
    40f4:	a80b883a 	mov	r5,r21
    40f8:	1027883a 	mov	r19,r2
    40fc:	0004d000 	call	4d00 <__udivsi3>
    4100:	100b883a 	mov	r5,r2
    4104:	a009883a 	mov	r4,r20
    4108:	102d883a 	mov	r22,r2
    410c:	0004dbc0 	call	4dbc <__mulsi3>
    4110:	9826943a 	slli	r19,r19,16
    4114:	9006d43a 	srli	r3,r18,16
    4118:	1cc6b03a 	or	r3,r3,r19
    411c:	1880052e 	bgeu	r3,r2,4134 <__udivdi3+0xec>
    4120:	1c47883a 	add	r3,r3,r17
    4124:	b13fffc4 	addi	r4,r22,-1
    4128:	1c400136 	bltu	r3,r17,4130 <__udivdi3+0xe8>
    412c:	18814236 	bltu	r3,r2,4638 <__udivdi3+0x5f0>
    4130:	202d883a 	mov	r22,r4
    4134:	18a1c83a 	sub	r16,r3,r2
    4138:	8009883a 	mov	r4,r16
    413c:	a80b883a 	mov	r5,r21
    4140:	0004d640 	call	4d64 <__umodsi3>
    4144:	1027883a 	mov	r19,r2
    4148:	8009883a 	mov	r4,r16
    414c:	a80b883a 	mov	r5,r21
    4150:	9826943a 	slli	r19,r19,16
    4154:	0004d000 	call	4d00 <__udivsi3>
    4158:	100b883a 	mov	r5,r2
    415c:	a009883a 	mov	r4,r20
    4160:	94bfffcc 	andi	r18,r18,65535
    4164:	1021883a 	mov	r16,r2
    4168:	94e4b03a 	or	r18,r18,r19
    416c:	0004dbc0 	call	4dbc <__mulsi3>
    4170:	9080052e 	bgeu	r18,r2,4188 <__udivdi3+0x140>
    4174:	8ca5883a 	add	r18,r17,r18
    4178:	80ffffc4 	addi	r3,r16,-1
    417c:	94410c36 	bltu	r18,r17,45b0 <__udivdi3+0x568>
    4180:	90810b2e 	bgeu	r18,r2,45b0 <__udivdi3+0x568>
    4184:	843fff84 	addi	r16,r16,-2
    4188:	b004943a 	slli	r2,r22,16
    418c:	0007883a 	mov	r3,zero
    4190:	1404b03a 	or	r2,r2,r16
    4194:	00005e06 	br	4310 <__udivdi3+0x2c8>
    4198:	29c05b36 	bltu	r5,r7,4308 <__udivdi3+0x2c0>
    419c:	00bfffd4 	movui	r2,65535
    41a0:	11c0672e 	bgeu	r2,r7,4340 <__udivdi3+0x2f8>
    41a4:	00804034 	movhi	r2,256
    41a8:	10bfffc4 	addi	r2,r2,-1
    41ac:	11c10a36 	bltu	r2,r7,45d8 <__udivdi3+0x590>
    41b0:	00800404 	movi	r2,16
    41b4:	3886d83a 	srl	r3,r7,r2
    41b8:	01000074 	movhi	r4,1
    41bc:	21249c04 	addi	r4,r4,-28048
    41c0:	20c7883a 	add	r3,r4,r3
    41c4:	18c00003 	ldbu	r3,0(r3)
    41c8:	05c00804 	movi	r23,32
    41cc:	1885883a 	add	r2,r3,r2
    41d0:	b8afc83a 	sub	r23,r23,r2
    41d4:	b800671e 	bne	r23,zero,4374 <__udivdi3+0x32c>
    41d8:	3c010536 	bltu	r7,r16,45f0 <__udivdi3+0x5a8>
    41dc:	9985403a 	cmpgeu	r2,r19,r6
    41e0:	0007883a 	mov	r3,zero
    41e4:	00004a06 	br	4310 <__udivdi3+0x2c8>
    41e8:	3000041e 	bne	r6,zero,41fc <__udivdi3+0x1b4>
    41ec:	000b883a 	mov	r5,zero
    41f0:	01000044 	movi	r4,1
    41f4:	0004d000 	call	4d00 <__udivsi3>
    41f8:	1023883a 	mov	r17,r2
    41fc:	00bfffd4 	movui	r2,65535
    4200:	1440532e 	bgeu	r2,r17,4350 <__udivdi3+0x308>
    4204:	00804034 	movhi	r2,256
    4208:	10bfffc4 	addi	r2,r2,-1
    420c:	1440f436 	bltu	r2,r17,45e0 <__udivdi3+0x598>
    4210:	00800404 	movi	r2,16
    4214:	8886d83a 	srl	r3,r17,r2
    4218:	01000074 	movhi	r4,1
    421c:	21249c04 	addi	r4,r4,-28048
    4220:	20c7883a 	add	r3,r4,r3
    4224:	18c00003 	ldbu	r3,0(r3)
    4228:	1885883a 	add	r2,r3,r2
    422c:	00c00804 	movi	r3,32
    4230:	1887c83a 	sub	r3,r3,r2
    4234:	1800a51e 	bne	r3,zero,44cc <__udivdi3+0x484>
    4238:	882ad43a 	srli	r21,r17,16
    423c:	8461c83a 	sub	r16,r16,r17
    4240:	8d3fffcc 	andi	r20,r17,65535
    4244:	00c00044 	movi	r3,1
    4248:	a80b883a 	mov	r5,r21
    424c:	8009883a 	mov	r4,r16
    4250:	d8c00115 	stw	r3,4(sp)
    4254:	0004d640 	call	4d64 <__umodsi3>
    4258:	a80b883a 	mov	r5,r21
    425c:	8009883a 	mov	r4,r16
    4260:	1027883a 	mov	r19,r2
    4264:	0004d000 	call	4d00 <__udivsi3>
    4268:	a00b883a 	mov	r5,r20
    426c:	1009883a 	mov	r4,r2
    4270:	102d883a 	mov	r22,r2
    4274:	0004dbc0 	call	4dbc <__mulsi3>
    4278:	9826943a 	slli	r19,r19,16
    427c:	900ed43a 	srli	r7,r18,16
    4280:	d8c00117 	ldw	r3,4(sp)
    4284:	3cceb03a 	or	r7,r7,r19
    4288:	3880052e 	bgeu	r7,r2,42a0 <__udivdi3+0x258>
    428c:	3c4f883a 	add	r7,r7,r17
    4290:	b13fffc4 	addi	r4,r22,-1
    4294:	3c400136 	bltu	r7,r17,429c <__udivdi3+0x254>
    4298:	3880e436 	bltu	r7,r2,462c <__udivdi3+0x5e4>
    429c:	202d883a 	mov	r22,r4
    42a0:	38a1c83a 	sub	r16,r7,r2
    42a4:	8009883a 	mov	r4,r16
    42a8:	a80b883a 	mov	r5,r21
    42ac:	d8c00115 	stw	r3,4(sp)
    42b0:	0004d640 	call	4d64 <__umodsi3>
    42b4:	1027883a 	mov	r19,r2
    42b8:	8009883a 	mov	r4,r16
    42bc:	a80b883a 	mov	r5,r21
    42c0:	9826943a 	slli	r19,r19,16
    42c4:	0004d000 	call	4d00 <__udivsi3>
    42c8:	a00b883a 	mov	r5,r20
    42cc:	1009883a 	mov	r4,r2
    42d0:	94bfffcc 	andi	r18,r18,65535
    42d4:	1021883a 	mov	r16,r2
    42d8:	94e4b03a 	or	r18,r18,r19
    42dc:	0004dbc0 	call	4dbc <__mulsi3>
    42e0:	d8c00117 	ldw	r3,4(sp)
    42e4:	9080052e 	bgeu	r18,r2,42fc <__udivdi3+0x2b4>
    42e8:	8ca5883a 	add	r18,r17,r18
    42ec:	813fffc4 	addi	r4,r16,-1
    42f0:	9440ad36 	bltu	r18,r17,45a8 <__udivdi3+0x560>
    42f4:	9080ac2e 	bgeu	r18,r2,45a8 <__udivdi3+0x560>
    42f8:	843fff84 	addi	r16,r16,-2
    42fc:	b004943a 	slli	r2,r22,16
    4300:	1404b03a 	or	r2,r2,r16
    4304:	00000206 	br	4310 <__udivdi3+0x2c8>
    4308:	0007883a 	mov	r3,zero
    430c:	0005883a 	mov	r2,zero
    4310:	dfc00b17 	ldw	ra,44(sp)
    4314:	df000a17 	ldw	fp,40(sp)
    4318:	ddc00917 	ldw	r23,36(sp)
    431c:	dd800817 	ldw	r22,32(sp)
    4320:	dd400717 	ldw	r21,28(sp)
    4324:	dd000617 	ldw	r20,24(sp)
    4328:	dcc00517 	ldw	r19,20(sp)
    432c:	dc800417 	ldw	r18,16(sp)
    4330:	dc400317 	ldw	r17,12(sp)
    4334:	dc000217 	ldw	r16,8(sp)
    4338:	dec00c04 	addi	sp,sp,48
    433c:	f800283a 	ret
    4340:	00803fc4 	movi	r2,255
    4344:	11c5803a 	cmpltu	r2,r2,r7
    4348:	100490fa 	slli	r2,r2,3
    434c:	003f9906 	br	41b4 <__ram_exceptions_end+0xfe002194>
    4350:	00803fc4 	movi	r2,255
    4354:	1445803a 	cmpltu	r2,r2,r17
    4358:	100490fa 	slli	r2,r2,3
    435c:	003fad06 	br	4214 <__ram_exceptions_end+0xfe0021f4>
    4360:	00804034 	movhi	r2,256
    4364:	10bfffc4 	addi	r2,r2,-1
    4368:	11809f36 	bltu	r2,r6,45e8 <__udivdi3+0x5a0>
    436c:	00800404 	movi	r2,16
    4370:	003f4c06 	br	40a4 <__ram_exceptions_end+0xfe002084>
    4374:	3dce983a 	sll	r7,r7,r23
    4378:	30b8d83a 	srl	fp,r6,r2
    437c:	80a2d83a 	srl	r17,r16,r2
    4380:	35cc983a 	sll	r6,r6,r23
    4384:	3f38b03a 	or	fp,r7,fp
    4388:	e024d43a 	srli	r18,fp,16
    438c:	9884d83a 	srl	r2,r19,r2
    4390:	85e0983a 	sll	r16,r16,r23
    4394:	8809883a 	mov	r4,r17
    4398:	900b883a 	mov	r5,r18
    439c:	d9800015 	stw	r6,0(sp)
    43a0:	1420b03a 	or	r16,r2,r16
    43a4:	0004d640 	call	4d64 <__umodsi3>
    43a8:	900b883a 	mov	r5,r18
    43ac:	8809883a 	mov	r4,r17
    43b0:	1029883a 	mov	r20,r2
    43b4:	e5bfffcc 	andi	r22,fp,65535
    43b8:	0004d000 	call	4d00 <__udivsi3>
    43bc:	100b883a 	mov	r5,r2
    43c0:	b009883a 	mov	r4,r22
    43c4:	102b883a 	mov	r21,r2
    43c8:	0004dbc0 	call	4dbc <__mulsi3>
    43cc:	a028943a 	slli	r20,r20,16
    43d0:	8006d43a 	srli	r3,r16,16
    43d4:	1d06b03a 	or	r3,r3,r20
    43d8:	1880042e 	bgeu	r3,r2,43ec <__udivdi3+0x3a4>
    43dc:	1f07883a 	add	r3,r3,fp
    43e0:	a93fffc4 	addi	r4,r21,-1
    43e4:	1f00892e 	bgeu	r3,fp,460c <__udivdi3+0x5c4>
    43e8:	202b883a 	mov	r21,r4
    43ec:	18a3c83a 	sub	r17,r3,r2
    43f0:	8809883a 	mov	r4,r17
    43f4:	900b883a 	mov	r5,r18
    43f8:	0004d640 	call	4d64 <__umodsi3>
    43fc:	1029883a 	mov	r20,r2
    4400:	8809883a 	mov	r4,r17
    4404:	900b883a 	mov	r5,r18
    4408:	a028943a 	slli	r20,r20,16
    440c:	0004d000 	call	4d00 <__udivsi3>
    4410:	100b883a 	mov	r5,r2
    4414:	b009883a 	mov	r4,r22
    4418:	843fffcc 	andi	r16,r16,65535
    441c:	1023883a 	mov	r17,r2
    4420:	8520b03a 	or	r16,r16,r20
    4424:	0004dbc0 	call	4dbc <__mulsi3>
    4428:	8080042e 	bgeu	r16,r2,443c <__udivdi3+0x3f4>
    442c:	8721883a 	add	r16,r16,fp
    4430:	88ffffc4 	addi	r3,r17,-1
    4434:	8700712e 	bgeu	r16,fp,45fc <__udivdi3+0x5b4>
    4438:	1823883a 	mov	r17,r3
    443c:	a80e943a 	slli	r7,r21,16
    4440:	d8c00017 	ldw	r3,0(sp)
    4444:	80a1c83a 	sub	r16,r16,r2
    4448:	3c64b03a 	or	r18,r7,r17
    444c:	1d3fffcc 	andi	r20,r3,65535
    4450:	9022d43a 	srli	r17,r18,16
    4454:	95bfffcc 	andi	r22,r18,65535
    4458:	a00b883a 	mov	r5,r20
    445c:	b009883a 	mov	r4,r22
    4460:	182ad43a 	srli	r21,r3,16
    4464:	0004dbc0 	call	4dbc <__mulsi3>
    4468:	a00b883a 	mov	r5,r20
    446c:	8809883a 	mov	r4,r17
    4470:	1039883a 	mov	fp,r2
    4474:	0004dbc0 	call	4dbc <__mulsi3>
    4478:	8809883a 	mov	r4,r17
    447c:	a80b883a 	mov	r5,r21
    4480:	1029883a 	mov	r20,r2
    4484:	0004dbc0 	call	4dbc <__mulsi3>
    4488:	a80b883a 	mov	r5,r21
    448c:	b009883a 	mov	r4,r22
    4490:	1023883a 	mov	r17,r2
    4494:	0004dbc0 	call	4dbc <__mulsi3>
    4498:	e006d43a 	srli	r3,fp,16
    449c:	1505883a 	add	r2,r2,r20
    44a0:	1887883a 	add	r3,r3,r2
    44a4:	1d00022e 	bgeu	r3,r20,44b0 <__udivdi3+0x468>
    44a8:	00800074 	movhi	r2,1
    44ac:	88a3883a 	add	r17,r17,r2
    44b0:	1804d43a 	srli	r2,r3,16
    44b4:	1463883a 	add	r17,r2,r17
    44b8:	84404436 	bltu	r16,r17,45cc <__udivdi3+0x584>
    44bc:	84403e26 	beq	r16,r17,45b8 <__udivdi3+0x570>
    44c0:	9005883a 	mov	r2,r18
    44c4:	0007883a 	mov	r3,zero
    44c8:	003f9106 	br	4310 <__ram_exceptions_end+0xfe0022f0>
    44cc:	88e2983a 	sll	r17,r17,r3
    44d0:	80aed83a 	srl	r23,r16,r2
    44d4:	80e0983a 	sll	r16,r16,r3
    44d8:	882ad43a 	srli	r21,r17,16
    44dc:	9884d83a 	srl	r2,r19,r2
    44e0:	b809883a 	mov	r4,r23
    44e4:	a80b883a 	mov	r5,r21
    44e8:	98e4983a 	sll	r18,r19,r3
    44ec:	142cb03a 	or	r22,r2,r16
    44f0:	0004d640 	call	4d64 <__umodsi3>
    44f4:	b809883a 	mov	r4,r23
    44f8:	a80b883a 	mov	r5,r21
    44fc:	1027883a 	mov	r19,r2
    4500:	8d3fffcc 	andi	r20,r17,65535
    4504:	0004d000 	call	4d00 <__udivsi3>
    4508:	a009883a 	mov	r4,r20
    450c:	100b883a 	mov	r5,r2
    4510:	102f883a 	mov	r23,r2
    4514:	0004dbc0 	call	4dbc <__mulsi3>
    4518:	9826943a 	slli	r19,r19,16
    451c:	b008d43a 	srli	r4,r22,16
    4520:	24c8b03a 	or	r4,r4,r19
    4524:	2080062e 	bgeu	r4,r2,4540 <__udivdi3+0x4f8>
    4528:	2449883a 	add	r4,r4,r17
    452c:	b8ffffc4 	addi	r3,r23,-1
    4530:	24403c36 	bltu	r4,r17,4624 <__udivdi3+0x5dc>
    4534:	20803b2e 	bgeu	r4,r2,4624 <__udivdi3+0x5dc>
    4538:	bdffff84 	addi	r23,r23,-2
    453c:	2449883a 	add	r4,r4,r17
    4540:	20a1c83a 	sub	r16,r4,r2
    4544:	a80b883a 	mov	r5,r21
    4548:	8009883a 	mov	r4,r16
    454c:	0004d640 	call	4d64 <__umodsi3>
    4550:	a80b883a 	mov	r5,r21
    4554:	8009883a 	mov	r4,r16
    4558:	1027883a 	mov	r19,r2
    455c:	0004d000 	call	4d00 <__udivsi3>
    4560:	a009883a 	mov	r4,r20
    4564:	100b883a 	mov	r5,r2
    4568:	9826943a 	slli	r19,r19,16
    456c:	1039883a 	mov	fp,r2
    4570:	0004dbc0 	call	4dbc <__mulsi3>
    4574:	b13fffcc 	andi	r4,r22,65535
    4578:	24c8b03a 	or	r4,r4,r19
    457c:	2080062e 	bgeu	r4,r2,4598 <__udivdi3+0x550>
    4580:	2449883a 	add	r4,r4,r17
    4584:	e0ffffc4 	addi	r3,fp,-1
    4588:	24402436 	bltu	r4,r17,461c <__udivdi3+0x5d4>
    458c:	2080232e 	bgeu	r4,r2,461c <__udivdi3+0x5d4>
    4590:	e73fff84 	addi	fp,fp,-2
    4594:	2449883a 	add	r4,r4,r17
    4598:	b82e943a 	slli	r23,r23,16
    459c:	20a1c83a 	sub	r16,r4,r2
    45a0:	bf06b03a 	or	r3,r23,fp
    45a4:	003f2806 	br	4248 <__ram_exceptions_end+0xfe002228>
    45a8:	2021883a 	mov	r16,r4
    45ac:	003f5306 	br	42fc <__ram_exceptions_end+0xfe0022dc>
    45b0:	1821883a 	mov	r16,r3
    45b4:	003ef406 	br	4188 <__ram_exceptions_end+0xfe002168>
    45b8:	1806943a 	slli	r3,r3,16
    45bc:	9de6983a 	sll	r19,r19,r23
    45c0:	e73fffcc 	andi	fp,fp,65535
    45c4:	1f07883a 	add	r3,r3,fp
    45c8:	98ffbd2e 	bgeu	r19,r3,44c0 <__ram_exceptions_end+0xfe0024a0>
    45cc:	90bfffc4 	addi	r2,r18,-1
    45d0:	0007883a 	mov	r3,zero
    45d4:	003f4e06 	br	4310 <__ram_exceptions_end+0xfe0022f0>
    45d8:	00800604 	movi	r2,24
    45dc:	003ef506 	br	41b4 <__ram_exceptions_end+0xfe002194>
    45e0:	00800604 	movi	r2,24
    45e4:	003f0b06 	br	4214 <__ram_exceptions_end+0xfe0021f4>
    45e8:	00800604 	movi	r2,24
    45ec:	003ead06 	br	40a4 <__ram_exceptions_end+0xfe002084>
    45f0:	0007883a 	mov	r3,zero
    45f4:	00800044 	movi	r2,1
    45f8:	003f4506 	br	4310 <__ram_exceptions_end+0xfe0022f0>
    45fc:	80bf8e2e 	bgeu	r16,r2,4438 <__ram_exceptions_end+0xfe002418>
    4600:	8c7fff84 	addi	r17,r17,-2
    4604:	8721883a 	add	r16,r16,fp
    4608:	003f8c06 	br	443c <__ram_exceptions_end+0xfe00241c>
    460c:	18bf762e 	bgeu	r3,r2,43e8 <__ram_exceptions_end+0xfe0023c8>
    4610:	ad7fff84 	addi	r21,r21,-2
    4614:	1f07883a 	add	r3,r3,fp
    4618:	003f7406 	br	43ec <__ram_exceptions_end+0xfe0023cc>
    461c:	1839883a 	mov	fp,r3
    4620:	003fdd06 	br	4598 <__ram_exceptions_end+0xfe002578>
    4624:	182f883a 	mov	r23,r3
    4628:	003fc506 	br	4540 <__ram_exceptions_end+0xfe002520>
    462c:	b5bfff84 	addi	r22,r22,-2
    4630:	3c4f883a 	add	r7,r7,r17
    4634:	003f1a06 	br	42a0 <__ram_exceptions_end+0xfe002280>
    4638:	b5bfff84 	addi	r22,r22,-2
    463c:	1c47883a 	add	r3,r3,r17
    4640:	003ebc06 	br	4134 <__ram_exceptions_end+0xfe002114>

00004644 <__umoddi3>:
    4644:	defff304 	addi	sp,sp,-52
    4648:	df000b15 	stw	fp,44(sp)
    464c:	dc400415 	stw	r17,16(sp)
    4650:	dc000315 	stw	r16,12(sp)
    4654:	dfc00c15 	stw	ra,48(sp)
    4658:	ddc00a15 	stw	r23,40(sp)
    465c:	dd800915 	stw	r22,36(sp)
    4660:	dd400815 	stw	r21,32(sp)
    4664:	dd000715 	stw	r20,28(sp)
    4668:	dcc00615 	stw	r19,24(sp)
    466c:	dc800515 	stw	r18,20(sp)
    4670:	2021883a 	mov	r16,r4
    4674:	2823883a 	mov	r17,r5
    4678:	2839883a 	mov	fp,r5
    467c:	3800401e 	bne	r7,zero,4780 <__umoddi3+0x13c>
    4680:	3027883a 	mov	r19,r6
    4684:	2029883a 	mov	r20,r4
    4688:	2980552e 	bgeu	r5,r6,47e0 <__umoddi3+0x19c>
    468c:	00bfffd4 	movui	r2,65535
    4690:	1180a236 	bltu	r2,r6,491c <__umoddi3+0x2d8>
    4694:	01003fc4 	movi	r4,255
    4698:	2189803a 	cmpltu	r4,r4,r6
    469c:	200890fa 	slli	r4,r4,3
    46a0:	3104d83a 	srl	r2,r6,r4
    46a4:	00c00074 	movhi	r3,1
    46a8:	18e49c04 	addi	r3,r3,-28048
    46ac:	1885883a 	add	r2,r3,r2
    46b0:	10c00003 	ldbu	r3,0(r2)
    46b4:	00800804 	movi	r2,32
    46b8:	1909883a 	add	r4,r3,r4
    46bc:	1125c83a 	sub	r18,r2,r4
    46c0:	90000526 	beq	r18,zero,46d8 <__umoddi3+0x94>
    46c4:	8ca2983a 	sll	r17,r17,r18
    46c8:	8108d83a 	srl	r4,r16,r4
    46cc:	34a6983a 	sll	r19,r6,r18
    46d0:	84a8983a 	sll	r20,r16,r18
    46d4:	2478b03a 	or	fp,r4,r17
    46d8:	982cd43a 	srli	r22,r19,16
    46dc:	e009883a 	mov	r4,fp
    46e0:	9dffffcc 	andi	r23,r19,65535
    46e4:	b00b883a 	mov	r5,r22
    46e8:	0004d640 	call	4d64 <__umodsi3>
    46ec:	b00b883a 	mov	r5,r22
    46f0:	e009883a 	mov	r4,fp
    46f4:	102b883a 	mov	r21,r2
    46f8:	0004d000 	call	4d00 <__udivsi3>
    46fc:	100b883a 	mov	r5,r2
    4700:	b809883a 	mov	r4,r23
    4704:	0004dbc0 	call	4dbc <__mulsi3>
    4708:	a82a943a 	slli	r21,r21,16
    470c:	a006d43a 	srli	r3,r20,16
    4710:	1d46b03a 	or	r3,r3,r21
    4714:	1880032e 	bgeu	r3,r2,4724 <__umoddi3+0xe0>
    4718:	1cc7883a 	add	r3,r3,r19
    471c:	1cc00136 	bltu	r3,r19,4724 <__umoddi3+0xe0>
    4720:	18813136 	bltu	r3,r2,4be8 <__umoddi3+0x5a4>
    4724:	18a1c83a 	sub	r16,r3,r2
    4728:	b00b883a 	mov	r5,r22
    472c:	8009883a 	mov	r4,r16
    4730:	0004d640 	call	4d64 <__umodsi3>
    4734:	b00b883a 	mov	r5,r22
    4738:	8009883a 	mov	r4,r16
    473c:	1023883a 	mov	r17,r2
    4740:	0004d000 	call	4d00 <__udivsi3>
    4744:	100b883a 	mov	r5,r2
    4748:	b809883a 	mov	r4,r23
    474c:	8822943a 	slli	r17,r17,16
    4750:	0004dbc0 	call	4dbc <__mulsi3>
    4754:	a0ffffcc 	andi	r3,r20,65535
    4758:	1c46b03a 	or	r3,r3,r17
    475c:	1880042e 	bgeu	r3,r2,4770 <__umoddi3+0x12c>
    4760:	1cc7883a 	add	r3,r3,r19
    4764:	1cc00236 	bltu	r3,r19,4770 <__umoddi3+0x12c>
    4768:	1880012e 	bgeu	r3,r2,4770 <__umoddi3+0x12c>
    476c:	1cc7883a 	add	r3,r3,r19
    4770:	1885c83a 	sub	r2,r3,r2
    4774:	1484d83a 	srl	r2,r2,r18
    4778:	0007883a 	mov	r3,zero
    477c:	00005306 	br	48cc <__umoddi3+0x288>
    4780:	29c05036 	bltu	r5,r7,48c4 <__umoddi3+0x280>
    4784:	00bfffd4 	movui	r2,65535
    4788:	11c05c2e 	bgeu	r2,r7,48fc <__umoddi3+0x2b8>
    478c:	00804034 	movhi	r2,256
    4790:	10bfffc4 	addi	r2,r2,-1
    4794:	11c10636 	bltu	r2,r7,4bb0 <__umoddi3+0x56c>
    4798:	01000404 	movi	r4,16
    479c:	3904d83a 	srl	r2,r7,r4
    47a0:	00c00074 	movhi	r3,1
    47a4:	18e49c04 	addi	r3,r3,-28048
    47a8:	1885883a 	add	r2,r3,r2
    47ac:	14c00003 	ldbu	r19,0(r2)
    47b0:	00c00804 	movi	r3,32
    47b4:	9927883a 	add	r19,r19,r4
    47b8:	1ce9c83a 	sub	r20,r3,r19
    47bc:	a0005c1e 	bne	r20,zero,4930 <__umoddi3+0x2ec>
    47c0:	3c400136 	bltu	r7,r17,47c8 <__umoddi3+0x184>
    47c4:	81810a36 	bltu	r16,r6,4bf0 <__umoddi3+0x5ac>
    47c8:	8185c83a 	sub	r2,r16,r6
    47cc:	89e3c83a 	sub	r17,r17,r7
    47d0:	8089803a 	cmpltu	r4,r16,r2
    47d4:	8939c83a 	sub	fp,r17,r4
    47d8:	e007883a 	mov	r3,fp
    47dc:	00003b06 	br	48cc <__umoddi3+0x288>
    47e0:	3000041e 	bne	r6,zero,47f4 <__umoddi3+0x1b0>
    47e4:	000b883a 	mov	r5,zero
    47e8:	01000044 	movi	r4,1
    47ec:	0004d000 	call	4d00 <__udivsi3>
    47f0:	1027883a 	mov	r19,r2
    47f4:	00bfffd4 	movui	r2,65535
    47f8:	14c0442e 	bgeu	r2,r19,490c <__umoddi3+0x2c8>
    47fc:	00804034 	movhi	r2,256
    4800:	10bfffc4 	addi	r2,r2,-1
    4804:	14c0ec36 	bltu	r2,r19,4bb8 <__umoddi3+0x574>
    4808:	00800404 	movi	r2,16
    480c:	9886d83a 	srl	r3,r19,r2
    4810:	01000074 	movhi	r4,1
    4814:	21249c04 	addi	r4,r4,-28048
    4818:	20c7883a 	add	r3,r4,r3
    481c:	18c00003 	ldbu	r3,0(r3)
    4820:	1887883a 	add	r3,r3,r2
    4824:	00800804 	movi	r2,32
    4828:	10e5c83a 	sub	r18,r2,r3
    482c:	9000ab1e 	bne	r18,zero,4adc <__umoddi3+0x498>
    4830:	982cd43a 	srli	r22,r19,16
    4834:	8ce3c83a 	sub	r17,r17,r19
    4838:	9dffffcc 	andi	r23,r19,65535
    483c:	b00b883a 	mov	r5,r22
    4840:	8809883a 	mov	r4,r17
    4844:	0004d640 	call	4d64 <__umodsi3>
    4848:	b00b883a 	mov	r5,r22
    484c:	8809883a 	mov	r4,r17
    4850:	102b883a 	mov	r21,r2
    4854:	0004d000 	call	4d00 <__udivsi3>
    4858:	b80b883a 	mov	r5,r23
    485c:	1009883a 	mov	r4,r2
    4860:	0004dbc0 	call	4dbc <__mulsi3>
    4864:	a82a943a 	slli	r21,r21,16
    4868:	a006d43a 	srli	r3,r20,16
    486c:	1d46b03a 	or	r3,r3,r21
    4870:	1880042e 	bgeu	r3,r2,4884 <__umoddi3+0x240>
    4874:	1cc7883a 	add	r3,r3,r19
    4878:	1cc00236 	bltu	r3,r19,4884 <__umoddi3+0x240>
    487c:	1880012e 	bgeu	r3,r2,4884 <__umoddi3+0x240>
    4880:	1cc7883a 	add	r3,r3,r19
    4884:	18a1c83a 	sub	r16,r3,r2
    4888:	b00b883a 	mov	r5,r22
    488c:	8009883a 	mov	r4,r16
    4890:	0004d640 	call	4d64 <__umodsi3>
    4894:	1023883a 	mov	r17,r2
    4898:	b00b883a 	mov	r5,r22
    489c:	8009883a 	mov	r4,r16
    48a0:	0004d000 	call	4d00 <__udivsi3>
    48a4:	8822943a 	slli	r17,r17,16
    48a8:	b80b883a 	mov	r5,r23
    48ac:	1009883a 	mov	r4,r2
    48b0:	0004dbc0 	call	4dbc <__mulsi3>
    48b4:	a53fffcc 	andi	r20,r20,65535
    48b8:	a446b03a 	or	r3,r20,r17
    48bc:	18bfac2e 	bgeu	r3,r2,4770 <__ram_exceptions_end+0xfe002750>
    48c0:	003fa706 	br	4760 <__ram_exceptions_end+0xfe002740>
    48c4:	2005883a 	mov	r2,r4
    48c8:	2807883a 	mov	r3,r5
    48cc:	dfc00c17 	ldw	ra,48(sp)
    48d0:	df000b17 	ldw	fp,44(sp)
    48d4:	ddc00a17 	ldw	r23,40(sp)
    48d8:	dd800917 	ldw	r22,36(sp)
    48dc:	dd400817 	ldw	r21,32(sp)
    48e0:	dd000717 	ldw	r20,28(sp)
    48e4:	dcc00617 	ldw	r19,24(sp)
    48e8:	dc800517 	ldw	r18,20(sp)
    48ec:	dc400417 	ldw	r17,16(sp)
    48f0:	dc000317 	ldw	r16,12(sp)
    48f4:	dec00d04 	addi	sp,sp,52
    48f8:	f800283a 	ret
    48fc:	04c03fc4 	movi	r19,255
    4900:	99c9803a 	cmpltu	r4,r19,r7
    4904:	200890fa 	slli	r4,r4,3
    4908:	003fa406 	br	479c <__ram_exceptions_end+0xfe00277c>
    490c:	00803fc4 	movi	r2,255
    4910:	14c5803a 	cmpltu	r2,r2,r19
    4914:	100490fa 	slli	r2,r2,3
    4918:	003fbc06 	br	480c <__ram_exceptions_end+0xfe0027ec>
    491c:	00804034 	movhi	r2,256
    4920:	10bfffc4 	addi	r2,r2,-1
    4924:	1180a636 	bltu	r2,r6,4bc0 <__umoddi3+0x57c>
    4928:	01000404 	movi	r4,16
    492c:	003f5c06 	br	46a0 <__ram_exceptions_end+0xfe002680>
    4930:	3d0e983a 	sll	r7,r7,r20
    4934:	34ead83a 	srl	r21,r6,r19
    4938:	8cc6d83a 	srl	r3,r17,r19
    493c:	8d10983a 	sll	r8,r17,r20
    4940:	3d6ab03a 	or	r21,r7,r21
    4944:	a82cd43a 	srli	r22,r21,16
    4948:	84e2d83a 	srl	r17,r16,r19
    494c:	1809883a 	mov	r4,r3
    4950:	b00b883a 	mov	r5,r22
    4954:	8a22b03a 	or	r17,r17,r8
    4958:	3524983a 	sll	r18,r6,r20
    495c:	dc400015 	stw	r17,0(sp)
    4960:	d8c00115 	stw	r3,4(sp)
    4964:	0004d640 	call	4d64 <__umodsi3>
    4968:	d8c00117 	ldw	r3,4(sp)
    496c:	b00b883a 	mov	r5,r22
    4970:	1039883a 	mov	fp,r2
    4974:	1809883a 	mov	r4,r3
    4978:	0004d000 	call	4d00 <__udivsi3>
    497c:	adffffcc 	andi	r23,r21,65535
    4980:	100b883a 	mov	r5,r2
    4984:	b809883a 	mov	r4,r23
    4988:	1023883a 	mov	r17,r2
    498c:	0004dbc0 	call	4dbc <__mulsi3>
    4990:	d9400017 	ldw	r5,0(sp)
    4994:	e008943a 	slli	r4,fp,16
    4998:	8520983a 	sll	r16,r16,r20
    499c:	2806d43a 	srli	r3,r5,16
    49a0:	1906b03a 	or	r3,r3,r4
    49a4:	1880042e 	bgeu	r3,r2,49b8 <__umoddi3+0x374>
    49a8:	1d47883a 	add	r3,r3,r21
    49ac:	893fffc4 	addi	r4,r17,-1
    49b0:	1d40892e 	bgeu	r3,r21,4bd8 <__umoddi3+0x594>
    49b4:	2023883a 	mov	r17,r4
    49b8:	18b9c83a 	sub	fp,r3,r2
    49bc:	b00b883a 	mov	r5,r22
    49c0:	e009883a 	mov	r4,fp
    49c4:	0004d640 	call	4d64 <__umodsi3>
    49c8:	b00b883a 	mov	r5,r22
    49cc:	e009883a 	mov	r4,fp
    49d0:	d8800215 	stw	r2,8(sp)
    49d4:	0004d000 	call	4d00 <__udivsi3>
    49d8:	100b883a 	mov	r5,r2
    49dc:	b809883a 	mov	r4,r23
    49e0:	102d883a 	mov	r22,r2
    49e4:	0004dbc0 	call	4dbc <__mulsi3>
    49e8:	d9800217 	ldw	r6,8(sp)
    49ec:	d8c00017 	ldw	r3,0(sp)
    49f0:	300c943a 	slli	r6,r6,16
    49f4:	1a3fffcc 	andi	r8,r3,65535
    49f8:	4190b03a 	or	r8,r8,r6
    49fc:	4080042e 	bgeu	r8,r2,4a10 <__umoddi3+0x3cc>
    4a00:	4551883a 	add	r8,r8,r21
    4a04:	b0ffffc4 	addi	r3,r22,-1
    4a08:	45406f2e 	bgeu	r8,r21,4bc8 <__umoddi3+0x584>
    4a0c:	182d883a 	mov	r22,r3
    4a10:	880e943a 	slli	r7,r17,16
    4a14:	9006d43a 	srli	r3,r18,16
    4a18:	91bfffcc 	andi	r6,r18,65535
    4a1c:	3dacb03a 	or	r22,r7,r22
    4a20:	b02ed43a 	srli	r23,r22,16
    4a24:	b5bfffcc 	andi	r22,r22,65535
    4a28:	300b883a 	mov	r5,r6
    4a2c:	b009883a 	mov	r4,r22
    4a30:	40a3c83a 	sub	r17,r8,r2
    4a34:	d8c00115 	stw	r3,4(sp)
    4a38:	d9800215 	stw	r6,8(sp)
    4a3c:	0004dbc0 	call	4dbc <__mulsi3>
    4a40:	d9800217 	ldw	r6,8(sp)
    4a44:	b809883a 	mov	r4,r23
    4a48:	1039883a 	mov	fp,r2
    4a4c:	300b883a 	mov	r5,r6
    4a50:	0004dbc0 	call	4dbc <__mulsi3>
    4a54:	d8c00117 	ldw	r3,4(sp)
    4a58:	b809883a 	mov	r4,r23
    4a5c:	d8800215 	stw	r2,8(sp)
    4a60:	180b883a 	mov	r5,r3
    4a64:	0004dbc0 	call	4dbc <__mulsi3>
    4a68:	d8c00117 	ldw	r3,4(sp)
    4a6c:	b009883a 	mov	r4,r22
    4a70:	102f883a 	mov	r23,r2
    4a74:	180b883a 	mov	r5,r3
    4a78:	0004dbc0 	call	4dbc <__mulsi3>
    4a7c:	d9800217 	ldw	r6,8(sp)
    4a80:	e006d43a 	srli	r3,fp,16
    4a84:	1185883a 	add	r2,r2,r6
    4a88:	1885883a 	add	r2,r3,r2
    4a8c:	1180022e 	bgeu	r2,r6,4a98 <__umoddi3+0x454>
    4a90:	00c00074 	movhi	r3,1
    4a94:	b8ef883a 	add	r23,r23,r3
    4a98:	1006d43a 	srli	r3,r2,16
    4a9c:	1004943a 	slli	r2,r2,16
    4aa0:	e73fffcc 	andi	fp,fp,65535
    4aa4:	1dc7883a 	add	r3,r3,r23
    4aa8:	1739883a 	add	fp,r2,fp
    4aac:	88c03a36 	bltu	r17,r3,4b98 <__umoddi3+0x554>
    4ab0:	88c05126 	beq	r17,r3,4bf8 <__umoddi3+0x5b4>
    4ab4:	88c9c83a 	sub	r4,r17,r3
    4ab8:	e00f883a 	mov	r7,fp
    4abc:	81cfc83a 	sub	r7,r16,r7
    4ac0:	81c7803a 	cmpltu	r3,r16,r7
    4ac4:	20c7c83a 	sub	r3,r4,r3
    4ac8:	1cc4983a 	sll	r2,r3,r19
    4acc:	3d0ed83a 	srl	r7,r7,r20
    4ad0:	1d06d83a 	srl	r3,r3,r20
    4ad4:	11c4b03a 	or	r2,r2,r7
    4ad8:	003f7c06 	br	48cc <__ram_exceptions_end+0xfe0028ac>
    4adc:	9ca6983a 	sll	r19,r19,r18
    4ae0:	88f8d83a 	srl	fp,r17,r3
    4ae4:	80c4d83a 	srl	r2,r16,r3
    4ae8:	982cd43a 	srli	r22,r19,16
    4aec:	8ca2983a 	sll	r17,r17,r18
    4af0:	e009883a 	mov	r4,fp
    4af4:	b00b883a 	mov	r5,r22
    4af8:	146ab03a 	or	r21,r2,r17
    4afc:	0004d640 	call	4d64 <__umodsi3>
    4b00:	b00b883a 	mov	r5,r22
    4b04:	e009883a 	mov	r4,fp
    4b08:	1029883a 	mov	r20,r2
    4b0c:	9dffffcc 	andi	r23,r19,65535
    4b10:	0004d000 	call	4d00 <__udivsi3>
    4b14:	b809883a 	mov	r4,r23
    4b18:	100b883a 	mov	r5,r2
    4b1c:	0004dbc0 	call	4dbc <__mulsi3>
    4b20:	a008943a 	slli	r4,r20,16
    4b24:	a806d43a 	srli	r3,r21,16
    4b28:	84a8983a 	sll	r20,r16,r18
    4b2c:	1906b03a 	or	r3,r3,r4
    4b30:	1880042e 	bgeu	r3,r2,4b44 <__umoddi3+0x500>
    4b34:	1cc7883a 	add	r3,r3,r19
    4b38:	1cc00236 	bltu	r3,r19,4b44 <__umoddi3+0x500>
    4b3c:	1880012e 	bgeu	r3,r2,4b44 <__umoddi3+0x500>
    4b40:	1cc7883a 	add	r3,r3,r19
    4b44:	18a3c83a 	sub	r17,r3,r2
    4b48:	b00b883a 	mov	r5,r22
    4b4c:	8809883a 	mov	r4,r17
    4b50:	0004d640 	call	4d64 <__umodsi3>
    4b54:	b00b883a 	mov	r5,r22
    4b58:	8809883a 	mov	r4,r17
    4b5c:	1021883a 	mov	r16,r2
    4b60:	0004d000 	call	4d00 <__udivsi3>
    4b64:	100b883a 	mov	r5,r2
    4b68:	b809883a 	mov	r4,r23
    4b6c:	8020943a 	slli	r16,r16,16
    4b70:	0004dbc0 	call	4dbc <__mulsi3>
    4b74:	a8ffffcc 	andi	r3,r21,65535
    4b78:	1c06b03a 	or	r3,r3,r16
    4b7c:	1880042e 	bgeu	r3,r2,4b90 <__umoddi3+0x54c>
    4b80:	1cc7883a 	add	r3,r3,r19
    4b84:	1cc00236 	bltu	r3,r19,4b90 <__umoddi3+0x54c>
    4b88:	1880012e 	bgeu	r3,r2,4b90 <__umoddi3+0x54c>
    4b8c:	1cc7883a 	add	r3,r3,r19
    4b90:	18a3c83a 	sub	r17,r3,r2
    4b94:	003f2906 	br	483c <__ram_exceptions_end+0xfe00281c>
    4b98:	e48fc83a 	sub	r7,fp,r18
    4b9c:	1d49c83a 	sub	r4,r3,r21
    4ba0:	e1f9803a 	cmpltu	fp,fp,r7
    4ba4:	2739c83a 	sub	fp,r4,fp
    4ba8:	8f09c83a 	sub	r4,r17,fp
    4bac:	003fc306 	br	4abc <__ram_exceptions_end+0xfe002a9c>
    4bb0:	01000604 	movi	r4,24
    4bb4:	003ef906 	br	479c <__ram_exceptions_end+0xfe00277c>
    4bb8:	00800604 	movi	r2,24
    4bbc:	003f1306 	br	480c <__ram_exceptions_end+0xfe0027ec>
    4bc0:	01000604 	movi	r4,24
    4bc4:	003eb606 	br	46a0 <__ram_exceptions_end+0xfe002680>
    4bc8:	40bf902e 	bgeu	r8,r2,4a0c <__ram_exceptions_end+0xfe0029ec>
    4bcc:	b5bfff84 	addi	r22,r22,-2
    4bd0:	4551883a 	add	r8,r8,r21
    4bd4:	003f8e06 	br	4a10 <__ram_exceptions_end+0xfe0029f0>
    4bd8:	18bf762e 	bgeu	r3,r2,49b4 <__ram_exceptions_end+0xfe002994>
    4bdc:	8c7fff84 	addi	r17,r17,-2
    4be0:	1d47883a 	add	r3,r3,r21
    4be4:	003f7406 	br	49b8 <__ram_exceptions_end+0xfe002998>
    4be8:	1cc7883a 	add	r3,r3,r19
    4bec:	003ecd06 	br	4724 <__ram_exceptions_end+0xfe002704>
    4bf0:	8005883a 	mov	r2,r16
    4bf4:	003ef806 	br	47d8 <__ram_exceptions_end+0xfe0027b8>
    4bf8:	873fe736 	bltu	r16,fp,4b98 <__ram_exceptions_end+0xfe002b78>
    4bfc:	e00f883a 	mov	r7,fp
    4c00:	0009883a 	mov	r4,zero
    4c04:	003fad06 	br	4abc <__ram_exceptions_end+0xfe002a9c>

00004c08 <__divsi3>:
    4c08:	20001b16 	blt	r4,zero,4c78 <__divsi3+0x70>
    4c0c:	000f883a 	mov	r7,zero
    4c10:	28001616 	blt	r5,zero,4c6c <__divsi3+0x64>
    4c14:	200d883a 	mov	r6,r4
    4c18:	29001a2e 	bgeu	r5,r4,4c84 <__divsi3+0x7c>
    4c1c:	00800804 	movi	r2,32
    4c20:	00c00044 	movi	r3,1
    4c24:	00000106 	br	4c2c <__divsi3+0x24>
    4c28:	10000d26 	beq	r2,zero,4c60 <__divsi3+0x58>
    4c2c:	294b883a 	add	r5,r5,r5
    4c30:	10bfffc4 	addi	r2,r2,-1
    4c34:	18c7883a 	add	r3,r3,r3
    4c38:	293ffb36 	bltu	r5,r4,4c28 <__ram_exceptions_end+0xfe002c08>
    4c3c:	0005883a 	mov	r2,zero
    4c40:	18000726 	beq	r3,zero,4c60 <__divsi3+0x58>
    4c44:	0005883a 	mov	r2,zero
    4c48:	31400236 	bltu	r6,r5,4c54 <__divsi3+0x4c>
    4c4c:	314dc83a 	sub	r6,r6,r5
    4c50:	10c4b03a 	or	r2,r2,r3
    4c54:	1806d07a 	srli	r3,r3,1
    4c58:	280ad07a 	srli	r5,r5,1
    4c5c:	183ffa1e 	bne	r3,zero,4c48 <__ram_exceptions_end+0xfe002c28>
    4c60:	38000126 	beq	r7,zero,4c68 <__divsi3+0x60>
    4c64:	0085c83a 	sub	r2,zero,r2
    4c68:	f800283a 	ret
    4c6c:	014bc83a 	sub	r5,zero,r5
    4c70:	39c0005c 	xori	r7,r7,1
    4c74:	003fe706 	br	4c14 <__ram_exceptions_end+0xfe002bf4>
    4c78:	0109c83a 	sub	r4,zero,r4
    4c7c:	01c00044 	movi	r7,1
    4c80:	003fe306 	br	4c10 <__ram_exceptions_end+0xfe002bf0>
    4c84:	00c00044 	movi	r3,1
    4c88:	003fee06 	br	4c44 <__ram_exceptions_end+0xfe002c24>

00004c8c <__modsi3>:
    4c8c:	20001716 	blt	r4,zero,4cec <__modsi3+0x60>
    4c90:	000f883a 	mov	r7,zero
    4c94:	2005883a 	mov	r2,r4
    4c98:	28001216 	blt	r5,zero,4ce4 <__modsi3+0x58>
    4c9c:	2900162e 	bgeu	r5,r4,4cf8 <__modsi3+0x6c>
    4ca0:	01800804 	movi	r6,32
    4ca4:	00c00044 	movi	r3,1
    4ca8:	00000106 	br	4cb0 <__modsi3+0x24>
    4cac:	30000a26 	beq	r6,zero,4cd8 <__modsi3+0x4c>
    4cb0:	294b883a 	add	r5,r5,r5
    4cb4:	31bfffc4 	addi	r6,r6,-1
    4cb8:	18c7883a 	add	r3,r3,r3
    4cbc:	293ffb36 	bltu	r5,r4,4cac <__ram_exceptions_end+0xfe002c8c>
    4cc0:	18000526 	beq	r3,zero,4cd8 <__modsi3+0x4c>
    4cc4:	1806d07a 	srli	r3,r3,1
    4cc8:	11400136 	bltu	r2,r5,4cd0 <__modsi3+0x44>
    4ccc:	1145c83a 	sub	r2,r2,r5
    4cd0:	280ad07a 	srli	r5,r5,1
    4cd4:	183ffb1e 	bne	r3,zero,4cc4 <__ram_exceptions_end+0xfe002ca4>
    4cd8:	38000126 	beq	r7,zero,4ce0 <__modsi3+0x54>
    4cdc:	0085c83a 	sub	r2,zero,r2
    4ce0:	f800283a 	ret
    4ce4:	014bc83a 	sub	r5,zero,r5
    4ce8:	003fec06 	br	4c9c <__ram_exceptions_end+0xfe002c7c>
    4cec:	0109c83a 	sub	r4,zero,r4
    4cf0:	01c00044 	movi	r7,1
    4cf4:	003fe706 	br	4c94 <__ram_exceptions_end+0xfe002c74>
    4cf8:	00c00044 	movi	r3,1
    4cfc:	003ff106 	br	4cc4 <__ram_exceptions_end+0xfe002ca4>

00004d00 <__udivsi3>:
    4d00:	200d883a 	mov	r6,r4
    4d04:	2900152e 	bgeu	r5,r4,4d5c <__udivsi3+0x5c>
    4d08:	28001416 	blt	r5,zero,4d5c <__udivsi3+0x5c>
    4d0c:	00800804 	movi	r2,32
    4d10:	00c00044 	movi	r3,1
    4d14:	00000206 	br	4d20 <__udivsi3+0x20>
    4d18:	10000e26 	beq	r2,zero,4d54 <__udivsi3+0x54>
    4d1c:	28000516 	blt	r5,zero,4d34 <__udivsi3+0x34>
    4d20:	294b883a 	add	r5,r5,r5
    4d24:	10bfffc4 	addi	r2,r2,-1
    4d28:	18c7883a 	add	r3,r3,r3
    4d2c:	293ffa36 	bltu	r5,r4,4d18 <__ram_exceptions_end+0xfe002cf8>
    4d30:	18000826 	beq	r3,zero,4d54 <__udivsi3+0x54>
    4d34:	0005883a 	mov	r2,zero
    4d38:	31400236 	bltu	r6,r5,4d44 <__udivsi3+0x44>
    4d3c:	314dc83a 	sub	r6,r6,r5
    4d40:	10c4b03a 	or	r2,r2,r3
    4d44:	1806d07a 	srli	r3,r3,1
    4d48:	280ad07a 	srli	r5,r5,1
    4d4c:	183ffa1e 	bne	r3,zero,4d38 <__ram_exceptions_end+0xfe002d18>
    4d50:	f800283a 	ret
    4d54:	0005883a 	mov	r2,zero
    4d58:	f800283a 	ret
    4d5c:	00c00044 	movi	r3,1
    4d60:	003ff406 	br	4d34 <__ram_exceptions_end+0xfe002d14>

00004d64 <__umodsi3>:
    4d64:	2005883a 	mov	r2,r4
    4d68:	2900122e 	bgeu	r5,r4,4db4 <__umodsi3+0x50>
    4d6c:	28001116 	blt	r5,zero,4db4 <__umodsi3+0x50>
    4d70:	01800804 	movi	r6,32
    4d74:	00c00044 	movi	r3,1
    4d78:	00000206 	br	4d84 <__umodsi3+0x20>
    4d7c:	30000c26 	beq	r6,zero,4db0 <__umodsi3+0x4c>
    4d80:	28000516 	blt	r5,zero,4d98 <__umodsi3+0x34>
    4d84:	294b883a 	add	r5,r5,r5
    4d88:	31bfffc4 	addi	r6,r6,-1
    4d8c:	18c7883a 	add	r3,r3,r3
    4d90:	293ffa36 	bltu	r5,r4,4d7c <__ram_exceptions_end+0xfe002d5c>
    4d94:	18000626 	beq	r3,zero,4db0 <__umodsi3+0x4c>
    4d98:	1806d07a 	srli	r3,r3,1
    4d9c:	11400136 	bltu	r2,r5,4da4 <__umodsi3+0x40>
    4da0:	1145c83a 	sub	r2,r2,r5
    4da4:	280ad07a 	srli	r5,r5,1
    4da8:	183ffb1e 	bne	r3,zero,4d98 <__ram_exceptions_end+0xfe002d78>
    4dac:	f800283a 	ret
    4db0:	f800283a 	ret
    4db4:	00c00044 	movi	r3,1
    4db8:	003ff706 	br	4d98 <__ram_exceptions_end+0xfe002d78>

00004dbc <__mulsi3>:
    4dbc:	0005883a 	mov	r2,zero
    4dc0:	20000726 	beq	r4,zero,4de0 <__mulsi3+0x24>
    4dc4:	20c0004c 	andi	r3,r4,1
    4dc8:	2008d07a 	srli	r4,r4,1
    4dcc:	18000126 	beq	r3,zero,4dd4 <__mulsi3+0x18>
    4dd0:	1145883a 	add	r2,r2,r5
    4dd4:	294b883a 	add	r5,r5,r5
    4dd8:	203ffa1e 	bne	r4,zero,4dc4 <__ram_exceptions_end+0xfe002da4>
    4ddc:	f800283a 	ret
    4de0:	f800283a 	ret

00004de4 <__addsf3>:
    4de4:	defffc04 	addi	sp,sp,-16
    4de8:	2004d7fa 	srli	r2,r4,31
    4dec:	280cd5fa 	srli	r6,r5,23
    4df0:	dc000015 	stw	r16,0(sp)
    4df4:	00c02034 	movhi	r3,128
    4df8:	2020d5fa 	srli	r16,r4,23
    4dfc:	280ed7fa 	srli	r7,r5,31
    4e00:	18ffffc4 	addi	r3,r3,-1
    4e04:	dc400115 	stw	r17,4(sp)
    4e08:	1908703a 	and	r4,r3,r4
    4e0c:	194a703a 	and	r5,r3,r5
    4e10:	dfc00315 	stw	ra,12(sp)
    4e14:	dc800215 	stw	r18,8(sp)
    4e18:	14403fcc 	andi	r17,r2,255
    4e1c:	84003fcc 	andi	r16,r16,255
    4e20:	200890fa 	slli	r4,r4,3
    4e24:	31803fcc 	andi	r6,r6,255
    4e28:	280a90fa 	slli	r5,r5,3
    4e2c:	89c05026 	beq	r17,r7,4f70 <__addsf3+0x18c>
    4e30:	8185c83a 	sub	r2,r16,r6
    4e34:	00807a0e 	bge	zero,r2,5020 <__addsf3+0x23c>
    4e38:	30001e1e 	bne	r6,zero,4eb4 <__addsf3+0xd0>
    4e3c:	28006d1e 	bne	r5,zero,4ff4 <__addsf3+0x210>
    4e40:	208001cc 	andi	r2,r4,7
    4e44:	10000426 	beq	r2,zero,4e58 <__addsf3+0x74>
    4e48:	208003cc 	andi	r2,r4,15
    4e4c:	00c00104 	movi	r3,4
    4e50:	10c00126 	beq	r2,r3,4e58 <__addsf3+0x74>
    4e54:	20c9883a 	add	r4,r4,r3
    4e58:	2081002c 	andhi	r2,r4,1024
    4e5c:	10003926 	beq	r2,zero,4f44 <__addsf3+0x160>
    4e60:	84000044 	addi	r16,r16,1
    4e64:	00803fc4 	movi	r2,255
    4e68:	80807826 	beq	r16,r2,504c <__addsf3+0x268>
    4e6c:	200891ba 	slli	r4,r4,6
    4e70:	8805883a 	mov	r2,r17
    4e74:	2008d27a 	srli	r4,r4,9
    4e78:	84003fcc 	andi	r16,r16,255
    4e7c:	800695fa 	slli	r3,r16,23
    4e80:	10803fcc 	andi	r2,r2,255
    4e84:	04002034 	movhi	r16,128
    4e88:	843fffc4 	addi	r16,r16,-1
    4e8c:	100497fa 	slli	r2,r2,31
    4e90:	2408703a 	and	r4,r4,r16
    4e94:	20e0b03a 	or	r16,r4,r3
    4e98:	8084b03a 	or	r2,r16,r2
    4e9c:	dfc00317 	ldw	ra,12(sp)
    4ea0:	dc800217 	ldw	r18,8(sp)
    4ea4:	dc400117 	ldw	r17,4(sp)
    4ea8:	dc000017 	ldw	r16,0(sp)
    4eac:	dec00404 	addi	sp,sp,16
    4eb0:	f800283a 	ret
    4eb4:	00c03fc4 	movi	r3,255
    4eb8:	80ffe126 	beq	r16,r3,4e40 <__ram_exceptions_end+0xfe002e20>
    4ebc:	29410034 	orhi	r5,r5,1024
    4ec0:	00c006c4 	movi	r3,27
    4ec4:	18807516 	blt	r3,r2,509c <__addsf3+0x2b8>
    4ec8:	00c00804 	movi	r3,32
    4ecc:	1887c83a 	sub	r3,r3,r2
    4ed0:	28c6983a 	sll	r3,r5,r3
    4ed4:	288ad83a 	srl	r5,r5,r2
    4ed8:	1804c03a 	cmpne	r2,r3,zero
    4edc:	288ab03a 	or	r5,r5,r2
    4ee0:	2149c83a 	sub	r4,r4,r5
    4ee4:	2081002c 	andhi	r2,r4,1024
    4ee8:	10001426 	beq	r2,zero,4f3c <__addsf3+0x158>
    4eec:	04810034 	movhi	r18,1024
    4ef0:	94bfffc4 	addi	r18,r18,-1
    4ef4:	24a4703a 	and	r18,r4,r18
    4ef8:	9009883a 	mov	r4,r18
    4efc:	0008f780 	call	8f78 <__clzsi2>
    4f00:	10bffec4 	addi	r2,r2,-5
    4f04:	90a4983a 	sll	r18,r18,r2
    4f08:	14005416 	blt	r2,r16,505c <__addsf3+0x278>
    4f0c:	1405c83a 	sub	r2,r2,r16
    4f10:	11000044 	addi	r4,r2,1
    4f14:	00800804 	movi	r2,32
    4f18:	1105c83a 	sub	r2,r2,r4
    4f1c:	9084983a 	sll	r2,r18,r2
    4f20:	9124d83a 	srl	r18,r18,r4
    4f24:	0021883a 	mov	r16,zero
    4f28:	1008c03a 	cmpne	r4,r2,zero
    4f2c:	9108b03a 	or	r4,r18,r4
    4f30:	003fc306 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    4f34:	1000db26 	beq	r2,zero,52a4 <__addsf3+0x4c0>
    4f38:	1009883a 	mov	r4,r2
    4f3c:	208001cc 	andi	r2,r4,7
    4f40:	103fc11e 	bne	r2,zero,4e48 <__ram_exceptions_end+0xfe002e28>
    4f44:	2006d0fa 	srli	r3,r4,3
    4f48:	01003fc4 	movi	r4,255
    4f4c:	8805883a 	mov	r2,r17
    4f50:	8100241e 	bne	r16,r4,4fe4 <__addsf3+0x200>
    4f54:	18006e26 	beq	r3,zero,5110 <__addsf3+0x32c>
    4f58:	19001034 	orhi	r4,r3,64
    4f5c:	00c02034 	movhi	r3,128
    4f60:	18ffffc4 	addi	r3,r3,-1
    4f64:	043fffc4 	movi	r16,-1
    4f68:	20c8703a 	and	r4,r4,r3
    4f6c:	003fc206 	br	4e78 <__ram_exceptions_end+0xfe002e58>
    4f70:	8187c83a 	sub	r3,r16,r6
    4f74:	00c03e0e 	bge	zero,r3,5070 <__addsf3+0x28c>
    4f78:	30002326 	beq	r6,zero,5008 <__addsf3+0x224>
    4f7c:	01803fc4 	movi	r6,255
    4f80:	81bfaf26 	beq	r16,r6,4e40 <__ram_exceptions_end+0xfe002e20>
    4f84:	29410034 	orhi	r5,r5,1024
    4f88:	018006c4 	movi	r6,27
    4f8c:	30c07416 	blt	r6,r3,5160 <__addsf3+0x37c>
    4f90:	01800804 	movi	r6,32
    4f94:	30cdc83a 	sub	r6,r6,r3
    4f98:	298c983a 	sll	r6,r5,r6
    4f9c:	28cad83a 	srl	r5,r5,r3
    4fa0:	3006c03a 	cmpne	r3,r6,zero
    4fa4:	28cab03a 	or	r5,r5,r3
    4fa8:	2149883a 	add	r4,r4,r5
    4fac:	20c1002c 	andhi	r3,r4,1024
    4fb0:	183fe226 	beq	r3,zero,4f3c <__ram_exceptions_end+0xfe002f1c>
    4fb4:	84000044 	addi	r16,r16,1
    4fb8:	00c03fc4 	movi	r3,255
    4fbc:	80c05426 	beq	r16,r3,5110 <__addsf3+0x32c>
    4fc0:	00bf0034 	movhi	r2,64512
    4fc4:	10bfffc4 	addi	r2,r2,-1
    4fc8:	20c0004c 	andi	r3,r4,1
    4fcc:	2088703a 	and	r4,r4,r2
    4fd0:	2008d07a 	srli	r4,r4,1
    4fd4:	20c8b03a 	or	r4,r4,r3
    4fd8:	003f9906 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    4fdc:	0007883a 	mov	r3,zero
    4fe0:	0005883a 	mov	r2,zero
    4fe4:	01002034 	movhi	r4,128
    4fe8:	213fffc4 	addi	r4,r4,-1
    4fec:	1908703a 	and	r4,r3,r4
    4ff0:	003fa106 	br	4e78 <__ram_exceptions_end+0xfe002e58>
    4ff4:	10bfffc4 	addi	r2,r2,-1
    4ff8:	103fb926 	beq	r2,zero,4ee0 <__ram_exceptions_end+0xfe002ec0>
    4ffc:	00c03fc4 	movi	r3,255
    5000:	80ffaf1e 	bne	r16,r3,4ec0 <__ram_exceptions_end+0xfe002ea0>
    5004:	003f8e06 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    5008:	283f8d26 	beq	r5,zero,4e40 <__ram_exceptions_end+0xfe002e20>
    500c:	18ffffc4 	addi	r3,r3,-1
    5010:	183fe526 	beq	r3,zero,4fa8 <__ram_exceptions_end+0xfe002f88>
    5014:	01803fc4 	movi	r6,255
    5018:	81bfdb1e 	bne	r16,r6,4f88 <__ram_exceptions_end+0xfe002f68>
    501c:	003f8806 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    5020:	1000201e 	bne	r2,zero,50a4 <__addsf3+0x2c0>
    5024:	80800044 	addi	r2,r16,1
    5028:	10803fcc 	andi	r2,r2,255
    502c:	01800044 	movi	r6,1
    5030:	3080450e 	bge	r6,r2,5148 <__addsf3+0x364>
    5034:	2165c83a 	sub	r18,r4,r5
    5038:	90c1002c 	andhi	r3,r18,1024
    503c:	18002b26 	beq	r3,zero,50ec <__addsf3+0x308>
    5040:	2925c83a 	sub	r18,r5,r4
    5044:	3823883a 	mov	r17,r7
    5048:	003fab06 	br	4ef8 <__ram_exceptions_end+0xfe002ed8>
    504c:	8805883a 	mov	r2,r17
    5050:	043fffc4 	movi	r16,-1
    5054:	0009883a 	mov	r4,zero
    5058:	003f8706 	br	4e78 <__ram_exceptions_end+0xfe002e58>
    505c:	013f0034 	movhi	r4,64512
    5060:	213fffc4 	addi	r4,r4,-1
    5064:	80a1c83a 	sub	r16,r16,r2
    5068:	9108703a 	and	r4,r18,r4
    506c:	003f7406 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    5070:	1800411e 	bne	r3,zero,5178 <__addsf3+0x394>
    5074:	80c00044 	addi	r3,r16,1
    5078:	19c03fcc 	andi	r7,r3,255
    507c:	01800044 	movi	r6,1
    5080:	31c0260e 	bge	r6,r7,511c <__addsf3+0x338>
    5084:	01803fc4 	movi	r6,255
    5088:	19802126 	beq	r3,r6,5110 <__addsf3+0x32c>
    508c:	2149883a 	add	r4,r4,r5
    5090:	2008d07a 	srli	r4,r4,1
    5094:	1821883a 	mov	r16,r3
    5098:	003f6906 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    509c:	01400044 	movi	r5,1
    50a0:	003f8f06 	br	4ee0 <__ram_exceptions_end+0xfe002ec0>
    50a4:	8000151e 	bne	r16,zero,50fc <__addsf3+0x318>
    50a8:	20002f26 	beq	r4,zero,5168 <__addsf3+0x384>
    50ac:	0084303a 	nor	r2,zero,r2
    50b0:	10000a26 	beq	r2,zero,50dc <__addsf3+0x2f8>
    50b4:	00c03fc4 	movi	r3,255
    50b8:	30c02b26 	beq	r6,r3,5168 <__addsf3+0x384>
    50bc:	00c006c4 	movi	r3,27
    50c0:	18806d16 	blt	r3,r2,5278 <__addsf3+0x494>
    50c4:	00c00804 	movi	r3,32
    50c8:	1887c83a 	sub	r3,r3,r2
    50cc:	20c6983a 	sll	r3,r4,r3
    50d0:	2084d83a 	srl	r2,r4,r2
    50d4:	1808c03a 	cmpne	r4,r3,zero
    50d8:	1108b03a 	or	r4,r2,r4
    50dc:	2909c83a 	sub	r4,r5,r4
    50e0:	3021883a 	mov	r16,r6
    50e4:	3823883a 	mov	r17,r7
    50e8:	003f7e06 	br	4ee4 <__ram_exceptions_end+0xfe002ec4>
    50ec:	903f821e 	bne	r18,zero,4ef8 <__ram_exceptions_end+0xfe002ed8>
    50f0:	0005883a 	mov	r2,zero
    50f4:	0021883a 	mov	r16,zero
    50f8:	003fba06 	br	4fe4 <__ram_exceptions_end+0xfe002fc4>
    50fc:	00c03fc4 	movi	r3,255
    5100:	30c01926 	beq	r6,r3,5168 <__addsf3+0x384>
    5104:	0085c83a 	sub	r2,zero,r2
    5108:	21010034 	orhi	r4,r4,1024
    510c:	003feb06 	br	50bc <__ram_exceptions_end+0xfe00309c>
    5110:	043fffc4 	movi	r16,-1
    5114:	0009883a 	mov	r4,zero
    5118:	003f5706 	br	4e78 <__ram_exceptions_end+0xfe002e58>
    511c:	80004a1e 	bne	r16,zero,5248 <__addsf3+0x464>
    5120:	20005926 	beq	r4,zero,5288 <__addsf3+0x4a4>
    5124:	283f4626 	beq	r5,zero,4e40 <__ram_exceptions_end+0xfe002e20>
    5128:	2149883a 	add	r4,r4,r5
    512c:	2081002c 	andhi	r2,r4,1024
    5130:	103f8226 	beq	r2,zero,4f3c <__ram_exceptions_end+0xfe002f1c>
    5134:	00bf0034 	movhi	r2,64512
    5138:	10bfffc4 	addi	r2,r2,-1
    513c:	3021883a 	mov	r16,r6
    5140:	2088703a 	and	r4,r4,r2
    5144:	003f3e06 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    5148:	8000121e 	bne	r16,zero,5194 <__addsf3+0x3b0>
    514c:	2000261e 	bne	r4,zero,51e8 <__addsf3+0x404>
    5150:	283fa226 	beq	r5,zero,4fdc <__ram_exceptions_end+0xfe002fbc>
    5154:	2809883a 	mov	r4,r5
    5158:	3823883a 	mov	r17,r7
    515c:	003f3806 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    5160:	01400044 	movi	r5,1
    5164:	003f9006 	br	4fa8 <__ram_exceptions_end+0xfe002f88>
    5168:	2809883a 	mov	r4,r5
    516c:	3021883a 	mov	r16,r6
    5170:	3823883a 	mov	r17,r7
    5174:	003f3206 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    5178:	80000c1e 	bne	r16,zero,51ac <__addsf3+0x3c8>
    517c:	20002f26 	beq	r4,zero,523c <__addsf3+0x458>
    5180:	00c6303a 	nor	r3,zero,r3
    5184:	18002b1e 	bne	r3,zero,5234 <__addsf3+0x450>
    5188:	2149883a 	add	r4,r4,r5
    518c:	3021883a 	mov	r16,r6
    5190:	003f8606 	br	4fac <__ram_exceptions_end+0xfe002f8c>
    5194:	20001b1e 	bne	r4,zero,5204 <__addsf3+0x420>
    5198:	28003926 	beq	r5,zero,5280 <__addsf3+0x49c>
    519c:	2809883a 	mov	r4,r5
    51a0:	3823883a 	mov	r17,r7
    51a4:	04003fc4 	movi	r16,255
    51a8:	003f2506 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    51ac:	01c03fc4 	movi	r7,255
    51b0:	31c02226 	beq	r6,r7,523c <__addsf3+0x458>
    51b4:	00c7c83a 	sub	r3,zero,r3
    51b8:	21010034 	orhi	r4,r4,1024
    51bc:	01c006c4 	movi	r7,27
    51c0:	38c03616 	blt	r7,r3,529c <__addsf3+0x4b8>
    51c4:	01c00804 	movi	r7,32
    51c8:	38cfc83a 	sub	r7,r7,r3
    51cc:	21ce983a 	sll	r7,r4,r7
    51d0:	20c6d83a 	srl	r3,r4,r3
    51d4:	3808c03a 	cmpne	r4,r7,zero
    51d8:	1906b03a 	or	r3,r3,r4
    51dc:	1949883a 	add	r4,r3,r5
    51e0:	3021883a 	mov	r16,r6
    51e4:	003f7106 	br	4fac <__ram_exceptions_end+0xfe002f8c>
    51e8:	283f1526 	beq	r5,zero,4e40 <__ram_exceptions_end+0xfe002e20>
    51ec:	2145c83a 	sub	r2,r4,r5
    51f0:	10c1002c 	andhi	r3,r2,1024
    51f4:	183f4f26 	beq	r3,zero,4f34 <__ram_exceptions_end+0xfe002f14>
    51f8:	2909c83a 	sub	r4,r5,r4
    51fc:	3823883a 	mov	r17,r7
    5200:	003f0f06 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    5204:	28001a26 	beq	r5,zero,5270 <__addsf3+0x48c>
    5208:	2008d0fa 	srli	r4,r4,3
    520c:	2080102c 	andhi	r2,r4,64
    5210:	10000526 	beq	r2,zero,5228 <__addsf3+0x444>
    5214:	280ad0fa 	srli	r5,r5,3
    5218:	2880102c 	andhi	r2,r5,64
    521c:	1000021e 	bne	r2,zero,5228 <__addsf3+0x444>
    5220:	2809883a 	mov	r4,r5
    5224:	3823883a 	mov	r17,r7
    5228:	200890fa 	slli	r4,r4,3
    522c:	04003fc4 	movi	r16,255
    5230:	003f0306 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    5234:	01c03fc4 	movi	r7,255
    5238:	31ffe01e 	bne	r6,r7,51bc <__ram_exceptions_end+0xfe00319c>
    523c:	2809883a 	mov	r4,r5
    5240:	3021883a 	mov	r16,r6
    5244:	003efe06 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    5248:	20001126 	beq	r4,zero,5290 <__addsf3+0x4ac>
    524c:	28000826 	beq	r5,zero,5270 <__addsf3+0x48c>
    5250:	2008d0fa 	srli	r4,r4,3
    5254:	2080102c 	andhi	r2,r4,64
    5258:	103ff326 	beq	r2,zero,5228 <__ram_exceptions_end+0xfe003208>
    525c:	280ad0fa 	srli	r5,r5,3
    5260:	2880102c 	andhi	r2,r5,64
    5264:	103ff01e 	bne	r2,zero,5228 <__ram_exceptions_end+0xfe003208>
    5268:	2809883a 	mov	r4,r5
    526c:	003fee06 	br	5228 <__ram_exceptions_end+0xfe003208>
    5270:	04003fc4 	movi	r16,255
    5274:	003ef206 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    5278:	01000044 	movi	r4,1
    527c:	003f9706 	br	50dc <__ram_exceptions_end+0xfe0030bc>
    5280:	0005883a 	mov	r2,zero
    5284:	003f3406 	br	4f58 <__ram_exceptions_end+0xfe002f38>
    5288:	2809883a 	mov	r4,r5
    528c:	003eec06 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    5290:	2809883a 	mov	r4,r5
    5294:	04003fc4 	movi	r16,255
    5298:	003ee906 	br	4e40 <__ram_exceptions_end+0xfe002e20>
    529c:	00c00044 	movi	r3,1
    52a0:	003fce06 	br	51dc <__ram_exceptions_end+0xfe0031bc>
    52a4:	0005883a 	mov	r2,zero
    52a8:	003f4e06 	br	4fe4 <__ram_exceptions_end+0xfe002fc4>

000052ac <__divsf3>:
    52ac:	defff504 	addi	sp,sp,-44
    52b0:	200cd5fa 	srli	r6,r4,23
    52b4:	dcc00415 	stw	r19,16(sp)
    52b8:	2026d7fa 	srli	r19,r4,31
    52bc:	00c02034 	movhi	r3,128
    52c0:	dd800715 	stw	r22,28(sp)
    52c4:	dd000515 	stw	r20,20(sp)
    52c8:	dc800315 	stw	r18,12(sp)
    52cc:	18ffffc4 	addi	r3,r3,-1
    52d0:	dfc00a15 	stw	ra,40(sp)
    52d4:	df000915 	stw	fp,36(sp)
    52d8:	ddc00815 	stw	r23,32(sp)
    52dc:	dd400615 	stw	r21,24(sp)
    52e0:	dc400215 	stw	r17,8(sp)
    52e4:	dc000115 	stw	r16,4(sp)
    52e8:	35003fcc 	andi	r20,r6,255
    52ec:	1924703a 	and	r18,r3,r4
    52f0:	9d803fcc 	andi	r22,r19,255
    52f4:	a0005226 	beq	r20,zero,5440 <__divsf3+0x194>
    52f8:	00803fc4 	movi	r2,255
    52fc:	a0802e26 	beq	r20,r2,53b8 <__divsf3+0x10c>
    5300:	91002034 	orhi	r4,r18,128
    5304:	202490fa 	slli	r18,r4,3
    5308:	a53fe044 	addi	r20,r20,-127
    530c:	0021883a 	mov	r16,zero
    5310:	002f883a 	mov	r23,zero
    5314:	280cd5fa 	srli	r6,r5,23
    5318:	282ad7fa 	srli	r21,r5,31
    531c:	00c02034 	movhi	r3,128
    5320:	18ffffc4 	addi	r3,r3,-1
    5324:	31803fcc 	andi	r6,r6,255
    5328:	1962703a 	and	r17,r3,r5
    532c:	af003fcc 	andi	fp,r21,255
    5330:	30004a26 	beq	r6,zero,545c <__divsf3+0x1b0>
    5334:	00803fc4 	movi	r2,255
    5338:	30804526 	beq	r6,r2,5450 <__divsf3+0x1a4>
    533c:	89402034 	orhi	r5,r17,128
    5340:	282290fa 	slli	r17,r5,3
    5344:	31bfe044 	addi	r6,r6,-127
    5348:	000b883a 	mov	r5,zero
    534c:	2c20b03a 	or	r16,r5,r16
    5350:	802090ba 	slli	r16,r16,2
    5354:	00800034 	movhi	r2,0
    5358:	1094de04 	addi	r2,r2,21368
    535c:	80a1883a 	add	r16,r16,r2
    5360:	81000017 	ldw	r4,0(r16)
    5364:	9d46f03a 	xor	r3,r19,r21
    5368:	180f883a 	mov	r7,r3
    536c:	18803fcc 	andi	r2,r3,255
    5370:	a18dc83a 	sub	r6,r20,r6
    5374:	2000683a 	jmp	r4
    5378:	0000555c 	xori	zero,zero,341
    537c:	000053e0 	cmpeqi	zero,zero,335
    5380:	00005550 	cmplti	zero,zero,341
    5384:	000053cc 	andi	zero,zero,335
    5388:	00005550 	cmplti	zero,zero,341
    538c:	00005528 	cmpgeui	zero,zero,340
    5390:	00005550 	cmplti	zero,zero,341
    5394:	000053cc 	andi	zero,zero,335
    5398:	000053e0 	cmpeqi	zero,zero,335
    539c:	000053e0 	cmpeqi	zero,zero,335
    53a0:	00005528 	cmpgeui	zero,zero,340
    53a4:	000053cc 	andi	zero,zero,335
    53a8:	0000563c 	xorhi	zero,zero,344
    53ac:	0000563c 	xorhi	zero,zero,344
    53b0:	0000563c 	xorhi	zero,zero,344
    53b4:	000055f0 	cmpltui	zero,zero,343
    53b8:	9000581e 	bne	r18,zero,551c <__divsf3+0x270>
    53bc:	04000204 	movi	r16,8
    53c0:	05c00084 	movi	r23,2
    53c4:	003fd306 	br	5314 <__ram_exceptions_end+0xfe0032f4>
    53c8:	0023883a 	mov	r17,zero
    53cc:	e02d883a 	mov	r22,fp
    53d0:	282f883a 	mov	r23,r5
    53d4:	00800084 	movi	r2,2
    53d8:	b8808f1e 	bne	r23,r2,5618 <__divsf3+0x36c>
    53dc:	b005883a 	mov	r2,r22
    53e0:	11c0004c 	andi	r7,r2,1
    53e4:	013fffc4 	movi	r4,-1
    53e8:	000d883a 	mov	r6,zero
    53ec:	21003fcc 	andi	r4,r4,255
    53f0:	200895fa 	slli	r4,r4,23
    53f4:	38803fcc 	andi	r2,r7,255
    53f8:	00c02034 	movhi	r3,128
    53fc:	100497fa 	slli	r2,r2,31
    5400:	18ffffc4 	addi	r3,r3,-1
    5404:	30c6703a 	and	r3,r6,r3
    5408:	1906b03a 	or	r3,r3,r4
    540c:	1884b03a 	or	r2,r3,r2
    5410:	dfc00a17 	ldw	ra,40(sp)
    5414:	df000917 	ldw	fp,36(sp)
    5418:	ddc00817 	ldw	r23,32(sp)
    541c:	dd800717 	ldw	r22,28(sp)
    5420:	dd400617 	ldw	r21,24(sp)
    5424:	dd000517 	ldw	r20,20(sp)
    5428:	dcc00417 	ldw	r19,16(sp)
    542c:	dc800317 	ldw	r18,12(sp)
    5430:	dc400217 	ldw	r17,8(sp)
    5434:	dc000117 	ldw	r16,4(sp)
    5438:	dec00b04 	addi	sp,sp,44
    543c:	f800283a 	ret
    5440:	90002b1e 	bne	r18,zero,54f0 <__divsf3+0x244>
    5444:	04000104 	movi	r16,4
    5448:	05c00044 	movi	r23,1
    544c:	003fb106 	br	5314 <__ram_exceptions_end+0xfe0032f4>
    5450:	8800251e 	bne	r17,zero,54e8 <__divsf3+0x23c>
    5454:	01400084 	movi	r5,2
    5458:	00000206 	br	5464 <__divsf3+0x1b8>
    545c:	88001a1e 	bne	r17,zero,54c8 <__divsf3+0x21c>
    5460:	01400044 	movi	r5,1
    5464:	8160b03a 	or	r16,r16,r5
    5468:	802090ba 	slli	r16,r16,2
    546c:	00c00034 	movhi	r3,0
    5470:	18d52204 	addi	r3,r3,21640
    5474:	80e1883a 	add	r16,r16,r3
    5478:	80c00017 	ldw	r3,0(r16)
    547c:	9d44f03a 	xor	r2,r19,r21
    5480:	a18dc83a 	sub	r6,r20,r6
    5484:	1800683a 	jmp	r3
    5488:	000053e0 	cmpeqi	zero,zero,335
    548c:	000053e0 	cmpeqi	zero,zero,335
    5490:	0000562c 	andhi	zero,zero,344
    5494:	000053c8 	cmpgei	zero,zero,335
    5498:	0000562c 	andhi	zero,zero,344
    549c:	00005528 	cmpgeui	zero,zero,340
    54a0:	0000562c 	andhi	zero,zero,344
    54a4:	000053c8 	cmpgei	zero,zero,335
    54a8:	000053e0 	cmpeqi	zero,zero,335
    54ac:	000053e0 	cmpeqi	zero,zero,335
    54b0:	00005528 	cmpgeui	zero,zero,340
    54b4:	000053c8 	cmpgei	zero,zero,335
    54b8:	0000563c 	xorhi	zero,zero,344
    54bc:	0000563c 	xorhi	zero,zero,344
    54c0:	0000563c 	xorhi	zero,zero,344
    54c4:	00005654 	movui	zero,345
    54c8:	8809883a 	mov	r4,r17
    54cc:	0008f780 	call	8f78 <__clzsi2>
    54d0:	10fffec4 	addi	r3,r2,-5
    54d4:	10801d84 	addi	r2,r2,118
    54d8:	88e2983a 	sll	r17,r17,r3
    54dc:	008dc83a 	sub	r6,zero,r2
    54e0:	000b883a 	mov	r5,zero
    54e4:	003f9906 	br	534c <__ram_exceptions_end+0xfe00332c>
    54e8:	014000c4 	movi	r5,3
    54ec:	003f9706 	br	534c <__ram_exceptions_end+0xfe00332c>
    54f0:	9009883a 	mov	r4,r18
    54f4:	d9400015 	stw	r5,0(sp)
    54f8:	0008f780 	call	8f78 <__clzsi2>
    54fc:	10fffec4 	addi	r3,r2,-5
    5500:	11801d84 	addi	r6,r2,118
    5504:	90e4983a 	sll	r18,r18,r3
    5508:	01a9c83a 	sub	r20,zero,r6
    550c:	0021883a 	mov	r16,zero
    5510:	002f883a 	mov	r23,zero
    5514:	d9400017 	ldw	r5,0(sp)
    5518:	003f7e06 	br	5314 <__ram_exceptions_end+0xfe0032f4>
    551c:	04000304 	movi	r16,12
    5520:	05c000c4 	movi	r23,3
    5524:	003f7b06 	br	5314 <__ram_exceptions_end+0xfe0032f4>
    5528:	01802034 	movhi	r6,128
    552c:	000f883a 	mov	r7,zero
    5530:	31bfffc4 	addi	r6,r6,-1
    5534:	013fffc4 	movi	r4,-1
    5538:	003fac06 	br	53ec <__ram_exceptions_end+0xfe0033cc>
    553c:	01400044 	movi	r5,1
    5540:	2909c83a 	sub	r4,r5,r4
    5544:	00c006c4 	movi	r3,27
    5548:	19004b0e 	bge	r3,r4,5678 <__divsf3+0x3cc>
    554c:	114e703a 	and	r7,r2,r5
    5550:	0009883a 	mov	r4,zero
    5554:	000d883a 	mov	r6,zero
    5558:	003fa406 	br	53ec <__ram_exceptions_end+0xfe0033cc>
    555c:	9006917a 	slli	r3,r18,5
    5560:	8822917a 	slli	r17,r17,5
    5564:	1c40372e 	bgeu	r3,r17,5644 <__divsf3+0x398>
    5568:	31bfffc4 	addi	r6,r6,-1
    556c:	010006c4 	movi	r4,27
    5570:	000b883a 	mov	r5,zero
    5574:	180f883a 	mov	r7,r3
    5578:	294b883a 	add	r5,r5,r5
    557c:	18c7883a 	add	r3,r3,r3
    5580:	38000116 	blt	r7,zero,5588 <__divsf3+0x2dc>
    5584:	1c400236 	bltu	r3,r17,5590 <__divsf3+0x2e4>
    5588:	1c47c83a 	sub	r3,r3,r17
    558c:	29400054 	ori	r5,r5,1
    5590:	213fffc4 	addi	r4,r4,-1
    5594:	203ff71e 	bne	r4,zero,5574 <__ram_exceptions_end+0xfe003554>
    5598:	1806c03a 	cmpne	r3,r3,zero
    559c:	1962b03a 	or	r17,r3,r5
    55a0:	31001fc4 	addi	r4,r6,127
    55a4:	013fe50e 	bge	zero,r4,553c <__ram_exceptions_end+0xfe00351c>
    55a8:	88c001cc 	andi	r3,r17,7
    55ac:	18000426 	beq	r3,zero,55c0 <__divsf3+0x314>
    55b0:	88c003cc 	andi	r3,r17,15
    55b4:	01400104 	movi	r5,4
    55b8:	19400126 	beq	r3,r5,55c0 <__divsf3+0x314>
    55bc:	8963883a 	add	r17,r17,r5
    55c0:	88c2002c 	andhi	r3,r17,2048
    55c4:	18000426 	beq	r3,zero,55d8 <__divsf3+0x32c>
    55c8:	00fe0034 	movhi	r3,63488
    55cc:	18ffffc4 	addi	r3,r3,-1
    55d0:	31002004 	addi	r4,r6,128
    55d4:	88e2703a 	and	r17,r17,r3
    55d8:	00c03f84 	movi	r3,254
    55dc:	193f8016 	blt	r3,r4,53e0 <__ram_exceptions_end+0xfe0033c0>
    55e0:	880c91ba 	slli	r6,r17,6
    55e4:	11c0004c 	andi	r7,r2,1
    55e8:	300cd27a 	srli	r6,r6,9
    55ec:	003f7f06 	br	53ec <__ram_exceptions_end+0xfe0033cc>
    55f0:	9080102c 	andhi	r2,r18,64
    55f4:	10000226 	beq	r2,zero,5600 <__divsf3+0x354>
    55f8:	8880102c 	andhi	r2,r17,64
    55fc:	10001826 	beq	r2,zero,5660 <__divsf3+0x3b4>
    5600:	00802034 	movhi	r2,128
    5604:	91801034 	orhi	r6,r18,64
    5608:	10bfffc4 	addi	r2,r2,-1
    560c:	980f883a 	mov	r7,r19
    5610:	308c703a 	and	r6,r6,r2
    5614:	003fc706 	br	5534 <__ram_exceptions_end+0xfe003514>
    5618:	008000c4 	movi	r2,3
    561c:	b8802d26 	beq	r23,r2,56d4 <__divsf3+0x428>
    5620:	00c00044 	movi	r3,1
    5624:	b005883a 	mov	r2,r22
    5628:	b8ffdd1e 	bne	r23,r3,55a0 <__ram_exceptions_end+0xfe003580>
    562c:	11c0004c 	andi	r7,r2,1
    5630:	0009883a 	mov	r4,zero
    5634:	000d883a 	mov	r6,zero
    5638:	003f6c06 	br	53ec <__ram_exceptions_end+0xfe0033cc>
    563c:	9023883a 	mov	r17,r18
    5640:	003f6406 	br	53d4 <__ram_exceptions_end+0xfe0033b4>
    5644:	1c47c83a 	sub	r3,r3,r17
    5648:	01000684 	movi	r4,26
    564c:	01400044 	movi	r5,1
    5650:	003fc806 	br	5574 <__ram_exceptions_end+0xfe003554>
    5654:	9080102c 	andhi	r2,r18,64
    5658:	103fe926 	beq	r2,zero,5600 <__ram_exceptions_end+0xfe0035e0>
    565c:	0023883a 	mov	r17,zero
    5660:	00802034 	movhi	r2,128
    5664:	89801034 	orhi	r6,r17,64
    5668:	10bfffc4 	addi	r2,r2,-1
    566c:	a80f883a 	mov	r7,r21
    5670:	308c703a 	and	r6,r6,r2
    5674:	003faf06 	br	5534 <__ram_exceptions_end+0xfe003514>
    5678:	01c00804 	movi	r7,32
    567c:	390fc83a 	sub	r7,r7,r4
    5680:	89ce983a 	sll	r7,r17,r7
    5684:	890ad83a 	srl	r5,r17,r4
    5688:	380ec03a 	cmpne	r7,r7,zero
    568c:	29cab03a 	or	r5,r5,r7
    5690:	28c001cc 	andi	r3,r5,7
    5694:	18000426 	beq	r3,zero,56a8 <__divsf3+0x3fc>
    5698:	28c003cc 	andi	r3,r5,15
    569c:	01000104 	movi	r4,4
    56a0:	19000126 	beq	r3,r4,56a8 <__divsf3+0x3fc>
    56a4:	290b883a 	add	r5,r5,r4
    56a8:	28c1002c 	andhi	r3,r5,1024
    56ac:	18000426 	beq	r3,zero,56c0 <__divsf3+0x414>
    56b0:	11c0004c 	andi	r7,r2,1
    56b4:	01000044 	movi	r4,1
    56b8:	000d883a 	mov	r6,zero
    56bc:	003f4b06 	br	53ec <__ram_exceptions_end+0xfe0033cc>
    56c0:	280a91ba 	slli	r5,r5,6
    56c4:	11c0004c 	andi	r7,r2,1
    56c8:	0009883a 	mov	r4,zero
    56cc:	280cd27a 	srli	r6,r5,9
    56d0:	003f4606 	br	53ec <__ram_exceptions_end+0xfe0033cc>
    56d4:	00802034 	movhi	r2,128
    56d8:	89801034 	orhi	r6,r17,64
    56dc:	10bfffc4 	addi	r2,r2,-1
    56e0:	b00f883a 	mov	r7,r22
    56e4:	308c703a 	and	r6,r6,r2
    56e8:	003f9206 	br	5534 <__ram_exceptions_end+0xfe003514>

000056ec <__eqsf2>:
    56ec:	2006d5fa 	srli	r3,r4,23
    56f0:	280cd5fa 	srli	r6,r5,23
    56f4:	01c02034 	movhi	r7,128
    56f8:	39ffffc4 	addi	r7,r7,-1
    56fc:	18c03fcc 	andi	r3,r3,255
    5700:	02003fc4 	movi	r8,255
    5704:	3904703a 	and	r2,r7,r4
    5708:	31803fcc 	andi	r6,r6,255
    570c:	394e703a 	and	r7,r7,r5
    5710:	2008d7fa 	srli	r4,r4,31
    5714:	280ad7fa 	srli	r5,r5,31
    5718:	1a000d26 	beq	r3,r8,5750 <__eqsf2+0x64>
    571c:	02003fc4 	movi	r8,255
    5720:	32000826 	beq	r6,r8,5744 <__eqsf2+0x58>
    5724:	19800226 	beq	r3,r6,5730 <__eqsf2+0x44>
    5728:	00800044 	movi	r2,1
    572c:	f800283a 	ret
    5730:	11fffd1e 	bne	r2,r7,5728 <__ram_exceptions_end+0xfe003708>
    5734:	21400926 	beq	r4,r5,575c <__eqsf2+0x70>
    5738:	183ffb1e 	bne	r3,zero,5728 <__ram_exceptions_end+0xfe003708>
    573c:	1004c03a 	cmpne	r2,r2,zero
    5740:	f800283a 	ret
    5744:	383ff726 	beq	r7,zero,5724 <__ram_exceptions_end+0xfe003704>
    5748:	00800044 	movi	r2,1
    574c:	f800283a 	ret
    5750:	103ff226 	beq	r2,zero,571c <__ram_exceptions_end+0xfe0036fc>
    5754:	00800044 	movi	r2,1
    5758:	f800283a 	ret
    575c:	0005883a 	mov	r2,zero
    5760:	f800283a 	ret

00005764 <__gesf2>:
    5764:	2004d5fa 	srli	r2,r4,23
    5768:	2806d5fa 	srli	r3,r5,23
    576c:	01802034 	movhi	r6,128
    5770:	31bfffc4 	addi	r6,r6,-1
    5774:	10803fcc 	andi	r2,r2,255
    5778:	01c03fc4 	movi	r7,255
    577c:	3110703a 	and	r8,r6,r4
    5780:	18c03fcc 	andi	r3,r3,255
    5784:	314c703a 	and	r6,r6,r5
    5788:	2008d7fa 	srli	r4,r4,31
    578c:	280ad7fa 	srli	r5,r5,31
    5790:	11c01926 	beq	r2,r7,57f8 <__gesf2+0x94>
    5794:	01c03fc4 	movi	r7,255
    5798:	19c00f26 	beq	r3,r7,57d8 <__gesf2+0x74>
    579c:	1000061e 	bne	r2,zero,57b8 <__gesf2+0x54>
    57a0:	400f003a 	cmpeq	r7,r8,zero
    57a4:	1800071e 	bne	r3,zero,57c4 <__gesf2+0x60>
    57a8:	3000061e 	bne	r6,zero,57c4 <__gesf2+0x60>
    57ac:	0005883a 	mov	r2,zero
    57b0:	40000e1e 	bne	r8,zero,57ec <__gesf2+0x88>
    57b4:	f800283a 	ret
    57b8:	18000a1e 	bne	r3,zero,57e4 <__gesf2+0x80>
    57bc:	30000b26 	beq	r6,zero,57ec <__gesf2+0x88>
    57c0:	000f883a 	mov	r7,zero
    57c4:	29403fcc 	andi	r5,r5,255
    57c8:	38000726 	beq	r7,zero,57e8 <__gesf2+0x84>
    57cc:	28000826 	beq	r5,zero,57f0 <__gesf2+0x8c>
    57d0:	00800044 	movi	r2,1
    57d4:	f800283a 	ret
    57d8:	303ff026 	beq	r6,zero,579c <__ram_exceptions_end+0xfe00377c>
    57dc:	00bfff84 	movi	r2,-2
    57e0:	f800283a 	ret
    57e4:	29403fcc 	andi	r5,r5,255
    57e8:	21400526 	beq	r4,r5,5800 <__gesf2+0x9c>
    57ec:	203ff826 	beq	r4,zero,57d0 <__ram_exceptions_end+0xfe0037b0>
    57f0:	00bfffc4 	movi	r2,-1
    57f4:	f800283a 	ret
    57f8:	403fe626 	beq	r8,zero,5794 <__ram_exceptions_end+0xfe003774>
    57fc:	003ff706 	br	57dc <__ram_exceptions_end+0xfe0037bc>
    5800:	18bffa16 	blt	r3,r2,57ec <__ram_exceptions_end+0xfe0037cc>
    5804:	10c00216 	blt	r2,r3,5810 <__gesf2+0xac>
    5808:	323ff836 	bltu	r6,r8,57ec <__ram_exceptions_end+0xfe0037cc>
    580c:	4180022e 	bgeu	r8,r6,5818 <__gesf2+0xb4>
    5810:	203fef1e 	bne	r4,zero,57d0 <__ram_exceptions_end+0xfe0037b0>
    5814:	003ff606 	br	57f0 <__ram_exceptions_end+0xfe0037d0>
    5818:	0005883a 	mov	r2,zero
    581c:	f800283a 	ret

00005820 <__lesf2>:
    5820:	2004d5fa 	srli	r2,r4,23
    5824:	280cd5fa 	srli	r6,r5,23
    5828:	00c02034 	movhi	r3,128
    582c:	18ffffc4 	addi	r3,r3,-1
    5830:	10803fcc 	andi	r2,r2,255
    5834:	01c03fc4 	movi	r7,255
    5838:	1910703a 	and	r8,r3,r4
    583c:	31803fcc 	andi	r6,r6,255
    5840:	1946703a 	and	r3,r3,r5
    5844:	2008d7fa 	srli	r4,r4,31
    5848:	280ad7fa 	srli	r5,r5,31
    584c:	11c01b26 	beq	r2,r7,58bc <__lesf2+0x9c>
    5850:	01c03fc4 	movi	r7,255
    5854:	31c01126 	beq	r6,r7,589c <__lesf2+0x7c>
    5858:	1000071e 	bne	r2,zero,5878 <__lesf2+0x58>
    585c:	400f003a 	cmpeq	r7,r8,zero
    5860:	21003fcc 	andi	r4,r4,255
    5864:	3000081e 	bne	r6,zero,5888 <__lesf2+0x68>
    5868:	1800071e 	bne	r3,zero,5888 <__lesf2+0x68>
    586c:	0005883a 	mov	r2,zero
    5870:	40000f1e 	bne	r8,zero,58b0 <__lesf2+0x90>
    5874:	f800283a 	ret
    5878:	21003fcc 	andi	r4,r4,255
    587c:	30000a1e 	bne	r6,zero,58a8 <__lesf2+0x88>
    5880:	18000b26 	beq	r3,zero,58b0 <__lesf2+0x90>
    5884:	000f883a 	mov	r7,zero
    5888:	29403fcc 	andi	r5,r5,255
    588c:	38000726 	beq	r7,zero,58ac <__lesf2+0x8c>
    5890:	28000826 	beq	r5,zero,58b4 <__lesf2+0x94>
    5894:	00800044 	movi	r2,1
    5898:	f800283a 	ret
    589c:	183fee26 	beq	r3,zero,5858 <__ram_exceptions_end+0xfe003838>
    58a0:	00800084 	movi	r2,2
    58a4:	f800283a 	ret
    58a8:	29403fcc 	andi	r5,r5,255
    58ac:	21400626 	beq	r4,r5,58c8 <__lesf2+0xa8>
    58b0:	203ff826 	beq	r4,zero,5894 <__ram_exceptions_end+0xfe003874>
    58b4:	00bfffc4 	movi	r2,-1
    58b8:	f800283a 	ret
    58bc:	403fe426 	beq	r8,zero,5850 <__ram_exceptions_end+0xfe003830>
    58c0:	00800084 	movi	r2,2
    58c4:	f800283a 	ret
    58c8:	30bff916 	blt	r6,r2,58b0 <__ram_exceptions_end+0xfe003890>
    58cc:	11800216 	blt	r2,r6,58d8 <__lesf2+0xb8>
    58d0:	1a3ff736 	bltu	r3,r8,58b0 <__ram_exceptions_end+0xfe003890>
    58d4:	40c0022e 	bgeu	r8,r3,58e0 <__lesf2+0xc0>
    58d8:	203fee1e 	bne	r4,zero,5894 <__ram_exceptions_end+0xfe003874>
    58dc:	003ff506 	br	58b4 <__ram_exceptions_end+0xfe003894>
    58e0:	0005883a 	mov	r2,zero
    58e4:	f800283a 	ret

000058e8 <__mulsf3>:
    58e8:	defff504 	addi	sp,sp,-44
    58ec:	dc000115 	stw	r16,4(sp)
    58f0:	2020d5fa 	srli	r16,r4,23
    58f4:	dd400615 	stw	r21,24(sp)
    58f8:	202ad7fa 	srli	r21,r4,31
    58fc:	dc800315 	stw	r18,12(sp)
    5900:	04802034 	movhi	r18,128
    5904:	df000915 	stw	fp,36(sp)
    5908:	dd000515 	stw	r20,20(sp)
    590c:	94bfffc4 	addi	r18,r18,-1
    5910:	dfc00a15 	stw	ra,40(sp)
    5914:	ddc00815 	stw	r23,32(sp)
    5918:	dd800715 	stw	r22,28(sp)
    591c:	dcc00415 	stw	r19,16(sp)
    5920:	dc400215 	stw	r17,8(sp)
    5924:	84003fcc 	andi	r16,r16,255
    5928:	9124703a 	and	r18,r18,r4
    592c:	a829883a 	mov	r20,r21
    5930:	af003fcc 	andi	fp,r21,255
    5934:	80005426 	beq	r16,zero,5a88 <__mulsf3+0x1a0>
    5938:	00803fc4 	movi	r2,255
    593c:	80802f26 	beq	r16,r2,59fc <__mulsf3+0x114>
    5940:	91002034 	orhi	r4,r18,128
    5944:	202490fa 	slli	r18,r4,3
    5948:	843fe044 	addi	r16,r16,-127
    594c:	0023883a 	mov	r17,zero
    5950:	002f883a 	mov	r23,zero
    5954:	2804d5fa 	srli	r2,r5,23
    5958:	282cd7fa 	srli	r22,r5,31
    595c:	01002034 	movhi	r4,128
    5960:	213fffc4 	addi	r4,r4,-1
    5964:	10803fcc 	andi	r2,r2,255
    5968:	2166703a 	and	r19,r4,r5
    596c:	b1803fcc 	andi	r6,r22,255
    5970:	10004c26 	beq	r2,zero,5aa4 <__mulsf3+0x1bc>
    5974:	00c03fc4 	movi	r3,255
    5978:	10c04726 	beq	r2,r3,5a98 <__mulsf3+0x1b0>
    597c:	99002034 	orhi	r4,r19,128
    5980:	202690fa 	slli	r19,r4,3
    5984:	10bfe044 	addi	r2,r2,-127
    5988:	0007883a 	mov	r3,zero
    598c:	80a1883a 	add	r16,r16,r2
    5990:	010003c4 	movi	r4,15
    5994:	1c44b03a 	or	r2,r3,r17
    5998:	b56af03a 	xor	r21,r22,r21
    599c:	81c00044 	addi	r7,r16,1
    59a0:	20806b36 	bltu	r4,r2,5b50 <__mulsf3+0x268>
    59a4:	100490ba 	slli	r2,r2,2
    59a8:	01000034 	movhi	r4,0
    59ac:	21166f04 	addi	r4,r4,22972
    59b0:	1105883a 	add	r2,r2,r4
    59b4:	10800017 	ldw	r2,0(r2)
    59b8:	1000683a 	jmp	r2
    59bc:	00005b50 	cmplti	zero,zero,365
    59c0:	00005a10 	cmplti	zero,zero,360
    59c4:	00005a10 	cmplti	zero,zero,360
    59c8:	00005a0c 	andi	zero,zero,360
    59cc:	00005b34 	movhi	zero,364
    59d0:	00005b34 	movhi	zero,364
    59d4:	00005b20 	cmpeqi	zero,zero,364
    59d8:	00005a0c 	andi	zero,zero,360
    59dc:	00005b34 	movhi	zero,364
    59e0:	00005b20 	cmpeqi	zero,zero,364
    59e4:	00005b34 	movhi	zero,364
    59e8:	00005a0c 	andi	zero,zero,360
    59ec:	00005b40 	call	5b4 <convolution+0x144>
    59f0:	00005b40 	call	5b4 <convolution+0x144>
    59f4:	00005b40 	call	5b4 <convolution+0x144>
    59f8:	00005c50 	cmplti	zero,zero,369
    59fc:	90003b1e 	bne	r18,zero,5aec <__mulsf3+0x204>
    5a00:	04400204 	movi	r17,8
    5a04:	05c00084 	movi	r23,2
    5a08:	003fd206 	br	5954 <__ram_exceptions_end+0xfe003934>
    5a0c:	302b883a 	mov	r21,r6
    5a10:	00800084 	movi	r2,2
    5a14:	18802626 	beq	r3,r2,5ab0 <__mulsf3+0x1c8>
    5a18:	008000c4 	movi	r2,3
    5a1c:	1880b826 	beq	r3,r2,5d00 <__mulsf3+0x418>
    5a20:	00800044 	movi	r2,1
    5a24:	1880af1e 	bne	r3,r2,5ce4 <__mulsf3+0x3fc>
    5a28:	a829883a 	mov	r20,r21
    5a2c:	0007883a 	mov	r3,zero
    5a30:	0009883a 	mov	r4,zero
    5a34:	18803fcc 	andi	r2,r3,255
    5a38:	100695fa 	slli	r3,r2,23
    5a3c:	a0803fcc 	andi	r2,r20,255
    5a40:	100a97fa 	slli	r5,r2,31
    5a44:	00802034 	movhi	r2,128
    5a48:	10bfffc4 	addi	r2,r2,-1
    5a4c:	2084703a 	and	r2,r4,r2
    5a50:	10c4b03a 	or	r2,r2,r3
    5a54:	1144b03a 	or	r2,r2,r5
    5a58:	dfc00a17 	ldw	ra,40(sp)
    5a5c:	df000917 	ldw	fp,36(sp)
    5a60:	ddc00817 	ldw	r23,32(sp)
    5a64:	dd800717 	ldw	r22,28(sp)
    5a68:	dd400617 	ldw	r21,24(sp)
    5a6c:	dd000517 	ldw	r20,20(sp)
    5a70:	dcc00417 	ldw	r19,16(sp)
    5a74:	dc800317 	ldw	r18,12(sp)
    5a78:	dc400217 	ldw	r17,8(sp)
    5a7c:	dc000117 	ldw	r16,4(sp)
    5a80:	dec00b04 	addi	sp,sp,44
    5a84:	f800283a 	ret
    5a88:	90000d1e 	bne	r18,zero,5ac0 <__mulsf3+0x1d8>
    5a8c:	04400104 	movi	r17,4
    5a90:	05c00044 	movi	r23,1
    5a94:	003faf06 	br	5954 <__ram_exceptions_end+0xfe003934>
    5a98:	9806c03a 	cmpne	r3,r19,zero
    5a9c:	18c00084 	addi	r3,r3,2
    5aa0:	003fba06 	br	598c <__ram_exceptions_end+0xfe00396c>
    5aa4:	9800141e 	bne	r19,zero,5af8 <__mulsf3+0x210>
    5aa8:	00c00044 	movi	r3,1
    5aac:	003fb706 	br	598c <__ram_exceptions_end+0xfe00396c>
    5ab0:	a829883a 	mov	r20,r21
    5ab4:	00ffffc4 	movi	r3,-1
    5ab8:	0009883a 	mov	r4,zero
    5abc:	003fdd06 	br	5a34 <__ram_exceptions_end+0xfe003a14>
    5ac0:	9009883a 	mov	r4,r18
    5ac4:	d9400015 	stw	r5,0(sp)
    5ac8:	0008f780 	call	8f78 <__clzsi2>
    5acc:	10fffec4 	addi	r3,r2,-5
    5ad0:	10801d84 	addi	r2,r2,118
    5ad4:	90e4983a 	sll	r18,r18,r3
    5ad8:	00a1c83a 	sub	r16,zero,r2
    5adc:	0023883a 	mov	r17,zero
    5ae0:	002f883a 	mov	r23,zero
    5ae4:	d9400017 	ldw	r5,0(sp)
    5ae8:	003f9a06 	br	5954 <__ram_exceptions_end+0xfe003934>
    5aec:	04400304 	movi	r17,12
    5af0:	05c000c4 	movi	r23,3
    5af4:	003f9706 	br	5954 <__ram_exceptions_end+0xfe003934>
    5af8:	9809883a 	mov	r4,r19
    5afc:	d9800015 	stw	r6,0(sp)
    5b00:	0008f780 	call	8f78 <__clzsi2>
    5b04:	10fffec4 	addi	r3,r2,-5
    5b08:	10801d84 	addi	r2,r2,118
    5b0c:	98e6983a 	sll	r19,r19,r3
    5b10:	0085c83a 	sub	r2,zero,r2
    5b14:	0007883a 	mov	r3,zero
    5b18:	d9800017 	ldw	r6,0(sp)
    5b1c:	003f9b06 	br	598c <__ram_exceptions_end+0xfe00396c>
    5b20:	01002034 	movhi	r4,128
    5b24:	0029883a 	mov	r20,zero
    5b28:	213fffc4 	addi	r4,r4,-1
    5b2c:	00ffffc4 	movi	r3,-1
    5b30:	003fc006 	br	5a34 <__ram_exceptions_end+0xfe003a14>
    5b34:	9027883a 	mov	r19,r18
    5b38:	b807883a 	mov	r3,r23
    5b3c:	003fb406 	br	5a10 <__ram_exceptions_end+0xfe0039f0>
    5b40:	9027883a 	mov	r19,r18
    5b44:	e02b883a 	mov	r21,fp
    5b48:	b807883a 	mov	r3,r23
    5b4c:	003fb006 	br	5a10 <__ram_exceptions_end+0xfe0039f0>
    5b50:	9028d43a 	srli	r20,r18,16
    5b54:	982cd43a 	srli	r22,r19,16
    5b58:	94bfffcc 	andi	r18,r18,65535
    5b5c:	9cffffcc 	andi	r19,r19,65535
    5b60:	980b883a 	mov	r5,r19
    5b64:	9009883a 	mov	r4,r18
    5b68:	d9c00015 	stw	r7,0(sp)
    5b6c:	0004dbc0 	call	4dbc <__mulsi3>
    5b70:	a00b883a 	mov	r5,r20
    5b74:	9809883a 	mov	r4,r19
    5b78:	1023883a 	mov	r17,r2
    5b7c:	0004dbc0 	call	4dbc <__mulsi3>
    5b80:	a009883a 	mov	r4,r20
    5b84:	b00b883a 	mov	r5,r22
    5b88:	1027883a 	mov	r19,r2
    5b8c:	0004dbc0 	call	4dbc <__mulsi3>
    5b90:	b00b883a 	mov	r5,r22
    5b94:	9009883a 	mov	r4,r18
    5b98:	1029883a 	mov	r20,r2
    5b9c:	0004dbc0 	call	4dbc <__mulsi3>
    5ba0:	8806d43a 	srli	r3,r17,16
    5ba4:	14c5883a 	add	r2,r2,r19
    5ba8:	d9c00017 	ldw	r7,0(sp)
    5bac:	1885883a 	add	r2,r3,r2
    5bb0:	14c0022e 	bgeu	r2,r19,5bbc <__mulsf3+0x2d4>
    5bb4:	00c00074 	movhi	r3,1
    5bb8:	a0e9883a 	add	r20,r20,r3
    5bbc:	1026943a 	slli	r19,r2,16
    5bc0:	8c7fffcc 	andi	r17,r17,65535
    5bc4:	1004d43a 	srli	r2,r2,16
    5bc8:	9c63883a 	add	r17,r19,r17
    5bcc:	882691ba 	slli	r19,r17,6
    5bd0:	1505883a 	add	r2,r2,r20
    5bd4:	8822d6ba 	srli	r17,r17,26
    5bd8:	100891ba 	slli	r4,r2,6
    5bdc:	9826c03a 	cmpne	r19,r19,zero
    5be0:	9c62b03a 	or	r17,r19,r17
    5be4:	8926b03a 	or	r19,r17,r4
    5be8:	9882002c 	andhi	r2,r19,2048
    5bec:	10000426 	beq	r2,zero,5c00 <__mulsf3+0x318>
    5bf0:	9804d07a 	srli	r2,r19,1
    5bf4:	9900004c 	andi	r4,r19,1
    5bf8:	3821883a 	mov	r16,r7
    5bfc:	1126b03a 	or	r19,r2,r4
    5c00:	80c01fc4 	addi	r3,r16,127
    5c04:	00c0210e 	bge	zero,r3,5c8c <__mulsf3+0x3a4>
    5c08:	988001cc 	andi	r2,r19,7
    5c0c:	10000426 	beq	r2,zero,5c20 <__mulsf3+0x338>
    5c10:	988003cc 	andi	r2,r19,15
    5c14:	01000104 	movi	r4,4
    5c18:	11000126 	beq	r2,r4,5c20 <__mulsf3+0x338>
    5c1c:	9927883a 	add	r19,r19,r4
    5c20:	9882002c 	andhi	r2,r19,2048
    5c24:	10000426 	beq	r2,zero,5c38 <__mulsf3+0x350>
    5c28:	00be0034 	movhi	r2,63488
    5c2c:	10bfffc4 	addi	r2,r2,-1
    5c30:	80c02004 	addi	r3,r16,128
    5c34:	98a6703a 	and	r19,r19,r2
    5c38:	00803f84 	movi	r2,254
    5c3c:	10ff9c16 	blt	r2,r3,5ab0 <__ram_exceptions_end+0xfe003a90>
    5c40:	980891ba 	slli	r4,r19,6
    5c44:	a829883a 	mov	r20,r21
    5c48:	2008d27a 	srli	r4,r4,9
    5c4c:	003f7906 	br	5a34 <__ram_exceptions_end+0xfe003a14>
    5c50:	9080102c 	andhi	r2,r18,64
    5c54:	10000826 	beq	r2,zero,5c78 <__mulsf3+0x390>
    5c58:	9880102c 	andhi	r2,r19,64
    5c5c:	1000061e 	bne	r2,zero,5c78 <__mulsf3+0x390>
    5c60:	00802034 	movhi	r2,128
    5c64:	99001034 	orhi	r4,r19,64
    5c68:	10bfffc4 	addi	r2,r2,-1
    5c6c:	b029883a 	mov	r20,r22
    5c70:	2088703a 	and	r4,r4,r2
    5c74:	003fad06 	br	5b2c <__ram_exceptions_end+0xfe003b0c>
    5c78:	00802034 	movhi	r2,128
    5c7c:	91001034 	orhi	r4,r18,64
    5c80:	10bfffc4 	addi	r2,r2,-1
    5c84:	2088703a 	and	r4,r4,r2
    5c88:	003fa806 	br	5b2c <__ram_exceptions_end+0xfe003b0c>
    5c8c:	00800044 	movi	r2,1
    5c90:	10c7c83a 	sub	r3,r2,r3
    5c94:	008006c4 	movi	r2,27
    5c98:	10ff6316 	blt	r2,r3,5a28 <__ram_exceptions_end+0xfe003a08>
    5c9c:	00800804 	movi	r2,32
    5ca0:	10c5c83a 	sub	r2,r2,r3
    5ca4:	9884983a 	sll	r2,r19,r2
    5ca8:	98c6d83a 	srl	r3,r19,r3
    5cac:	1004c03a 	cmpne	r2,r2,zero
    5cb0:	1884b03a 	or	r2,r3,r2
    5cb4:	10c001cc 	andi	r3,r2,7
    5cb8:	18000426 	beq	r3,zero,5ccc <__mulsf3+0x3e4>
    5cbc:	10c003cc 	andi	r3,r2,15
    5cc0:	01000104 	movi	r4,4
    5cc4:	19000126 	beq	r3,r4,5ccc <__mulsf3+0x3e4>
    5cc8:	1105883a 	add	r2,r2,r4
    5ccc:	10c1002c 	andhi	r3,r2,1024
    5cd0:	18000626 	beq	r3,zero,5cec <__mulsf3+0x404>
    5cd4:	a829883a 	mov	r20,r21
    5cd8:	00c00044 	movi	r3,1
    5cdc:	0009883a 	mov	r4,zero
    5ce0:	003f5406 	br	5a34 <__ram_exceptions_end+0xfe003a14>
    5ce4:	3821883a 	mov	r16,r7
    5ce8:	003fc506 	br	5c00 <__ram_exceptions_end+0xfe003be0>
    5cec:	100491ba 	slli	r2,r2,6
    5cf0:	a829883a 	mov	r20,r21
    5cf4:	0007883a 	mov	r3,zero
    5cf8:	1008d27a 	srli	r4,r2,9
    5cfc:	003f4d06 	br	5a34 <__ram_exceptions_end+0xfe003a14>
    5d00:	00802034 	movhi	r2,128
    5d04:	99001034 	orhi	r4,r19,64
    5d08:	10bfffc4 	addi	r2,r2,-1
    5d0c:	a829883a 	mov	r20,r21
    5d10:	2088703a 	and	r4,r4,r2
    5d14:	003f8506 	br	5b2c <__ram_exceptions_end+0xfe003b0c>

00005d18 <__subsf3>:
    5d18:	defffc04 	addi	sp,sp,-16
    5d1c:	280cd5fa 	srli	r6,r5,23
    5d20:	dc000015 	stw	r16,0(sp)
    5d24:	01c02034 	movhi	r7,128
    5d28:	2020d5fa 	srli	r16,r4,23
    5d2c:	39ffffc4 	addi	r7,r7,-1
    5d30:	3906703a 	and	r3,r7,r4
    5d34:	dc400115 	stw	r17,4(sp)
    5d38:	394e703a 	and	r7,r7,r5
    5d3c:	2022d7fa 	srli	r17,r4,31
    5d40:	dfc00315 	stw	ra,12(sp)
    5d44:	dc800215 	stw	r18,8(sp)
    5d48:	31803fcc 	andi	r6,r6,255
    5d4c:	01003fc4 	movi	r4,255
    5d50:	84003fcc 	andi	r16,r16,255
    5d54:	180690fa 	slli	r3,r3,3
    5d58:	2804d7fa 	srli	r2,r5,31
    5d5c:	380e90fa 	slli	r7,r7,3
    5d60:	31006d26 	beq	r6,r4,5f18 <__subsf3+0x200>
    5d64:	1080005c 	xori	r2,r2,1
    5d68:	8189c83a 	sub	r4,r16,r6
    5d6c:	14404f26 	beq	r2,r17,5eac <__subsf3+0x194>
    5d70:	0100770e 	bge	zero,r4,5f50 <__subsf3+0x238>
    5d74:	30001e1e 	bne	r6,zero,5df0 <__subsf3+0xd8>
    5d78:	38006a1e 	bne	r7,zero,5f24 <__subsf3+0x20c>
    5d7c:	188001cc 	andi	r2,r3,7
    5d80:	10000426 	beq	r2,zero,5d94 <__subsf3+0x7c>
    5d84:	188003cc 	andi	r2,r3,15
    5d88:	01000104 	movi	r4,4
    5d8c:	11000126 	beq	r2,r4,5d94 <__subsf3+0x7c>
    5d90:	1907883a 	add	r3,r3,r4
    5d94:	1881002c 	andhi	r2,r3,1024
    5d98:	10003926 	beq	r2,zero,5e80 <__subsf3+0x168>
    5d9c:	84000044 	addi	r16,r16,1
    5da0:	00803fc4 	movi	r2,255
    5da4:	80807526 	beq	r16,r2,5f7c <__subsf3+0x264>
    5da8:	180691ba 	slli	r3,r3,6
    5dac:	8880004c 	andi	r2,r17,1
    5db0:	180ad27a 	srli	r5,r3,9
    5db4:	84003fcc 	andi	r16,r16,255
    5db8:	800695fa 	slli	r3,r16,23
    5dbc:	10803fcc 	andi	r2,r2,255
    5dc0:	01002034 	movhi	r4,128
    5dc4:	213fffc4 	addi	r4,r4,-1
    5dc8:	100497fa 	slli	r2,r2,31
    5dcc:	2920703a 	and	r16,r5,r4
    5dd0:	80e0b03a 	or	r16,r16,r3
    5dd4:	8084b03a 	or	r2,r16,r2
    5dd8:	dfc00317 	ldw	ra,12(sp)
    5ddc:	dc800217 	ldw	r18,8(sp)
    5de0:	dc400117 	ldw	r17,4(sp)
    5de4:	dc000017 	ldw	r16,0(sp)
    5de8:	dec00404 	addi	sp,sp,16
    5dec:	f800283a 	ret
    5df0:	00803fc4 	movi	r2,255
    5df4:	80bfe126 	beq	r16,r2,5d7c <__ram_exceptions_end+0xfe003d5c>
    5df8:	39c10034 	orhi	r7,r7,1024
    5dfc:	008006c4 	movi	r2,27
    5e00:	11007416 	blt	r2,r4,5fd4 <__subsf3+0x2bc>
    5e04:	00800804 	movi	r2,32
    5e08:	1105c83a 	sub	r2,r2,r4
    5e0c:	3884983a 	sll	r2,r7,r2
    5e10:	390ed83a 	srl	r7,r7,r4
    5e14:	1008c03a 	cmpne	r4,r2,zero
    5e18:	390eb03a 	or	r7,r7,r4
    5e1c:	19c7c83a 	sub	r3,r3,r7
    5e20:	1881002c 	andhi	r2,r3,1024
    5e24:	10001426 	beq	r2,zero,5e78 <__subsf3+0x160>
    5e28:	04810034 	movhi	r18,1024
    5e2c:	94bfffc4 	addi	r18,r18,-1
    5e30:	1ca4703a 	and	r18,r3,r18
    5e34:	9009883a 	mov	r4,r18
    5e38:	0008f780 	call	8f78 <__clzsi2>
    5e3c:	10bffec4 	addi	r2,r2,-5
    5e40:	90a4983a 	sll	r18,r18,r2
    5e44:	14005116 	blt	r2,r16,5f8c <__subsf3+0x274>
    5e48:	1405c83a 	sub	r2,r2,r16
    5e4c:	10c00044 	addi	r3,r2,1
    5e50:	00800804 	movi	r2,32
    5e54:	10c5c83a 	sub	r2,r2,r3
    5e58:	9084983a 	sll	r2,r18,r2
    5e5c:	90e4d83a 	srl	r18,r18,r3
    5e60:	0021883a 	mov	r16,zero
    5e64:	1006c03a 	cmpne	r3,r2,zero
    5e68:	90c6b03a 	or	r3,r18,r3
    5e6c:	003fc306 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    5e70:	2000e026 	beq	r4,zero,61f4 <__subsf3+0x4dc>
    5e74:	2007883a 	mov	r3,r4
    5e78:	188001cc 	andi	r2,r3,7
    5e7c:	103fc11e 	bne	r2,zero,5d84 <__ram_exceptions_end+0xfe003d64>
    5e80:	180ad0fa 	srli	r5,r3,3
    5e84:	00c03fc4 	movi	r3,255
    5e88:	8880004c 	andi	r2,r17,1
    5e8c:	80c0031e 	bne	r16,r3,5e9c <__subsf3+0x184>
    5e90:	28006d26 	beq	r5,zero,6048 <__subsf3+0x330>
    5e94:	29401034 	orhi	r5,r5,64
    5e98:	043fffc4 	movi	r16,-1
    5e9c:	00c02034 	movhi	r3,128
    5ea0:	18ffffc4 	addi	r3,r3,-1
    5ea4:	28ca703a 	and	r5,r5,r3
    5ea8:	003fc206 	br	5db4 <__ram_exceptions_end+0xfe003d94>
    5eac:	01003c0e 	bge	zero,r4,5fa0 <__subsf3+0x288>
    5eb0:	30002126 	beq	r6,zero,5f38 <__subsf3+0x220>
    5eb4:	01403fc4 	movi	r5,255
    5eb8:	817fb026 	beq	r16,r5,5d7c <__ram_exceptions_end+0xfe003d5c>
    5ebc:	39c10034 	orhi	r7,r7,1024
    5ec0:	014006c4 	movi	r5,27
    5ec4:	29007416 	blt	r5,r4,6098 <__subsf3+0x380>
    5ec8:	01400804 	movi	r5,32
    5ecc:	290bc83a 	sub	r5,r5,r4
    5ed0:	394a983a 	sll	r5,r7,r5
    5ed4:	390ed83a 	srl	r7,r7,r4
    5ed8:	2808c03a 	cmpne	r4,r5,zero
    5edc:	390eb03a 	or	r7,r7,r4
    5ee0:	19c7883a 	add	r3,r3,r7
    5ee4:	1901002c 	andhi	r4,r3,1024
    5ee8:	20003826 	beq	r4,zero,5fcc <__subsf3+0x2b4>
    5eec:	84000044 	addi	r16,r16,1
    5ef0:	01003fc4 	movi	r4,255
    5ef4:	81005426 	beq	r16,r4,6048 <__subsf3+0x330>
    5ef8:	1023883a 	mov	r17,r2
    5efc:	00bf0034 	movhi	r2,64512
    5f00:	10bfffc4 	addi	r2,r2,-1
    5f04:	1900004c 	andi	r4,r3,1
    5f08:	1886703a 	and	r3,r3,r2
    5f0c:	1806d07a 	srli	r3,r3,1
    5f10:	1906b03a 	or	r3,r3,r4
    5f14:	003f9906 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    5f18:	383f9226 	beq	r7,zero,5d64 <__ram_exceptions_end+0xfe003d44>
    5f1c:	10803fcc 	andi	r2,r2,255
    5f20:	003f9106 	br	5d68 <__ram_exceptions_end+0xfe003d48>
    5f24:	213fffc4 	addi	r4,r4,-1
    5f28:	203fbc26 	beq	r4,zero,5e1c <__ram_exceptions_end+0xfe003dfc>
    5f2c:	00803fc4 	movi	r2,255
    5f30:	80bfb21e 	bne	r16,r2,5dfc <__ram_exceptions_end+0xfe003ddc>
    5f34:	003f9106 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    5f38:	383f9026 	beq	r7,zero,5d7c <__ram_exceptions_end+0xfe003d5c>
    5f3c:	213fffc4 	addi	r4,r4,-1
    5f40:	203fe726 	beq	r4,zero,5ee0 <__ram_exceptions_end+0xfe003ec0>
    5f44:	01403fc4 	movi	r5,255
    5f48:	817fdd1e 	bne	r16,r5,5ec0 <__ram_exceptions_end+0xfe003ea0>
    5f4c:	003f8b06 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    5f50:	2000221e 	bne	r4,zero,5fdc <__subsf3+0x2c4>
    5f54:	81000044 	addi	r4,r16,1
    5f58:	21003fcc 	andi	r4,r4,255
    5f5c:	01400044 	movi	r5,1
    5f60:	2900470e 	bge	r5,r4,6080 <__subsf3+0x368>
    5f64:	19e5c83a 	sub	r18,r3,r7
    5f68:	9141002c 	andhi	r5,r18,1024
    5f6c:	28002d26 	beq	r5,zero,6024 <__subsf3+0x30c>
    5f70:	38e5c83a 	sub	r18,r7,r3
    5f74:	1023883a 	mov	r17,r2
    5f78:	003fae06 	br	5e34 <__ram_exceptions_end+0xfe003e14>
    5f7c:	8880004c 	andi	r2,r17,1
    5f80:	043fffc4 	movi	r16,-1
    5f84:	000b883a 	mov	r5,zero
    5f88:	003f8a06 	br	5db4 <__ram_exceptions_end+0xfe003d94>
    5f8c:	00ff0034 	movhi	r3,64512
    5f90:	18ffffc4 	addi	r3,r3,-1
    5f94:	80a1c83a 	sub	r16,r16,r2
    5f98:	90c6703a 	and	r3,r18,r3
    5f9c:	003f7706 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    5fa0:	2000431e 	bne	r4,zero,60b0 <__subsf3+0x398>
    5fa4:	81000044 	addi	r4,r16,1
    5fa8:	21803fcc 	andi	r6,r4,255
    5fac:	01400044 	movi	r5,1
    5fb0:	2980280e 	bge	r5,r6,6054 <__subsf3+0x33c>
    5fb4:	01403fc4 	movi	r5,255
    5fb8:	21402326 	beq	r4,r5,6048 <__subsf3+0x330>
    5fbc:	19c7883a 	add	r3,r3,r7
    5fc0:	1806d07a 	srli	r3,r3,1
    5fc4:	2021883a 	mov	r16,r4
    5fc8:	003f6c06 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    5fcc:	1023883a 	mov	r17,r2
    5fd0:	003fa906 	br	5e78 <__ram_exceptions_end+0xfe003e58>
    5fd4:	01c00044 	movi	r7,1
    5fd8:	003f9006 	br	5e1c <__ram_exceptions_end+0xfe003dfc>
    5fdc:	8000151e 	bne	r16,zero,6034 <__subsf3+0x31c>
    5fe0:	18002f26 	beq	r3,zero,60a0 <__subsf3+0x388>
    5fe4:	0108303a 	nor	r4,zero,r4
    5fe8:	20000a26 	beq	r4,zero,6014 <__subsf3+0x2fc>
    5fec:	01403fc4 	movi	r5,255
    5ff0:	31402b26 	beq	r6,r5,60a0 <__subsf3+0x388>
    5ff4:	014006c4 	movi	r5,27
    5ff8:	29006e16 	blt	r5,r4,61b4 <__subsf3+0x49c>
    5ffc:	01400804 	movi	r5,32
    6000:	290bc83a 	sub	r5,r5,r4
    6004:	194a983a 	sll	r5,r3,r5
    6008:	1908d83a 	srl	r4,r3,r4
    600c:	2806c03a 	cmpne	r3,r5,zero
    6010:	20c6b03a 	or	r3,r4,r3
    6014:	38c7c83a 	sub	r3,r7,r3
    6018:	3021883a 	mov	r16,r6
    601c:	1023883a 	mov	r17,r2
    6020:	003f7f06 	br	5e20 <__ram_exceptions_end+0xfe003e00>
    6024:	903f831e 	bne	r18,zero,5e34 <__ram_exceptions_end+0xfe003e14>
    6028:	0005883a 	mov	r2,zero
    602c:	0021883a 	mov	r16,zero
    6030:	003f9a06 	br	5e9c <__ram_exceptions_end+0xfe003e7c>
    6034:	01403fc4 	movi	r5,255
    6038:	31401926 	beq	r6,r5,60a0 <__subsf3+0x388>
    603c:	0109c83a 	sub	r4,zero,r4
    6040:	18c10034 	orhi	r3,r3,1024
    6044:	003feb06 	br	5ff4 <__ram_exceptions_end+0xfe003fd4>
    6048:	043fffc4 	movi	r16,-1
    604c:	000b883a 	mov	r5,zero
    6050:	003f5806 	br	5db4 <__ram_exceptions_end+0xfe003d94>
    6054:	8000481e 	bne	r16,zero,6178 <__subsf3+0x460>
    6058:	18006226 	beq	r3,zero,61e4 <__subsf3+0x4cc>
    605c:	383f4726 	beq	r7,zero,5d7c <__ram_exceptions_end+0xfe003d5c>
    6060:	19c7883a 	add	r3,r3,r7
    6064:	1881002c 	andhi	r2,r3,1024
    6068:	103f8326 	beq	r2,zero,5e78 <__ram_exceptions_end+0xfe003e58>
    606c:	00bf0034 	movhi	r2,64512
    6070:	10bfffc4 	addi	r2,r2,-1
    6074:	2821883a 	mov	r16,r5
    6078:	1886703a 	and	r3,r3,r2
    607c:	003f3f06 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    6080:	80001c1e 	bne	r16,zero,60f4 <__subsf3+0x3dc>
    6084:	1800261e 	bne	r3,zero,6120 <__subsf3+0x408>
    6088:	38004c26 	beq	r7,zero,61bc <__subsf3+0x4a4>
    608c:	3807883a 	mov	r3,r7
    6090:	1023883a 	mov	r17,r2
    6094:	003f3906 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    6098:	01c00044 	movi	r7,1
    609c:	003f9006 	br	5ee0 <__ram_exceptions_end+0xfe003ec0>
    60a0:	3807883a 	mov	r3,r7
    60a4:	3021883a 	mov	r16,r6
    60a8:	1023883a 	mov	r17,r2
    60ac:	003f3306 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    60b0:	8000161e 	bne	r16,zero,610c <__subsf3+0x3f4>
    60b4:	18002d26 	beq	r3,zero,616c <__subsf3+0x454>
    60b8:	0108303a 	nor	r4,zero,r4
    60bc:	20000a26 	beq	r4,zero,60e8 <__subsf3+0x3d0>
    60c0:	01403fc4 	movi	r5,255
    60c4:	31402926 	beq	r6,r5,616c <__subsf3+0x454>
    60c8:	014006c4 	movi	r5,27
    60cc:	29004716 	blt	r5,r4,61ec <__subsf3+0x4d4>
    60d0:	01400804 	movi	r5,32
    60d4:	290bc83a 	sub	r5,r5,r4
    60d8:	194a983a 	sll	r5,r3,r5
    60dc:	1908d83a 	srl	r4,r3,r4
    60e0:	2806c03a 	cmpne	r3,r5,zero
    60e4:	20c6b03a 	or	r3,r4,r3
    60e8:	19c7883a 	add	r3,r3,r7
    60ec:	3021883a 	mov	r16,r6
    60f0:	003f7c06 	br	5ee4 <__ram_exceptions_end+0xfe003ec4>
    60f4:	1800111e 	bne	r3,zero,613c <__subsf3+0x424>
    60f8:	38003326 	beq	r7,zero,61c8 <__subsf3+0x4b0>
    60fc:	3807883a 	mov	r3,r7
    6100:	1023883a 	mov	r17,r2
    6104:	04003fc4 	movi	r16,255
    6108:	003f1c06 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    610c:	01403fc4 	movi	r5,255
    6110:	31401626 	beq	r6,r5,616c <__subsf3+0x454>
    6114:	0109c83a 	sub	r4,zero,r4
    6118:	18c10034 	orhi	r3,r3,1024
    611c:	003fea06 	br	60c8 <__ram_exceptions_end+0xfe0040a8>
    6120:	383f1626 	beq	r7,zero,5d7c <__ram_exceptions_end+0xfe003d5c>
    6124:	19c9c83a 	sub	r4,r3,r7
    6128:	2141002c 	andhi	r5,r4,1024
    612c:	283f5026 	beq	r5,zero,5e70 <__ram_exceptions_end+0xfe003e50>
    6130:	38c7c83a 	sub	r3,r7,r3
    6134:	1023883a 	mov	r17,r2
    6138:	003f1006 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    613c:	38001b26 	beq	r7,zero,61ac <__subsf3+0x494>
    6140:	1806d0fa 	srli	r3,r3,3
    6144:	1900102c 	andhi	r4,r3,64
    6148:	20000526 	beq	r4,zero,6160 <__subsf3+0x448>
    614c:	380ed0fa 	srli	r7,r7,3
    6150:	3900102c 	andhi	r4,r7,64
    6154:	2000021e 	bne	r4,zero,6160 <__subsf3+0x448>
    6158:	3807883a 	mov	r3,r7
    615c:	1023883a 	mov	r17,r2
    6160:	180690fa 	slli	r3,r3,3
    6164:	04003fc4 	movi	r16,255
    6168:	003f0406 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    616c:	3807883a 	mov	r3,r7
    6170:	3021883a 	mov	r16,r6
    6174:	003f0106 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    6178:	18001726 	beq	r3,zero,61d8 <__subsf3+0x4c0>
    617c:	38000b26 	beq	r7,zero,61ac <__subsf3+0x494>
    6180:	1806d0fa 	srli	r3,r3,3
    6184:	1900102c 	andhi	r4,r3,64
    6188:	20000426 	beq	r4,zero,619c <__subsf3+0x484>
    618c:	380ed0fa 	srli	r7,r7,3
    6190:	3900102c 	andhi	r4,r7,64
    6194:	2000011e 	bne	r4,zero,619c <__subsf3+0x484>
    6198:	3807883a 	mov	r3,r7
    619c:	180690fa 	slli	r3,r3,3
    61a0:	1023883a 	mov	r17,r2
    61a4:	04003fc4 	movi	r16,255
    61a8:	003ef406 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    61ac:	04003fc4 	movi	r16,255
    61b0:	003ef206 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    61b4:	00c00044 	movi	r3,1
    61b8:	003f9606 	br	6014 <__ram_exceptions_end+0xfe003ff4>
    61bc:	000b883a 	mov	r5,zero
    61c0:	0005883a 	mov	r2,zero
    61c4:	003f3506 	br	5e9c <__ram_exceptions_end+0xfe003e7c>
    61c8:	01402034 	movhi	r5,128
    61cc:	297fffc4 	addi	r5,r5,-1
    61d0:	0005883a 	mov	r2,zero
    61d4:	003f2f06 	br	5e94 <__ram_exceptions_end+0xfe003e74>
    61d8:	3807883a 	mov	r3,r7
    61dc:	04003fc4 	movi	r16,255
    61e0:	003ee606 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    61e4:	3807883a 	mov	r3,r7
    61e8:	003ee406 	br	5d7c <__ram_exceptions_end+0xfe003d5c>
    61ec:	00c00044 	movi	r3,1
    61f0:	003fbd06 	br	60e8 <__ram_exceptions_end+0xfe0040c8>
    61f4:	0005883a 	mov	r2,zero
    61f8:	003f2806 	br	5e9c <__ram_exceptions_end+0xfe003e7c>

000061fc <__fixsfsi>:
    61fc:	200ad5fa 	srli	r5,r4,23
    6200:	00c02034 	movhi	r3,128
    6204:	18ffffc4 	addi	r3,r3,-1
    6208:	29403fcc 	andi	r5,r5,255
    620c:	00801f84 	movi	r2,126
    6210:	1906703a 	and	r3,r3,r4
    6214:	2008d7fa 	srli	r4,r4,31
    6218:	11400e0e 	bge	r2,r5,6254 <__fixsfsi+0x58>
    621c:	00802744 	movi	r2,157
    6220:	11400816 	blt	r2,r5,6244 <__fixsfsi+0x48>
    6224:	00802544 	movi	r2,149
    6228:	18c02034 	orhi	r3,r3,128
    622c:	11400b0e 	bge	r2,r5,625c <__fixsfsi+0x60>
    6230:	28bfda84 	addi	r2,r5,-150
    6234:	1884983a 	sll	r2,r3,r2
    6238:	20000726 	beq	r4,zero,6258 <__fixsfsi+0x5c>
    623c:	0085c83a 	sub	r2,zero,r2
    6240:	f800283a 	ret
    6244:	00a00034 	movhi	r2,32768
    6248:	10bfffc4 	addi	r2,r2,-1
    624c:	2085883a 	add	r2,r4,r2
    6250:	f800283a 	ret
    6254:	0005883a 	mov	r2,zero
    6258:	f800283a 	ret
    625c:	00802584 	movi	r2,150
    6260:	1145c83a 	sub	r2,r2,r5
    6264:	1884d83a 	srl	r2,r3,r2
    6268:	003ff306 	br	6238 <__ram_exceptions_end+0xfe004218>

0000626c <__floatsisf>:
    626c:	defffd04 	addi	sp,sp,-12
    6270:	dfc00215 	stw	ra,8(sp)
    6274:	dc400115 	stw	r17,4(sp)
    6278:	dc000015 	stw	r16,0(sp)
    627c:	20003526 	beq	r4,zero,6354 <__floatsisf+0xe8>
    6280:	2021883a 	mov	r16,r4
    6284:	2022d7fa 	srli	r17,r4,31
    6288:	20003616 	blt	r4,zero,6364 <__floatsisf+0xf8>
    628c:	8009883a 	mov	r4,r16
    6290:	0008f780 	call	8f78 <__clzsi2>
    6294:	00c02784 	movi	r3,158
    6298:	1887c83a 	sub	r3,r3,r2
    629c:	01002584 	movi	r4,150
    62a0:	20c01416 	blt	r4,r3,62f4 <__floatsisf+0x88>
    62a4:	20c9c83a 	sub	r4,r4,r3
    62a8:	8120983a 	sll	r16,r16,r4
    62ac:	00802034 	movhi	r2,128
    62b0:	10bfffc4 	addi	r2,r2,-1
    62b4:	8809883a 	mov	r4,r17
    62b8:	80a0703a 	and	r16,r16,r2
    62bc:	18803fcc 	andi	r2,r3,255
    62c0:	100695fa 	slli	r3,r2,23
    62c4:	20803fcc 	andi	r2,r4,255
    62c8:	100897fa 	slli	r4,r2,31
    62cc:	00802034 	movhi	r2,128
    62d0:	10bfffc4 	addi	r2,r2,-1
    62d4:	8084703a 	and	r2,r16,r2
    62d8:	10c4b03a 	or	r2,r2,r3
    62dc:	1104b03a 	or	r2,r2,r4
    62e0:	dfc00217 	ldw	ra,8(sp)
    62e4:	dc400117 	ldw	r17,4(sp)
    62e8:	dc000017 	ldw	r16,0(sp)
    62ec:	dec00304 	addi	sp,sp,12
    62f0:	f800283a 	ret
    62f4:	01002644 	movi	r4,153
    62f8:	20c01c16 	blt	r4,r3,636c <__floatsisf+0x100>
    62fc:	20c9c83a 	sub	r4,r4,r3
    6300:	8120983a 	sll	r16,r16,r4
    6304:	013f0034 	movhi	r4,64512
    6308:	213fffc4 	addi	r4,r4,-1
    630c:	814001cc 	andi	r5,r16,7
    6310:	8108703a 	and	r4,r16,r4
    6314:	28000426 	beq	r5,zero,6328 <__floatsisf+0xbc>
    6318:	840003cc 	andi	r16,r16,15
    631c:	01400104 	movi	r5,4
    6320:	81400126 	beq	r16,r5,6328 <__floatsisf+0xbc>
    6324:	2149883a 	add	r4,r4,r5
    6328:	2141002c 	andhi	r5,r4,1024
    632c:	28000526 	beq	r5,zero,6344 <__floatsisf+0xd8>
    6330:	00c027c4 	movi	r3,159
    6334:	1887c83a 	sub	r3,r3,r2
    6338:	00bf0034 	movhi	r2,64512
    633c:	10bfffc4 	addi	r2,r2,-1
    6340:	2088703a 	and	r4,r4,r2
    6344:	202091ba 	slli	r16,r4,6
    6348:	8809883a 	mov	r4,r17
    634c:	8020d27a 	srli	r16,r16,9
    6350:	003fda06 	br	62bc <__ram_exceptions_end+0xfe00429c>
    6354:	0009883a 	mov	r4,zero
    6358:	0007883a 	mov	r3,zero
    635c:	0021883a 	mov	r16,zero
    6360:	003fd606 	br	62bc <__ram_exceptions_end+0xfe00429c>
    6364:	0121c83a 	sub	r16,zero,r4
    6368:	003fc806 	br	628c <__ram_exceptions_end+0xfe00426c>
    636c:	01002e44 	movi	r4,185
    6370:	20c9c83a 	sub	r4,r4,r3
    6374:	01400144 	movi	r5,5
    6378:	8108983a 	sll	r4,r16,r4
    637c:	288bc83a 	sub	r5,r5,r2
    6380:	8160d83a 	srl	r16,r16,r5
    6384:	2008c03a 	cmpne	r4,r4,zero
    6388:	8120b03a 	or	r16,r16,r4
    638c:	003fdd06 	br	6304 <__ram_exceptions_end+0xfe0042e4>

00006390 <__floatunsisf>:
    6390:	defffe04 	addi	sp,sp,-8
    6394:	dfc00115 	stw	ra,4(sp)
    6398:	dc000015 	stw	r16,0(sp)
    639c:	20002c26 	beq	r4,zero,6450 <__floatunsisf+0xc0>
    63a0:	2021883a 	mov	r16,r4
    63a4:	0008f780 	call	8f78 <__clzsi2>
    63a8:	00c02784 	movi	r3,158
    63ac:	1887c83a 	sub	r3,r3,r2
    63b0:	01002584 	movi	r4,150
    63b4:	20c00f16 	blt	r4,r3,63f4 <__floatunsisf+0x64>
    63b8:	20c9c83a 	sub	r4,r4,r3
    63bc:	8108983a 	sll	r4,r16,r4
    63c0:	00802034 	movhi	r2,128
    63c4:	10bfffc4 	addi	r2,r2,-1
    63c8:	2088703a 	and	r4,r4,r2
    63cc:	18803fcc 	andi	r2,r3,255
    63d0:	100695fa 	slli	r3,r2,23
    63d4:	00802034 	movhi	r2,128
    63d8:	10bfffc4 	addi	r2,r2,-1
    63dc:	2084703a 	and	r2,r4,r2
    63e0:	10c4b03a 	or	r2,r2,r3
    63e4:	dfc00117 	ldw	ra,4(sp)
    63e8:	dc000017 	ldw	r16,0(sp)
    63ec:	dec00204 	addi	sp,sp,8
    63f0:	f800283a 	ret
    63f4:	01002644 	movi	r4,153
    63f8:	20c01816 	blt	r4,r3,645c <__floatunsisf+0xcc>
    63fc:	20c9c83a 	sub	r4,r4,r3
    6400:	8108983a 	sll	r4,r16,r4
    6404:	017f0034 	movhi	r5,64512
    6408:	297fffc4 	addi	r5,r5,-1
    640c:	218001cc 	andi	r6,r4,7
    6410:	214a703a 	and	r5,r4,r5
    6414:	30000426 	beq	r6,zero,6428 <__floatunsisf+0x98>
    6418:	210003cc 	andi	r4,r4,15
    641c:	01800104 	movi	r6,4
    6420:	21800126 	beq	r4,r6,6428 <__floatunsisf+0x98>
    6424:	298b883a 	add	r5,r5,r6
    6428:	2901002c 	andhi	r4,r5,1024
    642c:	20000526 	beq	r4,zero,6444 <__floatunsisf+0xb4>
    6430:	00c027c4 	movi	r3,159
    6434:	1887c83a 	sub	r3,r3,r2
    6438:	00bf0034 	movhi	r2,64512
    643c:	10bfffc4 	addi	r2,r2,-1
    6440:	288a703a 	and	r5,r5,r2
    6444:	280891ba 	slli	r4,r5,6
    6448:	2008d27a 	srli	r4,r4,9
    644c:	003fdf06 	br	63cc <__ram_exceptions_end+0xfe0043ac>
    6450:	0007883a 	mov	r3,zero
    6454:	0009883a 	mov	r4,zero
    6458:	003fdc06 	br	63cc <__ram_exceptions_end+0xfe0043ac>
    645c:	01402e44 	movi	r5,185
    6460:	28cbc83a 	sub	r5,r5,r3
    6464:	01000144 	movi	r4,5
    6468:	2089c83a 	sub	r4,r4,r2
    646c:	814a983a 	sll	r5,r16,r5
    6470:	8108d83a 	srl	r4,r16,r4
    6474:	2820c03a 	cmpne	r16,r5,zero
    6478:	2408b03a 	or	r4,r4,r16
    647c:	003fe106 	br	6404 <__ram_exceptions_end+0xfe0043e4>

00006480 <__adddf3>:
    6480:	02c00434 	movhi	r11,16
    6484:	5affffc4 	addi	r11,r11,-1
    6488:	2806d7fa 	srli	r3,r5,31
    648c:	2ad4703a 	and	r10,r5,r11
    6490:	3ad2703a 	and	r9,r7,r11
    6494:	3804d53a 	srli	r2,r7,20
    6498:	3018d77a 	srli	r12,r6,29
    649c:	280ad53a 	srli	r5,r5,20
    64a0:	501490fa 	slli	r10,r10,3
    64a4:	2010d77a 	srli	r8,r4,29
    64a8:	481290fa 	slli	r9,r9,3
    64ac:	380ed7fa 	srli	r7,r7,31
    64b0:	defffb04 	addi	sp,sp,-20
    64b4:	dc800215 	stw	r18,8(sp)
    64b8:	dc400115 	stw	r17,4(sp)
    64bc:	dc000015 	stw	r16,0(sp)
    64c0:	dfc00415 	stw	ra,16(sp)
    64c4:	dcc00315 	stw	r19,12(sp)
    64c8:	1c803fcc 	andi	r18,r3,255
    64cc:	2c01ffcc 	andi	r16,r5,2047
    64d0:	5210b03a 	or	r8,r10,r8
    64d4:	202290fa 	slli	r17,r4,3
    64d8:	1081ffcc 	andi	r2,r2,2047
    64dc:	4b12b03a 	or	r9,r9,r12
    64e0:	300c90fa 	slli	r6,r6,3
    64e4:	91c07526 	beq	r18,r7,66bc <__adddf3+0x23c>
    64e8:	8087c83a 	sub	r3,r16,r2
    64ec:	00c0ab0e 	bge	zero,r3,679c <__adddf3+0x31c>
    64f0:	10002a1e 	bne	r2,zero,659c <__adddf3+0x11c>
    64f4:	4984b03a 	or	r2,r9,r6
    64f8:	1000961e 	bne	r2,zero,6754 <__adddf3+0x2d4>
    64fc:	888001cc 	andi	r2,r17,7
    6500:	10000726 	beq	r2,zero,6520 <__adddf3+0xa0>
    6504:	888003cc 	andi	r2,r17,15
    6508:	00c00104 	movi	r3,4
    650c:	10c00426 	beq	r2,r3,6520 <__adddf3+0xa0>
    6510:	88c7883a 	add	r3,r17,r3
    6514:	1c63803a 	cmpltu	r17,r3,r17
    6518:	4451883a 	add	r8,r8,r17
    651c:	1823883a 	mov	r17,r3
    6520:	4080202c 	andhi	r2,r8,128
    6524:	10005926 	beq	r2,zero,668c <__adddf3+0x20c>
    6528:	84000044 	addi	r16,r16,1
    652c:	0081ffc4 	movi	r2,2047
    6530:	8080ba26 	beq	r16,r2,681c <__adddf3+0x39c>
    6534:	00bfe034 	movhi	r2,65408
    6538:	10bfffc4 	addi	r2,r2,-1
    653c:	4090703a 	and	r8,r8,r2
    6540:	4004977a 	slli	r2,r8,29
    6544:	4010927a 	slli	r8,r8,9
    6548:	8822d0fa 	srli	r17,r17,3
    654c:	8401ffcc 	andi	r16,r16,2047
    6550:	4010d33a 	srli	r8,r8,12
    6554:	9007883a 	mov	r3,r18
    6558:	1444b03a 	or	r2,r2,r17
    655c:	8401ffcc 	andi	r16,r16,2047
    6560:	8020953a 	slli	r16,r16,20
    6564:	18c03fcc 	andi	r3,r3,255
    6568:	01000434 	movhi	r4,16
    656c:	213fffc4 	addi	r4,r4,-1
    6570:	180697fa 	slli	r3,r3,31
    6574:	4110703a 	and	r8,r8,r4
    6578:	4410b03a 	or	r8,r8,r16
    657c:	40c6b03a 	or	r3,r8,r3
    6580:	dfc00417 	ldw	ra,16(sp)
    6584:	dcc00317 	ldw	r19,12(sp)
    6588:	dc800217 	ldw	r18,8(sp)
    658c:	dc400117 	ldw	r17,4(sp)
    6590:	dc000017 	ldw	r16,0(sp)
    6594:	dec00504 	addi	sp,sp,20
    6598:	f800283a 	ret
    659c:	0081ffc4 	movi	r2,2047
    65a0:	80bfd626 	beq	r16,r2,64fc <__ram_exceptions_end+0xfe0044dc>
    65a4:	4a402034 	orhi	r9,r9,128
    65a8:	00800e04 	movi	r2,56
    65ac:	10c09f16 	blt	r2,r3,682c <__adddf3+0x3ac>
    65b0:	008007c4 	movi	r2,31
    65b4:	10c0c216 	blt	r2,r3,68c0 <__adddf3+0x440>
    65b8:	00800804 	movi	r2,32
    65bc:	10c5c83a 	sub	r2,r2,r3
    65c0:	488a983a 	sll	r5,r9,r2
    65c4:	30c8d83a 	srl	r4,r6,r3
    65c8:	3084983a 	sll	r2,r6,r2
    65cc:	48c6d83a 	srl	r3,r9,r3
    65d0:	290cb03a 	or	r6,r5,r4
    65d4:	1004c03a 	cmpne	r2,r2,zero
    65d8:	308cb03a 	or	r6,r6,r2
    65dc:	898dc83a 	sub	r6,r17,r6
    65e0:	89a3803a 	cmpltu	r17,r17,r6
    65e4:	40d1c83a 	sub	r8,r8,r3
    65e8:	4451c83a 	sub	r8,r8,r17
    65ec:	3023883a 	mov	r17,r6
    65f0:	4080202c 	andhi	r2,r8,128
    65f4:	10002326 	beq	r2,zero,6684 <__adddf3+0x204>
    65f8:	04c02034 	movhi	r19,128
    65fc:	9cffffc4 	addi	r19,r19,-1
    6600:	44e6703a 	and	r19,r8,r19
    6604:	98007626 	beq	r19,zero,67e0 <__adddf3+0x360>
    6608:	9809883a 	mov	r4,r19
    660c:	0008f780 	call	8f78 <__clzsi2>
    6610:	10fffe04 	addi	r3,r2,-8
    6614:	010007c4 	movi	r4,31
    6618:	20c07716 	blt	r4,r3,67f8 <__adddf3+0x378>
    661c:	00800804 	movi	r2,32
    6620:	10c5c83a 	sub	r2,r2,r3
    6624:	8884d83a 	srl	r2,r17,r2
    6628:	98d0983a 	sll	r8,r19,r3
    662c:	88e2983a 	sll	r17,r17,r3
    6630:	1204b03a 	or	r2,r2,r8
    6634:	1c007416 	blt	r3,r16,6808 <__adddf3+0x388>
    6638:	1c21c83a 	sub	r16,r3,r16
    663c:	82000044 	addi	r8,r16,1
    6640:	00c007c4 	movi	r3,31
    6644:	1a009116 	blt	r3,r8,688c <__adddf3+0x40c>
    6648:	00c00804 	movi	r3,32
    664c:	1a07c83a 	sub	r3,r3,r8
    6650:	8a08d83a 	srl	r4,r17,r8
    6654:	88e2983a 	sll	r17,r17,r3
    6658:	10c6983a 	sll	r3,r2,r3
    665c:	1210d83a 	srl	r8,r2,r8
    6660:	8804c03a 	cmpne	r2,r17,zero
    6664:	1906b03a 	or	r3,r3,r4
    6668:	18a2b03a 	or	r17,r3,r2
    666c:	0021883a 	mov	r16,zero
    6670:	003fa206 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    6674:	1890b03a 	or	r8,r3,r2
    6678:	40017d26 	beq	r8,zero,6c70 <__adddf3+0x7f0>
    667c:	1011883a 	mov	r8,r2
    6680:	1823883a 	mov	r17,r3
    6684:	888001cc 	andi	r2,r17,7
    6688:	103f9e1e 	bne	r2,zero,6504 <__ram_exceptions_end+0xfe0044e4>
    668c:	4004977a 	slli	r2,r8,29
    6690:	8822d0fa 	srli	r17,r17,3
    6694:	4010d0fa 	srli	r8,r8,3
    6698:	9007883a 	mov	r3,r18
    669c:	1444b03a 	or	r2,r2,r17
    66a0:	0101ffc4 	movi	r4,2047
    66a4:	81002426 	beq	r16,r4,6738 <__adddf3+0x2b8>
    66a8:	8120703a 	and	r16,r16,r4
    66ac:	01000434 	movhi	r4,16
    66b0:	213fffc4 	addi	r4,r4,-1
    66b4:	4110703a 	and	r8,r8,r4
    66b8:	003fa806 	br	655c <__ram_exceptions_end+0xfe00453c>
    66bc:	8089c83a 	sub	r4,r16,r2
    66c0:	01005e0e 	bge	zero,r4,683c <__adddf3+0x3bc>
    66c4:	10002b26 	beq	r2,zero,6774 <__adddf3+0x2f4>
    66c8:	0081ffc4 	movi	r2,2047
    66cc:	80bf8b26 	beq	r16,r2,64fc <__ram_exceptions_end+0xfe0044dc>
    66d0:	4a402034 	orhi	r9,r9,128
    66d4:	00800e04 	movi	r2,56
    66d8:	1100a40e 	bge	r2,r4,696c <__adddf3+0x4ec>
    66dc:	498cb03a 	or	r6,r9,r6
    66e0:	300ac03a 	cmpne	r5,r6,zero
    66e4:	0013883a 	mov	r9,zero
    66e8:	2c4b883a 	add	r5,r5,r17
    66ec:	2c63803a 	cmpltu	r17,r5,r17
    66f0:	4a11883a 	add	r8,r9,r8
    66f4:	8a11883a 	add	r8,r17,r8
    66f8:	2823883a 	mov	r17,r5
    66fc:	4080202c 	andhi	r2,r8,128
    6700:	103fe026 	beq	r2,zero,6684 <__ram_exceptions_end+0xfe004664>
    6704:	84000044 	addi	r16,r16,1
    6708:	0081ffc4 	movi	r2,2047
    670c:	8080d226 	beq	r16,r2,6a58 <__adddf3+0x5d8>
    6710:	00bfe034 	movhi	r2,65408
    6714:	10bfffc4 	addi	r2,r2,-1
    6718:	4090703a 	and	r8,r8,r2
    671c:	880ad07a 	srli	r5,r17,1
    6720:	400897fa 	slli	r4,r8,31
    6724:	88c0004c 	andi	r3,r17,1
    6728:	28e2b03a 	or	r17,r5,r3
    672c:	4010d07a 	srli	r8,r8,1
    6730:	2462b03a 	or	r17,r4,r17
    6734:	003f7106 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    6738:	4088b03a 	or	r4,r8,r2
    673c:	20014526 	beq	r4,zero,6c54 <__adddf3+0x7d4>
    6740:	01000434 	movhi	r4,16
    6744:	42000234 	orhi	r8,r8,8
    6748:	213fffc4 	addi	r4,r4,-1
    674c:	4110703a 	and	r8,r8,r4
    6750:	003f8206 	br	655c <__ram_exceptions_end+0xfe00453c>
    6754:	18ffffc4 	addi	r3,r3,-1
    6758:	1800491e 	bne	r3,zero,6880 <__adddf3+0x400>
    675c:	898bc83a 	sub	r5,r17,r6
    6760:	8963803a 	cmpltu	r17,r17,r5
    6764:	4251c83a 	sub	r8,r8,r9
    6768:	4451c83a 	sub	r8,r8,r17
    676c:	2823883a 	mov	r17,r5
    6770:	003f9f06 	br	65f0 <__ram_exceptions_end+0xfe0045d0>
    6774:	4984b03a 	or	r2,r9,r6
    6778:	103f6026 	beq	r2,zero,64fc <__ram_exceptions_end+0xfe0044dc>
    677c:	213fffc4 	addi	r4,r4,-1
    6780:	2000931e 	bne	r4,zero,69d0 <__adddf3+0x550>
    6784:	898d883a 	add	r6,r17,r6
    6788:	3463803a 	cmpltu	r17,r6,r17
    678c:	4251883a 	add	r8,r8,r9
    6790:	8a11883a 	add	r8,r17,r8
    6794:	3023883a 	mov	r17,r6
    6798:	003fd806 	br	66fc <__ram_exceptions_end+0xfe0046dc>
    679c:	1800541e 	bne	r3,zero,68f0 <__adddf3+0x470>
    67a0:	80800044 	addi	r2,r16,1
    67a4:	1081ffcc 	andi	r2,r2,2047
    67a8:	00c00044 	movi	r3,1
    67ac:	1880a00e 	bge	r3,r2,6a30 <__adddf3+0x5b0>
    67b0:	8989c83a 	sub	r4,r17,r6
    67b4:	8905803a 	cmpltu	r2,r17,r4
    67b8:	4267c83a 	sub	r19,r8,r9
    67bc:	98a7c83a 	sub	r19,r19,r2
    67c0:	9880202c 	andhi	r2,r19,128
    67c4:	10006326 	beq	r2,zero,6954 <__adddf3+0x4d4>
    67c8:	3463c83a 	sub	r17,r6,r17
    67cc:	4a07c83a 	sub	r3,r9,r8
    67d0:	344d803a 	cmpltu	r6,r6,r17
    67d4:	19a7c83a 	sub	r19,r3,r6
    67d8:	3825883a 	mov	r18,r7
    67dc:	983f8a1e 	bne	r19,zero,6608 <__ram_exceptions_end+0xfe0045e8>
    67e0:	8809883a 	mov	r4,r17
    67e4:	0008f780 	call	8f78 <__clzsi2>
    67e8:	10800804 	addi	r2,r2,32
    67ec:	10fffe04 	addi	r3,r2,-8
    67f0:	010007c4 	movi	r4,31
    67f4:	20ff890e 	bge	r4,r3,661c <__ram_exceptions_end+0xfe0045fc>
    67f8:	10bff604 	addi	r2,r2,-40
    67fc:	8884983a 	sll	r2,r17,r2
    6800:	0023883a 	mov	r17,zero
    6804:	1c3f8c0e 	bge	r3,r16,6638 <__ram_exceptions_end+0xfe004618>
    6808:	023fe034 	movhi	r8,65408
    680c:	423fffc4 	addi	r8,r8,-1
    6810:	80e1c83a 	sub	r16,r16,r3
    6814:	1210703a 	and	r8,r2,r8
    6818:	003f3806 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    681c:	9007883a 	mov	r3,r18
    6820:	0011883a 	mov	r8,zero
    6824:	0005883a 	mov	r2,zero
    6828:	003f4c06 	br	655c <__ram_exceptions_end+0xfe00453c>
    682c:	498cb03a 	or	r6,r9,r6
    6830:	300cc03a 	cmpne	r6,r6,zero
    6834:	0007883a 	mov	r3,zero
    6838:	003f6806 	br	65dc <__ram_exceptions_end+0xfe0045bc>
    683c:	20009c1e 	bne	r4,zero,6ab0 <__adddf3+0x630>
    6840:	80800044 	addi	r2,r16,1
    6844:	1141ffcc 	andi	r5,r2,2047
    6848:	01000044 	movi	r4,1
    684c:	2140670e 	bge	r4,r5,69ec <__adddf3+0x56c>
    6850:	0101ffc4 	movi	r4,2047
    6854:	11007f26 	beq	r2,r4,6a54 <__adddf3+0x5d4>
    6858:	898d883a 	add	r6,r17,r6
    685c:	4247883a 	add	r3,r8,r9
    6860:	3451803a 	cmpltu	r8,r6,r17
    6864:	40d1883a 	add	r8,r8,r3
    6868:	402297fa 	slli	r17,r8,31
    686c:	300cd07a 	srli	r6,r6,1
    6870:	4010d07a 	srli	r8,r8,1
    6874:	1021883a 	mov	r16,r2
    6878:	89a2b03a 	or	r17,r17,r6
    687c:	003f1f06 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    6880:	0081ffc4 	movi	r2,2047
    6884:	80bf481e 	bne	r16,r2,65a8 <__ram_exceptions_end+0xfe004588>
    6888:	003f1c06 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    688c:	843ff844 	addi	r16,r16,-31
    6890:	01000804 	movi	r4,32
    6894:	1406d83a 	srl	r3,r2,r16
    6898:	41005026 	beq	r8,r4,69dc <__adddf3+0x55c>
    689c:	01001004 	movi	r4,64
    68a0:	2211c83a 	sub	r8,r4,r8
    68a4:	1204983a 	sll	r2,r2,r8
    68a8:	88a2b03a 	or	r17,r17,r2
    68ac:	8822c03a 	cmpne	r17,r17,zero
    68b0:	1c62b03a 	or	r17,r3,r17
    68b4:	0011883a 	mov	r8,zero
    68b8:	0021883a 	mov	r16,zero
    68bc:	003f7106 	br	6684 <__ram_exceptions_end+0xfe004664>
    68c0:	193ff804 	addi	r4,r3,-32
    68c4:	00800804 	movi	r2,32
    68c8:	4908d83a 	srl	r4,r9,r4
    68cc:	18804526 	beq	r3,r2,69e4 <__adddf3+0x564>
    68d0:	00801004 	movi	r2,64
    68d4:	10c5c83a 	sub	r2,r2,r3
    68d8:	4886983a 	sll	r3,r9,r2
    68dc:	198cb03a 	or	r6,r3,r6
    68e0:	300cc03a 	cmpne	r6,r6,zero
    68e4:	218cb03a 	or	r6,r4,r6
    68e8:	0007883a 	mov	r3,zero
    68ec:	003f3b06 	br	65dc <__ram_exceptions_end+0xfe0045bc>
    68f0:	80002a26 	beq	r16,zero,699c <__adddf3+0x51c>
    68f4:	0101ffc4 	movi	r4,2047
    68f8:	11006826 	beq	r2,r4,6a9c <__adddf3+0x61c>
    68fc:	00c7c83a 	sub	r3,zero,r3
    6900:	42002034 	orhi	r8,r8,128
    6904:	01000e04 	movi	r4,56
    6908:	20c07c16 	blt	r4,r3,6afc <__adddf3+0x67c>
    690c:	010007c4 	movi	r4,31
    6910:	20c0da16 	blt	r4,r3,6c7c <__adddf3+0x7fc>
    6914:	01000804 	movi	r4,32
    6918:	20c9c83a 	sub	r4,r4,r3
    691c:	4114983a 	sll	r10,r8,r4
    6920:	88cad83a 	srl	r5,r17,r3
    6924:	8908983a 	sll	r4,r17,r4
    6928:	40c6d83a 	srl	r3,r8,r3
    692c:	5162b03a 	or	r17,r10,r5
    6930:	2008c03a 	cmpne	r4,r4,zero
    6934:	8922b03a 	or	r17,r17,r4
    6938:	3463c83a 	sub	r17,r6,r17
    693c:	48c7c83a 	sub	r3,r9,r3
    6940:	344d803a 	cmpltu	r6,r6,r17
    6944:	1991c83a 	sub	r8,r3,r6
    6948:	1021883a 	mov	r16,r2
    694c:	3825883a 	mov	r18,r7
    6950:	003f2706 	br	65f0 <__ram_exceptions_end+0xfe0045d0>
    6954:	24d0b03a 	or	r8,r4,r19
    6958:	40001b1e 	bne	r8,zero,69c8 <__adddf3+0x548>
    695c:	0005883a 	mov	r2,zero
    6960:	0007883a 	mov	r3,zero
    6964:	0021883a 	mov	r16,zero
    6968:	003f4d06 	br	66a0 <__ram_exceptions_end+0xfe004680>
    696c:	008007c4 	movi	r2,31
    6970:	11003c16 	blt	r2,r4,6a64 <__adddf3+0x5e4>
    6974:	00800804 	movi	r2,32
    6978:	1105c83a 	sub	r2,r2,r4
    697c:	488e983a 	sll	r7,r9,r2
    6980:	310ad83a 	srl	r5,r6,r4
    6984:	3084983a 	sll	r2,r6,r2
    6988:	4912d83a 	srl	r9,r9,r4
    698c:	394ab03a 	or	r5,r7,r5
    6990:	1004c03a 	cmpne	r2,r2,zero
    6994:	288ab03a 	or	r5,r5,r2
    6998:	003f5306 	br	66e8 <__ram_exceptions_end+0xfe0046c8>
    699c:	4448b03a 	or	r4,r8,r17
    69a0:	20003e26 	beq	r4,zero,6a9c <__adddf3+0x61c>
    69a4:	00c6303a 	nor	r3,zero,r3
    69a8:	18003a1e 	bne	r3,zero,6a94 <__adddf3+0x614>
    69ac:	3463c83a 	sub	r17,r6,r17
    69b0:	4a07c83a 	sub	r3,r9,r8
    69b4:	344d803a 	cmpltu	r6,r6,r17
    69b8:	1991c83a 	sub	r8,r3,r6
    69bc:	1021883a 	mov	r16,r2
    69c0:	3825883a 	mov	r18,r7
    69c4:	003f0a06 	br	65f0 <__ram_exceptions_end+0xfe0045d0>
    69c8:	2023883a 	mov	r17,r4
    69cc:	003f0d06 	br	6604 <__ram_exceptions_end+0xfe0045e4>
    69d0:	0081ffc4 	movi	r2,2047
    69d4:	80bf3f1e 	bne	r16,r2,66d4 <__ram_exceptions_end+0xfe0046b4>
    69d8:	003ec806 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    69dc:	0005883a 	mov	r2,zero
    69e0:	003fb106 	br	68a8 <__ram_exceptions_end+0xfe004888>
    69e4:	0007883a 	mov	r3,zero
    69e8:	003fbc06 	br	68dc <__ram_exceptions_end+0xfe0048bc>
    69ec:	4444b03a 	or	r2,r8,r17
    69f0:	8000871e 	bne	r16,zero,6c10 <__adddf3+0x790>
    69f4:	1000ba26 	beq	r2,zero,6ce0 <__adddf3+0x860>
    69f8:	4984b03a 	or	r2,r9,r6
    69fc:	103ebf26 	beq	r2,zero,64fc <__ram_exceptions_end+0xfe0044dc>
    6a00:	8985883a 	add	r2,r17,r6
    6a04:	4247883a 	add	r3,r8,r9
    6a08:	1451803a 	cmpltu	r8,r2,r17
    6a0c:	40d1883a 	add	r8,r8,r3
    6a10:	40c0202c 	andhi	r3,r8,128
    6a14:	1023883a 	mov	r17,r2
    6a18:	183f1a26 	beq	r3,zero,6684 <__ram_exceptions_end+0xfe004664>
    6a1c:	00bfe034 	movhi	r2,65408
    6a20:	10bfffc4 	addi	r2,r2,-1
    6a24:	2021883a 	mov	r16,r4
    6a28:	4090703a 	and	r8,r8,r2
    6a2c:	003eb306 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    6a30:	4444b03a 	or	r2,r8,r17
    6a34:	8000291e 	bne	r16,zero,6adc <__adddf3+0x65c>
    6a38:	10004b1e 	bne	r2,zero,6b68 <__adddf3+0x6e8>
    6a3c:	4990b03a 	or	r8,r9,r6
    6a40:	40008b26 	beq	r8,zero,6c70 <__adddf3+0x7f0>
    6a44:	4811883a 	mov	r8,r9
    6a48:	3023883a 	mov	r17,r6
    6a4c:	3825883a 	mov	r18,r7
    6a50:	003eaa06 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    6a54:	1021883a 	mov	r16,r2
    6a58:	0011883a 	mov	r8,zero
    6a5c:	0005883a 	mov	r2,zero
    6a60:	003f0f06 	br	66a0 <__ram_exceptions_end+0xfe004680>
    6a64:	217ff804 	addi	r5,r4,-32
    6a68:	00800804 	movi	r2,32
    6a6c:	494ad83a 	srl	r5,r9,r5
    6a70:	20807d26 	beq	r4,r2,6c68 <__adddf3+0x7e8>
    6a74:	00801004 	movi	r2,64
    6a78:	1109c83a 	sub	r4,r2,r4
    6a7c:	4912983a 	sll	r9,r9,r4
    6a80:	498cb03a 	or	r6,r9,r6
    6a84:	300cc03a 	cmpne	r6,r6,zero
    6a88:	298ab03a 	or	r5,r5,r6
    6a8c:	0013883a 	mov	r9,zero
    6a90:	003f1506 	br	66e8 <__ram_exceptions_end+0xfe0046c8>
    6a94:	0101ffc4 	movi	r4,2047
    6a98:	113f9a1e 	bne	r2,r4,6904 <__ram_exceptions_end+0xfe0048e4>
    6a9c:	4811883a 	mov	r8,r9
    6aa0:	3023883a 	mov	r17,r6
    6aa4:	1021883a 	mov	r16,r2
    6aa8:	3825883a 	mov	r18,r7
    6aac:	003e9306 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    6ab0:	8000161e 	bne	r16,zero,6b0c <__adddf3+0x68c>
    6ab4:	444ab03a 	or	r5,r8,r17
    6ab8:	28005126 	beq	r5,zero,6c00 <__adddf3+0x780>
    6abc:	0108303a 	nor	r4,zero,r4
    6ac0:	20004d1e 	bne	r4,zero,6bf8 <__adddf3+0x778>
    6ac4:	89a3883a 	add	r17,r17,r6
    6ac8:	4253883a 	add	r9,r8,r9
    6acc:	898d803a 	cmpltu	r6,r17,r6
    6ad0:	3251883a 	add	r8,r6,r9
    6ad4:	1021883a 	mov	r16,r2
    6ad8:	003f0806 	br	66fc <__ram_exceptions_end+0xfe0046dc>
    6adc:	1000301e 	bne	r2,zero,6ba0 <__adddf3+0x720>
    6ae0:	4984b03a 	or	r2,r9,r6
    6ae4:	10007126 	beq	r2,zero,6cac <__adddf3+0x82c>
    6ae8:	4811883a 	mov	r8,r9
    6aec:	3023883a 	mov	r17,r6
    6af0:	3825883a 	mov	r18,r7
    6af4:	0401ffc4 	movi	r16,2047
    6af8:	003e8006 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    6afc:	4462b03a 	or	r17,r8,r17
    6b00:	8822c03a 	cmpne	r17,r17,zero
    6b04:	0007883a 	mov	r3,zero
    6b08:	003f8b06 	br	6938 <__ram_exceptions_end+0xfe004918>
    6b0c:	0141ffc4 	movi	r5,2047
    6b10:	11403b26 	beq	r2,r5,6c00 <__adddf3+0x780>
    6b14:	0109c83a 	sub	r4,zero,r4
    6b18:	42002034 	orhi	r8,r8,128
    6b1c:	01400e04 	movi	r5,56
    6b20:	29006716 	blt	r5,r4,6cc0 <__adddf3+0x840>
    6b24:	014007c4 	movi	r5,31
    6b28:	29007016 	blt	r5,r4,6cec <__adddf3+0x86c>
    6b2c:	01400804 	movi	r5,32
    6b30:	290bc83a 	sub	r5,r5,r4
    6b34:	4154983a 	sll	r10,r8,r5
    6b38:	890ed83a 	srl	r7,r17,r4
    6b3c:	894a983a 	sll	r5,r17,r5
    6b40:	4108d83a 	srl	r4,r8,r4
    6b44:	51e2b03a 	or	r17,r10,r7
    6b48:	280ac03a 	cmpne	r5,r5,zero
    6b4c:	8962b03a 	or	r17,r17,r5
    6b50:	89a3883a 	add	r17,r17,r6
    6b54:	2253883a 	add	r9,r4,r9
    6b58:	898d803a 	cmpltu	r6,r17,r6
    6b5c:	3251883a 	add	r8,r6,r9
    6b60:	1021883a 	mov	r16,r2
    6b64:	003ee506 	br	66fc <__ram_exceptions_end+0xfe0046dc>
    6b68:	4984b03a 	or	r2,r9,r6
    6b6c:	103e6326 	beq	r2,zero,64fc <__ram_exceptions_end+0xfe0044dc>
    6b70:	8987c83a 	sub	r3,r17,r6
    6b74:	88c9803a 	cmpltu	r4,r17,r3
    6b78:	4245c83a 	sub	r2,r8,r9
    6b7c:	1105c83a 	sub	r2,r2,r4
    6b80:	1100202c 	andhi	r4,r2,128
    6b84:	203ebb26 	beq	r4,zero,6674 <__ram_exceptions_end+0xfe004654>
    6b88:	3463c83a 	sub	r17,r6,r17
    6b8c:	4a07c83a 	sub	r3,r9,r8
    6b90:	344d803a 	cmpltu	r6,r6,r17
    6b94:	1991c83a 	sub	r8,r3,r6
    6b98:	3825883a 	mov	r18,r7
    6b9c:	003e5706 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    6ba0:	4984b03a 	or	r2,r9,r6
    6ba4:	10002e26 	beq	r2,zero,6c60 <__adddf3+0x7e0>
    6ba8:	4004d0fa 	srli	r2,r8,3
    6bac:	8822d0fa 	srli	r17,r17,3
    6bb0:	4010977a 	slli	r8,r8,29
    6bb4:	10c0022c 	andhi	r3,r2,8
    6bb8:	4462b03a 	or	r17,r8,r17
    6bbc:	18000826 	beq	r3,zero,6be0 <__adddf3+0x760>
    6bc0:	4808d0fa 	srli	r4,r9,3
    6bc4:	20c0022c 	andhi	r3,r4,8
    6bc8:	1800051e 	bne	r3,zero,6be0 <__adddf3+0x760>
    6bcc:	300cd0fa 	srli	r6,r6,3
    6bd0:	4806977a 	slli	r3,r9,29
    6bd4:	2005883a 	mov	r2,r4
    6bd8:	3825883a 	mov	r18,r7
    6bdc:	19a2b03a 	or	r17,r3,r6
    6be0:	8810d77a 	srli	r8,r17,29
    6be4:	100490fa 	slli	r2,r2,3
    6be8:	882290fa 	slli	r17,r17,3
    6bec:	0401ffc4 	movi	r16,2047
    6bf0:	4090b03a 	or	r8,r8,r2
    6bf4:	003e4106 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    6bf8:	0141ffc4 	movi	r5,2047
    6bfc:	117fc71e 	bne	r2,r5,6b1c <__ram_exceptions_end+0xfe004afc>
    6c00:	4811883a 	mov	r8,r9
    6c04:	3023883a 	mov	r17,r6
    6c08:	1021883a 	mov	r16,r2
    6c0c:	003e3b06 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    6c10:	10002f26 	beq	r2,zero,6cd0 <__adddf3+0x850>
    6c14:	4984b03a 	or	r2,r9,r6
    6c18:	10001126 	beq	r2,zero,6c60 <__adddf3+0x7e0>
    6c1c:	4004d0fa 	srli	r2,r8,3
    6c20:	8822d0fa 	srli	r17,r17,3
    6c24:	4010977a 	slli	r8,r8,29
    6c28:	10c0022c 	andhi	r3,r2,8
    6c2c:	4462b03a 	or	r17,r8,r17
    6c30:	183feb26 	beq	r3,zero,6be0 <__ram_exceptions_end+0xfe004bc0>
    6c34:	4808d0fa 	srli	r4,r9,3
    6c38:	20c0022c 	andhi	r3,r4,8
    6c3c:	183fe81e 	bne	r3,zero,6be0 <__ram_exceptions_end+0xfe004bc0>
    6c40:	300cd0fa 	srli	r6,r6,3
    6c44:	4806977a 	slli	r3,r9,29
    6c48:	2005883a 	mov	r2,r4
    6c4c:	19a2b03a 	or	r17,r3,r6
    6c50:	003fe306 	br	6be0 <__ram_exceptions_end+0xfe004bc0>
    6c54:	0011883a 	mov	r8,zero
    6c58:	0005883a 	mov	r2,zero
    6c5c:	003e3f06 	br	655c <__ram_exceptions_end+0xfe00453c>
    6c60:	0401ffc4 	movi	r16,2047
    6c64:	003e2506 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    6c68:	0013883a 	mov	r9,zero
    6c6c:	003f8406 	br	6a80 <__ram_exceptions_end+0xfe004a60>
    6c70:	0005883a 	mov	r2,zero
    6c74:	0007883a 	mov	r3,zero
    6c78:	003e8906 	br	66a0 <__ram_exceptions_end+0xfe004680>
    6c7c:	197ff804 	addi	r5,r3,-32
    6c80:	01000804 	movi	r4,32
    6c84:	414ad83a 	srl	r5,r8,r5
    6c88:	19002426 	beq	r3,r4,6d1c <__adddf3+0x89c>
    6c8c:	01001004 	movi	r4,64
    6c90:	20c7c83a 	sub	r3,r4,r3
    6c94:	40c6983a 	sll	r3,r8,r3
    6c98:	1c46b03a 	or	r3,r3,r17
    6c9c:	1806c03a 	cmpne	r3,r3,zero
    6ca0:	28e2b03a 	or	r17,r5,r3
    6ca4:	0007883a 	mov	r3,zero
    6ca8:	003f2306 	br	6938 <__ram_exceptions_end+0xfe004918>
    6cac:	0007883a 	mov	r3,zero
    6cb0:	5811883a 	mov	r8,r11
    6cb4:	00bfffc4 	movi	r2,-1
    6cb8:	0401ffc4 	movi	r16,2047
    6cbc:	003e7806 	br	66a0 <__ram_exceptions_end+0xfe004680>
    6cc0:	4462b03a 	or	r17,r8,r17
    6cc4:	8822c03a 	cmpne	r17,r17,zero
    6cc8:	0009883a 	mov	r4,zero
    6ccc:	003fa006 	br	6b50 <__ram_exceptions_end+0xfe004b30>
    6cd0:	4811883a 	mov	r8,r9
    6cd4:	3023883a 	mov	r17,r6
    6cd8:	0401ffc4 	movi	r16,2047
    6cdc:	003e0706 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    6ce0:	4811883a 	mov	r8,r9
    6ce4:	3023883a 	mov	r17,r6
    6ce8:	003e0406 	br	64fc <__ram_exceptions_end+0xfe0044dc>
    6cec:	21fff804 	addi	r7,r4,-32
    6cf0:	01400804 	movi	r5,32
    6cf4:	41ced83a 	srl	r7,r8,r7
    6cf8:	21400a26 	beq	r4,r5,6d24 <__adddf3+0x8a4>
    6cfc:	01401004 	movi	r5,64
    6d00:	2909c83a 	sub	r4,r5,r4
    6d04:	4108983a 	sll	r4,r8,r4
    6d08:	2448b03a 	or	r4,r4,r17
    6d0c:	2008c03a 	cmpne	r4,r4,zero
    6d10:	3922b03a 	or	r17,r7,r4
    6d14:	0009883a 	mov	r4,zero
    6d18:	003f8d06 	br	6b50 <__ram_exceptions_end+0xfe004b30>
    6d1c:	0007883a 	mov	r3,zero
    6d20:	003fdd06 	br	6c98 <__ram_exceptions_end+0xfe004c78>
    6d24:	0009883a 	mov	r4,zero
    6d28:	003ff706 	br	6d08 <__ram_exceptions_end+0xfe004ce8>

00006d2c <__divdf3>:
    6d2c:	defff004 	addi	sp,sp,-64
    6d30:	dc800815 	stw	r18,32(sp)
    6d34:	2824d53a 	srli	r18,r5,20
    6d38:	dd800c15 	stw	r22,48(sp)
    6d3c:	282cd7fa 	srli	r22,r5,31
    6d40:	dc000615 	stw	r16,24(sp)
    6d44:	04000434 	movhi	r16,16
    6d48:	843fffc4 	addi	r16,r16,-1
    6d4c:	dfc00f15 	stw	ra,60(sp)
    6d50:	df000e15 	stw	fp,56(sp)
    6d54:	ddc00d15 	stw	r23,52(sp)
    6d58:	dd400b15 	stw	r21,44(sp)
    6d5c:	dd000a15 	stw	r20,40(sp)
    6d60:	dcc00915 	stw	r19,36(sp)
    6d64:	dc400715 	stw	r17,28(sp)
    6d68:	9481ffcc 	andi	r18,r18,2047
    6d6c:	2c20703a 	and	r16,r5,r16
    6d70:	b2003fcc 	andi	r8,r22,255
    6d74:	90006126 	beq	r18,zero,6efc <__divdf3+0x1d0>
    6d78:	0081ffc4 	movi	r2,2047
    6d7c:	202b883a 	mov	r21,r4
    6d80:	90803726 	beq	r18,r2,6e60 <__divdf3+0x134>
    6d84:	80800434 	orhi	r2,r16,16
    6d88:	100490fa 	slli	r2,r2,3
    6d8c:	2020d77a 	srli	r16,r4,29
    6d90:	202a90fa 	slli	r21,r4,3
    6d94:	94bf0044 	addi	r18,r18,-1023
    6d98:	80a0b03a 	or	r16,r16,r2
    6d9c:	0013883a 	mov	r9,zero
    6da0:	000b883a 	mov	r5,zero
    6da4:	3806d53a 	srli	r3,r7,20
    6da8:	382ed7fa 	srli	r23,r7,31
    6dac:	04400434 	movhi	r17,16
    6db0:	8c7fffc4 	addi	r17,r17,-1
    6db4:	18c1ffcc 	andi	r3,r3,2047
    6db8:	3029883a 	mov	r20,r6
    6dbc:	3c62703a 	and	r17,r7,r17
    6dc0:	bf003fcc 	andi	fp,r23,255
    6dc4:	18006e26 	beq	r3,zero,6f80 <__divdf3+0x254>
    6dc8:	0081ffc4 	movi	r2,2047
    6dcc:	18806626 	beq	r3,r2,6f68 <__divdf3+0x23c>
    6dd0:	88800434 	orhi	r2,r17,16
    6dd4:	100490fa 	slli	r2,r2,3
    6dd8:	3022d77a 	srli	r17,r6,29
    6ddc:	302890fa 	slli	r20,r6,3
    6de0:	18ff0044 	addi	r3,r3,-1023
    6de4:	88a2b03a 	or	r17,r17,r2
    6de8:	000f883a 	mov	r7,zero
    6dec:	b5e6f03a 	xor	r19,r22,r23
    6df0:	3a4cb03a 	or	r6,r7,r9
    6df4:	008003c4 	movi	r2,15
    6df8:	9809883a 	mov	r4,r19
    6dfc:	90c7c83a 	sub	r3,r18,r3
    6e00:	9cc03fcc 	andi	r19,r19,255
    6e04:	11809636 	bltu	r2,r6,7060 <__divdf3+0x334>
    6e08:	300c90ba 	slli	r6,r6,2
    6e0c:	00800034 	movhi	r2,0
    6e10:	109b8804 	addi	r2,r2,28192
    6e14:	308d883a 	add	r6,r6,r2
    6e18:	30800017 	ldw	r2,0(r6)
    6e1c:	1000683a 	jmp	r2
    6e20:	00007060 	cmpeqi	zero,zero,449
    6e24:	00006e98 	cmpnei	zero,zero,442
    6e28:	00007050 	cmplti	zero,zero,449
    6e2c:	00006e8c 	andi	zero,zero,442
    6e30:	00007050 	cmplti	zero,zero,449
    6e34:	00007024 	muli	zero,zero,448
    6e38:	00007050 	cmplti	zero,zero,449
    6e3c:	00006e8c 	andi	zero,zero,442
    6e40:	00006e98 	cmpnei	zero,zero,442
    6e44:	00006e98 	cmpnei	zero,zero,442
    6e48:	00007024 	muli	zero,zero,448
    6e4c:	00006e8c 	andi	zero,zero,442
    6e50:	00006e7c 	xorhi	zero,zero,441
    6e54:	00006e7c 	xorhi	zero,zero,441
    6e58:	00006e7c 	xorhi	zero,zero,441
    6e5c:	000073e8 	cmpgeui	zero,zero,463
    6e60:	2404b03a 	or	r2,r4,r16
    6e64:	10006c1e 	bne	r2,zero,7018 <__divdf3+0x2ec>
    6e68:	02400204 	movi	r9,8
    6e6c:	0021883a 	mov	r16,zero
    6e70:	002b883a 	mov	r21,zero
    6e74:	01400084 	movi	r5,2
    6e78:	003fca06 	br	6da4 <__ram_exceptions_end+0xfe004d84>
    6e7c:	8023883a 	mov	r17,r16
    6e80:	a829883a 	mov	r20,r21
    6e84:	4039883a 	mov	fp,r8
    6e88:	280f883a 	mov	r7,r5
    6e8c:	00800084 	movi	r2,2
    6e90:	3881601e 	bne	r7,r2,7414 <__divdf3+0x6e8>
    6e94:	e027883a 	mov	r19,fp
    6e98:	9900004c 	andi	r4,r19,1
    6e9c:	0081ffc4 	movi	r2,2047
    6ea0:	0021883a 	mov	r16,zero
    6ea4:	002b883a 	mov	r21,zero
    6ea8:	1004953a 	slli	r2,r2,20
    6eac:	20c03fcc 	andi	r3,r4,255
    6eb0:	01400434 	movhi	r5,16
    6eb4:	297fffc4 	addi	r5,r5,-1
    6eb8:	180697fa 	slli	r3,r3,31
    6ebc:	8160703a 	and	r16,r16,r5
    6ec0:	80a0b03a 	or	r16,r16,r2
    6ec4:	80c6b03a 	or	r3,r16,r3
    6ec8:	a805883a 	mov	r2,r21
    6ecc:	dfc00f17 	ldw	ra,60(sp)
    6ed0:	df000e17 	ldw	fp,56(sp)
    6ed4:	ddc00d17 	ldw	r23,52(sp)
    6ed8:	dd800c17 	ldw	r22,48(sp)
    6edc:	dd400b17 	ldw	r21,44(sp)
    6ee0:	dd000a17 	ldw	r20,40(sp)
    6ee4:	dcc00917 	ldw	r19,36(sp)
    6ee8:	dc800817 	ldw	r18,32(sp)
    6eec:	dc400717 	ldw	r17,28(sp)
    6ef0:	dc000617 	ldw	r16,24(sp)
    6ef4:	dec01004 	addi	sp,sp,64
    6ef8:	f800283a 	ret
    6efc:	2404b03a 	or	r2,r4,r16
    6f00:	2023883a 	mov	r17,r4
    6f04:	10003f26 	beq	r2,zero,7004 <__divdf3+0x2d8>
    6f08:	80015e26 	beq	r16,zero,7484 <__divdf3+0x758>
    6f0c:	8009883a 	mov	r4,r16
    6f10:	d9800215 	stw	r6,8(sp)
    6f14:	d9c00515 	stw	r7,20(sp)
    6f18:	da000415 	stw	r8,16(sp)
    6f1c:	0008f780 	call	8f78 <__clzsi2>
    6f20:	d9800217 	ldw	r6,8(sp)
    6f24:	d9c00517 	ldw	r7,20(sp)
    6f28:	da000417 	ldw	r8,16(sp)
    6f2c:	113ffd44 	addi	r4,r2,-11
    6f30:	00c00704 	movi	r3,28
    6f34:	19014f16 	blt	r3,r4,7474 <__divdf3+0x748>
    6f38:	00c00744 	movi	r3,29
    6f3c:	157ffe04 	addi	r21,r2,-8
    6f40:	1907c83a 	sub	r3,r3,r4
    6f44:	8560983a 	sll	r16,r16,r21
    6f48:	88c6d83a 	srl	r3,r17,r3
    6f4c:	8d6a983a 	sll	r21,r17,r21
    6f50:	1c20b03a 	or	r16,r3,r16
    6f54:	1080fcc4 	addi	r2,r2,1011
    6f58:	00a5c83a 	sub	r18,zero,r2
    6f5c:	0013883a 	mov	r9,zero
    6f60:	000b883a 	mov	r5,zero
    6f64:	003f8f06 	br	6da4 <__ram_exceptions_end+0xfe004d84>
    6f68:	3444b03a 	or	r2,r6,r17
    6f6c:	1000231e 	bne	r2,zero,6ffc <__divdf3+0x2d0>
    6f70:	0023883a 	mov	r17,zero
    6f74:	0029883a 	mov	r20,zero
    6f78:	01c00084 	movi	r7,2
    6f7c:	003f9b06 	br	6dec <__ram_exceptions_end+0xfe004dcc>
    6f80:	3444b03a 	or	r2,r6,r17
    6f84:	10001926 	beq	r2,zero,6fec <__divdf3+0x2c0>
    6f88:	88014b26 	beq	r17,zero,74b8 <__divdf3+0x78c>
    6f8c:	8809883a 	mov	r4,r17
    6f90:	d9400115 	stw	r5,4(sp)
    6f94:	d9800215 	stw	r6,8(sp)
    6f98:	da000415 	stw	r8,16(sp)
    6f9c:	da400315 	stw	r9,12(sp)
    6fa0:	0008f780 	call	8f78 <__clzsi2>
    6fa4:	d9400117 	ldw	r5,4(sp)
    6fa8:	d9800217 	ldw	r6,8(sp)
    6fac:	da000417 	ldw	r8,16(sp)
    6fb0:	da400317 	ldw	r9,12(sp)
    6fb4:	113ffd44 	addi	r4,r2,-11
    6fb8:	00c00704 	movi	r3,28
    6fbc:	19013a16 	blt	r3,r4,74a8 <__divdf3+0x77c>
    6fc0:	00c00744 	movi	r3,29
    6fc4:	153ffe04 	addi	r20,r2,-8
    6fc8:	1907c83a 	sub	r3,r3,r4
    6fcc:	8d22983a 	sll	r17,r17,r20
    6fd0:	30c6d83a 	srl	r3,r6,r3
    6fd4:	3528983a 	sll	r20,r6,r20
    6fd8:	1c62b03a 	or	r17,r3,r17
    6fdc:	1080fcc4 	addi	r2,r2,1011
    6fe0:	0087c83a 	sub	r3,zero,r2
    6fe4:	000f883a 	mov	r7,zero
    6fe8:	003f8006 	br	6dec <__ram_exceptions_end+0xfe004dcc>
    6fec:	0023883a 	mov	r17,zero
    6ff0:	0029883a 	mov	r20,zero
    6ff4:	01c00044 	movi	r7,1
    6ff8:	003f7c06 	br	6dec <__ram_exceptions_end+0xfe004dcc>
    6ffc:	01c000c4 	movi	r7,3
    7000:	003f7a06 	br	6dec <__ram_exceptions_end+0xfe004dcc>
    7004:	02400104 	movi	r9,4
    7008:	0021883a 	mov	r16,zero
    700c:	002b883a 	mov	r21,zero
    7010:	01400044 	movi	r5,1
    7014:	003f6306 	br	6da4 <__ram_exceptions_end+0xfe004d84>
    7018:	02400304 	movi	r9,12
    701c:	014000c4 	movi	r5,3
    7020:	003f6006 	br	6da4 <__ram_exceptions_end+0xfe004d84>
    7024:	04000434 	movhi	r16,16
    7028:	0009883a 	mov	r4,zero
    702c:	843fffc4 	addi	r16,r16,-1
    7030:	057fffc4 	movi	r21,-1
    7034:	0081ffc4 	movi	r2,2047
    7038:	003f9b06 	br	6ea8 <__ram_exceptions_end+0xfe004e88>
    703c:	00c00044 	movi	r3,1
    7040:	1887c83a 	sub	r3,r3,r2
    7044:	01000e04 	movi	r4,56
    7048:	20c1530e 	bge	r4,r3,7598 <__divdf3+0x86c>
    704c:	9900004c 	andi	r4,r19,1
    7050:	0005883a 	mov	r2,zero
    7054:	0021883a 	mov	r16,zero
    7058:	002b883a 	mov	r21,zero
    705c:	003f9206 	br	6ea8 <__ram_exceptions_end+0xfe004e88>
    7060:	8c012e36 	bltu	r17,r16,751c <__divdf3+0x7f0>
    7064:	84412c26 	beq	r16,r17,7518 <__divdf3+0x7ec>
    7068:	a82f883a 	mov	r23,r21
    706c:	18ffffc4 	addi	r3,r3,-1
    7070:	002b883a 	mov	r21,zero
    7074:	a004d63a 	srli	r2,r20,24
    7078:	8822923a 	slli	r17,r17,8
    707c:	a028923a 	slli	r20,r20,8
    7080:	8009883a 	mov	r4,r16
    7084:	88acb03a 	or	r22,r17,r2
    7088:	dd000015 	stw	r20,0(sp)
    708c:	b028d43a 	srli	r20,r22,16
    7090:	d8c00215 	stw	r3,8(sp)
    7094:	b4bfffcc 	andi	r18,r22,65535
    7098:	a00b883a 	mov	r5,r20
    709c:	0004d000 	call	4d00 <__udivsi3>
    70a0:	100b883a 	mov	r5,r2
    70a4:	9009883a 	mov	r4,r18
    70a8:	1023883a 	mov	r17,r2
    70ac:	0004dbc0 	call	4dbc <__mulsi3>
    70b0:	8009883a 	mov	r4,r16
    70b4:	a00b883a 	mov	r5,r20
    70b8:	1039883a 	mov	fp,r2
    70bc:	0004d640 	call	4d64 <__umodsi3>
    70c0:	1004943a 	slli	r2,r2,16
    70c4:	b808d43a 	srli	r4,r23,16
    70c8:	d8c00217 	ldw	r3,8(sp)
    70cc:	2084b03a 	or	r2,r4,r2
    70d0:	1700062e 	bgeu	r2,fp,70ec <__divdf3+0x3c0>
    70d4:	1585883a 	add	r2,r2,r22
    70d8:	893fffc4 	addi	r4,r17,-1
    70dc:	15811d36 	bltu	r2,r22,7554 <__divdf3+0x828>
    70e0:	17011c2e 	bgeu	r2,fp,7554 <__divdf3+0x828>
    70e4:	8c7fff84 	addi	r17,r17,-2
    70e8:	1585883a 	add	r2,r2,r22
    70ec:	1739c83a 	sub	fp,r2,fp
    70f0:	a00b883a 	mov	r5,r20
    70f4:	e009883a 	mov	r4,fp
    70f8:	d8c00215 	stw	r3,8(sp)
    70fc:	0004d000 	call	4d00 <__udivsi3>
    7100:	100b883a 	mov	r5,r2
    7104:	9009883a 	mov	r4,r18
    7108:	1021883a 	mov	r16,r2
    710c:	0004dbc0 	call	4dbc <__mulsi3>
    7110:	a00b883a 	mov	r5,r20
    7114:	e009883a 	mov	r4,fp
    7118:	d8800415 	stw	r2,16(sp)
    711c:	0004d640 	call	4d64 <__umodsi3>
    7120:	1004943a 	slli	r2,r2,16
    7124:	da000417 	ldw	r8,16(sp)
    7128:	bdffffcc 	andi	r23,r23,65535
    712c:	b884b03a 	or	r2,r23,r2
    7130:	d8c00217 	ldw	r3,8(sp)
    7134:	1200062e 	bgeu	r2,r8,7150 <__divdf3+0x424>
    7138:	1585883a 	add	r2,r2,r22
    713c:	813fffc4 	addi	r4,r16,-1
    7140:	15810236 	bltu	r2,r22,754c <__divdf3+0x820>
    7144:	1201012e 	bgeu	r2,r8,754c <__divdf3+0x820>
    7148:	843fff84 	addi	r16,r16,-2
    714c:	1585883a 	add	r2,r2,r22
    7150:	8822943a 	slli	r17,r17,16
    7154:	d9800017 	ldw	r6,0(sp)
    7158:	1211c83a 	sub	r8,r2,r8
    715c:	8c22b03a 	or	r17,r17,r16
    7160:	373fffcc 	andi	fp,r6,65535
    7164:	8abfffcc 	andi	r10,r17,65535
    7168:	8820d43a 	srli	r16,r17,16
    716c:	5009883a 	mov	r4,r10
    7170:	e00b883a 	mov	r5,fp
    7174:	302ed43a 	srli	r23,r6,16
    7178:	d8c00215 	stw	r3,8(sp)
    717c:	da000415 	stw	r8,16(sp)
    7180:	da800115 	stw	r10,4(sp)
    7184:	0004dbc0 	call	4dbc <__mulsi3>
    7188:	800b883a 	mov	r5,r16
    718c:	e009883a 	mov	r4,fp
    7190:	d8800515 	stw	r2,20(sp)
    7194:	0004dbc0 	call	4dbc <__mulsi3>
    7198:	8009883a 	mov	r4,r16
    719c:	b80b883a 	mov	r5,r23
    71a0:	d8800315 	stw	r2,12(sp)
    71a4:	0004dbc0 	call	4dbc <__mulsi3>
    71a8:	da800117 	ldw	r10,4(sp)
    71ac:	b80b883a 	mov	r5,r23
    71b0:	1021883a 	mov	r16,r2
    71b4:	5009883a 	mov	r4,r10
    71b8:	0004dbc0 	call	4dbc <__mulsi3>
    71bc:	d9c00517 	ldw	r7,20(sp)
    71c0:	da400317 	ldw	r9,12(sp)
    71c4:	d8c00217 	ldw	r3,8(sp)
    71c8:	3808d43a 	srli	r4,r7,16
    71cc:	1245883a 	add	r2,r2,r9
    71d0:	da000417 	ldw	r8,16(sp)
    71d4:	2085883a 	add	r2,r4,r2
    71d8:	1240022e 	bgeu	r2,r9,71e4 <__divdf3+0x4b8>
    71dc:	01000074 	movhi	r4,1
    71e0:	8121883a 	add	r16,r16,r4
    71e4:	1008d43a 	srli	r4,r2,16
    71e8:	1004943a 	slli	r2,r2,16
    71ec:	39ffffcc 	andi	r7,r7,65535
    71f0:	2409883a 	add	r4,r4,r16
    71f4:	11c5883a 	add	r2,r2,r7
    71f8:	4100bb36 	bltu	r8,r4,74e8 <__divdf3+0x7bc>
    71fc:	4100d726 	beq	r8,r4,755c <__divdf3+0x830>
    7200:	4109c83a 	sub	r4,r8,r4
    7204:	a8a1c83a 	sub	r16,r21,r2
    7208:	ac2b803a 	cmpltu	r21,r21,r16
    720c:	256bc83a 	sub	r21,r4,r21
    7210:	b540d926 	beq	r22,r21,7578 <__divdf3+0x84c>
    7214:	a00b883a 	mov	r5,r20
    7218:	a809883a 	mov	r4,r21
    721c:	d8c00215 	stw	r3,8(sp)
    7220:	0004d000 	call	4d00 <__udivsi3>
    7224:	100b883a 	mov	r5,r2
    7228:	9009883a 	mov	r4,r18
    722c:	d8800515 	stw	r2,20(sp)
    7230:	0004dbc0 	call	4dbc <__mulsi3>
    7234:	a809883a 	mov	r4,r21
    7238:	a00b883a 	mov	r5,r20
    723c:	d8800415 	stw	r2,16(sp)
    7240:	0004d640 	call	4d64 <__umodsi3>
    7244:	1004943a 	slli	r2,r2,16
    7248:	8008d43a 	srli	r4,r16,16
    724c:	da000417 	ldw	r8,16(sp)
    7250:	d8c00217 	ldw	r3,8(sp)
    7254:	2084b03a 	or	r2,r4,r2
    7258:	d9c00517 	ldw	r7,20(sp)
    725c:	1200062e 	bgeu	r2,r8,7278 <__divdf3+0x54c>
    7260:	1585883a 	add	r2,r2,r22
    7264:	393fffc4 	addi	r4,r7,-1
    7268:	1580c536 	bltu	r2,r22,7580 <__divdf3+0x854>
    726c:	1200c42e 	bgeu	r2,r8,7580 <__divdf3+0x854>
    7270:	39ffff84 	addi	r7,r7,-2
    7274:	1585883a 	add	r2,r2,r22
    7278:	122bc83a 	sub	r21,r2,r8
    727c:	a00b883a 	mov	r5,r20
    7280:	a809883a 	mov	r4,r21
    7284:	d8c00215 	stw	r3,8(sp)
    7288:	d9c00515 	stw	r7,20(sp)
    728c:	0004d000 	call	4d00 <__udivsi3>
    7290:	9009883a 	mov	r4,r18
    7294:	100b883a 	mov	r5,r2
    7298:	d8800415 	stw	r2,16(sp)
    729c:	0004dbc0 	call	4dbc <__mulsi3>
    72a0:	a809883a 	mov	r4,r21
    72a4:	a00b883a 	mov	r5,r20
    72a8:	1025883a 	mov	r18,r2
    72ac:	0004d640 	call	4d64 <__umodsi3>
    72b0:	1004943a 	slli	r2,r2,16
    72b4:	813fffcc 	andi	r4,r16,65535
    72b8:	d8c00217 	ldw	r3,8(sp)
    72bc:	20a0b03a 	or	r16,r4,r2
    72c0:	d9c00517 	ldw	r7,20(sp)
    72c4:	da000417 	ldw	r8,16(sp)
    72c8:	8480062e 	bgeu	r16,r18,72e4 <__divdf3+0x5b8>
    72cc:	85a1883a 	add	r16,r16,r22
    72d0:	40bfffc4 	addi	r2,r8,-1
    72d4:	8580ac36 	bltu	r16,r22,7588 <__divdf3+0x85c>
    72d8:	8480ab2e 	bgeu	r16,r18,7588 <__divdf3+0x85c>
    72dc:	423fff84 	addi	r8,r8,-2
    72e0:	85a1883a 	add	r16,r16,r22
    72e4:	3804943a 	slli	r2,r7,16
    72e8:	84a1c83a 	sub	r16,r16,r18
    72ec:	e009883a 	mov	r4,fp
    72f0:	1228b03a 	or	r20,r2,r8
    72f4:	a1ffffcc 	andi	r7,r20,65535
    72f8:	a024d43a 	srli	r18,r20,16
    72fc:	380b883a 	mov	r5,r7
    7300:	d8c00215 	stw	r3,8(sp)
    7304:	d9c00515 	stw	r7,20(sp)
    7308:	0004dbc0 	call	4dbc <__mulsi3>
    730c:	900b883a 	mov	r5,r18
    7310:	e009883a 	mov	r4,fp
    7314:	102b883a 	mov	r21,r2
    7318:	0004dbc0 	call	4dbc <__mulsi3>
    731c:	900b883a 	mov	r5,r18
    7320:	b809883a 	mov	r4,r23
    7324:	1039883a 	mov	fp,r2
    7328:	0004dbc0 	call	4dbc <__mulsi3>
    732c:	d9c00517 	ldw	r7,20(sp)
    7330:	b80b883a 	mov	r5,r23
    7334:	1025883a 	mov	r18,r2
    7338:	3809883a 	mov	r4,r7
    733c:	0004dbc0 	call	4dbc <__mulsi3>
    7340:	a808d43a 	srli	r4,r21,16
    7344:	1705883a 	add	r2,r2,fp
    7348:	d8c00217 	ldw	r3,8(sp)
    734c:	2085883a 	add	r2,r4,r2
    7350:	1700022e 	bgeu	r2,fp,735c <__divdf3+0x630>
    7354:	01000074 	movhi	r4,1
    7358:	9125883a 	add	r18,r18,r4
    735c:	1008d43a 	srli	r4,r2,16
    7360:	1004943a 	slli	r2,r2,16
    7364:	ad7fffcc 	andi	r21,r21,65535
    7368:	2489883a 	add	r4,r4,r18
    736c:	1545883a 	add	r2,r2,r21
    7370:	81003836 	bltu	r16,r4,7454 <__divdf3+0x728>
    7374:	81003626 	beq	r16,r4,7450 <__divdf3+0x724>
    7378:	a5000054 	ori	r20,r20,1
    737c:	1880ffc4 	addi	r2,r3,1023
    7380:	00bf2e0e 	bge	zero,r2,703c <__ram_exceptions_end+0xfe00501c>
    7384:	a10001cc 	andi	r4,r20,7
    7388:	20000726 	beq	r4,zero,73a8 <__divdf3+0x67c>
    738c:	a10003cc 	andi	r4,r20,15
    7390:	01400104 	movi	r5,4
    7394:	21400426 	beq	r4,r5,73a8 <__divdf3+0x67c>
    7398:	a149883a 	add	r4,r20,r5
    739c:	2529803a 	cmpltu	r20,r4,r20
    73a0:	8d23883a 	add	r17,r17,r20
    73a4:	2029883a 	mov	r20,r4
    73a8:	8900402c 	andhi	r4,r17,256
    73ac:	20000426 	beq	r4,zero,73c0 <__divdf3+0x694>
    73b0:	18810004 	addi	r2,r3,1024
    73b4:	00ffc034 	movhi	r3,65280
    73b8:	18ffffc4 	addi	r3,r3,-1
    73bc:	88e2703a 	and	r17,r17,r3
    73c0:	00c1ff84 	movi	r3,2046
    73c4:	18beb416 	blt	r3,r2,6e98 <__ram_exceptions_end+0xfe004e78>
    73c8:	a028d0fa 	srli	r20,r20,3
    73cc:	882a977a 	slli	r21,r17,29
    73d0:	8820927a 	slli	r16,r17,9
    73d4:	1081ffcc 	andi	r2,r2,2047
    73d8:	ad2ab03a 	or	r21,r21,r20
    73dc:	8020d33a 	srli	r16,r16,12
    73e0:	9900004c 	andi	r4,r19,1
    73e4:	003eb006 	br	6ea8 <__ram_exceptions_end+0xfe004e88>
    73e8:	8080022c 	andhi	r2,r16,8
    73ec:	10001226 	beq	r2,zero,7438 <__divdf3+0x70c>
    73f0:	8880022c 	andhi	r2,r17,8
    73f4:	1000101e 	bne	r2,zero,7438 <__divdf3+0x70c>
    73f8:	00800434 	movhi	r2,16
    73fc:	8c000234 	orhi	r16,r17,8
    7400:	10bfffc4 	addi	r2,r2,-1
    7404:	b809883a 	mov	r4,r23
    7408:	80a0703a 	and	r16,r16,r2
    740c:	a02b883a 	mov	r21,r20
    7410:	003f0806 	br	7034 <__ram_exceptions_end+0xfe005014>
    7414:	008000c4 	movi	r2,3
    7418:	3880b126 	beq	r7,r2,76e0 <__divdf3+0x9b4>
    741c:	00800044 	movi	r2,1
    7420:	38805b1e 	bne	r7,r2,7590 <__divdf3+0x864>
    7424:	e009883a 	mov	r4,fp
    7428:	0005883a 	mov	r2,zero
    742c:	0021883a 	mov	r16,zero
    7430:	002b883a 	mov	r21,zero
    7434:	003e9c06 	br	6ea8 <__ram_exceptions_end+0xfe004e88>
    7438:	00800434 	movhi	r2,16
    743c:	84000234 	orhi	r16,r16,8
    7440:	10bfffc4 	addi	r2,r2,-1
    7444:	b009883a 	mov	r4,r22
    7448:	80a0703a 	and	r16,r16,r2
    744c:	003ef906 	br	7034 <__ram_exceptions_end+0xfe005014>
    7450:	103fca26 	beq	r2,zero,737c <__ram_exceptions_end+0xfe00535c>
    7454:	b421883a 	add	r16,r22,r16
    7458:	a17fffc4 	addi	r5,r20,-1
    745c:	8580422e 	bgeu	r16,r22,7568 <__divdf3+0x83c>
    7460:	2829883a 	mov	r20,r5
    7464:	813fc41e 	bne	r16,r4,7378 <__ram_exceptions_end+0xfe005358>
    7468:	d9800017 	ldw	r6,0(sp)
    746c:	30bfc21e 	bne	r6,r2,7378 <__ram_exceptions_end+0xfe005358>
    7470:	003fc206 	br	737c <__ram_exceptions_end+0xfe00535c>
    7474:	143ff604 	addi	r16,r2,-40
    7478:	8c20983a 	sll	r16,r17,r16
    747c:	002b883a 	mov	r21,zero
    7480:	003eb406 	br	6f54 <__ram_exceptions_end+0xfe004f34>
    7484:	d9800215 	stw	r6,8(sp)
    7488:	d9c00515 	stw	r7,20(sp)
    748c:	da000415 	stw	r8,16(sp)
    7490:	0008f780 	call	8f78 <__clzsi2>
    7494:	10800804 	addi	r2,r2,32
    7498:	da000417 	ldw	r8,16(sp)
    749c:	d9c00517 	ldw	r7,20(sp)
    74a0:	d9800217 	ldw	r6,8(sp)
    74a4:	003ea106 	br	6f2c <__ram_exceptions_end+0xfe004f0c>
    74a8:	147ff604 	addi	r17,r2,-40
    74ac:	3462983a 	sll	r17,r6,r17
    74b0:	0029883a 	mov	r20,zero
    74b4:	003ec906 	br	6fdc <__ram_exceptions_end+0xfe004fbc>
    74b8:	3009883a 	mov	r4,r6
    74bc:	d9400115 	stw	r5,4(sp)
    74c0:	d9800215 	stw	r6,8(sp)
    74c4:	da000415 	stw	r8,16(sp)
    74c8:	da400315 	stw	r9,12(sp)
    74cc:	0008f780 	call	8f78 <__clzsi2>
    74d0:	10800804 	addi	r2,r2,32
    74d4:	da400317 	ldw	r9,12(sp)
    74d8:	da000417 	ldw	r8,16(sp)
    74dc:	d9800217 	ldw	r6,8(sp)
    74e0:	d9400117 	ldw	r5,4(sp)
    74e4:	003eb306 	br	6fb4 <__ram_exceptions_end+0xfe004f94>
    74e8:	d9800017 	ldw	r6,0(sp)
    74ec:	a9ab883a 	add	r21,r21,r6
    74f0:	a98b803a 	cmpltu	r5,r21,r6
    74f4:	2d8b883a 	add	r5,r5,r22
    74f8:	2a11883a 	add	r8,r5,r8
    74fc:	897fffc4 	addi	r5,r17,-1
    7500:	b2000c2e 	bgeu	r22,r8,7534 <__divdf3+0x808>
    7504:	41003f36 	bltu	r8,r4,7604 <__divdf3+0x8d8>
    7508:	22006c26 	beq	r4,r8,76bc <__divdf3+0x990>
    750c:	4109c83a 	sub	r4,r8,r4
    7510:	2823883a 	mov	r17,r5
    7514:	003f3b06 	br	7204 <__ram_exceptions_end+0xfe0051e4>
    7518:	ad3ed336 	bltu	r21,r20,7068 <__ram_exceptions_end+0xfe005048>
    751c:	a804d07a 	srli	r2,r21,1
    7520:	802e97fa 	slli	r23,r16,31
    7524:	a82a97fa 	slli	r21,r21,31
    7528:	8020d07a 	srli	r16,r16,1
    752c:	b8aeb03a 	or	r23,r23,r2
    7530:	003ed006 	br	7074 <__ram_exceptions_end+0xfe005054>
    7534:	b23ff51e 	bne	r22,r8,750c <__ram_exceptions_end+0xfe0054ec>
    7538:	d9800017 	ldw	r6,0(sp)
    753c:	a9bff12e 	bgeu	r21,r6,7504 <__ram_exceptions_end+0xfe0054e4>
    7540:	b109c83a 	sub	r4,r22,r4
    7544:	2823883a 	mov	r17,r5
    7548:	003f2e06 	br	7204 <__ram_exceptions_end+0xfe0051e4>
    754c:	2021883a 	mov	r16,r4
    7550:	003eff06 	br	7150 <__ram_exceptions_end+0xfe005130>
    7554:	2023883a 	mov	r17,r4
    7558:	003ee406 	br	70ec <__ram_exceptions_end+0xfe0050cc>
    755c:	a8bfe236 	bltu	r21,r2,74e8 <__ram_exceptions_end+0xfe0054c8>
    7560:	0009883a 	mov	r4,zero
    7564:	003f2706 	br	7204 <__ram_exceptions_end+0xfe0051e4>
    7568:	81002d36 	bltu	r16,r4,7620 <__divdf3+0x8f4>
    756c:	24005626 	beq	r4,r16,76c8 <__divdf3+0x99c>
    7570:	2829883a 	mov	r20,r5
    7574:	003f8006 	br	7378 <__ram_exceptions_end+0xfe005358>
    7578:	053fffc4 	movi	r20,-1
    757c:	003f7f06 	br	737c <__ram_exceptions_end+0xfe00535c>
    7580:	200f883a 	mov	r7,r4
    7584:	003f3c06 	br	7278 <__ram_exceptions_end+0xfe005258>
    7588:	1011883a 	mov	r8,r2
    758c:	003f5506 	br	72e4 <__ram_exceptions_end+0xfe0052c4>
    7590:	e027883a 	mov	r19,fp
    7594:	003f7906 	br	737c <__ram_exceptions_end+0xfe00535c>
    7598:	010007c4 	movi	r4,31
    759c:	20c02816 	blt	r4,r3,7640 <__divdf3+0x914>
    75a0:	00800804 	movi	r2,32
    75a4:	10c5c83a 	sub	r2,r2,r3
    75a8:	888a983a 	sll	r5,r17,r2
    75ac:	a0c8d83a 	srl	r4,r20,r3
    75b0:	a084983a 	sll	r2,r20,r2
    75b4:	88e2d83a 	srl	r17,r17,r3
    75b8:	2906b03a 	or	r3,r5,r4
    75bc:	1004c03a 	cmpne	r2,r2,zero
    75c0:	1886b03a 	or	r3,r3,r2
    75c4:	188001cc 	andi	r2,r3,7
    75c8:	10000726 	beq	r2,zero,75e8 <__divdf3+0x8bc>
    75cc:	188003cc 	andi	r2,r3,15
    75d0:	01000104 	movi	r4,4
    75d4:	11000426 	beq	r2,r4,75e8 <__divdf3+0x8bc>
    75d8:	1805883a 	mov	r2,r3
    75dc:	10c00104 	addi	r3,r2,4
    75e0:	1885803a 	cmpltu	r2,r3,r2
    75e4:	88a3883a 	add	r17,r17,r2
    75e8:	8880202c 	andhi	r2,r17,128
    75ec:	10002926 	beq	r2,zero,7694 <__divdf3+0x968>
    75f0:	9900004c 	andi	r4,r19,1
    75f4:	00800044 	movi	r2,1
    75f8:	0021883a 	mov	r16,zero
    75fc:	002b883a 	mov	r21,zero
    7600:	003e2906 	br	6ea8 <__ram_exceptions_end+0xfe004e88>
    7604:	d9800017 	ldw	r6,0(sp)
    7608:	8c7fff84 	addi	r17,r17,-2
    760c:	a9ab883a 	add	r21,r21,r6
    7610:	a98b803a 	cmpltu	r5,r21,r6
    7614:	2d8b883a 	add	r5,r5,r22
    7618:	2a11883a 	add	r8,r5,r8
    761c:	003ef806 	br	7200 <__ram_exceptions_end+0xfe0051e0>
    7620:	d9800017 	ldw	r6,0(sp)
    7624:	318f883a 	add	r7,r6,r6
    7628:	398b803a 	cmpltu	r5,r7,r6
    762c:	2d8d883a 	add	r6,r5,r22
    7630:	81a1883a 	add	r16,r16,r6
    7634:	a17fff84 	addi	r5,r20,-2
    7638:	d9c00015 	stw	r7,0(sp)
    763c:	003f8806 	br	7460 <__ram_exceptions_end+0xfe005440>
    7640:	013ff844 	movi	r4,-31
    7644:	2085c83a 	sub	r2,r4,r2
    7648:	8888d83a 	srl	r4,r17,r2
    764c:	00800804 	movi	r2,32
    7650:	18802126 	beq	r3,r2,76d8 <__divdf3+0x9ac>
    7654:	04001004 	movi	r16,64
    7658:	80c7c83a 	sub	r3,r16,r3
    765c:	88e0983a 	sll	r16,r17,r3
    7660:	8504b03a 	or	r2,r16,r20
    7664:	1004c03a 	cmpne	r2,r2,zero
    7668:	2084b03a 	or	r2,r4,r2
    766c:	144001cc 	andi	r17,r2,7
    7670:	88000d1e 	bne	r17,zero,76a8 <__divdf3+0x97c>
    7674:	0021883a 	mov	r16,zero
    7678:	102ad0fa 	srli	r21,r2,3
    767c:	9900004c 	andi	r4,r19,1
    7680:	0005883a 	mov	r2,zero
    7684:	ac6ab03a 	or	r21,r21,r17
    7688:	003e0706 	br	6ea8 <__ram_exceptions_end+0xfe004e88>
    768c:	1007883a 	mov	r3,r2
    7690:	0023883a 	mov	r17,zero
    7694:	8820927a 	slli	r16,r17,9
    7698:	1805883a 	mov	r2,r3
    769c:	8822977a 	slli	r17,r17,29
    76a0:	8020d33a 	srli	r16,r16,12
    76a4:	003ff406 	br	7678 <__ram_exceptions_end+0xfe005658>
    76a8:	10c003cc 	andi	r3,r2,15
    76ac:	01000104 	movi	r4,4
    76b0:	193ff626 	beq	r3,r4,768c <__ram_exceptions_end+0xfe00566c>
    76b4:	0023883a 	mov	r17,zero
    76b8:	003fc806 	br	75dc <__ram_exceptions_end+0xfe0055bc>
    76bc:	a8bfd136 	bltu	r21,r2,7604 <__ram_exceptions_end+0xfe0055e4>
    76c0:	2823883a 	mov	r17,r5
    76c4:	003fa606 	br	7560 <__ram_exceptions_end+0xfe005540>
    76c8:	d9800017 	ldw	r6,0(sp)
    76cc:	30bfd436 	bltu	r6,r2,7620 <__ram_exceptions_end+0xfe005600>
    76d0:	2829883a 	mov	r20,r5
    76d4:	003f6406 	br	7468 <__ram_exceptions_end+0xfe005448>
    76d8:	0021883a 	mov	r16,zero
    76dc:	003fe006 	br	7660 <__ram_exceptions_end+0xfe005640>
    76e0:	00800434 	movhi	r2,16
    76e4:	8c000234 	orhi	r16,r17,8
    76e8:	10bfffc4 	addi	r2,r2,-1
    76ec:	e009883a 	mov	r4,fp
    76f0:	80a0703a 	and	r16,r16,r2
    76f4:	a02b883a 	mov	r21,r20
    76f8:	003e4e06 	br	7034 <__ram_exceptions_end+0xfe005014>

000076fc <__eqdf2>:
    76fc:	2804d53a 	srli	r2,r5,20
    7700:	3806d53a 	srli	r3,r7,20
    7704:	02000434 	movhi	r8,16
    7708:	423fffc4 	addi	r8,r8,-1
    770c:	1081ffcc 	andi	r2,r2,2047
    7710:	0281ffc4 	movi	r10,2047
    7714:	2a12703a 	and	r9,r5,r8
    7718:	18c1ffcc 	andi	r3,r3,2047
    771c:	3a10703a 	and	r8,r7,r8
    7720:	280ad7fa 	srli	r5,r5,31
    7724:	380ed7fa 	srli	r7,r7,31
    7728:	12801026 	beq	r2,r10,776c <__eqdf2+0x70>
    772c:	0281ffc4 	movi	r10,2047
    7730:	1a800a26 	beq	r3,r10,775c <__eqdf2+0x60>
    7734:	10c00226 	beq	r2,r3,7740 <__eqdf2+0x44>
    7738:	00800044 	movi	r2,1
    773c:	f800283a 	ret
    7740:	4a3ffd1e 	bne	r9,r8,7738 <__ram_exceptions_end+0xfe005718>
    7744:	21bffc1e 	bne	r4,r6,7738 <__ram_exceptions_end+0xfe005718>
    7748:	29c00c26 	beq	r5,r7,777c <__eqdf2+0x80>
    774c:	103ffa1e 	bne	r2,zero,7738 <__ram_exceptions_end+0xfe005718>
    7750:	2244b03a 	or	r2,r4,r9
    7754:	1004c03a 	cmpne	r2,r2,zero
    7758:	f800283a 	ret
    775c:	3214b03a 	or	r10,r6,r8
    7760:	503ff426 	beq	r10,zero,7734 <__ram_exceptions_end+0xfe005714>
    7764:	00800044 	movi	r2,1
    7768:	f800283a 	ret
    776c:	2254b03a 	or	r10,r4,r9
    7770:	503fee26 	beq	r10,zero,772c <__ram_exceptions_end+0xfe00570c>
    7774:	00800044 	movi	r2,1
    7778:	f800283a 	ret
    777c:	0005883a 	mov	r2,zero
    7780:	f800283a 	ret

00007784 <__gedf2>:
    7784:	2804d53a 	srli	r2,r5,20
    7788:	3806d53a 	srli	r3,r7,20
    778c:	02000434 	movhi	r8,16
    7790:	423fffc4 	addi	r8,r8,-1
    7794:	1081ffcc 	andi	r2,r2,2047
    7798:	0241ffc4 	movi	r9,2047
    779c:	2a14703a 	and	r10,r5,r8
    77a0:	18c1ffcc 	andi	r3,r3,2047
    77a4:	3a10703a 	and	r8,r7,r8
    77a8:	280ad7fa 	srli	r5,r5,31
    77ac:	380ed7fa 	srli	r7,r7,31
    77b0:	12401d26 	beq	r2,r9,7828 <__gedf2+0xa4>
    77b4:	0241ffc4 	movi	r9,2047
    77b8:	1a401226 	beq	r3,r9,7804 <__gedf2+0x80>
    77bc:	1000081e 	bne	r2,zero,77e0 <__gedf2+0x5c>
    77c0:	2296b03a 	or	r11,r4,r10
    77c4:	5813003a 	cmpeq	r9,r11,zero
    77c8:	1800091e 	bne	r3,zero,77f0 <__gedf2+0x6c>
    77cc:	3218b03a 	or	r12,r6,r8
    77d0:	6000071e 	bne	r12,zero,77f0 <__gedf2+0x6c>
    77d4:	0005883a 	mov	r2,zero
    77d8:	5800101e 	bne	r11,zero,781c <__gedf2+0x98>
    77dc:	f800283a 	ret
    77e0:	18000c1e 	bne	r3,zero,7814 <__gedf2+0x90>
    77e4:	3212b03a 	or	r9,r6,r8
    77e8:	48000c26 	beq	r9,zero,781c <__gedf2+0x98>
    77ec:	0013883a 	mov	r9,zero
    77f0:	39c03fcc 	andi	r7,r7,255
    77f4:	48000826 	beq	r9,zero,7818 <__gedf2+0x94>
    77f8:	38000926 	beq	r7,zero,7820 <__gedf2+0x9c>
    77fc:	00800044 	movi	r2,1
    7800:	f800283a 	ret
    7804:	3212b03a 	or	r9,r6,r8
    7808:	483fec26 	beq	r9,zero,77bc <__ram_exceptions_end+0xfe00579c>
    780c:	00bfff84 	movi	r2,-2
    7810:	f800283a 	ret
    7814:	39c03fcc 	andi	r7,r7,255
    7818:	29c00626 	beq	r5,r7,7834 <__gedf2+0xb0>
    781c:	283ff726 	beq	r5,zero,77fc <__ram_exceptions_end+0xfe0057dc>
    7820:	00bfffc4 	movi	r2,-1
    7824:	f800283a 	ret
    7828:	2292b03a 	or	r9,r4,r10
    782c:	483fe126 	beq	r9,zero,77b4 <__ram_exceptions_end+0xfe005794>
    7830:	003ff606 	br	780c <__ram_exceptions_end+0xfe0057ec>
    7834:	18bff916 	blt	r3,r2,781c <__ram_exceptions_end+0xfe0057fc>
    7838:	10c00316 	blt	r2,r3,7848 <__gedf2+0xc4>
    783c:	42bff736 	bltu	r8,r10,781c <__ram_exceptions_end+0xfe0057fc>
    7840:	52000326 	beq	r10,r8,7850 <__gedf2+0xcc>
    7844:	5200042e 	bgeu	r10,r8,7858 <__gedf2+0xd4>
    7848:	283fec1e 	bne	r5,zero,77fc <__ram_exceptions_end+0xfe0057dc>
    784c:	003ff406 	br	7820 <__ram_exceptions_end+0xfe005800>
    7850:	313ff236 	bltu	r6,r4,781c <__ram_exceptions_end+0xfe0057fc>
    7854:	21bffc36 	bltu	r4,r6,7848 <__ram_exceptions_end+0xfe005828>
    7858:	0005883a 	mov	r2,zero
    785c:	f800283a 	ret

00007860 <__ledf2>:
    7860:	2804d53a 	srli	r2,r5,20
    7864:	3810d53a 	srli	r8,r7,20
    7868:	00c00434 	movhi	r3,16
    786c:	18ffffc4 	addi	r3,r3,-1
    7870:	1081ffcc 	andi	r2,r2,2047
    7874:	0241ffc4 	movi	r9,2047
    7878:	28d4703a 	and	r10,r5,r3
    787c:	4201ffcc 	andi	r8,r8,2047
    7880:	38c6703a 	and	r3,r7,r3
    7884:	280ad7fa 	srli	r5,r5,31
    7888:	380ed7fa 	srli	r7,r7,31
    788c:	12401f26 	beq	r2,r9,790c <__ledf2+0xac>
    7890:	0241ffc4 	movi	r9,2047
    7894:	42401426 	beq	r8,r9,78e8 <__ledf2+0x88>
    7898:	1000091e 	bne	r2,zero,78c0 <__ledf2+0x60>
    789c:	2296b03a 	or	r11,r4,r10
    78a0:	5813003a 	cmpeq	r9,r11,zero
    78a4:	29403fcc 	andi	r5,r5,255
    78a8:	40000a1e 	bne	r8,zero,78d4 <__ledf2+0x74>
    78ac:	30d8b03a 	or	r12,r6,r3
    78b0:	6000081e 	bne	r12,zero,78d4 <__ledf2+0x74>
    78b4:	0005883a 	mov	r2,zero
    78b8:	5800111e 	bne	r11,zero,7900 <__ledf2+0xa0>
    78bc:	f800283a 	ret
    78c0:	29403fcc 	andi	r5,r5,255
    78c4:	40000c1e 	bne	r8,zero,78f8 <__ledf2+0x98>
    78c8:	30d2b03a 	or	r9,r6,r3
    78cc:	48000c26 	beq	r9,zero,7900 <__ledf2+0xa0>
    78d0:	0013883a 	mov	r9,zero
    78d4:	39c03fcc 	andi	r7,r7,255
    78d8:	48000826 	beq	r9,zero,78fc <__ledf2+0x9c>
    78dc:	38001126 	beq	r7,zero,7924 <__ledf2+0xc4>
    78e0:	00800044 	movi	r2,1
    78e4:	f800283a 	ret
    78e8:	30d2b03a 	or	r9,r6,r3
    78ec:	483fea26 	beq	r9,zero,7898 <__ram_exceptions_end+0xfe005878>
    78f0:	00800084 	movi	r2,2
    78f4:	f800283a 	ret
    78f8:	39c03fcc 	andi	r7,r7,255
    78fc:	39400726 	beq	r7,r5,791c <__ledf2+0xbc>
    7900:	2800081e 	bne	r5,zero,7924 <__ledf2+0xc4>
    7904:	00800044 	movi	r2,1
    7908:	f800283a 	ret
    790c:	2292b03a 	or	r9,r4,r10
    7910:	483fdf26 	beq	r9,zero,7890 <__ram_exceptions_end+0xfe005870>
    7914:	00800084 	movi	r2,2
    7918:	f800283a 	ret
    791c:	4080030e 	bge	r8,r2,792c <__ledf2+0xcc>
    7920:	383fef26 	beq	r7,zero,78e0 <__ram_exceptions_end+0xfe0058c0>
    7924:	00bfffc4 	movi	r2,-1
    7928:	f800283a 	ret
    792c:	123feb16 	blt	r2,r8,78dc <__ram_exceptions_end+0xfe0058bc>
    7930:	1abff336 	bltu	r3,r10,7900 <__ram_exceptions_end+0xfe0058e0>
    7934:	50c00326 	beq	r10,r3,7944 <__ledf2+0xe4>
    7938:	50c0042e 	bgeu	r10,r3,794c <__ledf2+0xec>
    793c:	283fe81e 	bne	r5,zero,78e0 <__ram_exceptions_end+0xfe0058c0>
    7940:	003ff806 	br	7924 <__ram_exceptions_end+0xfe005904>
    7944:	313fee36 	bltu	r6,r4,7900 <__ram_exceptions_end+0xfe0058e0>
    7948:	21bffc36 	bltu	r4,r6,793c <__ram_exceptions_end+0xfe00591c>
    794c:	0005883a 	mov	r2,zero
    7950:	f800283a 	ret

00007954 <__muldf3>:
    7954:	deffee04 	addi	sp,sp,-72
    7958:	dd000c15 	stw	r20,48(sp)
    795c:	2828d53a 	srli	r20,r5,20
    7960:	ddc00f15 	stw	r23,60(sp)
    7964:	282ed7fa 	srli	r23,r5,31
    7968:	dc000815 	stw	r16,32(sp)
    796c:	04000434 	movhi	r16,16
    7970:	dcc00b15 	stw	r19,44(sp)
    7974:	843fffc4 	addi	r16,r16,-1
    7978:	dfc01115 	stw	ra,68(sp)
    797c:	df001015 	stw	fp,64(sp)
    7980:	dd800e15 	stw	r22,56(sp)
    7984:	dd400d15 	stw	r21,52(sp)
    7988:	dc800a15 	stw	r18,40(sp)
    798c:	dc400915 	stw	r17,36(sp)
    7990:	a501ffcc 	andi	r20,r20,2047
    7994:	2c20703a 	and	r16,r5,r16
    7998:	b827883a 	mov	r19,r23
    799c:	ba403fcc 	andi	r9,r23,255
    79a0:	a0006026 	beq	r20,zero,7b24 <__muldf3+0x1d0>
    79a4:	0081ffc4 	movi	r2,2047
    79a8:	202d883a 	mov	r22,r4
    79ac:	a0803626 	beq	r20,r2,7a88 <__muldf3+0x134>
    79b0:	84000434 	orhi	r16,r16,16
    79b4:	200ad77a 	srli	r5,r4,29
    79b8:	800490fa 	slli	r2,r16,3
    79bc:	202c90fa 	slli	r22,r4,3
    79c0:	a53f0044 	addi	r20,r20,-1023
    79c4:	28a0b03a 	or	r16,r5,r2
    79c8:	002b883a 	mov	r21,zero
    79cc:	000b883a 	mov	r5,zero
    79d0:	3804d53a 	srli	r2,r7,20
    79d4:	3838d7fa 	srli	fp,r7,31
    79d8:	04400434 	movhi	r17,16
    79dc:	8c7fffc4 	addi	r17,r17,-1
    79e0:	1081ffcc 	andi	r2,r2,2047
    79e4:	3025883a 	mov	r18,r6
    79e8:	3c62703a 	and	r17,r7,r17
    79ec:	e2803fcc 	andi	r10,fp,255
    79f0:	10006d26 	beq	r2,zero,7ba8 <__muldf3+0x254>
    79f4:	00c1ffc4 	movi	r3,2047
    79f8:	10c06526 	beq	r2,r3,7b90 <__muldf3+0x23c>
    79fc:	8c400434 	orhi	r17,r17,16
    7a00:	300ed77a 	srli	r7,r6,29
    7a04:	880690fa 	slli	r3,r17,3
    7a08:	302490fa 	slli	r18,r6,3
    7a0c:	10bf0044 	addi	r2,r2,-1023
    7a10:	38e2b03a 	or	r17,r7,r3
    7a14:	000f883a 	mov	r7,zero
    7a18:	a087883a 	add	r3,r20,r2
    7a1c:	010003c4 	movi	r4,15
    7a20:	3d44b03a 	or	r2,r7,r21
    7a24:	e5ccf03a 	xor	r6,fp,r23
    7a28:	1a000044 	addi	r8,r3,1
    7a2c:	20809b36 	bltu	r4,r2,7c9c <__muldf3+0x348>
    7a30:	100490ba 	slli	r2,r2,2
    7a34:	01000034 	movhi	r4,0
    7a38:	211e9204 	addi	r4,r4,31304
    7a3c:	1105883a 	add	r2,r2,r4
    7a40:	10800017 	ldw	r2,0(r2)
    7a44:	1000683a 	jmp	r2
    7a48:	00007c9c 	xori	zero,zero,498
    7a4c:	00007aa8 	cmpgeui	zero,zero,490
    7a50:	00007aa8 	cmpgeui	zero,zero,490
    7a54:	00007aa4 	muli	zero,zero,490
    7a58:	00007c78 	rdprs	zero,zero,497
    7a5c:	00007c78 	rdprs	zero,zero,497
    7a60:	00007c60 	cmpeqi	zero,zero,497
    7a64:	00007aa4 	muli	zero,zero,490
    7a68:	00007c78 	rdprs	zero,zero,497
    7a6c:	00007c60 	cmpeqi	zero,zero,497
    7a70:	00007c78 	rdprs	zero,zero,497
    7a74:	00007aa4 	muli	zero,zero,490
    7a78:	00007c88 	cmpgei	zero,zero,498
    7a7c:	00007c88 	cmpgei	zero,zero,498
    7a80:	00007c88 	cmpgei	zero,zero,498
    7a84:	00007fe8 	cmpgeui	zero,zero,511
    7a88:	2404b03a 	or	r2,r4,r16
    7a8c:	1000711e 	bne	r2,zero,7c54 <__muldf3+0x300>
    7a90:	05400204 	movi	r21,8
    7a94:	0021883a 	mov	r16,zero
    7a98:	002d883a 	mov	r22,zero
    7a9c:	01400084 	movi	r5,2
    7aa0:	003fcb06 	br	79d0 <__ram_exceptions_end+0xfe0059b0>
    7aa4:	500d883a 	mov	r6,r10
    7aa8:	00800084 	movi	r2,2
    7aac:	38805926 	beq	r7,r2,7c14 <__muldf3+0x2c0>
    7ab0:	008000c4 	movi	r2,3
    7ab4:	3881bb26 	beq	r7,r2,81a4 <__muldf3+0x850>
    7ab8:	00800044 	movi	r2,1
    7abc:	3881961e 	bne	r7,r2,8118 <__muldf3+0x7c4>
    7ac0:	3027883a 	mov	r19,r6
    7ac4:	0005883a 	mov	r2,zero
    7ac8:	0021883a 	mov	r16,zero
    7acc:	002d883a 	mov	r22,zero
    7ad0:	1004953a 	slli	r2,r2,20
    7ad4:	98c03fcc 	andi	r3,r19,255
    7ad8:	04400434 	movhi	r17,16
    7adc:	8c7fffc4 	addi	r17,r17,-1
    7ae0:	180697fa 	slli	r3,r3,31
    7ae4:	8460703a 	and	r16,r16,r17
    7ae8:	80a0b03a 	or	r16,r16,r2
    7aec:	80c6b03a 	or	r3,r16,r3
    7af0:	b005883a 	mov	r2,r22
    7af4:	dfc01117 	ldw	ra,68(sp)
    7af8:	df001017 	ldw	fp,64(sp)
    7afc:	ddc00f17 	ldw	r23,60(sp)
    7b00:	dd800e17 	ldw	r22,56(sp)
    7b04:	dd400d17 	ldw	r21,52(sp)
    7b08:	dd000c17 	ldw	r20,48(sp)
    7b0c:	dcc00b17 	ldw	r19,44(sp)
    7b10:	dc800a17 	ldw	r18,40(sp)
    7b14:	dc400917 	ldw	r17,36(sp)
    7b18:	dc000817 	ldw	r16,32(sp)
    7b1c:	dec01204 	addi	sp,sp,72
    7b20:	f800283a 	ret
    7b24:	2404b03a 	or	r2,r4,r16
    7b28:	202b883a 	mov	r21,r4
    7b2c:	10004426 	beq	r2,zero,7c40 <__muldf3+0x2ec>
    7b30:	80015126 	beq	r16,zero,8078 <__muldf3+0x724>
    7b34:	8009883a 	mov	r4,r16
    7b38:	d9800715 	stw	r6,28(sp)
    7b3c:	d9c00215 	stw	r7,8(sp)
    7b40:	da400415 	stw	r9,16(sp)
    7b44:	0008f780 	call	8f78 <__clzsi2>
    7b48:	d9800717 	ldw	r6,28(sp)
    7b4c:	d9c00217 	ldw	r7,8(sp)
    7b50:	da400417 	ldw	r9,16(sp)
    7b54:	113ffd44 	addi	r4,r2,-11
    7b58:	00c00704 	movi	r3,28
    7b5c:	19014216 	blt	r3,r4,8068 <__muldf3+0x714>
    7b60:	00c00744 	movi	r3,29
    7b64:	15bffe04 	addi	r22,r2,-8
    7b68:	1907c83a 	sub	r3,r3,r4
    7b6c:	85a0983a 	sll	r16,r16,r22
    7b70:	a8c6d83a 	srl	r3,r21,r3
    7b74:	adac983a 	sll	r22,r21,r22
    7b78:	1c20b03a 	or	r16,r3,r16
    7b7c:	1080fcc4 	addi	r2,r2,1011
    7b80:	00a9c83a 	sub	r20,zero,r2
    7b84:	002b883a 	mov	r21,zero
    7b88:	000b883a 	mov	r5,zero
    7b8c:	003f9006 	br	79d0 <__ram_exceptions_end+0xfe0059b0>
    7b90:	3446b03a 	or	r3,r6,r17
    7b94:	1800281e 	bne	r3,zero,7c38 <__muldf3+0x2e4>
    7b98:	0023883a 	mov	r17,zero
    7b9c:	0025883a 	mov	r18,zero
    7ba0:	01c00084 	movi	r7,2
    7ba4:	003f9c06 	br	7a18 <__ram_exceptions_end+0xfe0059f8>
    7ba8:	3446b03a 	or	r3,r6,r17
    7bac:	18001e26 	beq	r3,zero,7c28 <__muldf3+0x2d4>
    7bb0:	88012126 	beq	r17,zero,8038 <__muldf3+0x6e4>
    7bb4:	8809883a 	mov	r4,r17
    7bb8:	d9400215 	stw	r5,8(sp)
    7bbc:	d9800715 	stw	r6,28(sp)
    7bc0:	da400415 	stw	r9,16(sp)
    7bc4:	da800315 	stw	r10,12(sp)
    7bc8:	0008f780 	call	8f78 <__clzsi2>
    7bcc:	d9400217 	ldw	r5,8(sp)
    7bd0:	d9800717 	ldw	r6,28(sp)
    7bd4:	da400417 	ldw	r9,16(sp)
    7bd8:	da800317 	ldw	r10,12(sp)
    7bdc:	113ffd44 	addi	r4,r2,-11
    7be0:	00c00704 	movi	r3,28
    7be4:	19011016 	blt	r3,r4,8028 <__muldf3+0x6d4>
    7be8:	00c00744 	movi	r3,29
    7bec:	14bffe04 	addi	r18,r2,-8
    7bf0:	1907c83a 	sub	r3,r3,r4
    7bf4:	8ca2983a 	sll	r17,r17,r18
    7bf8:	30c6d83a 	srl	r3,r6,r3
    7bfc:	34a4983a 	sll	r18,r6,r18
    7c00:	1c62b03a 	or	r17,r3,r17
    7c04:	1080fcc4 	addi	r2,r2,1011
    7c08:	0085c83a 	sub	r2,zero,r2
    7c0c:	000f883a 	mov	r7,zero
    7c10:	003f8106 	br	7a18 <__ram_exceptions_end+0xfe0059f8>
    7c14:	3027883a 	mov	r19,r6
    7c18:	0081ffc4 	movi	r2,2047
    7c1c:	0021883a 	mov	r16,zero
    7c20:	002d883a 	mov	r22,zero
    7c24:	003faa06 	br	7ad0 <__ram_exceptions_end+0xfe005ab0>
    7c28:	0023883a 	mov	r17,zero
    7c2c:	0025883a 	mov	r18,zero
    7c30:	01c00044 	movi	r7,1
    7c34:	003f7806 	br	7a18 <__ram_exceptions_end+0xfe0059f8>
    7c38:	01c000c4 	movi	r7,3
    7c3c:	003f7606 	br	7a18 <__ram_exceptions_end+0xfe0059f8>
    7c40:	05400104 	movi	r21,4
    7c44:	0021883a 	mov	r16,zero
    7c48:	002d883a 	mov	r22,zero
    7c4c:	01400044 	movi	r5,1
    7c50:	003f5f06 	br	79d0 <__ram_exceptions_end+0xfe0059b0>
    7c54:	05400304 	movi	r21,12
    7c58:	014000c4 	movi	r5,3
    7c5c:	003f5c06 	br	79d0 <__ram_exceptions_end+0xfe0059b0>
    7c60:	04000434 	movhi	r16,16
    7c64:	0027883a 	mov	r19,zero
    7c68:	843fffc4 	addi	r16,r16,-1
    7c6c:	05bfffc4 	movi	r22,-1
    7c70:	0081ffc4 	movi	r2,2047
    7c74:	003f9606 	br	7ad0 <__ram_exceptions_end+0xfe005ab0>
    7c78:	8023883a 	mov	r17,r16
    7c7c:	b025883a 	mov	r18,r22
    7c80:	280f883a 	mov	r7,r5
    7c84:	003f8806 	br	7aa8 <__ram_exceptions_end+0xfe005a88>
    7c88:	8023883a 	mov	r17,r16
    7c8c:	b025883a 	mov	r18,r22
    7c90:	480d883a 	mov	r6,r9
    7c94:	280f883a 	mov	r7,r5
    7c98:	003f8306 	br	7aa8 <__ram_exceptions_end+0xfe005a88>
    7c9c:	b026d43a 	srli	r19,r22,16
    7ca0:	902ed43a 	srli	r23,r18,16
    7ca4:	b5bfffcc 	andi	r22,r22,65535
    7ca8:	94bfffcc 	andi	r18,r18,65535
    7cac:	b00b883a 	mov	r5,r22
    7cb0:	9009883a 	mov	r4,r18
    7cb4:	d8c00515 	stw	r3,20(sp)
    7cb8:	d9800715 	stw	r6,28(sp)
    7cbc:	da000615 	stw	r8,24(sp)
    7cc0:	0004dbc0 	call	4dbc <__mulsi3>
    7cc4:	980b883a 	mov	r5,r19
    7cc8:	9009883a 	mov	r4,r18
    7ccc:	1029883a 	mov	r20,r2
    7cd0:	0004dbc0 	call	4dbc <__mulsi3>
    7cd4:	b80b883a 	mov	r5,r23
    7cd8:	9809883a 	mov	r4,r19
    7cdc:	102b883a 	mov	r21,r2
    7ce0:	0004dbc0 	call	4dbc <__mulsi3>
    7ce4:	b809883a 	mov	r4,r23
    7ce8:	b00b883a 	mov	r5,r22
    7cec:	1039883a 	mov	fp,r2
    7cf0:	0004dbc0 	call	4dbc <__mulsi3>
    7cf4:	a008d43a 	srli	r4,r20,16
    7cf8:	1545883a 	add	r2,r2,r21
    7cfc:	d8c00517 	ldw	r3,20(sp)
    7d00:	2085883a 	add	r2,r4,r2
    7d04:	d9800717 	ldw	r6,28(sp)
    7d08:	da000617 	ldw	r8,24(sp)
    7d0c:	1540022e 	bgeu	r2,r21,7d18 <__muldf3+0x3c4>
    7d10:	01000074 	movhi	r4,1
    7d14:	e139883a 	add	fp,fp,r4
    7d18:	100e943a 	slli	r7,r2,16
    7d1c:	1004d43a 	srli	r2,r2,16
    7d20:	882ad43a 	srli	r21,r17,16
    7d24:	a53fffcc 	andi	r20,r20,65535
    7d28:	8c7fffcc 	andi	r17,r17,65535
    7d2c:	3d29883a 	add	r20,r7,r20
    7d30:	b00b883a 	mov	r5,r22
    7d34:	8809883a 	mov	r4,r17
    7d38:	d8c00515 	stw	r3,20(sp)
    7d3c:	d9800715 	stw	r6,28(sp)
    7d40:	da000615 	stw	r8,24(sp)
    7d44:	dd000115 	stw	r20,4(sp)
    7d48:	d8800015 	stw	r2,0(sp)
    7d4c:	0004dbc0 	call	4dbc <__mulsi3>
    7d50:	980b883a 	mov	r5,r19
    7d54:	8809883a 	mov	r4,r17
    7d58:	d8800215 	stw	r2,8(sp)
    7d5c:	0004dbc0 	call	4dbc <__mulsi3>
    7d60:	9809883a 	mov	r4,r19
    7d64:	a80b883a 	mov	r5,r21
    7d68:	1029883a 	mov	r20,r2
    7d6c:	0004dbc0 	call	4dbc <__mulsi3>
    7d70:	b00b883a 	mov	r5,r22
    7d74:	a809883a 	mov	r4,r21
    7d78:	d8800415 	stw	r2,16(sp)
    7d7c:	0004dbc0 	call	4dbc <__mulsi3>
    7d80:	d9c00217 	ldw	r7,8(sp)
    7d84:	1505883a 	add	r2,r2,r20
    7d88:	d8c00517 	ldw	r3,20(sp)
    7d8c:	3826d43a 	srli	r19,r7,16
    7d90:	d9800717 	ldw	r6,28(sp)
    7d94:	da000617 	ldw	r8,24(sp)
    7d98:	9885883a 	add	r2,r19,r2
    7d9c:	da400417 	ldw	r9,16(sp)
    7da0:	1500022e 	bgeu	r2,r20,7dac <__muldf3+0x458>
    7da4:	01000074 	movhi	r4,1
    7da8:	4913883a 	add	r9,r9,r4
    7dac:	1028d43a 	srli	r20,r2,16
    7db0:	1004943a 	slli	r2,r2,16
    7db4:	802cd43a 	srli	r22,r16,16
    7db8:	843fffcc 	andi	r16,r16,65535
    7dbc:	3cffffcc 	andi	r19,r7,65535
    7dc0:	9009883a 	mov	r4,r18
    7dc4:	800b883a 	mov	r5,r16
    7dc8:	a269883a 	add	r20,r20,r9
    7dcc:	d8c00515 	stw	r3,20(sp)
    7dd0:	d9800715 	stw	r6,28(sp)
    7dd4:	da000615 	stw	r8,24(sp)
    7dd8:	14e7883a 	add	r19,r2,r19
    7ddc:	0004dbc0 	call	4dbc <__mulsi3>
    7de0:	9009883a 	mov	r4,r18
    7de4:	b00b883a 	mov	r5,r22
    7de8:	d8800315 	stw	r2,12(sp)
    7dec:	0004dbc0 	call	4dbc <__mulsi3>
    7df0:	b809883a 	mov	r4,r23
    7df4:	b00b883a 	mov	r5,r22
    7df8:	d8800215 	stw	r2,8(sp)
    7dfc:	0004dbc0 	call	4dbc <__mulsi3>
    7e00:	b80b883a 	mov	r5,r23
    7e04:	8009883a 	mov	r4,r16
    7e08:	d8800415 	stw	r2,16(sp)
    7e0c:	0004dbc0 	call	4dbc <__mulsi3>
    7e10:	da800317 	ldw	r10,12(sp)
    7e14:	d9c00217 	ldw	r7,8(sp)
    7e18:	d9000017 	ldw	r4,0(sp)
    7e1c:	502ed43a 	srli	r23,r10,16
    7e20:	11c5883a 	add	r2,r2,r7
    7e24:	24e5883a 	add	r18,r4,r19
    7e28:	b885883a 	add	r2,r23,r2
    7e2c:	d8c00517 	ldw	r3,20(sp)
    7e30:	d9800717 	ldw	r6,28(sp)
    7e34:	da000617 	ldw	r8,24(sp)
    7e38:	da400417 	ldw	r9,16(sp)
    7e3c:	11c0022e 	bgeu	r2,r7,7e48 <__muldf3+0x4f4>
    7e40:	01000074 	movhi	r4,1
    7e44:	4913883a 	add	r9,r9,r4
    7e48:	100ed43a 	srli	r7,r2,16
    7e4c:	1004943a 	slli	r2,r2,16
    7e50:	55ffffcc 	andi	r23,r10,65535
    7e54:	3a53883a 	add	r9,r7,r9
    7e58:	8809883a 	mov	r4,r17
    7e5c:	800b883a 	mov	r5,r16
    7e60:	d8c00515 	stw	r3,20(sp)
    7e64:	d9800715 	stw	r6,28(sp)
    7e68:	da000615 	stw	r8,24(sp)
    7e6c:	da400415 	stw	r9,16(sp)
    7e70:	15ef883a 	add	r23,r2,r23
    7e74:	0004dbc0 	call	4dbc <__mulsi3>
    7e78:	8809883a 	mov	r4,r17
    7e7c:	b00b883a 	mov	r5,r22
    7e80:	d8800215 	stw	r2,8(sp)
    7e84:	0004dbc0 	call	4dbc <__mulsi3>
    7e88:	b00b883a 	mov	r5,r22
    7e8c:	a809883a 	mov	r4,r21
    7e90:	d8800315 	stw	r2,12(sp)
    7e94:	0004dbc0 	call	4dbc <__mulsi3>
    7e98:	8009883a 	mov	r4,r16
    7e9c:	a80b883a 	mov	r5,r21
    7ea0:	1023883a 	mov	r17,r2
    7ea4:	0004dbc0 	call	4dbc <__mulsi3>
    7ea8:	d9c00217 	ldw	r7,8(sp)
    7eac:	da800317 	ldw	r10,12(sp)
    7eb0:	d8c00517 	ldw	r3,20(sp)
    7eb4:	3808d43a 	srli	r4,r7,16
    7eb8:	1285883a 	add	r2,r2,r10
    7ebc:	d9800717 	ldw	r6,28(sp)
    7ec0:	2085883a 	add	r2,r4,r2
    7ec4:	da000617 	ldw	r8,24(sp)
    7ec8:	da400417 	ldw	r9,16(sp)
    7ecc:	1280022e 	bgeu	r2,r10,7ed8 <__muldf3+0x584>
    7ed0:	01000074 	movhi	r4,1
    7ed4:	8923883a 	add	r17,r17,r4
    7ed8:	1008943a 	slli	r4,r2,16
    7edc:	39ffffcc 	andi	r7,r7,65535
    7ee0:	e4b9883a 	add	fp,fp,r18
    7ee4:	21cf883a 	add	r7,r4,r7
    7ee8:	e4e7803a 	cmpltu	r19,fp,r19
    7eec:	3d0f883a 	add	r7,r7,r20
    7ef0:	bf39883a 	add	fp,r23,fp
    7ef4:	99c9883a 	add	r4,r19,r7
    7ef8:	e5ef803a 	cmpltu	r23,fp,r23
    7efc:	490b883a 	add	r5,r9,r4
    7f00:	1004d43a 	srli	r2,r2,16
    7f04:	b965883a 	add	r18,r23,r5
    7f08:	24c9803a 	cmpltu	r4,r4,r19
    7f0c:	3d29803a 	cmpltu	r20,r7,r20
    7f10:	a128b03a 	or	r20,r20,r4
    7f14:	95ef803a 	cmpltu	r23,r18,r23
    7f18:	2a53803a 	cmpltu	r9,r5,r9
    7f1c:	a0a9883a 	add	r20,r20,r2
    7f20:	4deeb03a 	or	r23,r9,r23
    7f24:	a5ef883a 	add	r23,r20,r23
    7f28:	bc63883a 	add	r17,r23,r17
    7f2c:	e004927a 	slli	r2,fp,9
    7f30:	d9000117 	ldw	r4,4(sp)
    7f34:	882e927a 	slli	r23,r17,9
    7f38:	9022d5fa 	srli	r17,r18,23
    7f3c:	e038d5fa 	srli	fp,fp,23
    7f40:	1104b03a 	or	r2,r2,r4
    7f44:	9024927a 	slli	r18,r18,9
    7f48:	1004c03a 	cmpne	r2,r2,zero
    7f4c:	bc62b03a 	or	r17,r23,r17
    7f50:	1738b03a 	or	fp,r2,fp
    7f54:	8880402c 	andhi	r2,r17,256
    7f58:	e4a4b03a 	or	r18,fp,r18
    7f5c:	10000726 	beq	r2,zero,7f7c <__muldf3+0x628>
    7f60:	9006d07a 	srli	r3,r18,1
    7f64:	880497fa 	slli	r2,r17,31
    7f68:	9480004c 	andi	r18,r18,1
    7f6c:	8822d07a 	srli	r17,r17,1
    7f70:	1ca4b03a 	or	r18,r3,r18
    7f74:	14a4b03a 	or	r18,r2,r18
    7f78:	4007883a 	mov	r3,r8
    7f7c:	1880ffc4 	addi	r2,r3,1023
    7f80:	0080460e 	bge	zero,r2,809c <__muldf3+0x748>
    7f84:	910001cc 	andi	r4,r18,7
    7f88:	20000726 	beq	r4,zero,7fa8 <__muldf3+0x654>
    7f8c:	910003cc 	andi	r4,r18,15
    7f90:	01400104 	movi	r5,4
    7f94:	21400426 	beq	r4,r5,7fa8 <__muldf3+0x654>
    7f98:	9149883a 	add	r4,r18,r5
    7f9c:	24a5803a 	cmpltu	r18,r4,r18
    7fa0:	8ca3883a 	add	r17,r17,r18
    7fa4:	2025883a 	mov	r18,r4
    7fa8:	8900402c 	andhi	r4,r17,256
    7fac:	20000426 	beq	r4,zero,7fc0 <__muldf3+0x66c>
    7fb0:	18810004 	addi	r2,r3,1024
    7fb4:	00ffc034 	movhi	r3,65280
    7fb8:	18ffffc4 	addi	r3,r3,-1
    7fbc:	88e2703a 	and	r17,r17,r3
    7fc0:	00c1ff84 	movi	r3,2046
    7fc4:	18bf1316 	blt	r3,r2,7c14 <__ram_exceptions_end+0xfe005bf4>
    7fc8:	882c977a 	slli	r22,r17,29
    7fcc:	9024d0fa 	srli	r18,r18,3
    7fd0:	8822927a 	slli	r17,r17,9
    7fd4:	1081ffcc 	andi	r2,r2,2047
    7fd8:	b4acb03a 	or	r22,r22,r18
    7fdc:	8820d33a 	srli	r16,r17,12
    7fe0:	3027883a 	mov	r19,r6
    7fe4:	003eba06 	br	7ad0 <__ram_exceptions_end+0xfe005ab0>
    7fe8:	8080022c 	andhi	r2,r16,8
    7fec:	10000926 	beq	r2,zero,8014 <__muldf3+0x6c0>
    7ff0:	8880022c 	andhi	r2,r17,8
    7ff4:	1000071e 	bne	r2,zero,8014 <__muldf3+0x6c0>
    7ff8:	00800434 	movhi	r2,16
    7ffc:	8c000234 	orhi	r16,r17,8
    8000:	10bfffc4 	addi	r2,r2,-1
    8004:	e027883a 	mov	r19,fp
    8008:	80a0703a 	and	r16,r16,r2
    800c:	902d883a 	mov	r22,r18
    8010:	003f1706 	br	7c70 <__ram_exceptions_end+0xfe005c50>
    8014:	00800434 	movhi	r2,16
    8018:	84000234 	orhi	r16,r16,8
    801c:	10bfffc4 	addi	r2,r2,-1
    8020:	80a0703a 	and	r16,r16,r2
    8024:	003f1206 	br	7c70 <__ram_exceptions_end+0xfe005c50>
    8028:	147ff604 	addi	r17,r2,-40
    802c:	3462983a 	sll	r17,r6,r17
    8030:	0025883a 	mov	r18,zero
    8034:	003ef306 	br	7c04 <__ram_exceptions_end+0xfe005be4>
    8038:	3009883a 	mov	r4,r6
    803c:	d9400215 	stw	r5,8(sp)
    8040:	d9800715 	stw	r6,28(sp)
    8044:	da400415 	stw	r9,16(sp)
    8048:	da800315 	stw	r10,12(sp)
    804c:	0008f780 	call	8f78 <__clzsi2>
    8050:	10800804 	addi	r2,r2,32
    8054:	da800317 	ldw	r10,12(sp)
    8058:	da400417 	ldw	r9,16(sp)
    805c:	d9800717 	ldw	r6,28(sp)
    8060:	d9400217 	ldw	r5,8(sp)
    8064:	003edd06 	br	7bdc <__ram_exceptions_end+0xfe005bbc>
    8068:	143ff604 	addi	r16,r2,-40
    806c:	ac20983a 	sll	r16,r21,r16
    8070:	002d883a 	mov	r22,zero
    8074:	003ec106 	br	7b7c <__ram_exceptions_end+0xfe005b5c>
    8078:	d9800715 	stw	r6,28(sp)
    807c:	d9c00215 	stw	r7,8(sp)
    8080:	da400415 	stw	r9,16(sp)
    8084:	0008f780 	call	8f78 <__clzsi2>
    8088:	10800804 	addi	r2,r2,32
    808c:	da400417 	ldw	r9,16(sp)
    8090:	d9c00217 	ldw	r7,8(sp)
    8094:	d9800717 	ldw	r6,28(sp)
    8098:	003eae06 	br	7b54 <__ram_exceptions_end+0xfe005b34>
    809c:	00c00044 	movi	r3,1
    80a0:	1887c83a 	sub	r3,r3,r2
    80a4:	01000e04 	movi	r4,56
    80a8:	20fe8516 	blt	r4,r3,7ac0 <__ram_exceptions_end+0xfe005aa0>
    80ac:	010007c4 	movi	r4,31
    80b0:	20c01b16 	blt	r4,r3,8120 <__muldf3+0x7cc>
    80b4:	00800804 	movi	r2,32
    80b8:	10c5c83a 	sub	r2,r2,r3
    80bc:	888a983a 	sll	r5,r17,r2
    80c0:	90c8d83a 	srl	r4,r18,r3
    80c4:	9084983a 	sll	r2,r18,r2
    80c8:	88e2d83a 	srl	r17,r17,r3
    80cc:	2906b03a 	or	r3,r5,r4
    80d0:	1004c03a 	cmpne	r2,r2,zero
    80d4:	1886b03a 	or	r3,r3,r2
    80d8:	188001cc 	andi	r2,r3,7
    80dc:	10000726 	beq	r2,zero,80fc <__muldf3+0x7a8>
    80e0:	188003cc 	andi	r2,r3,15
    80e4:	01000104 	movi	r4,4
    80e8:	11000426 	beq	r2,r4,80fc <__muldf3+0x7a8>
    80ec:	1805883a 	mov	r2,r3
    80f0:	10c00104 	addi	r3,r2,4
    80f4:	1885803a 	cmpltu	r2,r3,r2
    80f8:	88a3883a 	add	r17,r17,r2
    80fc:	8880202c 	andhi	r2,r17,128
    8100:	10001c26 	beq	r2,zero,8174 <__muldf3+0x820>
    8104:	3027883a 	mov	r19,r6
    8108:	00800044 	movi	r2,1
    810c:	0021883a 	mov	r16,zero
    8110:	002d883a 	mov	r22,zero
    8114:	003e6e06 	br	7ad0 <__ram_exceptions_end+0xfe005ab0>
    8118:	4007883a 	mov	r3,r8
    811c:	003f9706 	br	7f7c <__ram_exceptions_end+0xfe005f5c>
    8120:	017ff844 	movi	r5,-31
    8124:	2885c83a 	sub	r2,r5,r2
    8128:	888ad83a 	srl	r5,r17,r2
    812c:	00800804 	movi	r2,32
    8130:	18801a26 	beq	r3,r2,819c <__muldf3+0x848>
    8134:	01001004 	movi	r4,64
    8138:	20c7c83a 	sub	r3,r4,r3
    813c:	88e2983a 	sll	r17,r17,r3
    8140:	8ca4b03a 	or	r18,r17,r18
    8144:	9004c03a 	cmpne	r2,r18,zero
    8148:	2884b03a 	or	r2,r5,r2
    814c:	144001cc 	andi	r17,r2,7
    8150:	88000d1e 	bne	r17,zero,8188 <__muldf3+0x834>
    8154:	0021883a 	mov	r16,zero
    8158:	102cd0fa 	srli	r22,r2,3
    815c:	3027883a 	mov	r19,r6
    8160:	0005883a 	mov	r2,zero
    8164:	b46cb03a 	or	r22,r22,r17
    8168:	003e5906 	br	7ad0 <__ram_exceptions_end+0xfe005ab0>
    816c:	1007883a 	mov	r3,r2
    8170:	0023883a 	mov	r17,zero
    8174:	8820927a 	slli	r16,r17,9
    8178:	1805883a 	mov	r2,r3
    817c:	8822977a 	slli	r17,r17,29
    8180:	8020d33a 	srli	r16,r16,12
    8184:	003ff406 	br	8158 <__ram_exceptions_end+0xfe006138>
    8188:	10c003cc 	andi	r3,r2,15
    818c:	01000104 	movi	r4,4
    8190:	193ff626 	beq	r3,r4,816c <__ram_exceptions_end+0xfe00614c>
    8194:	0023883a 	mov	r17,zero
    8198:	003fd506 	br	80f0 <__ram_exceptions_end+0xfe0060d0>
    819c:	0023883a 	mov	r17,zero
    81a0:	003fe706 	br	8140 <__ram_exceptions_end+0xfe006120>
    81a4:	00800434 	movhi	r2,16
    81a8:	8c000234 	orhi	r16,r17,8
    81ac:	10bfffc4 	addi	r2,r2,-1
    81b0:	3027883a 	mov	r19,r6
    81b4:	80a0703a 	and	r16,r16,r2
    81b8:	902d883a 	mov	r22,r18
    81bc:	003eac06 	br	7c70 <__ram_exceptions_end+0xfe005c50>

000081c0 <__subdf3>:
    81c0:	02000434 	movhi	r8,16
    81c4:	423fffc4 	addi	r8,r8,-1
    81c8:	defffb04 	addi	sp,sp,-20
    81cc:	2a14703a 	and	r10,r5,r8
    81d0:	3812d53a 	srli	r9,r7,20
    81d4:	3a10703a 	and	r8,r7,r8
    81d8:	2006d77a 	srli	r3,r4,29
    81dc:	3004d77a 	srli	r2,r6,29
    81e0:	dc000015 	stw	r16,0(sp)
    81e4:	501490fa 	slli	r10,r10,3
    81e8:	2820d53a 	srli	r16,r5,20
    81ec:	401090fa 	slli	r8,r8,3
    81f0:	dc800215 	stw	r18,8(sp)
    81f4:	dc400115 	stw	r17,4(sp)
    81f8:	dfc00415 	stw	ra,16(sp)
    81fc:	202290fa 	slli	r17,r4,3
    8200:	dcc00315 	stw	r19,12(sp)
    8204:	4a41ffcc 	andi	r9,r9,2047
    8208:	0101ffc4 	movi	r4,2047
    820c:	2824d7fa 	srli	r18,r5,31
    8210:	8401ffcc 	andi	r16,r16,2047
    8214:	50c6b03a 	or	r3,r10,r3
    8218:	380ed7fa 	srli	r7,r7,31
    821c:	408ab03a 	or	r5,r8,r2
    8220:	300c90fa 	slli	r6,r6,3
    8224:	49009626 	beq	r9,r4,8480 <__subdf3+0x2c0>
    8228:	39c0005c 	xori	r7,r7,1
    822c:	8245c83a 	sub	r2,r16,r9
    8230:	3c807426 	beq	r7,r18,8404 <__subdf3+0x244>
    8234:	0080af0e 	bge	zero,r2,84f4 <__subdf3+0x334>
    8238:	48002a1e 	bne	r9,zero,82e4 <__subdf3+0x124>
    823c:	2988b03a 	or	r4,r5,r6
    8240:	20009a1e 	bne	r4,zero,84ac <__subdf3+0x2ec>
    8244:	888001cc 	andi	r2,r17,7
    8248:	10000726 	beq	r2,zero,8268 <__subdf3+0xa8>
    824c:	888003cc 	andi	r2,r17,15
    8250:	01000104 	movi	r4,4
    8254:	11000426 	beq	r2,r4,8268 <__subdf3+0xa8>
    8258:	890b883a 	add	r5,r17,r4
    825c:	2c63803a 	cmpltu	r17,r5,r17
    8260:	1c47883a 	add	r3,r3,r17
    8264:	2823883a 	mov	r17,r5
    8268:	1880202c 	andhi	r2,r3,128
    826c:	10005926 	beq	r2,zero,83d4 <__subdf3+0x214>
    8270:	84000044 	addi	r16,r16,1
    8274:	0081ffc4 	movi	r2,2047
    8278:	8080be26 	beq	r16,r2,8574 <__subdf3+0x3b4>
    827c:	017fe034 	movhi	r5,65408
    8280:	297fffc4 	addi	r5,r5,-1
    8284:	1946703a 	and	r3,r3,r5
    8288:	1804977a 	slli	r2,r3,29
    828c:	1806927a 	slli	r3,r3,9
    8290:	8822d0fa 	srli	r17,r17,3
    8294:	8401ffcc 	andi	r16,r16,2047
    8298:	180ad33a 	srli	r5,r3,12
    829c:	9100004c 	andi	r4,r18,1
    82a0:	1444b03a 	or	r2,r2,r17
    82a4:	80c1ffcc 	andi	r3,r16,2047
    82a8:	1820953a 	slli	r16,r3,20
    82ac:	20c03fcc 	andi	r3,r4,255
    82b0:	180897fa 	slli	r4,r3,31
    82b4:	00c00434 	movhi	r3,16
    82b8:	18ffffc4 	addi	r3,r3,-1
    82bc:	28c6703a 	and	r3,r5,r3
    82c0:	1c06b03a 	or	r3,r3,r16
    82c4:	1906b03a 	or	r3,r3,r4
    82c8:	dfc00417 	ldw	ra,16(sp)
    82cc:	dcc00317 	ldw	r19,12(sp)
    82d0:	dc800217 	ldw	r18,8(sp)
    82d4:	dc400117 	ldw	r17,4(sp)
    82d8:	dc000017 	ldw	r16,0(sp)
    82dc:	dec00504 	addi	sp,sp,20
    82e0:	f800283a 	ret
    82e4:	0101ffc4 	movi	r4,2047
    82e8:	813fd626 	beq	r16,r4,8244 <__ram_exceptions_end+0xfe006224>
    82ec:	29402034 	orhi	r5,r5,128
    82f0:	01000e04 	movi	r4,56
    82f4:	2080a316 	blt	r4,r2,8584 <__subdf3+0x3c4>
    82f8:	010007c4 	movi	r4,31
    82fc:	2080c616 	blt	r4,r2,8618 <__subdf3+0x458>
    8300:	01000804 	movi	r4,32
    8304:	2089c83a 	sub	r4,r4,r2
    8308:	2910983a 	sll	r8,r5,r4
    830c:	308ed83a 	srl	r7,r6,r2
    8310:	3108983a 	sll	r4,r6,r4
    8314:	2884d83a 	srl	r2,r5,r2
    8318:	41ccb03a 	or	r6,r8,r7
    831c:	2008c03a 	cmpne	r4,r4,zero
    8320:	310cb03a 	or	r6,r6,r4
    8324:	898dc83a 	sub	r6,r17,r6
    8328:	89a3803a 	cmpltu	r17,r17,r6
    832c:	1887c83a 	sub	r3,r3,r2
    8330:	1c47c83a 	sub	r3,r3,r17
    8334:	3023883a 	mov	r17,r6
    8338:	1880202c 	andhi	r2,r3,128
    833c:	10002326 	beq	r2,zero,83cc <__subdf3+0x20c>
    8340:	04c02034 	movhi	r19,128
    8344:	9cffffc4 	addi	r19,r19,-1
    8348:	1ce6703a 	and	r19,r3,r19
    834c:	98007a26 	beq	r19,zero,8538 <__subdf3+0x378>
    8350:	9809883a 	mov	r4,r19
    8354:	0008f780 	call	8f78 <__clzsi2>
    8358:	113ffe04 	addi	r4,r2,-8
    835c:	00c007c4 	movi	r3,31
    8360:	19007b16 	blt	r3,r4,8550 <__subdf3+0x390>
    8364:	00800804 	movi	r2,32
    8368:	1105c83a 	sub	r2,r2,r4
    836c:	8884d83a 	srl	r2,r17,r2
    8370:	9906983a 	sll	r3,r19,r4
    8374:	8922983a 	sll	r17,r17,r4
    8378:	10c4b03a 	or	r2,r2,r3
    837c:	24007816 	blt	r4,r16,8560 <__subdf3+0x3a0>
    8380:	2421c83a 	sub	r16,r4,r16
    8384:	80c00044 	addi	r3,r16,1
    8388:	010007c4 	movi	r4,31
    838c:	20c09516 	blt	r4,r3,85e4 <__subdf3+0x424>
    8390:	01400804 	movi	r5,32
    8394:	28cbc83a 	sub	r5,r5,r3
    8398:	88c8d83a 	srl	r4,r17,r3
    839c:	8962983a 	sll	r17,r17,r5
    83a0:	114a983a 	sll	r5,r2,r5
    83a4:	10c6d83a 	srl	r3,r2,r3
    83a8:	8804c03a 	cmpne	r2,r17,zero
    83ac:	290ab03a 	or	r5,r5,r4
    83b0:	28a2b03a 	or	r17,r5,r2
    83b4:	0021883a 	mov	r16,zero
    83b8:	003fa206 	br	8244 <__ram_exceptions_end+0xfe006224>
    83bc:	2090b03a 	or	r8,r4,r2
    83c0:	40018e26 	beq	r8,zero,89fc <__subdf3+0x83c>
    83c4:	1007883a 	mov	r3,r2
    83c8:	2023883a 	mov	r17,r4
    83cc:	888001cc 	andi	r2,r17,7
    83d0:	103f9e1e 	bne	r2,zero,824c <__ram_exceptions_end+0xfe00622c>
    83d4:	1804977a 	slli	r2,r3,29
    83d8:	8822d0fa 	srli	r17,r17,3
    83dc:	1810d0fa 	srli	r8,r3,3
    83e0:	9100004c 	andi	r4,r18,1
    83e4:	1444b03a 	or	r2,r2,r17
    83e8:	00c1ffc4 	movi	r3,2047
    83ec:	80c02826 	beq	r16,r3,8490 <__subdf3+0x2d0>
    83f0:	01400434 	movhi	r5,16
    83f4:	297fffc4 	addi	r5,r5,-1
    83f8:	80e0703a 	and	r16,r16,r3
    83fc:	414a703a 	and	r5,r8,r5
    8400:	003fa806 	br	82a4 <__ram_exceptions_end+0xfe006284>
    8404:	0080630e 	bge	zero,r2,8594 <__subdf3+0x3d4>
    8408:	48003026 	beq	r9,zero,84cc <__subdf3+0x30c>
    840c:	0101ffc4 	movi	r4,2047
    8410:	813f8c26 	beq	r16,r4,8244 <__ram_exceptions_end+0xfe006224>
    8414:	29402034 	orhi	r5,r5,128
    8418:	01000e04 	movi	r4,56
    841c:	2080a90e 	bge	r4,r2,86c4 <__subdf3+0x504>
    8420:	298cb03a 	or	r6,r5,r6
    8424:	3012c03a 	cmpne	r9,r6,zero
    8428:	0005883a 	mov	r2,zero
    842c:	4c53883a 	add	r9,r9,r17
    8430:	4c63803a 	cmpltu	r17,r9,r17
    8434:	10c7883a 	add	r3,r2,r3
    8438:	88c7883a 	add	r3,r17,r3
    843c:	4823883a 	mov	r17,r9
    8440:	1880202c 	andhi	r2,r3,128
    8444:	1000d026 	beq	r2,zero,8788 <__subdf3+0x5c8>
    8448:	84000044 	addi	r16,r16,1
    844c:	0081ffc4 	movi	r2,2047
    8450:	8080fe26 	beq	r16,r2,884c <__subdf3+0x68c>
    8454:	00bfe034 	movhi	r2,65408
    8458:	10bfffc4 	addi	r2,r2,-1
    845c:	1886703a 	and	r3,r3,r2
    8460:	880ad07a 	srli	r5,r17,1
    8464:	180497fa 	slli	r2,r3,31
    8468:	8900004c 	andi	r4,r17,1
    846c:	2922b03a 	or	r17,r5,r4
    8470:	1806d07a 	srli	r3,r3,1
    8474:	1462b03a 	or	r17,r2,r17
    8478:	3825883a 	mov	r18,r7
    847c:	003f7106 	br	8244 <__ram_exceptions_end+0xfe006224>
    8480:	2984b03a 	or	r2,r5,r6
    8484:	103f6826 	beq	r2,zero,8228 <__ram_exceptions_end+0xfe006208>
    8488:	39c03fcc 	andi	r7,r7,255
    848c:	003f6706 	br	822c <__ram_exceptions_end+0xfe00620c>
    8490:	4086b03a 	or	r3,r8,r2
    8494:	18015226 	beq	r3,zero,89e0 <__subdf3+0x820>
    8498:	00c00434 	movhi	r3,16
    849c:	41400234 	orhi	r5,r8,8
    84a0:	18ffffc4 	addi	r3,r3,-1
    84a4:	28ca703a 	and	r5,r5,r3
    84a8:	003f7e06 	br	82a4 <__ram_exceptions_end+0xfe006284>
    84ac:	10bfffc4 	addi	r2,r2,-1
    84b0:	1000491e 	bne	r2,zero,85d8 <__subdf3+0x418>
    84b4:	898fc83a 	sub	r7,r17,r6
    84b8:	89e3803a 	cmpltu	r17,r17,r7
    84bc:	1947c83a 	sub	r3,r3,r5
    84c0:	1c47c83a 	sub	r3,r3,r17
    84c4:	3823883a 	mov	r17,r7
    84c8:	003f9b06 	br	8338 <__ram_exceptions_end+0xfe006318>
    84cc:	2988b03a 	or	r4,r5,r6
    84d0:	203f5c26 	beq	r4,zero,8244 <__ram_exceptions_end+0xfe006224>
    84d4:	10bfffc4 	addi	r2,r2,-1
    84d8:	1000931e 	bne	r2,zero,8728 <__subdf3+0x568>
    84dc:	898d883a 	add	r6,r17,r6
    84e0:	3463803a 	cmpltu	r17,r6,r17
    84e4:	1947883a 	add	r3,r3,r5
    84e8:	88c7883a 	add	r3,r17,r3
    84ec:	3023883a 	mov	r17,r6
    84f0:	003fd306 	br	8440 <__ram_exceptions_end+0xfe006420>
    84f4:	1000541e 	bne	r2,zero,8648 <__subdf3+0x488>
    84f8:	80800044 	addi	r2,r16,1
    84fc:	1081ffcc 	andi	r2,r2,2047
    8500:	01000044 	movi	r4,1
    8504:	2080a20e 	bge	r4,r2,8790 <__subdf3+0x5d0>
    8508:	8989c83a 	sub	r4,r17,r6
    850c:	8905803a 	cmpltu	r2,r17,r4
    8510:	1967c83a 	sub	r19,r3,r5
    8514:	98a7c83a 	sub	r19,r19,r2
    8518:	9880202c 	andhi	r2,r19,128
    851c:	10006326 	beq	r2,zero,86ac <__subdf3+0x4ec>
    8520:	3463c83a 	sub	r17,r6,r17
    8524:	28c7c83a 	sub	r3,r5,r3
    8528:	344d803a 	cmpltu	r6,r6,r17
    852c:	19a7c83a 	sub	r19,r3,r6
    8530:	3825883a 	mov	r18,r7
    8534:	983f861e 	bne	r19,zero,8350 <__ram_exceptions_end+0xfe006330>
    8538:	8809883a 	mov	r4,r17
    853c:	0008f780 	call	8f78 <__clzsi2>
    8540:	10800804 	addi	r2,r2,32
    8544:	113ffe04 	addi	r4,r2,-8
    8548:	00c007c4 	movi	r3,31
    854c:	193f850e 	bge	r3,r4,8364 <__ram_exceptions_end+0xfe006344>
    8550:	10bff604 	addi	r2,r2,-40
    8554:	8884983a 	sll	r2,r17,r2
    8558:	0023883a 	mov	r17,zero
    855c:	243f880e 	bge	r4,r16,8380 <__ram_exceptions_end+0xfe006360>
    8560:	00ffe034 	movhi	r3,65408
    8564:	18ffffc4 	addi	r3,r3,-1
    8568:	8121c83a 	sub	r16,r16,r4
    856c:	10c6703a 	and	r3,r2,r3
    8570:	003f3406 	br	8244 <__ram_exceptions_end+0xfe006224>
    8574:	9100004c 	andi	r4,r18,1
    8578:	000b883a 	mov	r5,zero
    857c:	0005883a 	mov	r2,zero
    8580:	003f4806 	br	82a4 <__ram_exceptions_end+0xfe006284>
    8584:	298cb03a 	or	r6,r5,r6
    8588:	300cc03a 	cmpne	r6,r6,zero
    858c:	0005883a 	mov	r2,zero
    8590:	003f6406 	br	8324 <__ram_exceptions_end+0xfe006304>
    8594:	10009a1e 	bne	r2,zero,8800 <__subdf3+0x640>
    8598:	82400044 	addi	r9,r16,1
    859c:	4881ffcc 	andi	r2,r9,2047
    85a0:	02800044 	movi	r10,1
    85a4:	5080670e 	bge	r10,r2,8744 <__subdf3+0x584>
    85a8:	0081ffc4 	movi	r2,2047
    85ac:	4880af26 	beq	r9,r2,886c <__subdf3+0x6ac>
    85b0:	898d883a 	add	r6,r17,r6
    85b4:	1945883a 	add	r2,r3,r5
    85b8:	3447803a 	cmpltu	r3,r6,r17
    85bc:	1887883a 	add	r3,r3,r2
    85c0:	182297fa 	slli	r17,r3,31
    85c4:	300cd07a 	srli	r6,r6,1
    85c8:	1806d07a 	srli	r3,r3,1
    85cc:	4821883a 	mov	r16,r9
    85d0:	89a2b03a 	or	r17,r17,r6
    85d4:	003f1b06 	br	8244 <__ram_exceptions_end+0xfe006224>
    85d8:	0101ffc4 	movi	r4,2047
    85dc:	813f441e 	bne	r16,r4,82f0 <__ram_exceptions_end+0xfe0062d0>
    85e0:	003f1806 	br	8244 <__ram_exceptions_end+0xfe006224>
    85e4:	843ff844 	addi	r16,r16,-31
    85e8:	01400804 	movi	r5,32
    85ec:	1408d83a 	srl	r4,r2,r16
    85f0:	19405026 	beq	r3,r5,8734 <__subdf3+0x574>
    85f4:	01401004 	movi	r5,64
    85f8:	28c7c83a 	sub	r3,r5,r3
    85fc:	10c4983a 	sll	r2,r2,r3
    8600:	88a2b03a 	or	r17,r17,r2
    8604:	8822c03a 	cmpne	r17,r17,zero
    8608:	2462b03a 	or	r17,r4,r17
    860c:	0007883a 	mov	r3,zero
    8610:	0021883a 	mov	r16,zero
    8614:	003f6d06 	br	83cc <__ram_exceptions_end+0xfe0063ac>
    8618:	11fff804 	addi	r7,r2,-32
    861c:	01000804 	movi	r4,32
    8620:	29ced83a 	srl	r7,r5,r7
    8624:	11004526 	beq	r2,r4,873c <__subdf3+0x57c>
    8628:	01001004 	movi	r4,64
    862c:	2089c83a 	sub	r4,r4,r2
    8630:	2904983a 	sll	r2,r5,r4
    8634:	118cb03a 	or	r6,r2,r6
    8638:	300cc03a 	cmpne	r6,r6,zero
    863c:	398cb03a 	or	r6,r7,r6
    8640:	0005883a 	mov	r2,zero
    8644:	003f3706 	br	8324 <__ram_exceptions_end+0xfe006304>
    8648:	80002a26 	beq	r16,zero,86f4 <__subdf3+0x534>
    864c:	0101ffc4 	movi	r4,2047
    8650:	49006626 	beq	r9,r4,87ec <__subdf3+0x62c>
    8654:	0085c83a 	sub	r2,zero,r2
    8658:	18c02034 	orhi	r3,r3,128
    865c:	01000e04 	movi	r4,56
    8660:	20807e16 	blt	r4,r2,885c <__subdf3+0x69c>
    8664:	010007c4 	movi	r4,31
    8668:	2080e716 	blt	r4,r2,8a08 <__subdf3+0x848>
    866c:	01000804 	movi	r4,32
    8670:	2089c83a 	sub	r4,r4,r2
    8674:	1914983a 	sll	r10,r3,r4
    8678:	8890d83a 	srl	r8,r17,r2
    867c:	8908983a 	sll	r4,r17,r4
    8680:	1884d83a 	srl	r2,r3,r2
    8684:	5222b03a 	or	r17,r10,r8
    8688:	2006c03a 	cmpne	r3,r4,zero
    868c:	88e2b03a 	or	r17,r17,r3
    8690:	3463c83a 	sub	r17,r6,r17
    8694:	2885c83a 	sub	r2,r5,r2
    8698:	344d803a 	cmpltu	r6,r6,r17
    869c:	1187c83a 	sub	r3,r2,r6
    86a0:	4821883a 	mov	r16,r9
    86a4:	3825883a 	mov	r18,r7
    86a8:	003f2306 	br	8338 <__ram_exceptions_end+0xfe006318>
    86ac:	24d0b03a 	or	r8,r4,r19
    86b0:	40001b1e 	bne	r8,zero,8720 <__subdf3+0x560>
    86b4:	0005883a 	mov	r2,zero
    86b8:	0009883a 	mov	r4,zero
    86bc:	0021883a 	mov	r16,zero
    86c0:	003f4906 	br	83e8 <__ram_exceptions_end+0xfe0063c8>
    86c4:	010007c4 	movi	r4,31
    86c8:	20803a16 	blt	r4,r2,87b4 <__subdf3+0x5f4>
    86cc:	01000804 	movi	r4,32
    86d0:	2089c83a 	sub	r4,r4,r2
    86d4:	2912983a 	sll	r9,r5,r4
    86d8:	3090d83a 	srl	r8,r6,r2
    86dc:	3108983a 	sll	r4,r6,r4
    86e0:	2884d83a 	srl	r2,r5,r2
    86e4:	4a12b03a 	or	r9,r9,r8
    86e8:	2008c03a 	cmpne	r4,r4,zero
    86ec:	4912b03a 	or	r9,r9,r4
    86f0:	003f4e06 	br	842c <__ram_exceptions_end+0xfe00640c>
    86f4:	1c48b03a 	or	r4,r3,r17
    86f8:	20003c26 	beq	r4,zero,87ec <__subdf3+0x62c>
    86fc:	0084303a 	nor	r2,zero,r2
    8700:	1000381e 	bne	r2,zero,87e4 <__subdf3+0x624>
    8704:	3463c83a 	sub	r17,r6,r17
    8708:	28c5c83a 	sub	r2,r5,r3
    870c:	344d803a 	cmpltu	r6,r6,r17
    8710:	1187c83a 	sub	r3,r2,r6
    8714:	4821883a 	mov	r16,r9
    8718:	3825883a 	mov	r18,r7
    871c:	003f0606 	br	8338 <__ram_exceptions_end+0xfe006318>
    8720:	2023883a 	mov	r17,r4
    8724:	003f0906 	br	834c <__ram_exceptions_end+0xfe00632c>
    8728:	0101ffc4 	movi	r4,2047
    872c:	813f3a1e 	bne	r16,r4,8418 <__ram_exceptions_end+0xfe0063f8>
    8730:	003ec406 	br	8244 <__ram_exceptions_end+0xfe006224>
    8734:	0005883a 	mov	r2,zero
    8738:	003fb106 	br	8600 <__ram_exceptions_end+0xfe0065e0>
    873c:	0005883a 	mov	r2,zero
    8740:	003fbc06 	br	8634 <__ram_exceptions_end+0xfe006614>
    8744:	1c44b03a 	or	r2,r3,r17
    8748:	80008e1e 	bne	r16,zero,8984 <__subdf3+0x7c4>
    874c:	1000c826 	beq	r2,zero,8a70 <__subdf3+0x8b0>
    8750:	2984b03a 	or	r2,r5,r6
    8754:	103ebb26 	beq	r2,zero,8244 <__ram_exceptions_end+0xfe006224>
    8758:	8989883a 	add	r4,r17,r6
    875c:	1945883a 	add	r2,r3,r5
    8760:	2447803a 	cmpltu	r3,r4,r17
    8764:	1887883a 	add	r3,r3,r2
    8768:	1880202c 	andhi	r2,r3,128
    876c:	2023883a 	mov	r17,r4
    8770:	103f1626 	beq	r2,zero,83cc <__ram_exceptions_end+0xfe0063ac>
    8774:	00bfe034 	movhi	r2,65408
    8778:	10bfffc4 	addi	r2,r2,-1
    877c:	5021883a 	mov	r16,r10
    8780:	1886703a 	and	r3,r3,r2
    8784:	003eaf06 	br	8244 <__ram_exceptions_end+0xfe006224>
    8788:	3825883a 	mov	r18,r7
    878c:	003f0f06 	br	83cc <__ram_exceptions_end+0xfe0063ac>
    8790:	1c44b03a 	or	r2,r3,r17
    8794:	8000251e 	bne	r16,zero,882c <__subdf3+0x66c>
    8798:	1000661e 	bne	r2,zero,8934 <__subdf3+0x774>
    879c:	2990b03a 	or	r8,r5,r6
    87a0:	40009626 	beq	r8,zero,89fc <__subdf3+0x83c>
    87a4:	2807883a 	mov	r3,r5
    87a8:	3023883a 	mov	r17,r6
    87ac:	3825883a 	mov	r18,r7
    87b0:	003ea406 	br	8244 <__ram_exceptions_end+0xfe006224>
    87b4:	127ff804 	addi	r9,r2,-32
    87b8:	01000804 	movi	r4,32
    87bc:	2a52d83a 	srl	r9,r5,r9
    87c0:	11008c26 	beq	r2,r4,89f4 <__subdf3+0x834>
    87c4:	01001004 	movi	r4,64
    87c8:	2085c83a 	sub	r2,r4,r2
    87cc:	2884983a 	sll	r2,r5,r2
    87d0:	118cb03a 	or	r6,r2,r6
    87d4:	300cc03a 	cmpne	r6,r6,zero
    87d8:	4992b03a 	or	r9,r9,r6
    87dc:	0005883a 	mov	r2,zero
    87e0:	003f1206 	br	842c <__ram_exceptions_end+0xfe00640c>
    87e4:	0101ffc4 	movi	r4,2047
    87e8:	493f9c1e 	bne	r9,r4,865c <__ram_exceptions_end+0xfe00663c>
    87ec:	2807883a 	mov	r3,r5
    87f0:	3023883a 	mov	r17,r6
    87f4:	4821883a 	mov	r16,r9
    87f8:	3825883a 	mov	r18,r7
    87fc:	003e9106 	br	8244 <__ram_exceptions_end+0xfe006224>
    8800:	80001f1e 	bne	r16,zero,8880 <__subdf3+0x6c0>
    8804:	1c48b03a 	or	r4,r3,r17
    8808:	20005a26 	beq	r4,zero,8974 <__subdf3+0x7b4>
    880c:	0084303a 	nor	r2,zero,r2
    8810:	1000561e 	bne	r2,zero,896c <__subdf3+0x7ac>
    8814:	89a3883a 	add	r17,r17,r6
    8818:	1945883a 	add	r2,r3,r5
    881c:	898d803a 	cmpltu	r6,r17,r6
    8820:	3087883a 	add	r3,r6,r2
    8824:	4821883a 	mov	r16,r9
    8828:	003f0506 	br	8440 <__ram_exceptions_end+0xfe006420>
    882c:	10002b1e 	bne	r2,zero,88dc <__subdf3+0x71c>
    8830:	2984b03a 	or	r2,r5,r6
    8834:	10008026 	beq	r2,zero,8a38 <__subdf3+0x878>
    8838:	2807883a 	mov	r3,r5
    883c:	3023883a 	mov	r17,r6
    8840:	3825883a 	mov	r18,r7
    8844:	0401ffc4 	movi	r16,2047
    8848:	003e7e06 	br	8244 <__ram_exceptions_end+0xfe006224>
    884c:	3809883a 	mov	r4,r7
    8850:	0011883a 	mov	r8,zero
    8854:	0005883a 	mov	r2,zero
    8858:	003ee306 	br	83e8 <__ram_exceptions_end+0xfe0063c8>
    885c:	1c62b03a 	or	r17,r3,r17
    8860:	8822c03a 	cmpne	r17,r17,zero
    8864:	0005883a 	mov	r2,zero
    8868:	003f8906 	br	8690 <__ram_exceptions_end+0xfe006670>
    886c:	3809883a 	mov	r4,r7
    8870:	4821883a 	mov	r16,r9
    8874:	0011883a 	mov	r8,zero
    8878:	0005883a 	mov	r2,zero
    887c:	003eda06 	br	83e8 <__ram_exceptions_end+0xfe0063c8>
    8880:	0101ffc4 	movi	r4,2047
    8884:	49003b26 	beq	r9,r4,8974 <__subdf3+0x7b4>
    8888:	0085c83a 	sub	r2,zero,r2
    888c:	18c02034 	orhi	r3,r3,128
    8890:	01000e04 	movi	r4,56
    8894:	20806e16 	blt	r4,r2,8a50 <__subdf3+0x890>
    8898:	010007c4 	movi	r4,31
    889c:	20807716 	blt	r4,r2,8a7c <__subdf3+0x8bc>
    88a0:	01000804 	movi	r4,32
    88a4:	2089c83a 	sub	r4,r4,r2
    88a8:	1914983a 	sll	r10,r3,r4
    88ac:	8890d83a 	srl	r8,r17,r2
    88b0:	8908983a 	sll	r4,r17,r4
    88b4:	1884d83a 	srl	r2,r3,r2
    88b8:	5222b03a 	or	r17,r10,r8
    88bc:	2006c03a 	cmpne	r3,r4,zero
    88c0:	88e2b03a 	or	r17,r17,r3
    88c4:	89a3883a 	add	r17,r17,r6
    88c8:	1145883a 	add	r2,r2,r5
    88cc:	898d803a 	cmpltu	r6,r17,r6
    88d0:	3087883a 	add	r3,r6,r2
    88d4:	4821883a 	mov	r16,r9
    88d8:	003ed906 	br	8440 <__ram_exceptions_end+0xfe006420>
    88dc:	2984b03a 	or	r2,r5,r6
    88e0:	10004226 	beq	r2,zero,89ec <__subdf3+0x82c>
    88e4:	1808d0fa 	srli	r4,r3,3
    88e8:	8822d0fa 	srli	r17,r17,3
    88ec:	1806977a 	slli	r3,r3,29
    88f0:	2080022c 	andhi	r2,r4,8
    88f4:	1c62b03a 	or	r17,r3,r17
    88f8:	10000826 	beq	r2,zero,891c <__subdf3+0x75c>
    88fc:	2812d0fa 	srli	r9,r5,3
    8900:	4880022c 	andhi	r2,r9,8
    8904:	1000051e 	bne	r2,zero,891c <__subdf3+0x75c>
    8908:	300cd0fa 	srli	r6,r6,3
    890c:	2804977a 	slli	r2,r5,29
    8910:	4809883a 	mov	r4,r9
    8914:	3825883a 	mov	r18,r7
    8918:	11a2b03a 	or	r17,r2,r6
    891c:	8806d77a 	srli	r3,r17,29
    8920:	200890fa 	slli	r4,r4,3
    8924:	882290fa 	slli	r17,r17,3
    8928:	0401ffc4 	movi	r16,2047
    892c:	1906b03a 	or	r3,r3,r4
    8930:	003e4406 	br	8244 <__ram_exceptions_end+0xfe006224>
    8934:	2984b03a 	or	r2,r5,r6
    8938:	103e4226 	beq	r2,zero,8244 <__ram_exceptions_end+0xfe006224>
    893c:	8989c83a 	sub	r4,r17,r6
    8940:	8911803a 	cmpltu	r8,r17,r4
    8944:	1945c83a 	sub	r2,r3,r5
    8948:	1205c83a 	sub	r2,r2,r8
    894c:	1200202c 	andhi	r8,r2,128
    8950:	403e9a26 	beq	r8,zero,83bc <__ram_exceptions_end+0xfe00639c>
    8954:	3463c83a 	sub	r17,r6,r17
    8958:	28c5c83a 	sub	r2,r5,r3
    895c:	344d803a 	cmpltu	r6,r6,r17
    8960:	1187c83a 	sub	r3,r2,r6
    8964:	3825883a 	mov	r18,r7
    8968:	003e3606 	br	8244 <__ram_exceptions_end+0xfe006224>
    896c:	0101ffc4 	movi	r4,2047
    8970:	493fc71e 	bne	r9,r4,8890 <__ram_exceptions_end+0xfe006870>
    8974:	2807883a 	mov	r3,r5
    8978:	3023883a 	mov	r17,r6
    897c:	4821883a 	mov	r16,r9
    8980:	003e3006 	br	8244 <__ram_exceptions_end+0xfe006224>
    8984:	10003626 	beq	r2,zero,8a60 <__subdf3+0x8a0>
    8988:	2984b03a 	or	r2,r5,r6
    898c:	10001726 	beq	r2,zero,89ec <__subdf3+0x82c>
    8990:	1808d0fa 	srli	r4,r3,3
    8994:	8822d0fa 	srli	r17,r17,3
    8998:	1806977a 	slli	r3,r3,29
    899c:	2080022c 	andhi	r2,r4,8
    89a0:	1c62b03a 	or	r17,r3,r17
    89a4:	10000726 	beq	r2,zero,89c4 <__subdf3+0x804>
    89a8:	2812d0fa 	srli	r9,r5,3
    89ac:	4880022c 	andhi	r2,r9,8
    89b0:	1000041e 	bne	r2,zero,89c4 <__subdf3+0x804>
    89b4:	300cd0fa 	srli	r6,r6,3
    89b8:	2804977a 	slli	r2,r5,29
    89bc:	4809883a 	mov	r4,r9
    89c0:	11a2b03a 	or	r17,r2,r6
    89c4:	8806d77a 	srli	r3,r17,29
    89c8:	200890fa 	slli	r4,r4,3
    89cc:	882290fa 	slli	r17,r17,3
    89d0:	3825883a 	mov	r18,r7
    89d4:	1906b03a 	or	r3,r3,r4
    89d8:	0401ffc4 	movi	r16,2047
    89dc:	003e1906 	br	8244 <__ram_exceptions_end+0xfe006224>
    89e0:	000b883a 	mov	r5,zero
    89e4:	0005883a 	mov	r2,zero
    89e8:	003e2e06 	br	82a4 <__ram_exceptions_end+0xfe006284>
    89ec:	0401ffc4 	movi	r16,2047
    89f0:	003e1406 	br	8244 <__ram_exceptions_end+0xfe006224>
    89f4:	0005883a 	mov	r2,zero
    89f8:	003f7506 	br	87d0 <__ram_exceptions_end+0xfe0067b0>
    89fc:	0005883a 	mov	r2,zero
    8a00:	0009883a 	mov	r4,zero
    8a04:	003e7806 	br	83e8 <__ram_exceptions_end+0xfe0063c8>
    8a08:	123ff804 	addi	r8,r2,-32
    8a0c:	01000804 	movi	r4,32
    8a10:	1a10d83a 	srl	r8,r3,r8
    8a14:	11002526 	beq	r2,r4,8aac <__subdf3+0x8ec>
    8a18:	01001004 	movi	r4,64
    8a1c:	2085c83a 	sub	r2,r4,r2
    8a20:	1884983a 	sll	r2,r3,r2
    8a24:	1444b03a 	or	r2,r2,r17
    8a28:	1004c03a 	cmpne	r2,r2,zero
    8a2c:	40a2b03a 	or	r17,r8,r2
    8a30:	0005883a 	mov	r2,zero
    8a34:	003f1606 	br	8690 <__ram_exceptions_end+0xfe006670>
    8a38:	02000434 	movhi	r8,16
    8a3c:	0009883a 	mov	r4,zero
    8a40:	423fffc4 	addi	r8,r8,-1
    8a44:	00bfffc4 	movi	r2,-1
    8a48:	0401ffc4 	movi	r16,2047
    8a4c:	003e6606 	br	83e8 <__ram_exceptions_end+0xfe0063c8>
    8a50:	1c62b03a 	or	r17,r3,r17
    8a54:	8822c03a 	cmpne	r17,r17,zero
    8a58:	0005883a 	mov	r2,zero
    8a5c:	003f9906 	br	88c4 <__ram_exceptions_end+0xfe0068a4>
    8a60:	2807883a 	mov	r3,r5
    8a64:	3023883a 	mov	r17,r6
    8a68:	0401ffc4 	movi	r16,2047
    8a6c:	003df506 	br	8244 <__ram_exceptions_end+0xfe006224>
    8a70:	2807883a 	mov	r3,r5
    8a74:	3023883a 	mov	r17,r6
    8a78:	003df206 	br	8244 <__ram_exceptions_end+0xfe006224>
    8a7c:	123ff804 	addi	r8,r2,-32
    8a80:	01000804 	movi	r4,32
    8a84:	1a10d83a 	srl	r8,r3,r8
    8a88:	11000a26 	beq	r2,r4,8ab4 <__subdf3+0x8f4>
    8a8c:	01001004 	movi	r4,64
    8a90:	2085c83a 	sub	r2,r4,r2
    8a94:	1884983a 	sll	r2,r3,r2
    8a98:	1444b03a 	or	r2,r2,r17
    8a9c:	1004c03a 	cmpne	r2,r2,zero
    8aa0:	40a2b03a 	or	r17,r8,r2
    8aa4:	0005883a 	mov	r2,zero
    8aa8:	003f8606 	br	88c4 <__ram_exceptions_end+0xfe0068a4>
    8aac:	0005883a 	mov	r2,zero
    8ab0:	003fdc06 	br	8a24 <__ram_exceptions_end+0xfe006a04>
    8ab4:	0005883a 	mov	r2,zero
    8ab8:	003ff706 	br	8a98 <__ram_exceptions_end+0xfe006a78>

00008abc <__fixdfsi>:
    8abc:	280cd53a 	srli	r6,r5,20
    8ac0:	00c00434 	movhi	r3,16
    8ac4:	18ffffc4 	addi	r3,r3,-1
    8ac8:	3181ffcc 	andi	r6,r6,2047
    8acc:	01c0ff84 	movi	r7,1022
    8ad0:	28c6703a 	and	r3,r5,r3
    8ad4:	280ad7fa 	srli	r5,r5,31
    8ad8:	3980120e 	bge	r7,r6,8b24 <__fixdfsi+0x68>
    8adc:	00810744 	movi	r2,1053
    8ae0:	11800c16 	blt	r2,r6,8b14 <__fixdfsi+0x58>
    8ae4:	00810cc4 	movi	r2,1075
    8ae8:	1185c83a 	sub	r2,r2,r6
    8aec:	01c007c4 	movi	r7,31
    8af0:	18c00434 	orhi	r3,r3,16
    8af4:	38800d16 	blt	r7,r2,8b2c <__fixdfsi+0x70>
    8af8:	31befb44 	addi	r6,r6,-1043
    8afc:	2084d83a 	srl	r2,r4,r2
    8b00:	1986983a 	sll	r3,r3,r6
    8b04:	1884b03a 	or	r2,r3,r2
    8b08:	28000726 	beq	r5,zero,8b28 <__fixdfsi+0x6c>
    8b0c:	0085c83a 	sub	r2,zero,r2
    8b10:	f800283a 	ret
    8b14:	00a00034 	movhi	r2,32768
    8b18:	10bfffc4 	addi	r2,r2,-1
    8b1c:	2885883a 	add	r2,r5,r2
    8b20:	f800283a 	ret
    8b24:	0005883a 	mov	r2,zero
    8b28:	f800283a 	ret
    8b2c:	008104c4 	movi	r2,1043
    8b30:	1185c83a 	sub	r2,r2,r6
    8b34:	1884d83a 	srl	r2,r3,r2
    8b38:	003ff306 	br	8b08 <__ram_exceptions_end+0xfe006ae8>

00008b3c <__floatsidf>:
    8b3c:	defffd04 	addi	sp,sp,-12
    8b40:	dfc00215 	stw	ra,8(sp)
    8b44:	dc400115 	stw	r17,4(sp)
    8b48:	dc000015 	stw	r16,0(sp)
    8b4c:	20002b26 	beq	r4,zero,8bfc <__floatsidf+0xc0>
    8b50:	2023883a 	mov	r17,r4
    8b54:	2020d7fa 	srli	r16,r4,31
    8b58:	20002d16 	blt	r4,zero,8c10 <__floatsidf+0xd4>
    8b5c:	8809883a 	mov	r4,r17
    8b60:	0008f780 	call	8f78 <__clzsi2>
    8b64:	01410784 	movi	r5,1054
    8b68:	288bc83a 	sub	r5,r5,r2
    8b6c:	01010cc4 	movi	r4,1075
    8b70:	2149c83a 	sub	r4,r4,r5
    8b74:	00c007c4 	movi	r3,31
    8b78:	1900160e 	bge	r3,r4,8bd4 <__floatsidf+0x98>
    8b7c:	00c104c4 	movi	r3,1043
    8b80:	1947c83a 	sub	r3,r3,r5
    8b84:	88c6983a 	sll	r3,r17,r3
    8b88:	00800434 	movhi	r2,16
    8b8c:	10bfffc4 	addi	r2,r2,-1
    8b90:	1886703a 	and	r3,r3,r2
    8b94:	2941ffcc 	andi	r5,r5,2047
    8b98:	800d883a 	mov	r6,r16
    8b9c:	0005883a 	mov	r2,zero
    8ba0:	280a953a 	slli	r5,r5,20
    8ba4:	31803fcc 	andi	r6,r6,255
    8ba8:	01000434 	movhi	r4,16
    8bac:	300c97fa 	slli	r6,r6,31
    8bb0:	213fffc4 	addi	r4,r4,-1
    8bb4:	1906703a 	and	r3,r3,r4
    8bb8:	1946b03a 	or	r3,r3,r5
    8bbc:	1986b03a 	or	r3,r3,r6
    8bc0:	dfc00217 	ldw	ra,8(sp)
    8bc4:	dc400117 	ldw	r17,4(sp)
    8bc8:	dc000017 	ldw	r16,0(sp)
    8bcc:	dec00304 	addi	sp,sp,12
    8bd0:	f800283a 	ret
    8bd4:	00c002c4 	movi	r3,11
    8bd8:	1887c83a 	sub	r3,r3,r2
    8bdc:	88c6d83a 	srl	r3,r17,r3
    8be0:	8904983a 	sll	r2,r17,r4
    8be4:	01000434 	movhi	r4,16
    8be8:	213fffc4 	addi	r4,r4,-1
    8bec:	2941ffcc 	andi	r5,r5,2047
    8bf0:	1906703a 	and	r3,r3,r4
    8bf4:	800d883a 	mov	r6,r16
    8bf8:	003fe906 	br	8ba0 <__ram_exceptions_end+0xfe006b80>
    8bfc:	000d883a 	mov	r6,zero
    8c00:	000b883a 	mov	r5,zero
    8c04:	0007883a 	mov	r3,zero
    8c08:	0005883a 	mov	r2,zero
    8c0c:	003fe406 	br	8ba0 <__ram_exceptions_end+0xfe006b80>
    8c10:	0123c83a 	sub	r17,zero,r4
    8c14:	003fd106 	br	8b5c <__ram_exceptions_end+0xfe006b3c>

00008c18 <__floatunsidf>:
    8c18:	defffe04 	addi	sp,sp,-8
    8c1c:	dc000015 	stw	r16,0(sp)
    8c20:	dfc00115 	stw	ra,4(sp)
    8c24:	2021883a 	mov	r16,r4
    8c28:	20002226 	beq	r4,zero,8cb4 <__floatunsidf+0x9c>
    8c2c:	0008f780 	call	8f78 <__clzsi2>
    8c30:	01010784 	movi	r4,1054
    8c34:	2089c83a 	sub	r4,r4,r2
    8c38:	01810cc4 	movi	r6,1075
    8c3c:	310dc83a 	sub	r6,r6,r4
    8c40:	00c007c4 	movi	r3,31
    8c44:	1980120e 	bge	r3,r6,8c90 <__floatunsidf+0x78>
    8c48:	00c104c4 	movi	r3,1043
    8c4c:	1907c83a 	sub	r3,r3,r4
    8c50:	80ca983a 	sll	r5,r16,r3
    8c54:	00800434 	movhi	r2,16
    8c58:	10bfffc4 	addi	r2,r2,-1
    8c5c:	2101ffcc 	andi	r4,r4,2047
    8c60:	0021883a 	mov	r16,zero
    8c64:	288a703a 	and	r5,r5,r2
    8c68:	2008953a 	slli	r4,r4,20
    8c6c:	00c00434 	movhi	r3,16
    8c70:	18ffffc4 	addi	r3,r3,-1
    8c74:	28c6703a 	and	r3,r5,r3
    8c78:	8005883a 	mov	r2,r16
    8c7c:	1906b03a 	or	r3,r3,r4
    8c80:	dfc00117 	ldw	ra,4(sp)
    8c84:	dc000017 	ldw	r16,0(sp)
    8c88:	dec00204 	addi	sp,sp,8
    8c8c:	f800283a 	ret
    8c90:	00c002c4 	movi	r3,11
    8c94:	188bc83a 	sub	r5,r3,r2
    8c98:	814ad83a 	srl	r5,r16,r5
    8c9c:	00c00434 	movhi	r3,16
    8ca0:	18ffffc4 	addi	r3,r3,-1
    8ca4:	81a0983a 	sll	r16,r16,r6
    8ca8:	2101ffcc 	andi	r4,r4,2047
    8cac:	28ca703a 	and	r5,r5,r3
    8cb0:	003fed06 	br	8c68 <__ram_exceptions_end+0xfe006c48>
    8cb4:	0009883a 	mov	r4,zero
    8cb8:	000b883a 	mov	r5,zero
    8cbc:	003fea06 	br	8c68 <__ram_exceptions_end+0xfe006c48>

00008cc0 <__extendsfdf2>:
    8cc0:	200ad5fa 	srli	r5,r4,23
    8cc4:	defffd04 	addi	sp,sp,-12
    8cc8:	dc400115 	stw	r17,4(sp)
    8ccc:	29403fcc 	andi	r5,r5,255
    8cd0:	29800044 	addi	r6,r5,1
    8cd4:	04402034 	movhi	r17,128
    8cd8:	dc000015 	stw	r16,0(sp)
    8cdc:	8c7fffc4 	addi	r17,r17,-1
    8ce0:	dfc00215 	stw	ra,8(sp)
    8ce4:	31803fcc 	andi	r6,r6,255
    8ce8:	00800044 	movi	r2,1
    8cec:	8922703a 	and	r17,r17,r4
    8cf0:	2020d7fa 	srli	r16,r4,31
    8cf4:	1180110e 	bge	r2,r6,8d3c <__extendsfdf2+0x7c>
    8cf8:	880cd0fa 	srli	r6,r17,3
    8cfc:	8822977a 	slli	r17,r17,29
    8d00:	2940e004 	addi	r5,r5,896
    8d04:	2941ffcc 	andi	r5,r5,2047
    8d08:	2804953a 	slli	r2,r5,20
    8d0c:	01400434 	movhi	r5,16
    8d10:	800697fa 	slli	r3,r16,31
    8d14:	297fffc4 	addi	r5,r5,-1
    8d18:	314a703a 	and	r5,r6,r5
    8d1c:	288ab03a 	or	r5,r5,r2
    8d20:	28c6b03a 	or	r3,r5,r3
    8d24:	8805883a 	mov	r2,r17
    8d28:	dfc00217 	ldw	ra,8(sp)
    8d2c:	dc400117 	ldw	r17,4(sp)
    8d30:	dc000017 	ldw	r16,0(sp)
    8d34:	dec00304 	addi	sp,sp,12
    8d38:	f800283a 	ret
    8d3c:	2800111e 	bne	r5,zero,8d84 <__extendsfdf2+0xc4>
    8d40:	88001c26 	beq	r17,zero,8db4 <__extendsfdf2+0xf4>
    8d44:	8809883a 	mov	r4,r17
    8d48:	0008f780 	call	8f78 <__clzsi2>
    8d4c:	00c00284 	movi	r3,10
    8d50:	18801b16 	blt	r3,r2,8dc0 <__extendsfdf2+0x100>
    8d54:	018002c4 	movi	r6,11
    8d58:	308dc83a 	sub	r6,r6,r2
    8d5c:	11000544 	addi	r4,r2,21
    8d60:	8986d83a 	srl	r3,r17,r6
    8d64:	8922983a 	sll	r17,r17,r4
    8d68:	0180e244 	movi	r6,905
    8d6c:	01400434 	movhi	r5,16
    8d70:	3085c83a 	sub	r2,r6,r2
    8d74:	297fffc4 	addi	r5,r5,-1
    8d78:	194c703a 	and	r6,r3,r5
    8d7c:	1141ffcc 	andi	r5,r2,2047
    8d80:	003fe006 	br	8d04 <__ram_exceptions_end+0xfe006ce4>
    8d84:	88000826 	beq	r17,zero,8da8 <__extendsfdf2+0xe8>
    8d88:	880cd0fa 	srli	r6,r17,3
    8d8c:	00800434 	movhi	r2,16
    8d90:	10bfffc4 	addi	r2,r2,-1
    8d94:	31800234 	orhi	r6,r6,8
    8d98:	8822977a 	slli	r17,r17,29
    8d9c:	308c703a 	and	r6,r6,r2
    8da0:	0141ffc4 	movi	r5,2047
    8da4:	003fd706 	br	8d04 <__ram_exceptions_end+0xfe006ce4>
    8da8:	0141ffc4 	movi	r5,2047
    8dac:	000d883a 	mov	r6,zero
    8db0:	003fd406 	br	8d04 <__ram_exceptions_end+0xfe006ce4>
    8db4:	000b883a 	mov	r5,zero
    8db8:	000d883a 	mov	r6,zero
    8dbc:	003fd106 	br	8d04 <__ram_exceptions_end+0xfe006ce4>
    8dc0:	11bffd44 	addi	r6,r2,-11
    8dc4:	8986983a 	sll	r3,r17,r6
    8dc8:	0023883a 	mov	r17,zero
    8dcc:	003fe606 	br	8d68 <__ram_exceptions_end+0xfe006d48>

00008dd0 <__truncdfsf2>:
    8dd0:	2810d53a 	srli	r8,r5,20
    8dd4:	01c00434 	movhi	r7,16
    8dd8:	39ffffc4 	addi	r7,r7,-1
    8ddc:	29ce703a 	and	r7,r5,r7
    8de0:	4201ffcc 	andi	r8,r8,2047
    8de4:	380e90fa 	slli	r7,r7,3
    8de8:	200cd77a 	srli	r6,r4,29
    8dec:	42400044 	addi	r9,r8,1
    8df0:	4a41ffcc 	andi	r9,r9,2047
    8df4:	00c00044 	movi	r3,1
    8df8:	280ad7fa 	srli	r5,r5,31
    8dfc:	31ceb03a 	or	r7,r6,r7
    8e00:	200490fa 	slli	r2,r4,3
    8e04:	1a40230e 	bge	r3,r9,8e94 <__truncdfsf2+0xc4>
    8e08:	40ff2004 	addi	r3,r8,-896
    8e0c:	01803f84 	movi	r6,254
    8e10:	30c01516 	blt	r6,r3,8e68 <__truncdfsf2+0x98>
    8e14:	00c0380e 	bge	zero,r3,8ef8 <__truncdfsf2+0x128>
    8e18:	200c91ba 	slli	r6,r4,6
    8e1c:	380e90fa 	slli	r7,r7,3
    8e20:	1004d77a 	srli	r2,r2,29
    8e24:	300cc03a 	cmpne	r6,r6,zero
    8e28:	31ccb03a 	or	r6,r6,r7
    8e2c:	308cb03a 	or	r6,r6,r2
    8e30:	308001cc 	andi	r2,r6,7
    8e34:	10000426 	beq	r2,zero,8e48 <__truncdfsf2+0x78>
    8e38:	308003cc 	andi	r2,r6,15
    8e3c:	01000104 	movi	r4,4
    8e40:	11000126 	beq	r2,r4,8e48 <__truncdfsf2+0x78>
    8e44:	31800104 	addi	r6,r6,4
    8e48:	3081002c 	andhi	r2,r6,1024
    8e4c:	10001626 	beq	r2,zero,8ea8 <__truncdfsf2+0xd8>
    8e50:	18c00044 	addi	r3,r3,1
    8e54:	00803fc4 	movi	r2,255
    8e58:	18800326 	beq	r3,r2,8e68 <__truncdfsf2+0x98>
    8e5c:	300c91ba 	slli	r6,r6,6
    8e60:	300cd27a 	srli	r6,r6,9
    8e64:	00000206 	br	8e70 <__truncdfsf2+0xa0>
    8e68:	00ffffc4 	movi	r3,-1
    8e6c:	000d883a 	mov	r6,zero
    8e70:	18c03fcc 	andi	r3,r3,255
    8e74:	180895fa 	slli	r4,r3,23
    8e78:	00c02034 	movhi	r3,128
    8e7c:	280a97fa 	slli	r5,r5,31
    8e80:	18ffffc4 	addi	r3,r3,-1
    8e84:	30c6703a 	and	r3,r6,r3
    8e88:	1906b03a 	or	r3,r3,r4
    8e8c:	1944b03a 	or	r2,r3,r5
    8e90:	f800283a 	ret
    8e94:	40000b1e 	bne	r8,zero,8ec4 <__truncdfsf2+0xf4>
    8e98:	388cb03a 	or	r6,r7,r2
    8e9c:	0007883a 	mov	r3,zero
    8ea0:	30000426 	beq	r6,zero,8eb4 <__truncdfsf2+0xe4>
    8ea4:	01800144 	movi	r6,5
    8ea8:	00803fc4 	movi	r2,255
    8eac:	300cd0fa 	srli	r6,r6,3
    8eb0:	18800a26 	beq	r3,r2,8edc <__truncdfsf2+0x10c>
    8eb4:	00802034 	movhi	r2,128
    8eb8:	10bfffc4 	addi	r2,r2,-1
    8ebc:	308c703a 	and	r6,r6,r2
    8ec0:	003feb06 	br	8e70 <__ram_exceptions_end+0xfe006e50>
    8ec4:	3888b03a 	or	r4,r7,r2
    8ec8:	203fe726 	beq	r4,zero,8e68 <__ram_exceptions_end+0xfe006e48>
    8ecc:	380c90fa 	slli	r6,r7,3
    8ed0:	00c03fc4 	movi	r3,255
    8ed4:	31808034 	orhi	r6,r6,512
    8ed8:	003fd506 	br	8e30 <__ram_exceptions_end+0xfe006e10>
    8edc:	303fe226 	beq	r6,zero,8e68 <__ram_exceptions_end+0xfe006e48>
    8ee0:	00802034 	movhi	r2,128
    8ee4:	31801034 	orhi	r6,r6,64
    8ee8:	10bfffc4 	addi	r2,r2,-1
    8eec:	00ffffc4 	movi	r3,-1
    8ef0:	308c703a 	and	r6,r6,r2
    8ef4:	003fde06 	br	8e70 <__ram_exceptions_end+0xfe006e50>
    8ef8:	013ffa44 	movi	r4,-23
    8efc:	19000e16 	blt	r3,r4,8f38 <__truncdfsf2+0x168>
    8f00:	01000784 	movi	r4,30
    8f04:	20c9c83a 	sub	r4,r4,r3
    8f08:	018007c4 	movi	r6,31
    8f0c:	39c02034 	orhi	r7,r7,128
    8f10:	31000b16 	blt	r6,r4,8f40 <__truncdfsf2+0x170>
    8f14:	423f2084 	addi	r8,r8,-894
    8f18:	120c983a 	sll	r6,r2,r8
    8f1c:	3a0e983a 	sll	r7,r7,r8
    8f20:	1104d83a 	srl	r2,r2,r4
    8f24:	300cc03a 	cmpne	r6,r6,zero
    8f28:	31ceb03a 	or	r7,r6,r7
    8f2c:	388cb03a 	or	r6,r7,r2
    8f30:	0007883a 	mov	r3,zero
    8f34:	003fbe06 	br	8e30 <__ram_exceptions_end+0xfe006e10>
    8f38:	0007883a 	mov	r3,zero
    8f3c:	003fd906 	br	8ea4 <__ram_exceptions_end+0xfe006e84>
    8f40:	01bfff84 	movi	r6,-2
    8f44:	30cdc83a 	sub	r6,r6,r3
    8f48:	00c00804 	movi	r3,32
    8f4c:	398cd83a 	srl	r6,r7,r6
    8f50:	20c00726 	beq	r4,r3,8f70 <__truncdfsf2+0x1a0>
    8f54:	423f2884 	addi	r8,r8,-862
    8f58:	3a0e983a 	sll	r7,r7,r8
    8f5c:	3884b03a 	or	r2,r7,r2
    8f60:	1004c03a 	cmpne	r2,r2,zero
    8f64:	118cb03a 	or	r6,r2,r6
    8f68:	0007883a 	mov	r3,zero
    8f6c:	003fb006 	br	8e30 <__ram_exceptions_end+0xfe006e10>
    8f70:	000f883a 	mov	r7,zero
    8f74:	003ff906 	br	8f5c <__ram_exceptions_end+0xfe006f3c>

00008f78 <__clzsi2>:
    8f78:	00bfffd4 	movui	r2,65535
    8f7c:	11000536 	bltu	r2,r4,8f94 <__clzsi2+0x1c>
    8f80:	00803fc4 	movi	r2,255
    8f84:	11000f36 	bltu	r2,r4,8fc4 <__clzsi2+0x4c>
    8f88:	00800804 	movi	r2,32
    8f8c:	0007883a 	mov	r3,zero
    8f90:	00000506 	br	8fa8 <__clzsi2+0x30>
    8f94:	00804034 	movhi	r2,256
    8f98:	10bfffc4 	addi	r2,r2,-1
    8f9c:	11000c2e 	bgeu	r2,r4,8fd0 <__clzsi2+0x58>
    8fa0:	00800204 	movi	r2,8
    8fa4:	00c00604 	movi	r3,24
    8fa8:	20c8d83a 	srl	r4,r4,r3
    8fac:	00c00074 	movhi	r3,1
    8fb0:	18e49c04 	addi	r3,r3,-28048
    8fb4:	1909883a 	add	r4,r3,r4
    8fb8:	20c00003 	ldbu	r3,0(r4)
    8fbc:	10c5c83a 	sub	r2,r2,r3
    8fc0:	f800283a 	ret
    8fc4:	00800604 	movi	r2,24
    8fc8:	00c00204 	movi	r3,8
    8fcc:	003ff606 	br	8fa8 <__ram_exceptions_end+0xfe006f88>
    8fd0:	00800404 	movi	r2,16
    8fd4:	1007883a 	mov	r3,r2
    8fd8:	003ff306 	br	8fa8 <__ram_exceptions_end+0xfe006f88>

00008fdc <__errno>:
    8fdc:	00800074 	movhi	r2,1
    8fe0:	10ad1c04 	addi	r2,r2,-19344
    8fe4:	10800017 	ldw	r2,0(r2)
    8fe8:	f800283a 	ret

00008fec <memset>:
    8fec:	2005883a 	mov	r2,r4
    8ff0:	2007883a 	mov	r3,r4
    8ff4:	218d883a 	add	r6,r4,r6
    8ff8:	19800326 	beq	r3,r6,9008 <memset+0x1c>
    8ffc:	19400005 	stb	r5,0(r3)
    9000:	18c00044 	addi	r3,r3,1
    9004:	003ffc06 	br	8ff8 <__ram_exceptions_end+0xfe006fd8>
    9008:	f800283a 	ret

0000900c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    900c:	deffff04 	addi	sp,sp,-4
    9010:	01000074 	movhi	r4,1
    9014:	01400074 	movhi	r5,1
    9018:	dfc00015 	stw	ra,0(sp)
    901c:	2124dc04 	addi	r4,r4,-27792
    9020:	296d1e04 	addi	r5,r5,-19336

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    9024:	2140061e 	bne	r4,r5,9040 <alt_load+0x34>
    9028:	01008034 	movhi	r4,512
    902c:	01400034 	movhi	r5,0
    9030:	21080804 	addi	r4,r4,8224
    9034:	29400004 	addi	r5,r5,0
    9038:	2140121e 	bne	r4,r5,9084 <alt_load+0x78>
    903c:	00000b06 	br	906c <alt_load+0x60>
    9040:	00c00074 	movhi	r3,1
    9044:	18ed1e04 	addi	r3,r3,-19336
    9048:	1907c83a 	sub	r3,r3,r4
    904c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    9050:	10fff526 	beq	r2,r3,9028 <__ram_exceptions_end+0xfe007008>
    {
      *to++ = *from++;
    9054:	114f883a 	add	r7,r2,r5
    9058:	39c00017 	ldw	r7,0(r7)
    905c:	110d883a 	add	r6,r2,r4
    9060:	10800104 	addi	r2,r2,4
    9064:	31c00015 	stw	r7,0(r6)
    9068:	003ff906 	br	9050 <__ram_exceptions_end+0xfe007030>
    906c:	01000074 	movhi	r4,1
    9070:	01400074 	movhi	r5,1
    9074:	21247204 	addi	r4,r4,-28216
    9078:	29647204 	addi	r5,r5,-28216

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    907c:	2140101e 	bne	r4,r5,90c0 <alt_load+0xb4>
    9080:	00000b06 	br	90b0 <alt_load+0xa4>
    9084:	00c08034 	movhi	r3,512
    9088:	18c80804 	addi	r3,r3,8224
    908c:	1907c83a 	sub	r3,r3,r4
    9090:	0005883a 	mov	r2,zero
  {
    while( to != end )
    9094:	10fff526 	beq	r2,r3,906c <__ram_exceptions_end+0xfe00704c>
    {
      *to++ = *from++;
    9098:	114f883a 	add	r7,r2,r5
    909c:	39c00017 	ldw	r7,0(r7)
    90a0:	110d883a 	add	r6,r2,r4
    90a4:	10800104 	addi	r2,r2,4
    90a8:	31c00015 	stw	r7,0(r6)
    90ac:	003ff906 	br	9094 <__ram_exceptions_end+0xfe007074>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    90b0:	00091b80 	call	91b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    90b4:	dfc00017 	ldw	ra,0(sp)
    90b8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    90bc:	00091bc1 	jmpi	91bc <alt_icache_flush_all>
    90c0:	00c00074 	movhi	r3,1
    90c4:	18e4dc04 	addi	r3,r3,-27792
    90c8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    90cc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    90d0:	18bff726 	beq	r3,r2,90b0 <__ram_exceptions_end+0xfe007090>
    {
      *to++ = *from++;
    90d4:	114f883a 	add	r7,r2,r5
    90d8:	39c00017 	ldw	r7,0(r7)
    90dc:	110d883a 	add	r6,r2,r4
    90e0:	10800104 	addi	r2,r2,4
    90e4:	31c00015 	stw	r7,0(r6)
    90e8:	003ff906 	br	90d0 <__ram_exceptions_end+0xfe0070b0>

000090ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    90ec:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    90f0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    90f4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    90f8:	00091600 	call	9160 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    90fc:	00091800 	call	9180 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    9100:	d1a84c17 	ldw	r6,-24272(gp)
    9104:	d1684d17 	ldw	r5,-24268(gp)
    9108:	d1284e17 	ldw	r4,-24264(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    910c:	dfc00017 	ldw	ra,0(sp)
    9110:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    9114:	00016741 	jmpi	1674 <main>

00009118 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    9118:	defffd04 	addi	sp,sp,-12
    911c:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    9120:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    9124:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    9128:	01000074 	movhi	r4,1
    912c:	000f883a 	mov	r7,zero
    9130:	01800044 	movi	r6,1
    9134:	d80b883a 	mov	r5,sp
    9138:	212d1d04 	addi	r4,r4,-19340
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    913c:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    9140:	00091840 	call	9184 <altera_avalon_jtag_uart_write>
    9144:	00ffffc4 	movi	r3,-1
    9148:	10c00126 	beq	r2,r3,9150 <alt_putchar+0x38>
        return -1;
    }
    return c;
    914c:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    9150:	dfc00217 	ldw	ra,8(sp)
    9154:	dc000117 	ldw	r16,4(sp)
    9158:	dec00304 	addi	sp,sp,12
    915c:	f800283a 	ret

00009160 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9160:	deffff04 	addi	sp,sp,-4
    9164:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2E, nios2e);
    9168:	00091c00 	call	91c0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    916c:	00800044 	movi	r2,1
    9170:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9174:	dfc00017 	ldw	ra,0(sp)
    9178:	dec00104 	addi	sp,sp,4
    917c:	f800283a 	ret

00009180 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9180:	f800283a 	ret

00009184 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    9184:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9188:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    918c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9190:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9194:	2980072e 	bgeu	r5,r6,91b4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9198:	38c00037 	ldwio	r3,0(r7)
    919c:	18ffffec 	andhi	r3,r3,65535
    91a0:	183ffc26 	beq	r3,zero,9194 <__ram_exceptions_end+0xfe007174>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    91a4:	28c00007 	ldb	r3,0(r5)
    91a8:	20c00035 	stwio	r3,0(r4)
    91ac:	29400044 	addi	r5,r5,1
    91b0:	003ff806 	br	9194 <__ram_exceptions_end+0xfe007174>

  return count;
}
    91b4:	f800283a 	ret

000091b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    91b8:	f800283a 	ret

000091bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    91bc:	f800283a 	ret

000091c0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    91c0:	000170fa 	wrctl	ienable,zero
    91c4:	f800283a 	ret
